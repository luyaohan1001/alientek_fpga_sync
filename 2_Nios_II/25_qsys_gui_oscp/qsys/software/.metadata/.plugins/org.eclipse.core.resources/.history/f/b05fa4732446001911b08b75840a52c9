//****************************************Copyright (c)***********************************//
//技术支持：www.openedv.com
//淘宝店铺：http://openedv.taobao.com
//关注微信公众平台微信号："正点原子"，免费获取FPGA & STM32资料。
//版权所有，盗版必究。
//Copyright(C) 正点原子 2018-2028
//All rights reserved
//----------------------------------------------------------------------------------------
// File name:           touch.c
// Last modified Date:  2019/3/6 13:28:14
// Last Version:        V1.0
// Descriptions:        触摸
//----------------------------------------------------------------------------------------
// Created by:          正点原子
// Created date:        
// Version:             V1.0
// Descriptions:        The original version
//
//----------------------------------------------------------------------------------------
//****************************************************************************************//

#include <unistd.h>
#include "system.h"
#include "draw_disp.h"
#include "GUI.h"
#include "touch.h";
#include "mculcd.h";

extern _disp_dev dispdev;	//界面显示参数
extern _lcd_gui lcdgui;

//触摸处理
void TouchPro(alt_u16 x_pos,alt_u16 y_pos){
    alt_u16 t = y_pos/dispdev.set_area_height;
    alt_u16 touch_func = 0;
    u16 s_x=0,s_y=0;
	if(x_pos>=lcdgui.width-dispdev.set_area_width && x_pos<lcdgui.width && y_pos<lcdgui.height)
    {
		if(t>=0 && t<2)
			touch_func = t;
		else if(t>=2)
		{
			if(t>6)
				t = 6;
			if(x_pos <= lcdgui.width - dispdev.set_area_width/2)
				touch_func = (t-1)*2;
			else
				touch_func = (t-1)*2+1;
		}
    }
	else if(x_pos >= lcdgui.width-9*dispdev.set_area_width/5 && x_pos < lcdgui.width-dispdev.set_area_width && y_pos<=dispdev.wave_ystart)
		touch_func = TP_EDGE;
	else
		return;
	switch(touch_func){
	case TP_AUTO :
		TouchFBStringDisp(" AUTO ",lcdgui.width-dispdev.set_area_width/2,dispdev.set_area_height/2,GUI_LIGHTBLUE);
//		TouchAUTODisp();
		break;
	case TP_RUN_STOP :
		TouchFBRunDisp();
		if(dispdev.run_flag==0)
			dispdev.run_flag=1;
		else
			dispdev.run_flag=0;
		SendRunState();
		break;
	case TP_LEFT :
		TouchFBLeftDisp();
		TouchFBStringDisp(" ← ",lcdgui.width-3*dispdev.set_area_width/4,2*lcdgui.height/7+dispdev.set_area_height/2,GUI_LIGHTBLUE);
		if(dispdev.hor_zero_mark < 19){
			HorZeroAddDisp();
			SendHorZeroPixel();
		}
		break;
	case TP_RIGHT:
		TouchFBRightDisp();
		if(dispdev.hor_zero_mark > 1){
			HorZeroSubDisp();
			SendHorZeroPixel();
		}
		break;
	case TP_UP :
		TouchFBUpDisp();
		if(dispdev.ver_zero_mark < 15){
			VerZeroAddDisp();
			SendVerZeroPixel();
		}
		break;
	case TP_DOWN :
		TouchFBDownDisp();
		if(dispdev.ver_zero_mark > 1){
			VerZeroSubDisp();
			SendVerZeroPixel();
		}
		break;
	case TP_HOR_ADD :
		TouchFBHorAddDisp();
		if(dispdev.hor_res_gears < 9){
			dispdev.hor_res_gears++;
			HorSetDataDisp(dispdev.hor_res_gears);
			SendHorRes();
		}
		break;
	case TP_HOR_SUB :
		TouchFBHorSubDisp();
		if(dispdev.hor_res_gears > 0){
			dispdev.hor_res_gears--;
			HorSetDataDisp(dispdev.hor_res_gears);
			SendHorRes();
		}
		break;
	case TP_VER_ADD :
		TouchFBVerAddDisp();
		if(dispdev.ver_res_gears < 5){
			dispdev.ver_res_gears++;
			VerSetDataDisp(dispdev.ver_res_gears);
			if(dispdev.trig_gears >= 8)
				dispdev.trig_gears = dispdev.trig_gears -  (dispdev.trig_gears-8)/2;
			else
				dispdev.trig_gears = dispdev.trig_gears +  (8-dispdev.trig_gears)/2;
			SendVerRes();
		}
		break;
	case TP_VER_SUB :
		TouchFBVerSubDisp();
		if(dispdev.ver_res_gears > 0){
			dispdev.ver_res_gears--;
			VerSetDataDisp(dispdev.ver_res_gears);

			if(dispdev.trig_gears >= 8)
				dispdev.trig_gears = dispdev.trig_gears +  (dispdev.trig_gears-8)/2;
			else
				dispdev.trig_gears = dispdev.trig_gears -  (8-dispdev.trig_gears)/2;
			if(dispdev.trig_gears > 15)
				dispdev.trig_gears = 15;
			else if(dispdev.trig_gears<1)
				dispdev.trig_gears = 1;
			SendVerRes();
		}
		break;
	case TP_TRIG_ADD :
		TouchFBTrigAddDisp();
		if(dispdev.trig_gears<15){
			dispdev.trig_gears++;
			EdgeSetDataDisp(dispdev.trig_gears);
			SendTriglevel();
		}
		break;
	case TP_TRIG_SUB :
		TouchFBTrigSubDisp();
		if(dispdev.trig_gears>1){
			dispdev.trig_gears--;
			EdgeSetDataDisp(dispdev.trig_gears);
			SendTriglevel();
		}
		break;
	case TP_EDGE :
		TouchFBTrigTypeDisp();
		if(dispdev.trig_type == 0)
			dispdev.trig_type = 1;
		else
			dispdev.trig_type = 0;
		Draw_EdgeDisp(dispdev.trig_type);
		SendTrigType();
		break;
	}
	alt_dcache_flush_all();
}

void TouchAUTODisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_LIGHTBLUE);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt(" AUTO ",lcdgui.width-dispdev.set_area_width/2,dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(250000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt(" AUTO ",lcdgui.width-dispdev.set_area_width/2,dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBRunDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_LIGHTBLUE);
	GUI_SetTextMode(GUI_TM_NORMAL);
	if(dispdev.run_flag){
		GUI_SetColor(GUI_YELLOW);           //设置GUI前景色
		GUI_DispStringAt(" STOP ",lcdgui.width-dispdev.set_area_width/2,lcdgui.height/7+dispdev.set_area_height/2);
	}
	else{
		GUI_SetColor(GUI_RED);        //设置GUI前景色
		GUI_DispStringAt(" RUN  ",lcdgui.width-dispdev.set_area_width/2,lcdgui.height/7+dispdev.set_area_height/2);
	}
	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	if(dispdev.run_flag){
		GUI_SetColor(GUI_RED);           //设置GUI前景色
		GUI_DispStringAt(" RUN  ",lcdgui.width-dispdev.set_area_width/2,lcdgui.height/7+dispdev.set_area_height/2);
	}
	else{
		GUI_SetColor(GUI_YELLOW);        //设置GUI前景色
		GUI_DispStringAt(" STOP ",lcdgui.width-dispdev.set_area_width/2,lcdgui.height/7+dispdev.set_area_height/2);
	}
	alt_dcache_flush_all();
}

void TouchFBLeftDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.hor_zero_mark < 19)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt(" ← ",lcdgui.width-3*dispdev.set_area_width/4,2*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt(" ← ",lcdgui.width-3*dispdev.set_area_width/4,2*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBRightDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.hor_zero_mark > 1)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt(" → ",lcdgui.width-1*dispdev.set_area_width/4,2*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt(" → ",lcdgui.width-1*dispdev.set_area_width/4,2*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBUpDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.ver_zero_mark < 15)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt(" ↑ ",lcdgui.width-3*dispdev.set_area_width/4,3*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt(" ↑ ",lcdgui.width-3*dispdev.set_area_width/4,3*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBDownDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.ver_zero_mark > 1)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt(" ↓ ",lcdgui.width-1*dispdev.set_area_width/4,3*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt(" ↓ ",lcdgui.width-1*dispdev.set_area_width/4,3*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBHorAddDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.hor_res_gears < 9)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt("Hor+",lcdgui.width-3*dispdev.set_area_width/4,4*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt("Hor+",lcdgui.width-3*dispdev.set_area_width/4,4*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBHorSubDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.hor_res_gears > 0)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt("Hor-",lcdgui.width-1*dispdev.set_area_width/4,4*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt("Hor-",lcdgui.width-1*dispdev.set_area_width/4,4*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBVerAddDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.ver_res_gears < 5)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt("Ver+",lcdgui.width-3*dispdev.set_area_width/4,5*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt("Ver+",lcdgui.width-3*dispdev.set_area_width/4,5*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBVerSubDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.ver_res_gears > 0)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt("Ver-",lcdgui.width-1*dispdev.set_area_width/4,5*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt("Ver-",lcdgui.width-1*dispdev.set_area_width/4,5*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}


void TouchFBTrigAddDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.trig_gears < 15)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt("Trig+",lcdgui.width-3*dispdev.set_area_width/4,6*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt("Trig+",lcdgui.width-3*dispdev.set_area_width/4,6*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBTrigSubDisp(){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.trig_gears > 1)
		GUI_SetBkColor(GUI_LIGHTBLUE);
	else
		GUI_SetBkColor(GUI_LIGHTRED);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt("Trig-",lcdgui.width-1*dispdev.set_area_width/4,6*lcdgui.height/7+dispdev.set_area_height/2);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt("Trig-",lcdgui.width-1*dispdev.set_area_width/4,6*lcdgui.height/7+dispdev.set_area_height/2);
	alt_dcache_flush_all();
}

void TouchFBTrigTypeDisp(){
	GUI_SetBkColor(GUI_LIGHTBLUE);    //设置GUI背景色
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.trig_type==0)
		GUI_DispStringAt("Edge ▼",lcdgui.width-7*dispdev.set_area_width/5+5,(dispdev.wave_ystart-17)/2);    //沿变设置
	else
		GUI_DispStringAt("Edge ▲",lcdgui.width-7*dispdev.set_area_width/5+5,(dispdev.wave_ystart-17)/2);    //沿变设置

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	if(dispdev.trig_type == 0)
		GUI_DispStringAt("Edge ▼",lcdgui.width-7*dispdev.set_area_width/5+5,(dispdev.wave_ystart-17)/2);    //沿变设置
	else
		GUI_DispStringAt("Edge ▲",lcdgui.width-7*dispdev.set_area_width/5+5,(dispdev.wave_ystart-17)/2);    //沿变设置
}

void TouchFBStringDisp(const char *s, int x, int y,unsigned long BkColor){
	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(BkColor);
	GUI_SetTextMode(GUI_TM_NORMAL);
	GUI_SetColor(GUI_YELLOW);
	GUI_DispStringAt(s,x,y);

	alt_dcache_flush_all();
	usleep(200000);

	GUI_SetTextAlign(GUI_TA_HCENTER|GUI_TA_VCENTER);
	GUI_SetBkColor(GUI_DARKCYAN);
	GUI_DispStringAt(s,x,y);
	alt_dcache_flush_all();
}



