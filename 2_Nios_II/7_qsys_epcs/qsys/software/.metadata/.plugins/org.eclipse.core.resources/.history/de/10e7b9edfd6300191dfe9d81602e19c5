//****************************************Copyright (c)***********************************//
//技术支持：www.openedv.com
//淘宝店铺：http://openedv.taobao.com
//关注微信公众平台微信号："正点原子"，免费获取FPGA & STM32资料。
//版权所有，盗版必究。
//Copyright(C) 正点原子 2018-2028
//All rights reserved
//----------------------------------------------------------------------------------------
// File name:           qsys_epcs_rw
// Last modified Date:  2018/07/26 21:35:40
// Last Version:        V1.0
// Descriptions:        实现EPCS FLASH的读写
//----------------------------------------------------------------------------------------
// Created by:          正点原子
// Created date:        2018/07/26 21:35:03
// Version:             V1.0
// Descriptions:        The original version
//
//----------------------------------------------------------------------------------------
//****************************************************************************************//

#include <stdio.h>
#include <string.h>
#include "system.h"
#include "sys/alt_flash.h"

#define BUF_SIZE 100

int main(void)
{
    flash_region* regions_info;
    alt_flash_fd* fd;
    int number_of_regions;
    int flash_rw_offset;
    int i,ret_code;
    char data_wr0[50];
    char data_wr[BUF_SIZE];
    char data_rd[BUF_SIZE];

    memset(data_wr0,0,50);

    //初始化data_wr数组
    printf("写入flash的数据： ");
    for (i=0; i<BUF_SIZE; i++){
        data_wr[i] = i;
        printf("%d,",data_wr[i]);
    }
    printf("\n");

    //打开 EPCS_FLASH 器件，获取 EPCS_FLASH 器件句柄
    fd = alt_flash_open_dev(EPCS_FLASH_NAME);

    //返回值为0表示打开器件失败
    if(!fd){
        printf("Can't open flash device\n");
    }
    //成功打开 EPCS_FLASH 器件
    else {
    	//获取 EPCS_FLASH 器件信息
        ret_code = alt_get_flash_info(fd, &regions_info, &number_of_regions);

		//返回值ret_code为0,表示获取成功FLASH信息
		if(!ret_code){

			//打印FLASH信息
			printf("\nFlash Region 信息：\n");
			printf("region_number = %d\n"	   ,number_of_regions);
			printf("region_offset = %d\n"      ,regions_info->offset);
			printf("region_size   = %d Bytes\n",regions_info->region_size);
			printf("block_number  = %d\n"	   ,regions_info->number_of_blocks);
			printf("block_size    = %d Bytes\n",regions_info->block_size);

			//指定FLASH读写的偏移地址为 "第九个Block的起始地址"
			flash_rw_offset = regions_info->offset + (regions_info->block_size)*8;

			//擦除第九个Block的内容
			alt_erase_flash_block(fd,flash_rw_offset,regions_info->block_size);

			//把data_wr数组的数据写入第九个Block
			alt_write_flash(fd,flash_rw_offset, data_wr, BUF_SIZE);

			//读取写入第九个Block的数据
			alt_read_flash(fd,flash_rw_offset,data_rd,BUF_SIZE);

			printf("\n从flash读取到的数据 ");
			for(i=0;i<BUF_SIZE;i++){
				   printf("%d,",data_rd[i]);
			}
			printf("\n");

			//将后50个数据重写为0
			alt_write_flash_block(fd,flash_rw_offset,flash_rw_offset+50,data_wr0,50);
			alt_read_flash(fd,flash_rw_offset,data_rd,BUF_SIZE);
			printf("\n后50个数据重写为0，从flash读取到的数据\n");
			for(i=0;i<BUF_SIZE;i++){
				   printf("%d,",data_rd[i]);
			}
			printf("\n");

			//重写前50个数据为0
			alt_write_flash(fd,flash_rw_offset,data_wr0,50);
			//读取写入第九个Block的数据
			alt_read_flash(fd,flash_rw_offset,data_rd,BUF_SIZE);
			printf("\n重写前50个数据，从flash读取到的数据\n");
			for(i=0;i<BUF_SIZE;i++){
				   printf("%d,",data_rd[i]);
			}
			printf("\n");

		}
		//返回值 ret_code 非0,表示获取FLASH信息失败
		else{
			printf("Can't get EPCS flash device info"); //没有获得 EPCS_FLASH 信息
		}

		alt_flash_close_dev(fd); //关闭 EPCS_FLASH 器件
	}

    return 0;
}
