
lcd_init.elf:     file format elf32-littlenios2
lcd_init.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00013a00 memsz 0x00013d08 flags rwx
    LOAD off    0x00015000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  00015000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000119fc  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000033c  02011bb4  02011bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  02011ef0  02011ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  02013a20  02013a20  00014a20  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00015028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002383e  00000000  00000000  00015da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000911a  00000000  00000000  000395de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000aa2b  00000000  00000000  000426f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001cd4  00000000  00000000  0004d124  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000325a  00000000  00000000  0004edf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010c5a  00000000  00000000  00052052  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00062cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  00062d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00066b3f  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  00066b42  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00066b4c  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00066b4d  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00066b4e  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00066b57  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00066b60  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  00066b69  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000027  00000000  00000000  00066b6d  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0006f7fc  00000000  00000000  00066b94  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
02011bb4 l    d  .rodata	00000000 .rodata
02011ef0 l    d  .rwdata	00000000 .rwdata
02013a20 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 F:/project/ov5640_mcu_lcd/qsys/software/lcd_init_bsp//obj/HAL/src/crt0.o
020001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 mculcd.c
00000000 l    df *ABS*	00000000 lcd_init.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
02005090 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
02005f7c l     F .text	00000034 __sprint_r
02011d1a l     O .rodata	00000010 blanks.3515
02011d2a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02007f40 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200997c l     F .text	00000008 __fp_lock
02009984 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
02011ef0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
02011d60 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02011ea8 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0200e198 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0200e2c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200e3e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200e40c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200e508 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0200e5f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0200e7d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02013a08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200ea50 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200eb8c l     F .text	00000038 alt_dev_reg
020128ac l     O .rwdata	000000c8 epcs_flash
02012974 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0200ec48 l     F .text	00000038 alt_flash_device_register
0200ecd4 l     F .text	0000028c alt_epcs_flash_query
0200ef60 l     F .text	000000e8 alt_epcs_flash_memcmp
0200f334 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200f7fc l     F .text	00000204 altera_avalon_jtag_uart_irq
0200fa00 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
02010098 l     F .text	00000038 epcs_test_wip
020100d0 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020108f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02010e1c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02010f54 l     F .text	00000050 alt_get_errno
02010fa4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0200c2d4 g     F .text	00000074 _mprec_log10
0200f2a8 g     F .text	0000008c alt_epcs_flash_get_info
0200c3c4 g     F .text	00000084 __any_on
0200d0c0 g     F .text	00000064 _isatty_r
02011d90 g     O .rodata	00000028 __mprec_tinytens
02000fc4 g     F .text	00000048 LCD_DrawPoint
0200e718 g     F .text	00000078 alt_main
02005ed0 g     F .text	00000044 __ashldi3
02013a98 g     O .bss	00000100 alt_irq
0200d124 g     F .text	0000006c _lseek_r
0200df04 g     F .text	0000005c __eqdf2
020139d8 g     O .rwdata	00000004 BACK_COLOR
02013d28 g       *ABS*	00000000 __alt_heap_start
02005f40 g     F .text	0000003c printf
0200cbe8 g     F .text	0000005c __sseek
02009a0c g     F .text	0000010c __sinit
0200a6a4 g     F .text	0000009c _setlocale_r
02009998 g     F .text	00000064 __sfmoreglue
0200e7b0 g     F .text	00000020 __malloc_unlock
0200b29c g     F .text	00000128 memmove
020099fc g     F .text	00000010 _cleanup
0200b4a0 g     F .text	000000a8 _Balloc
04001000 g       *ABS*	00000000 __alt_mem_epcs_flash
0200dfbc g     F .text	00000064 __gtdf2
02000648 g     F .text	00000088 LCD_DisplayOn
00000000  w      *UND*	00000000 __errno
02010108 g     F .text	000000f8 epcs_sector_erase
04001000 g     F .entry	00000000 __reset
02001a40 g     F .text	00002e58 MCULCD_Init
02004898 g     F .text	0000008c LCD_Clear
0200d058 g     F .text	00000068 _fstat_r
02013a38 g     O .bss	00000004 errno
020139d4 g     O .rwdata	00000004 POINT_COLOR
02013a40 g     O .bss	00000004 alt_argv
0201b9d4 g       *ABS*	00000000 _gp
0200ea20 g     F .text	00000030 usleep
02000a2c g     F .text	00000598 LCD_Scan_Dir
0201272c g     O .rwdata	00000180 alt_fd_list
02001288 g     F .text	000000b0 LCD_SSD_BackLightSet
02010344 g     F .text	00000068 epcs_write_status_register
02011588 g     F .text	00000090 alt_find_dev
0200b1a4 g     F .text	000000f8 memcpy
0200998c g     F .text	0000000c _cleanup_r
020057e0 g     F .text	000000d4 __floatsidf
02010edc g     F .text	00000078 alt_io_redirect
0200e020 g     F .text	0000005c __ltdf2
02000424 g     F .text	00000038 LCD_WriteRAM_Prepare
02011bb4 g       *ABS*	00000000 __DTOR_END__
0200f43c g     F .text	00000104 alt_epcs_flash_write_block
0200c230 g     F .text	000000a4 __ratio
0200fc00 g     F .text	00000218 altera_avalon_jtag_uart_read
02004ab4 g     F .text	000001b0 LCD_DrawLine
00000000  w      *UND*	00000000 malloc
02005f14 g     F .text	0000002c _printf_r
0200e2b8 g     F .text	00000008 __udivsi3
0200e558 g     F .text	000000a0 isatty
02011de0 g     O .rodata	000000c8 __mprec_tens
0200a740 g     F .text	0000000c __locale_charset
0200500c g     F .text	00000084 __fixunsdfsi
02013a34 g     O .bss	00000004 __malloc_top_pad
020006d0 g     F .text	00000088 LCD_DisplayOff
020139e4 g     O .rwdata	00000004 __mb_cur_max
0200a74c g     F .text	0000000c _localeconv_r
0200b8a0 g     F .text	0000003c __i2b
0200a060 g     F .text	000004e4 __sfvwrite_r
0200caa8 g     F .text	00000064 _sbrk_r
02000238 g     F .text	00000070 LCD_WR_CMD
0200d190 g     F .text	0000006c _read_r
020122f0 g     O .rwdata	0000000c __lc_ctype
02013a00 g     O .rwdata	00000004 alt_max_fd
02005cb8 g     F .text	00000104 __unpack_d
0200cf08 g     F .text	0000013c _fclose_r
0200994c g     F .text	00000030 fflush
02013a30 g     O .bss	00000004 __malloc_max_sbrked_mem
0200168c g     F .text	000003b4 LCD_Set_Window
020053e4 g     F .text	00000054 __adddf3
0200f3c8 g     F .text	00000074 alt_epcs_flash_erase_block
0200bfa4 g     F .text	00000148 __b2d
0200d7c4 g     F .text	0000058c __umoddi3
0200e648 g     F .text	000000d0 lseek
020139dc g     O .rwdata	00000004 _global_impure_ptr
02010608 g     F .text	00000058 epcs_exit_4_bytes_mode
0200c448 g     F .text	000005fc _realloc_r
02013d28 g       *ABS*	00000000 __bss_end
02010d2c g     F .text	000000f0 alt_iic_isr_register
0201125c g     F .text	00000104 alt_tick
0200d1fc g     F .text	000005c8 __udivdi3
02011db8 g     O .rodata	00000028 __mprec_bigtens
0200b684 g     F .text	00000104 __s2b
0200e07c g     F .text	0000011c __floatunsidf
0200bd44 g     F .text	00000058 __mcmp
02009c24 g     F .text	00000018 __fp_lock_all
02010ce0 g     F .text	0000004c alt_ic_irq_enabled
020111c4 g     F .text	00000098 alt_alarm_stop
02013a48 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000cc alt_irq_handler
02012704 g     O .rwdata	00000028 alt_dev_null
0200b788 g     F .text	00000068 __hi0bits
020058b4 g     F .text	000000d4 __fixdfsi
020004fc g     F .text	0000014c LCD_ReadPoint
020002a8 g     F .text	00000070 LCD_WR_DATA
020139f8 g     O .rwdata	00000008 alt_dev_list
0200eaa0 g     F .text	000000ec write
0200e45c g     F .text	000000ac fstat
02005e8c g     F .text	00000044 __lshrdi3
0200babc g     F .text	0000012c __pow5mult
02013a28 g     O .bss	00000004 __nlocale_changed
0200e2c0 g     F .text	00000008 __umodsi3
020104c8 g     F .text	00000068 epcs_read_electronic_signature
02013d28 g       *ABS*	00000000 end
0200f73c g     F .text	000000c0 altera_avalon_jtag_uart_init
02011bb4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
020059e8 g     F .text	000000ac __clzsi2
0200fe18 g     F .text	00000224 altera_avalon_jtag_uart_write
02001338 g     F .text	00000354 LCD_Display_Dir
02009c14 g     F .text	00000004 __sfp_lock_acquire
0200b0ac g     F .text	000000f8 memchr
02005fb0 g     F .text	00001df8 ___vfprintf_internal_r
02009d90 g     F .text	000002d0 _free_r
02000758 g     F .text	000002d4 LCD_SetCursor
020119d8 g     F .text	000001a0 __call_exitprocs
02013a24 g     O .bss	00000004 __mlocale_changed
020139e8 g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	00000048 _start
02013a4c g     O .bss	00000004 _alt_tick_rate
0200bbe8 g     F .text	0000015c __lshift
02011380 g     F .text	00000208 alt_avalon_spi_command
02013a50 g     O .bss	00000004 _alt_nticks
0200e820 g     F .text	000000f0 read
0200ebf8 g     F .text	00000050 alt_sys_init
020118a8 g     F .text	00000130 __register_exitproc
0200b8dc g     F .text	000001e0 __multiply
0200faa4 g     F .text	00000068 altera_avalon_jtag_uart_close
02013a54 g     O .bss	00000028 __malloc_current_mallinfo
0200c0ec g     F .text	00000144 __d2b
0201003c g     F .text	0000005c epcs_read_status_register
0200f5d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0201172c g     F .text	000000b4 alt_get_fd
020107a0 g     F .text	00000154 alt_busy_sleep
02005dbc g     F .text	000000d0 __fpcmp_parts_d
0200cea4 g     F .text	00000064 _close_r
02010530 g     F .text	00000080 epcs_read_device_id
0201182c g     F .text	0000007c memcmp
0200f698 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02013d28 g       *ABS*	00000000 __alt_stack_base
0200f6e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02007dcc g     F .text	00000174 __swsetup_r
0200dd50 g     F .text	000001b4 __divdf3
02009b18 g     F .text	000000fc __sfp
0200c348 g     F .text	0000007c __copybits
020122fc g     O .rwdata	00000408 __malloc_av_
02009c20 g     F .text	00000004 __sinit_lock_release
02005498 g     F .text	000002e4 __muldf3
0200cb0c g     F .text	00000054 __sread
02011618 g     F .text	00000114 alt_find_file
02010944 g     F .text	000000a0 alt_dev_llist_insert
0200e790 g     F .text	00000020 __malloc_lock
0200e970 g     F .text	000000b0 sbrk
02009764 g     F .text	000001e8 _fflush_r
0200cde8 g     F .text	000000bc _calloc_r
02013a0c g     O .rwdata	00000008 alt_flash_dev_list
02013a20 g       *ABS*	00000000 __bss_start
0200b3c4 g     F .text	000000dc memset
02004fe0 g     F .text	0000002c main
02000200 g     F .text	00000038 delay_ms
02013a44 g     O .bss	00000004 alt_envp
02013a2c g     O .bss	00000004 __malloc_max_total_mem
0200f638 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020049cc g     F .text	000000e8 LCD_Color_Fill
0200045c g     F .text	00000030 LCD_WriteRAM
0200cc44 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200d044 g     F .text	00000014 fclose
02013b98 g     O .bss	00000190 _atexit0
02008148 g     F .text	0000161c _dtoa_r
0200a928 g     F .text	00000784 _malloc_r
02013a04 g     O .rwdata	00000004 alt_errno
0200a544 g     F .text	000000a8 _fwalk
0200100c g     F .text	0000027c LCD_Fast_DrawPoint
0200e20c g     F .text	00000050 __divsi3
02011bc4 g     O .rodata	00000014 __thenan_df
02009c54 g     F .text	0000013c _malloc_trim_r
02011bb4 g       *ABS*	00000000 __CTOR_END__
0200f048 g     F .text	00000260 alt_epcs_flash_write
0200cc4c g     F .text	000000a4 strcmp
02011bb4 g       *ABS*	00000000 __DTOR_LIST__
0200df60 g     F .text	0000005c __nedf2
02004924 g     F .text	000000a8 LCD_Fill
0200ebc4 g     F .text	00000034 alt_irq_init
0200e910 g     F .text	00000060 alt_release_fd
02011bd8 g     O .rodata	00000100 __clz_tab
02013a20 g     O .bss	00000004 _PathLocale
02013a7c g     O .bss	0000001c lcddev
020117e0 g     F .text	00000014 atexit
0200cd7c g     F .text	0000006c _write_r
0200a758 g     F .text	0000001c setlocale
020003ac g     F .text	0000003c LCD_WriteReg
020139e0 g     O .rwdata	00000004 _impure_ptr
02013a3c g     O .bss	00000004 alt_argc
02010a40 g     F .text	0000005c _do_dtors
02004ce8 g     F .text	000001e8 LCD_Draw_Circle
02000020 g       .exceptions	00000000 alt_irq_entry
0200bf44 g     F .text	00000060 __ulp
0200ca44 g     F .text	00000038 __isinfd
02009c3c g     F .text	00000018 __fp_unlock_all
020139f0 g     O .rwdata	00000008 alt_fs_list
02004f38 g     F .text	000000a8 LCD_DisplayPic
0200a774 g     F .text	0000000c localeconv
02010200 g     F .text	000000f4 epcs_read_buffer
02004ed0 g     F .text	00000068 LCD_Pow
0200ec80 g     F .text	00000054 alt_epcs_flash_init
02010b54 g     F .text	00000050 alt_ic_isr_register
02013a20 g       *ABS*	00000000 _edata
02013d28 g       *ABS*	00000000 _end
02010a9c g     F .text	00000068 alt_flash_open_dev
0200fb0c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02010c40 g     F .text	000000a0 alt_ic_irq_disable
020105b0 g     F .text	00000058 epcs_enter_4_bytes_mode
0200cb60 g     F .text	00000088 __swrite
020139ec g     O .rwdata	00000004 __malloc_trim_threshold
02011360 g     F .text	00000020 altera_nios2_qsys_irq_init
020117f4 g     F .text	00000038 exit
0200a5ec g     F .text	000000b8 _fwalk_reent
0200bd9c g     F .text	000001a8 __mdiff
02010b04 g     F .text	00000050 alt_flash_close_dev
0200e25c g     F .text	0000005c __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02009c18 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02011b78 g     F .text	0000003c _exit
0200ca7c g     F .text	0000002c __isnand
02010660 g     F .text	00000140 alt_alarm_start
02005988 g     F .text	00000060 __muldi3
0200a780 g     F .text	000001a8 __smakebuf_r
0200ccf0 g     F .text	0000008c strlen
020102f4 g     F .text	00000050 epcs_write_enable
02011070 g     F .text	00000154 open
0200577c g     F .text	00000064 __gedf2
02013a14 g     O .rwdata	00000004 alt_priority_mask
02010ba4 g     F .text	0000009c alt_ic_irq_enable
02007da8 g     F .text	00000024 __vfprintf_internal
02005438 g     F .text	00000060 __subdf3
0200f540 g     F .text	00000098 alt_epcs_flash_read
0200b7f0 g     F .text	000000b0 __lo0bits
02013a18 g     O .rwdata	00000008 alt_alarm_list
02000318 g     F .text	00000094 LCD_RD_DATA
020109e4 g     F .text	0000005c _do_ctors
0200e318 g     F .text	000000c8 close
020003e8 g     F .text	0000003c LCD_ReadReg
02005a94 g     F .text	00000224 __pack_d
0200048c g     F .text	00000070 LCD_BGR2RGB
02004c64 g     F .text	00000084 LCD_DrawRectangle
00000000  w      *UND*	00000000 free
02009c1c g     F .text	00000004 __sinit_lock_acquire
020103ac g     F .text	0000011c epcs_write_buffer
0200b570 g     F .text	00000114 __multadd
0200b548 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c08074 	movhi	r3,513
 2000130:	18cea604 	addi	r3,r3,15000
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	01008074 	movhi	r4,513
 2000148:	210ea604 	addi	r4,r4,15000
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 20001c4:	00bffd16 	blt	zero,r2,20001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001d0:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001d4:	d6ae7514 	ori	gp,gp,47572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d8:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001dc:	108e8814 	ori	r2,r2,14880

    movhi r3, %hi(__bss_end)
 20001e0:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001e4:	18cf4a14 	ori	r3,r3,15656

    beq r2, r3, 1f
 20001e8:	10c00326 	beq	r2,r3,20001f8 <_start+0x40>

0:
    stw zero, (r2)
 20001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f4:	10fffd36 	bltu	r2,r3,20001ec <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f8:	200e7180 	call	200e718 <alt_main>

020001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001fc:	003fff06 	br	20001fc <alt_after_alt_main>

02000200 <delay_ms>:
u32 POINT_COLOR=0xFF000000; //画笔颜色
u32 BACK_COLOR =0xFFFFFFFF; //背景色

//LCD延迟函数，单位毫秒
void delay_ms(u32 n)
{
 2000200:	defffd04 	addi	sp,sp,-12
 2000204:	dfc00215 	stw	ra,8(sp)
 2000208:	df000115 	stw	fp,4(sp)
 200020c:	df000104 	addi	fp,sp,4
 2000210:	e13fff15 	stw	r4,-4(fp)
     usleep(n*1000);
 2000214:	e0bfff17 	ldw	r2,-4(fp)
 2000218:	1080fa24 	muli	r2,r2,1000
 200021c:	1009883a 	mov	r4,r2
 2000220:	200ea200 	call	200ea20 <usleep>
}
 2000224:	e037883a 	mov	sp,fp
 2000228:	dfc00117 	ldw	ra,4(sp)
 200022c:	df000017 	ldw	fp,0(sp)
 2000230:	dec00204 	addi	sp,sp,8
 2000234:	f800283a 	ret

02000238 <LCD_WR_CMD>:

//LCD写命令
void LCD_WR_CMD(u16 Cmd)
{
 2000238:	defffe04 	addi	sp,sp,-8
 200023c:	df000115 	stw	fp,4(sp)
 2000240:	df000104 	addi	fp,sp,4
 2000244:	e13fff15 	stw	r4,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RS_BASE,0);              		// 拉低RS
 2000248:	0007883a 	mov	r3,zero
 200024c:	00810034 	movhi	r2,1024
 2000250:	10881804 	addi	r2,r2,8288
 2000254:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RD_N_BASE,1);            		// RD设为高电平
 2000258:	00c00044 	movi	r3,1
 200025c:	00810034 	movhi	r2,1024
 2000260:	10882004 	addi	r2,r2,8320
 2000264:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_WR_N_BASE,0);            		// 拉低WR
 2000268:	0007883a 	mov	r3,zero
 200026c:	00810034 	movhi	r2,1024
 2000270:	10882404 	addi	r2,r2,8336
 2000274:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_DATA_OUT_BASE,Cmd);      		// 往DATA端口写命令
 2000278:	e0ffff17 	ldw	r3,-4(fp)
 200027c:	00810034 	movhi	r2,1024
 2000280:	10880c04 	addi	r2,r2,8240
 2000284:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_WR_N_BASE,1);            		// 拉高WR
 2000288:	00c00044 	movi	r3,1
 200028c:	00810034 	movhi	r2,1024
 2000290:	10882404 	addi	r2,r2,8336
 2000294:	10c00035 	stwio	r3,0(r2)
}
 2000298:	e037883a 	mov	sp,fp
 200029c:	df000017 	ldw	fp,0(sp)
 20002a0:	dec00104 	addi	sp,sp,4
 20002a4:	f800283a 	ret

020002a8 <LCD_WR_DATA>:

//LCD写数据
void LCD_WR_DATA(u16 Data)
{
 20002a8:	defffe04 	addi	sp,sp,-8
 20002ac:	df000115 	stw	fp,4(sp)
 20002b0:	df000104 	addi	fp,sp,4
 20002b4:	e13fff15 	stw	r4,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RS_BASE,1);
 20002b8:	00c00044 	movi	r3,1
 20002bc:	00810034 	movhi	r2,1024
 20002c0:	10881804 	addi	r2,r2,8288
 20002c4:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RD_N_BASE,1);
 20002c8:	00c00044 	movi	r3,1
 20002cc:	00810034 	movhi	r2,1024
 20002d0:	10882004 	addi	r2,r2,8320
 20002d4:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_WR_N_BASE,0);
 20002d8:	0007883a 	mov	r3,zero
 20002dc:	00810034 	movhi	r2,1024
 20002e0:	10882404 	addi	r2,r2,8336
 20002e4:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_DATA_OUT_BASE,Data);
 20002e8:	e0ffff17 	ldw	r3,-4(fp)
 20002ec:	00810034 	movhi	r2,1024
 20002f0:	10880c04 	addi	r2,r2,8240
 20002f4:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_WR_N_BASE,1);
 20002f8:	00c00044 	movi	r3,1
 20002fc:	00810034 	movhi	r2,1024
 2000300:	10882404 	addi	r2,r2,8336
 2000304:	10c00035 	stwio	r3,0(r2)
}
 2000308:	e037883a 	mov	sp,fp
 200030c:	df000017 	ldw	fp,0(sp)
 2000310:	dec00104 	addi	sp,sp,4
 2000314:	f800283a 	ret

02000318 <LCD_RD_DATA>:

//LCD读数据
u16 LCD_RD_DATA()
{
 2000318:	defffe04 	addi	sp,sp,-8
 200031c:	df000115 	stw	fp,4(sp)
 2000320:	df000104 	addi	fp,sp,4
     u16 read_data = 0;
 2000324:	e03fff15 	stw	zero,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_DATA_DIR_BASE,0);          // mlcd_data_dir=0 为输入
 2000328:	0007883a 	mov	r3,zero
 200032c:	00810034 	movhi	r2,1024
 2000330:	10880804 	addi	r2,r2,8224
 2000334:	10c00035 	stwio	r3,0(r2)

     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RS_BASE,1);
 2000338:	00c00044 	movi	r3,1
 200033c:	00810034 	movhi	r2,1024
 2000340:	10881804 	addi	r2,r2,8288
 2000344:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RD_N_BASE,0);
 2000348:	0007883a 	mov	r3,zero
 200034c:	00810034 	movhi	r2,1024
 2000350:	10882004 	addi	r2,r2,8320
 2000354:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_WR_N_BASE,1);
 2000358:	00c00044 	movi	r3,1
 200035c:	00810034 	movhi	r2,1024
 2000360:	10882404 	addi	r2,r2,8336
 2000364:	10c00035 	stwio	r3,0(r2)
     read_data = IORD_ALTERA_AVALON_PIO_DATA(PIO_MLCD_DATA_IN_BASE);
 2000368:	00810034 	movhi	r2,1024
 200036c:	10881004 	addi	r2,r2,8256
 2000370:	10800037 	ldwio	r2,0(r2)
 2000374:	e0bfff15 	stw	r2,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RD_N_BASE,1);
 2000378:	00c00044 	movi	r3,1
 200037c:	00810034 	movhi	r2,1024
 2000380:	10882004 	addi	r2,r2,8320
 2000384:	10c00035 	stwio	r3,0(r2)

     IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_DATA_DIR_BASE,1);          // mlcd_data_dir=1 为输出
 2000388:	00c00044 	movi	r3,1
 200038c:	00810034 	movhi	r2,1024
 2000390:	10880804 	addi	r2,r2,8224
 2000394:	10c00035 	stwio	r3,0(r2)
     return read_data;
 2000398:	e0bfff17 	ldw	r2,-4(fp)
}
 200039c:	e037883a 	mov	sp,fp
 20003a0:	df000017 	ldw	fp,0(sp)
 20003a4:	dec00104 	addi	sp,sp,4
 20003a8:	f800283a 	ret

020003ac <LCD_WriteReg>:

//LCD写寄存器数据
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
 20003ac:	defffc04 	addi	sp,sp,-16
 20003b0:	dfc00315 	stw	ra,12(sp)
 20003b4:	df000215 	stw	fp,8(sp)
 20003b8:	df000204 	addi	fp,sp,8
 20003bc:	e13ffe15 	stw	r4,-8(fp)
 20003c0:	e17fff15 	stw	r5,-4(fp)
     LCD_WR_CMD(LCD_Reg);                                      // 写入的寄存器
 20003c4:	e13ffe17 	ldw	r4,-8(fp)
 20003c8:	20002380 	call	2000238 <LCD_WR_CMD>
     LCD_WR_DATA(LCD_RegValue);                                // 写入的数据
 20003cc:	e13fff17 	ldw	r4,-4(fp)
 20003d0:	20002a80 	call	20002a8 <LCD_WR_DATA>
}
 20003d4:	e037883a 	mov	sp,fp
 20003d8:	dfc00117 	ldw	ra,4(sp)
 20003dc:	df000017 	ldw	fp,0(sp)
 20003e0:	dec00204 	addi	sp,sp,8
 20003e4:	f800283a 	ret

020003e8 <LCD_ReadReg>:

//LCD读寄存器
u16 LCD_ReadReg(u16 LCD_Reg)
{
 20003e8:	defffd04 	addi	sp,sp,-12
 20003ec:	dfc00215 	stw	ra,8(sp)
 20003f0:	df000115 	stw	fp,4(sp)
 20003f4:	df000104 	addi	fp,sp,4
 20003f8:	e13fff15 	stw	r4,-4(fp)
     LCD_WR_CMD(LCD_Reg);                                      // 要读取的寄存器
 20003fc:	e13fff17 	ldw	r4,-4(fp)
 2000400:	20002380 	call	2000238 <LCD_WR_CMD>
     usleep(5);                                                // 延时5us
 2000404:	01000144 	movi	r4,5
 2000408:	200ea200 	call	200ea20 <usleep>
     return LCD_RD_DATA();                                     // 返回读取的数据
 200040c:	20003180 	call	2000318 <LCD_RD_DATA>
}
 2000410:	e037883a 	mov	sp,fp
 2000414:	dfc00117 	ldw	ra,4(sp)
 2000418:	df000017 	ldw	fp,0(sp)
 200041c:	dec00204 	addi	sp,sp,8
 2000420:	f800283a 	ret

02000424 <LCD_WriteRAM_Prepare>:

//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 2000424:	defffe04 	addi	sp,sp,-8
 2000428:	dfc00115 	stw	ra,4(sp)
 200042c:	df000015 	stw	fp,0(sp)
 2000430:	d839883a 	mov	fp,sp
     LCD_WR_CMD(lcddev.wramcmd);
 2000434:	00808074 	movhi	r2,513
 2000438:	108e9f04 	addi	r2,r2,14972
 200043c:	10800417 	ldw	r2,16(r2)
 2000440:	1009883a 	mov	r4,r2
 2000444:	20002380 	call	2000238 <LCD_WR_CMD>
}
 2000448:	e037883a 	mov	sp,fp
 200044c:	dfc00117 	ldw	ra,4(sp)
 2000450:	df000017 	ldw	fp,0(sp)
 2000454:	dec00204 	addi	sp,sp,8
 2000458:	f800283a 	ret

0200045c <LCD_WriteRAM>:

//LCD写GRAM
//RGB_Code:颜色值
void LCD_WriteRAM(u16 RGB_Code)
{
 200045c:	defffd04 	addi	sp,sp,-12
 2000460:	dfc00215 	stw	ra,8(sp)
 2000464:	df000115 	stw	fp,4(sp)
 2000468:	df000104 	addi	fp,sp,4
 200046c:	e13fff15 	stw	r4,-4(fp)
     LCD_WR_DATA(RGB_Code);                                    //写十六位GRAM
 2000470:	e13fff17 	ldw	r4,-4(fp)
 2000474:	20002a80 	call	20002a8 <LCD_WR_DATA>
}
 2000478:	e037883a 	mov	sp,fp
 200047c:	dfc00117 	ldw	ra,4(sp)
 2000480:	df000017 	ldw	fp,0(sp)
 2000484:	dec00204 	addi	sp,sp,8
 2000488:	f800283a 	ret

0200048c <LCD_BGR2RGB>:
//从ILI93xx读出的数据为GBR格式，而我们写入的时候为RGB格式。
//通过该函数转换
//c:GBR格式的颜色值
//返回值：RGB格式的颜色值
u16 LCD_BGR2RGB(u16 c)
{
 200048c:	defffa04 	addi	sp,sp,-24
 2000490:	df000515 	stw	fp,20(sp)
 2000494:	df000504 	addi	fp,sp,20
 2000498:	e13fff15 	stw	r4,-4(fp)
     u16  r,g,b,rgb;
     b=(c>>0)&0x1f;
 200049c:	e0bfff17 	ldw	r2,-4(fp)
 20004a0:	108007cc 	andi	r2,r2,31
 20004a4:	e0bffb15 	stw	r2,-20(fp)
     g=(c>>5)&0x3f;
 20004a8:	e0bfff17 	ldw	r2,-4(fp)
 20004ac:	1004d17a 	srli	r2,r2,5
 20004b0:	10800fcc 	andi	r2,r2,63
 20004b4:	e0bffc15 	stw	r2,-16(fp)
     r=(c>>11)&0x1f;
 20004b8:	e0bfff17 	ldw	r2,-4(fp)
 20004bc:	1004d2fa 	srli	r2,r2,11
 20004c0:	108007cc 	andi	r2,r2,31
 20004c4:	e0bffd15 	stw	r2,-12(fp)
     rgb=(b<<11)+(g<<5)+(r<<0);
 20004c8:	e0bffb17 	ldw	r2,-20(fp)
 20004cc:	100692fa 	slli	r3,r2,11
 20004d0:	e0bffc17 	ldw	r2,-16(fp)
 20004d4:	1004917a 	slli	r2,r2,5
 20004d8:	1887883a 	add	r3,r3,r2
 20004dc:	e0bffd17 	ldw	r2,-12(fp)
 20004e0:	1885883a 	add	r2,r3,r2
 20004e4:	e0bffe15 	stw	r2,-8(fp)
     return(rgb);
 20004e8:	e0bffe17 	ldw	r2,-8(fp)
}
 20004ec:	e037883a 	mov	sp,fp
 20004f0:	df000017 	ldw	fp,0(sp)
 20004f4:	dec00104 	addi	sp,sp,4
 20004f8:	f800283a 	ret

020004fc <LCD_ReadPoint>:

//读取个某点的颜色值
//x,y:坐标
//返回值:此点的颜色
u32 LCD_ReadPoint(u16 x,u16 y)
{
 20004fc:	defff904 	addi	sp,sp,-28
 2000500:	dfc00615 	stw	ra,24(sp)
 2000504:	df000515 	stw	fp,20(sp)
 2000508:	df000504 	addi	fp,sp,20
 200050c:	e13ffe15 	stw	r4,-8(fp)
 2000510:	e17fff15 	stw	r5,-4(fp)
     u16 r=0,g=0,b=0;
 2000514:	e03ffb15 	stw	zero,-20(fp)
 2000518:	e03ffc15 	stw	zero,-16(fp)
 200051c:	e03ffd15 	stw	zero,-12(fp)
     if(x>=lcddev.width||y>=lcddev.height)return 0; //超过了范围,直接返回
 2000520:	00808074 	movhi	r2,513
 2000524:	108e9f04 	addi	r2,r2,14972
 2000528:	10800017 	ldw	r2,0(r2)
 200052c:	e0fffe17 	ldw	r3,-8(fp)
 2000530:	1880052e 	bgeu	r3,r2,2000548 <LCD_ReadPoint+0x4c>
 2000534:	00808074 	movhi	r2,513
 2000538:	108e9f04 	addi	r2,r2,14972
 200053c:	10800117 	ldw	r2,4(r2)
 2000540:	e0ffff17 	ldw	r3,-4(fp)
 2000544:	18800236 	bltu	r3,r2,2000550 <LCD_ReadPoint+0x54>
 2000548:	0005883a 	mov	r2,zero
 200054c:	00003906 	br	2000634 <LCD_ReadPoint+0x138>
     LCD_SetCursor(x,y);
 2000550:	e13ffe17 	ldw	r4,-8(fp)
 2000554:	e17fff17 	ldw	r5,-4(fp)
 2000558:	20007580 	call	2000758 <LCD_SetCursor>
     if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X1963)
 200055c:	00808074 	movhi	r2,513
 2000560:	108e9f04 	addi	r2,r2,14972
 2000564:	10c00217 	ldw	r3,8(r2)
 2000568:	00a4d054 	movui	r2,37697
 200056c:	18800a26 	beq	r3,r2,2000598 <LCD_ReadPoint+0x9c>
 2000570:	00808074 	movhi	r2,513
 2000574:	108e9f04 	addi	r2,r2,14972
 2000578:	10800217 	ldw	r2,8(r2)
 200057c:	1094c420 	cmpeqi	r2,r2,21264
 2000580:	1000051e 	bne	r2,zero,2000598 <LCD_ReadPoint+0x9c>
 2000584:	00808074 	movhi	r2,513
 2000588:	108e9f04 	addi	r2,r2,14972
 200058c:	10800217 	ldw	r2,8(r2)
 2000590:	108658d8 	cmpnei	r2,r2,6499
 2000594:	1000031e 	bne	r2,zero,20005a4 <LCD_ReadPoint+0xa8>
          LCD_WR_CMD(0X2E);       //9341/3510/1963 发送读GRAM指令
 2000598:	01000b84 	movi	r4,46
 200059c:	20002380 	call	2000238 <LCD_WR_CMD>
 20005a0:	00000706 	br	20005c0 <LCD_ReadPoint+0xc4>
     else if(lcddev.id==0X5510)
 20005a4:	00808074 	movhi	r2,513
 20005a8:	108e9f04 	addi	r2,r2,14972
 20005ac:	10800217 	ldw	r2,8(r2)
 20005b0:	10954418 	cmpnei	r2,r2,21776
 20005b4:	1000021e 	bne	r2,zero,20005c0 <LCD_ReadPoint+0xc4>
          LCD_WR_CMD(0X2E00);     //5510 发送读GRAM指令
 20005b8:	010b8004 	movi	r4,11776
 20005bc:	20002380 	call	2000238 <LCD_WR_CMD>
     r=LCD_RD_DATA();             //dummy Read
 20005c0:	20003180 	call	2000318 <LCD_RD_DATA>
 20005c4:	e0bffb15 	stw	r2,-20(fp)
     if(lcddev.id==0X1963)
 20005c8:	00808074 	movhi	r2,513
 20005cc:	108e9f04 	addi	r2,r2,14972
 20005d0:	10800217 	ldw	r2,8(r2)
 20005d4:	108658d8 	cmpnei	r2,r2,6499
 20005d8:	1000021e 	bne	r2,zero,20005e4 <LCD_ReadPoint+0xe8>
          return r;               //1963直接读就可以
 20005dc:	e0bffb17 	ldw	r2,-20(fp)
 20005e0:	00001406 	br	2000634 <LCD_ReadPoint+0x138>
     r=LCD_RD_DATA();             //实际坐标颜色
 20005e4:	20003180 	call	2000318 <LCD_RD_DATA>
 20005e8:	e0bffb15 	stw	r2,-20(fp)
     b=LCD_RD_DATA();             //9341/NT35310/NT35510要分2次读出
 20005ec:	20003180 	call	2000318 <LCD_RD_DATA>
 20005f0:	e0bffd15 	stw	r2,-12(fp)
     g=r&0XFF;      //对于9341/5310/5510,第一次读取的是RG的值,R在前,G在后,各占8位
 20005f4:	e0bffb17 	ldw	r2,-20(fp)
 20005f8:	10803fcc 	andi	r2,r2,255
 20005fc:	e0bffc15 	stw	r2,-16(fp)
     g<<=8;
 2000600:	e0bffc17 	ldw	r2,-16(fp)
 2000604:	1004923a 	slli	r2,r2,8
 2000608:	e0bffc15 	stw	r2,-16(fp)
     return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));   //ILI9341/NT35310/NT35510需要公式转换一下
 200060c:	e0fffb17 	ldw	r3,-20(fp)
 2000610:	00be0004 	movi	r2,-2048
 2000614:	1886703a 	and	r3,r3,r2
 2000618:	e0bffc17 	ldw	r2,-16(fp)
 200061c:	1004d2ba 	srli	r2,r2,10
 2000620:	1004917a 	slli	r2,r2,5
 2000624:	1886b03a 	or	r3,r3,r2
 2000628:	e0bffd17 	ldw	r2,-12(fp)
 200062c:	1004d2fa 	srli	r2,r2,11
 2000630:	1884b03a 	or	r2,r3,r2
}
 2000634:	e037883a 	mov	sp,fp
 2000638:	dfc00117 	ldw	ra,4(sp)
 200063c:	df000017 	ldw	fp,0(sp)
 2000640:	dec00204 	addi	sp,sp,8
 2000644:	f800283a 	ret

02000648 <LCD_DisplayOn>:

//LCD开启显示
void LCD_DisplayOn(void)
{
 2000648:	defffe04 	addi	sp,sp,-8
 200064c:	dfc00115 	stw	ra,4(sp)
 2000650:	df000015 	stw	fp,0(sp)
 2000654:	d839883a 	mov	fp,sp
     if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X1963)
 2000658:	00808074 	movhi	r2,513
 200065c:	108e9f04 	addi	r2,r2,14972
 2000660:	10c00217 	ldw	r3,8(r2)
 2000664:	00a4d054 	movui	r2,37697
 2000668:	18800a26 	beq	r3,r2,2000694 <LCD_DisplayOn+0x4c>
 200066c:	00808074 	movhi	r2,513
 2000670:	108e9f04 	addi	r2,r2,14972
 2000674:	10800217 	ldw	r2,8(r2)
 2000678:	1094c420 	cmpeqi	r2,r2,21264
 200067c:	1000051e 	bne	r2,zero,2000694 <LCD_DisplayOn+0x4c>
 2000680:	00808074 	movhi	r2,513
 2000684:	108e9f04 	addi	r2,r2,14972
 2000688:	10800217 	ldw	r2,8(r2)
 200068c:	108658d8 	cmpnei	r2,r2,6499
 2000690:	1000031e 	bne	r2,zero,20006a0 <LCD_DisplayOn+0x58>
          LCD_WR_CMD(0X29);     //开启显示
 2000694:	01000a44 	movi	r4,41
 2000698:	20002380 	call	2000238 <LCD_WR_CMD>
 200069c:	00000706 	br	20006bc <LCD_DisplayOn+0x74>
     else if(lcddev.id==0X5510)
 20006a0:	00808074 	movhi	r2,513
 20006a4:	108e9f04 	addi	r2,r2,14972
 20006a8:	10800217 	ldw	r2,8(r2)
 20006ac:	10954418 	cmpnei	r2,r2,21776
 20006b0:	1000021e 	bne	r2,zero,20006bc <LCD_DisplayOn+0x74>
          LCD_WR_CMD(0X2900);   //开启显示
 20006b4:	010a4004 	movi	r4,10496
 20006b8:	20002380 	call	2000238 <LCD_WR_CMD>
}
 20006bc:	e037883a 	mov	sp,fp
 20006c0:	dfc00117 	ldw	ra,4(sp)
 20006c4:	df000017 	ldw	fp,0(sp)
 20006c8:	dec00204 	addi	sp,sp,8
 20006cc:	f800283a 	ret

020006d0 <LCD_DisplayOff>:

//LCD关闭显示
void LCD_DisplayOff(void)
{
 20006d0:	defffe04 	addi	sp,sp,-8
 20006d4:	dfc00115 	stw	ra,4(sp)
 20006d8:	df000015 	stw	fp,0(sp)
 20006dc:	d839883a 	mov	fp,sp
     if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X1963)
 20006e0:	00808074 	movhi	r2,513
 20006e4:	108e9f04 	addi	r2,r2,14972
 20006e8:	10c00217 	ldw	r3,8(r2)
 20006ec:	00a4d054 	movui	r2,37697
 20006f0:	18800a26 	beq	r3,r2,200071c <LCD_DisplayOff+0x4c>
 20006f4:	00808074 	movhi	r2,513
 20006f8:	108e9f04 	addi	r2,r2,14972
 20006fc:	10800217 	ldw	r2,8(r2)
 2000700:	1094c420 	cmpeqi	r2,r2,21264
 2000704:	1000051e 	bne	r2,zero,200071c <LCD_DisplayOff+0x4c>
 2000708:	00808074 	movhi	r2,513
 200070c:	108e9f04 	addi	r2,r2,14972
 2000710:	10800217 	ldw	r2,8(r2)
 2000714:	108658d8 	cmpnei	r2,r2,6499
 2000718:	1000031e 	bne	r2,zero,2000728 <LCD_DisplayOff+0x58>
          LCD_WR_CMD(0X28);     //关闭显示
 200071c:	01000a04 	movi	r4,40
 2000720:	20002380 	call	2000238 <LCD_WR_CMD>
 2000724:	00000706 	br	2000744 <LCD_DisplayOff+0x74>
     else if(lcddev.id==0X5510)
 2000728:	00808074 	movhi	r2,513
 200072c:	108e9f04 	addi	r2,r2,14972
 2000730:	10800217 	ldw	r2,8(r2)
 2000734:	10954418 	cmpnei	r2,r2,21776
 2000738:	1000021e 	bne	r2,zero,2000744 <LCD_DisplayOff+0x74>
          LCD_WR_CMD(0X2800);   //关闭显示
 200073c:	010a0004 	movi	r4,10240
 2000740:	20002380 	call	2000238 <LCD_WR_CMD>
}
 2000744:	e037883a 	mov	sp,fp
 2000748:	dfc00117 	ldw	ra,4(sp)
 200074c:	df000017 	ldw	fp,0(sp)
 2000750:	dec00204 	addi	sp,sp,8
 2000754:	f800283a 	ret

02000758 <LCD_SetCursor>:

//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 2000758:	defffc04 	addi	sp,sp,-16
 200075c:	dfc00315 	stw	ra,12(sp)
 2000760:	df000215 	stw	fp,8(sp)
 2000764:	df000204 	addi	fp,sp,8
 2000768:	e13ffe15 	stw	r4,-8(fp)
 200076c:	e17fff15 	stw	r5,-4(fp)
     if(lcddev.id==0X9341||lcddev.id==0X5310){
 2000770:	00808074 	movhi	r2,513
 2000774:	108e9f04 	addi	r2,r2,14972
 2000778:	10c00217 	ldw	r3,8(r2)
 200077c:	00a4d054 	movui	r2,37697
 2000780:	18800526 	beq	r3,r2,2000798 <LCD_SetCursor+0x40>
 2000784:	00808074 	movhi	r2,513
 2000788:	108e9f04 	addi	r2,r2,14972
 200078c:	10800217 	ldw	r2,8(r2)
 2000790:	1094c418 	cmpnei	r2,r2,21264
 2000794:	10001b1e 	bne	r2,zero,2000804 <LCD_SetCursor+0xac>
          LCD_WR_CMD(lcddev.setxcmd);
 2000798:	00808074 	movhi	r2,513
 200079c:	108e9f04 	addi	r2,r2,14972
 20007a0:	10800517 	ldw	r2,20(r2)
 20007a4:	1009883a 	mov	r4,r2
 20007a8:	20002380 	call	2000238 <LCD_WR_CMD>
          LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 20007ac:	e0bffe17 	ldw	r2,-8(fp)
 20007b0:	1004d23a 	srli	r2,r2,8
 20007b4:	1009883a 	mov	r4,r2
 20007b8:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20007bc:	e0bffe17 	ldw	r2,-8(fp)
 20007c0:	10803fcc 	andi	r2,r2,255
 20007c4:	1009883a 	mov	r4,r2
 20007c8:	20002a80 	call	20002a8 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setycmd);
 20007cc:	00808074 	movhi	r2,513
 20007d0:	108e9f04 	addi	r2,r2,14972
 20007d4:	10800617 	ldw	r2,24(r2)
 20007d8:	1009883a 	mov	r4,r2
 20007dc:	20002380 	call	2000238 <LCD_WR_CMD>
          LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 20007e0:	e0bfff17 	ldw	r2,-4(fp)
 20007e4:	1004d23a 	srli	r2,r2,8
 20007e8:	1009883a 	mov	r4,r2
 20007ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20007f0:	e0bfff17 	ldw	r2,-4(fp)
 20007f4:	10803fcc 	andi	r2,r2,255
 20007f8:	1009883a 	mov	r4,r2
 20007fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000800:	00008506 	br	2000a18 <LCD_SetCursor+0x2c0>
     }else if(lcddev.id==0X1963){
 2000804:	00808074 	movhi	r2,513
 2000808:	108e9f04 	addi	r2,r2,14972
 200080c:	10800217 	ldw	r2,8(r2)
 2000810:	108658d8 	cmpnei	r2,r2,6499
 2000814:	1000551e 	bne	r2,zero,200096c <LCD_SetCursor+0x214>
          if(lcddev.dir==0)//x坐标需要变换
 2000818:	00808074 	movhi	r2,513
 200081c:	108e9f04 	addi	r2,r2,14972
 2000820:	10800303 	ldbu	r2,12(r2)
 2000824:	10803fcc 	andi	r2,r2,255
 2000828:	1000191e 	bne	r2,zero,2000890 <LCD_SetCursor+0x138>
          {
               Xpos=lcddev.width-1-Xpos;
 200082c:	00808074 	movhi	r2,513
 2000830:	108e9f04 	addi	r2,r2,14972
 2000834:	10c00017 	ldw	r3,0(r2)
 2000838:	e0bffe17 	ldw	r2,-8(fp)
 200083c:	1885c83a 	sub	r2,r3,r2
 2000840:	10bfffc4 	addi	r2,r2,-1
 2000844:	e0bffe15 	stw	r2,-8(fp)
               LCD_WR_CMD(lcddev.setxcmd);
 2000848:	00808074 	movhi	r2,513
 200084c:	108e9f04 	addi	r2,r2,14972
 2000850:	10800517 	ldw	r2,20(r2)
 2000854:	1009883a 	mov	r4,r2
 2000858:	20002380 	call	2000238 <LCD_WR_CMD>
               LCD_WR_DATA(0);LCD_WR_DATA(0);
 200085c:	0009883a 	mov	r4,zero
 2000860:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000864:	0009883a 	mov	r4,zero
 2000868:	20002a80 	call	20002a8 <LCD_WR_DATA>
               LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 200086c:	e0bffe17 	ldw	r2,-8(fp)
 2000870:	1004d23a 	srli	r2,r2,8
 2000874:	1009883a 	mov	r4,r2
 2000878:	20002a80 	call	20002a8 <LCD_WR_DATA>
 200087c:	e0bffe17 	ldw	r2,-8(fp)
 2000880:	10803fcc 	andi	r2,r2,255
 2000884:	1009883a 	mov	r4,r2
 2000888:	20002a80 	call	20002a8 <LCD_WR_DATA>
 200088c:	00001b06 	br	20008fc <LCD_SetCursor+0x1a4>
          }else{
               LCD_WR_CMD(lcddev.setxcmd);
 2000890:	00808074 	movhi	r2,513
 2000894:	108e9f04 	addi	r2,r2,14972
 2000898:	10800517 	ldw	r2,20(r2)
 200089c:	1009883a 	mov	r4,r2
 20008a0:	20002380 	call	2000238 <LCD_WR_CMD>
               LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 20008a4:	e0bffe17 	ldw	r2,-8(fp)
 20008a8:	1004d23a 	srli	r2,r2,8
 20008ac:	1009883a 	mov	r4,r2
 20008b0:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20008b4:	e0bffe17 	ldw	r2,-8(fp)
 20008b8:	10803fcc 	andi	r2,r2,255
 20008bc:	1009883a 	mov	r4,r2
 20008c0:	20002a80 	call	20002a8 <LCD_WR_DATA>
               LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 20008c4:	00808074 	movhi	r2,513
 20008c8:	108e9f04 	addi	r2,r2,14972
 20008cc:	10800017 	ldw	r2,0(r2)
 20008d0:	10bfffc4 	addi	r2,r2,-1
 20008d4:	1004d23a 	srli	r2,r2,8
 20008d8:	1009883a 	mov	r4,r2
 20008dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20008e0:	00808074 	movhi	r2,513
 20008e4:	108e9f04 	addi	r2,r2,14972
 20008e8:	10800017 	ldw	r2,0(r2)
 20008ec:	10bfffc4 	addi	r2,r2,-1
 20008f0:	10803fcc 	andi	r2,r2,255
 20008f4:	1009883a 	mov	r4,r2
 20008f8:	20002a80 	call	20002a8 <LCD_WR_DATA>
          }
          LCD_WR_CMD(lcddev.setycmd);
 20008fc:	00808074 	movhi	r2,513
 2000900:	108e9f04 	addi	r2,r2,14972
 2000904:	10800617 	ldw	r2,24(r2)
 2000908:	1009883a 	mov	r4,r2
 200090c:	20002380 	call	2000238 <LCD_WR_CMD>
          LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 2000910:	e0bfff17 	ldw	r2,-4(fp)
 2000914:	1004d23a 	srli	r2,r2,8
 2000918:	1009883a 	mov	r4,r2
 200091c:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000920:	e0bfff17 	ldw	r2,-4(fp)
 2000924:	10803fcc 	andi	r2,r2,255
 2000928:	1009883a 	mov	r4,r2
 200092c:	20002a80 	call	20002a8 <LCD_WR_DATA>
          LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 2000930:	00808074 	movhi	r2,513
 2000934:	108e9f04 	addi	r2,r2,14972
 2000938:	10800117 	ldw	r2,4(r2)
 200093c:	10bfffc4 	addi	r2,r2,-1
 2000940:	1004d23a 	srli	r2,r2,8
 2000944:	1009883a 	mov	r4,r2
 2000948:	20002a80 	call	20002a8 <LCD_WR_DATA>
 200094c:	00808074 	movhi	r2,513
 2000950:	108e9f04 	addi	r2,r2,14972
 2000954:	10800117 	ldw	r2,4(r2)
 2000958:	10bfffc4 	addi	r2,r2,-1
 200095c:	10803fcc 	andi	r2,r2,255
 2000960:	1009883a 	mov	r4,r2
 2000964:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000968:	00002b06 	br	2000a18 <LCD_SetCursor+0x2c0>

     }else if(lcddev.id==0X5510) {
 200096c:	00808074 	movhi	r2,513
 2000970:	108e9f04 	addi	r2,r2,14972
 2000974:	10800217 	ldw	r2,8(r2)
 2000978:	10954418 	cmpnei	r2,r2,21776
 200097c:	1000261e 	bne	r2,zero,2000a18 <LCD_SetCursor+0x2c0>
          LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 2000980:	00808074 	movhi	r2,513
 2000984:	108e9f04 	addi	r2,r2,14972
 2000988:	10800517 	ldw	r2,20(r2)
 200098c:	1009883a 	mov	r4,r2
 2000990:	20002380 	call	2000238 <LCD_WR_CMD>
 2000994:	e0bffe17 	ldw	r2,-8(fp)
 2000998:	1004d23a 	srli	r2,r2,8
 200099c:	1009883a 	mov	r4,r2
 20009a0:	20002a80 	call	20002a8 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 20009a4:	00808074 	movhi	r2,513
 20009a8:	108e9f04 	addi	r2,r2,14972
 20009ac:	10800517 	ldw	r2,20(r2)
 20009b0:	10800044 	addi	r2,r2,1
 20009b4:	1009883a 	mov	r4,r2
 20009b8:	20002380 	call	2000238 <LCD_WR_CMD>
 20009bc:	e0bffe17 	ldw	r2,-8(fp)
 20009c0:	10803fcc 	andi	r2,r2,255
 20009c4:	1009883a 	mov	r4,r2
 20009c8:	20002a80 	call	20002a8 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 20009cc:	00808074 	movhi	r2,513
 20009d0:	108e9f04 	addi	r2,r2,14972
 20009d4:	10800617 	ldw	r2,24(r2)
 20009d8:	1009883a 	mov	r4,r2
 20009dc:	20002380 	call	2000238 <LCD_WR_CMD>
 20009e0:	e0bfff17 	ldw	r2,-4(fp)
 20009e4:	1004d23a 	srli	r2,r2,8
 20009e8:	1009883a 	mov	r4,r2
 20009ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 20009f0:	00808074 	movhi	r2,513
 20009f4:	108e9f04 	addi	r2,r2,14972
 20009f8:	10800617 	ldw	r2,24(r2)
 20009fc:	10800044 	addi	r2,r2,1
 2000a00:	1009883a 	mov	r4,r2
 2000a04:	20002380 	call	2000238 <LCD_WR_CMD>
 2000a08:	e0bfff17 	ldw	r2,-4(fp)
 2000a0c:	10803fcc 	andi	r2,r2,255
 2000a10:	1009883a 	mov	r4,r2
 2000a14:	20002a80 	call	20002a8 <LCD_WR_DATA>
     }
}
 2000a18:	e037883a 	mov	sp,fp
 2000a1c:	dfc00117 	ldw	ra,4(sp)
 2000a20:	df000017 	ldw	fp,0(sp)
 2000a24:	dec00204 	addi	sp,sp,8
 2000a28:	f800283a 	ret

02000a2c <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(u8 dir)
{
 2000a2c:	defffa04 	addi	sp,sp,-24
 2000a30:	dfc00515 	stw	ra,20(sp)
 2000a34:	df000415 	stw	fp,16(sp)
 2000a38:	df000404 	addi	fp,sp,16
 2000a3c:	2005883a 	mov	r2,r4
 2000a40:	e0bfff05 	stb	r2,-4(fp)
    u16 regval=0;
 2000a44:	e03ffc15 	stw	zero,-16(fp)
    u16 dirreg=0;
 2000a48:	e03ffd15 	stw	zero,-12(fp)
    u16 temp;
    if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 2000a4c:	00808074 	movhi	r2,513
 2000a50:	108e9f04 	addi	r2,r2,14972
 2000a54:	10800303 	ldbu	r2,12(r2)
 2000a58:	10803fcc 	andi	r2,r2,255
 2000a5c:	10800058 	cmpnei	r2,r2,1
 2000a60:	1000051e 	bne	r2,zero,2000a78 <LCD_Scan_Dir+0x4c>
 2000a64:	00808074 	movhi	r2,513
 2000a68:	108e9f04 	addi	r2,r2,14972
 2000a6c:	10800217 	ldw	r2,8(r2)
 2000a70:	108658d8 	cmpnei	r2,r2,6499
 2000a74:	10000a1e 	bne	r2,zero,2000aa0 <LCD_Scan_Dir+0x74>
 2000a78:	00808074 	movhi	r2,513
 2000a7c:	108e9f04 	addi	r2,r2,14972
 2000a80:	10800303 	ldbu	r2,12(r2)
 2000a84:	10803fcc 	andi	r2,r2,255
 2000a88:	10002e1e 	bne	r2,zero,2000b44 <LCD_Scan_Dir+0x118>
 2000a8c:	00808074 	movhi	r2,513
 2000a90:	108e9f04 	addi	r2,r2,14972
 2000a94:	10800217 	ldw	r2,8(r2)
 2000a98:	108658d8 	cmpnei	r2,r2,6499
 2000a9c:	1000291e 	bne	r2,zero,2000b44 <LCD_Scan_Dir+0x118>
    {
         switch(dir) {     //方向转换
 2000aa0:	e0bfff03 	ldbu	r2,-4(fp)
 2000aa4:	10c00228 	cmpgeui	r3,r2,8
 2000aa8:	1800261e 	bne	r3,zero,2000b44 <LCD_Scan_Dir+0x118>
 2000aac:	1085883a 	add	r2,r2,r2
 2000ab0:	1087883a 	add	r3,r2,r2
 2000ab4:	00808034 	movhi	r2,512
 2000ab8:	1082b204 	addi	r2,r2,2760
 2000abc:	1885883a 	add	r2,r3,r2
 2000ac0:	10800017 	ldw	r2,0(r2)
 2000ac4:	1000683a 	jmp	r2
 2000ac8:	02000ae8 	cmpgeui	r8,zero,43
 2000acc:	02000af4 	movhi	r8,43
 2000ad0:	02000b00 	call	2000b0 <__alt_mem_sdram-0x1dfff50>
 2000ad4:	02000b0c 	andi	r8,zero,44
 2000ad8:	02000b18 	cmpnei	r8,zero,44
 2000adc:	02000b24 	muli	r8,zero,44
 2000ae0:	02000b2c 	andhi	r8,zero,44
 2000ae4:	02000b38 	rdprs	r8,zero,44
         case 0:dir=6;break;
 2000ae8:	00800184 	movi	r2,6
 2000aec:	e0bfff05 	stb	r2,-4(fp)
 2000af0:	00001406 	br	2000b44 <LCD_Scan_Dir+0x118>
         case 1:dir=7;break;
 2000af4:	008001c4 	movi	r2,7
 2000af8:	e0bfff05 	stb	r2,-4(fp)
 2000afc:	00001106 	br	2000b44 <LCD_Scan_Dir+0x118>
         case 2:dir=4;break;
 2000b00:	00800104 	movi	r2,4
 2000b04:	e0bfff05 	stb	r2,-4(fp)
 2000b08:	00000e06 	br	2000b44 <LCD_Scan_Dir+0x118>
         case 3:dir=5;break;
 2000b0c:	00800144 	movi	r2,5
 2000b10:	e0bfff05 	stb	r2,-4(fp)
 2000b14:	00000b06 	br	2000b44 <LCD_Scan_Dir+0x118>
         case 4:dir=1;break;
 2000b18:	00800044 	movi	r2,1
 2000b1c:	e0bfff05 	stb	r2,-4(fp)
 2000b20:	00000806 	br	2000b44 <LCD_Scan_Dir+0x118>
         case 5:dir=0;break;
 2000b24:	e03fff05 	stb	zero,-4(fp)
 2000b28:	00000606 	br	2000b44 <LCD_Scan_Dir+0x118>
         case 6:dir=3;break;
 2000b2c:	008000c4 	movi	r2,3
 2000b30:	e0bfff05 	stb	r2,-4(fp)
 2000b34:	00000306 	br	2000b44 <LCD_Scan_Dir+0x118>
         case 7:dir=2;break;
 2000b38:	00800084 	movi	r2,2
 2000b3c:	e0bfff05 	stb	r2,-4(fp)
 2000b40:	0001883a 	nop
         }
    }
    if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 2000b44:	00808074 	movhi	r2,513
 2000b48:	108e9f04 	addi	r2,r2,14972
 2000b4c:	10c00217 	ldw	r3,8(r2)
 2000b50:	00a4d054 	movui	r2,37697
 2000b54:	18800f26 	beq	r3,r2,2000b94 <LCD_Scan_Dir+0x168>
 2000b58:	00808074 	movhi	r2,513
 2000b5c:	108e9f04 	addi	r2,r2,14972
 2000b60:	10800217 	ldw	r2,8(r2)
 2000b64:	1094c420 	cmpeqi	r2,r2,21264
 2000b68:	10000a1e 	bne	r2,zero,2000b94 <LCD_Scan_Dir+0x168>
 2000b6c:	00808074 	movhi	r2,513
 2000b70:	108e9f04 	addi	r2,r2,14972
 2000b74:	10800217 	ldw	r2,8(r2)
 2000b78:	10954420 	cmpeqi	r2,r2,21776
 2000b7c:	1000051e 	bne	r2,zero,2000b94 <LCD_Scan_Dir+0x168>
 2000b80:	00808074 	movhi	r2,513
 2000b84:	108e9f04 	addi	r2,r2,14972
 2000b88:	10800217 	ldw	r2,8(r2)
 2000b8c:	108658d8 	cmpnei	r2,r2,6499
 2000b90:	1001071e 	bne	r2,zero,2000fb0 <LCD_Scan_Dir+0x584>
    {
        switch(dir) {
 2000b94:	e0bfff03 	ldbu	r2,-4(fp)
 2000b98:	10c00228 	cmpgeui	r3,r2,8
 2000b9c:	18002c1e 	bne	r3,zero,2000c50 <LCD_Scan_Dir+0x224>
 2000ba0:	1085883a 	add	r2,r2,r2
 2000ba4:	1087883a 	add	r3,r2,r2
 2000ba8:	00808034 	movhi	r2,512
 2000bac:	1082ef04 	addi	r2,r2,3004
 2000bb0:	1885883a 	add	r2,r3,r2
 2000bb4:	10800017 	ldw	r2,0(r2)
 2000bb8:	1000683a 	jmp	r2
 2000bbc:	02000c4c 	andi	r8,zero,49
 2000bc0:	02000bdc 	xori	r8,zero,47
 2000bc4:	02000bec 	andhi	r8,zero,47
 2000bc8:	02000bfc 	xorhi	r8,zero,47
 2000bcc:	02000c0c 	andi	r8,zero,48
 2000bd0:	02000c1c 	xori	r8,zero,48
 2000bd4:	02000c2c 	andhi	r8,zero,48
 2000bd8:	02000c3c 	xorhi	r8,zero,48
        case L2R_U2D://从左到右,从上到下
             regval|=(0<<7)|(0<<6)|(0<<5);
             break;
        case L2R_D2U://从左到右,从下到上
             regval|=(1<<7)|(0<<6)|(0<<5);
 2000bdc:	e0bffc17 	ldw	r2,-16(fp)
 2000be0:	10802014 	ori	r2,r2,128
 2000be4:	e0bffc15 	stw	r2,-16(fp)
             break;
 2000be8:	00001906 	br	2000c50 <LCD_Scan_Dir+0x224>
        case R2L_U2D://从右到左,从上到下
             regval|=(0<<7)|(1<<6)|(0<<5);
 2000bec:	e0bffc17 	ldw	r2,-16(fp)
 2000bf0:	10801014 	ori	r2,r2,64
 2000bf4:	e0bffc15 	stw	r2,-16(fp)
             break;
 2000bf8:	00001506 	br	2000c50 <LCD_Scan_Dir+0x224>
        case R2L_D2U://从右到左,从下到上
             regval|=(1<<7)|(1<<6)|(0<<5);
 2000bfc:	e0bffc17 	ldw	r2,-16(fp)
 2000c00:	10803014 	ori	r2,r2,192
 2000c04:	e0bffc15 	stw	r2,-16(fp)
             break;
 2000c08:	00001106 	br	2000c50 <LCD_Scan_Dir+0x224>
        case U2D_L2R://从上到下,从左到右
             regval|=(0<<7)|(0<<6)|(1<<5);
 2000c0c:	e0bffc17 	ldw	r2,-16(fp)
 2000c10:	10800814 	ori	r2,r2,32
 2000c14:	e0bffc15 	stw	r2,-16(fp)
             break;
 2000c18:	00000d06 	br	2000c50 <LCD_Scan_Dir+0x224>
        case U2D_R2L://从上到下,从右到左
             regval|=(0<<7)|(1<<6)|(1<<5);
 2000c1c:	e0bffc17 	ldw	r2,-16(fp)
 2000c20:	10801814 	ori	r2,r2,96
 2000c24:	e0bffc15 	stw	r2,-16(fp)
             break;
 2000c28:	00000906 	br	2000c50 <LCD_Scan_Dir+0x224>
        case D2U_L2R://从下到上,从左到右
             regval|=(1<<7)|(0<<6)|(1<<5);
 2000c2c:	e0bffc17 	ldw	r2,-16(fp)
 2000c30:	10802814 	ori	r2,r2,160
 2000c34:	e0bffc15 	stw	r2,-16(fp)
             break;
 2000c38:	00000506 	br	2000c50 <LCD_Scan_Dir+0x224>
        case D2U_R2L://从下到上,从右到左
             regval|=(1<<7)|(1<<6)|(1<<5);
 2000c3c:	e0bffc17 	ldw	r2,-16(fp)
 2000c40:	10803814 	ori	r2,r2,224
 2000c44:	e0bffc15 	stw	r2,-16(fp)
             break;
 2000c48:	00000106 	br	2000c50 <LCD_Scan_Dir+0x224>
    if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
    {
        switch(dir) {
        case L2R_U2D://从左到右,从上到下
             regval|=(0<<7)|(0<<6)|(0<<5);
             break;
 2000c4c:	0001883a 	nop
             break;
        case D2U_R2L://从下到上,从右到左
             regval|=(1<<7)|(1<<6)|(1<<5);
             break;
        }
        if(lcddev.id==0X5510)
 2000c50:	00808074 	movhi	r2,513
 2000c54:	108e9f04 	addi	r2,r2,14972
 2000c58:	10800217 	ldw	r2,8(r2)
 2000c5c:	10954418 	cmpnei	r2,r2,21776
 2000c60:	1000031e 	bne	r2,zero,2000c70 <LCD_Scan_Dir+0x244>
            dirreg=0X3600;
 2000c64:	008d8004 	movi	r2,13824
 2000c68:	e0bffd15 	stw	r2,-12(fp)
 2000c6c:	00000206 	br	2000c78 <LCD_Scan_Dir+0x24c>
        else dirreg=0X36;
 2000c70:	00800d84 	movi	r2,54
 2000c74:	e0bffd15 	stw	r2,-12(fp)
        if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))
 2000c78:	00808074 	movhi	r2,513
 2000c7c:	108e9f04 	addi	r2,r2,14972
 2000c80:	10800217 	ldw	r2,8(r2)
 2000c84:	1094c420 	cmpeqi	r2,r2,21264
 2000c88:	10000d1e 	bne	r2,zero,2000cc0 <LCD_Scan_Dir+0x294>
 2000c8c:	00808074 	movhi	r2,513
 2000c90:	108e9f04 	addi	r2,r2,14972
 2000c94:	10800217 	ldw	r2,8(r2)
 2000c98:	10954420 	cmpeqi	r2,r2,21776
 2000c9c:	1000081e 	bne	r2,zero,2000cc0 <LCD_Scan_Dir+0x294>
 2000ca0:	00808074 	movhi	r2,513
 2000ca4:	108e9f04 	addi	r2,r2,14972
 2000ca8:	10800217 	ldw	r2,8(r2)
 2000cac:	108658e0 	cmpeqi	r2,r2,6499
 2000cb0:	1000031e 	bne	r2,zero,2000cc0 <LCD_Scan_Dir+0x294>
             regval|=0X08;//5310/5510/1963不需要BGR
 2000cb4:	e0bffc17 	ldw	r2,-16(fp)
 2000cb8:	10800214 	ori	r2,r2,8
 2000cbc:	e0bffc15 	stw	r2,-16(fp)
        LCD_WriteReg(dirreg,regval);
 2000cc0:	e13ffd17 	ldw	r4,-12(fp)
 2000cc4:	e17ffc17 	ldw	r5,-16(fp)
 2000cc8:	20003ac0 	call	20003ac <LCD_WriteReg>
        if(lcddev.id!=0X1963)//1963不做坐标处理
 2000ccc:	00808074 	movhi	r2,513
 2000cd0:	108e9f04 	addi	r2,r2,14972
 2000cd4:	10800217 	ldw	r2,8(r2)
 2000cd8:	108658e0 	cmpeqi	r2,r2,6499
 2000cdc:	10002e1e 	bne	r2,zero,2000d98 <LCD_Scan_Dir+0x36c>
        {
            if(regval&0X20) {
 2000ce0:	e0bffc17 	ldw	r2,-16(fp)
 2000ce4:	1080080c 	andi	r2,r2,32
 2000ce8:	10001626 	beq	r2,zero,2000d44 <LCD_Scan_Dir+0x318>
                 if(lcddev.width<lcddev.height) {    //交换X,Y
 2000cec:	00808074 	movhi	r2,513
 2000cf0:	108e9f04 	addi	r2,r2,14972
 2000cf4:	10c00017 	ldw	r3,0(r2)
 2000cf8:	00808074 	movhi	r2,513
 2000cfc:	108e9f04 	addi	r2,r2,14972
 2000d00:	10800117 	ldw	r2,4(r2)
 2000d04:	1880242e 	bgeu	r3,r2,2000d98 <LCD_Scan_Dir+0x36c>
                      temp=lcddev.width;
 2000d08:	00808074 	movhi	r2,513
 2000d0c:	108e9f04 	addi	r2,r2,14972
 2000d10:	10800017 	ldw	r2,0(r2)
 2000d14:	e0bffe15 	stw	r2,-8(fp)
                      lcddev.width=lcddev.height;
 2000d18:	00808074 	movhi	r2,513
 2000d1c:	108e9f04 	addi	r2,r2,14972
 2000d20:	10c00117 	ldw	r3,4(r2)
 2000d24:	00808074 	movhi	r2,513
 2000d28:	108e9f04 	addi	r2,r2,14972
 2000d2c:	10c00015 	stw	r3,0(r2)
                      lcddev.height=temp;
 2000d30:	00808074 	movhi	r2,513
 2000d34:	108e9f04 	addi	r2,r2,14972
 2000d38:	e0fffe17 	ldw	r3,-8(fp)
 2000d3c:	10c00115 	stw	r3,4(r2)
 2000d40:	00001506 	br	2000d98 <LCD_Scan_Dir+0x36c>
                 }
            }else {
                 if(lcddev.width>lcddev.height) {    //交换X,Y
 2000d44:	00808074 	movhi	r2,513
 2000d48:	108e9f04 	addi	r2,r2,14972
 2000d4c:	10800017 	ldw	r2,0(r2)
 2000d50:	00c08074 	movhi	r3,513
 2000d54:	18ce9f04 	addi	r3,r3,14972
 2000d58:	18c00117 	ldw	r3,4(r3)
 2000d5c:	18800e2e 	bgeu	r3,r2,2000d98 <LCD_Scan_Dir+0x36c>
                      temp=lcddev.width;
 2000d60:	00808074 	movhi	r2,513
 2000d64:	108e9f04 	addi	r2,r2,14972
 2000d68:	10800017 	ldw	r2,0(r2)
 2000d6c:	e0bffe15 	stw	r2,-8(fp)
                      lcddev.width=lcddev.height;
 2000d70:	00808074 	movhi	r2,513
 2000d74:	108e9f04 	addi	r2,r2,14972
 2000d78:	10c00117 	ldw	r3,4(r2)
 2000d7c:	00808074 	movhi	r2,513
 2000d80:	108e9f04 	addi	r2,r2,14972
 2000d84:	10c00015 	stw	r3,0(r2)
                      lcddev.height=temp;
 2000d88:	00808074 	movhi	r2,513
 2000d8c:	108e9f04 	addi	r2,r2,14972
 2000d90:	e0fffe17 	ldw	r3,-8(fp)
 2000d94:	10c00115 	stw	r3,4(r2)
                 }
            }
          }
        if(lcddev.id==0X5510)
 2000d98:	00808074 	movhi	r2,513
 2000d9c:	108e9f04 	addi	r2,r2,14972
 2000da0:	10800217 	ldw	r2,8(r2)
 2000da4:	10954418 	cmpnei	r2,r2,21776
 2000da8:	1000531e 	bne	r2,zero,2000ef8 <LCD_Scan_Dir+0x4cc>
        {
             LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(0);
 2000dac:	00808074 	movhi	r2,513
 2000db0:	108e9f04 	addi	r2,r2,14972
 2000db4:	10800517 	ldw	r2,20(r2)
 2000db8:	1009883a 	mov	r4,r2
 2000dbc:	20002380 	call	2000238 <LCD_WR_CMD>
 2000dc0:	0009883a 	mov	r4,zero
 2000dc4:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(0);
 2000dc8:	00808074 	movhi	r2,513
 2000dcc:	108e9f04 	addi	r2,r2,14972
 2000dd0:	10800517 	ldw	r2,20(r2)
 2000dd4:	10800044 	addi	r2,r2,1
 2000dd8:	1009883a 	mov	r4,r2
 2000ddc:	20002380 	call	2000238 <LCD_WR_CMD>
 2000de0:	0009883a 	mov	r4,zero
 2000de4:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 2000de8:	00808074 	movhi	r2,513
 2000dec:	108e9f04 	addi	r2,r2,14972
 2000df0:	10800517 	ldw	r2,20(r2)
 2000df4:	10800084 	addi	r2,r2,2
 2000df8:	1009883a 	mov	r4,r2
 2000dfc:	20002380 	call	2000238 <LCD_WR_CMD>
 2000e00:	00808074 	movhi	r2,513
 2000e04:	108e9f04 	addi	r2,r2,14972
 2000e08:	10800017 	ldw	r2,0(r2)
 2000e0c:	10bfffc4 	addi	r2,r2,-1
 2000e10:	1004d23a 	srli	r2,r2,8
 2000e14:	1009883a 	mov	r4,r2
 2000e18:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 2000e1c:	00808074 	movhi	r2,513
 2000e20:	108e9f04 	addi	r2,r2,14972
 2000e24:	10800517 	ldw	r2,20(r2)
 2000e28:	108000c4 	addi	r2,r2,3
 2000e2c:	1009883a 	mov	r4,r2
 2000e30:	20002380 	call	2000238 <LCD_WR_CMD>
 2000e34:	00808074 	movhi	r2,513
 2000e38:	108e9f04 	addi	r2,r2,14972
 2000e3c:	10800017 	ldw	r2,0(r2)
 2000e40:	10bfffc4 	addi	r2,r2,-1
 2000e44:	10803fcc 	andi	r2,r2,255
 2000e48:	1009883a 	mov	r4,r2
 2000e4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(0);
 2000e50:	00808074 	movhi	r2,513
 2000e54:	108e9f04 	addi	r2,r2,14972
 2000e58:	10800617 	ldw	r2,24(r2)
 2000e5c:	1009883a 	mov	r4,r2
 2000e60:	20002380 	call	2000238 <LCD_WR_CMD>
 2000e64:	0009883a 	mov	r4,zero
 2000e68:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(0);
 2000e6c:	00808074 	movhi	r2,513
 2000e70:	108e9f04 	addi	r2,r2,14972
 2000e74:	10800617 	ldw	r2,24(r2)
 2000e78:	10800044 	addi	r2,r2,1
 2000e7c:	1009883a 	mov	r4,r2
 2000e80:	20002380 	call	2000238 <LCD_WR_CMD>
 2000e84:	0009883a 	mov	r4,zero
 2000e88:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 2000e8c:	00808074 	movhi	r2,513
 2000e90:	108e9f04 	addi	r2,r2,14972
 2000e94:	10800617 	ldw	r2,24(r2)
 2000e98:	10800084 	addi	r2,r2,2
 2000e9c:	1009883a 	mov	r4,r2
 2000ea0:	20002380 	call	2000238 <LCD_WR_CMD>
 2000ea4:	00808074 	movhi	r2,513
 2000ea8:	108e9f04 	addi	r2,r2,14972
 2000eac:	10800117 	ldw	r2,4(r2)
 2000eb0:	10bfffc4 	addi	r2,r2,-1
 2000eb4:	1004d23a 	srli	r2,r2,8
 2000eb8:	1009883a 	mov	r4,r2
 2000ebc:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 2000ec0:	00808074 	movhi	r2,513
 2000ec4:	108e9f04 	addi	r2,r2,14972
 2000ec8:	10800617 	ldw	r2,24(r2)
 2000ecc:	108000c4 	addi	r2,r2,3
 2000ed0:	1009883a 	mov	r4,r2
 2000ed4:	20002380 	call	2000238 <LCD_WR_CMD>
 2000ed8:	00808074 	movhi	r2,513
 2000edc:	108e9f04 	addi	r2,r2,14972
 2000ee0:	10800117 	ldw	r2,4(r2)
 2000ee4:	10bfffc4 	addi	r2,r2,-1
 2000ee8:	10803fcc 	andi	r2,r2,255
 2000eec:	1009883a 	mov	r4,r2
 2000ef0:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000ef4:	00002e06 	br	2000fb0 <LCD_Scan_Dir+0x584>
        }else {
             LCD_WR_CMD(lcddev.setxcmd);
 2000ef8:	00808074 	movhi	r2,513
 2000efc:	108e9f04 	addi	r2,r2,14972
 2000f00:	10800517 	ldw	r2,20(r2)
 2000f04:	1009883a 	mov	r4,r2
 2000f08:	20002380 	call	2000238 <LCD_WR_CMD>
             LCD_WR_DATA(0);LCD_WR_DATA(0);
 2000f0c:	0009883a 	mov	r4,zero
 2000f10:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000f14:	0009883a 	mov	r4,zero
 2000f18:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 2000f1c:	00808074 	movhi	r2,513
 2000f20:	108e9f04 	addi	r2,r2,14972
 2000f24:	10800017 	ldw	r2,0(r2)
 2000f28:	10bfffc4 	addi	r2,r2,-1
 2000f2c:	1004d23a 	srli	r2,r2,8
 2000f30:	1009883a 	mov	r4,r2
 2000f34:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000f38:	00808074 	movhi	r2,513
 2000f3c:	108e9f04 	addi	r2,r2,14972
 2000f40:	10800017 	ldw	r2,0(r2)
 2000f44:	10bfffc4 	addi	r2,r2,-1
 2000f48:	10803fcc 	andi	r2,r2,255
 2000f4c:	1009883a 	mov	r4,r2
 2000f50:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd);
 2000f54:	00808074 	movhi	r2,513
 2000f58:	108e9f04 	addi	r2,r2,14972
 2000f5c:	10800617 	ldw	r2,24(r2)
 2000f60:	1009883a 	mov	r4,r2
 2000f64:	20002380 	call	2000238 <LCD_WR_CMD>
             LCD_WR_DATA(0);LCD_WR_DATA(0);
 2000f68:	0009883a 	mov	r4,zero
 2000f6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000f70:	0009883a 	mov	r4,zero
 2000f74:	20002a80 	call	20002a8 <LCD_WR_DATA>
             LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 2000f78:	00808074 	movhi	r2,513
 2000f7c:	108e9f04 	addi	r2,r2,14972
 2000f80:	10800117 	ldw	r2,4(r2)
 2000f84:	10bfffc4 	addi	r2,r2,-1
 2000f88:	1004d23a 	srli	r2,r2,8
 2000f8c:	1009883a 	mov	r4,r2
 2000f90:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2000f94:	00808074 	movhi	r2,513
 2000f98:	108e9f04 	addi	r2,r2,14972
 2000f9c:	10800117 	ldw	r2,4(r2)
 2000fa0:	10bfffc4 	addi	r2,r2,-1
 2000fa4:	10803fcc 	andi	r2,r2,255
 2000fa8:	1009883a 	mov	r4,r2
 2000fac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        }
    }
}
 2000fb0:	e037883a 	mov	sp,fp
 2000fb4:	dfc00117 	ldw	ra,4(sp)
 2000fb8:	df000017 	ldw	fp,0(sp)
 2000fbc:	dec00204 	addi	sp,sp,8
 2000fc0:	f800283a 	ret

02000fc4 <LCD_DrawPoint>:

//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(u16 x,u16 y)
{
 2000fc4:	defffc04 	addi	sp,sp,-16
 2000fc8:	dfc00315 	stw	ra,12(sp)
 2000fcc:	df000215 	stw	fp,8(sp)
 2000fd0:	df000204 	addi	fp,sp,8
 2000fd4:	e13ffe15 	stw	r4,-8(fp)
 2000fd8:	e17fff15 	stw	r5,-4(fp)
    LCD_SetCursor(x,y);        //设置光标位置
 2000fdc:	e13ffe17 	ldw	r4,-8(fp)
 2000fe0:	e17fff17 	ldw	r5,-4(fp)
 2000fe4:	20007580 	call	2000758 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();    //开始写入GRAM
 2000fe8:	20004240 	call	2000424 <LCD_WriteRAM_Prepare>
    LCD_WR_DATA(POINT_COLOR);
 2000fec:	d0a00017 	ldw	r2,-32768(gp)
 2000ff0:	1009883a 	mov	r4,r2
 2000ff4:	20002a80 	call	20002a8 <LCD_WR_DATA>
}
 2000ff8:	e037883a 	mov	sp,fp
 2000ffc:	dfc00117 	ldw	ra,4(sp)
 2001000:	df000017 	ldw	fp,0(sp)
 2001004:	dec00204 	addi	sp,sp,8
 2001008:	f800283a 	ret

0200100c <LCD_Fast_DrawPoint>:

//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x,u16 y,u32 color)
{
 200100c:	defffb04 	addi	sp,sp,-20
 2001010:	dfc00415 	stw	ra,16(sp)
 2001014:	df000315 	stw	fp,12(sp)
 2001018:	df000304 	addi	fp,sp,12
 200101c:	e13ffd15 	stw	r4,-12(fp)
 2001020:	e17ffe15 	stw	r5,-8(fp)
 2001024:	e1bfff15 	stw	r6,-4(fp)
    if(lcddev.id==0X9341||lcddev.id==0X5310)
 2001028:	00808074 	movhi	r2,513
 200102c:	108e9f04 	addi	r2,r2,14972
 2001030:	10c00217 	ldw	r3,8(r2)
 2001034:	00a4d054 	movui	r2,37697
 2001038:	18800526 	beq	r3,r2,2001050 <LCD_Fast_DrawPoint+0x44>
 200103c:	00808074 	movhi	r2,513
 2001040:	108e9f04 	addi	r2,r2,14972
 2001044:	10800217 	ldw	r2,8(r2)
 2001048:	1094c418 	cmpnei	r2,r2,21264
 200104c:	10001b1e 	bne	r2,zero,20010bc <LCD_Fast_DrawPoint+0xb0>
    {
         LCD_WR_CMD(lcddev.setxcmd);
 2001050:	00808074 	movhi	r2,513
 2001054:	108e9f04 	addi	r2,r2,14972
 2001058:	10800517 	ldw	r2,20(r2)
 200105c:	1009883a 	mov	r4,r2
 2001060:	20002380 	call	2000238 <LCD_WR_CMD>
         LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 2001064:	e0bffd17 	ldw	r2,-12(fp)
 2001068:	1004d23a 	srli	r2,r2,8
 200106c:	1009883a 	mov	r4,r2
 2001070:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2001074:	e0bffd17 	ldw	r2,-12(fp)
 2001078:	10803fcc 	andi	r2,r2,255
 200107c:	1009883a 	mov	r4,r2
 2001080:	20002a80 	call	20002a8 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd);
 2001084:	00808074 	movhi	r2,513
 2001088:	108e9f04 	addi	r2,r2,14972
 200108c:	10800617 	ldw	r2,24(r2)
 2001090:	1009883a 	mov	r4,r2
 2001094:	20002380 	call	2000238 <LCD_WR_CMD>
         LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 2001098:	e0bffe17 	ldw	r2,-8(fp)
 200109c:	1004d23a 	srli	r2,r2,8
 20010a0:	1009883a 	mov	r4,r2
 20010a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20010a8:	e0bffe17 	ldw	r2,-8(fp)
 20010ac:	10803fcc 	andi	r2,r2,255
 20010b0:	1009883a 	mov	r4,r2
 20010b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20010b8:	00006706 	br	2001258 <LCD_Fast_DrawPoint+0x24c>
    }else if(lcddev.id==0X5510)
 20010bc:	00808074 	movhi	r2,513
 20010c0:	108e9f04 	addi	r2,r2,14972
 20010c4:	10800217 	ldw	r2,8(r2)
 20010c8:	10954418 	cmpnei	r2,r2,21776
 20010cc:	1000271e 	bne	r2,zero,200116c <LCD_Fast_DrawPoint+0x160>
    {
         LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 20010d0:	00808074 	movhi	r2,513
 20010d4:	108e9f04 	addi	r2,r2,14972
 20010d8:	10800517 	ldw	r2,20(r2)
 20010dc:	1009883a 	mov	r4,r2
 20010e0:	20002380 	call	2000238 <LCD_WR_CMD>
 20010e4:	e0bffd17 	ldw	r2,-12(fp)
 20010e8:	1004d23a 	srli	r2,r2,8
 20010ec:	1009883a 	mov	r4,r2
 20010f0:	20002a80 	call	20002a8 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 20010f4:	00808074 	movhi	r2,513
 20010f8:	108e9f04 	addi	r2,r2,14972
 20010fc:	10800517 	ldw	r2,20(r2)
 2001100:	10800044 	addi	r2,r2,1
 2001104:	1009883a 	mov	r4,r2
 2001108:	20002380 	call	2000238 <LCD_WR_CMD>
 200110c:	e0bffd17 	ldw	r2,-12(fp)
 2001110:	10803fcc 	andi	r2,r2,255
 2001114:	1009883a 	mov	r4,r2
 2001118:	20002a80 	call	20002a8 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(y>>8);
 200111c:	00808074 	movhi	r2,513
 2001120:	108e9f04 	addi	r2,r2,14972
 2001124:	10800617 	ldw	r2,24(r2)
 2001128:	1009883a 	mov	r4,r2
 200112c:	20002380 	call	2000238 <LCD_WR_CMD>
 2001130:	e0bffe17 	ldw	r2,-8(fp)
 2001134:	1004d23a 	srli	r2,r2,8
 2001138:	1009883a 	mov	r4,r2
 200113c:	20002a80 	call	20002a8 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 2001140:	00808074 	movhi	r2,513
 2001144:	108e9f04 	addi	r2,r2,14972
 2001148:	10800617 	ldw	r2,24(r2)
 200114c:	10800044 	addi	r2,r2,1
 2001150:	1009883a 	mov	r4,r2
 2001154:	20002380 	call	2000238 <LCD_WR_CMD>
 2001158:	e0bffe17 	ldw	r2,-8(fp)
 200115c:	10803fcc 	andi	r2,r2,255
 2001160:	1009883a 	mov	r4,r2
 2001164:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2001168:	00003b06 	br	2001258 <LCD_Fast_DrawPoint+0x24c>
    }else if(lcddev.id==0X1963)
 200116c:	00808074 	movhi	r2,513
 2001170:	108e9f04 	addi	r2,r2,14972
 2001174:	10800217 	ldw	r2,8(r2)
 2001178:	108658d8 	cmpnei	r2,r2,6499
 200117c:	1000361e 	bne	r2,zero,2001258 <LCD_Fast_DrawPoint+0x24c>
    {
         if(lcddev.dir==0)x=lcddev.width-1-x;
 2001180:	00808074 	movhi	r2,513
 2001184:	108e9f04 	addi	r2,r2,14972
 2001188:	10800303 	ldbu	r2,12(r2)
 200118c:	10803fcc 	andi	r2,r2,255
 2001190:	1000071e 	bne	r2,zero,20011b0 <LCD_Fast_DrawPoint+0x1a4>
 2001194:	00808074 	movhi	r2,513
 2001198:	108e9f04 	addi	r2,r2,14972
 200119c:	10c00017 	ldw	r3,0(r2)
 20011a0:	e0bffd17 	ldw	r2,-12(fp)
 20011a4:	1885c83a 	sub	r2,r3,r2
 20011a8:	10bfffc4 	addi	r2,r2,-1
 20011ac:	e0bffd15 	stw	r2,-12(fp)
         LCD_WR_CMD(lcddev.setxcmd);
 20011b0:	00808074 	movhi	r2,513
 20011b4:	108e9f04 	addi	r2,r2,14972
 20011b8:	10800517 	ldw	r2,20(r2)
 20011bc:	1009883a 	mov	r4,r2
 20011c0:	20002380 	call	2000238 <LCD_WR_CMD>
         LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 20011c4:	e0bffd17 	ldw	r2,-12(fp)
 20011c8:	1004d23a 	srli	r2,r2,8
 20011cc:	1009883a 	mov	r4,r2
 20011d0:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20011d4:	e0bffd17 	ldw	r2,-12(fp)
 20011d8:	10803fcc 	andi	r2,r2,255
 20011dc:	1009883a 	mov	r4,r2
 20011e0:	20002a80 	call	20002a8 <LCD_WR_DATA>
         LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 20011e4:	e0bffd17 	ldw	r2,-12(fp)
 20011e8:	1004d23a 	srli	r2,r2,8
 20011ec:	1009883a 	mov	r4,r2
 20011f0:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20011f4:	e0bffd17 	ldw	r2,-12(fp)
 20011f8:	10803fcc 	andi	r2,r2,255
 20011fc:	1009883a 	mov	r4,r2
 2001200:	20002a80 	call	20002a8 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd);
 2001204:	00808074 	movhi	r2,513
 2001208:	108e9f04 	addi	r2,r2,14972
 200120c:	10800617 	ldw	r2,24(r2)
 2001210:	1009883a 	mov	r4,r2
 2001214:	20002380 	call	2000238 <LCD_WR_CMD>
         LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 2001218:	e0bffe17 	ldw	r2,-8(fp)
 200121c:	1004d23a 	srli	r2,r2,8
 2001220:	1009883a 	mov	r4,r2
 2001224:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2001228:	e0bffe17 	ldw	r2,-8(fp)
 200122c:	10803fcc 	andi	r2,r2,255
 2001230:	1009883a 	mov	r4,r2
 2001234:	20002a80 	call	20002a8 <LCD_WR_DATA>
         LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 2001238:	e0bffe17 	ldw	r2,-8(fp)
 200123c:	1004d23a 	srli	r2,r2,8
 2001240:	1009883a 	mov	r4,r2
 2001244:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2001248:	e0bffe17 	ldw	r2,-8(fp)
 200124c:	10803fcc 	andi	r2,r2,255
 2001250:	1009883a 	mov	r4,r2
 2001254:	20002a80 	call	20002a8 <LCD_WR_DATA>
    }
    LCD_WR_CMD(lcddev.wramcmd);
 2001258:	00808074 	movhi	r2,513
 200125c:	108e9f04 	addi	r2,r2,14972
 2001260:	10800417 	ldw	r2,16(r2)
 2001264:	1009883a 	mov	r4,r2
 2001268:	20002380 	call	2000238 <LCD_WR_CMD>
    LCD_WR_DATA(color);
 200126c:	e13fff17 	ldw	r4,-4(fp)
 2001270:	20002a80 	call	20002a8 <LCD_WR_DATA>
}
 2001274:	e037883a 	mov	sp,fp
 2001278:	dfc00117 	ldw	ra,4(sp)
 200127c:	df000017 	ldw	fp,0(sp)
 2001280:	dec00204 	addi	sp,sp,8
 2001284:	f800283a 	ret

02001288 <LCD_SSD_BackLightSet>:

//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
 2001288:	defffd04 	addi	sp,sp,-12
 200128c:	dfc00215 	stw	ra,8(sp)
 2001290:	df000115 	stw	fp,4(sp)
 2001294:	df000104 	addi	fp,sp,4
 2001298:	2005883a 	mov	r2,r4
 200129c:	e0bfff05 	stb	r2,-4(fp)
    LCD_WR_CMD(0xBE);  //配置PWM输出
 20012a0:	01002f84 	movi	r4,190
 20012a4:	20002380 	call	2000238 <LCD_WR_CMD>
    LCD_WR_DATA(0x05); //1设置PWM频率
 20012a8:	01000144 	movi	r4,5
 20012ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
    LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 20012b0:	e0bfff03 	ldbu	r2,-4(fp)
 20012b4:	1009883a 	mov	r4,r2
 20012b8:	20057e00 	call	20057e0 <__floatsidf>
 20012bc:	100b883a 	mov	r5,r2
 20012c0:	180d883a 	mov	r6,r3
 20012c4:	2809883a 	mov	r4,r5
 20012c8:	300b883a 	mov	r5,r6
 20012cc:	019999b4 	movhi	r6,26214
 20012d0:	31999984 	addi	r6,r6,26214
 20012d4:	01d00134 	movhi	r7,16388
 20012d8:	39d99984 	addi	r7,r7,26214
 20012dc:	20054980 	call	2005498 <__muldf3>
 20012e0:	1009883a 	mov	r4,r2
 20012e4:	180b883a 	mov	r5,r3
 20012e8:	2005883a 	mov	r2,r4
 20012ec:	2807883a 	mov	r3,r5
 20012f0:	1009883a 	mov	r4,r2
 20012f4:	180b883a 	mov	r5,r3
 20012f8:	200500c0 	call	200500c <__fixunsdfsi>
 20012fc:	1009883a 	mov	r4,r2
 2001300:	20002a80 	call	20002a8 <LCD_WR_DATA>
    LCD_WR_DATA(0x01); //3设置C
 2001304:	01000044 	movi	r4,1
 2001308:	20002a80 	call	20002a8 <LCD_WR_DATA>
    LCD_WR_DATA(0xFF); //4设置D
 200130c:	01003fc4 	movi	r4,255
 2001310:	20002a80 	call	20002a8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00); //5设置E
 2001314:	0009883a 	mov	r4,zero
 2001318:	20002a80 	call	20002a8 <LCD_WR_DATA>
    LCD_WR_DATA(0x00); //6设置F
 200131c:	0009883a 	mov	r4,zero
 2001320:	20002a80 	call	20002a8 <LCD_WR_DATA>
}
 2001324:	e037883a 	mov	sp,fp
 2001328:	dfc00117 	ldw	ra,4(sp)
 200132c:	df000017 	ldw	fp,0(sp)
 2001330:	dec00204 	addi	sp,sp,8
 2001334:	f800283a 	ret

02001338 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 dir)
{
 2001338:	defffd04 	addi	sp,sp,-12
 200133c:	dfc00215 	stw	ra,8(sp)
 2001340:	df000115 	stw	fp,4(sp)
 2001344:	df000104 	addi	fp,sp,4
 2001348:	2005883a 	mov	r2,r4
 200134c:	e0bfff05 	stb	r2,-4(fp)
    lcddev.dir=dir;        //横屏/竖屏
 2001350:	00808074 	movhi	r2,513
 2001354:	108e9f04 	addi	r2,r2,14972
 2001358:	e0ffff03 	ldbu	r3,-4(fp)
 200135c:	10c00305 	stb	r3,12(r2)
    if(dir==0) {           //竖屏
 2001360:	e0bfff03 	ldbu	r2,-4(fp)
 2001364:	1000611e 	bne	r2,zero,20014ec <LCD_Display_Dir+0x1b4>
        lcddev.width=240;
 2001368:	00808074 	movhi	r2,513
 200136c:	108e9f04 	addi	r2,r2,14972
 2001370:	00c03c04 	movi	r3,240
 2001374:	10c00015 	stw	r3,0(r2)
        lcddev.height=320;
 2001378:	00808074 	movhi	r2,513
 200137c:	108e9f04 	addi	r2,r2,14972
 2001380:	00c05004 	movi	r3,320
 2001384:	10c00115 	stw	r3,4(r2)
        if(lcddev.id==0X9341||lcddev.id==0X5310) {
 2001388:	00808074 	movhi	r2,513
 200138c:	108e9f04 	addi	r2,r2,14972
 2001390:	10c00217 	ldw	r3,8(r2)
 2001394:	00a4d054 	movui	r2,37697
 2001398:	18800526 	beq	r3,r2,20013b0 <LCD_Display_Dir+0x78>
 200139c:	00808074 	movhi	r2,513
 20013a0:	108e9f04 	addi	r2,r2,14972
 20013a4:	10800217 	ldw	r2,8(r2)
 20013a8:	1094c418 	cmpnei	r2,r2,21264
 20013ac:	10001b1e 	bne	r2,zero,200141c <LCD_Display_Dir+0xe4>
             lcddev.wramcmd=0X2C;
 20013b0:	00808074 	movhi	r2,513
 20013b4:	108e9f04 	addi	r2,r2,14972
 20013b8:	00c00b04 	movi	r3,44
 20013bc:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A;
 20013c0:	00808074 	movhi	r2,513
 20013c4:	108e9f04 	addi	r2,r2,14972
 20013c8:	00c00a84 	movi	r3,42
 20013cc:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B;
 20013d0:	00808074 	movhi	r2,513
 20013d4:	108e9f04 	addi	r2,r2,14972
 20013d8:	00c00ac4 	movi	r3,43
 20013dc:	10c00615 	stw	r3,24(r2)
             if(lcddev.id==0X5310) {
 20013e0:	00808074 	movhi	r2,513
 20013e4:	108e9f04 	addi	r2,r2,14972
 20013e8:	10800217 	ldw	r2,8(r2)
 20013ec:	1094c418 	cmpnei	r2,r2,21264
 20013f0:	10009f1e 	bne	r2,zero,2001670 <LCD_Display_Dir+0x338>
                  lcddev.width=320;
 20013f4:	00808074 	movhi	r2,513
 20013f8:	108e9f04 	addi	r2,r2,14972
 20013fc:	00c05004 	movi	r3,320
 2001400:	10c00015 	stw	r3,0(r2)
                  lcddev.height=480;
 2001404:	00808074 	movhi	r2,513
 2001408:	108e9f04 	addi	r2,r2,14972
 200140c:	00c07804 	movi	r3,480
 2001410:	10c00115 	stw	r3,4(r2)
        lcddev.height=320;
        if(lcddev.id==0X9341||lcddev.id==0X5310) {
             lcddev.wramcmd=0X2C;
             lcddev.setxcmd=0X2A;
             lcddev.setycmd=0X2B;
             if(lcddev.id==0X5310) {
 2001414:	0001883a 	nop
 2001418:	00009506 	br	2001670 <LCD_Display_Dir+0x338>
                  lcddev.width=320;
                  lcddev.height=480;
             }
        }else if(lcddev.id==0x5510) {
 200141c:	00808074 	movhi	r2,513
 2001420:	108e9f04 	addi	r2,r2,14972
 2001424:	10800217 	ldw	r2,8(r2)
 2001428:	10954418 	cmpnei	r2,r2,21776
 200142c:	1000151e 	bne	r2,zero,2001484 <LCD_Display_Dir+0x14c>
             lcddev.wramcmd=0X2C00;
 2001430:	00808074 	movhi	r2,513
 2001434:	108e9f04 	addi	r2,r2,14972
 2001438:	00cb0004 	movi	r3,11264
 200143c:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A00;
 2001440:	00808074 	movhi	r2,513
 2001444:	108e9f04 	addi	r2,r2,14972
 2001448:	00ca8004 	movi	r3,10752
 200144c:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B00;
 2001450:	00808074 	movhi	r2,513
 2001454:	108e9f04 	addi	r2,r2,14972
 2001458:	00cac004 	movi	r3,11008
 200145c:	10c00615 	stw	r3,24(r2)
             lcddev.width=480;
 2001460:	00808074 	movhi	r2,513
 2001464:	108e9f04 	addi	r2,r2,14972
 2001468:	00c07804 	movi	r3,480
 200146c:	10c00015 	stw	r3,0(r2)
             lcddev.height=800;
 2001470:	00808074 	movhi	r2,513
 2001474:	108e9f04 	addi	r2,r2,14972
 2001478:	00c0c804 	movi	r3,800
 200147c:	10c00115 	stw	r3,4(r2)
        }else if(lcddev.id==0X1963) {
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
             lcddev.setxcmd=0X2B;     //设置写X坐标指令
             lcddev.setycmd=0X2A;     //设置写Y坐标指令
             lcddev.width=480;        //设置宽度480
             lcddev.height=800;       //设置高度800
 2001480:	00007a06 	br	200166c <LCD_Display_Dir+0x334>
             lcddev.wramcmd=0X2C00;
             lcddev.setxcmd=0X2A00;
             lcddev.setycmd=0X2B00;
             lcddev.width=480;
             lcddev.height=800;
        }else if(lcddev.id==0X1963) {
 2001484:	00808074 	movhi	r2,513
 2001488:	108e9f04 	addi	r2,r2,14972
 200148c:	10800217 	ldw	r2,8(r2)
 2001490:	108658d8 	cmpnei	r2,r2,6499
 2001494:	1000751e 	bne	r2,zero,200166c <LCD_Display_Dir+0x334>
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
 2001498:	00808074 	movhi	r2,513
 200149c:	108e9f04 	addi	r2,r2,14972
 20014a0:	00c00b04 	movi	r3,44
 20014a4:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2B;     //设置写X坐标指令
 20014a8:	00808074 	movhi	r2,513
 20014ac:	108e9f04 	addi	r2,r2,14972
 20014b0:	00c00ac4 	movi	r3,43
 20014b4:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2A;     //设置写Y坐标指令
 20014b8:	00808074 	movhi	r2,513
 20014bc:	108e9f04 	addi	r2,r2,14972
 20014c0:	00c00a84 	movi	r3,42
 20014c4:	10c00615 	stw	r3,24(r2)
             lcddev.width=480;        //设置宽度480
 20014c8:	00808074 	movhi	r2,513
 20014cc:	108e9f04 	addi	r2,r2,14972
 20014d0:	00c07804 	movi	r3,480
 20014d4:	10c00015 	stw	r3,0(r2)
             lcddev.height=800;       //设置高度800
 20014d8:	00808074 	movhi	r2,513
 20014dc:	108e9f04 	addi	r2,r2,14972
 20014e0:	00c0c804 	movi	r3,800
 20014e4:	10c00115 	stw	r3,4(r2)
 20014e8:	00006006 	br	200166c <LCD_Display_Dir+0x334>
        }
    }else {                //横屏
        lcddev.width=320;
 20014ec:	00808074 	movhi	r2,513
 20014f0:	108e9f04 	addi	r2,r2,14972
 20014f4:	00c05004 	movi	r3,320
 20014f8:	10c00015 	stw	r3,0(r2)
        lcddev.height=240;
 20014fc:	00808074 	movhi	r2,513
 2001500:	108e9f04 	addi	r2,r2,14972
 2001504:	00c03c04 	movi	r3,240
 2001508:	10c00115 	stw	r3,4(r2)
        if(lcddev.id==0X9341||lcddev.id==0X5310)
 200150c:	00808074 	movhi	r2,513
 2001510:	108e9f04 	addi	r2,r2,14972
 2001514:	10c00217 	ldw	r3,8(r2)
 2001518:	00a4d054 	movui	r2,37697
 200151c:	18800526 	beq	r3,r2,2001534 <LCD_Display_Dir+0x1fc>
 2001520:	00808074 	movhi	r2,513
 2001524:	108e9f04 	addi	r2,r2,14972
 2001528:	10800217 	ldw	r2,8(r2)
 200152c:	1094c418 	cmpnei	r2,r2,21264
 2001530:	10000d1e 	bne	r2,zero,2001568 <LCD_Display_Dir+0x230>
        {
             lcddev.wramcmd=0X2C;
 2001534:	00808074 	movhi	r2,513
 2001538:	108e9f04 	addi	r2,r2,14972
 200153c:	00c00b04 	movi	r3,44
 2001540:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A;
 2001544:	00808074 	movhi	r2,513
 2001548:	108e9f04 	addi	r2,r2,14972
 200154c:	00c00a84 	movi	r3,42
 2001550:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B;
 2001554:	00808074 	movhi	r2,513
 2001558:	108e9f04 	addi	r2,r2,14972
 200155c:	00c00ac4 	movi	r3,43
 2001560:	10c00615 	stw	r3,24(r2)
 2001564:	00003306 	br	2001634 <LCD_Display_Dir+0x2fc>
        }else if(lcddev.id==0x5510)
 2001568:	00808074 	movhi	r2,513
 200156c:	108e9f04 	addi	r2,r2,14972
 2001570:	10800217 	ldw	r2,8(r2)
 2001574:	10954418 	cmpnei	r2,r2,21776
 2001578:	1000151e 	bne	r2,zero,20015d0 <LCD_Display_Dir+0x298>
        {
             lcddev.wramcmd=0X2C00;
 200157c:	00808074 	movhi	r2,513
 2001580:	108e9f04 	addi	r2,r2,14972
 2001584:	00cb0004 	movi	r3,11264
 2001588:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A00;
 200158c:	00808074 	movhi	r2,513
 2001590:	108e9f04 	addi	r2,r2,14972
 2001594:	00ca8004 	movi	r3,10752
 2001598:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B00;
 200159c:	00808074 	movhi	r2,513
 20015a0:	108e9f04 	addi	r2,r2,14972
 20015a4:	00cac004 	movi	r3,11008
 20015a8:	10c00615 	stw	r3,24(r2)
             lcddev.width=800;
 20015ac:	00808074 	movhi	r2,513
 20015b0:	108e9f04 	addi	r2,r2,14972
 20015b4:	00c0c804 	movi	r3,800
 20015b8:	10c00015 	stw	r3,0(r2)
             lcddev.height=480;
 20015bc:	00808074 	movhi	r2,513
 20015c0:	108e9f04 	addi	r2,r2,14972
 20015c4:	00c07804 	movi	r3,480
 20015c8:	10c00115 	stw	r3,4(r2)
 20015cc:	00001906 	br	2001634 <LCD_Display_Dir+0x2fc>
        }else if(lcddev.id==0X1963)
 20015d0:	00808074 	movhi	r2,513
 20015d4:	108e9f04 	addi	r2,r2,14972
 20015d8:	10800217 	ldw	r2,8(r2)
 20015dc:	108658d8 	cmpnei	r2,r2,6499
 20015e0:	1000141e 	bne	r2,zero,2001634 <LCD_Display_Dir+0x2fc>
        {
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
 20015e4:	00808074 	movhi	r2,513
 20015e8:	108e9f04 	addi	r2,r2,14972
 20015ec:	00c00b04 	movi	r3,44
 20015f0:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A;     //设置写X坐标指令
 20015f4:	00808074 	movhi	r2,513
 20015f8:	108e9f04 	addi	r2,r2,14972
 20015fc:	00c00a84 	movi	r3,42
 2001600:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B;     //设置写Y坐标指令
 2001604:	00808074 	movhi	r2,513
 2001608:	108e9f04 	addi	r2,r2,14972
 200160c:	00c00ac4 	movi	r3,43
 2001610:	10c00615 	stw	r3,24(r2)
             lcddev.width=800;        //设置宽度800
 2001614:	00808074 	movhi	r2,513
 2001618:	108e9f04 	addi	r2,r2,14972
 200161c:	00c0c804 	movi	r3,800
 2001620:	10c00015 	stw	r3,0(r2)
             lcddev.height=480;       //设置高度480
 2001624:	00808074 	movhi	r2,513
 2001628:	108e9f04 	addi	r2,r2,14972
 200162c:	00c07804 	movi	r3,480
 2001630:	10c00115 	stw	r3,4(r2)
        }
        if(lcddev.id==0X5310)
 2001634:	00808074 	movhi	r2,513
 2001638:	108e9f04 	addi	r2,r2,14972
 200163c:	10800217 	ldw	r2,8(r2)
 2001640:	1094c418 	cmpnei	r2,r2,21264
 2001644:	10000a1e 	bne	r2,zero,2001670 <LCD_Display_Dir+0x338>
        {
             lcddev.width=480;
 2001648:	00808074 	movhi	r2,513
 200164c:	108e9f04 	addi	r2,r2,14972
 2001650:	00c07804 	movi	r3,480
 2001654:	10c00015 	stw	r3,0(r2)
             lcddev.height=320;
 2001658:	00808074 	movhi	r2,513
 200165c:	108e9f04 	addi	r2,r2,14972
 2001660:	00c05004 	movi	r3,320
 2001664:	10c00115 	stw	r3,4(r2)
 2001668:	00000106 	br	2001670 <LCD_Display_Dir+0x338>
        }else if(lcddev.id==0X1963) {
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
             lcddev.setxcmd=0X2B;     //设置写X坐标指令
             lcddev.setycmd=0X2A;     //设置写Y坐标指令
             lcddev.width=480;        //设置宽度480
             lcddev.height=800;       //设置高度800
 200166c:	0001883a 	nop
        {
             lcddev.width=480;
             lcddev.height=320;
        }
    }
    LCD_Scan_Dir(DFT_SCAN_DIR);    //默认扫描方向
 2001670:	0009883a 	mov	r4,zero
 2001674:	2000a2c0 	call	2000a2c <LCD_Scan_Dir>
}
 2001678:	e037883a 	mov	sp,fp
 200167c:	dfc00117 	ldw	ra,4(sp)
 2001680:	df000017 	ldw	fp,0(sp)
 2001684:	dec00204 	addi	sp,sp,8
 2001688:	f800283a 	ret

0200168c <LCD_Set_Window>:
//设置窗口(对RGB屏无效),并自动设置画点坐标到窗口左上角(sx,sy).
//sx,sy:窗口起始坐标(左上角)
//width,height:窗口宽度和高度,必须大于0!!
//窗体大小:width*height.
void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height)
{
 200168c:	defff804 	addi	sp,sp,-32
 2001690:	dfc00715 	stw	ra,28(sp)
 2001694:	df000615 	stw	fp,24(sp)
 2001698:	df000604 	addi	fp,sp,24
 200169c:	e13ffc15 	stw	r4,-16(fp)
 20016a0:	e17ffd15 	stw	r5,-12(fp)
 20016a4:	e1bffe15 	stw	r6,-8(fp)
 20016a8:	e1ffff15 	stw	r7,-4(fp)
    u16 twidth,theight;
    twidth=sx+width-1;
 20016ac:	e0fffc17 	ldw	r3,-16(fp)
 20016b0:	e0bffe17 	ldw	r2,-8(fp)
 20016b4:	1885883a 	add	r2,r3,r2
 20016b8:	10bfffc4 	addi	r2,r2,-1
 20016bc:	e0bffa15 	stw	r2,-24(fp)
    theight=sy+height-1;
 20016c0:	e0fffd17 	ldw	r3,-12(fp)
 20016c4:	e0bfff17 	ldw	r2,-4(fp)
 20016c8:	1885883a 	add	r2,r3,r2
 20016cc:	10bfffc4 	addi	r2,r2,-1
 20016d0:	e0bffb15 	stw	r2,-20(fp)
    if(lcddev.id==0X9341||lcddev.id==0X5310||(lcddev.dir==1&&lcddev.id==0X1963)) {
 20016d4:	00808074 	movhi	r2,513
 20016d8:	108e9f04 	addi	r2,r2,14972
 20016dc:	10c00217 	ldw	r3,8(r2)
 20016e0:	00a4d054 	movui	r2,37697
 20016e4:	18801026 	beq	r3,r2,2001728 <LCD_Set_Window+0x9c>
 20016e8:	00808074 	movhi	r2,513
 20016ec:	108e9f04 	addi	r2,r2,14972
 20016f0:	10800217 	ldw	r2,8(r2)
 20016f4:	1094c420 	cmpeqi	r2,r2,21264
 20016f8:	10000b1e 	bne	r2,zero,2001728 <LCD_Set_Window+0x9c>
 20016fc:	00808074 	movhi	r2,513
 2001700:	108e9f04 	addi	r2,r2,14972
 2001704:	10800303 	ldbu	r2,12(r2)
 2001708:	10803fcc 	andi	r2,r2,255
 200170c:	10800058 	cmpnei	r2,r2,1
 2001710:	1000301e 	bne	r2,zero,20017d4 <LCD_Set_Window+0x148>
 2001714:	00808074 	movhi	r2,513
 2001718:	108e9f04 	addi	r2,r2,14972
 200171c:	10800217 	ldw	r2,8(r2)
 2001720:	108658d8 	cmpnei	r2,r2,6499
 2001724:	10002b1e 	bne	r2,zero,20017d4 <LCD_Set_Window+0x148>
        LCD_WR_CMD(lcddev.setxcmd);
 2001728:	00808074 	movhi	r2,513
 200172c:	108e9f04 	addi	r2,r2,14972
 2001730:	10800517 	ldw	r2,20(r2)
 2001734:	1009883a 	mov	r4,r2
 2001738:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(sx>>8);
 200173c:	e0bffc17 	ldw	r2,-16(fp)
 2001740:	1004d23a 	srli	r2,r2,8
 2001744:	1009883a 	mov	r4,r2
 2001748:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(sx&0XFF);
 200174c:	e0bffc17 	ldw	r2,-16(fp)
 2001750:	10803fcc 	andi	r2,r2,255
 2001754:	1009883a 	mov	r4,r2
 2001758:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(twidth>>8);
 200175c:	e0bffa17 	ldw	r2,-24(fp)
 2001760:	1004d23a 	srli	r2,r2,8
 2001764:	1009883a 	mov	r4,r2
 2001768:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(twidth&0XFF);
 200176c:	e0bffa17 	ldw	r2,-24(fp)
 2001770:	10803fcc 	andi	r2,r2,255
 2001774:	1009883a 	mov	r4,r2
 2001778:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd);
 200177c:	00808074 	movhi	r2,513
 2001780:	108e9f04 	addi	r2,r2,14972
 2001784:	10800617 	ldw	r2,24(r2)
 2001788:	1009883a 	mov	r4,r2
 200178c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(sy>>8);
 2001790:	e0bffd17 	ldw	r2,-12(fp)
 2001794:	1004d23a 	srli	r2,r2,8
 2001798:	1009883a 	mov	r4,r2
 200179c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(sy&0XFF);
 20017a0:	e0bffd17 	ldw	r2,-12(fp)
 20017a4:	10803fcc 	andi	r2,r2,255
 20017a8:	1009883a 	mov	r4,r2
 20017ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(theight>>8);
 20017b0:	e0bffb17 	ldw	r2,-20(fp)
 20017b4:	1004d23a 	srli	r2,r2,8
 20017b8:	1009883a 	mov	r4,r2
 20017bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(theight&0XFF);
 20017c0:	e0bffb17 	ldw	r2,-20(fp)
 20017c4:	10803fcc 	andi	r2,r2,255
 20017c8:	1009883a 	mov	r4,r2
 20017cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20017d0:	00009606 	br	2001a2c <LCD_Set_Window+0x3a0>
    }else if(lcddev.id==0X1963)//1963竖屏特殊处理
 20017d4:	00808074 	movhi	r2,513
 20017d8:	108e9f04 	addi	r2,r2,14972
 20017dc:	10800217 	ldw	r2,8(r2)
 20017e0:	108658d8 	cmpnei	r2,r2,6499
 20017e4:	10003e1e 	bne	r2,zero,20018e0 <LCD_Set_Window+0x254>
    {
        sx=lcddev.width-width-sx;
 20017e8:	00808074 	movhi	r2,513
 20017ec:	108e9f04 	addi	r2,r2,14972
 20017f0:	10c00017 	ldw	r3,0(r2)
 20017f4:	e0bffe17 	ldw	r2,-8(fp)
 20017f8:	1887c83a 	sub	r3,r3,r2
 20017fc:	e0bffc17 	ldw	r2,-16(fp)
 2001800:	1885c83a 	sub	r2,r3,r2
 2001804:	e0bffc15 	stw	r2,-16(fp)
        height=sy+height-1;
 2001808:	e0fffd17 	ldw	r3,-12(fp)
 200180c:	e0bfff17 	ldw	r2,-4(fp)
 2001810:	1885883a 	add	r2,r3,r2
 2001814:	10bfffc4 	addi	r2,r2,-1
 2001818:	e0bfff15 	stw	r2,-4(fp)
        LCD_WR_CMD(lcddev.setxcmd);
 200181c:	00808074 	movhi	r2,513
 2001820:	108e9f04 	addi	r2,r2,14972
 2001824:	10800517 	ldw	r2,20(r2)
 2001828:	1009883a 	mov	r4,r2
 200182c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(sx>>8);
 2001830:	e0bffc17 	ldw	r2,-16(fp)
 2001834:	1004d23a 	srli	r2,r2,8
 2001838:	1009883a 	mov	r4,r2
 200183c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(sx&0XFF);
 2001840:	e0bffc17 	ldw	r2,-16(fp)
 2001844:	10803fcc 	andi	r2,r2,255
 2001848:	1009883a 	mov	r4,r2
 200184c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA((sx+width-1)>>8);
 2001850:	e0fffc17 	ldw	r3,-16(fp)
 2001854:	e0bffe17 	ldw	r2,-8(fp)
 2001858:	1885883a 	add	r2,r3,r2
 200185c:	10bfffc4 	addi	r2,r2,-1
 2001860:	1004d23a 	srli	r2,r2,8
 2001864:	1009883a 	mov	r4,r2
 2001868:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA((sx+width-1)&0XFF);
 200186c:	e0fffc17 	ldw	r3,-16(fp)
 2001870:	e0bffe17 	ldw	r2,-8(fp)
 2001874:	1885883a 	add	r2,r3,r2
 2001878:	10bfffc4 	addi	r2,r2,-1
 200187c:	10803fcc 	andi	r2,r2,255
 2001880:	1009883a 	mov	r4,r2
 2001884:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd);
 2001888:	00808074 	movhi	r2,513
 200188c:	108e9f04 	addi	r2,r2,14972
 2001890:	10800617 	ldw	r2,24(r2)
 2001894:	1009883a 	mov	r4,r2
 2001898:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(sy>>8);
 200189c:	e0bffd17 	ldw	r2,-12(fp)
 20018a0:	1004d23a 	srli	r2,r2,8
 20018a4:	1009883a 	mov	r4,r2
 20018a8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(sy&0XFF);
 20018ac:	e0bffd17 	ldw	r2,-12(fp)
 20018b0:	10803fcc 	andi	r2,r2,255
 20018b4:	1009883a 	mov	r4,r2
 20018b8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(height>>8);
 20018bc:	e0bfff17 	ldw	r2,-4(fp)
 20018c0:	1004d23a 	srli	r2,r2,8
 20018c4:	1009883a 	mov	r4,r2
 20018c8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(height&0XFF);
 20018cc:	e0bfff17 	ldw	r2,-4(fp)
 20018d0:	10803fcc 	andi	r2,r2,255
 20018d4:	1009883a 	mov	r4,r2
 20018d8:	20002a80 	call	20002a8 <LCD_WR_DATA>
 20018dc:	00005306 	br	2001a2c <LCD_Set_Window+0x3a0>
    }else if(lcddev.id==0X5510)
 20018e0:	00808074 	movhi	r2,513
 20018e4:	108e9f04 	addi	r2,r2,14972
 20018e8:	10800217 	ldw	r2,8(r2)
 20018ec:	10954418 	cmpnei	r2,r2,21776
 20018f0:	10004e1e 	bne	r2,zero,2001a2c <LCD_Set_Window+0x3a0>
    {
        LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(sx>>8);
 20018f4:	00808074 	movhi	r2,513
 20018f8:	108e9f04 	addi	r2,r2,14972
 20018fc:	10800517 	ldw	r2,20(r2)
 2001900:	1009883a 	mov	r4,r2
 2001904:	20002380 	call	2000238 <LCD_WR_CMD>
 2001908:	e0bffc17 	ldw	r2,-16(fp)
 200190c:	1004d23a 	srli	r2,r2,8
 2001910:	1009883a 	mov	r4,r2
 2001914:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(sx&0XFF);
 2001918:	00808074 	movhi	r2,513
 200191c:	108e9f04 	addi	r2,r2,14972
 2001920:	10800517 	ldw	r2,20(r2)
 2001924:	10800044 	addi	r2,r2,1
 2001928:	1009883a 	mov	r4,r2
 200192c:	20002380 	call	2000238 <LCD_WR_CMD>
 2001930:	e0bffc17 	ldw	r2,-16(fp)
 2001934:	10803fcc 	andi	r2,r2,255
 2001938:	1009883a 	mov	r4,r2
 200193c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setxcmd+2);LCD_WR_DATA(twidth>>8);
 2001940:	00808074 	movhi	r2,513
 2001944:	108e9f04 	addi	r2,r2,14972
 2001948:	10800517 	ldw	r2,20(r2)
 200194c:	10800084 	addi	r2,r2,2
 2001950:	1009883a 	mov	r4,r2
 2001954:	20002380 	call	2000238 <LCD_WR_CMD>
 2001958:	e0bffa17 	ldw	r2,-24(fp)
 200195c:	1004d23a 	srli	r2,r2,8
 2001960:	1009883a 	mov	r4,r2
 2001964:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setxcmd+3);LCD_WR_DATA(twidth&0XFF);
 2001968:	00808074 	movhi	r2,513
 200196c:	108e9f04 	addi	r2,r2,14972
 2001970:	10800517 	ldw	r2,20(r2)
 2001974:	108000c4 	addi	r2,r2,3
 2001978:	1009883a 	mov	r4,r2
 200197c:	20002380 	call	2000238 <LCD_WR_CMD>
 2001980:	e0bffa17 	ldw	r2,-24(fp)
 2001984:	10803fcc 	andi	r2,r2,255
 2001988:	1009883a 	mov	r4,r2
 200198c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(sy>>8);
 2001990:	00808074 	movhi	r2,513
 2001994:	108e9f04 	addi	r2,r2,14972
 2001998:	10800617 	ldw	r2,24(r2)
 200199c:	1009883a 	mov	r4,r2
 20019a0:	20002380 	call	2000238 <LCD_WR_CMD>
 20019a4:	e0bffd17 	ldw	r2,-12(fp)
 20019a8:	1004d23a 	srli	r2,r2,8
 20019ac:	1009883a 	mov	r4,r2
 20019b0:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(sy&0XFF);
 20019b4:	00808074 	movhi	r2,513
 20019b8:	108e9f04 	addi	r2,r2,14972
 20019bc:	10800617 	ldw	r2,24(r2)
 20019c0:	10800044 	addi	r2,r2,1
 20019c4:	1009883a 	mov	r4,r2
 20019c8:	20002380 	call	2000238 <LCD_WR_CMD>
 20019cc:	e0bffd17 	ldw	r2,-12(fp)
 20019d0:	10803fcc 	andi	r2,r2,255
 20019d4:	1009883a 	mov	r4,r2
 20019d8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd+2);LCD_WR_DATA(theight>>8);
 20019dc:	00808074 	movhi	r2,513
 20019e0:	108e9f04 	addi	r2,r2,14972
 20019e4:	10800617 	ldw	r2,24(r2)
 20019e8:	10800084 	addi	r2,r2,2
 20019ec:	1009883a 	mov	r4,r2
 20019f0:	20002380 	call	2000238 <LCD_WR_CMD>
 20019f4:	e0bffb17 	ldw	r2,-20(fp)
 20019f8:	1004d23a 	srli	r2,r2,8
 20019fc:	1009883a 	mov	r4,r2
 2001a00:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd+3);LCD_WR_DATA(theight&0XFF);
 2001a04:	00808074 	movhi	r2,513
 2001a08:	108e9f04 	addi	r2,r2,14972
 2001a0c:	10800617 	ldw	r2,24(r2)
 2001a10:	108000c4 	addi	r2,r2,3
 2001a14:	1009883a 	mov	r4,r2
 2001a18:	20002380 	call	2000238 <LCD_WR_CMD>
 2001a1c:	e0bffb17 	ldw	r2,-20(fp)
 2001a20:	10803fcc 	andi	r2,r2,255
 2001a24:	1009883a 	mov	r4,r2
 2001a28:	20002a80 	call	20002a8 <LCD_WR_DATA>
    }
}
 2001a2c:	e037883a 	mov	sp,fp
 2001a30:	dfc00117 	ldw	ra,4(sp)
 2001a34:	df000017 	ldw	fp,0(sp)
 2001a38:	dec00204 	addi	sp,sp,8
 2001a3c:	f800283a 	ret

02001a40 <MCULCD_Init>:

//TFTLCD初始化
void MCULCD_Init(void)
{
 2001a40:	defffd04 	addi	sp,sp,-12
 2001a44:	dfc00215 	stw	ra,8(sp)
 2001a48:	df000115 	stw	fp,4(sp)
 2001a4c:	dc000015 	stw	r16,0(sp)
 2001a50:	d839883a 	mov	fp,sp
	//拉低初始化完成引脚
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LCD_INIT_DONE_BASE,0);
 2001a54:	0007883a 	mov	r3,zero
 2001a58:	00810034 	movhi	r2,1024
 2001a5c:	10880404 	addi	r2,r2,8208
 2001a60:	10c00035 	stwio	r3,0(r2)
	//TFTLCD 复位
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RST_N_BASE,0);
 2001a64:	0007883a 	mov	r3,zero
 2001a68:	00810034 	movhi	r2,1024
 2001a6c:	10881c04 	addi	r2,r2,8304
 2001a70:	10c00035 	stwio	r3,0(r2)
	delay_ms(100);
 2001a74:	01001904 	movi	r4,100
 2001a78:	20002000 	call	2000200 <delay_ms>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RST_N_BASE,1);
 2001a7c:	00c00044 	movi	r3,1
 2001a80:	00810034 	movhi	r2,1024
 2001a84:	10881c04 	addi	r2,r2,8304
 2001a88:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_CS_N_BASE,1);
 2001a8c:	00c00044 	movi	r3,1
 2001a90:	00810034 	movhi	r2,1024
 2001a94:	10882804 	addi	r2,r2,8352
 2001a98:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_RD_N_BASE,1);
 2001a9c:	00c00044 	movi	r3,1
 2001aa0:	00810034 	movhi	r2,1024
 2001aa4:	10882004 	addi	r2,r2,8320
 2001aa8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_WR_N_BASE,1);
 2001aac:	00c00044 	movi	r3,1
 2001ab0:	00810034 	movhi	r2,1024
 2001ab4:	10882404 	addi	r2,r2,8336
 2001ab8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_CS_N_BASE,0);
 2001abc:	0007883a 	mov	r3,zero
 2001ac0:	00810034 	movhi	r2,1024
 2001ac4:	10882804 	addi	r2,r2,8352
 2001ac8:	10c00035 	stwio	r3,0(r2)
	//mlcd_data_dir=1为输出
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_DATA_DIR_BASE,1);
 2001acc:	00c00044 	movi	r3,1
 2001ad0:	00810034 	movhi	r2,1024
 2001ad4:	10880804 	addi	r2,r2,8224
 2001ad8:	10c00035 	stwio	r3,0(r2)
	delay_ms(50);
 2001adc:	01000c84 	movi	r4,50
 2001ae0:	20002000 	call	2000200 <delay_ms>

    //尝试9341 ID的读取
    LCD_WR_CMD(0XD3);
 2001ae4:	010034c4 	movi	r4,211
 2001ae8:	20002380 	call	2000238 <LCD_WR_CMD>
    lcddev.id=LCD_RD_DATA();            //dummy read
 2001aec:	20003180 	call	2000318 <LCD_RD_DATA>
 2001af0:	00c08074 	movhi	r3,513
 2001af4:	18ce9f04 	addi	r3,r3,14972
 2001af8:	18800215 	stw	r2,8(r3)
    lcddev.id=LCD_RD_DATA();            //读到0X00
 2001afc:	20003180 	call	2000318 <LCD_RD_DATA>
 2001b00:	00c08074 	movhi	r3,513
 2001b04:	18ce9f04 	addi	r3,r3,14972
 2001b08:	18800215 	stw	r2,8(r3)
    lcddev.id=LCD_RD_DATA();            //读取93
 2001b0c:	20003180 	call	2000318 <LCD_RD_DATA>
 2001b10:	00c08074 	movhi	r3,513
 2001b14:	18ce9f04 	addi	r3,r3,14972
 2001b18:	18800215 	stw	r2,8(r3)
    lcddev.id<<=8;
 2001b1c:	00808074 	movhi	r2,513
 2001b20:	108e9f04 	addi	r2,r2,14972
 2001b24:	10800217 	ldw	r2,8(r2)
 2001b28:	1006923a 	slli	r3,r2,8
 2001b2c:	00808074 	movhi	r2,513
 2001b30:	108e9f04 	addi	r2,r2,14972
 2001b34:	10c00215 	stw	r3,8(r2)
    lcddev.id|=LCD_RD_DATA();           //读取41
 2001b38:	00808074 	movhi	r2,513
 2001b3c:	108e9f04 	addi	r2,r2,14972
 2001b40:	14000217 	ldw	r16,8(r2)
 2001b44:	20003180 	call	2000318 <LCD_RD_DATA>
 2001b48:	8086b03a 	or	r3,r16,r2
 2001b4c:	00808074 	movhi	r2,513
 2001b50:	108e9f04 	addi	r2,r2,14972
 2001b54:	10c00215 	stw	r3,8(r2)
    if(lcddev.id!=0X9341)               //非9341,尝试看看是不是NT35310
 2001b58:	00808074 	movhi	r2,513
 2001b5c:	108e9f04 	addi	r2,r2,14972
 2001b60:	10c00217 	ldw	r3,8(r2)
 2001b64:	00a4d054 	movui	r2,37697
 2001b68:	18806f26 	beq	r3,r2,2001d28 <MCULCD_Init+0x2e8>
    {
        LCD_WR_CMD(0XD4);
 2001b6c:	01003504 	movi	r4,212
 2001b70:	20002380 	call	2000238 <LCD_WR_CMD>
        lcddev.id=LCD_RD_DATA();       //dummy read
 2001b74:	20003180 	call	2000318 <LCD_RD_DATA>
 2001b78:	00c08074 	movhi	r3,513
 2001b7c:	18ce9f04 	addi	r3,r3,14972
 2001b80:	18800215 	stw	r2,8(r3)
        lcddev.id=LCD_RD_DATA();       //读回0X01
 2001b84:	20003180 	call	2000318 <LCD_RD_DATA>
 2001b88:	00c08074 	movhi	r3,513
 2001b8c:	18ce9f04 	addi	r3,r3,14972
 2001b90:	18800215 	stw	r2,8(r3)
        lcddev.id=LCD_RD_DATA();       //读回0X53
 2001b94:	20003180 	call	2000318 <LCD_RD_DATA>
 2001b98:	00c08074 	movhi	r3,513
 2001b9c:	18ce9f04 	addi	r3,r3,14972
 2001ba0:	18800215 	stw	r2,8(r3)
        lcddev.id<<=8;
 2001ba4:	00808074 	movhi	r2,513
 2001ba8:	108e9f04 	addi	r2,r2,14972
 2001bac:	10800217 	ldw	r2,8(r2)
 2001bb0:	1006923a 	slli	r3,r2,8
 2001bb4:	00808074 	movhi	r2,513
 2001bb8:	108e9f04 	addi	r2,r2,14972
 2001bbc:	10c00215 	stw	r3,8(r2)
        lcddev.id|=LCD_RD_DATA();      //这里读回0X10
 2001bc0:	00808074 	movhi	r2,513
 2001bc4:	108e9f04 	addi	r2,r2,14972
 2001bc8:	14000217 	ldw	r16,8(r2)
 2001bcc:	20003180 	call	2000318 <LCD_RD_DATA>
 2001bd0:	8086b03a 	or	r3,r16,r2
 2001bd4:	00808074 	movhi	r2,513
 2001bd8:	108e9f04 	addi	r2,r2,14972
 2001bdc:	10c00215 	stw	r3,8(r2)
        if(lcddev.id!=0X5310)          //也不是NT35310,尝试看看是不是NT35510
 2001be0:	00808074 	movhi	r2,513
 2001be4:	108e9f04 	addi	r2,r2,14972
 2001be8:	10800217 	ldw	r2,8(r2)
 2001bec:	1094c420 	cmpeqi	r2,r2,21264
 2001bf0:	10004d1e 	bne	r2,zero,2001d28 <MCULCD_Init+0x2e8>
        {
            LCD_WR_CMD(0XDA00);
 2001bf4:	01368014 	movui	r4,55808
 2001bf8:	20002380 	call	2000238 <LCD_WR_CMD>
            lcddev.id=LCD_RD_DATA();  //读回0X00
 2001bfc:	20003180 	call	2000318 <LCD_RD_DATA>
 2001c00:	00c08074 	movhi	r3,513
 2001c04:	18ce9f04 	addi	r3,r3,14972
 2001c08:	18800215 	stw	r2,8(r3)
            LCD_WR_CMD(0XDB00);
 2001c0c:	0136c014 	movui	r4,56064
 2001c10:	20002380 	call	2000238 <LCD_WR_CMD>
            lcddev.id=LCD_RD_DATA();  //读回0X80
 2001c14:	20003180 	call	2000318 <LCD_RD_DATA>
 2001c18:	00c08074 	movhi	r3,513
 2001c1c:	18ce9f04 	addi	r3,r3,14972
 2001c20:	18800215 	stw	r2,8(r3)
            lcddev.id<<=8;
 2001c24:	00808074 	movhi	r2,513
 2001c28:	108e9f04 	addi	r2,r2,14972
 2001c2c:	10800217 	ldw	r2,8(r2)
 2001c30:	1006923a 	slli	r3,r2,8
 2001c34:	00808074 	movhi	r2,513
 2001c38:	108e9f04 	addi	r2,r2,14972
 2001c3c:	10c00215 	stw	r3,8(r2)
            LCD_WR_CMD(0XDC00);
 2001c40:	01370014 	movui	r4,56320
 2001c44:	20002380 	call	2000238 <LCD_WR_CMD>
            lcddev.id|=LCD_RD_DATA(); //读回0X00
 2001c48:	00808074 	movhi	r2,513
 2001c4c:	108e9f04 	addi	r2,r2,14972
 2001c50:	14000217 	ldw	r16,8(r2)
 2001c54:	20003180 	call	2000318 <LCD_RD_DATA>
 2001c58:	8086b03a 	or	r3,r16,r2
 2001c5c:	00808074 	movhi	r2,513
 2001c60:	108e9f04 	addi	r2,r2,14972
 2001c64:	10c00215 	stw	r3,8(r2)
            if(lcddev.id==0x8000)
 2001c68:	00808074 	movhi	r2,513
 2001c6c:	108e9f04 	addi	r2,r2,14972
 2001c70:	10c00217 	ldw	r3,8(r2)
 2001c74:	00a00014 	movui	r2,32768
 2001c78:	1880041e 	bne	r3,r2,2001c8c <MCULCD_Init+0x24c>
                lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 2001c7c:	00808074 	movhi	r2,513
 2001c80:	108e9f04 	addi	r2,r2,14972
 2001c84:	00d54404 	movi	r3,21776
 2001c88:	10c00215 	stw	r3,8(r2)
            if(lcddev.id!=0X5510)     //也不是NT5510,尝试看看是不是SSD1963
 2001c8c:	00808074 	movhi	r2,513
 2001c90:	108e9f04 	addi	r2,r2,14972
 2001c94:	10800217 	ldw	r2,8(r2)
 2001c98:	10954420 	cmpeqi	r2,r2,21776
 2001c9c:	1000221e 	bne	r2,zero,2001d28 <MCULCD_Init+0x2e8>
            {
                LCD_WR_CMD(0XA1);
 2001ca0:	01002844 	movi	r4,161
 2001ca4:	20002380 	call	2000238 <LCD_WR_CMD>
                lcddev.id=LCD_RD_DATA();
 2001ca8:	20003180 	call	2000318 <LCD_RD_DATA>
 2001cac:	00c08074 	movhi	r3,513
 2001cb0:	18ce9f04 	addi	r3,r3,14972
 2001cb4:	18800215 	stw	r2,8(r3)
                lcddev.id=LCD_RD_DATA();    //读回0X57
 2001cb8:	20003180 	call	2000318 <LCD_RD_DATA>
 2001cbc:	00c08074 	movhi	r3,513
 2001cc0:	18ce9f04 	addi	r3,r3,14972
 2001cc4:	18800215 	stw	r2,8(r3)
                lcddev.id<<=8;
 2001cc8:	00808074 	movhi	r2,513
 2001ccc:	108e9f04 	addi	r2,r2,14972
 2001cd0:	10800217 	ldw	r2,8(r2)
 2001cd4:	1006923a 	slli	r3,r2,8
 2001cd8:	00808074 	movhi	r2,513
 2001cdc:	108e9f04 	addi	r2,r2,14972
 2001ce0:	10c00215 	stw	r3,8(r2)
                lcddev.id|=LCD_RD_DATA();   //读回0X61
 2001ce4:	00808074 	movhi	r2,513
 2001ce8:	108e9f04 	addi	r2,r2,14972
 2001cec:	14000217 	ldw	r16,8(r2)
 2001cf0:	20003180 	call	2000318 <LCD_RD_DATA>
 2001cf4:	8086b03a 	or	r3,r16,r2
 2001cf8:	00808074 	movhi	r2,513
 2001cfc:	108e9f04 	addi	r2,r2,14972
 2001d00:	10c00215 	stw	r3,8(r2)
                if(lcddev.id==0X5761)
 2001d04:	00808074 	movhi	r2,513
 2001d08:	108e9f04 	addi	r2,r2,14972
 2001d0c:	10800217 	ldw	r2,8(r2)
 2001d10:	1095d858 	cmpnei	r2,r2,22369
 2001d14:	1000041e 	bne	r2,zero,2001d28 <MCULCD_Init+0x2e8>
                    lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 2001d18:	00808074 	movhi	r2,513
 2001d1c:	108e9f04 	addi	r2,r2,14972
 2001d20:	00c658c4 	movi	r3,6499
 2001d24:	10c00215 	stw	r3,8(r2)
            }
        }
    }
    printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 2001d28:	00808074 	movhi	r2,513
 2001d2c:	108e9f04 	addi	r2,r2,14972
 2001d30:	10800217 	ldw	r2,8(r2)
 2001d34:	01008074 	movhi	r4,513
 2001d38:	2106ed04 	addi	r4,r4,7092
 2001d3c:	100b883a 	mov	r5,r2
 2001d40:	2005f400 	call	2005f40 <printf>
    if(lcddev.id==0X9341) {             //9341初始化
 2001d44:	00808074 	movhi	r2,513
 2001d48:	108e9f04 	addi	r2,r2,14972
 2001d4c:	10c00217 	ldw	r3,8(r2)
 2001d50:	00a4d054 	movui	r2,37697
 2001d54:	1880b91e 	bne	r3,r2,200203c <MCULCD_Init+0x5fc>
        LCD_WR_CMD(0xCF);
 2001d58:	010033c4 	movi	r4,207
 2001d5c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2001d60:	0009883a 	mov	r4,zero
 2001d64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC1);
 2001d68:	01003044 	movi	r4,193
 2001d6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0X30);
 2001d70:	01000c04 	movi	r4,48
 2001d74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xED);
 2001d78:	01003b44 	movi	r4,237
 2001d7c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x64);
 2001d80:	01001904 	movi	r4,100
 2001d84:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 2001d88:	010000c4 	movi	r4,3
 2001d8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0X12);
 2001d90:	01000484 	movi	r4,18
 2001d94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0X81);
 2001d98:	01002044 	movi	r4,129
 2001d9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xE8);
 2001da0:	01003a04 	movi	r4,232
 2001da4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x85);
 2001da8:	01002144 	movi	r4,133
 2001dac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 2001db0:	01000404 	movi	r4,16
 2001db4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 2001db8:	01001e84 	movi	r4,122
 2001dbc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xCB);
 2001dc0:	010032c4 	movi	r4,203
 2001dc4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x39);
 2001dc8:	01000e44 	movi	r4,57
 2001dcc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 2001dd0:	01000b04 	movi	r4,44
 2001dd4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2001dd8:	0009883a 	mov	r4,zero
 2001ddc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 2001de0:	01000d04 	movi	r4,52
 2001de4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 2001de8:	01000084 	movi	r4,2
 2001dec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xF7);
 2001df0:	01003dc4 	movi	r4,247
 2001df4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);
 2001df8:	01000804 	movi	r4,32
 2001dfc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xEA);
 2001e00:	01003a84 	movi	r4,234
 2001e04:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2001e08:	0009883a 	mov	r4,zero
 2001e0c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2001e10:	0009883a 	mov	r4,zero
 2001e14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xC0);    //Power control
 2001e18:	01003004 	movi	r4,192
 2001e1c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x1B);   //VRH[5:0]
 2001e20:	010006c4 	movi	r4,27
 2001e24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xC1);    //Power control
 2001e28:	01003044 	movi	r4,193
 2001e2c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 2001e30:	01000044 	movi	r4,1
 2001e34:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xC5);    //VCM control
 2001e38:	01003144 	movi	r4,197
 2001e3c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x30);   //3F
 2001e40:	01000c04 	movi	r4,48
 2001e44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x30);   //3C
 2001e48:	01000c04 	movi	r4,48
 2001e4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xC7);    //VCM control2
 2001e50:	010031c4 	movi	r4,199
 2001e54:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0XB7);
 2001e58:	01002dc4 	movi	r4,183
 2001e5c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x36);    // Memory Access Control
 2001e60:	01000d84 	movi	r4,54
 2001e64:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x48);
 2001e68:	01001204 	movi	r4,72
 2001e6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x3A);
 2001e70:	01000e84 	movi	r4,58
 2001e74:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x55);
 2001e78:	01001544 	movi	r4,85
 2001e7c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xB1);
 2001e80:	01002c44 	movi	r4,177
 2001e84:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2001e88:	0009883a 	mov	r4,zero
 2001e8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x1A);
 2001e90:	01000684 	movi	r4,26
 2001e94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xB6);    // Display Function Control
 2001e98:	01002d84 	movi	r4,182
 2001e9c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0A);
 2001ea0:	01000284 	movi	r4,10
 2001ea4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 2001ea8:	01002884 	movi	r4,162
 2001eac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xF2);    // 3Gamma Function Disable
 2001eb0:	01003c84 	movi	r4,242
 2001eb4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2001eb8:	0009883a 	mov	r4,zero
 2001ebc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x26);    //Gamma curve selected
 2001ec0:	01000984 	movi	r4,38
 2001ec4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 2001ec8:	01000044 	movi	r4,1
 2001ecc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xE0);    //Set Gamma
 2001ed0:	01003804 	movi	r4,224
 2001ed4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0F);
 2001ed8:	010003c4 	movi	r4,15
 2001edc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 2001ee0:	01000a84 	movi	r4,42
 2001ee4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 2001ee8:	01000a04 	movi	r4,40
 2001eec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 2001ef0:	01000204 	movi	r4,8
 2001ef4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0E);
 2001ef8:	01000384 	movi	r4,14
 2001efc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 2001f00:	01000204 	movi	r4,8
 2001f04:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 2001f08:	01001504 	movi	r4,84
 2001f0c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0XA9);
 2001f10:	01002a44 	movi	r4,169
 2001f14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 2001f18:	010010c4 	movi	r4,67
 2001f1c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0A);
 2001f20:	01000284 	movi	r4,10
 2001f24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 2001f28:	010003c4 	movi	r4,15
 2001f2c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2001f30:	0009883a 	mov	r4,zero
 2001f34:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2001f38:	0009883a 	mov	r4,zero
 2001f3c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2001f40:	0009883a 	mov	r4,zero
 2001f44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2001f48:	0009883a 	mov	r4,zero
 2001f4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0XE1);    //Set Gamma
 2001f50:	01003844 	movi	r4,225
 2001f54:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2001f58:	0009883a 	mov	r4,zero
 2001f5c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x15);
 2001f60:	01000544 	movi	r4,21
 2001f64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 2001f68:	010005c4 	movi	r4,23
 2001f6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 2001f70:	010001c4 	movi	r4,7
 2001f74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 2001f78:	01000444 	movi	r4,17
 2001f7c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 2001f80:	01000184 	movi	r4,6
 2001f84:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2B);
 2001f88:	01000ac4 	movi	r4,43
 2001f8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 2001f90:	01001584 	movi	r4,86
 2001f94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 2001f98:	01000f04 	movi	r4,60
 2001f9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 2001fa0:	01000144 	movi	r4,5
 2001fa4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 2001fa8:	01000404 	movi	r4,16
 2001fac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 2001fb0:	010003c4 	movi	r4,15
 2001fb4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 2001fb8:	01000fc4 	movi	r4,63
 2001fbc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 2001fc0:	01000fc4 	movi	r4,63
 2001fc4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 2001fc8:	010003c4 	movi	r4,15
 2001fcc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x2B);
 2001fd0:	01000ac4 	movi	r4,43
 2001fd4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2001fd8:	0009883a 	mov	r4,zero
 2001fdc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2001fe0:	0009883a 	mov	r4,zero
 2001fe4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 2001fe8:	01000044 	movi	r4,1
 2001fec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 2001ff0:	01000fc4 	movi	r4,63
 2001ff4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x2A);
 2001ff8:	01000a84 	movi	r4,42
 2001ffc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2002000:	0009883a 	mov	r4,zero
 2002004:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002008:	0009883a 	mov	r4,zero
 200200c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002010:	0009883a 	mov	r4,zero
 2002014:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 2002018:	01003bc4 	movi	r4,239
 200201c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x11); //Exit Sleep
 2002020:	01000444 	movi	r4,17
 2002024:	20002380 	call	2000238 <LCD_WR_CMD>
        delay_ms(120);
 2002028:	01001e04 	movi	r4,120
 200202c:	20002000 	call	2000200 <delay_ms>
        LCD_WR_CMD(0x29); //display on
 2002030:	01000a44 	movi	r4,41
 2002034:	20002380 	call	2000238 <LCD_WR_CMD>
 2002038:	000a0006 	br	200483c <MCULCD_Init+0x2dfc>
    }else if(lcddev.id==0x5310) {
 200203c:	00808074 	movhi	r2,513
 2002040:	108e9f04 	addi	r2,r2,14972
 2002044:	10800217 	ldw	r2,8(r2)
 2002048:	1094c418 	cmpnei	r2,r2,21264
 200204c:	1004fb1e 	bne	r2,zero,200343c <MCULCD_Init+0x19fc>
        LCD_WR_CMD(0xED);
 2002050:	01003b44 	movi	r4,237
 2002054:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 2002058:	01000044 	movi	r4,1
 200205c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);
 2002060:	01003f84 	movi	r4,254
 2002064:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xEE);
 2002068:	01003b84 	movi	r4,238
 200206c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xDE);
 2002070:	01003784 	movi	r4,222
 2002074:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 2002078:	01000844 	movi	r4,33
 200207c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xF1);
 2002080:	01003c44 	movi	r4,241
 2002084:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 2002088:	01000044 	movi	r4,1
 200208c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xDF);
 2002090:	010037c4 	movi	r4,223
 2002094:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x10);
 2002098:	01000404 	movi	r4,16
 200209c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        //VCOMvoltage//
        LCD_WR_CMD(0xC4);
 20020a0:	01003104 	movi	r4,196
 20020a4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x8F);      //5f
 20020a8:	010023c4 	movi	r4,143
 20020ac:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC6);
 20020b0:	01003184 	movi	r4,198
 20020b4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 20020b8:	0009883a 	mov	r4,zero
 20020bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 20020c0:	01003884 	movi	r4,226
 20020c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 20020c8:	01003884 	movi	r4,226
 20020cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 20020d0:	01003884 	movi	r4,226
 20020d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xBF);
 20020d8:	01002fc4 	movi	r4,191
 20020dc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xAA);
 20020e0:	01002a84 	movi	r4,170
 20020e4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB0);
 20020e8:	01002c04 	movi	r4,176
 20020ec:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0D);
 20020f0:	01000344 	movi	r4,13
 20020f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20020f8:	0009883a 	mov	r4,zero
 20020fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0D);
 2002100:	01000344 	movi	r4,13
 2002104:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002108:	0009883a 	mov	r4,zero
 200210c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 2002110:	01000444 	movi	r4,17
 2002114:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002118:	0009883a 	mov	r4,zero
 200211c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x19);
 2002120:	01000644 	movi	r4,25
 2002124:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002128:	0009883a 	mov	r4,zero
 200212c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 2002130:	01000844 	movi	r4,33
 2002134:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002138:	0009883a 	mov	r4,zero
 200213c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2D);
 2002140:	01000b44 	movi	r4,45
 2002144:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002148:	0009883a 	mov	r4,zero
 200214c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3D);
 2002150:	01000f44 	movi	r4,61
 2002154:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002158:	0009883a 	mov	r4,zero
 200215c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 2002160:	01001744 	movi	r4,93
 2002164:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002168:	0009883a 	mov	r4,zero
 200216c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 2002170:	01001744 	movi	r4,93
 2002174:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002178:	0009883a 	mov	r4,zero
 200217c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB1);
 2002180:	01002c44 	movi	r4,177
 2002184:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x80);
 2002188:	01002004 	movi	r4,128
 200218c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002190:	0009883a 	mov	r4,zero
 2002194:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 2002198:	010022c4 	movi	r4,139
 200219c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20021a0:	0009883a 	mov	r4,zero
 20021a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 20021a8:	01002584 	movi	r4,150
 20021ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20021b0:	0009883a 	mov	r4,zero
 20021b4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB2);
 20021b8:	01002c84 	movi	r4,178
 20021bc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 20021c0:	0009883a 	mov	r4,zero
 20021c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20021c8:	0009883a 	mov	r4,zero
 20021cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 20021d0:	01000084 	movi	r4,2
 20021d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20021d8:	0009883a 	mov	r4,zero
 20021dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 20021e0:	010000c4 	movi	r4,3
 20021e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20021e8:	0009883a 	mov	r4,zero
 20021ec:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB3);
 20021f0:	01002cc4 	movi	r4,179
 20021f4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 20021f8:	0009883a 	mov	r4,zero
 20021fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002200:	0009883a 	mov	r4,zero
 2002204:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002208:	0009883a 	mov	r4,zero
 200220c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002210:	0009883a 	mov	r4,zero
 2002214:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002218:	0009883a 	mov	r4,zero
 200221c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002220:	0009883a 	mov	r4,zero
 2002224:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002228:	0009883a 	mov	r4,zero
 200222c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002230:	0009883a 	mov	r4,zero
 2002234:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002238:	0009883a 	mov	r4,zero
 200223c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002240:	0009883a 	mov	r4,zero
 2002244:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002248:	0009883a 	mov	r4,zero
 200224c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002250:	0009883a 	mov	r4,zero
 2002254:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002258:	0009883a 	mov	r4,zero
 200225c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002260:	0009883a 	mov	r4,zero
 2002264:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002268:	0009883a 	mov	r4,zero
 200226c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002270:	0009883a 	mov	r4,zero
 2002274:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002278:	0009883a 	mov	r4,zero
 200227c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002280:	0009883a 	mov	r4,zero
 2002284:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002288:	0009883a 	mov	r4,zero
 200228c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002290:	0009883a 	mov	r4,zero
 2002294:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002298:	0009883a 	mov	r4,zero
 200229c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20022a0:	0009883a 	mov	r4,zero
 20022a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20022a8:	0009883a 	mov	r4,zero
 20022ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20022b0:	0009883a 	mov	r4,zero
 20022b4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB4);
 20022b8:	01002d04 	movi	r4,180
 20022bc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x8B);
 20022c0:	010022c4 	movi	r4,139
 20022c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20022c8:	0009883a 	mov	r4,zero
 20022cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 20022d0:	01002584 	movi	r4,150
 20022d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20022d8:	0009883a 	mov	r4,zero
 20022dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 20022e0:	01002844 	movi	r4,161
 20022e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20022e8:	0009883a 	mov	r4,zero
 20022ec:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB5);
 20022f0:	01002d44 	movi	r4,181
 20022f4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x02);
 20022f8:	01000084 	movi	r4,2
 20022fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002300:	0009883a 	mov	r4,zero
 2002304:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 2002308:	010000c4 	movi	r4,3
 200230c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002310:	0009883a 	mov	r4,zero
 2002314:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 2002318:	01000104 	movi	r4,4
 200231c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002320:	0009883a 	mov	r4,zero
 2002324:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB6);
 2002328:	01002d84 	movi	r4,182
 200232c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2002330:	0009883a 	mov	r4,zero
 2002334:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002338:	0009883a 	mov	r4,zero
 200233c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB7);
 2002340:	01002dc4 	movi	r4,183
 2002344:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2002348:	0009883a 	mov	r4,zero
 200234c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002350:	0009883a 	mov	r4,zero
 2002354:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 2002358:	01000fc4 	movi	r4,63
 200235c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002360:	0009883a 	mov	r4,zero
 2002364:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x5E);
 2002368:	01001784 	movi	r4,94
 200236c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002370:	0009883a 	mov	r4,zero
 2002374:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 2002378:	01001904 	movi	r4,100
 200237c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002380:	0009883a 	mov	r4,zero
 2002384:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x8C);
 2002388:	01002304 	movi	r4,140
 200238c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002390:	0009883a 	mov	r4,zero
 2002394:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xAC);
 2002398:	01002b04 	movi	r4,172
 200239c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20023a0:	0009883a 	mov	r4,zero
 20023a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 20023a8:	01003704 	movi	r4,220
 20023ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20023b0:	0009883a 	mov	r4,zero
 20023b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x70);
 20023b8:	01001c04 	movi	r4,112
 20023bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20023c0:	0009883a 	mov	r4,zero
 20023c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x90);
 20023c8:	01002404 	movi	r4,144
 20023cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20023d0:	0009883a 	mov	r4,zero
 20023d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xEB);
 20023d8:	01003ac4 	movi	r4,235
 20023dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20023e0:	0009883a 	mov	r4,zero
 20023e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 20023e8:	01003704 	movi	r4,220
 20023ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20023f0:	0009883a 	mov	r4,zero
 20023f4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB8);
 20023f8:	01002e04 	movi	r4,184
 20023fc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2002400:	0009883a 	mov	r4,zero
 2002404:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002408:	0009883a 	mov	r4,zero
 200240c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002410:	0009883a 	mov	r4,zero
 2002414:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002418:	0009883a 	mov	r4,zero
 200241c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002420:	0009883a 	mov	r4,zero
 2002424:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002428:	0009883a 	mov	r4,zero
 200242c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002430:	0009883a 	mov	r4,zero
 2002434:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002438:	0009883a 	mov	r4,zero
 200243c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xBA);
 2002440:	01002e84 	movi	r4,186
 2002444:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x24);
 2002448:	01000904 	movi	r4,36
 200244c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002450:	0009883a 	mov	r4,zero
 2002454:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002458:	0009883a 	mov	r4,zero
 200245c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002460:	0009883a 	mov	r4,zero
 2002464:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC1);
 2002468:	01003044 	movi	r4,193
 200246c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);
 2002470:	01000804 	movi	r4,32
 2002474:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002478:	0009883a 	mov	r4,zero
 200247c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 2002480:	01001504 	movi	r4,84
 2002484:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002488:	0009883a 	mov	r4,zero
 200248c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 2002490:	01003fc4 	movi	r4,255
 2002494:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002498:	0009883a 	mov	r4,zero
 200249c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC2);
 20024a0:	01003084 	movi	r4,194
 20024a4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0A);
 20024a8:	01000284 	movi	r4,10
 20024ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20024b0:	0009883a 	mov	r4,zero
 20024b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 20024b8:	01000104 	movi	r4,4
 20024bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20024c0:	0009883a 	mov	r4,zero
 20024c4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC3);
 20024c8:	010030c4 	movi	r4,195
 20024cc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x3C);
 20024d0:	01000f04 	movi	r4,60
 20024d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20024d8:	0009883a 	mov	r4,zero
 20024dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3A);
 20024e0:	01000e84 	movi	r4,58
 20024e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20024e8:	0009883a 	mov	r4,zero
 20024ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x39);
 20024f0:	01000e44 	movi	r4,57
 20024f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20024f8:	0009883a 	mov	r4,zero
 20024fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x37);
 2002500:	01000dc4 	movi	r4,55
 2002504:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002508:	0009883a 	mov	r4,zero
 200250c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 2002510:	01000f04 	movi	r4,60
 2002514:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002518:	0009883a 	mov	r4,zero
 200251c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 2002520:	01000d84 	movi	r4,54
 2002524:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002528:	0009883a 	mov	r4,zero
 200252c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 2002530:	01000c84 	movi	r4,50
 2002534:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002538:	0009883a 	mov	r4,zero
 200253c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 2002540:	01000bc4 	movi	r4,47
 2002544:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002548:	0009883a 	mov	r4,zero
 200254c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 2002550:	01000b04 	movi	r4,44
 2002554:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002558:	0009883a 	mov	r4,zero
 200255c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 2002560:	01000a44 	movi	r4,41
 2002564:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002568:	0009883a 	mov	r4,zero
 200256c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 2002570:	01000984 	movi	r4,38
 2002574:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002578:	0009883a 	mov	r4,zero
 200257c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 2002580:	01000904 	movi	r4,36
 2002584:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002588:	0009883a 	mov	r4,zero
 200258c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 2002590:	01000904 	movi	r4,36
 2002594:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002598:	0009883a 	mov	r4,zero
 200259c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 20025a0:	010008c4 	movi	r4,35
 20025a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20025a8:	0009883a 	mov	r4,zero
 20025ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 20025b0:	01000f04 	movi	r4,60
 20025b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20025b8:	0009883a 	mov	r4,zero
 20025bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 20025c0:	01000d84 	movi	r4,54
 20025c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20025c8:	0009883a 	mov	r4,zero
 20025cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 20025d0:	01000c84 	movi	r4,50
 20025d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20025d8:	0009883a 	mov	r4,zero
 20025dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 20025e0:	01000bc4 	movi	r4,47
 20025e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20025e8:	0009883a 	mov	r4,zero
 20025ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 20025f0:	01000b04 	movi	r4,44
 20025f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20025f8:	0009883a 	mov	r4,zero
 20025fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 2002600:	01000a44 	movi	r4,41
 2002604:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002608:	0009883a 	mov	r4,zero
 200260c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 2002610:	01000984 	movi	r4,38
 2002614:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002618:	0009883a 	mov	r4,zero
 200261c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 2002620:	01000904 	movi	r4,36
 2002624:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002628:	0009883a 	mov	r4,zero
 200262c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 2002630:	01000904 	movi	r4,36
 2002634:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002638:	0009883a 	mov	r4,zero
 200263c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 2002640:	010008c4 	movi	r4,35
 2002644:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002648:	0009883a 	mov	r4,zero
 200264c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC4);
 2002650:	01003104 	movi	r4,196
 2002654:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x62);
 2002658:	01001884 	movi	r4,98
 200265c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002660:	0009883a 	mov	r4,zero
 2002664:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 2002668:	01000144 	movi	r4,5
 200266c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002670:	0009883a 	mov	r4,zero
 2002674:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 2002678:	01002104 	movi	r4,132
 200267c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002680:	0009883a 	mov	r4,zero
 2002684:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF0);
 2002688:	01003c04 	movi	r4,240
 200268c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002690:	0009883a 	mov	r4,zero
 2002694:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 2002698:	01000604 	movi	r4,24
 200269c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20026a0:	0009883a 	mov	r4,zero
 20026a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA4);
 20026a8:	01002904 	movi	r4,164
 20026ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20026b0:	0009883a 	mov	r4,zero
 20026b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 20026b8:	01000604 	movi	r4,24
 20026bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20026c0:	0009883a 	mov	r4,zero
 20026c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 20026c8:	01001404 	movi	r4,80
 20026cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20026d0:	0009883a 	mov	r4,zero
 20026d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 20026d8:	01000304 	movi	r4,12
 20026dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20026e0:	0009883a 	mov	r4,zero
 20026e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 20026e8:	010005c4 	movi	r4,23
 20026ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20026f0:	0009883a 	mov	r4,zero
 20026f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x95);
 20026f8:	01002544 	movi	r4,149
 20026fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002700:	0009883a 	mov	r4,zero
 2002704:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 2002708:	01003cc4 	movi	r4,243
 200270c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002710:	0009883a 	mov	r4,zero
 2002714:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xE6);
 2002718:	01003984 	movi	r4,230
 200271c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002720:	0009883a 	mov	r4,zero
 2002724:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC5);
 2002728:	01003144 	movi	r4,197
 200272c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x32);
 2002730:	01000c84 	movi	r4,50
 2002734:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002738:	0009883a 	mov	r4,zero
 200273c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 2002740:	01001104 	movi	r4,68
 2002744:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002748:	0009883a 	mov	r4,zero
 200274c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x65);
 2002750:	01001944 	movi	r4,101
 2002754:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002758:	0009883a 	mov	r4,zero
 200275c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 2002760:	01001d84 	movi	r4,118
 2002764:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002768:	0009883a 	mov	r4,zero
 200276c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 2002770:	01002204 	movi	r4,136
 2002774:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002778:	0009883a 	mov	r4,zero
 200277c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC6);
 2002780:	01003184 	movi	r4,198
 2002784:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);
 2002788:	01000804 	movi	r4,32
 200278c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002790:	0009883a 	mov	r4,zero
 2002794:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 2002798:	010005c4 	movi	r4,23
 200279c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20027a0:	0009883a 	mov	r4,zero
 20027a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 20027a8:	01000044 	movi	r4,1
 20027ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20027b0:	0009883a 	mov	r4,zero
 20027b4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC7);
 20027b8:	010031c4 	movi	r4,199
 20027bc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 20027c0:	0009883a 	mov	r4,zero
 20027c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20027c8:	0009883a 	mov	r4,zero
 20027cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20027d0:	0009883a 	mov	r4,zero
 20027d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20027d8:	0009883a 	mov	r4,zero
 20027dc:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC8);
 20027e0:	01003204 	movi	r4,200
 20027e4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 20027e8:	0009883a 	mov	r4,zero
 20027ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20027f0:	0009883a 	mov	r4,zero
 20027f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20027f8:	0009883a 	mov	r4,zero
 20027fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002800:	0009883a 	mov	r4,zero
 2002804:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xC9);
 2002808:	01003244 	movi	r4,201
 200280c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2002810:	0009883a 	mov	r4,zero
 2002814:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002818:	0009883a 	mov	r4,zero
 200281c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002820:	0009883a 	mov	r4,zero
 2002824:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002828:	0009883a 	mov	r4,zero
 200282c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002830:	0009883a 	mov	r4,zero
 2002834:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002838:	0009883a 	mov	r4,zero
 200283c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002840:	0009883a 	mov	r4,zero
 2002844:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002848:	0009883a 	mov	r4,zero
 200284c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002850:	0009883a 	mov	r4,zero
 2002854:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002858:	0009883a 	mov	r4,zero
 200285c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002860:	0009883a 	mov	r4,zero
 2002864:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002868:	0009883a 	mov	r4,zero
 200286c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002870:	0009883a 	mov	r4,zero
 2002874:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002878:	0009883a 	mov	r4,zero
 200287c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002880:	0009883a 	mov	r4,zero
 2002884:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002888:	0009883a 	mov	r4,zero
 200288c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE0);
 2002890:	01003804 	movi	r4,224
 2002894:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x16);
 2002898:	01000584 	movi	r4,22
 200289c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20028a0:	0009883a 	mov	r4,zero
 20028a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 20028a8:	01000704 	movi	r4,28
 20028ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20028b0:	0009883a 	mov	r4,zero
 20028b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 20028b8:	01000844 	movi	r4,33
 20028bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20028c0:	0009883a 	mov	r4,zero
 20028c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 20028c8:	01000d84 	movi	r4,54
 20028cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20028d0:	0009883a 	mov	r4,zero
 20028d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x46);
 20028d8:	01001184 	movi	r4,70
 20028dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20028e0:	0009883a 	mov	r4,zero
 20028e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 20028e8:	01001484 	movi	r4,82
 20028ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20028f0:	0009883a 	mov	r4,zero
 20028f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 20028f8:	01001904 	movi	r4,100
 20028fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002900:	0009883a 	mov	r4,zero
 2002904:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 2002908:	01001e84 	movi	r4,122
 200290c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002910:	0009883a 	mov	r4,zero
 2002914:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 2002918:	010022c4 	movi	r4,139
 200291c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002920:	0009883a 	mov	r4,zero
 2002924:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 2002928:	01002644 	movi	r4,153
 200292c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002930:	0009883a 	mov	r4,zero
 2002934:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 2002938:	01002a04 	movi	r4,168
 200293c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002940:	0009883a 	mov	r4,zero
 2002944:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 2002948:	01002e44 	movi	r4,185
 200294c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002950:	0009883a 	mov	r4,zero
 2002954:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 2002958:	01003104 	movi	r4,196
 200295c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002960:	0009883a 	mov	r4,zero
 2002964:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 2002968:	01003284 	movi	r4,202
 200296c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002970:	0009883a 	mov	r4,zero
 2002974:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 2002978:	01003484 	movi	r4,210
 200297c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002980:	0009883a 	mov	r4,zero
 2002984:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD9);
 2002988:	01003644 	movi	r4,217
 200298c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002990:	0009883a 	mov	r4,zero
 2002994:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 2002998:	01003804 	movi	r4,224
 200299c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20029a0:	0009883a 	mov	r4,zero
 20029a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 20029a8:	01003cc4 	movi	r4,243
 20029ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20029b0:	0009883a 	mov	r4,zero
 20029b4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE1);
 20029b8:	01003844 	movi	r4,225
 20029bc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x16);
 20029c0:	01000584 	movi	r4,22
 20029c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20029c8:	0009883a 	mov	r4,zero
 20029cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 20029d0:	01000704 	movi	r4,28
 20029d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20029d8:	0009883a 	mov	r4,zero
 20029dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x22);
 20029e0:	01000884 	movi	r4,34
 20029e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20029e8:	0009883a 	mov	r4,zero
 20029ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 20029f0:	01000d84 	movi	r4,54
 20029f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20029f8:	0009883a 	mov	r4,zero
 20029fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 2002a00:	01001144 	movi	r4,69
 2002a04:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a08:	0009883a 	mov	r4,zero
 2002a0c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 2002a10:	01001484 	movi	r4,82
 2002a14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a18:	0009883a 	mov	r4,zero
 2002a1c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 2002a20:	01001904 	movi	r4,100
 2002a24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a28:	0009883a 	mov	r4,zero
 2002a2c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 2002a30:	01001e84 	movi	r4,122
 2002a34:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a38:	0009883a 	mov	r4,zero
 2002a3c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 2002a40:	010022c4 	movi	r4,139
 2002a44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a48:	0009883a 	mov	r4,zero
 2002a4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 2002a50:	01002644 	movi	r4,153
 2002a54:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a58:	0009883a 	mov	r4,zero
 2002a5c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 2002a60:	01002a04 	movi	r4,168
 2002a64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a68:	0009883a 	mov	r4,zero
 2002a6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 2002a70:	01002e44 	movi	r4,185
 2002a74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a78:	0009883a 	mov	r4,zero
 2002a7c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 2002a80:	01003104 	movi	r4,196
 2002a84:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a88:	0009883a 	mov	r4,zero
 2002a8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 2002a90:	01003284 	movi	r4,202
 2002a94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002a98:	0009883a 	mov	r4,zero
 2002a9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 2002aa0:	01003484 	movi	r4,210
 2002aa4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002aa8:	0009883a 	mov	r4,zero
 2002aac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD8);
 2002ab0:	01003604 	movi	r4,216
 2002ab4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ab8:	0009883a 	mov	r4,zero
 2002abc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 2002ac0:	01003804 	movi	r4,224
 2002ac4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ac8:	0009883a 	mov	r4,zero
 2002acc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 2002ad0:	01003cc4 	movi	r4,243
 2002ad4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ad8:	0009883a 	mov	r4,zero
 2002adc:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE2);
 2002ae0:	01003884 	movi	r4,226
 2002ae4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x05);
 2002ae8:	01000144 	movi	r4,5
 2002aec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002af0:	0009883a 	mov	r4,zero
 2002af4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x0B);
 2002af8:	010002c4 	movi	r4,11
 2002afc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b00:	0009883a 	mov	r4,zero
 2002b04:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x1B);
 2002b08:	010006c4 	movi	r4,27
 2002b0c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b10:	0009883a 	mov	r4,zero
 2002b14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 2002b18:	01000d04 	movi	r4,52
 2002b1c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b20:	0009883a 	mov	r4,zero
 2002b24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 2002b28:	01001104 	movi	r4,68
 2002b2c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b30:	0009883a 	mov	r4,zero
 2002b34:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x4F);
 2002b38:	010013c4 	movi	r4,79
 2002b3c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b40:	0009883a 	mov	r4,zero
 2002b44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x61);
 2002b48:	01001844 	movi	r4,97
 2002b4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b50:	0009883a 	mov	r4,zero
 2002b54:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x79);
 2002b58:	01001e44 	movi	r4,121
 2002b5c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b60:	0009883a 	mov	r4,zero
 2002b64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 2002b68:	01002204 	movi	r4,136
 2002b6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b70:	0009883a 	mov	r4,zero
 2002b74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 2002b78:	010025c4 	movi	r4,151
 2002b7c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b80:	0009883a 	mov	r4,zero
 2002b84:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 2002b88:	01002984 	movi	r4,166
 2002b8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002b90:	0009883a 	mov	r4,zero
 2002b94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 2002b98:	01002dc4 	movi	r4,183
 2002b9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ba0:	0009883a 	mov	r4,zero
 2002ba4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 2002ba8:	01003084 	movi	r4,194
 2002bac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002bb0:	0009883a 	mov	r4,zero
 2002bb4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 2002bb8:	010031c4 	movi	r4,199
 2002bbc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002bc0:	0009883a 	mov	r4,zero
 2002bc4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 2002bc8:	01003444 	movi	r4,209
 2002bcc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002bd0:	0009883a 	mov	r4,zero
 2002bd4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD6);
 2002bd8:	01003584 	movi	r4,214
 2002bdc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002be0:	0009883a 	mov	r4,zero
 2002be4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 2002be8:	01003744 	movi	r4,221
 2002bec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002bf0:	0009883a 	mov	r4,zero
 2002bf4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 2002bf8:	01003cc4 	movi	r4,243
 2002bfc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c00:	0009883a 	mov	r4,zero
 2002c04:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xE3);
 2002c08:	010038c4 	movi	r4,227
 2002c0c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x05);
 2002c10:	01000144 	movi	r4,5
 2002c14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c18:	0009883a 	mov	r4,zero
 2002c1c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA);
 2002c20:	01000284 	movi	r4,10
 2002c24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c28:	0009883a 	mov	r4,zero
 2002c2c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 2002c30:	01000704 	movi	r4,28
 2002c34:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c38:	0009883a 	mov	r4,zero
 2002c3c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 2002c40:	01000cc4 	movi	r4,51
 2002c44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c48:	0009883a 	mov	r4,zero
 2002c4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 2002c50:	01001104 	movi	r4,68
 2002c54:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c58:	0009883a 	mov	r4,zero
 2002c5c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 2002c60:	01001404 	movi	r4,80
 2002c64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c68:	0009883a 	mov	r4,zero
 2002c6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x62);
 2002c70:	01001884 	movi	r4,98
 2002c74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c78:	0009883a 	mov	r4,zero
 2002c7c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x78);
 2002c80:	01001e04 	movi	r4,120
 2002c84:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c88:	0009883a 	mov	r4,zero
 2002c8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 2002c90:	01002204 	movi	r4,136
 2002c94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002c98:	0009883a 	mov	r4,zero
 2002c9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 2002ca0:	010025c4 	movi	r4,151
 2002ca4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ca8:	0009883a 	mov	r4,zero
 2002cac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 2002cb0:	01002984 	movi	r4,166
 2002cb4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002cb8:	0009883a 	mov	r4,zero
 2002cbc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 2002cc0:	01002dc4 	movi	r4,183
 2002cc4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002cc8:	0009883a 	mov	r4,zero
 2002ccc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 2002cd0:	01003084 	movi	r4,194
 2002cd4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002cd8:	0009883a 	mov	r4,zero
 2002cdc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 2002ce0:	010031c4 	movi	r4,199
 2002ce4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ce8:	0009883a 	mov	r4,zero
 2002cec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 2002cf0:	01003444 	movi	r4,209
 2002cf4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002cf8:	0009883a 	mov	r4,zero
 2002cfc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD5);
 2002d00:	01003544 	movi	r4,213
 2002d04:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d08:	0009883a 	mov	r4,zero
 2002d0c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 2002d10:	01003744 	movi	r4,221
 2002d14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d18:	0009883a 	mov	r4,zero
 2002d1c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 2002d20:	01003cc4 	movi	r4,243
 2002d24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d28:	0009883a 	mov	r4,zero
 2002d2c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE4);
 2002d30:	01003904 	movi	r4,228
 2002d34:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 2002d38:	01000044 	movi	r4,1
 2002d3c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d40:	0009883a 	mov	r4,zero
 2002d44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 2002d48:	01000044 	movi	r4,1
 2002d4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d50:	0009883a 	mov	r4,zero
 2002d54:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 2002d58:	01000084 	movi	r4,2
 2002d5c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d60:	0009883a 	mov	r4,zero
 2002d64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 2002d68:	01000a84 	movi	r4,42
 2002d6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d70:	0009883a 	mov	r4,zero
 2002d74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 2002d78:	01000f04 	movi	r4,60
 2002d7c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d80:	0009883a 	mov	r4,zero
 2002d84:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 2002d88:	010012c4 	movi	r4,75
 2002d8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002d90:	0009883a 	mov	r4,zero
 2002d94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 2002d98:	01001744 	movi	r4,93
 2002d9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002da0:	0009883a 	mov	r4,zero
 2002da4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 2002da8:	01001d04 	movi	r4,116
 2002dac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002db0:	0009883a 	mov	r4,zero
 2002db4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 2002db8:	01002104 	movi	r4,132
 2002dbc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002dc0:	0009883a 	mov	r4,zero
 2002dc4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 2002dc8:	010024c4 	movi	r4,147
 2002dcc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002dd0:	0009883a 	mov	r4,zero
 2002dd4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 2002dd8:	01002884 	movi	r4,162
 2002ddc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002de0:	0009883a 	mov	r4,zero
 2002de4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 2002de8:	01002cc4 	movi	r4,179
 2002dec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002df0:	0009883a 	mov	r4,zero
 2002df4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 2002df8:	01002f84 	movi	r4,190
 2002dfc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e00:	0009883a 	mov	r4,zero
 2002e04:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 2002e08:	01003104 	movi	r4,196
 2002e0c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e10:	0009883a 	mov	r4,zero
 2002e14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 2002e18:	01003344 	movi	r4,205
 2002e1c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e20:	0009883a 	mov	r4,zero
 2002e24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 2002e28:	010034c4 	movi	r4,211
 2002e2c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e30:	0009883a 	mov	r4,zero
 2002e34:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 2002e38:	01003744 	movi	r4,221
 2002e3c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e40:	0009883a 	mov	r4,zero
 2002e44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 2002e48:	01003cc4 	movi	r4,243
 2002e4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e50:	0009883a 	mov	r4,zero
 2002e54:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xE5);
 2002e58:	01003944 	movi	r4,229
 2002e5c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2002e60:	0009883a 	mov	r4,zero
 2002e64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e68:	0009883a 	mov	r4,zero
 2002e6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e70:	0009883a 	mov	r4,zero
 2002e74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e78:	0009883a 	mov	r4,zero
 2002e7c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 2002e80:	01000084 	movi	r4,2
 2002e84:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e88:	0009883a 	mov	r4,zero
 2002e8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 2002e90:	01000a44 	movi	r4,41
 2002e94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002e98:	0009883a 	mov	r4,zero
 2002e9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 2002ea0:	01000f04 	movi	r4,60
 2002ea4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ea8:	0009883a 	mov	r4,zero
 2002eac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 2002eb0:	010012c4 	movi	r4,75
 2002eb4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002eb8:	0009883a 	mov	r4,zero
 2002ebc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 2002ec0:	01001744 	movi	r4,93
 2002ec4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ec8:	0009883a 	mov	r4,zero
 2002ecc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 2002ed0:	01001d04 	movi	r4,116
 2002ed4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ed8:	0009883a 	mov	r4,zero
 2002edc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 2002ee0:	01002104 	movi	r4,132
 2002ee4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ee8:	0009883a 	mov	r4,zero
 2002eec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 2002ef0:	010024c4 	movi	r4,147
 2002ef4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ef8:	0009883a 	mov	r4,zero
 2002efc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 2002f00:	01002884 	movi	r4,162
 2002f04:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f08:	0009883a 	mov	r4,zero
 2002f0c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 2002f10:	01002cc4 	movi	r4,179
 2002f14:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f18:	0009883a 	mov	r4,zero
 2002f1c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 2002f20:	01002f84 	movi	r4,190
 2002f24:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f28:	0009883a 	mov	r4,zero
 2002f2c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 2002f30:	01003104 	movi	r4,196
 2002f34:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f38:	0009883a 	mov	r4,zero
 2002f3c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 2002f40:	01003344 	movi	r4,205
 2002f44:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f48:	0009883a 	mov	r4,zero
 2002f4c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 2002f50:	010034c4 	movi	r4,211
 2002f54:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f58:	0009883a 	mov	r4,zero
 2002f5c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 2002f60:	01003704 	movi	r4,220
 2002f64:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f68:	0009883a 	mov	r4,zero
 2002f6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 2002f70:	01003cc4 	movi	r4,243
 2002f74:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f78:	0009883a 	mov	r4,zero
 2002f7c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE6);
 2002f80:	01003984 	movi	r4,230
 2002f84:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x11);
 2002f88:	01000444 	movi	r4,17
 2002f8c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002f90:	0009883a 	mov	r4,zero
 2002f94:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 2002f98:	01000d04 	movi	r4,52
 2002f9c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002fa0:	0009883a 	mov	r4,zero
 2002fa4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 2002fa8:	01001584 	movi	r4,86
 2002fac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002fb0:	0009883a 	mov	r4,zero
 2002fb4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 2002fb8:	01001d84 	movi	r4,118
 2002fbc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002fc0:	0009883a 	mov	r4,zero
 2002fc4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 2002fc8:	01001dc4 	movi	r4,119
 2002fcc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002fd0:	0009883a 	mov	r4,zero
 2002fd4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 2002fd8:	01001984 	movi	r4,102
 2002fdc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002fe0:	0009883a 	mov	r4,zero
 2002fe4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 2002fe8:	01002204 	movi	r4,136
 2002fec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2002ff0:	0009883a 	mov	r4,zero
 2002ff4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 2002ff8:	01002644 	movi	r4,153
 2002ffc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003000:	0009883a 	mov	r4,zero
 2003004:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 2003008:	01002ec4 	movi	r4,187
 200300c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003010:	0009883a 	mov	r4,zero
 2003014:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 2003018:	01002644 	movi	r4,153
 200301c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003020:	0009883a 	mov	r4,zero
 2003024:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 2003028:	01001984 	movi	r4,102
 200302c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003030:	0009883a 	mov	r4,zero
 2003034:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 2003038:	01001544 	movi	r4,85
 200303c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003040:	0009883a 	mov	r4,zero
 2003044:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 2003048:	01001544 	movi	r4,85
 200304c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003050:	0009883a 	mov	r4,zero
 2003054:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 2003058:	01001144 	movi	r4,69
 200305c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003060:	0009883a 	mov	r4,zero
 2003064:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 2003068:	010010c4 	movi	r4,67
 200306c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003070:	0009883a 	mov	r4,zero
 2003074:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 2003078:	01001104 	movi	r4,68
 200307c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003080:	0009883a 	mov	r4,zero
 2003084:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE7);
 2003088:	010039c4 	movi	r4,231
 200308c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x32);
 2003090:	01000c84 	movi	r4,50
 2003094:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003098:	0009883a 	mov	r4,zero
 200309c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 20030a0:	01001544 	movi	r4,85
 20030a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20030a8:	0009883a 	mov	r4,zero
 20030ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 20030b0:	01001d84 	movi	r4,118
 20030b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20030b8:	0009883a 	mov	r4,zero
 20030bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 20030c0:	01001984 	movi	r4,102
 20030c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20030c8:	0009883a 	mov	r4,zero
 20030cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 20030d0:	010019c4 	movi	r4,103
 20030d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20030d8:	0009883a 	mov	r4,zero
 20030dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 20030e0:	010019c4 	movi	r4,103
 20030e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20030e8:	0009883a 	mov	r4,zero
 20030ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 20030f0:	010021c4 	movi	r4,135
 20030f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20030f8:	0009883a 	mov	r4,zero
 20030fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 2003100:	01002644 	movi	r4,153
 2003104:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003108:	0009883a 	mov	r4,zero
 200310c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 2003110:	01002ec4 	movi	r4,187
 2003114:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003118:	0009883a 	mov	r4,zero
 200311c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 2003120:	01002644 	movi	r4,153
 2003124:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003128:	0009883a 	mov	r4,zero
 200312c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 2003130:	01001dc4 	movi	r4,119
 2003134:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003138:	0009883a 	mov	r4,zero
 200313c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 2003140:	01001104 	movi	r4,68
 2003144:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003148:	0009883a 	mov	r4,zero
 200314c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 2003150:	01001584 	movi	r4,86
 2003154:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003158:	0009883a 	mov	r4,zero
 200315c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 2003160:	010008c4 	movi	r4,35
 2003164:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003168:	0009883a 	mov	r4,zero
 200316c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 2003170:	01000cc4 	movi	r4,51
 2003174:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003178:	0009883a 	mov	r4,zero
 200317c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 2003180:	01001144 	movi	r4,69
 2003184:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003188:	0009883a 	mov	r4,zero
 200318c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE8);
 2003190:	01003a04 	movi	r4,232
 2003194:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2003198:	0009883a 	mov	r4,zero
 200319c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20031a0:	0009883a 	mov	r4,zero
 20031a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 20031a8:	01002644 	movi	r4,153
 20031ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20031b0:	0009883a 	mov	r4,zero
 20031b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 20031b8:	010021c4 	movi	r4,135
 20031bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20031c0:	0009883a 	mov	r4,zero
 20031c4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 20031c8:	01002204 	movi	r4,136
 20031cc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20031d0:	0009883a 	mov	r4,zero
 20031d4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 20031d8:	01001dc4 	movi	r4,119
 20031dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20031e0:	0009883a 	mov	r4,zero
 20031e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 20031e8:	01001984 	movi	r4,102
 20031ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20031f0:	0009883a 	mov	r4,zero
 20031f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 20031f8:	01002204 	movi	r4,136
 20031fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003200:	0009883a 	mov	r4,zero
 2003204:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xAA);
 2003208:	01002a84 	movi	r4,170
 200320c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003210:	0009883a 	mov	r4,zero
 2003214:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 2003218:	01002ec4 	movi	r4,187
 200321c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003220:	0009883a 	mov	r4,zero
 2003224:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 2003228:	01002644 	movi	r4,153
 200322c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003230:	0009883a 	mov	r4,zero
 2003234:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 2003238:	01001984 	movi	r4,102
 200323c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003240:	0009883a 	mov	r4,zero
 2003244:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 2003248:	01001544 	movi	r4,85
 200324c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003250:	0009883a 	mov	r4,zero
 2003254:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 2003258:	01001544 	movi	r4,85
 200325c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003260:	0009883a 	mov	r4,zero
 2003264:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 2003268:	01001104 	movi	r4,68
 200326c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003270:	0009883a 	mov	r4,zero
 2003274:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 2003278:	01001104 	movi	r4,68
 200327c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003280:	0009883a 	mov	r4,zero
 2003284:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 2003288:	01001544 	movi	r4,85
 200328c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003290:	0009883a 	mov	r4,zero
 2003294:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xE9);
 2003298:	01003a44 	movi	r4,233
 200329c:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xAA);
 20032a0:	01002a84 	movi	r4,170
 20032a4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20032a8:	0009883a 	mov	r4,zero
 20032ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20032b0:	0009883a 	mov	r4,zero
 20032b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20032b8:	0009883a 	mov	r4,zero
 20032bc:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0x00);
 20032c0:	0009883a 	mov	r4,zero
 20032c4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xAA);
 20032c8:	01002a84 	movi	r4,170
 20032cc:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xCF);
 20032d0:	010033c4 	movi	r4,207
 20032d4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 20032d8:	0009883a 	mov	r4,zero
 20032dc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20032e0:	0009883a 	mov	r4,zero
 20032e4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20032e8:	0009883a 	mov	r4,zero
 20032ec:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20032f0:	0009883a 	mov	r4,zero
 20032f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20032f8:	0009883a 	mov	r4,zero
 20032fc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003300:	0009883a 	mov	r4,zero
 2003304:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003308:	0009883a 	mov	r4,zero
 200330c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003310:	0009883a 	mov	r4,zero
 2003314:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003318:	0009883a 	mov	r4,zero
 200331c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003320:	0009883a 	mov	r4,zero
 2003324:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003328:	0009883a 	mov	r4,zero
 200332c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003330:	0009883a 	mov	r4,zero
 2003334:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003338:	0009883a 	mov	r4,zero
 200333c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003340:	0009883a 	mov	r4,zero
 2003344:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003348:	0009883a 	mov	r4,zero
 200334c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003350:	0009883a 	mov	r4,zero
 2003354:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003358:	0009883a 	mov	r4,zero
 200335c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xF0);
 2003360:	01003c04 	movi	r4,240
 2003364:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2003368:	0009883a 	mov	r4,zero
 200336c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 2003370:	01001404 	movi	r4,80
 2003374:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003378:	0009883a 	mov	r4,zero
 200337c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003380:	0009883a 	mov	r4,zero
 2003384:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2003388:	0009883a 	mov	r4,zero
 200338c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xF3);
 2003390:	01003cc4 	movi	r4,243
 2003394:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 2003398:	0009883a 	mov	r4,zero
 200339c:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xF9);
 20033a0:	01003e44 	movi	r4,249
 20033a4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x06);
 20033a8:	01000184 	movi	r4,6
 20033ac:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 20033b0:	01000404 	movi	r4,16
 20033b4:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 20033b8:	01000a44 	movi	r4,41
 20033bc:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20033c0:	0009883a 	mov	r4,zero
 20033c4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0x3A);
 20033c8:	01000e84 	movi	r4,58
 20033cc:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x55);    //66
 20033d0:	01001544 	movi	r4,85
 20033d4:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0x11);
 20033d8:	01000444 	movi	r4,17
 20033dc:	20002380 	call	2000238 <LCD_WR_CMD>
        delay_ms(100);
 20033e0:	01001904 	movi	r4,100
 20033e4:	20002000 	call	2000200 <delay_ms>
        LCD_WR_CMD(0x29);
 20033e8:	01000a44 	movi	r4,41
 20033ec:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_CMD(0x35);
 20033f0:	01000d44 	movi	r4,53
 20033f4:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 20033f8:	0009883a 	mov	r4,zero
 20033fc:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0x51);
 2003400:	01001444 	movi	r4,81
 2003404:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xFF);
 2003408:	01003fc4 	movi	r4,255
 200340c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x53);
 2003410:	010014c4 	movi	r4,83
 2003414:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x2C);
 2003418:	01000b04 	movi	r4,44
 200341c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x55);
 2003420:	01001544 	movi	r4,85
 2003424:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x82);
 2003428:	01002084 	movi	r4,130
 200342c:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0x2c);
 2003430:	01000b04 	movi	r4,44
 2003434:	20002380 	call	2000238 <LCD_WR_CMD>
 2003438:	00050006 	br	200483c <MCULCD_Init+0x2dfc>
    }else if(lcddev.id==0x5510) {
 200343c:	00808074 	movhi	r2,513
 2003440:	108e9f04 	addi	r2,r2,14972
 2003444:	10800217 	ldw	r2,8(r2)
 2003448:	10954418 	cmpnei	r2,r2,21776
 200344c:	10047e1e 	bne	r2,zero,2004648 <MCULCD_Init+0x2c08>
        // LV2 Page1 enable
        LCD_WriteReg(0xF000,0x55);
 2003450:	013c0014 	movui	r4,61440
 2003454:	01401544 	movi	r5,85
 2003458:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF001,0xAA);
 200345c:	013c0054 	movui	r4,61441
 2003460:	01402a84 	movi	r5,170
 2003464:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF002,0x52);
 2003468:	013c0094 	movui	r4,61442
 200346c:	01401484 	movi	r5,82
 2003470:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF003,0x08);
 2003474:	013c00d4 	movui	r4,61443
 2003478:	01400204 	movi	r5,8
 200347c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF004,0x01);
 2003480:	013c0114 	movui	r4,61444
 2003484:	01400044 	movi	r5,1
 2003488:	20003ac0 	call	20003ac <LCD_WriteReg>
        //AVDD Set AVDD 5.2V
        LCD_WriteReg(0xB000,0x0D);
 200348c:	012c0014 	movui	r4,45056
 2003490:	01400344 	movi	r5,13
 2003494:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB001,0x0D);
 2003498:	012c0054 	movui	r4,45057
 200349c:	01400344 	movi	r5,13
 20034a0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB002,0x0D);
 20034a4:	012c0094 	movui	r4,45058
 20034a8:	01400344 	movi	r5,13
 20034ac:	20003ac0 	call	20003ac <LCD_WriteReg>
        //AVDD ratio
        LCD_WriteReg(0xB600,0x34);
 20034b0:	012d8014 	movui	r4,46592
 20034b4:	01400d04 	movi	r5,52
 20034b8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB601,0x34);
 20034bc:	012d8054 	movui	r4,46593
 20034c0:	01400d04 	movi	r5,52
 20034c4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB602,0x34);
 20034c8:	012d8094 	movui	r4,46594
 20034cc:	01400d04 	movi	r5,52
 20034d0:	20003ac0 	call	20003ac <LCD_WriteReg>
        //AVEE -5.2V
        LCD_WriteReg(0xB100,0x0D);
 20034d4:	012c4014 	movui	r4,45312
 20034d8:	01400344 	movi	r5,13
 20034dc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB101,0x0D);
 20034e0:	012c4054 	movui	r4,45313
 20034e4:	01400344 	movi	r5,13
 20034e8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB102,0x0D);
 20034ec:	012c4094 	movui	r4,45314
 20034f0:	01400344 	movi	r5,13
 20034f4:	20003ac0 	call	20003ac <LCD_WriteReg>
        //AVEE ratio
        LCD_WriteReg(0xB700,0x34);
 20034f8:	012dc014 	movui	r4,46848
 20034fc:	01400d04 	movi	r5,52
 2003500:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB701,0x34);
 2003504:	012dc054 	movui	r4,46849
 2003508:	01400d04 	movi	r5,52
 200350c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB702,0x34);
 2003510:	012dc094 	movui	r4,46850
 2003514:	01400d04 	movi	r5,52
 2003518:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VCL -2.5V
        LCD_WriteReg(0xB200,0x00);
 200351c:	012c8014 	movui	r4,45568
 2003520:	000b883a 	mov	r5,zero
 2003524:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB201,0x00);
 2003528:	012c8054 	movui	r4,45569
 200352c:	000b883a 	mov	r5,zero
 2003530:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB202,0x00);
 2003534:	012c8094 	movui	r4,45570
 2003538:	000b883a 	mov	r5,zero
 200353c:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VCL ratio
        LCD_WriteReg(0xB800,0x24);
 2003540:	012e0014 	movui	r4,47104
 2003544:	01400904 	movi	r5,36
 2003548:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB801,0x24);
 200354c:	012e0054 	movui	r4,47105
 2003550:	01400904 	movi	r5,36
 2003554:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB802,0x24);
 2003558:	012e0094 	movui	r4,47106
 200355c:	01400904 	movi	r5,36
 2003560:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VGH 15V (Free pump)
        LCD_WriteReg(0xBF00,0x01);
 2003564:	012fc014 	movui	r4,48896
 2003568:	01400044 	movi	r5,1
 200356c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB300,0x0F);
 2003570:	012cc014 	movui	r4,45824
 2003574:	014003c4 	movi	r5,15
 2003578:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB301,0x0F);
 200357c:	012cc054 	movui	r4,45825
 2003580:	014003c4 	movi	r5,15
 2003584:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB302,0x0F);
 2003588:	012cc094 	movui	r4,45826
 200358c:	014003c4 	movi	r5,15
 2003590:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VGH ratio
        LCD_WriteReg(0xB900,0x34);
 2003594:	012e4014 	movui	r4,47360
 2003598:	01400d04 	movi	r5,52
 200359c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB901,0x34);
 20035a0:	012e4054 	movui	r4,47361
 20035a4:	01400d04 	movi	r5,52
 20035a8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB902,0x34);
 20035ac:	012e4094 	movui	r4,47362
 20035b0:	01400d04 	movi	r5,52
 20035b4:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VGL_REG -10V
        LCD_WriteReg(0xB500,0x08);
 20035b8:	012d4014 	movui	r4,46336
 20035bc:	01400204 	movi	r5,8
 20035c0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB501,0x08);
 20035c4:	012d4054 	movui	r4,46337
 20035c8:	01400204 	movi	r5,8
 20035cc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB502,0x08);
 20035d0:	012d4094 	movui	r4,46338
 20035d4:	01400204 	movi	r5,8
 20035d8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xC200,0x03);
 20035dc:	01308014 	movui	r4,49664
 20035e0:	014000c4 	movi	r5,3
 20035e4:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VGLX ratio
        LCD_WriteReg(0xBA00,0x24);
 20035e8:	012e8014 	movui	r4,47616
 20035ec:	01400904 	movi	r5,36
 20035f0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBA01,0x24);
 20035f4:	012e8054 	movui	r4,47617
 20035f8:	01400904 	movi	r5,36
 20035fc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBA02,0x24);
 2003600:	012e8094 	movui	r4,47618
 2003604:	01400904 	movi	r5,36
 2003608:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VGMP/VGSP 4.5V/0V
        LCD_WriteReg(0xBC00,0x00);
 200360c:	012f0014 	movui	r4,48128
 2003610:	000b883a 	mov	r5,zero
 2003614:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBC01,0x78);
 2003618:	012f0054 	movui	r4,48129
 200361c:	01401e04 	movi	r5,120
 2003620:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBC02,0x00);
 2003624:	012f0094 	movui	r4,48130
 2003628:	000b883a 	mov	r5,zero
 200362c:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VGMN/VGSN -4.5V/0V
        LCD_WriteReg(0xBD00,0x00);
 2003630:	012f4014 	movui	r4,48384
 2003634:	000b883a 	mov	r5,zero
 2003638:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBD01,0x78);
 200363c:	012f4054 	movui	r4,48385
 2003640:	01401e04 	movi	r5,120
 2003644:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBD02,0x00);
 2003648:	012f4094 	movui	r4,48386
 200364c:	000b883a 	mov	r5,zero
 2003650:	20003ac0 	call	20003ac <LCD_WriteReg>
        //VCOM -2.0375V
        LCD_WriteReg(0xBE00,0x00);
 2003654:	012f8014 	movui	r4,48640
 2003658:	000b883a 	mov	r5,zero
 200365c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBE01,0x64);
 2003660:	012f8054 	movui	r4,48641
 2003664:	01401904 	movi	r5,100
 2003668:	20003ac0 	call	20003ac <LCD_WriteReg>
        //Gamma Setting
        LCD_WriteReg(0xD100,0x00);
 200366c:	01344014 	movui	r4,53504
 2003670:	000b883a 	mov	r5,zero
 2003674:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD101,0x33);
 2003678:	01344054 	movui	r4,53505
 200367c:	01400cc4 	movi	r5,51
 2003680:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD102,0x00);
 2003684:	01344094 	movui	r4,53506
 2003688:	000b883a 	mov	r5,zero
 200368c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD103,0x34);
 2003690:	013440d4 	movui	r4,53507
 2003694:	01400d04 	movi	r5,52
 2003698:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD104,0x00);
 200369c:	01344114 	movui	r4,53508
 20036a0:	000b883a 	mov	r5,zero
 20036a4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD105,0x3A);
 20036a8:	01344154 	movui	r4,53509
 20036ac:	01400e84 	movi	r5,58
 20036b0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD106,0x00);
 20036b4:	01344194 	movui	r4,53510
 20036b8:	000b883a 	mov	r5,zero
 20036bc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD107,0x4A);
 20036c0:	013441d4 	movui	r4,53511
 20036c4:	01401284 	movi	r5,74
 20036c8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD108,0x00);
 20036cc:	01344214 	movui	r4,53512
 20036d0:	000b883a 	mov	r5,zero
 20036d4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD109,0x5C);
 20036d8:	01344254 	movui	r4,53513
 20036dc:	01401704 	movi	r5,92
 20036e0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD10A,0x00);
 20036e4:	01344294 	movui	r4,53514
 20036e8:	000b883a 	mov	r5,zero
 20036ec:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD10B,0x81);
 20036f0:	013442d4 	movui	r4,53515
 20036f4:	01402044 	movi	r5,129
 20036f8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD10C,0x00);
 20036fc:	01344314 	movui	r4,53516
 2003700:	000b883a 	mov	r5,zero
 2003704:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD10D,0xA6);
 2003708:	01344354 	movui	r4,53517
 200370c:	01402984 	movi	r5,166
 2003710:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD10E,0x00);
 2003714:	01344394 	movui	r4,53518
 2003718:	000b883a 	mov	r5,zero
 200371c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD10F,0xE5);
 2003720:	013443d4 	movui	r4,53519
 2003724:	01403944 	movi	r5,229
 2003728:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD110,0x01);
 200372c:	01344414 	movui	r4,53520
 2003730:	01400044 	movi	r5,1
 2003734:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD111,0x13);
 2003738:	01344454 	movui	r4,53521
 200373c:	014004c4 	movi	r5,19
 2003740:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD112,0x01);
 2003744:	01344494 	movui	r4,53522
 2003748:	01400044 	movi	r5,1
 200374c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD113,0x54);
 2003750:	013444d4 	movui	r4,53523
 2003754:	01401504 	movi	r5,84
 2003758:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD114,0x01);
 200375c:	01344514 	movui	r4,53524
 2003760:	01400044 	movi	r5,1
 2003764:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD115,0x82);
 2003768:	01344554 	movui	r4,53525
 200376c:	01402084 	movi	r5,130
 2003770:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD116,0x01);
 2003774:	01344594 	movui	r4,53526
 2003778:	01400044 	movi	r5,1
 200377c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD117,0xCA);
 2003780:	013445d4 	movui	r4,53527
 2003784:	01403284 	movi	r5,202
 2003788:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD118,0x02);
 200378c:	01344614 	movui	r4,53528
 2003790:	01400084 	movi	r5,2
 2003794:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD119,0x00);
 2003798:	01344654 	movui	r4,53529
 200379c:	000b883a 	mov	r5,zero
 20037a0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD11A,0x02);
 20037a4:	01344694 	movui	r4,53530
 20037a8:	01400084 	movi	r5,2
 20037ac:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD11B,0x01);
 20037b0:	013446d4 	movui	r4,53531
 20037b4:	01400044 	movi	r5,1
 20037b8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD11C,0x02);
 20037bc:	01344714 	movui	r4,53532
 20037c0:	01400084 	movi	r5,2
 20037c4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD11D,0x34);
 20037c8:	01344754 	movui	r4,53533
 20037cc:	01400d04 	movi	r5,52
 20037d0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD11E,0x02);
 20037d4:	01344794 	movui	r4,53534
 20037d8:	01400084 	movi	r5,2
 20037dc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD11F,0x67);
 20037e0:	013447d4 	movui	r4,53535
 20037e4:	014019c4 	movi	r5,103
 20037e8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD120,0x02);
 20037ec:	01344814 	movui	r4,53536
 20037f0:	01400084 	movi	r5,2
 20037f4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD121,0x84);
 20037f8:	01344854 	movui	r4,53537
 20037fc:	01402104 	movi	r5,132
 2003800:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD122,0x02);
 2003804:	01344894 	movui	r4,53538
 2003808:	01400084 	movi	r5,2
 200380c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD123,0xA4);
 2003810:	013448d4 	movui	r4,53539
 2003814:	01402904 	movi	r5,164
 2003818:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD124,0x02);
 200381c:	01344914 	movui	r4,53540
 2003820:	01400084 	movi	r5,2
 2003824:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD125,0xB7);
 2003828:	01344954 	movui	r4,53541
 200382c:	01402dc4 	movi	r5,183
 2003830:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD126,0x02);
 2003834:	01344994 	movui	r4,53542
 2003838:	01400084 	movi	r5,2
 200383c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD127,0xCF);
 2003840:	013449d4 	movui	r4,53543
 2003844:	014033c4 	movi	r5,207
 2003848:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD128,0x02);
 200384c:	01344a14 	movui	r4,53544
 2003850:	01400084 	movi	r5,2
 2003854:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD129,0xDE);
 2003858:	01344a54 	movui	r4,53545
 200385c:	01403784 	movi	r5,222
 2003860:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD12A,0x02);
 2003864:	01344a94 	movui	r4,53546
 2003868:	01400084 	movi	r5,2
 200386c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD12B,0xF2);
 2003870:	01344ad4 	movui	r4,53547
 2003874:	01403c84 	movi	r5,242
 2003878:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD12C,0x02);
 200387c:	01344b14 	movui	r4,53548
 2003880:	01400084 	movi	r5,2
 2003884:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD12D,0xFE);
 2003888:	01344b54 	movui	r4,53549
 200388c:	01403f84 	movi	r5,254
 2003890:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD12E,0x03);
 2003894:	01344b94 	movui	r4,53550
 2003898:	014000c4 	movi	r5,3
 200389c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD12F,0x10);
 20038a0:	01344bd4 	movui	r4,53551
 20038a4:	01400404 	movi	r5,16
 20038a8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD130,0x03);
 20038ac:	01344c14 	movui	r4,53552
 20038b0:	014000c4 	movi	r5,3
 20038b4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD131,0x33);
 20038b8:	01344c54 	movui	r4,53553
 20038bc:	01400cc4 	movi	r5,51
 20038c0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD132,0x03);
 20038c4:	01344c94 	movui	r4,53554
 20038c8:	014000c4 	movi	r5,3
 20038cc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD133,0x6D);
 20038d0:	01344cd4 	movui	r4,53555
 20038d4:	01401b44 	movi	r5,109
 20038d8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD200,0x00);
 20038dc:	01348014 	movui	r4,53760
 20038e0:	000b883a 	mov	r5,zero
 20038e4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD201,0x33);
 20038e8:	01348054 	movui	r4,53761
 20038ec:	01400cc4 	movi	r5,51
 20038f0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD202,0x00);
 20038f4:	01348094 	movui	r4,53762
 20038f8:	000b883a 	mov	r5,zero
 20038fc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD203,0x34);
 2003900:	013480d4 	movui	r4,53763
 2003904:	01400d04 	movi	r5,52
 2003908:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD204,0x00);
 200390c:	01348114 	movui	r4,53764
 2003910:	000b883a 	mov	r5,zero
 2003914:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD205,0x3A);
 2003918:	01348154 	movui	r4,53765
 200391c:	01400e84 	movi	r5,58
 2003920:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD206,0x00);
 2003924:	01348194 	movui	r4,53766
 2003928:	000b883a 	mov	r5,zero
 200392c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD207,0x4A);
 2003930:	013481d4 	movui	r4,53767
 2003934:	01401284 	movi	r5,74
 2003938:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD208,0x00);
 200393c:	01348214 	movui	r4,53768
 2003940:	000b883a 	mov	r5,zero
 2003944:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD209,0x5C);
 2003948:	01348254 	movui	r4,53769
 200394c:	01401704 	movi	r5,92
 2003950:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD20A,0x00);
 2003954:	01348294 	movui	r4,53770
 2003958:	000b883a 	mov	r5,zero
 200395c:	20003ac0 	call	20003ac <LCD_WriteReg>

        LCD_WriteReg(0xD20B,0x81);
 2003960:	013482d4 	movui	r4,53771
 2003964:	01402044 	movi	r5,129
 2003968:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD20C,0x00);
 200396c:	01348314 	movui	r4,53772
 2003970:	000b883a 	mov	r5,zero
 2003974:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD20D,0xA6);
 2003978:	01348354 	movui	r4,53773
 200397c:	01402984 	movi	r5,166
 2003980:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD20E,0x00);
 2003984:	01348394 	movui	r4,53774
 2003988:	000b883a 	mov	r5,zero
 200398c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD20F,0xE5);
 2003990:	013483d4 	movui	r4,53775
 2003994:	01403944 	movi	r5,229
 2003998:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD210,0x01);
 200399c:	01348414 	movui	r4,53776
 20039a0:	01400044 	movi	r5,1
 20039a4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD211,0x13);
 20039a8:	01348454 	movui	r4,53777
 20039ac:	014004c4 	movi	r5,19
 20039b0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD212,0x01);
 20039b4:	01348494 	movui	r4,53778
 20039b8:	01400044 	movi	r5,1
 20039bc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD213,0x54);
 20039c0:	013484d4 	movui	r4,53779
 20039c4:	01401504 	movi	r5,84
 20039c8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD214,0x01);
 20039cc:	01348514 	movui	r4,53780
 20039d0:	01400044 	movi	r5,1
 20039d4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD215,0x82);
 20039d8:	01348554 	movui	r4,53781
 20039dc:	01402084 	movi	r5,130
 20039e0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD216,0x01);
 20039e4:	01348594 	movui	r4,53782
 20039e8:	01400044 	movi	r5,1
 20039ec:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD217,0xCA);
 20039f0:	013485d4 	movui	r4,53783
 20039f4:	01403284 	movi	r5,202
 20039f8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD218,0x02);
 20039fc:	01348614 	movui	r4,53784
 2003a00:	01400084 	movi	r5,2
 2003a04:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD219,0x00);
 2003a08:	01348654 	movui	r4,53785
 2003a0c:	000b883a 	mov	r5,zero
 2003a10:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD21A,0x02);
 2003a14:	01348694 	movui	r4,53786
 2003a18:	01400084 	movi	r5,2
 2003a1c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD21B,0x01);
 2003a20:	013486d4 	movui	r4,53787
 2003a24:	01400044 	movi	r5,1
 2003a28:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD21C,0x02);
 2003a2c:	01348714 	movui	r4,53788
 2003a30:	01400084 	movi	r5,2
 2003a34:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD21D,0x34);
 2003a38:	01348754 	movui	r4,53789
 2003a3c:	01400d04 	movi	r5,52
 2003a40:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD21E,0x02);
 2003a44:	01348794 	movui	r4,53790
 2003a48:	01400084 	movi	r5,2
 2003a4c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD21F,0x67);
 2003a50:	013487d4 	movui	r4,53791
 2003a54:	014019c4 	movi	r5,103
 2003a58:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD220,0x02);
 2003a5c:	01348814 	movui	r4,53792
 2003a60:	01400084 	movi	r5,2
 2003a64:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD221,0x84);
 2003a68:	01348854 	movui	r4,53793
 2003a6c:	01402104 	movi	r5,132
 2003a70:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD222,0x02);
 2003a74:	01348894 	movui	r4,53794
 2003a78:	01400084 	movi	r5,2
 2003a7c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD223,0xA4);
 2003a80:	013488d4 	movui	r4,53795
 2003a84:	01402904 	movi	r5,164
 2003a88:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD224,0x02);
 2003a8c:	01348914 	movui	r4,53796
 2003a90:	01400084 	movi	r5,2
 2003a94:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD225,0xB7);
 2003a98:	01348954 	movui	r4,53797
 2003a9c:	01402dc4 	movi	r5,183
 2003aa0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD226,0x02);
 2003aa4:	01348994 	movui	r4,53798
 2003aa8:	01400084 	movi	r5,2
 2003aac:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD227,0xCF);
 2003ab0:	013489d4 	movui	r4,53799
 2003ab4:	014033c4 	movi	r5,207
 2003ab8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD228,0x02);
 2003abc:	01348a14 	movui	r4,53800
 2003ac0:	01400084 	movi	r5,2
 2003ac4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD229,0xDE);
 2003ac8:	01348a54 	movui	r4,53801
 2003acc:	01403784 	movi	r5,222
 2003ad0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD22A,0x02);
 2003ad4:	01348a94 	movui	r4,53802
 2003ad8:	01400084 	movi	r5,2
 2003adc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD22B,0xF2);
 2003ae0:	01348ad4 	movui	r4,53803
 2003ae4:	01403c84 	movi	r5,242
 2003ae8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD22C,0x02);
 2003aec:	01348b14 	movui	r4,53804
 2003af0:	01400084 	movi	r5,2
 2003af4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD22D,0xFE);
 2003af8:	01348b54 	movui	r4,53805
 2003afc:	01403f84 	movi	r5,254
 2003b00:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD22E,0x03);
 2003b04:	01348b94 	movui	r4,53806
 2003b08:	014000c4 	movi	r5,3
 2003b0c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD22F,0x10);
 2003b10:	01348bd4 	movui	r4,53807
 2003b14:	01400404 	movi	r5,16
 2003b18:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD230,0x03);
 2003b1c:	01348c14 	movui	r4,53808
 2003b20:	014000c4 	movi	r5,3
 2003b24:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD231,0x33);
 2003b28:	01348c54 	movui	r4,53809
 2003b2c:	01400cc4 	movi	r5,51
 2003b30:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD232,0x03);
 2003b34:	01348c94 	movui	r4,53810
 2003b38:	014000c4 	movi	r5,3
 2003b3c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD233,0x6D);
 2003b40:	01348cd4 	movui	r4,53811
 2003b44:	01401b44 	movi	r5,109
 2003b48:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD300,0x00);
 2003b4c:	0134c014 	movui	r4,54016
 2003b50:	000b883a 	mov	r5,zero
 2003b54:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD301,0x33);
 2003b58:	0134c054 	movui	r4,54017
 2003b5c:	01400cc4 	movi	r5,51
 2003b60:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD302,0x00);
 2003b64:	0134c094 	movui	r4,54018
 2003b68:	000b883a 	mov	r5,zero
 2003b6c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD303,0x34);
 2003b70:	0134c0d4 	movui	r4,54019
 2003b74:	01400d04 	movi	r5,52
 2003b78:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD304,0x00);
 2003b7c:	0134c114 	movui	r4,54020
 2003b80:	000b883a 	mov	r5,zero
 2003b84:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD305,0x3A);
 2003b88:	0134c154 	movui	r4,54021
 2003b8c:	01400e84 	movi	r5,58
 2003b90:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD306,0x00);
 2003b94:	0134c194 	movui	r4,54022
 2003b98:	000b883a 	mov	r5,zero
 2003b9c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD307,0x4A);
 2003ba0:	0134c1d4 	movui	r4,54023
 2003ba4:	01401284 	movi	r5,74
 2003ba8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD308,0x00);
 2003bac:	0134c214 	movui	r4,54024
 2003bb0:	000b883a 	mov	r5,zero
 2003bb4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD309,0x5C);
 2003bb8:	0134c254 	movui	r4,54025
 2003bbc:	01401704 	movi	r5,92
 2003bc0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD30A,0x00);
 2003bc4:	0134c294 	movui	r4,54026
 2003bc8:	000b883a 	mov	r5,zero
 2003bcc:	20003ac0 	call	20003ac <LCD_WriteReg>

        LCD_WriteReg(0xD30B,0x81);
 2003bd0:	0134c2d4 	movui	r4,54027
 2003bd4:	01402044 	movi	r5,129
 2003bd8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD30C,0x00);
 2003bdc:	0134c314 	movui	r4,54028
 2003be0:	000b883a 	mov	r5,zero
 2003be4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD30D,0xA6);
 2003be8:	0134c354 	movui	r4,54029
 2003bec:	01402984 	movi	r5,166
 2003bf0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD30E,0x00);
 2003bf4:	0134c394 	movui	r4,54030
 2003bf8:	000b883a 	mov	r5,zero
 2003bfc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD30F,0xE5);
 2003c00:	0134c3d4 	movui	r4,54031
 2003c04:	01403944 	movi	r5,229
 2003c08:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD310,0x01);
 2003c0c:	0134c414 	movui	r4,54032
 2003c10:	01400044 	movi	r5,1
 2003c14:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD311,0x13);
 2003c18:	0134c454 	movui	r4,54033
 2003c1c:	014004c4 	movi	r5,19
 2003c20:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD312,0x01);
 2003c24:	0134c494 	movui	r4,54034
 2003c28:	01400044 	movi	r5,1
 2003c2c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD313,0x54);
 2003c30:	0134c4d4 	movui	r4,54035
 2003c34:	01401504 	movi	r5,84
 2003c38:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD314,0x01);
 2003c3c:	0134c514 	movui	r4,54036
 2003c40:	01400044 	movi	r5,1
 2003c44:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD315,0x82);
 2003c48:	0134c554 	movui	r4,54037
 2003c4c:	01402084 	movi	r5,130
 2003c50:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD316,0x01);
 2003c54:	0134c594 	movui	r4,54038
 2003c58:	01400044 	movi	r5,1
 2003c5c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD317,0xCA);
 2003c60:	0134c5d4 	movui	r4,54039
 2003c64:	01403284 	movi	r5,202
 2003c68:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD318,0x02);
 2003c6c:	0134c614 	movui	r4,54040
 2003c70:	01400084 	movi	r5,2
 2003c74:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD319,0x00);
 2003c78:	0134c654 	movui	r4,54041
 2003c7c:	000b883a 	mov	r5,zero
 2003c80:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD31A,0x02);
 2003c84:	0134c694 	movui	r4,54042
 2003c88:	01400084 	movi	r5,2
 2003c8c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD31B,0x01);
 2003c90:	0134c6d4 	movui	r4,54043
 2003c94:	01400044 	movi	r5,1
 2003c98:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD31C,0x02);
 2003c9c:	0134c714 	movui	r4,54044
 2003ca0:	01400084 	movi	r5,2
 2003ca4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD31D,0x34);
 2003ca8:	0134c754 	movui	r4,54045
 2003cac:	01400d04 	movi	r5,52
 2003cb0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD31E,0x02);
 2003cb4:	0134c794 	movui	r4,54046
 2003cb8:	01400084 	movi	r5,2
 2003cbc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD31F,0x67);
 2003cc0:	0134c7d4 	movui	r4,54047
 2003cc4:	014019c4 	movi	r5,103
 2003cc8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD320,0x02);
 2003ccc:	0134c814 	movui	r4,54048
 2003cd0:	01400084 	movi	r5,2
 2003cd4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD321,0x84);
 2003cd8:	0134c854 	movui	r4,54049
 2003cdc:	01402104 	movi	r5,132
 2003ce0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD322,0x02);
 2003ce4:	0134c894 	movui	r4,54050
 2003ce8:	01400084 	movi	r5,2
 2003cec:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD323,0xA4);
 2003cf0:	0134c8d4 	movui	r4,54051
 2003cf4:	01402904 	movi	r5,164
 2003cf8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD324,0x02);
 2003cfc:	0134c914 	movui	r4,54052
 2003d00:	01400084 	movi	r5,2
 2003d04:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD325,0xB7);
 2003d08:	0134c954 	movui	r4,54053
 2003d0c:	01402dc4 	movi	r5,183
 2003d10:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD326,0x02);
 2003d14:	0134c994 	movui	r4,54054
 2003d18:	01400084 	movi	r5,2
 2003d1c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD327,0xCF);
 2003d20:	0134c9d4 	movui	r4,54055
 2003d24:	014033c4 	movi	r5,207
 2003d28:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD328,0x02);
 2003d2c:	0134ca14 	movui	r4,54056
 2003d30:	01400084 	movi	r5,2
 2003d34:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD329,0xDE);
 2003d38:	0134ca54 	movui	r4,54057
 2003d3c:	01403784 	movi	r5,222
 2003d40:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD32A,0x02);
 2003d44:	0134ca94 	movui	r4,54058
 2003d48:	01400084 	movi	r5,2
 2003d4c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD32B,0xF2);
 2003d50:	0134cad4 	movui	r4,54059
 2003d54:	01403c84 	movi	r5,242
 2003d58:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD32C,0x02);
 2003d5c:	0134cb14 	movui	r4,54060
 2003d60:	01400084 	movi	r5,2
 2003d64:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD32D,0xFE);
 2003d68:	0134cb54 	movui	r4,54061
 2003d6c:	01403f84 	movi	r5,254
 2003d70:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD32E,0x03);
 2003d74:	0134cb94 	movui	r4,54062
 2003d78:	014000c4 	movi	r5,3
 2003d7c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD32F,0x10);
 2003d80:	0134cbd4 	movui	r4,54063
 2003d84:	01400404 	movi	r5,16
 2003d88:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD330,0x03);
 2003d8c:	0134cc14 	movui	r4,54064
 2003d90:	014000c4 	movi	r5,3
 2003d94:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD331,0x33);
 2003d98:	0134cc54 	movui	r4,54065
 2003d9c:	01400cc4 	movi	r5,51
 2003da0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD332,0x03);
 2003da4:	0134cc94 	movui	r4,54066
 2003da8:	014000c4 	movi	r5,3
 2003dac:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD333,0x6D);
 2003db0:	0134ccd4 	movui	r4,54067
 2003db4:	01401b44 	movi	r5,109
 2003db8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD400,0x00);
 2003dbc:	01350014 	movui	r4,54272
 2003dc0:	000b883a 	mov	r5,zero
 2003dc4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD401,0x33);
 2003dc8:	01350054 	movui	r4,54273
 2003dcc:	01400cc4 	movi	r5,51
 2003dd0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD402,0x00);
 2003dd4:	01350094 	movui	r4,54274
 2003dd8:	000b883a 	mov	r5,zero
 2003ddc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD403,0x34);
 2003de0:	013500d4 	movui	r4,54275
 2003de4:	01400d04 	movi	r5,52
 2003de8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD404,0x00);
 2003dec:	01350114 	movui	r4,54276
 2003df0:	000b883a 	mov	r5,zero
 2003df4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD405,0x3A);
 2003df8:	01350154 	movui	r4,54277
 2003dfc:	01400e84 	movi	r5,58
 2003e00:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD406,0x00);
 2003e04:	01350194 	movui	r4,54278
 2003e08:	000b883a 	mov	r5,zero
 2003e0c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD407,0x4A);
 2003e10:	013501d4 	movui	r4,54279
 2003e14:	01401284 	movi	r5,74
 2003e18:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD408,0x00);
 2003e1c:	01350214 	movui	r4,54280
 2003e20:	000b883a 	mov	r5,zero
 2003e24:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD409,0x5C);
 2003e28:	01350254 	movui	r4,54281
 2003e2c:	01401704 	movi	r5,92
 2003e30:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD40A,0x00);
 2003e34:	01350294 	movui	r4,54282
 2003e38:	000b883a 	mov	r5,zero
 2003e3c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD40B,0x81);
 2003e40:	013502d4 	movui	r4,54283
 2003e44:	01402044 	movi	r5,129
 2003e48:	20003ac0 	call	20003ac <LCD_WriteReg>

        LCD_WriteReg(0xD40C,0x00);
 2003e4c:	01350314 	movui	r4,54284
 2003e50:	000b883a 	mov	r5,zero
 2003e54:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD40D,0xA6);
 2003e58:	01350354 	movui	r4,54285
 2003e5c:	01402984 	movi	r5,166
 2003e60:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD40E,0x00);
 2003e64:	01350394 	movui	r4,54286
 2003e68:	000b883a 	mov	r5,zero
 2003e6c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD40F,0xE5);
 2003e70:	013503d4 	movui	r4,54287
 2003e74:	01403944 	movi	r5,229
 2003e78:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD410,0x01);
 2003e7c:	01350414 	movui	r4,54288
 2003e80:	01400044 	movi	r5,1
 2003e84:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD411,0x13);
 2003e88:	01350454 	movui	r4,54289
 2003e8c:	014004c4 	movi	r5,19
 2003e90:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD412,0x01);
 2003e94:	01350494 	movui	r4,54290
 2003e98:	01400044 	movi	r5,1
 2003e9c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD413,0x54);
 2003ea0:	013504d4 	movui	r4,54291
 2003ea4:	01401504 	movi	r5,84
 2003ea8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD414,0x01);
 2003eac:	01350514 	movui	r4,54292
 2003eb0:	01400044 	movi	r5,1
 2003eb4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD415,0x82);
 2003eb8:	01350554 	movui	r4,54293
 2003ebc:	01402084 	movi	r5,130
 2003ec0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD416,0x01);
 2003ec4:	01350594 	movui	r4,54294
 2003ec8:	01400044 	movi	r5,1
 2003ecc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD417,0xCA);
 2003ed0:	013505d4 	movui	r4,54295
 2003ed4:	01403284 	movi	r5,202
 2003ed8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD418,0x02);
 2003edc:	01350614 	movui	r4,54296
 2003ee0:	01400084 	movi	r5,2
 2003ee4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD419,0x00);
 2003ee8:	01350654 	movui	r4,54297
 2003eec:	000b883a 	mov	r5,zero
 2003ef0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD41A,0x02);
 2003ef4:	01350694 	movui	r4,54298
 2003ef8:	01400084 	movi	r5,2
 2003efc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD41B,0x01);
 2003f00:	013506d4 	movui	r4,54299
 2003f04:	01400044 	movi	r5,1
 2003f08:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD41C,0x02);
 2003f0c:	01350714 	movui	r4,54300
 2003f10:	01400084 	movi	r5,2
 2003f14:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD41D,0x34);
 2003f18:	01350754 	movui	r4,54301
 2003f1c:	01400d04 	movi	r5,52
 2003f20:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD41E,0x02);
 2003f24:	01350794 	movui	r4,54302
 2003f28:	01400084 	movi	r5,2
 2003f2c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD41F,0x67);
 2003f30:	013507d4 	movui	r4,54303
 2003f34:	014019c4 	movi	r5,103
 2003f38:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD420,0x02);
 2003f3c:	01350814 	movui	r4,54304
 2003f40:	01400084 	movi	r5,2
 2003f44:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD421,0x84);
 2003f48:	01350854 	movui	r4,54305
 2003f4c:	01402104 	movi	r5,132
 2003f50:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD422,0x02);
 2003f54:	01350894 	movui	r4,54306
 2003f58:	01400084 	movi	r5,2
 2003f5c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD423,0xA4);
 2003f60:	013508d4 	movui	r4,54307
 2003f64:	01402904 	movi	r5,164
 2003f68:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD424,0x02);
 2003f6c:	01350914 	movui	r4,54308
 2003f70:	01400084 	movi	r5,2
 2003f74:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD425,0xB7);
 2003f78:	01350954 	movui	r4,54309
 2003f7c:	01402dc4 	movi	r5,183
 2003f80:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD426,0x02);
 2003f84:	01350994 	movui	r4,54310
 2003f88:	01400084 	movi	r5,2
 2003f8c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD427,0xCF);
 2003f90:	013509d4 	movui	r4,54311
 2003f94:	014033c4 	movi	r5,207
 2003f98:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD428,0x02);
 2003f9c:	01350a14 	movui	r4,54312
 2003fa0:	01400084 	movi	r5,2
 2003fa4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD429,0xDE);
 2003fa8:	01350a54 	movui	r4,54313
 2003fac:	01403784 	movi	r5,222
 2003fb0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD42A,0x02);
 2003fb4:	01350a94 	movui	r4,54314
 2003fb8:	01400084 	movi	r5,2
 2003fbc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD42B,0xF2);
 2003fc0:	01350ad4 	movui	r4,54315
 2003fc4:	01403c84 	movi	r5,242
 2003fc8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD42C,0x02);
 2003fcc:	01350b14 	movui	r4,54316
 2003fd0:	01400084 	movi	r5,2
 2003fd4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD42D,0xFE);
 2003fd8:	01350b54 	movui	r4,54317
 2003fdc:	01403f84 	movi	r5,254
 2003fe0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD42E,0x03);
 2003fe4:	01350b94 	movui	r4,54318
 2003fe8:	014000c4 	movi	r5,3
 2003fec:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD42F,0x10);
 2003ff0:	01350bd4 	movui	r4,54319
 2003ff4:	01400404 	movi	r5,16
 2003ff8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD430,0x03);
 2003ffc:	01350c14 	movui	r4,54320
 2004000:	014000c4 	movi	r5,3
 2004004:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD431,0x33);
 2004008:	01350c54 	movui	r4,54321
 200400c:	01400cc4 	movi	r5,51
 2004010:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD432,0x03);
 2004014:	01350c94 	movui	r4,54322
 2004018:	014000c4 	movi	r5,3
 200401c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD433,0x6D);    /* VU */
 2004020:	01350cd4 	movui	r4,54323
 2004024:	01401b44 	movi	r5,109
 2004028:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD500,0x00);
 200402c:	01354014 	movui	r4,54528
 2004030:	000b883a 	mov	r5,zero
 2004034:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD501,0x33);
 2004038:	01354054 	movui	r4,54529
 200403c:	01400cc4 	movi	r5,51
 2004040:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD502,0x00);
 2004044:	01354094 	movui	r4,54530
 2004048:	000b883a 	mov	r5,zero
 200404c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD503,0x34);
 2004050:	013540d4 	movui	r4,54531
 2004054:	01400d04 	movi	r5,52
 2004058:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD504,0x00);
 200405c:	01354114 	movui	r4,54532
 2004060:	000b883a 	mov	r5,zero
 2004064:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD505,0x3A);
 2004068:	01354154 	movui	r4,54533
 200406c:	01400e84 	movi	r5,58
 2004070:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD506,0x00);
 2004074:	01354194 	movui	r4,54534
 2004078:	000b883a 	mov	r5,zero
 200407c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD507,0x4A);
 2004080:	013541d4 	movui	r4,54535
 2004084:	01401284 	movi	r5,74
 2004088:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD508,0x00);
 200408c:	01354214 	movui	r4,54536
 2004090:	000b883a 	mov	r5,zero
 2004094:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD509,0x5C);
 2004098:	01354254 	movui	r4,54537
 200409c:	01401704 	movi	r5,92
 20040a0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD50A,0x00);
 20040a4:	01354294 	movui	r4,54538
 20040a8:	000b883a 	mov	r5,zero
 20040ac:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD50B,0x81);
 20040b0:	013542d4 	movui	r4,54539
 20040b4:	01402044 	movi	r5,129
 20040b8:	20003ac0 	call	20003ac <LCD_WriteReg>

        LCD_WriteReg(0xD50C,0x00);
 20040bc:	01354314 	movui	r4,54540
 20040c0:	000b883a 	mov	r5,zero
 20040c4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD50D,0xA6);
 20040c8:	01354354 	movui	r4,54541
 20040cc:	01402984 	movi	r5,166
 20040d0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD50E,0x00);
 20040d4:	01354394 	movui	r4,54542
 20040d8:	000b883a 	mov	r5,zero
 20040dc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD50F,0xE5);
 20040e0:	013543d4 	movui	r4,54543
 20040e4:	01403944 	movi	r5,229
 20040e8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD510,0x01);
 20040ec:	01354414 	movui	r4,54544
 20040f0:	01400044 	movi	r5,1
 20040f4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD511,0x13);
 20040f8:	01354454 	movui	r4,54545
 20040fc:	014004c4 	movi	r5,19
 2004100:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD512,0x01);
 2004104:	01354494 	movui	r4,54546
 2004108:	01400044 	movi	r5,1
 200410c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD513,0x54);
 2004110:	013544d4 	movui	r4,54547
 2004114:	01401504 	movi	r5,84
 2004118:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD514,0x01);
 200411c:	01354514 	movui	r4,54548
 2004120:	01400044 	movi	r5,1
 2004124:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD515,0x82);
 2004128:	01354554 	movui	r4,54549
 200412c:	01402084 	movi	r5,130
 2004130:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD516,0x01);
 2004134:	01354594 	movui	r4,54550
 2004138:	01400044 	movi	r5,1
 200413c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD517,0xCA);
 2004140:	013545d4 	movui	r4,54551
 2004144:	01403284 	movi	r5,202
 2004148:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD518,0x02);
 200414c:	01354614 	movui	r4,54552
 2004150:	01400084 	movi	r5,2
 2004154:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD519,0x00);
 2004158:	01354654 	movui	r4,54553
 200415c:	000b883a 	mov	r5,zero
 2004160:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD51A,0x02);
 2004164:	01354694 	movui	r4,54554
 2004168:	01400084 	movi	r5,2
 200416c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD51B,0x01);
 2004170:	013546d4 	movui	r4,54555
 2004174:	01400044 	movi	r5,1
 2004178:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD51C,0x02);
 200417c:	01354714 	movui	r4,54556
 2004180:	01400084 	movi	r5,2
 2004184:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD51D,0x34);
 2004188:	01354754 	movui	r4,54557
 200418c:	01400d04 	movi	r5,52
 2004190:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD51E,0x02);
 2004194:	01354794 	movui	r4,54558
 2004198:	01400084 	movi	r5,2
 200419c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD51F,0x67);
 20041a0:	013547d4 	movui	r4,54559
 20041a4:	014019c4 	movi	r5,103
 20041a8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD520,0x02);
 20041ac:	01354814 	movui	r4,54560
 20041b0:	01400084 	movi	r5,2
 20041b4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD521,0x84);
 20041b8:	01354854 	movui	r4,54561
 20041bc:	01402104 	movi	r5,132
 20041c0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD522,0x02);
 20041c4:	01354894 	movui	r4,54562
 20041c8:	01400084 	movi	r5,2
 20041cc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD523,0xA4);
 20041d0:	013548d4 	movui	r4,54563
 20041d4:	01402904 	movi	r5,164
 20041d8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD524,0x02);
 20041dc:	01354914 	movui	r4,54564
 20041e0:	01400084 	movi	r5,2
 20041e4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD525,0xB7);
 20041e8:	01354954 	movui	r4,54565
 20041ec:	01402dc4 	movi	r5,183
 20041f0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD526,0x02);
 20041f4:	01354994 	movui	r4,54566
 20041f8:	01400084 	movi	r5,2
 20041fc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD527,0xCF);
 2004200:	013549d4 	movui	r4,54567
 2004204:	014033c4 	movi	r5,207
 2004208:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD528,0x02);
 200420c:	01354a14 	movui	r4,54568
 2004210:	01400084 	movi	r5,2
 2004214:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD529,0xDE);
 2004218:	01354a54 	movui	r4,54569
 200421c:	01403784 	movi	r5,222
 2004220:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD52A,0x02);
 2004224:	01354a94 	movui	r4,54570
 2004228:	01400084 	movi	r5,2
 200422c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD52B,0xF2);
 2004230:	01354ad4 	movui	r4,54571
 2004234:	01403c84 	movi	r5,242
 2004238:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD52C,0x02);
 200423c:	01354b14 	movui	r4,54572
 2004240:	01400084 	movi	r5,2
 2004244:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD52D,0xFE);
 2004248:	01354b54 	movui	r4,54573
 200424c:	01403f84 	movi	r5,254
 2004250:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD52E,0x03);
 2004254:	01354b94 	movui	r4,54574
 2004258:	014000c4 	movi	r5,3
 200425c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD52F,0x10);
 2004260:	01354bd4 	movui	r4,54575
 2004264:	01400404 	movi	r5,16
 2004268:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD530,0x03);
 200426c:	01354c14 	movui	r4,54576
 2004270:	014000c4 	movi	r5,3
 2004274:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD531,0x33);
 2004278:	01354c54 	movui	r4,54577
 200427c:	01400cc4 	movi	r5,51
 2004280:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD532,0x03);
 2004284:	01354c94 	movui	r4,54578
 2004288:	014000c4 	movi	r5,3
 200428c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD533,0x6D);
 2004290:	01354cd4 	movui	r4,54579
 2004294:	01401b44 	movi	r5,109
 2004298:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD600,0x00);
 200429c:	01358014 	movui	r4,54784
 20042a0:	000b883a 	mov	r5,zero
 20042a4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD601,0x33);
 20042a8:	01358054 	movui	r4,54785
 20042ac:	01400cc4 	movi	r5,51
 20042b0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD602,0x00);
 20042b4:	01358094 	movui	r4,54786
 20042b8:	000b883a 	mov	r5,zero
 20042bc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD603,0x34);
 20042c0:	013580d4 	movui	r4,54787
 20042c4:	01400d04 	movi	r5,52
 20042c8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD604,0x00);
 20042cc:	01358114 	movui	r4,54788
 20042d0:	000b883a 	mov	r5,zero
 20042d4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD605,0x3A);
 20042d8:	01358154 	movui	r4,54789
 20042dc:	01400e84 	movi	r5,58
 20042e0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD606,0x00);
 20042e4:	01358194 	movui	r4,54790
 20042e8:	000b883a 	mov	r5,zero
 20042ec:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD607,0x4A);
 20042f0:	013581d4 	movui	r4,54791
 20042f4:	01401284 	movi	r5,74
 20042f8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD608,0x00);
 20042fc:	01358214 	movui	r4,54792
 2004300:	000b883a 	mov	r5,zero
 2004304:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD609,0x5C);
 2004308:	01358254 	movui	r4,54793
 200430c:	01401704 	movi	r5,92
 2004310:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD60A,0x00);
 2004314:	01358294 	movui	r4,54794
 2004318:	000b883a 	mov	r5,zero
 200431c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD60B,0x81);
 2004320:	013582d4 	movui	r4,54795
 2004324:	01402044 	movi	r5,129
 2004328:	20003ac0 	call	20003ac <LCD_WriteReg>

        LCD_WriteReg(0xD60C,0x00);
 200432c:	01358314 	movui	r4,54796
 2004330:	000b883a 	mov	r5,zero
 2004334:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD60D,0xA6);
 2004338:	01358354 	movui	r4,54797
 200433c:	01402984 	movi	r5,166
 2004340:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD60E,0x00);
 2004344:	01358394 	movui	r4,54798
 2004348:	000b883a 	mov	r5,zero
 200434c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD60F,0xE5);
 2004350:	013583d4 	movui	r4,54799
 2004354:	01403944 	movi	r5,229
 2004358:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD610,0x01);
 200435c:	01358414 	movui	r4,54800
 2004360:	01400044 	movi	r5,1
 2004364:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD611,0x13);
 2004368:	01358454 	movui	r4,54801
 200436c:	014004c4 	movi	r5,19
 2004370:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD612,0x01);
 2004374:	01358494 	movui	r4,54802
 2004378:	01400044 	movi	r5,1
 200437c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD613,0x54);
 2004380:	013584d4 	movui	r4,54803
 2004384:	01401504 	movi	r5,84
 2004388:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD614,0x01);
 200438c:	01358514 	movui	r4,54804
 2004390:	01400044 	movi	r5,1
 2004394:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD615,0x82);
 2004398:	01358554 	movui	r4,54805
 200439c:	01402084 	movi	r5,130
 20043a0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD616,0x01);
 20043a4:	01358594 	movui	r4,54806
 20043a8:	01400044 	movi	r5,1
 20043ac:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD617,0xCA);
 20043b0:	013585d4 	movui	r4,54807
 20043b4:	01403284 	movi	r5,202
 20043b8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD618,0x02);
 20043bc:	01358614 	movui	r4,54808
 20043c0:	01400084 	movi	r5,2
 20043c4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD619,0x00);
 20043c8:	01358654 	movui	r4,54809
 20043cc:	000b883a 	mov	r5,zero
 20043d0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD61A,0x02);
 20043d4:	01358694 	movui	r4,54810
 20043d8:	01400084 	movi	r5,2
 20043dc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD61B,0x01);
 20043e0:	013586d4 	movui	r4,54811
 20043e4:	01400044 	movi	r5,1
 20043e8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD61C,0x02);
 20043ec:	01358714 	movui	r4,54812
 20043f0:	01400084 	movi	r5,2
 20043f4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD61D,0x34);
 20043f8:	01358754 	movui	r4,54813
 20043fc:	01400d04 	movi	r5,52
 2004400:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD61E,0x02);
 2004404:	01358794 	movui	r4,54814
 2004408:	01400084 	movi	r5,2
 200440c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD61F,0x67);
 2004410:	013587d4 	movui	r4,54815
 2004414:	014019c4 	movi	r5,103
 2004418:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD620,0x02);
 200441c:	01358814 	movui	r4,54816
 2004420:	01400084 	movi	r5,2
 2004424:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD621,0x84);
 2004428:	01358854 	movui	r4,54817
 200442c:	01402104 	movi	r5,132
 2004430:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD622,0x02);
 2004434:	01358894 	movui	r4,54818
 2004438:	01400084 	movi	r5,2
 200443c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD623,0xA4);
 2004440:	013588d4 	movui	r4,54819
 2004444:	01402904 	movi	r5,164
 2004448:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD624,0x02);
 200444c:	01358914 	movui	r4,54820
 2004450:	01400084 	movi	r5,2
 2004454:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD625,0xB7);
 2004458:	01358954 	movui	r4,54821
 200445c:	01402dc4 	movi	r5,183
 2004460:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD626,0x02);
 2004464:	01358994 	movui	r4,54822
 2004468:	01400084 	movi	r5,2
 200446c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD627,0xCF);
 2004470:	013589d4 	movui	r4,54823
 2004474:	014033c4 	movi	r5,207
 2004478:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD628,0x02);
 200447c:	01358a14 	movui	r4,54824
 2004480:	01400084 	movi	r5,2
 2004484:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD629,0xDE);
 2004488:	01358a54 	movui	r4,54825
 200448c:	01403784 	movi	r5,222
 2004490:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD62A,0x02);
 2004494:	01358a94 	movui	r4,54826
 2004498:	01400084 	movi	r5,2
 200449c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD62B,0xF2);
 20044a0:	01358ad4 	movui	r4,54827
 20044a4:	01403c84 	movi	r5,242
 20044a8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD62C,0x02);
 20044ac:	01358b14 	movui	r4,54828
 20044b0:	01400084 	movi	r5,2
 20044b4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD62D,0xFE);
 20044b8:	01358b54 	movui	r4,54829
 20044bc:	01403f84 	movi	r5,254
 20044c0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD62E,0x03);
 20044c4:	01358b94 	movui	r4,54830
 20044c8:	014000c4 	movi	r5,3
 20044cc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD62F,0x10);
 20044d0:	01358bd4 	movui	r4,54831
 20044d4:	01400404 	movi	r5,16
 20044d8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD630,0x03);
 20044dc:	01358c14 	movui	r4,54832
 20044e0:	014000c4 	movi	r5,3
 20044e4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD631,0x33);
 20044e8:	01358c54 	movui	r4,54833
 20044ec:	01400cc4 	movi	r5,51
 20044f0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD632,0x03);
 20044f4:	01358c94 	movui	r4,54834
 20044f8:	014000c4 	movi	r5,3
 20044fc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xD633,0x6D);
 2004500:	01358cd4 	movui	r4,54835
 2004504:	01401b44 	movi	r5,109
 2004508:	20003ac0 	call	20003ac <LCD_WriteReg>
        //LV2 Page 0 enable
        LCD_WriteReg(0xF000,0x55);
 200450c:	013c0014 	movui	r4,61440
 2004510:	01401544 	movi	r5,85
 2004514:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF001,0xAA);
 2004518:	013c0054 	movui	r4,61441
 200451c:	01402a84 	movi	r5,170
 2004520:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF002,0x52);
 2004524:	013c0094 	movui	r4,61442
 2004528:	01401484 	movi	r5,82
 200452c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF003,0x08);
 2004530:	013c00d4 	movui	r4,61443
 2004534:	01400204 	movi	r5,8
 2004538:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xF004,0x00);
 200453c:	013c0114 	movui	r4,61444
 2004540:	000b883a 	mov	r5,zero
 2004544:	20003ac0 	call	20003ac <LCD_WriteReg>
        //Display control
        LCD_WriteReg(0xB100, 0xCC);
 2004548:	012c4014 	movui	r4,45312
 200454c:	01403304 	movi	r5,204
 2004550:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x00);
 2004554:	012c4054 	movui	r4,45313
 2004558:	000b883a 	mov	r5,zero
 200455c:	20003ac0 	call	20003ac <LCD_WriteReg>
        //Source hold time
        LCD_WriteReg(0xB600,0x05);
 2004560:	012d8014 	movui	r4,46592
 2004564:	01400144 	movi	r5,5
 2004568:	20003ac0 	call	20003ac <LCD_WriteReg>
        //Gate EQ control
        LCD_WriteReg(0xB700,0x70);
 200456c:	012dc014 	movui	r4,46848
 2004570:	01401c04 	movi	r5,112
 2004574:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB701,0x70);
 2004578:	012dc054 	movui	r4,46849
 200457c:	01401c04 	movi	r5,112
 2004580:	20003ac0 	call	20003ac <LCD_WriteReg>
        //Source EQ control (Mode 2)
        LCD_WriteReg(0xB800,0x01);
 2004584:	012e0014 	movui	r4,47104
 2004588:	01400044 	movi	r5,1
 200458c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB801,0x03);
 2004590:	012e0054 	movui	r4,47105
 2004594:	014000c4 	movi	r5,3
 2004598:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB802,0x03);
 200459c:	012e0094 	movui	r4,47106
 20045a0:	014000c4 	movi	r5,3
 20045a4:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xB803,0x03);
 20045a8:	012e00d4 	movui	r4,47107
 20045ac:	014000c4 	movi	r5,3
 20045b0:	20003ac0 	call	20003ac <LCD_WriteReg>
        //Inversion mode (2-dot)
        LCD_WriteReg(0xBC00,0x02);
 20045b4:	012f0014 	movui	r4,48128
 20045b8:	01400084 	movi	r5,2
 20045bc:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBC01,0x00);
 20045c0:	012f0054 	movui	r4,48129
 20045c4:	000b883a 	mov	r5,zero
 20045c8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xBC02,0x00);
 20045cc:	012f0094 	movui	r4,48130
 20045d0:	000b883a 	mov	r5,zero
 20045d4:	20003ac0 	call	20003ac <LCD_WriteReg>
        //Timing control 4H w/ 4-delay
        LCD_WriteReg(0xC900,0xD0);
 20045d8:	01324014 	movui	r4,51456
 20045dc:	01403404 	movi	r5,208
 20045e0:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xC901,0x02);
 20045e4:	01324054 	movui	r4,51457
 20045e8:	01400084 	movi	r5,2
 20045ec:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xC902,0x50);
 20045f0:	01324094 	movui	r4,51458
 20045f4:	01401404 	movi	r5,80
 20045f8:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xC903,0x50);
 20045fc:	013240d4 	movui	r4,51459
 2004600:	01401404 	movi	r5,80
 2004604:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0xC904,0x50);
 2004608:	01324114 	movui	r4,51460
 200460c:	01401404 	movi	r5,80
 2004610:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0x3500,0x00);
 2004614:	010d4004 	movi	r4,13568
 2004618:	000b883a 	mov	r5,zero
 200461c:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 2004620:	010e8004 	movi	r4,14848
 2004624:	01401544 	movi	r5,85
 2004628:	20003ac0 	call	20003ac <LCD_WriteReg>
        LCD_WR_CMD(0x1100);
 200462c:	01044004 	movi	r4,4352
 2004630:	20002380 	call	2000238 <LCD_WR_CMD>
        usleep(120);
 2004634:	01001e04 	movi	r4,120
 2004638:	200ea200 	call	200ea20 <usleep>
        LCD_WR_CMD(0x2900);
 200463c:	010a4004 	movi	r4,10496
 2004640:	20002380 	call	2000238 <LCD_WR_CMD>
 2004644:	00007d06 	br	200483c <MCULCD_Init+0x2dfc>
    }else if(lcddev.id==0X1963) {
 2004648:	00808074 	movhi	r2,513
 200464c:	108e9f04 	addi	r2,r2,14972
 2004650:	10800217 	ldw	r2,8(r2)
 2004654:	108658d8 	cmpnei	r2,r2,6499
 2004658:	1000781e 	bne	r2,zero,200483c <MCULCD_Init+0x2dfc>
        LCD_WR_CMD(0xE2);     //Set PLL with OSC = 10MHz (hardware),  Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 200465c:	01003884 	movi	r4,226
 2004660:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x1D);    //参数1
 2004664:	01000744 	movi	r4,29
 2004668:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);    //参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 200466c:	01000084 	movi	r4,2
 2004670:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);    //参数3 Validate M and N values
 2004674:	01000104 	movi	r4,4
 2004678:	20002a80 	call	20002a8 <LCD_WR_DATA>
        usleep(100);
 200467c:	01001904 	movi	r4,100
 2004680:	200ea200 	call	200ea20 <usleep>
        LCD_WR_CMD(0xE0);     // Start PLL command
 2004684:	01003804 	movi	r4,224
 2004688:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);    // enable PLL
 200468c:	01000044 	movi	r4,1
 2004690:	20002a80 	call	20002a8 <LCD_WR_DATA>
        delay_ms(10);
 2004694:	01000284 	movi	r4,10
 2004698:	20002000 	call	2000200 <delay_ms>
        LCD_WR_CMD(0xE0);     // Start PLL command again
 200469c:	01003804 	movi	r4,224
 20046a0:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x03);    // now, use PLL output as system clock
 20046a4:	010000c4 	movi	r4,3
 20046a8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        delay_ms(12);
 20046ac:	01000304 	movi	r4,12
 20046b0:	20002000 	call	2000200 <delay_ms>
        LCD_WR_CMD(0x01);     //软复位
 20046b4:	01000044 	movi	r4,1
 20046b8:	20002380 	call	2000238 <LCD_WR_CMD>
        delay_ms(10);
 20046bc:	01000284 	movi	r4,10
 20046c0:	20002000 	call	2000200 <delay_ms>

        LCD_WR_CMD(0xE6);     //设置像素频率,33Mhz
 20046c4:	01003984 	movi	r4,230
 20046c8:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x2F);
 20046cc:	01000bc4 	movi	r4,47
 20046d0:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 20046d4:	01003fc4 	movi	r4,255
 20046d8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 20046dc:	01003fc4 	movi	r4,255
 20046e0:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB0);     //设置LCD模式
 20046e4:	01002c04 	movi	r4,176
 20046e8:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);    //24位模式
 20046ec:	01000804 	movi	r4,32
 20046f0:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);    //TFT 模式
 20046f4:	0009883a 	mov	r4,zero
 20046f8:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 20046fc:	010000c4 	movi	r4,3
 2004700:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 2004704:	0100c7c4 	movi	r4,799
 2004708:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 200470c:	01000044 	movi	r4,1
 2004710:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 2004714:	010077c4 	movi	r4,479
 2004718:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);    //RGB序列
 200471c:	0009883a 	mov	r4,zero
 2004720:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB4);     //Set horizontal period
 2004724:	01002d04 	movi	r4,180
 2004728:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA((SSD_HT-1)>>8);
 200472c:	01000104 	movi	r4,4
 2004730:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HT-1);
 2004734:	010107c4 	movi	r4,1055
 2004738:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS>>8);
 200473c:	0009883a 	mov	r4,zero
 2004740:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS);
 2004744:	01000b84 	movi	r4,46
 2004748:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 200474c:	0009883a 	mov	r4,zero
 2004750:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2004754:	0009883a 	mov	r4,zero
 2004758:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 200475c:	0009883a 	mov	r4,zero
 2004760:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 2004764:	0009883a 	mov	r4,zero
 2004768:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xB6);     //Set vertical period
 200476c:	01002d84 	movi	r4,182
 2004770:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA((SSD_VT-1)>>8);
 2004774:	01000084 	movi	r4,2
 2004778:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VT-1);
 200477c:	01008304 	movi	r4,524
 2004780:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS>>8);
 2004784:	0009883a 	mov	r4,zero
 2004788:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS);
 200478c:	010005c4 	movi	r4,23
 2004790:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 2004794:	01000544 	movi	r4,21
 2004798:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 200479c:	0009883a 	mov	r4,zero
 20047a0:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 20047a4:	0009883a 	mov	r4,zero
 20047a8:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xF0);    //设置SSD1963与CPU接口为16bit
 20047ac:	01003c04 	movi	r4,240
 20047b0:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x03);   //16-bit(565 format) data for 16bpp
 20047b4:	010000c4 	movi	r4,3
 20047b8:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0x29);    //开启显示
 20047bc:	01000a44 	movi	r4,41
 20047c0:	20002380 	call	2000238 <LCD_WR_CMD>
        //设置PWM输出  背光通过占空比可调
        LCD_WR_CMD(0xD0);    //设置自动白平衡DBC
 20047c4:	01003404 	movi	r4,208
 20047c8:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);   //disable
 20047cc:	0009883a 	mov	r4,zero
 20047d0:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xBE);    //配置PWM输出
 20047d4:	01002f84 	movi	r4,190
 20047d8:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x05);   //1设置PWM频率
 20047dc:	01000144 	movi	r4,5
 20047e0:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);   //2设置PWM占空比
 20047e4:	01003f84 	movi	r4,254
 20047e8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);   //3设置C
 20047ec:	01000044 	movi	r4,1
 20047f0:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);   //4设置D
 20047f4:	0009883a 	mov	r4,zero
 20047f8:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);   //5设置E
 20047fc:	0009883a 	mov	r4,zero
 2004800:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);   //6设置F
 2004804:	0009883a 	mov	r4,zero
 2004808:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_WR_CMD(0xB8);    //设置GPIO配置
 200480c:	01002e04 	movi	r4,184
 2004810:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x03);   //2个IO口设置成输出
 2004814:	010000c4 	movi	r4,3
 2004818:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);   //GPIO使用正常的IO功能
 200481c:	01000044 	movi	r4,1
 2004820:	20002a80 	call	20002a8 <LCD_WR_DATA>
        LCD_WR_CMD(0xBA);
 2004824:	01002e84 	movi	r4,186
 2004828:	20002380 	call	2000238 <LCD_WR_CMD>
        LCD_WR_DATA(0X01);   //GPIO[1:0]=01,控制LCD方向
 200482c:	01000044 	movi	r4,1
 2004830:	20002a80 	call	20002a8 <LCD_WR_DATA>

        LCD_SSD_BackLightSet(100);//背光设置为最亮
 2004834:	01001904 	movi	r4,100
 2004838:	20012880 	call	2001288 <LCD_SSD_BackLightSet>
    }
	LCD_Display_Dir(1);      //设置为横屏
 200483c:	01000044 	movi	r4,1
 2004840:	20013380 	call	2001338 <LCD_Display_Dir>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_MLCD_BL_BASE,1);    //点亮背光
 2004844:	00c00044 	movi	r3,1
 2004848:	00810034 	movhi	r2,1024
 200484c:	10881404 	addi	r2,r2,8272
 2004850:	10c00035 	stwio	r3,0(r2)
	//输出LCD ID
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LCD_ID_BASE,lcddev.id);
 2004854:	00808074 	movhi	r2,513
 2004858:	108e9f04 	addi	r2,r2,14972
 200485c:	10800217 	ldw	r2,8(r2)
 2004860:	1007883a 	mov	r3,r2
 2004864:	00810034 	movhi	r2,1024
 2004868:	10880004 	addi	r2,r2,8192
 200486c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LCD_INIT_DONE_BASE,1);    //初始化完成
 2004870:	00c00044 	movi	r3,1
 2004874:	00810034 	movhi	r2,1024
 2004878:	10880404 	addi	r2,r2,8208
 200487c:	10c00035 	stwio	r3,0(r2)
}
 2004880:	e037883a 	mov	sp,fp
 2004884:	dfc00217 	ldw	ra,8(sp)
 2004888:	df000117 	ldw	fp,4(sp)
 200488c:	dc000017 	ldw	r16,0(sp)
 2004890:	dec00304 	addi	sp,sp,12
 2004894:	f800283a 	ret

02004898 <LCD_Clear>:

//清屏函数
//color:要清屏的填充色
void LCD_Clear(u32 color)
{
 2004898:	defffb04 	addi	sp,sp,-20
 200489c:	dfc00415 	stw	ra,16(sp)
 20048a0:	df000315 	stw	fp,12(sp)
 20048a4:	df000304 	addi	fp,sp,12
 20048a8:	e13fff15 	stw	r4,-4(fp)
	u32 index=0;
 20048ac:	e03ffd15 	stw	zero,-12(fp)
	u32 totalpoint=lcddev.width;
 20048b0:	00808074 	movhi	r2,513
 20048b4:	108e9f04 	addi	r2,r2,14972
 20048b8:	10800017 	ldw	r2,0(r2)
 20048bc:	e0bffe15 	stw	r2,-8(fp)
	totalpoint*=lcddev.height;     //得到总点数
 20048c0:	00808074 	movhi	r2,513
 20048c4:	108e9f04 	addi	r2,r2,14972
 20048c8:	10800117 	ldw	r2,4(r2)
 20048cc:	e0fffe17 	ldw	r3,-8(fp)
 20048d0:	1885383a 	mul	r2,r3,r2
 20048d4:	e0bffe15 	stw	r2,-8(fp)
	LCD_SetCursor(0x00,0x0000);    //设置光标位置
 20048d8:	0009883a 	mov	r4,zero
 20048dc:	000b883a 	mov	r5,zero
 20048e0:	20007580 	call	2000758 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();        //开始写入GRAM
 20048e4:	20004240 	call	2000424 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++) {
 20048e8:	e03ffd15 	stw	zero,-12(fp)
 20048ec:	00000506 	br	2004904 <LCD_Clear+0x6c>
		LCD_WR_DATA(color);
 20048f0:	e13fff17 	ldw	r4,-4(fp)
 20048f4:	20002a80 	call	20002a8 <LCD_WR_DATA>
	u32 index=0;
	u32 totalpoint=lcddev.width;
	totalpoint*=lcddev.height;     //得到总点数
	LCD_SetCursor(0x00,0x0000);    //设置光标位置
	LCD_WriteRAM_Prepare();        //开始写入GRAM
	for(index=0;index<totalpoint;index++) {
 20048f8:	e0bffd17 	ldw	r2,-12(fp)
 20048fc:	10800044 	addi	r2,r2,1
 2004900:	e0bffd15 	stw	r2,-12(fp)
 2004904:	e0fffd17 	ldw	r3,-12(fp)
 2004908:	e0bffe17 	ldw	r2,-8(fp)
 200490c:	18bff836 	bltu	r3,r2,20048f0 <LCD_Clear+0x58>
		LCD_WR_DATA(color);
	}
}
 2004910:	e037883a 	mov	sp,fp
 2004914:	dfc00117 	ldw	ra,4(sp)
 2004918:	df000017 	ldw	fp,0(sp)
 200491c:	dec00204 	addi	sp,sp,8
 2004920:	f800283a 	ret

02004924 <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u32 color)
{
 2004924:	defff704 	addi	sp,sp,-36
 2004928:	dfc00815 	stw	ra,32(sp)
 200492c:	df000715 	stw	fp,28(sp)
 2004930:	df000704 	addi	fp,sp,28
 2004934:	e13ffc15 	stw	r4,-16(fp)
 2004938:	e17ffd15 	stw	r5,-12(fp)
 200493c:	e1bffe15 	stw	r6,-8(fp)
 2004940:	e1ffff15 	stw	r7,-4(fp)
	u16 i,j;
	u16 xlen=0;
 2004944:	e03ffb15 	stw	zero,-20(fp)
	xlen=ex-sx+1;
 2004948:	e0fffe17 	ldw	r3,-8(fp)
 200494c:	e0bffc17 	ldw	r2,-16(fp)
 2004950:	1885c83a 	sub	r2,r3,r2
 2004954:	10800044 	addi	r2,r2,1
 2004958:	e0bffb15 	stw	r2,-20(fp)
	for(i=sy;i<=ey;i++)
 200495c:	e0bffd17 	ldw	r2,-12(fp)
 2004960:	e0bff915 	stw	r2,-28(fp)
 2004964:	00001106 	br	20049ac <LCD_Fill+0x88>
	{
		LCD_SetCursor(sx,i);                    //设置光标位置
 2004968:	e13ffc17 	ldw	r4,-16(fp)
 200496c:	e17ff917 	ldw	r5,-28(fp)
 2004970:	20007580 	call	2000758 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();                 //开始写入GRAM
 2004974:	20004240 	call	2000424 <LCD_WriteRAM_Prepare>
		for(j=0;j<xlen;j++)LCD_WR_DATA(color);  //显示颜色
 2004978:	e03ffa15 	stw	zero,-24(fp)
 200497c:	00000506 	br	2004994 <LCD_Fill+0x70>
 2004980:	e1000217 	ldw	r4,8(fp)
 2004984:	20002a80 	call	20002a8 <LCD_WR_DATA>
 2004988:	e0bffa17 	ldw	r2,-24(fp)
 200498c:	10800044 	addi	r2,r2,1
 2004990:	e0bffa15 	stw	r2,-24(fp)
 2004994:	e0fffa17 	ldw	r3,-24(fp)
 2004998:	e0bffb17 	ldw	r2,-20(fp)
 200499c:	18bff836 	bltu	r3,r2,2004980 <LCD_Fill+0x5c>
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u32 color)
{
	u16 i,j;
	u16 xlen=0;
	xlen=ex-sx+1;
	for(i=sy;i<=ey;i++)
 20049a0:	e0bff917 	ldw	r2,-28(fp)
 20049a4:	10800044 	addi	r2,r2,1
 20049a8:	e0bff915 	stw	r2,-28(fp)
 20049ac:	e0bff917 	ldw	r2,-28(fp)
 20049b0:	e0ffff17 	ldw	r3,-4(fp)
 20049b4:	18bfec2e 	bgeu	r3,r2,2004968 <LCD_Fill+0x44>
	{
		LCD_SetCursor(sx,i);                    //设置光标位置
		LCD_WriteRAM_Prepare();                 //开始写入GRAM
		for(j=0;j<xlen;j++)LCD_WR_DATA(color);  //显示颜色
	}
}
 20049b8:	e037883a 	mov	sp,fp
 20049bc:	dfc00117 	ldw	ra,4(sp)
 20049c0:	df000017 	ldw	fp,0(sp)
 20049c4:	dec00204 	addi	sp,sp,8
 20049c8:	f800283a 	ret

020049cc <LCD_Color_Fill>:
//在指定区域内填充指定颜色块
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
{
 20049cc:	defff604 	addi	sp,sp,-40
 20049d0:	dfc00915 	stw	ra,36(sp)
 20049d4:	df000815 	stw	fp,32(sp)
 20049d8:	df000804 	addi	fp,sp,32
 20049dc:	e13ffc15 	stw	r4,-16(fp)
 20049e0:	e17ffd15 	stw	r5,-12(fp)
 20049e4:	e1bffe15 	stw	r6,-8(fp)
 20049e8:	e1ffff15 	stw	r7,-4(fp)
	u16 height,width;
	u16 i,j;
	width=ex-sx+1;         //得到填充的宽度
 20049ec:	e0fffe17 	ldw	r3,-8(fp)
 20049f0:	e0bffc17 	ldw	r2,-16(fp)
 20049f4:	1885c83a 	sub	r2,r3,r2
 20049f8:	10800044 	addi	r2,r2,1
 20049fc:	e0bffa15 	stw	r2,-24(fp)
	height=ey-sy+1;        //高度
 2004a00:	e0ffff17 	ldw	r3,-4(fp)
 2004a04:	e0bffd17 	ldw	r2,-12(fp)
 2004a08:	1885c83a 	sub	r2,r3,r2
 2004a0c:	10800044 	addi	r2,r2,1
 2004a10:	e0bffb15 	stw	r2,-20(fp)
	for(i=0;i<height;i++)
 2004a14:	e03ff815 	stw	zero,-32(fp)
 2004a18:	00001e06 	br	2004a94 <LCD_Color_Fill+0xc8>
	{
		LCD_SetCursor(sx,sy+i);     //设置光标位置
 2004a1c:	e0fffd17 	ldw	r3,-12(fp)
 2004a20:	e0bff817 	ldw	r2,-32(fp)
 2004a24:	1885883a 	add	r2,r3,r2
 2004a28:	e13ffc17 	ldw	r4,-16(fp)
 2004a2c:	100b883a 	mov	r5,r2
 2004a30:	20007580 	call	2000758 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     //开始写入GRAM
 2004a34:	20004240 	call	2000424 <LCD_WriteRAM_Prepare>
		for(j=0;j<width;j++)
 2004a38:	e03ff915 	stw	zero,-28(fp)
 2004a3c:	00000f06 	br	2004a7c <LCD_Color_Fill+0xb0>
			 LCD_WR_DATA(color[i*width+j]);//写入数据
 2004a40:	e0fff817 	ldw	r3,-32(fp)
 2004a44:	e0bffa17 	ldw	r2,-24(fp)
 2004a48:	1887383a 	mul	r3,r3,r2
 2004a4c:	e0bff917 	ldw	r2,-28(fp)
 2004a50:	1885883a 	add	r2,r3,r2
 2004a54:	1085883a 	add	r2,r2,r2
 2004a58:	1085883a 	add	r2,r2,r2
 2004a5c:	e0c00217 	ldw	r3,8(fp)
 2004a60:	1885883a 	add	r2,r3,r2
 2004a64:	10800017 	ldw	r2,0(r2)
 2004a68:	1009883a 	mov	r4,r2
 2004a6c:	20002a80 	call	20002a8 <LCD_WR_DATA>
	height=ey-sy+1;        //高度
	for(i=0;i<height;i++)
	{
		LCD_SetCursor(sx,sy+i);     //设置光标位置
		LCD_WriteRAM_Prepare();     //开始写入GRAM
		for(j=0;j<width;j++)
 2004a70:	e0bff917 	ldw	r2,-28(fp)
 2004a74:	10800044 	addi	r2,r2,1
 2004a78:	e0bff915 	stw	r2,-28(fp)
 2004a7c:	e0fff917 	ldw	r3,-28(fp)
 2004a80:	e0bffa17 	ldw	r2,-24(fp)
 2004a84:	18bfee36 	bltu	r3,r2,2004a40 <LCD_Color_Fill+0x74>
{
	u16 height,width;
	u16 i,j;
	width=ex-sx+1;         //得到填充的宽度
	height=ey-sy+1;        //高度
	for(i=0;i<height;i++)
 2004a88:	e0bff817 	ldw	r2,-32(fp)
 2004a8c:	10800044 	addi	r2,r2,1
 2004a90:	e0bff815 	stw	r2,-32(fp)
 2004a94:	e0fff817 	ldw	r3,-32(fp)
 2004a98:	e0bffb17 	ldw	r2,-20(fp)
 2004a9c:	18bfdf36 	bltu	r3,r2,2004a1c <LCD_Color_Fill+0x50>
		LCD_SetCursor(sx,sy+i);     //设置光标位置
		LCD_WriteRAM_Prepare();     //开始写入GRAM
		for(j=0;j<width;j++)
			 LCD_WR_DATA(color[i*width+j]);//写入数据
	}
}
 2004aa0:	e037883a 	mov	sp,fp
 2004aa4:	dfc00117 	ldw	ra,4(sp)
 2004aa8:	df000017 	ldw	fp,0(sp)
 2004aac:	dec00204 	addi	sp,sp,8
 2004ab0:	f800283a 	ret

02004ab4 <LCD_DrawLine>:

//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 2004ab4:	defff004 	addi	sp,sp,-64
 2004ab8:	dfc00f15 	stw	ra,60(sp)
 2004abc:	df000e15 	stw	fp,56(sp)
 2004ac0:	df000e04 	addi	fp,sp,56
 2004ac4:	e13ffc15 	stw	r4,-16(fp)
 2004ac8:	e17ffd15 	stw	r5,-12(fp)
 2004acc:	e1bffe15 	stw	r6,-8(fp)
 2004ad0:	e1ffff15 	stw	r7,-4(fp)
	 u16 t;
	 int xerr=0,yerr=0,delta_x,delta_y,distance;
 2004ad4:	e03ff315 	stw	zero,-52(fp)
 2004ad8:	e03ff415 	stw	zero,-48(fp)
	 int incx,incy,uRow,uCol;
	 delta_x=x2-x1; //计算坐标增量
 2004adc:	e0fffe17 	ldw	r3,-8(fp)
 2004ae0:	e0bffc17 	ldw	r2,-16(fp)
 2004ae4:	1885c83a 	sub	r2,r3,r2
 2004ae8:	e0bff515 	stw	r2,-44(fp)
	 delta_y=y2-y1;
 2004aec:	e0ffff17 	ldw	r3,-4(fp)
 2004af0:	e0bffd17 	ldw	r2,-12(fp)
 2004af4:	1885c83a 	sub	r2,r3,r2
 2004af8:	e0bff615 	stw	r2,-40(fp)
	 uRow=x1;
 2004afc:	e0bffc17 	ldw	r2,-16(fp)
 2004b00:	e0bffa15 	stw	r2,-24(fp)
	 uCol=y1;
 2004b04:	e0bffd17 	ldw	r2,-12(fp)
 2004b08:	e0bffb15 	stw	r2,-20(fp)
	 if(delta_x>0)
 2004b0c:	e0bff517 	ldw	r2,-44(fp)
 2004b10:	0080030e 	bge	zero,r2,2004b20 <LCD_DrawLine+0x6c>
		  incx=1;  //设置单步方向
 2004b14:	00800044 	movi	r2,1
 2004b18:	e0bff815 	stw	r2,-32(fp)
 2004b1c:	00000906 	br	2004b44 <LCD_DrawLine+0x90>
	 else if(delta_x==0)
 2004b20:	e0bff517 	ldw	r2,-44(fp)
 2004b24:	1000021e 	bne	r2,zero,2004b30 <LCD_DrawLine+0x7c>
		  incx=0;  //垂直线
 2004b28:	e03ff815 	stw	zero,-32(fp)
 2004b2c:	00000506 	br	2004b44 <LCD_DrawLine+0x90>
	 else {incx=-1;delta_x=-delta_x;}
 2004b30:	00bfffc4 	movi	r2,-1
 2004b34:	e0bff815 	stw	r2,-32(fp)
 2004b38:	e0bff517 	ldw	r2,-44(fp)
 2004b3c:	0085c83a 	sub	r2,zero,r2
 2004b40:	e0bff515 	stw	r2,-44(fp)
	 if(delta_y>0)
 2004b44:	e0bff617 	ldw	r2,-40(fp)
 2004b48:	0080030e 	bge	zero,r2,2004b58 <LCD_DrawLine+0xa4>
		  incy=1;
 2004b4c:	00800044 	movi	r2,1
 2004b50:	e0bff915 	stw	r2,-28(fp)
 2004b54:	00000906 	br	2004b7c <LCD_DrawLine+0xc8>
	 else if(delta_y==0)
 2004b58:	e0bff617 	ldw	r2,-40(fp)
 2004b5c:	1000021e 	bne	r2,zero,2004b68 <LCD_DrawLine+0xb4>
		  incy=0;  //水平线
 2004b60:	e03ff915 	stw	zero,-28(fp)
 2004b64:	00000506 	br	2004b7c <LCD_DrawLine+0xc8>
	 else {incy=-1;delta_y=-delta_y;}
 2004b68:	00bfffc4 	movi	r2,-1
 2004b6c:	e0bff915 	stw	r2,-28(fp)
 2004b70:	e0bff617 	ldw	r2,-40(fp)
 2004b74:	0085c83a 	sub	r2,zero,r2
 2004b78:	e0bff615 	stw	r2,-40(fp)
	 if(delta_x>delta_y)
 2004b7c:	e0bff517 	ldw	r2,-44(fp)
 2004b80:	e0fff617 	ldw	r3,-40(fp)
 2004b84:	1880030e 	bge	r3,r2,2004b94 <LCD_DrawLine+0xe0>
		  distance=delta_x;         //选取基本增量坐标轴
 2004b88:	e0bff517 	ldw	r2,-44(fp)
 2004b8c:	e0bff715 	stw	r2,-36(fp)
 2004b90:	00000206 	br	2004b9c <LCD_DrawLine+0xe8>
	 else distance=delta_y;
 2004b94:	e0bff617 	ldw	r2,-40(fp)
 2004b98:	e0bff715 	stw	r2,-36(fp)
	 for(t=0;t<=distance+1;t++ )    //画线输出
 2004b9c:	e03ff215 	stw	zero,-56(fp)
 2004ba0:	00002606 	br	2004c3c <LCD_DrawLine+0x188>
	 {
		  LCD_DrawPoint(uRow,uCol); //画点
 2004ba4:	e0fffa17 	ldw	r3,-24(fp)
 2004ba8:	e0bffb17 	ldw	r2,-20(fp)
 2004bac:	1809883a 	mov	r4,r3
 2004bb0:	100b883a 	mov	r5,r2
 2004bb4:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
		  xerr+=delta_x ;
 2004bb8:	e0fff317 	ldw	r3,-52(fp)
 2004bbc:	e0bff517 	ldw	r2,-44(fp)
 2004bc0:	1885883a 	add	r2,r3,r2
 2004bc4:	e0bff315 	stw	r2,-52(fp)
		  yerr+=delta_y ;
 2004bc8:	e0fff417 	ldw	r3,-48(fp)
 2004bcc:	e0bff617 	ldw	r2,-40(fp)
 2004bd0:	1885883a 	add	r2,r3,r2
 2004bd4:	e0bff415 	stw	r2,-48(fp)
		  if(xerr>distance)
 2004bd8:	e0bff317 	ldw	r2,-52(fp)
 2004bdc:	e0fff717 	ldw	r3,-36(fp)
 2004be0:	1880080e 	bge	r3,r2,2004c04 <LCD_DrawLine+0x150>
		  {
			   xerr-=distance;
 2004be4:	e0fff317 	ldw	r3,-52(fp)
 2004be8:	e0bff717 	ldw	r2,-36(fp)
 2004bec:	1885c83a 	sub	r2,r3,r2
 2004bf0:	e0bff315 	stw	r2,-52(fp)
			   uRow+=incx;
 2004bf4:	e0fffa17 	ldw	r3,-24(fp)
 2004bf8:	e0bff817 	ldw	r2,-32(fp)
 2004bfc:	1885883a 	add	r2,r3,r2
 2004c00:	e0bffa15 	stw	r2,-24(fp)
		  }
		  if(yerr>distance)
 2004c04:	e0bff417 	ldw	r2,-48(fp)
 2004c08:	e0fff717 	ldw	r3,-36(fp)
 2004c0c:	1880080e 	bge	r3,r2,2004c30 <LCD_DrawLine+0x17c>
		  {
			   yerr-=distance;
 2004c10:	e0fff417 	ldw	r3,-48(fp)
 2004c14:	e0bff717 	ldw	r2,-36(fp)
 2004c18:	1885c83a 	sub	r2,r3,r2
 2004c1c:	e0bff415 	stw	r2,-48(fp)
			   uCol+=incy;
 2004c20:	e0fffb17 	ldw	r3,-20(fp)
 2004c24:	e0bff917 	ldw	r2,-28(fp)
 2004c28:	1885883a 	add	r2,r3,r2
 2004c2c:	e0bffb15 	stw	r2,-20(fp)
		  incy=0;  //水平线
	 else {incy=-1;delta_y=-delta_y;}
	 if(delta_x>delta_y)
		  distance=delta_x;         //选取基本增量坐标轴
	 else distance=delta_y;
	 for(t=0;t<=distance+1;t++ )    //画线输出
 2004c30:	e0bff217 	ldw	r2,-56(fp)
 2004c34:	10800044 	addi	r2,r2,1
 2004c38:	e0bff215 	stw	r2,-56(fp)
 2004c3c:	e0bff717 	ldw	r2,-36(fp)
 2004c40:	10800044 	addi	r2,r2,1
 2004c44:	1007883a 	mov	r3,r2
 2004c48:	e0bff217 	ldw	r2,-56(fp)
 2004c4c:	18bfd52e 	bgeu	r3,r2,2004ba4 <LCD_DrawLine+0xf0>
		  {
			   yerr-=distance;
			   uCol+=incy;
		  }
	 }
}
 2004c50:	e037883a 	mov	sp,fp
 2004c54:	dfc00117 	ldw	ra,4(sp)
 2004c58:	df000017 	ldw	fp,0(sp)
 2004c5c:	dec00204 	addi	sp,sp,8
 2004c60:	f800283a 	ret

02004c64 <LCD_DrawRectangle>:

//画矩形
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 2004c64:	defffa04 	addi	sp,sp,-24
 2004c68:	dfc00515 	stw	ra,20(sp)
 2004c6c:	df000415 	stw	fp,16(sp)
 2004c70:	df000404 	addi	fp,sp,16
 2004c74:	e13ffc15 	stw	r4,-16(fp)
 2004c78:	e17ffd15 	stw	r5,-12(fp)
 2004c7c:	e1bffe15 	stw	r6,-8(fp)
 2004c80:	e1ffff15 	stw	r7,-4(fp)
    LCD_DrawLine(x1,y1,x2,y1);
 2004c84:	e13ffc17 	ldw	r4,-16(fp)
 2004c88:	e17ffd17 	ldw	r5,-12(fp)
 2004c8c:	e1bffe17 	ldw	r6,-8(fp)
 2004c90:	e1fffd17 	ldw	r7,-12(fp)
 2004c94:	2004ab40 	call	2004ab4 <LCD_DrawLine>
    LCD_DrawLine(x1,y1,x1,y2);
 2004c98:	e13ffc17 	ldw	r4,-16(fp)
 2004c9c:	e17ffd17 	ldw	r5,-12(fp)
 2004ca0:	e1bffc17 	ldw	r6,-16(fp)
 2004ca4:	e1ffff17 	ldw	r7,-4(fp)
 2004ca8:	2004ab40 	call	2004ab4 <LCD_DrawLine>
    LCD_DrawLine(x1,y2,x2,y2);
 2004cac:	e13ffc17 	ldw	r4,-16(fp)
 2004cb0:	e17fff17 	ldw	r5,-4(fp)
 2004cb4:	e1bffe17 	ldw	r6,-8(fp)
 2004cb8:	e1ffff17 	ldw	r7,-4(fp)
 2004cbc:	2004ab40 	call	2004ab4 <LCD_DrawLine>
    LCD_DrawLine(x2,y1,x2,y2);
 2004cc0:	e13ffe17 	ldw	r4,-8(fp)
 2004cc4:	e17ffd17 	ldw	r5,-12(fp)
 2004cc8:	e1bffe17 	ldw	r6,-8(fp)
 2004ccc:	e1ffff17 	ldw	r7,-4(fp)
 2004cd0:	2004ab40 	call	2004ab4 <LCD_DrawLine>
}
 2004cd4:	e037883a 	mov	sp,fp
 2004cd8:	dfc00117 	ldw	ra,4(sp)
 2004cdc:	df000017 	ldw	fp,0(sp)
 2004ce0:	dec00204 	addi	sp,sp,8
 2004ce4:	f800283a 	ret

02004ce8 <LCD_Draw_Circle>:

//在指定位置画一个指定大小的圆
//(x,y):中心点
//r    :半径
void LCD_Draw_Circle(u16 x0,u16 y0,u8 r)
{
 2004ce8:	defff804 	addi	sp,sp,-32
 2004cec:	dfc00715 	stw	ra,28(sp)
 2004cf0:	df000615 	stw	fp,24(sp)
 2004cf4:	df000604 	addi	fp,sp,24
 2004cf8:	e13ffd15 	stw	r4,-12(fp)
 2004cfc:	e17ffe15 	stw	r5,-8(fp)
 2004d00:	3005883a 	mov	r2,r6
 2004d04:	e0bfff05 	stb	r2,-4(fp)
    int a,b;
    int di;
    a=0;b=r;
 2004d08:	e03ffa15 	stw	zero,-24(fp)
 2004d0c:	e0bfff03 	ldbu	r2,-4(fp)
 2004d10:	e0bffb15 	stw	r2,-20(fp)
    di=3-(r<<1);             //判断下个点位置的标志
 2004d14:	e0bfff03 	ldbu	r2,-4(fp)
 2004d18:	1085883a 	add	r2,r2,r2
 2004d1c:	00c000c4 	movi	r3,3
 2004d20:	1885c83a 	sub	r2,r3,r2
 2004d24:	e0bffc15 	stw	r2,-16(fp)
    while(a<=b) {
 2004d28:	00006106 	br	2004eb0 <LCD_Draw_Circle+0x1c8>
        LCD_DrawPoint(x0+a,y0-b);             //5
 2004d2c:	e0fffa17 	ldw	r3,-24(fp)
 2004d30:	e0bffd17 	ldw	r2,-12(fp)
 2004d34:	1887883a 	add	r3,r3,r2
 2004d38:	e0bffb17 	ldw	r2,-20(fp)
 2004d3c:	e13ffe17 	ldw	r4,-8(fp)
 2004d40:	2085c83a 	sub	r2,r4,r2
 2004d44:	1809883a 	mov	r4,r3
 2004d48:	100b883a 	mov	r5,r2
 2004d4c:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        LCD_DrawPoint(x0+b,y0-a);             //0
 2004d50:	e0fffb17 	ldw	r3,-20(fp)
 2004d54:	e0bffd17 	ldw	r2,-12(fp)
 2004d58:	1887883a 	add	r3,r3,r2
 2004d5c:	e0bffa17 	ldw	r2,-24(fp)
 2004d60:	e13ffe17 	ldw	r4,-8(fp)
 2004d64:	2085c83a 	sub	r2,r4,r2
 2004d68:	1809883a 	mov	r4,r3
 2004d6c:	100b883a 	mov	r5,r2
 2004d70:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        LCD_DrawPoint(x0+b,y0+a);             //4
 2004d74:	e0fffb17 	ldw	r3,-20(fp)
 2004d78:	e0bffd17 	ldw	r2,-12(fp)
 2004d7c:	1887883a 	add	r3,r3,r2
 2004d80:	e13ffa17 	ldw	r4,-24(fp)
 2004d84:	e0bffe17 	ldw	r2,-8(fp)
 2004d88:	2085883a 	add	r2,r4,r2
 2004d8c:	1809883a 	mov	r4,r3
 2004d90:	100b883a 	mov	r5,r2
 2004d94:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        LCD_DrawPoint(x0+a,y0+b);             //6
 2004d98:	e0fffa17 	ldw	r3,-24(fp)
 2004d9c:	e0bffd17 	ldw	r2,-12(fp)
 2004da0:	1887883a 	add	r3,r3,r2
 2004da4:	e13ffb17 	ldw	r4,-20(fp)
 2004da8:	e0bffe17 	ldw	r2,-8(fp)
 2004dac:	2085883a 	add	r2,r4,r2
 2004db0:	1809883a 	mov	r4,r3
 2004db4:	100b883a 	mov	r5,r2
 2004db8:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        LCD_DrawPoint(x0-a,y0+b);             //1
 2004dbc:	e0bffa17 	ldw	r2,-24(fp)
 2004dc0:	e0fffd17 	ldw	r3,-12(fp)
 2004dc4:	1887c83a 	sub	r3,r3,r2
 2004dc8:	e13ffb17 	ldw	r4,-20(fp)
 2004dcc:	e0bffe17 	ldw	r2,-8(fp)
 2004dd0:	2085883a 	add	r2,r4,r2
 2004dd4:	1809883a 	mov	r4,r3
 2004dd8:	100b883a 	mov	r5,r2
 2004ddc:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        LCD_DrawPoint(x0-b,y0+a);
 2004de0:	e0bffb17 	ldw	r2,-20(fp)
 2004de4:	e0fffd17 	ldw	r3,-12(fp)
 2004de8:	1887c83a 	sub	r3,r3,r2
 2004dec:	e13ffa17 	ldw	r4,-24(fp)
 2004df0:	e0bffe17 	ldw	r2,-8(fp)
 2004df4:	2085883a 	add	r2,r4,r2
 2004df8:	1809883a 	mov	r4,r3
 2004dfc:	100b883a 	mov	r5,r2
 2004e00:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        LCD_DrawPoint(x0-a,y0-b);             //2
 2004e04:	e0bffa17 	ldw	r2,-24(fp)
 2004e08:	e0fffd17 	ldw	r3,-12(fp)
 2004e0c:	1887c83a 	sub	r3,r3,r2
 2004e10:	e0bffb17 	ldw	r2,-20(fp)
 2004e14:	e13ffe17 	ldw	r4,-8(fp)
 2004e18:	2085c83a 	sub	r2,r4,r2
 2004e1c:	1809883a 	mov	r4,r3
 2004e20:	100b883a 	mov	r5,r2
 2004e24:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        LCD_DrawPoint(x0-b,y0-a);             //7
 2004e28:	e0bffb17 	ldw	r2,-20(fp)
 2004e2c:	e0fffd17 	ldw	r3,-12(fp)
 2004e30:	1887c83a 	sub	r3,r3,r2
 2004e34:	e0bffa17 	ldw	r2,-24(fp)
 2004e38:	e13ffe17 	ldw	r4,-8(fp)
 2004e3c:	2085c83a 	sub	r2,r4,r2
 2004e40:	1809883a 	mov	r4,r3
 2004e44:	100b883a 	mov	r5,r2
 2004e48:	2000fc40 	call	2000fc4 <LCD_DrawPoint>
        a++;
 2004e4c:	e0bffa17 	ldw	r2,-24(fp)
 2004e50:	10800044 	addi	r2,r2,1
 2004e54:	e0bffa15 	stw	r2,-24(fp)
        //使用Bresenham算法画圆
        if(di<0)di +=4*a+6;
 2004e58:	e0bffc17 	ldw	r2,-16(fp)
 2004e5c:	1000080e 	bge	r2,zero,2004e80 <LCD_Draw_Circle+0x198>
 2004e60:	e0bffa17 	ldw	r2,-24(fp)
 2004e64:	1085883a 	add	r2,r2,r2
 2004e68:	1085883a 	add	r2,r2,r2
 2004e6c:	10800184 	addi	r2,r2,6
 2004e70:	e0fffc17 	ldw	r3,-16(fp)
 2004e74:	1885883a 	add	r2,r3,r2
 2004e78:	e0bffc15 	stw	r2,-16(fp)
 2004e7c:	00000c06 	br	2004eb0 <LCD_Draw_Circle+0x1c8>
        else {
            di+=10+4*(a-b);
 2004e80:	e0fffa17 	ldw	r3,-24(fp)
 2004e84:	e0bffb17 	ldw	r2,-20(fp)
 2004e88:	1885c83a 	sub	r2,r3,r2
 2004e8c:	1085883a 	add	r2,r2,r2
 2004e90:	1085883a 	add	r2,r2,r2
 2004e94:	10800284 	addi	r2,r2,10
 2004e98:	e0fffc17 	ldw	r3,-16(fp)
 2004e9c:	1885883a 	add	r2,r3,r2
 2004ea0:	e0bffc15 	stw	r2,-16(fp)
            b--;
 2004ea4:	e0bffb17 	ldw	r2,-20(fp)
 2004ea8:	10bfffc4 	addi	r2,r2,-1
 2004eac:	e0bffb15 	stw	r2,-20(fp)
{
    int a,b;
    int di;
    a=0;b=r;
    di=3-(r<<1);             //判断下个点位置的标志
    while(a<=b) {
 2004eb0:	e0bffa17 	ldw	r2,-24(fp)
 2004eb4:	e0fffb17 	ldw	r3,-20(fp)
 2004eb8:	18bf9c0e 	bge	r3,r2,2004d2c <LCD_Draw_Circle+0x44>
        else {
            di+=10+4*(a-b);
            b--;
        }
    }
}
 2004ebc:	e037883a 	mov	sp,fp
 2004ec0:	dfc00117 	ldw	ra,4(sp)
 2004ec4:	df000017 	ldw	fp,0(sp)
 2004ec8:	dec00204 	addi	sp,sp,8
 2004ecc:	f800283a 	ret

02004ed0 <LCD_Pow>:

//m^n函数
//返回值:m^n次方.
u32 LCD_Pow(u8 m,u8 n)
{
 2004ed0:	defffc04 	addi	sp,sp,-16
 2004ed4:	df000315 	stw	fp,12(sp)
 2004ed8:	df000304 	addi	fp,sp,12
 2004edc:	2007883a 	mov	r3,r4
 2004ee0:	2805883a 	mov	r2,r5
 2004ee4:	e0fffe05 	stb	r3,-8(fp)
 2004ee8:	e0bfff05 	stb	r2,-4(fp)
    u32 result=1;
 2004eec:	00800044 	movi	r2,1
 2004ef0:	e0bffd15 	stw	r2,-12(fp)
    while(n--)
 2004ef4:	00000406 	br	2004f08 <LCD_Pow+0x38>
        result*=m;
 2004ef8:	e0bffe03 	ldbu	r2,-8(fp)
 2004efc:	e0fffd17 	ldw	r3,-12(fp)
 2004f00:	1885383a 	mul	r2,r3,r2
 2004f04:	e0bffd15 	stw	r2,-12(fp)
//m^n函数
//返回值:m^n次方.
u32 LCD_Pow(u8 m,u8 n)
{
    u32 result=1;
    while(n--)
 2004f08:	e0bfff03 	ldbu	r2,-4(fp)
 2004f0c:	1004c03a 	cmpne	r2,r2,zero
 2004f10:	e0ffff03 	ldbu	r3,-4(fp)
 2004f14:	18ffffc4 	addi	r3,r3,-1
 2004f18:	e0ffff05 	stb	r3,-4(fp)
 2004f1c:	10803fcc 	andi	r2,r2,255
 2004f20:	103ff51e 	bne	r2,zero,2004ef8 <LCD_Pow+0x28>
        result*=m;
    return result;
 2004f24:	e0bffd17 	ldw	r2,-12(fp)
}
 2004f28:	e037883a 	mov	sp,fp
 2004f2c:	df000017 	ldw	fp,0(sp)
 2004f30:	dec00104 	addi	sp,sp,4
 2004f34:	f800283a 	ret

02004f38 <LCD_DisplayPic>:

//x,y:起点坐标
//size:图片大小
//LCD显示图片
void LCD_DisplayPic(u16 x,u16 y,u32 size,const u8 *pic)
{
 2004f38:	defff904 	addi	sp,sp,-28
 2004f3c:	dfc00615 	stw	ra,24(sp)
 2004f40:	df000515 	stw	fp,20(sp)
 2004f44:	df000504 	addi	fp,sp,20
 2004f48:	e13ffc15 	stw	r4,-16(fp)
 2004f4c:	e17ffd15 	stw	r5,-12(fp)
 2004f50:	e1bffe15 	stw	r6,-8(fp)
 2004f54:	e1ffff15 	stw	r7,-4(fp)
    u32 i;
    LCD_SetCursor(x, y);
 2004f58:	e13ffc17 	ldw	r4,-16(fp)
 2004f5c:	e17ffd17 	ldw	r5,-12(fp)
 2004f60:	20007580 	call	2000758 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();     //开始写入GRAM
 2004f64:	20004240 	call	2000424 <LCD_WriteRAM_Prepare>
    for(i=0; i < size; i++)
 2004f68:	e03ffb15 	stw	zero,-20(fp)
 2004f6c:	00001406 	br	2004fc0 <LCD_DisplayPic+0x88>
       LCD_WR_DATA(pic[i*2]<<8 | pic[i*2+1]);
 2004f70:	e0bffb17 	ldw	r2,-20(fp)
 2004f74:	1085883a 	add	r2,r2,r2
 2004f78:	e0ffff17 	ldw	r3,-4(fp)
 2004f7c:	1885883a 	add	r2,r3,r2
 2004f80:	10800003 	ldbu	r2,0(r2)
 2004f84:	10803fcc 	andi	r2,r2,255
 2004f88:	1006923a 	slli	r3,r2,8
 2004f8c:	e0bffb17 	ldw	r2,-20(fp)
 2004f90:	1085883a 	add	r2,r2,r2
 2004f94:	10800044 	addi	r2,r2,1
 2004f98:	e13fff17 	ldw	r4,-4(fp)
 2004f9c:	2085883a 	add	r2,r4,r2
 2004fa0:	10800003 	ldbu	r2,0(r2)
 2004fa4:	10803fcc 	andi	r2,r2,255
 2004fa8:	1884b03a 	or	r2,r3,r2
 2004fac:	1009883a 	mov	r4,r2
 2004fb0:	20002a80 	call	20002a8 <LCD_WR_DATA>
void LCD_DisplayPic(u16 x,u16 y,u32 size,const u8 *pic)
{
    u32 i;
    LCD_SetCursor(x, y);
    LCD_WriteRAM_Prepare();     //开始写入GRAM
    for(i=0; i < size; i++)
 2004fb4:	e0bffb17 	ldw	r2,-20(fp)
 2004fb8:	10800044 	addi	r2,r2,1
 2004fbc:	e0bffb15 	stw	r2,-20(fp)
 2004fc0:	e0fffb17 	ldw	r3,-20(fp)
 2004fc4:	e0bffe17 	ldw	r2,-8(fp)
 2004fc8:	18bfe936 	bltu	r3,r2,2004f70 <LCD_DisplayPic+0x38>
       LCD_WR_DATA(pic[i*2]<<8 | pic[i*2+1]);
}
 2004fcc:	e037883a 	mov	sp,fp
 2004fd0:	dfc00117 	ldw	ra,4(sp)
 2004fd4:	df000017 	ldw	fp,0(sp)
 2004fd8:	dec00204 	addi	sp,sp,8
 2004fdc:	f800283a 	ret

02004fe0 <main>:
#include <stdio.h>
#include "unistd.h"
#include "./driver/mculcd.h"

int main()
{
 2004fe0:	defffe04 	addi	sp,sp,-8
 2004fe4:	dfc00115 	stw	ra,4(sp)
 2004fe8:	df000015 	stw	fp,0(sp)
 2004fec:	d839883a 	mov	fp,sp
	MCULCD_Init();              //LCD初始化
 2004ff0:	2001a400 	call	2001a40 <MCULCD_Init>
    return 0;
 2004ff4:	0005883a 	mov	r2,zero

}
 2004ff8:	e037883a 	mov	sp,fp
 2004ffc:	dfc00117 	ldw	ra,4(sp)
 2005000:	df000017 	ldw	fp,0(sp)
 2005004:	dec00204 	addi	sp,sp,8
 2005008:	f800283a 	ret

0200500c <__fixunsdfsi>:
 200500c:	defffd04 	addi	sp,sp,-12
 2005010:	000d883a 	mov	r6,zero
 2005014:	01d07834 	movhi	r7,16864
 2005018:	dc400115 	stw	r17,4(sp)
 200501c:	dc000015 	stw	r16,0(sp)
 2005020:	dfc00215 	stw	ra,8(sp)
 2005024:	2023883a 	mov	r17,r4
 2005028:	2821883a 	mov	r16,r5
 200502c:	200577c0 	call	200577c <__gedf2>
 2005030:	1000080e 	bge	r2,zero,2005054 <__fixunsdfsi+0x48>
 2005034:	8809883a 	mov	r4,r17
 2005038:	800b883a 	mov	r5,r16
 200503c:	20058b40 	call	20058b4 <__fixdfsi>
 2005040:	dfc00217 	ldw	ra,8(sp)
 2005044:	dc400117 	ldw	r17,4(sp)
 2005048:	dc000017 	ldw	r16,0(sp)
 200504c:	dec00304 	addi	sp,sp,12
 2005050:	f800283a 	ret
 2005054:	000d883a 	mov	r6,zero
 2005058:	01d07834 	movhi	r7,16864
 200505c:	8809883a 	mov	r4,r17
 2005060:	800b883a 	mov	r5,r16
 2005064:	20054380 	call	2005438 <__subdf3>
 2005068:	180b883a 	mov	r5,r3
 200506c:	1009883a 	mov	r4,r2
 2005070:	20058b40 	call	20058b4 <__fixdfsi>
 2005074:	00e00034 	movhi	r3,32768
 2005078:	10c5883a 	add	r2,r2,r3
 200507c:	dfc00217 	ldw	ra,8(sp)
 2005080:	dc400117 	ldw	r17,4(sp)
 2005084:	dc000017 	ldw	r16,0(sp)
 2005088:	dec00304 	addi	sp,sp,12
 200508c:	f800283a 	ret

02005090 <_fpadd_parts>:
 2005090:	2005883a 	mov	r2,r4
 2005094:	21000017 	ldw	r4,0(r4)
 2005098:	01c00044 	movi	r7,1
 200509c:	3900622e 	bgeu	r7,r4,2005228 <_fpadd_parts+0x198>
 20050a0:	28c00017 	ldw	r3,0(r5)
 20050a4:	38c05f2e 	bgeu	r7,r3,2005224 <_fpadd_parts+0x194>
 20050a8:	01c00104 	movi	r7,4
 20050ac:	21c0c626 	beq	r4,r7,20053c8 <_fpadd_parts+0x338>
 20050b0:	19c05c26 	beq	r3,r7,2005224 <_fpadd_parts+0x194>
 20050b4:	01c00084 	movi	r7,2
 20050b8:	19c06b26 	beq	r3,r7,2005268 <_fpadd_parts+0x1d8>
 20050bc:	21c05926 	beq	r4,r7,2005224 <_fpadd_parts+0x194>
 20050c0:	11c00217 	ldw	r7,8(r2)
 20050c4:	2ac00217 	ldw	r11,8(r5)
 20050c8:	13000317 	ldw	r12,12(r2)
 20050cc:	13400417 	ldw	r13,16(r2)
 20050d0:	3ac9c83a 	sub	r4,r7,r11
 20050d4:	2a000317 	ldw	r8,12(r5)
 20050d8:	2a400417 	ldw	r9,16(r5)
 20050dc:	2015883a 	mov	r10,r4
 20050e0:	20007516 	blt	r4,zero,20052b8 <_fpadd_parts+0x228>
 20050e4:	00c00fc4 	movi	r3,63
 20050e8:	1a805016 	blt	r3,r10,200522c <_fpadd_parts+0x19c>
 20050ec:	0100870e 	bge	zero,r4,200530c <_fpadd_parts+0x27c>
 20050f0:	50fff804 	addi	r3,r10,-32
 20050f4:	18009916 	blt	r3,zero,200535c <_fpadd_parts+0x2cc>
 20050f8:	48d6d83a 	srl	r11,r9,r3
 20050fc:	001d883a 	mov	r14,zero
 2005100:	18009e16 	blt	r3,zero,200537c <_fpadd_parts+0x2ec>
 2005104:	01000044 	movi	r4,1
 2005108:	20c6983a 	sll	r3,r4,r3
 200510c:	0015883a 	mov	r10,zero
 2005110:	513fffc4 	addi	r4,r10,-1
 2005114:	2295403a 	cmpgeu	r10,r4,r10
 2005118:	1a87c83a 	sub	r3,r3,r10
 200511c:	1a52703a 	and	r9,r3,r9
 2005120:	2210703a 	and	r8,r4,r8
 2005124:	4250b03a 	or	r8,r8,r9
 2005128:	4010c03a 	cmpne	r8,r8,zero
 200512c:	42d0b03a 	or	r8,r8,r11
 2005130:	7013883a 	mov	r9,r14
 2005134:	11000117 	ldw	r4,4(r2)
 2005138:	28800117 	ldw	r2,4(r5)
 200513c:	20804126 	beq	r4,r2,2005244 <_fpadd_parts+0x1b4>
 2005140:	20006326 	beq	r4,zero,20052d0 <_fpadd_parts+0x240>
 2005144:	4305c83a 	sub	r2,r8,r12
 2005148:	4091803a 	cmpltu	r8,r8,r2
 200514c:	4b47c83a 	sub	r3,r9,r13
 2005150:	1a07c83a 	sub	r3,r3,r8
 2005154:	18006316 	blt	r3,zero,20052e4 <_fpadd_parts+0x254>
 2005158:	30000115 	stw	zero,4(r6)
 200515c:	31c00215 	stw	r7,8(r6)
 2005160:	30800315 	stw	r2,12(r6)
 2005164:	30c00415 	stw	r3,16(r6)
 2005168:	11ffffc4 	addi	r7,r2,-1
 200516c:	388b403a 	cmpgeu	r5,r7,r2
 2005170:	194bc83a 	sub	r5,r3,r5
 2005174:	01040034 	movhi	r4,4096
 2005178:	213fffc4 	addi	r4,r4,-1
 200517c:	21401736 	bltu	r4,r5,20051dc <_fpadd_parts+0x14c>
 2005180:	29008226 	beq	r5,r4,200538c <_fpadd_parts+0x2fc>
 2005184:	31400217 	ldw	r5,8(r6)
 2005188:	02840034 	movhi	r10,4096
 200518c:	52bfffc4 	addi	r10,r10,-1
 2005190:	033fff84 	movi	r12,-2
 2005194:	297fffc4 	addi	r5,r5,-1
 2005198:	00000106 	br	20051a0 <_fpadd_parts+0x110>
 200519c:	3a804a26 	beq	r7,r10,20052c8 <_fpadd_parts+0x238>
 20051a0:	1089883a 	add	r4,r2,r2
 20051a4:	2091803a 	cmpltu	r8,r4,r2
 20051a8:	18c7883a 	add	r3,r3,r3
 20051ac:	227fffc4 	addi	r9,r4,-1
 20051b0:	40d1883a 	add	r8,r8,r3
 20051b4:	490f403a 	cmpgeu	r7,r9,r4
 20051b8:	41cfc83a 	sub	r7,r8,r7
 20051bc:	2817883a 	mov	r11,r5
 20051c0:	2005883a 	mov	r2,r4
 20051c4:	4007883a 	mov	r3,r8
 20051c8:	297fffc4 	addi	r5,r5,-1
 20051cc:	51fff32e 	bgeu	r10,r7,200519c <_fpadd_parts+0x10c>
 20051d0:	31000315 	stw	r4,12(r6)
 20051d4:	32000415 	stw	r8,16(r6)
 20051d8:	32c00215 	stw	r11,8(r6)
 20051dc:	010000c4 	movi	r4,3
 20051e0:	31000015 	stw	r4,0(r6)
 20051e4:	01080034 	movhi	r4,8192
 20051e8:	213fffc4 	addi	r4,r4,-1
 20051ec:	20c00b2e 	bgeu	r4,r3,200521c <_fpadd_parts+0x18c>
 20051f0:	180e97fa 	slli	r7,r3,31
 20051f4:	1008d07a 	srli	r4,r2,1
 20051f8:	31400217 	ldw	r5,8(r6)
 20051fc:	1806d07a 	srli	r3,r3,1
 2005200:	1080004c 	andi	r2,r2,1
 2005204:	3908b03a 	or	r4,r7,r4
 2005208:	1108b03a 	or	r4,r2,r4
 200520c:	29400044 	addi	r5,r5,1
 2005210:	31000315 	stw	r4,12(r6)
 2005214:	30c00415 	stw	r3,16(r6)
 2005218:	31400215 	stw	r5,8(r6)
 200521c:	3005883a 	mov	r2,r6
 2005220:	f800283a 	ret
 2005224:	2805883a 	mov	r2,r5
 2005228:	f800283a 	ret
 200522c:	59c01e0e 	bge	r11,r7,20052a8 <_fpadd_parts+0x218>
 2005230:	11000117 	ldw	r4,4(r2)
 2005234:	28800117 	ldw	r2,4(r5)
 2005238:	0011883a 	mov	r8,zero
 200523c:	0013883a 	mov	r9,zero
 2005240:	20bfbf1e 	bne	r4,r2,2005140 <_fpadd_parts+0xb0>
 2005244:	4305883a 	add	r2,r8,r12
 2005248:	1207803a 	cmpltu	r3,r2,r8
 200524c:	4b53883a 	add	r9,r9,r13
 2005250:	1a47883a 	add	r3,r3,r9
 2005254:	31000115 	stw	r4,4(r6)
 2005258:	31c00215 	stw	r7,8(r6)
 200525c:	30800315 	stw	r2,12(r6)
 2005260:	30c00415 	stw	r3,16(r6)
 2005264:	003fdd06 	br	20051dc <_fpadd_parts+0x14c>
 2005268:	20ffef1e 	bne	r4,r3,2005228 <_fpadd_parts+0x198>
 200526c:	31000015 	stw	r4,0(r6)
 2005270:	10c00117 	ldw	r3,4(r2)
 2005274:	30c00115 	stw	r3,4(r6)
 2005278:	10c00217 	ldw	r3,8(r2)
 200527c:	11000117 	ldw	r4,4(r2)
 2005280:	29400117 	ldw	r5,4(r5)
 2005284:	30c00215 	stw	r3,8(r6)
 2005288:	10c00317 	ldw	r3,12(r2)
 200528c:	2908703a 	and	r4,r5,r4
 2005290:	30c00315 	stw	r3,12(r6)
 2005294:	10c00417 	ldw	r3,16(r2)
 2005298:	31000115 	stw	r4,4(r6)
 200529c:	3005883a 	mov	r2,r6
 20052a0:	30c00415 	stw	r3,16(r6)
 20052a4:	f800283a 	ret
 20052a8:	580f883a 	mov	r7,r11
 20052ac:	0019883a 	mov	r12,zero
 20052b0:	001b883a 	mov	r13,zero
 20052b4:	003f9f06 	br	2005134 <_fpadd_parts+0xa4>
 20052b8:	0115c83a 	sub	r10,zero,r4
 20052bc:	00c00fc4 	movi	r3,63
 20052c0:	1abfda16 	blt	r3,r10,200522c <_fpadd_parts+0x19c>
 20052c4:	003f8906 	br	20050ec <_fpadd_parts+0x5c>
 20052c8:	627fb52e 	bgeu	r12,r9,20051a0 <_fpadd_parts+0x110>
 20052cc:	003fc006 	br	20051d0 <_fpadd_parts+0x140>
 20052d0:	6205c83a 	sub	r2,r12,r8
 20052d4:	6099803a 	cmpltu	r12,r12,r2
 20052d8:	6a47c83a 	sub	r3,r13,r9
 20052dc:	1b07c83a 	sub	r3,r3,r12
 20052e0:	183f9d0e 	bge	r3,zero,2005158 <_fpadd_parts+0xc8>
 20052e4:	0085c83a 	sub	r2,zero,r2
 20052e8:	1008c03a 	cmpne	r4,r2,zero
 20052ec:	00c7c83a 	sub	r3,zero,r3
 20052f0:	1907c83a 	sub	r3,r3,r4
 20052f4:	01000044 	movi	r4,1
 20052f8:	31000115 	stw	r4,4(r6)
 20052fc:	31c00215 	stw	r7,8(r6)
 2005300:	30800315 	stw	r2,12(r6)
 2005304:	30c00415 	stw	r3,16(r6)
 2005308:	003f9706 	br	2005168 <_fpadd_parts+0xd8>
 200530c:	203f8926 	beq	r4,zero,2005134 <_fpadd_parts+0xa4>
 2005310:	50fff804 	addi	r3,r10,-32
 2005314:	3a8f883a 	add	r7,r7,r10
 2005318:	18002316 	blt	r3,zero,20053a8 <_fpadd_parts+0x318>
 200531c:	68d6d83a 	srl	r11,r13,r3
 2005320:	001d883a 	mov	r14,zero
 2005324:	18001c16 	blt	r3,zero,2005398 <_fpadd_parts+0x308>
 2005328:	01000044 	movi	r4,1
 200532c:	20c6983a 	sll	r3,r4,r3
 2005330:	0015883a 	mov	r10,zero
 2005334:	513fffc4 	addi	r4,r10,-1
 2005338:	2295403a 	cmpgeu	r10,r4,r10
 200533c:	1a87c83a 	sub	r3,r3,r10
 2005340:	1b5a703a 	and	r13,r3,r13
 2005344:	2318703a 	and	r12,r4,r12
 2005348:	6358b03a 	or	r12,r12,r13
 200534c:	6018c03a 	cmpne	r12,r12,zero
 2005350:	62d8b03a 	or	r12,r12,r11
 2005354:	701b883a 	mov	r13,r14
 2005358:	003f7606 	br	2005134 <_fpadd_parts+0xa4>
 200535c:	4808907a 	slli	r4,r9,1
 2005360:	02c007c4 	movi	r11,31
 2005364:	5a97c83a 	sub	r11,r11,r10
 2005368:	22c8983a 	sll	r4,r4,r11
 200536c:	4296d83a 	srl	r11,r8,r10
 2005370:	4a9cd83a 	srl	r14,r9,r10
 2005374:	22d6b03a 	or	r11,r4,r11
 2005378:	003f6106 	br	2005100 <_fpadd_parts+0x70>
 200537c:	00c00044 	movi	r3,1
 2005380:	1a94983a 	sll	r10,r3,r10
 2005384:	0007883a 	mov	r3,zero
 2005388:	003f6106 	br	2005110 <_fpadd_parts+0x80>
 200538c:	013fff84 	movi	r4,-2
 2005390:	21ff7c2e 	bgeu	r4,r7,2005184 <_fpadd_parts+0xf4>
 2005394:	003f9106 	br	20051dc <_fpadd_parts+0x14c>
 2005398:	00c00044 	movi	r3,1
 200539c:	1a94983a 	sll	r10,r3,r10
 20053a0:	0007883a 	mov	r3,zero
 20053a4:	003fe306 	br	2005334 <_fpadd_parts+0x2a4>
 20053a8:	6816907a 	slli	r11,r13,1
 20053ac:	010007c4 	movi	r4,31
 20053b0:	2289c83a 	sub	r4,r4,r10
 20053b4:	5908983a 	sll	r4,r11,r4
 20053b8:	6296d83a 	srl	r11,r12,r10
 20053bc:	6a9cd83a 	srl	r14,r13,r10
 20053c0:	22d6b03a 	or	r11,r4,r11
 20053c4:	003fd706 	br	2005324 <_fpadd_parts+0x294>
 20053c8:	193f971e 	bne	r3,r4,2005228 <_fpadd_parts+0x198>
 20053cc:	11000117 	ldw	r4,4(r2)
 20053d0:	28c00117 	ldw	r3,4(r5)
 20053d4:	20ff9426 	beq	r4,r3,2005228 <_fpadd_parts+0x198>
 20053d8:	00808074 	movhi	r2,513
 20053dc:	1086f104 	addi	r2,r2,7108
 20053e0:	f800283a 	ret

020053e4 <__adddf3>:
 20053e4:	deffec04 	addi	sp,sp,-80
 20053e8:	d9001115 	stw	r4,68(sp)
 20053ec:	d9401215 	stw	r5,72(sp)
 20053f0:	d9001104 	addi	r4,sp,68
 20053f4:	d9400a04 	addi	r5,sp,40
 20053f8:	dfc01315 	stw	ra,76(sp)
 20053fc:	d9c01015 	stw	r7,64(sp)
 2005400:	d9800f15 	stw	r6,60(sp)
 2005404:	2005cb80 	call	2005cb8 <__unpack_d>
 2005408:	d9000f04 	addi	r4,sp,60
 200540c:	d9400504 	addi	r5,sp,20
 2005410:	2005cb80 	call	2005cb8 <__unpack_d>
 2005414:	d9000a04 	addi	r4,sp,40
 2005418:	d9400504 	addi	r5,sp,20
 200541c:	d80d883a 	mov	r6,sp
 2005420:	20050900 	call	2005090 <_fpadd_parts>
 2005424:	1009883a 	mov	r4,r2
 2005428:	2005a940 	call	2005a94 <__pack_d>
 200542c:	dfc01317 	ldw	ra,76(sp)
 2005430:	dec01404 	addi	sp,sp,80
 2005434:	f800283a 	ret

02005438 <__subdf3>:
 2005438:	deffec04 	addi	sp,sp,-80
 200543c:	d9001115 	stw	r4,68(sp)
 2005440:	d9401215 	stw	r5,72(sp)
 2005444:	d9001104 	addi	r4,sp,68
 2005448:	d9400a04 	addi	r5,sp,40
 200544c:	dfc01315 	stw	ra,76(sp)
 2005450:	d9c01015 	stw	r7,64(sp)
 2005454:	d9800f15 	stw	r6,60(sp)
 2005458:	2005cb80 	call	2005cb8 <__unpack_d>
 200545c:	d9000f04 	addi	r4,sp,60
 2005460:	d9400504 	addi	r5,sp,20
 2005464:	2005cb80 	call	2005cb8 <__unpack_d>
 2005468:	d8800617 	ldw	r2,24(sp)
 200546c:	d9000a04 	addi	r4,sp,40
 2005470:	d9400504 	addi	r5,sp,20
 2005474:	d80d883a 	mov	r6,sp
 2005478:	1080005c 	xori	r2,r2,1
 200547c:	d8800615 	stw	r2,24(sp)
 2005480:	20050900 	call	2005090 <_fpadd_parts>
 2005484:	1009883a 	mov	r4,r2
 2005488:	2005a940 	call	2005a94 <__pack_d>
 200548c:	dfc01317 	ldw	ra,76(sp)
 2005490:	dec01404 	addi	sp,sp,80
 2005494:	f800283a 	ret

02005498 <__muldf3>:
 2005498:	deffe404 	addi	sp,sp,-112
 200549c:	d9001115 	stw	r4,68(sp)
 20054a0:	d9401215 	stw	r5,72(sp)
 20054a4:	d9001104 	addi	r4,sp,68
 20054a8:	d9400a04 	addi	r5,sp,40
 20054ac:	dfc01b15 	stw	ra,108(sp)
 20054b0:	d9800f15 	stw	r6,60(sp)
 20054b4:	d9c01015 	stw	r7,64(sp)
 20054b8:	ddc01a15 	stw	r23,104(sp)
 20054bc:	dd801915 	stw	r22,100(sp)
 20054c0:	dd401815 	stw	r21,96(sp)
 20054c4:	dd001715 	stw	r20,92(sp)
 20054c8:	dcc01615 	stw	r19,88(sp)
 20054cc:	dc801515 	stw	r18,84(sp)
 20054d0:	dc401415 	stw	r17,80(sp)
 20054d4:	dc001315 	stw	r16,76(sp)
 20054d8:	2005cb80 	call	2005cb8 <__unpack_d>
 20054dc:	d9000f04 	addi	r4,sp,60
 20054e0:	d9400504 	addi	r5,sp,20
 20054e4:	2005cb80 	call	2005cb8 <__unpack_d>
 20054e8:	d8c00a17 	ldw	r3,40(sp)
 20054ec:	00800044 	movi	r2,1
 20054f0:	10c01136 	bltu	r2,r3,2005538 <__muldf3+0xa0>
 20054f4:	d8c00b17 	ldw	r3,44(sp)
 20054f8:	d8800617 	ldw	r2,24(sp)
 20054fc:	d9000a04 	addi	r4,sp,40
 2005500:	1884c03a 	cmpne	r2,r3,r2
 2005504:	d8800b15 	stw	r2,44(sp)
 2005508:	2005a940 	call	2005a94 <__pack_d>
 200550c:	dfc01b17 	ldw	ra,108(sp)
 2005510:	ddc01a17 	ldw	r23,104(sp)
 2005514:	dd801917 	ldw	r22,100(sp)
 2005518:	dd401817 	ldw	r21,96(sp)
 200551c:	dd001717 	ldw	r20,92(sp)
 2005520:	dcc01617 	ldw	r19,88(sp)
 2005524:	dc801517 	ldw	r18,84(sp)
 2005528:	dc401417 	ldw	r17,80(sp)
 200552c:	dc001317 	ldw	r16,76(sp)
 2005530:	dec01c04 	addi	sp,sp,112
 2005534:	f800283a 	ret
 2005538:	d9000517 	ldw	r4,20(sp)
 200553c:	11000636 	bltu	r2,r4,2005558 <__muldf3+0xc0>
 2005540:	d8800617 	ldw	r2,24(sp)
 2005544:	d8c00b17 	ldw	r3,44(sp)
 2005548:	d9000504 	addi	r4,sp,20
 200554c:	1884c03a 	cmpne	r2,r3,r2
 2005550:	d8800615 	stw	r2,24(sp)
 2005554:	003fec06 	br	2005508 <__muldf3+0x70>
 2005558:	00800104 	movi	r2,4
 200555c:	1880051e 	bne	r3,r2,2005574 <__muldf3+0xdc>
 2005560:	00800084 	movi	r2,2
 2005564:	20bfe31e 	bne	r4,r2,20054f4 <__muldf3+0x5c>
 2005568:	01008074 	movhi	r4,513
 200556c:	2106f104 	addi	r4,r4,7108
 2005570:	003fe506 	br	2005508 <__muldf3+0x70>
 2005574:	2080031e 	bne	r4,r2,2005584 <__muldf3+0xec>
 2005578:	00800084 	movi	r2,2
 200557c:	18bffa26 	beq	r3,r2,2005568 <__muldf3+0xd0>
 2005580:	003fef06 	br	2005540 <__muldf3+0xa8>
 2005584:	00800084 	movi	r2,2
 2005588:	18bfda26 	beq	r3,r2,20054f4 <__muldf3+0x5c>
 200558c:	20bfec26 	beq	r4,r2,2005540 <__muldf3+0xa8>
 2005590:	dc000d17 	ldw	r16,52(sp)
 2005594:	dd000817 	ldw	r20,32(sp)
 2005598:	dc800917 	ldw	r18,36(sp)
 200559c:	8009883a 	mov	r4,r16
 20055a0:	000b883a 	mov	r5,zero
 20055a4:	a00d883a 	mov	r6,r20
 20055a8:	000f883a 	mov	r7,zero
 20055ac:	20059880 	call	2005988 <__muldi3>
 20055b0:	dc400e17 	ldw	r17,56(sp)
 20055b4:	9009883a 	mov	r4,r18
 20055b8:	800d883a 	mov	r6,r16
 20055bc:	000b883a 	mov	r5,zero
 20055c0:	000f883a 	mov	r7,zero
 20055c4:	102f883a 	mov	r23,r2
 20055c8:	1827883a 	mov	r19,r3
 20055cc:	20059880 	call	2005988 <__muldi3>
 20055d0:	900d883a 	mov	r6,r18
 20055d4:	8809883a 	mov	r4,r17
 20055d8:	000b883a 	mov	r5,zero
 20055dc:	000f883a 	mov	r7,zero
 20055e0:	102b883a 	mov	r21,r2
 20055e4:	1821883a 	mov	r16,r3
 20055e8:	20059880 	call	2005988 <__muldi3>
 20055ec:	8809883a 	mov	r4,r17
 20055f0:	000b883a 	mov	r5,zero
 20055f4:	a00d883a 	mov	r6,r20
 20055f8:	000f883a 	mov	r7,zero
 20055fc:	102d883a 	mov	r22,r2
 2005600:	1825883a 	mov	r18,r3
 2005604:	20059880 	call	2005988 <__muldi3>
 2005608:	154b883a 	add	r5,r2,r21
 200560c:	2889803a 	cmpltu	r4,r5,r2
 2005610:	1c07883a 	add	r3,r3,r16
 2005614:	20c9883a 	add	r4,r4,r3
 2005618:	24004b36 	bltu	r4,r16,2005748 <__muldf3+0x2b0>
 200561c:	8100011e 	bne	r16,r4,2005624 <__muldf3+0x18c>
 2005620:	2d404936 	bltu	r5,r21,2005748 <__muldf3+0x2b0>
 2005624:	0011883a 	mov	r8,zero
 2005628:	0007883a 	mov	r3,zero
 200562c:	2ccb883a 	add	r5,r5,r19
 2005630:	b80d883a 	mov	r6,r23
 2005634:	2cc0012e 	bgeu	r5,r19,200563c <__muldf3+0x1a4>
 2005638:	02000044 	movi	r8,1
 200563c:	258f883a 	add	r7,r4,r22
 2005640:	3909803a 	cmpltu	r4,r7,r4
 2005644:	da400c17 	ldw	r9,48(sp)
 2005648:	2489883a 	add	r4,r4,r18
 200564c:	d8800717 	ldw	r2,28(sp)
 2005650:	20c9883a 	add	r4,r4,r3
 2005654:	da800b17 	ldw	r10,44(sp)
 2005658:	d8c00617 	ldw	r3,24(sp)
 200565c:	3a11883a 	add	r8,r7,r8
 2005660:	4885883a 	add	r2,r9,r2
 2005664:	50c6c03a 	cmpne	r3,r10,r3
 2005668:	41cf803a 	cmpltu	r7,r8,r7
 200566c:	12400104 	addi	r9,r2,4
 2005670:	d8c00115 	stw	r3,4(sp)
 2005674:	3909883a 	add	r4,r7,r4
 2005678:	da400215 	stw	r9,8(sp)
 200567c:	03480034 	movhi	r13,8192
 2005680:	6b7fffc4 	addi	r13,r13,-1
 2005684:	4007883a 	mov	r3,r8
 2005688:	6900102e 	bgeu	r13,r4,20056cc <__muldf3+0x234>
 200568c:	10800144 	addi	r2,r2,5
 2005690:	180ed07a 	srli	r7,r3,1
 2005694:	18c0004c 	andi	r3,r3,1
 2005698:	201097fa 	slli	r8,r4,31
 200569c:	281697fa 	slli	r11,r5,31
 20056a0:	2008d07a 	srli	r4,r4,1
 20056a4:	3014d07a 	srli	r10,r6,1
 20056a8:	2812d07a 	srli	r9,r5,1
 20056ac:	1019883a 	mov	r12,r2
 20056b0:	18000226 	beq	r3,zero,20056bc <__muldf3+0x224>
 20056b4:	5a8cb03a 	or	r6,r11,r10
 20056b8:	49600034 	orhi	r5,r9,32768
 20056bc:	41c6b03a 	or	r3,r8,r7
 20056c0:	10800044 	addi	r2,r2,1
 20056c4:	693ff236 	bltu	r13,r4,2005690 <__muldf3+0x1f8>
 20056c8:	db000215 	stw	r12,8(sp)
 20056cc:	03440034 	movhi	r13,4096
 20056d0:	6b7fffc4 	addi	r13,r13,-1
 20056d4:	69001336 	bltu	r13,r4,2005724 <__muldf3+0x28c>
 20056d8:	d8800217 	ldw	r2,8(sp)
 20056dc:	10bfffc4 	addi	r2,r2,-1
 20056e0:	18d3883a 	add	r9,r3,r3
 20056e4:	48c7803a 	cmpltu	r3,r9,r3
 20056e8:	2109883a 	add	r4,r4,r4
 20056ec:	190f883a 	add	r7,r3,r4
 20056f0:	3191883a 	add	r8,r6,r6
 20056f4:	4197803a 	cmpltu	r11,r8,r6
 20056f8:	2955883a 	add	r10,r5,r5
 20056fc:	1019883a 	mov	r12,r2
 2005700:	4807883a 	mov	r3,r9
 2005704:	3809883a 	mov	r4,r7
 2005708:	2800010e 	bge	r5,zero,2005710 <__muldf3+0x278>
 200570c:	48c00054 	ori	r3,r9,1
 2005710:	400d883a 	mov	r6,r8
 2005714:	5a8b883a 	add	r5,r11,r10
 2005718:	10bfffc4 	addi	r2,r2,-1
 200571c:	69fff02e 	bgeu	r13,r7,20056e0 <__muldf3+0x248>
 2005720:	db000215 	stw	r12,8(sp)
 2005724:	18803fcc 	andi	r2,r3,255
 2005728:	01c02004 	movi	r7,128
 200572c:	11c00926 	beq	r2,r7,2005754 <__muldf3+0x2bc>
 2005730:	008000c4 	movi	r2,3
 2005734:	d9000415 	stw	r4,16(sp)
 2005738:	d8c00315 	stw	r3,12(sp)
 200573c:	d8800015 	stw	r2,0(sp)
 2005740:	d809883a 	mov	r4,sp
 2005744:	003f7006 	br	2005508 <__muldf3+0x70>
 2005748:	0011883a 	mov	r8,zero
 200574c:	00c00044 	movi	r3,1
 2005750:	003fb606 	br	200562c <__muldf3+0x194>
 2005754:	19c0400c 	andi	r7,r3,256
 2005758:	383ff51e 	bne	r7,zero,2005730 <__muldf3+0x298>
 200575c:	314ab03a 	or	r5,r6,r5
 2005760:	283ff326 	beq	r5,zero,2005730 <__muldf3+0x298>
 2005764:	1885883a 	add	r2,r3,r2
 2005768:	10cb803a 	cmpltu	r5,r2,r3
 200576c:	00ffc004 	movi	r3,-256
 2005770:	10c6703a 	and	r3,r2,r3
 2005774:	2909883a 	add	r4,r5,r4
 2005778:	003fed06 	br	2005730 <__muldf3+0x298>

0200577c <__gedf2>:
 200577c:	defff104 	addi	sp,sp,-60
 2005780:	d9000c15 	stw	r4,48(sp)
 2005784:	d9400d15 	stw	r5,52(sp)
 2005788:	d9000c04 	addi	r4,sp,48
 200578c:	d9400504 	addi	r5,sp,20
 2005790:	dfc00e15 	stw	ra,56(sp)
 2005794:	d9800a15 	stw	r6,40(sp)
 2005798:	d9c00b15 	stw	r7,44(sp)
 200579c:	2005cb80 	call	2005cb8 <__unpack_d>
 20057a0:	d9000a04 	addi	r4,sp,40
 20057a4:	d80b883a 	mov	r5,sp
 20057a8:	2005cb80 	call	2005cb8 <__unpack_d>
 20057ac:	d8c00517 	ldw	r3,20(sp)
 20057b0:	00800044 	movi	r2,1
 20057b4:	10c0082e 	bgeu	r2,r3,20057d8 <__gedf2+0x5c>
 20057b8:	d8c00017 	ldw	r3,0(sp)
 20057bc:	10c0062e 	bgeu	r2,r3,20057d8 <__gedf2+0x5c>
 20057c0:	d9000504 	addi	r4,sp,20
 20057c4:	d80b883a 	mov	r5,sp
 20057c8:	2005dbc0 	call	2005dbc <__fpcmp_parts_d>
 20057cc:	dfc00e17 	ldw	ra,56(sp)
 20057d0:	dec00f04 	addi	sp,sp,60
 20057d4:	f800283a 	ret
 20057d8:	00bfffc4 	movi	r2,-1
 20057dc:	003ffb06 	br	20057cc <__gedf2+0x50>

020057e0 <__floatsidf>:
 20057e0:	2004d7fa 	srli	r2,r4,31
 20057e4:	defff904 	addi	sp,sp,-28
 20057e8:	00c000c4 	movi	r3,3
 20057ec:	dfc00615 	stw	ra,24(sp)
 20057f0:	dc000515 	stw	r16,20(sp)
 20057f4:	d8c00015 	stw	r3,0(sp)
 20057f8:	d8800115 	stw	r2,4(sp)
 20057fc:	2000081e 	bne	r4,zero,2005820 <__floatsidf+0x40>
 2005800:	00800084 	movi	r2,2
 2005804:	d8800015 	stw	r2,0(sp)
 2005808:	d809883a 	mov	r4,sp
 200580c:	2005a940 	call	2005a94 <__pack_d>
 2005810:	dfc00617 	ldw	ra,24(sp)
 2005814:	dc000517 	ldw	r16,20(sp)
 2005818:	dec00704 	addi	sp,sp,28
 200581c:	f800283a 	ret
 2005820:	00c00f04 	movi	r3,60
 2005824:	d8c00215 	stw	r3,8(sp)
 2005828:	10000f1e 	bne	r2,zero,2005868 <__floatsidf+0x88>
 200582c:	2021883a 	mov	r16,r4
 2005830:	8009883a 	mov	r4,r16
 2005834:	20059e80 	call	20059e8 <__clzsi2>
 2005838:	11000744 	addi	r4,r2,29
 200583c:	0100110e 	bge	zero,r4,2005884 <__floatsidf+0xa4>
 2005840:	10ffff44 	addi	r3,r2,-3
 2005844:	18001216 	blt	r3,zero,2005890 <__floatsidf+0xb0>
 2005848:	80c6983a 	sll	r3,r16,r3
 200584c:	0009883a 	mov	r4,zero
 2005850:	014007c4 	movi	r5,31
 2005854:	2885c83a 	sub	r2,r5,r2
 2005858:	d9000315 	stw	r4,12(sp)
 200585c:	d8c00415 	stw	r3,16(sp)
 2005860:	d8800215 	stw	r2,8(sp)
 2005864:	003fe806 	br	2005808 <__floatsidf+0x28>
 2005868:	00a00034 	movhi	r2,32768
 200586c:	20800e26 	beq	r4,r2,20058a8 <__floatsidf+0xc8>
 2005870:	0121c83a 	sub	r16,zero,r4
 2005874:	8009883a 	mov	r4,r16
 2005878:	20059e80 	call	20059e8 <__clzsi2>
 200587c:	11000744 	addi	r4,r2,29
 2005880:	013fef16 	blt	zero,r4,2005840 <__floatsidf+0x60>
 2005884:	dc000315 	stw	r16,12(sp)
 2005888:	d8000415 	stw	zero,16(sp)
 200588c:	003fde06 	br	2005808 <__floatsidf+0x28>
 2005890:	800ad07a 	srli	r5,r16,1
 2005894:	00c007c4 	movi	r3,31
 2005898:	1907c83a 	sub	r3,r3,r4
 200589c:	28c6d83a 	srl	r3,r5,r3
 20058a0:	8108983a 	sll	r4,r16,r4
 20058a4:	003fea06 	br	2005850 <__floatsidf+0x70>
 20058a8:	0005883a 	mov	r2,zero
 20058ac:	00f07834 	movhi	r3,49632
 20058b0:	003fd706 	br	2005810 <__floatsidf+0x30>

020058b4 <__fixdfsi>:
 20058b4:	defff804 	addi	sp,sp,-32
 20058b8:	d9000515 	stw	r4,20(sp)
 20058bc:	d9400615 	stw	r5,24(sp)
 20058c0:	d9000504 	addi	r4,sp,20
 20058c4:	d80b883a 	mov	r5,sp
 20058c8:	dfc00715 	stw	ra,28(sp)
 20058cc:	2005cb80 	call	2005cb8 <__unpack_d>
 20058d0:	d8800017 	ldw	r2,0(sp)
 20058d4:	00c00084 	movi	r3,2
 20058d8:	10c01c26 	beq	r2,r3,200594c <__fixdfsi+0x98>
 20058dc:	00c00044 	movi	r3,1
 20058e0:	18801a2e 	bgeu	r3,r2,200594c <__fixdfsi+0x98>
 20058e4:	00c00104 	movi	r3,4
 20058e8:	10c01126 	beq	r2,r3,2005930 <__fixdfsi+0x7c>
 20058ec:	d8800217 	ldw	r2,8(sp)
 20058f0:	10001616 	blt	r2,zero,200594c <__fixdfsi+0x98>
 20058f4:	00c00784 	movi	r3,30
 20058f8:	18800d16 	blt	r3,r2,2005930 <__fixdfsi+0x7c>
 20058fc:	00c00f04 	movi	r3,60
 2005900:	1885c83a 	sub	r2,r3,r2
 2005904:	10fff804 	addi	r3,r2,-32
 2005908:	d9400317 	ldw	r5,12(sp)
 200590c:	d9000417 	ldw	r4,16(sp)
 2005910:	18001616 	blt	r3,zero,200596c <__fixdfsi+0xb8>
 2005914:	20c4d83a 	srl	r2,r4,r3
 2005918:	d8c00117 	ldw	r3,4(sp)
 200591c:	18000126 	beq	r3,zero,2005924 <__fixdfsi+0x70>
 2005920:	0085c83a 	sub	r2,zero,r2
 2005924:	dfc00717 	ldw	ra,28(sp)
 2005928:	dec00804 	addi	sp,sp,32
 200592c:	f800283a 	ret
 2005930:	d8800117 	ldw	r2,4(sp)
 2005934:	1000091e 	bne	r2,zero,200595c <__fixdfsi+0xa8>
 2005938:	00a00034 	movhi	r2,32768
 200593c:	10bfffc4 	addi	r2,r2,-1
 2005940:	dfc00717 	ldw	ra,28(sp)
 2005944:	dec00804 	addi	sp,sp,32
 2005948:	f800283a 	ret
 200594c:	0005883a 	mov	r2,zero
 2005950:	dfc00717 	ldw	ra,28(sp)
 2005954:	dec00804 	addi	sp,sp,32
 2005958:	f800283a 	ret
 200595c:	00a00034 	movhi	r2,32768
 2005960:	dfc00717 	ldw	ra,28(sp)
 2005964:	dec00804 	addi	sp,sp,32
 2005968:	f800283a 	ret
 200596c:	2008907a 	slli	r4,r4,1
 2005970:	018007c4 	movi	r6,31
 2005974:	308dc83a 	sub	r6,r6,r2
 2005978:	2188983a 	sll	r4,r4,r6
 200597c:	2884d83a 	srl	r2,r5,r2
 2005980:	2084b03a 	or	r2,r4,r2
 2005984:	003fe406 	br	2005918 <__fixdfsi+0x64>

02005988 <__muldi3>:
 2005988:	20bfffcc 	andi	r2,r4,65535
 200598c:	2010d43a 	srli	r8,r4,16
 2005990:	30ffffcc 	andi	r3,r6,65535
 2005994:	3014d43a 	srli	r10,r6,16
 2005998:	1893383a 	mul	r9,r3,r2
 200599c:	1a07383a 	mul	r3,r3,r8
 20059a0:	5085383a 	mul	r2,r10,r2
 20059a4:	4816d43a 	srli	r11,r9,16
 20059a8:	5211383a 	mul	r8,r10,r8
 20059ac:	1885883a 	add	r2,r3,r2
 20059b0:	12c5883a 	add	r2,r2,r11
 20059b4:	10c0022e 	bgeu	r2,r3,20059c0 <__muldi3+0x38>
 20059b8:	00c00074 	movhi	r3,1
 20059bc:	40d1883a 	add	r8,r8,r3
 20059c0:	1014d43a 	srli	r10,r2,16
 20059c4:	21c9383a 	mul	r4,r4,r7
 20059c8:	314d383a 	mul	r6,r6,r5
 20059cc:	1004943a 	slli	r2,r2,16
 20059d0:	4291883a 	add	r8,r8,r10
 20059d4:	4a7fffcc 	andi	r9,r9,65535
 20059d8:	2187883a 	add	r3,r4,r6
 20059dc:	1245883a 	add	r2,r2,r9
 20059e0:	1a07883a 	add	r3,r3,r8
 20059e4:	f800283a 	ret

020059e8 <__clzsi2>:
 20059e8:	00bfffd4 	movui	r2,65535
 20059ec:	11000b36 	bltu	r2,r4,2005a1c <__clzsi2+0x34>
 20059f0:	00803fc4 	movi	r2,255
 20059f4:	11001e2e 	bgeu	r2,r4,2005a70 <__clzsi2+0x88>
 20059f8:	00c00204 	movi	r3,8
 20059fc:	20c8d83a 	srl	r4,r4,r3
 2005a00:	00c08074 	movhi	r3,513
 2005a04:	18c6f604 	addi	r3,r3,7128
 2005a08:	00800604 	movi	r2,24
 2005a0c:	1909883a 	add	r4,r3,r4
 2005a10:	20c00003 	ldbu	r3,0(r4)
 2005a14:	10c5c83a 	sub	r2,r2,r3
 2005a18:	f800283a 	ret
 2005a1c:	00804034 	movhi	r2,256
 2005a20:	10bfffc4 	addi	r2,r2,-1
 2005a24:	11000936 	bltu	r2,r4,2005a4c <__clzsi2+0x64>
 2005a28:	00800404 	movi	r2,16
 2005a2c:	1007883a 	mov	r3,r2
 2005a30:	20c8d83a 	srl	r4,r4,r3
 2005a34:	00c08074 	movhi	r3,513
 2005a38:	18c6f604 	addi	r3,r3,7128
 2005a3c:	1909883a 	add	r4,r3,r4
 2005a40:	20c00003 	ldbu	r3,0(r4)
 2005a44:	10c5c83a 	sub	r2,r2,r3
 2005a48:	f800283a 	ret
 2005a4c:	00c00604 	movi	r3,24
 2005a50:	20c8d83a 	srl	r4,r4,r3
 2005a54:	00c08074 	movhi	r3,513
 2005a58:	18c6f604 	addi	r3,r3,7128
 2005a5c:	00800204 	movi	r2,8
 2005a60:	1909883a 	add	r4,r3,r4
 2005a64:	20c00003 	ldbu	r3,0(r4)
 2005a68:	10c5c83a 	sub	r2,r2,r3
 2005a6c:	f800283a 	ret
 2005a70:	0007883a 	mov	r3,zero
 2005a74:	20c8d83a 	srl	r4,r4,r3
 2005a78:	00c08074 	movhi	r3,513
 2005a7c:	18c6f604 	addi	r3,r3,7128
 2005a80:	00800804 	movi	r2,32
 2005a84:	1909883a 	add	r4,r3,r4
 2005a88:	20c00003 	ldbu	r3,0(r4)
 2005a8c:	10c5c83a 	sub	r2,r2,r3
 2005a90:	f800283a 	ret

02005a94 <__pack_d>:
 2005a94:	20800017 	ldw	r2,0(r4)
 2005a98:	defff804 	addi	sp,sp,-32
 2005a9c:	dcc00315 	stw	r19,12(sp)
 2005aa0:	dc800215 	stw	r18,8(sp)
 2005aa4:	dfc00715 	stw	ra,28(sp)
 2005aa8:	dd800615 	stw	r22,24(sp)
 2005aac:	dd400515 	stw	r21,20(sp)
 2005ab0:	dd000415 	stw	r20,16(sp)
 2005ab4:	dc400115 	stw	r17,4(sp)
 2005ab8:	dc000015 	stw	r16,0(sp)
 2005abc:	04800044 	movi	r18,1
 2005ac0:	24400317 	ldw	r17,12(r4)
 2005ac4:	24000417 	ldw	r16,16(r4)
 2005ac8:	24c00117 	ldw	r19,4(r4)
 2005acc:	9080422e 	bgeu	r18,r2,2005bd8 <__pack_d+0x144>
 2005ad0:	00c00104 	movi	r3,4
 2005ad4:	10c03c26 	beq	r2,r3,2005bc8 <__pack_d+0x134>
 2005ad8:	00c00084 	movi	r3,2
 2005adc:	10c01926 	beq	r2,r3,2005b44 <__pack_d+0xb0>
 2005ae0:	8c04b03a 	or	r2,r17,r16
 2005ae4:	10001726 	beq	r2,zero,2005b44 <__pack_d+0xb0>
 2005ae8:	21000217 	ldw	r4,8(r4)
 2005aec:	00bf0084 	movi	r2,-1022
 2005af0:	20804016 	blt	r4,r2,2005bf4 <__pack_d+0x160>
 2005af4:	0080ffc4 	movi	r2,1023
 2005af8:	11003316 	blt	r2,r4,2005bc8 <__pack_d+0x134>
 2005afc:	88803fcc 	andi	r2,r17,255
 2005b00:	00c02004 	movi	r3,128
 2005b04:	10c02926 	beq	r2,r3,2005bac <__pack_d+0x118>
 2005b08:	88801fc4 	addi	r2,r17,127
 2005b0c:	1463803a 	cmpltu	r17,r2,r17
 2005b10:	8c21883a 	add	r16,r17,r16
 2005b14:	1023883a 	mov	r17,r2
 2005b18:	00880034 	movhi	r2,8192
 2005b1c:	10bfffc4 	addi	r2,r2,-1
 2005b20:	14001c36 	bltu	r2,r16,2005b94 <__pack_d+0x100>
 2005b24:	2100ffc4 	addi	r4,r4,1023
 2005b28:	8006963a 	slli	r3,r16,24
 2005b2c:	8804d23a 	srli	r2,r17,8
 2005b30:	8020913a 	slli	r16,r16,4
 2005b34:	2101ffcc 	andi	r4,r4,2047
 2005b38:	1884b03a 	or	r2,r3,r2
 2005b3c:	8020d33a 	srli	r16,r16,12
 2005b40:	00000306 	br	2005b50 <__pack_d+0xbc>
 2005b44:	0009883a 	mov	r4,zero
 2005b48:	0005883a 	mov	r2,zero
 2005b4c:	0021883a 	mov	r16,zero
 2005b50:	2008953a 	slli	r4,r4,20
 2005b54:	982697fa 	slli	r19,r19,31
 2005b58:	00c00434 	movhi	r3,16
 2005b5c:	18ffffc4 	addi	r3,r3,-1
 2005b60:	80e0703a 	and	r16,r16,r3
 2005b64:	8106b03a 	or	r3,r16,r4
 2005b68:	1cc6b03a 	or	r3,r3,r19
 2005b6c:	dfc00717 	ldw	ra,28(sp)
 2005b70:	dd800617 	ldw	r22,24(sp)
 2005b74:	dd400517 	ldw	r21,20(sp)
 2005b78:	dd000417 	ldw	r20,16(sp)
 2005b7c:	dcc00317 	ldw	r19,12(sp)
 2005b80:	dc800217 	ldw	r18,8(sp)
 2005b84:	dc400117 	ldw	r17,4(sp)
 2005b88:	dc000017 	ldw	r16,0(sp)
 2005b8c:	dec00804 	addi	sp,sp,32
 2005b90:	f800283a 	ret
 2005b94:	800697fa 	slli	r3,r16,31
 2005b98:	8804d07a 	srli	r2,r17,1
 2005b9c:	21010004 	addi	r4,r4,1024
 2005ba0:	8020d07a 	srli	r16,r16,1
 2005ba4:	18a2b03a 	or	r17,r3,r2
 2005ba8:	003fdf06 	br	2005b28 <__pack_d+0x94>
 2005bac:	88c0400c 	andi	r3,r17,256
 2005bb0:	183fd926 	beq	r3,zero,2005b18 <__pack_d+0x84>
 2005bb4:	8885883a 	add	r2,r17,r2
 2005bb8:	1463803a 	cmpltu	r17,r2,r17
 2005bbc:	8c21883a 	add	r16,r17,r16
 2005bc0:	1023883a 	mov	r17,r2
 2005bc4:	003fd406 	br	2005b18 <__pack_d+0x84>
 2005bc8:	0101ffc4 	movi	r4,2047
 2005bcc:	0005883a 	mov	r2,zero
 2005bd0:	0021883a 	mov	r16,zero
 2005bd4:	003fde06 	br	2005b50 <__pack_d+0xbc>
 2005bd8:	84000234 	orhi	r16,r16,8
 2005bdc:	00c00434 	movhi	r3,16
 2005be0:	18ffffc4 	addi	r3,r3,-1
 2005be4:	8805883a 	mov	r2,r17
 2005be8:	80e0703a 	and	r16,r16,r3
 2005bec:	0101ffc4 	movi	r4,2047
 2005bf0:	003fd706 	br	2005b50 <__pack_d+0xbc>
 2005bf4:	1129c83a 	sub	r20,r2,r4
 2005bf8:	00800e04 	movi	r2,56
 2005bfc:	15002716 	blt	r2,r20,2005c9c <__pack_d+0x208>
 2005c00:	800b883a 	mov	r5,r16
 2005c04:	a00d883a 	mov	r6,r20
 2005c08:	8809883a 	mov	r4,r17
 2005c0c:	2005e8c0 	call	2005e8c <__lshrdi3>
 2005c10:	9009883a 	mov	r4,r18
 2005c14:	000b883a 	mov	r5,zero
 2005c18:	a00d883a 	mov	r6,r20
 2005c1c:	102d883a 	mov	r22,r2
 2005c20:	182b883a 	mov	r21,r3
 2005c24:	2005ed00 	call	2005ed0 <__ashldi3>
 2005c28:	1009003a 	cmpeq	r4,r2,zero
 2005c2c:	1907c83a 	sub	r3,r3,r4
 2005c30:	10bfffc4 	addi	r2,r2,-1
 2005c34:	1c20703a 	and	r16,r3,r16
 2005c38:	1444703a 	and	r2,r2,r17
 2005c3c:	1404b03a 	or	r2,r2,r16
 2005c40:	1004c03a 	cmpne	r2,r2,zero
 2005c44:	1584b03a 	or	r2,r2,r22
 2005c48:	11003fcc 	andi	r4,r2,255
 2005c4c:	01402004 	movi	r5,128
 2005c50:	a807883a 	mov	r3,r21
 2005c54:	2140131e 	bne	r4,r5,2005ca4 <__pack_d+0x210>
 2005c58:	1140400c 	andi	r5,r2,256
 2005c5c:	28000426 	beq	r5,zero,2005c70 <__pack_d+0x1dc>
 2005c60:	1109883a 	add	r4,r2,r4
 2005c64:	2085803a 	cmpltu	r2,r4,r2
 2005c68:	1547883a 	add	r3,r2,r21
 2005c6c:	2005883a 	mov	r2,r4
 2005c70:	1808963a 	slli	r4,r3,24
 2005c74:	1004d23a 	srli	r2,r2,8
 2005c78:	1820913a 	slli	r16,r3,4
 2005c7c:	01440034 	movhi	r5,4096
 2005c80:	297fffc4 	addi	r5,r5,-1
 2005c84:	2084b03a 	or	r2,r4,r2
 2005c88:	8020d33a 	srli	r16,r16,12
 2005c8c:	01000044 	movi	r4,1
 2005c90:	28ffaf36 	bltu	r5,r3,2005b50 <__pack_d+0xbc>
 2005c94:	0009883a 	mov	r4,zero
 2005c98:	003fad06 	br	2005b50 <__pack_d+0xbc>
 2005c9c:	0005883a 	mov	r2,zero
 2005ca0:	0007883a 	mov	r3,zero
 2005ca4:	11001fc4 	addi	r4,r2,127
 2005ca8:	2085803a 	cmpltu	r2,r4,r2
 2005cac:	10c7883a 	add	r3,r2,r3
 2005cb0:	2005883a 	mov	r2,r4
 2005cb4:	003fee06 	br	2005c70 <__pack_d+0x1dc>

02005cb8 <__unpack_d>:
 2005cb8:	21800117 	ldw	r6,4(r4)
 2005cbc:	20c00017 	ldw	r3,0(r4)
 2005cc0:	3004d7fa 	srli	r2,r6,31
 2005cc4:	3008d53a 	srli	r4,r6,20
 2005cc8:	28800115 	stw	r2,4(r5)
 2005ccc:	2101ffcc 	andi	r4,r4,2047
 2005cd0:	00800434 	movhi	r2,16
 2005cd4:	10bfffc4 	addi	r2,r2,-1
 2005cd8:	3084703a 	and	r2,r6,r2
 2005cdc:	20001a1e 	bne	r4,zero,2005d48 <__unpack_d+0x90>
 2005ce0:	1888b03a 	or	r4,r3,r2
 2005ce4:	20002626 	beq	r4,zero,2005d80 <__unpack_d+0xc8>
 2005ce8:	1808d63a 	srli	r4,r3,24
 2005cec:	1004923a 	slli	r2,r2,8
 2005cf0:	01bf0084 	movi	r6,-1022
 2005cf4:	29800215 	stw	r6,8(r5)
 2005cf8:	2084b03a 	or	r2,r4,r2
 2005cfc:	010000c4 	movi	r4,3
 2005d00:	29000015 	stw	r4,0(r5)
 2005d04:	02040034 	movhi	r8,4096
 2005d08:	423fffc4 	addi	r8,r8,-1
 2005d0c:	1806923a 	slli	r3,r3,8
 2005d10:	40801836 	bltu	r8,r2,2005d74 <__unpack_d+0xbc>
 2005d14:	013f0044 	movi	r4,-1023
 2005d18:	18cd883a 	add	r6,r3,r3
 2005d1c:	30c7803a 	cmpltu	r3,r6,r3
 2005d20:	1085883a 	add	r2,r2,r2
 2005d24:	1885883a 	add	r2,r3,r2
 2005d28:	200f883a 	mov	r7,r4
 2005d2c:	3007883a 	mov	r3,r6
 2005d30:	213fffc4 	addi	r4,r4,-1
 2005d34:	40bff82e 	bgeu	r8,r2,2005d18 <__unpack_d+0x60>
 2005d38:	29c00215 	stw	r7,8(r5)
 2005d3c:	28c00315 	stw	r3,12(r5)
 2005d40:	28800415 	stw	r2,16(r5)
 2005d44:	f800283a 	ret
 2005d48:	01c1ffc4 	movi	r7,2047
 2005d4c:	21c00f26 	beq	r4,r7,2005d8c <__unpack_d+0xd4>
 2005d50:	180cd63a 	srli	r6,r3,24
 2005d54:	1004923a 	slli	r2,r2,8
 2005d58:	213f0044 	addi	r4,r4,-1023
 2005d5c:	1806923a 	slli	r3,r3,8
 2005d60:	3084b03a 	or	r2,r6,r2
 2005d64:	29000215 	stw	r4,8(r5)
 2005d68:	010000c4 	movi	r4,3
 2005d6c:	10840034 	orhi	r2,r2,4096
 2005d70:	29000015 	stw	r4,0(r5)
 2005d74:	28c00315 	stw	r3,12(r5)
 2005d78:	28800415 	stw	r2,16(r5)
 2005d7c:	f800283a 	ret
 2005d80:	00800084 	movi	r2,2
 2005d84:	28800015 	stw	r2,0(r5)
 2005d88:	f800283a 	ret
 2005d8c:	1888b03a 	or	r4,r3,r2
 2005d90:	20000526 	beq	r4,zero,2005da8 <__unpack_d+0xf0>
 2005d94:	3180022c 	andhi	r6,r6,8
 2005d98:	30000626 	beq	r6,zero,2005db4 <__unpack_d+0xfc>
 2005d9c:	01000044 	movi	r4,1
 2005da0:	29000015 	stw	r4,0(r5)
 2005da4:	003ff306 	br	2005d74 <__unpack_d+0xbc>
 2005da8:	00800104 	movi	r2,4
 2005dac:	28800015 	stw	r2,0(r5)
 2005db0:	f800283a 	ret
 2005db4:	28000015 	stw	zero,0(r5)
 2005db8:	003fee06 	br	2005d74 <__unpack_d+0xbc>

02005dbc <__fpcmp_parts_d>:
 2005dbc:	20c00017 	ldw	r3,0(r4)
 2005dc0:	00800044 	movi	r2,1
 2005dc4:	10c0142e 	bgeu	r2,r3,2005e18 <__fpcmp_parts_d+0x5c>
 2005dc8:	29800017 	ldw	r6,0(r5)
 2005dcc:	1180122e 	bgeu	r2,r6,2005e18 <__fpcmp_parts_d+0x5c>
 2005dd0:	01c00104 	movi	r7,4
 2005dd4:	19c02826 	beq	r3,r7,2005e78 <__fpcmp_parts_d+0xbc>
 2005dd8:	31c00926 	beq	r6,r7,2005e00 <__fpcmp_parts_d+0x44>
 2005ddc:	01c00084 	movi	r7,2
 2005de0:	19c00626 	beq	r3,r7,2005dfc <__fpcmp_parts_d+0x40>
 2005de4:	31c00a26 	beq	r6,r7,2005e10 <__fpcmp_parts_d+0x54>
 2005de8:	20c00117 	ldw	r3,4(r4)
 2005dec:	29800117 	ldw	r6,4(r5)
 2005df0:	19800b26 	beq	r3,r6,2005e20 <__fpcmp_parts_d+0x64>
 2005df4:	1800041e 	bne	r3,zero,2005e08 <__fpcmp_parts_d+0x4c>
 2005df8:	f800283a 	ret
 2005dfc:	30c01a26 	beq	r6,r3,2005e68 <__fpcmp_parts_d+0xac>
 2005e00:	28800117 	ldw	r2,4(r5)
 2005e04:	1000041e 	bne	r2,zero,2005e18 <__fpcmp_parts_d+0x5c>
 2005e08:	00bfffc4 	movi	r2,-1
 2005e0c:	f800283a 	ret
 2005e10:	20800117 	ldw	r2,4(r4)
 2005e14:	103ffc1e 	bne	r2,zero,2005e08 <__fpcmp_parts_d+0x4c>
 2005e18:	00800044 	movi	r2,1
 2005e1c:	f800283a 	ret
 2005e20:	21c00217 	ldw	r7,8(r4)
 2005e24:	29800217 	ldw	r6,8(r5)
 2005e28:	31c0020e 	bge	r6,r7,2005e34 <__fpcmp_parts_d+0x78>
 2005e2c:	183ff61e 	bne	r3,zero,2005e08 <__fpcmp_parts_d+0x4c>
 2005e30:	f800283a 	ret
 2005e34:	39800a16 	blt	r7,r6,2005e60 <__fpcmp_parts_d+0xa4>
 2005e38:	20800417 	ldw	r2,16(r4)
 2005e3c:	29800417 	ldw	r6,16(r5)
 2005e40:	21c00317 	ldw	r7,12(r4)
 2005e44:	29000317 	ldw	r4,12(r5)
 2005e48:	30800936 	bltu	r6,r2,2005e70 <__fpcmp_parts_d+0xb4>
 2005e4c:	1180011e 	bne	r2,r6,2005e54 <__fpcmp_parts_d+0x98>
 2005e50:	21c00736 	bltu	r4,r7,2005e70 <__fpcmp_parts_d+0xb4>
 2005e54:	11800236 	bltu	r2,r6,2005e60 <__fpcmp_parts_d+0xa4>
 2005e58:	3080031e 	bne	r6,r2,2005e68 <__fpcmp_parts_d+0xac>
 2005e5c:	3900022e 	bgeu	r7,r4,2005e68 <__fpcmp_parts_d+0xac>
 2005e60:	183fe926 	beq	r3,zero,2005e08 <__fpcmp_parts_d+0x4c>
 2005e64:	003fec06 	br	2005e18 <__fpcmp_parts_d+0x5c>
 2005e68:	0005883a 	mov	r2,zero
 2005e6c:	f800283a 	ret
 2005e70:	183fe926 	beq	r3,zero,2005e18 <__fpcmp_parts_d+0x5c>
 2005e74:	003fe406 	br	2005e08 <__fpcmp_parts_d+0x4c>
 2005e78:	30ffe51e 	bne	r6,r3,2005e10 <__fpcmp_parts_d+0x54>
 2005e7c:	28c00117 	ldw	r3,4(r5)
 2005e80:	20800117 	ldw	r2,4(r4)
 2005e84:	1885c83a 	sub	r2,r3,r2
 2005e88:	f800283a 	ret

02005e8c <__lshrdi3>:
 2005e8c:	2005883a 	mov	r2,r4
 2005e90:	2807883a 	mov	r3,r5
 2005e94:	30000826 	beq	r6,zero,2005eb8 <__lshrdi3+0x2c>
 2005e98:	01000804 	movi	r4,32
 2005e9c:	2189c83a 	sub	r4,r4,r6
 2005ea0:	0100060e 	bge	zero,r4,2005ebc <__lshrdi3+0x30>
 2005ea4:	1184d83a 	srl	r2,r2,r6
 2005ea8:	2908983a 	sll	r4,r5,r4
 2005eac:	298cd83a 	srl	r6,r5,r6
 2005eb0:	2084b03a 	or	r2,r4,r2
 2005eb4:	3007883a 	mov	r3,r6
 2005eb8:	f800283a 	ret
 2005ebc:	0105c83a 	sub	r2,zero,r4
 2005ec0:	000d883a 	mov	r6,zero
 2005ec4:	2884d83a 	srl	r2,r5,r2
 2005ec8:	3007883a 	mov	r3,r6
 2005ecc:	003ffa06 	br	2005eb8 <__lshrdi3+0x2c>

02005ed0 <__ashldi3>:
 2005ed0:	2005883a 	mov	r2,r4
 2005ed4:	2807883a 	mov	r3,r5
 2005ed8:	30000826 	beq	r6,zero,2005efc <__ashldi3+0x2c>
 2005edc:	01000804 	movi	r4,32
 2005ee0:	2189c83a 	sub	r4,r4,r6
 2005ee4:	0100060e 	bge	zero,r4,2005f00 <__ashldi3+0x30>
 2005ee8:	1108d83a 	srl	r4,r2,r4
 2005eec:	2986983a 	sll	r3,r5,r6
 2005ef0:	118c983a 	sll	r6,r2,r6
 2005ef4:	20c6b03a 	or	r3,r4,r3
 2005ef8:	3005883a 	mov	r2,r6
 2005efc:	f800283a 	ret
 2005f00:	0107c83a 	sub	r3,zero,r4
 2005f04:	000d883a 	mov	r6,zero
 2005f08:	10c6983a 	sll	r3,r2,r3
 2005f0c:	3005883a 	mov	r2,r6
 2005f10:	003ffa06 	br	2005efc <__ashldi3+0x2c>

02005f14 <_printf_r>:
 2005f14:	defffd04 	addi	sp,sp,-12
 2005f18:	dfc00015 	stw	ra,0(sp)
 2005f1c:	d9800115 	stw	r6,4(sp)
 2005f20:	d9c00215 	stw	r7,8(sp)
 2005f24:	280d883a 	mov	r6,r5
 2005f28:	21400217 	ldw	r5,8(r4)
 2005f2c:	d9c00104 	addi	r7,sp,4
 2005f30:	2005fb00 	call	2005fb0 <___vfprintf_internal_r>
 2005f34:	dfc00017 	ldw	ra,0(sp)
 2005f38:	dec00304 	addi	sp,sp,12
 2005f3c:	f800283a 	ret

02005f40 <printf>:
 2005f40:	defffc04 	addi	sp,sp,-16
 2005f44:	dfc00015 	stw	ra,0(sp)
 2005f48:	d9400115 	stw	r5,4(sp)
 2005f4c:	d9800215 	stw	r6,8(sp)
 2005f50:	d9c00315 	stw	r7,12(sp)
 2005f54:	00808074 	movhi	r2,513
 2005f58:	108e7804 	addi	r2,r2,14816
 2005f5c:	10800017 	ldw	r2,0(r2)
 2005f60:	200b883a 	mov	r5,r4
 2005f64:	d9800104 	addi	r6,sp,4
 2005f68:	11000217 	ldw	r4,8(r2)
 2005f6c:	2007da80 	call	2007da8 <__vfprintf_internal>
 2005f70:	dfc00017 	ldw	ra,0(sp)
 2005f74:	dec00404 	addi	sp,sp,16
 2005f78:	f800283a 	ret

02005f7c <__sprint_r>:
 2005f7c:	30800217 	ldw	r2,8(r6)
 2005f80:	defffe04 	addi	sp,sp,-8
 2005f84:	dc000015 	stw	r16,0(sp)
 2005f88:	dfc00115 	stw	ra,4(sp)
 2005f8c:	3021883a 	mov	r16,r6
 2005f90:	10000226 	beq	r2,zero,2005f9c <__sprint_r+0x20>
 2005f94:	200a0600 	call	200a060 <__sfvwrite_r>
 2005f98:	80000215 	stw	zero,8(r16)
 2005f9c:	80000115 	stw	zero,4(r16)
 2005fa0:	dfc00117 	ldw	ra,4(sp)
 2005fa4:	dc000017 	ldw	r16,0(sp)
 2005fa8:	dec00204 	addi	sp,sp,8
 2005fac:	f800283a 	ret

02005fb0 <___vfprintf_internal_r>:
 2005fb0:	defeb904 	addi	sp,sp,-1308
 2005fb4:	dc013d15 	stw	r16,1268(sp)
 2005fb8:	d9013015 	stw	r4,1216(sp)
 2005fbc:	dfc14615 	stw	ra,1304(sp)
 2005fc0:	df014515 	stw	fp,1300(sp)
 2005fc4:	ddc14415 	stw	r23,1296(sp)
 2005fc8:	dd814315 	stw	r22,1292(sp)
 2005fcc:	dd414215 	stw	r21,1288(sp)
 2005fd0:	dd014115 	stw	r20,1284(sp)
 2005fd4:	dcc14015 	stw	r19,1280(sp)
 2005fd8:	dc813f15 	stw	r18,1276(sp)
 2005fdc:	dc413e15 	stw	r17,1272(sp)
 2005fe0:	d9412915 	stw	r5,1188(sp)
 2005fe4:	3021883a 	mov	r16,r6
 2005fe8:	d9c12d15 	stw	r7,1204(sp)
 2005fec:	200a74c0 	call	200a74c <_localeconv_r>
 2005ff0:	10800017 	ldw	r2,0(r2)
 2005ff4:	d9013017 	ldw	r4,1216(sp)
 2005ff8:	d8013315 	stw	zero,1228(sp)
 2005ffc:	d8813715 	stw	r2,1244(sp)
 2006000:	d8013415 	stw	zero,1232(sp)
 2006004:	20000226 	beq	r4,zero,2006010 <___vfprintf_internal_r+0x60>
 2006008:	20800e17 	ldw	r2,56(r4)
 200600c:	10019826 	beq	r2,zero,2006670 <___vfprintf_internal_r+0x6c0>
 2006010:	da012917 	ldw	r8,1188(sp)
 2006014:	4080030b 	ldhu	r2,12(r8)
 2006018:	10c0020c 	andi	r3,r2,8
 200601c:	18ffffcc 	andi	r3,r3,65535
 2006020:	18e0001c 	xori	r3,r3,32768
 2006024:	18e00004 	addi	r3,r3,-32768
 2006028:	18013a26 	beq	r3,zero,2006514 <___vfprintf_internal_r+0x564>
 200602c:	40c00417 	ldw	r3,16(r8)
 2006030:	18013826 	beq	r3,zero,2006514 <___vfprintf_internal_r+0x564>
 2006034:	1100068c 	andi	r4,r2,26
 2006038:	00c00284 	movi	r3,10
 200603c:	20c13e26 	beq	r4,r3,2006538 <___vfprintf_internal_r+0x588>
 2006040:	da010dc4 	addi	r8,sp,1079
 2006044:	d8800404 	addi	r2,sp,16
 2006048:	da012615 	stw	r8,1176(sp)
 200604c:	d8811b15 	stw	r2,1132(sp)
 2006050:	1013883a 	mov	r9,r2
 2006054:	d8812617 	ldw	r2,1176(sp)
 2006058:	da010e04 	addi	r8,sp,1080
 200605c:	dc413017 	ldw	r17,1216(sp)
 2006060:	da012715 	stw	r8,1180(sp)
 2006064:	4091c83a 	sub	r8,r8,r2
 2006068:	d8011d15 	stw	zero,1140(sp)
 200606c:	d8011c15 	stw	zero,1136(sp)
 2006070:	802b883a 	mov	r21,r16
 2006074:	d8013215 	stw	zero,1224(sp)
 2006078:	d8013615 	stw	zero,1240(sp)
 200607c:	d8013515 	stw	zero,1236(sp)
 2006080:	d8012c15 	stw	zero,1200(sp)
 2006084:	da013915 	stw	r8,1252(sp)
 2006088:	a8800007 	ldb	r2,0(r21)
 200608c:	1002ec26 	beq	r2,zero,2006c40 <___vfprintf_internal_r+0xc90>
 2006090:	00c00944 	movi	r3,37
 2006094:	a825883a 	mov	r18,r21
 2006098:	10c0021e 	bne	r2,r3,20060a4 <___vfprintf_internal_r+0xf4>
 200609c:	00001406 	br	20060f0 <___vfprintf_internal_r+0x140>
 20060a0:	10c00326 	beq	r2,r3,20060b0 <___vfprintf_internal_r+0x100>
 20060a4:	94800044 	addi	r18,r18,1
 20060a8:	90800007 	ldb	r2,0(r18)
 20060ac:	103ffc1e 	bne	r2,zero,20060a0 <___vfprintf_internal_r+0xf0>
 20060b0:	9561c83a 	sub	r16,r18,r21
 20060b4:	80000e26 	beq	r16,zero,20060f0 <___vfprintf_internal_r+0x140>
 20060b8:	da011d17 	ldw	r8,1140(sp)
 20060bc:	d8c11c17 	ldw	r3,1136(sp)
 20060c0:	4d400015 	stw	r21,0(r9)
 20060c4:	4c000115 	stw	r16,4(r9)
 20060c8:	4411883a 	add	r8,r8,r16
 20060cc:	18c00044 	addi	r3,r3,1
 20060d0:	da011d15 	stw	r8,1140(sp)
 20060d4:	d8c11c15 	stw	r3,1136(sp)
 20060d8:	008001c4 	movi	r2,7
 20060dc:	10c15d16 	blt	r2,r3,2006654 <___vfprintf_internal_r+0x6a4>
 20060e0:	4a400204 	addi	r9,r9,8
 20060e4:	d8812c17 	ldw	r2,1200(sp)
 20060e8:	1405883a 	add	r2,r2,r16
 20060ec:	d8812c15 	stw	r2,1200(sp)
 20060f0:	90800007 	ldb	r2,0(r18)
 20060f4:	10013b26 	beq	r2,zero,20065e4 <___vfprintf_internal_r+0x634>
 20060f8:	95400044 	addi	r21,r18,1
 20060fc:	94800047 	ldb	r18,1(r18)
 2006100:	d8012585 	stb	zero,1174(sp)
 2006104:	073fffc4 	movi	fp,-1
 2006108:	d8012e15 	stw	zero,1208(sp)
 200610c:	0021883a 	mov	r16,zero
 2006110:	00c01604 	movi	r3,88
 2006114:	01400244 	movi	r5,9
 2006118:	02800a84 	movi	r10,42
 200611c:	01c01b04 	movi	r7,108
 2006120:	01800ac4 	movi	r6,43
 2006124:	02c00804 	movi	r11,32
 2006128:	ad400044 	addi	r21,r21,1
 200612c:	90bff804 	addi	r2,r18,-32
 2006130:	1880092e 	bgeu	r3,r2,2006158 <___vfprintf_internal_r+0x1a8>
 2006134:	90012b26 	beq	r18,zero,20065e4 <___vfprintf_internal_r+0x634>
 2006138:	00c00044 	movi	r3,1
 200613c:	d8c12815 	stw	r3,1184(sp)
 2006140:	dc810405 	stb	r18,1040(sp)
 2006144:	d8012585 	stb	zero,1174(sp)
 2006148:	d8c12b15 	stw	r3,1196(sp)
 200614c:	dcc10404 	addi	r19,sp,1040
 2006150:	d8013115 	stw	zero,1220(sp)
 2006154:	00008806 	br	2006378 <___vfprintf_internal_r+0x3c8>
 2006158:	1085883a 	add	r2,r2,r2
 200615c:	1085883a 	add	r2,r2,r2
 2006160:	01008034 	movhi	r4,512
 2006164:	21185d04 	addi	r4,r4,24948
 2006168:	1105883a 	add	r2,r2,r4
 200616c:	10800017 	ldw	r2,0(r2)
 2006170:	1000683a 	jmp	r2
 2006174:	02006728 	cmpgeui	r8,zero,412
 2006178:	02006134 	movhi	r8,388
 200617c:	02006134 	movhi	r8,388
 2006180:	0200673c 	xorhi	r8,zero,412
 2006184:	02006134 	movhi	r8,388
 2006188:	02006134 	movhi	r8,388
 200618c:	02006134 	movhi	r8,388
 2006190:	02006134 	movhi	r8,388
 2006194:	02006134 	movhi	r8,388
 2006198:	02006134 	movhi	r8,388
 200619c:	02006824 	muli	r8,zero,416
 20061a0:	020066e0 	cmpeqi	r8,zero,411
 20061a4:	02006134 	movhi	r8,388
 20061a8:	02006508 	cmpgei	r8,zero,404
 20061ac:	020066ec 	andhi	r8,zero,411
 20061b0:	02006134 	movhi	r8,388
 20061b4:	02006748 	cmpgei	r8,zero,413
 20061b8:	02006848 	cmpgei	r8,zero,417
 20061bc:	02006848 	cmpgei	r8,zero,417
 20061c0:	02006848 	cmpgei	r8,zero,417
 20061c4:	02006848 	cmpgei	r8,zero,417
 20061c8:	02006848 	cmpgei	r8,zero,417
 20061cc:	02006848 	cmpgei	r8,zero,417
 20061d0:	02006848 	cmpgei	r8,zero,417
 20061d4:	02006848 	cmpgei	r8,zero,417
 20061d8:	02006848 	cmpgei	r8,zero,417
 20061dc:	02006134 	movhi	r8,388
 20061e0:	02006134 	movhi	r8,388
 20061e4:	02006134 	movhi	r8,388
 20061e8:	02006134 	movhi	r8,388
 20061ec:	02006134 	movhi	r8,388
 20061f0:	02006134 	movhi	r8,388
 20061f4:	02006134 	movhi	r8,388
 20061f8:	02006134 	movhi	r8,388
 20061fc:	02006134 	movhi	r8,388
 2006200:	02006134 	movhi	r8,388
 2006204:	020064a4 	muli	r8,zero,402
 2006208:	02006870 	cmpltui	r8,zero,417
 200620c:	02006134 	movhi	r8,388
 2006210:	02006870 	cmpltui	r8,zero,417
 2006214:	02006134 	movhi	r8,388
 2006218:	02006134 	movhi	r8,388
 200621c:	02006134 	movhi	r8,388
 2006220:	02006134 	movhi	r8,388
 2006224:	020069e0 	cmpeqi	r8,zero,423
 2006228:	02006134 	movhi	r8,388
 200622c:	02006134 	movhi	r8,388
 2006230:	0200646c 	andhi	r8,zero,401
 2006234:	02006134 	movhi	r8,388
 2006238:	02006134 	movhi	r8,388
 200623c:	02006134 	movhi	r8,388
 2006240:	02006134 	movhi	r8,388
 2006244:	02006134 	movhi	r8,388
 2006248:	020062d8 	cmpnei	r8,zero,395
 200624c:	02006134 	movhi	r8,388
 2006250:	02006134 	movhi	r8,388
 2006254:	02006754 	movui	r8,413
 2006258:	02006134 	movhi	r8,388
 200625c:	02006134 	movhi	r8,388
 2006260:	02006134 	movhi	r8,388
 2006264:	02006134 	movhi	r8,388
 2006268:	02006134 	movhi	r8,388
 200626c:	02006134 	movhi	r8,388
 2006270:	02006134 	movhi	r8,388
 2006274:	02006134 	movhi	r8,388
 2006278:	02006134 	movhi	r8,388
 200627c:	02006134 	movhi	r8,388
 2006280:	020067c8 	cmpgei	r8,zero,415
 2006284:	020064a8 	cmpgeui	r8,zero,402
 2006288:	02006870 	cmpltui	r8,zero,417
 200628c:	02006870 	cmpltui	r8,zero,417
 2006290:	02006870 	cmpltui	r8,zero,417
 2006294:	020067a8 	cmpgeui	r8,zero,414
 2006298:	020064a8 	cmpgeui	r8,zero,402
 200629c:	02006134 	movhi	r8,388
 20062a0:	02006134 	movhi	r8,388
 20062a4:	020067b4 	movhi	r8,414
 20062a8:	02006134 	movhi	r8,388
 20062ac:	020067f8 	rdprs	r8,zero,415
 20062b0:	02006470 	cmpltui	r8,zero,401
 20062b4:	020068f8 	rdprs	r8,zero,419
 20062b8:	02006944 	movi	r8,421
 20062bc:	02006134 	movhi	r8,388
 20062c0:	02006950 	cmplti	r8,zero,421
 20062c4:	02006134 	movhi	r8,388
 20062c8:	020062dc 	xori	r8,zero,395
 20062cc:	02006134 	movhi	r8,388
 20062d0:	02006134 	movhi	r8,388
 20062d4:	020069ac 	andhi	r8,zero,422
 20062d8:	84000414 	ori	r16,r16,16
 20062dc:	8080080c 	andi	r2,r16,32
 20062e0:	1000f51e 	bne	r2,zero,20066b8 <___vfprintf_internal_r+0x708>
 20062e4:	8080040c 	andi	r2,r16,16
 20062e8:	10042c26 	beq	r2,zero,200739c <___vfprintf_internal_r+0x13ec>
 20062ec:	da012d17 	ldw	r8,1204(sp)
 20062f0:	002d883a 	mov	r22,zero
 20062f4:	00c00044 	movi	r3,1
 20062f8:	45c00017 	ldw	r23,0(r8)
 20062fc:	42000104 	addi	r8,r8,4
 2006300:	da012d15 	stw	r8,1204(sp)
 2006304:	b805883a 	mov	r2,r23
 2006308:	d8012585 	stb	zero,1174(sp)
 200630c:	e0000216 	blt	fp,zero,2006318 <___vfprintf_internal_r+0x368>
 2006310:	013fdfc4 	movi	r4,-129
 2006314:	8120703a 	and	r16,r16,r4
 2006318:	1002671e 	bne	r2,zero,2006cb8 <___vfprintf_internal_r+0xd08>
 200631c:	e002661e 	bne	fp,zero,2006cb8 <___vfprintf_internal_r+0xd08>
 2006320:	18c03fcc 	andi	r3,r3,255
 2006324:	1803561e 	bne	r3,zero,2007080 <___vfprintf_internal_r+0x10d0>
 2006328:	8080004c 	andi	r2,r16,1
 200632c:	10035426 	beq	r2,zero,2007080 <___vfprintf_internal_r+0x10d0>
 2006330:	da013917 	ldw	r8,1252(sp)
 2006334:	00800c04 	movi	r2,48
 2006338:	d8810dc5 	stb	r2,1079(sp)
 200633c:	da012b15 	stw	r8,1196(sp)
 2006340:	dcc10dc4 	addi	r19,sp,1079
 2006344:	d8812b17 	ldw	r2,1196(sp)
 2006348:	d8812815 	stw	r2,1184(sp)
 200634c:	1700010e 	bge	r2,fp,2006354 <___vfprintf_internal_r+0x3a4>
 2006350:	df012815 	stw	fp,1184(sp)
 2006354:	d8812583 	ldbu	r2,1174(sp)
 2006358:	df013115 	stw	fp,1220(sp)
 200635c:	10803fcc 	andi	r2,r2,255
 2006360:	1080201c 	xori	r2,r2,128
 2006364:	10bfe004 	addi	r2,r2,-128
 2006368:	10000326 	beq	r2,zero,2006378 <___vfprintf_internal_r+0x3c8>
 200636c:	da012817 	ldw	r8,1184(sp)
 2006370:	42000044 	addi	r8,r8,1
 2006374:	da012815 	stw	r8,1184(sp)
 2006378:	80c0008c 	andi	r3,r16,2
 200637c:	d8c12a15 	stw	r3,1192(sp)
 2006380:	18000326 	beq	r3,zero,2006390 <___vfprintf_internal_r+0x3e0>
 2006384:	da012817 	ldw	r8,1184(sp)
 2006388:	42000084 	addi	r8,r8,2
 200638c:	da012815 	stw	r8,1184(sp)
 2006390:	80c0210c 	andi	r3,r16,132
 2006394:	d8c12f15 	stw	r3,1212(sp)
 2006398:	1801941e 	bne	r3,zero,20069ec <___vfprintf_internal_r+0xa3c>
 200639c:	da012e17 	ldw	r8,1208(sp)
 20063a0:	d8c12817 	ldw	r3,1184(sp)
 20063a4:	40edc83a 	sub	r22,r8,r3
 20063a8:	0581900e 	bge	zero,r22,20069ec <___vfprintf_internal_r+0xa3c>
 20063ac:	02800404 	movi	r10,16
 20063b0:	da011d17 	ldw	r8,1140(sp)
 20063b4:	d8c11c17 	ldw	r3,1136(sp)
 20063b8:	05c08074 	movhi	r23,513
 20063bc:	bdc74684 	addi	r23,r23,7450
 20063c0:	5580200e 	bge	r10,r22,2006444 <___vfprintf_internal_r+0x494>
 20063c4:	dc813815 	stw	r18,1248(sp)
 20063c8:	5039883a 	mov	fp,r10
 20063cc:	b825883a 	mov	r18,r23
 20063d0:	050001c4 	movi	r20,7
 20063d4:	b02f883a 	mov	r23,r22
 20063d8:	802d883a 	mov	r22,r16
 20063dc:	dc012917 	ldw	r16,1188(sp)
 20063e0:	00000306 	br	20063f0 <___vfprintf_internal_r+0x440>
 20063e4:	bdfffc04 	addi	r23,r23,-16
 20063e8:	4a400204 	addi	r9,r9,8
 20063ec:	e5c0110e 	bge	fp,r23,2006434 <___vfprintf_internal_r+0x484>
 20063f0:	4c800015 	stw	r18,0(r9)
 20063f4:	4f000115 	stw	fp,4(r9)
 20063f8:	42000404 	addi	r8,r8,16
 20063fc:	18c00044 	addi	r3,r3,1
 2006400:	da011d15 	stw	r8,1140(sp)
 2006404:	d8c11c15 	stw	r3,1136(sp)
 2006408:	a0fff60e 	bge	r20,r3,20063e4 <___vfprintf_internal_r+0x434>
 200640c:	8809883a 	mov	r4,r17
 2006410:	800b883a 	mov	r5,r16
 2006414:	d9811b04 	addi	r6,sp,1132
 2006418:	2005f7c0 	call	2005f7c <__sprint_r>
 200641c:	1000771e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006420:	bdfffc04 	addi	r23,r23,-16
 2006424:	da011d17 	ldw	r8,1140(sp)
 2006428:	d8c11c17 	ldw	r3,1136(sp)
 200642c:	da400404 	addi	r9,sp,16
 2006430:	e5ffef16 	blt	fp,r23,20063f0 <___vfprintf_internal_r+0x440>
 2006434:	b021883a 	mov	r16,r22
 2006438:	b82d883a 	mov	r22,r23
 200643c:	902f883a 	mov	r23,r18
 2006440:	dc813817 	ldw	r18,1248(sp)
 2006444:	4dc00015 	stw	r23,0(r9)
 2006448:	4d800115 	stw	r22,4(r9)
 200644c:	4591883a 	add	r8,r8,r22
 2006450:	18c00044 	addi	r3,r3,1
 2006454:	da011d15 	stw	r8,1140(sp)
 2006458:	d8c11c15 	stw	r3,1136(sp)
 200645c:	008001c4 	movi	r2,7
 2006460:	10c36d16 	blt	r2,r3,2007218 <___vfprintf_internal_r+0x1268>
 2006464:	4a400204 	addi	r9,r9,8
 2006468:	00016206 	br	20069f4 <___vfprintf_internal_r+0xa44>
 200646c:	84000414 	ori	r16,r16,16
 2006470:	8080080c 	andi	r2,r16,32
 2006474:	1000801e 	bne	r2,zero,2006678 <___vfprintf_internal_r+0x6c8>
 2006478:	8080040c 	andi	r2,r16,16
 200647c:	1003da26 	beq	r2,zero,20073e8 <___vfprintf_internal_r+0x1438>
 2006480:	d8c12d17 	ldw	r3,1204(sp)
 2006484:	002d883a 	mov	r22,zero
 2006488:	1dc00017 	ldw	r23,0(r3)
 200648c:	18c00104 	addi	r3,r3,4
 2006490:	d8c12d15 	stw	r3,1204(sp)
 2006494:	b805883a 	mov	r2,r23
 2006498:	0007883a 	mov	r3,zero
 200649c:	d8012585 	stb	zero,1174(sp)
 20064a0:	003f9a06 	br	200630c <___vfprintf_internal_r+0x35c>
 20064a4:	84000414 	ori	r16,r16,16
 20064a8:	8080080c 	andi	r2,r16,32
 20064ac:	10007b1e 	bne	r2,zero,200669c <___vfprintf_internal_r+0x6ec>
 20064b0:	8080040c 	andi	r2,r16,16
 20064b4:	1003ed26 	beq	r2,zero,200746c <___vfprintf_internal_r+0x14bc>
 20064b8:	d9012d17 	ldw	r4,1204(sp)
 20064bc:	25c00017 	ldw	r23,0(r4)
 20064c0:	21000104 	addi	r4,r4,4
 20064c4:	d9012d15 	stw	r4,1204(sp)
 20064c8:	b82dd7fa 	srai	r22,r23,31
 20064cc:	b005883a 	mov	r2,r22
 20064d0:	1003230e 	bge	r2,zero,2007160 <___vfprintf_internal_r+0x11b0>
 20064d4:	05efc83a 	sub	r23,zero,r23
 20064d8:	b804c03a 	cmpne	r2,r23,zero
 20064dc:	05adc83a 	sub	r22,zero,r22
 20064e0:	b0adc83a 	sub	r22,r22,r2
 20064e4:	00800b44 	movi	r2,45
 20064e8:	d8812585 	stb	r2,1174(sp)
 20064ec:	00c00044 	movi	r3,1
 20064f0:	bd84b03a 	or	r2,r23,r22
 20064f4:	003f8506 	br	200630c <___vfprintf_internal_r+0x35c>
 20064f8:	da012e17 	ldw	r8,1208(sp)
 20064fc:	d8812d15 	stw	r2,1204(sp)
 2006500:	0211c83a 	sub	r8,zero,r8
 2006504:	da012e15 	stw	r8,1208(sp)
 2006508:	84000114 	ori	r16,r16,4
 200650c:	ac800007 	ldb	r18,0(r21)
 2006510:	003f0506 	br	2006128 <___vfprintf_internal_r+0x178>
 2006514:	d9013017 	ldw	r4,1216(sp)
 2006518:	d9412917 	ldw	r5,1188(sp)
 200651c:	2007dcc0 	call	2007dcc <__swsetup_r>
 2006520:	10003d1e 	bne	r2,zero,2006618 <___vfprintf_internal_r+0x668>
 2006524:	d8c12917 	ldw	r3,1188(sp)
 2006528:	1880030b 	ldhu	r2,12(r3)
 200652c:	00c00284 	movi	r3,10
 2006530:	1100068c 	andi	r4,r2,26
 2006534:	20fec21e 	bne	r4,r3,2006040 <___vfprintf_internal_r+0x90>
 2006538:	d9012917 	ldw	r4,1188(sp)
 200653c:	20c0038b 	ldhu	r3,14(r4)
 2006540:	193fffcc 	andi	r4,r3,65535
 2006544:	2120001c 	xori	r4,r4,32768
 2006548:	21200004 	addi	r4,r4,-32768
 200654c:	203ebc16 	blt	r4,zero,2006040 <___vfprintf_internal_r+0x90>
 2006550:	da012917 	ldw	r8,1188(sp)
 2006554:	d9013017 	ldw	r4,1216(sp)
 2006558:	d9c12d17 	ldw	r7,1204(sp)
 200655c:	42800717 	ldw	r10,28(r8)
 2006560:	42400917 	ldw	r9,36(r8)
 2006564:	10bfff4c 	andi	r2,r2,65533
 2006568:	02010004 	movi	r8,1024
 200656c:	d881070d 	sth	r2,1052(sp)
 2006570:	d9410404 	addi	r5,sp,1040
 2006574:	d8800404 	addi	r2,sp,16
 2006578:	800d883a 	mov	r6,r16
 200657c:	d8c1078d 	sth	r3,1054(sp)
 2006580:	da810b15 	stw	r10,1068(sp)
 2006584:	da410d15 	stw	r9,1076(sp)
 2006588:	d8810415 	stw	r2,1040(sp)
 200658c:	d8810815 	stw	r2,1056(sp)
 2006590:	da010615 	stw	r8,1048(sp)
 2006594:	da010915 	stw	r8,1060(sp)
 2006598:	d8010a15 	stw	zero,1064(sp)
 200659c:	2005fb00 	call	2005fb0 <___vfprintf_internal_r>
 20065a0:	d8812c15 	stw	r2,1200(sp)
 20065a4:	10000416 	blt	r2,zero,20065b8 <___vfprintf_internal_r+0x608>
 20065a8:	d9013017 	ldw	r4,1216(sp)
 20065ac:	d9410404 	addi	r5,sp,1040
 20065b0:	20097640 	call	2009764 <_fflush_r>
 20065b4:	1005d81e 	bne	r2,zero,2007d18 <___vfprintf_internal_r+0x1d68>
 20065b8:	d881070b 	ldhu	r2,1052(sp)
 20065bc:	1080100c 	andi	r2,r2,64
 20065c0:	10bfffcc 	andi	r2,r2,65535
 20065c4:	10a0001c 	xori	r2,r2,32768
 20065c8:	10a00004 	addi	r2,r2,-32768
 20065cc:	10001426 	beq	r2,zero,2006620 <___vfprintf_internal_r+0x670>
 20065d0:	d8c12917 	ldw	r3,1188(sp)
 20065d4:	1880030b 	ldhu	r2,12(r3)
 20065d8:	10801014 	ori	r2,r2,64
 20065dc:	1880030d 	sth	r2,12(r3)
 20065e0:	00000f06 	br	2006620 <___vfprintf_internal_r+0x670>
 20065e4:	d8811d17 	ldw	r2,1140(sp)
 20065e8:	10000426 	beq	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 20065ec:	d9013017 	ldw	r4,1216(sp)
 20065f0:	d9412917 	ldw	r5,1188(sp)
 20065f4:	d9811b04 	addi	r6,sp,1132
 20065f8:	2005f7c0 	call	2005f7c <__sprint_r>
 20065fc:	d8c12917 	ldw	r3,1188(sp)
 2006600:	1880030b 	ldhu	r2,12(r3)
 2006604:	1080100c 	andi	r2,r2,64
 2006608:	10bfffcc 	andi	r2,r2,65535
 200660c:	10a0001c 	xori	r2,r2,32768
 2006610:	10a00004 	addi	r2,r2,-32768
 2006614:	10000226 	beq	r2,zero,2006620 <___vfprintf_internal_r+0x670>
 2006618:	00bfffc4 	movi	r2,-1
 200661c:	d8812c15 	stw	r2,1200(sp)
 2006620:	d8812c17 	ldw	r2,1200(sp)
 2006624:	dfc14617 	ldw	ra,1304(sp)
 2006628:	df014517 	ldw	fp,1300(sp)
 200662c:	ddc14417 	ldw	r23,1296(sp)
 2006630:	dd814317 	ldw	r22,1292(sp)
 2006634:	dd414217 	ldw	r21,1288(sp)
 2006638:	dd014117 	ldw	r20,1284(sp)
 200663c:	dcc14017 	ldw	r19,1280(sp)
 2006640:	dc813f17 	ldw	r18,1276(sp)
 2006644:	dc413e17 	ldw	r17,1272(sp)
 2006648:	dc013d17 	ldw	r16,1268(sp)
 200664c:	dec14704 	addi	sp,sp,1308
 2006650:	f800283a 	ret
 2006654:	d9412917 	ldw	r5,1188(sp)
 2006658:	8809883a 	mov	r4,r17
 200665c:	d9811b04 	addi	r6,sp,1132
 2006660:	2005f7c0 	call	2005f7c <__sprint_r>
 2006664:	103fe51e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006668:	da400404 	addi	r9,sp,16
 200666c:	003e9d06 	br	20060e4 <___vfprintf_internal_r+0x134>
 2006670:	2009a0c0 	call	2009a0c <__sinit>
 2006674:	003e6606 	br	2006010 <___vfprintf_internal_r+0x60>
 2006678:	d8812d17 	ldw	r2,1204(sp)
 200667c:	0007883a 	mov	r3,zero
 2006680:	15c00017 	ldw	r23,0(r2)
 2006684:	15800117 	ldw	r22,4(r2)
 2006688:	10800204 	addi	r2,r2,8
 200668c:	d8812d15 	stw	r2,1204(sp)
 2006690:	d8012585 	stb	zero,1174(sp)
 2006694:	bd84b03a 	or	r2,r23,r22
 2006698:	003f1c06 	br	200630c <___vfprintf_internal_r+0x35c>
 200669c:	d8c12d17 	ldw	r3,1204(sp)
 20066a0:	18800117 	ldw	r2,4(r3)
 20066a4:	1dc00017 	ldw	r23,0(r3)
 20066a8:	18c00204 	addi	r3,r3,8
 20066ac:	d8c12d15 	stw	r3,1204(sp)
 20066b0:	102d883a 	mov	r22,r2
 20066b4:	003f8606 	br	20064d0 <___vfprintf_internal_r+0x520>
 20066b8:	d8c12d17 	ldw	r3,1204(sp)
 20066bc:	d9012d17 	ldw	r4,1204(sp)
 20066c0:	1dc00017 	ldw	r23,0(r3)
 20066c4:	1d800117 	ldw	r22,4(r3)
 20066c8:	21000204 	addi	r4,r4,8
 20066cc:	00c00044 	movi	r3,1
 20066d0:	d9012d15 	stw	r4,1204(sp)
 20066d4:	bd84b03a 	or	r2,r23,r22
 20066d8:	d8012585 	stb	zero,1174(sp)
 20066dc:	003f0b06 	br	200630c <___vfprintf_internal_r+0x35c>
 20066e0:	d9812585 	stb	r6,1174(sp)
 20066e4:	ac800007 	ldb	r18,0(r21)
 20066e8:	003e8f06 	br	2006128 <___vfprintf_internal_r+0x178>
 20066ec:	ac800007 	ldb	r18,0(r21)
 20066f0:	a9000044 	addi	r4,r21,1
 20066f4:	92857d26 	beq	r18,r10,2007cec <___vfprintf_internal_r+0x1d3c>
 20066f8:	90bff404 	addi	r2,r18,-48
 20066fc:	0039883a 	mov	fp,zero
 2006700:	28800736 	bltu	r5,r2,2006720 <___vfprintf_internal_r+0x770>
 2006704:	24800007 	ldb	r18,0(r4)
 2006708:	e70002a4 	muli	fp,fp,10
 200670c:	21000044 	addi	r4,r4,1
 2006710:	1739883a 	add	fp,r2,fp
 2006714:	90bff404 	addi	r2,r18,-48
 2006718:	28bffa2e 	bgeu	r5,r2,2006704 <___vfprintf_internal_r+0x754>
 200671c:	e0044216 	blt	fp,zero,2007828 <___vfprintf_internal_r+0x1878>
 2006720:	202b883a 	mov	r21,r4
 2006724:	003e8106 	br	200612c <___vfprintf_internal_r+0x17c>
 2006728:	d8812587 	ldb	r2,1174(sp)
 200672c:	1003581e 	bne	r2,zero,2007490 <___vfprintf_internal_r+0x14e0>
 2006730:	dac12585 	stb	r11,1174(sp)
 2006734:	ac800007 	ldb	r18,0(r21)
 2006738:	003e7b06 	br	2006128 <___vfprintf_internal_r+0x178>
 200673c:	84000054 	ori	r16,r16,1
 2006740:	ac800007 	ldb	r18,0(r21)
 2006744:	003e7806 	br	2006128 <___vfprintf_internal_r+0x178>
 2006748:	84002014 	ori	r16,r16,128
 200674c:	ac800007 	ldb	r18,0(r21)
 2006750:	003e7506 	br	2006128 <___vfprintf_internal_r+0x178>
 2006754:	02008074 	movhi	r8,513
 2006758:	42073a04 	addi	r8,r8,7400
 200675c:	da013615 	stw	r8,1240(sp)
 2006760:	8080080c 	andi	r2,r16,32
 2006764:	10009626 	beq	r2,zero,20069c0 <___vfprintf_internal_r+0xa10>
 2006768:	d8812d17 	ldw	r2,1204(sp)
 200676c:	15c00017 	ldw	r23,0(r2)
 2006770:	15800117 	ldw	r22,4(r2)
 2006774:	10800204 	addi	r2,r2,8
 2006778:	d8812d15 	stw	r2,1204(sp)
 200677c:	8080004c 	andi	r2,r16,1
 2006780:	1002ae26 	beq	r2,zero,200723c <___vfprintf_internal_r+0x128c>
 2006784:	bd84b03a 	or	r2,r23,r22
 2006788:	10032a26 	beq	r2,zero,2007434 <___vfprintf_internal_r+0x1484>
 200678c:	00c00c04 	movi	r3,48
 2006790:	d8c12505 	stb	r3,1172(sp)
 2006794:	dc812545 	stb	r18,1173(sp)
 2006798:	84000094 	ori	r16,r16,2
 200679c:	00c00084 	movi	r3,2
 20067a0:	d8012585 	stb	zero,1174(sp)
 20067a4:	003ed906 	br	200630c <___vfprintf_internal_r+0x35c>
 20067a8:	84001014 	ori	r16,r16,64
 20067ac:	ac800007 	ldb	r18,0(r21)
 20067b0:	003e5d06 	br	2006128 <___vfprintf_internal_r+0x178>
 20067b4:	ac800007 	ldb	r18,0(r21)
 20067b8:	a805883a 	mov	r2,r21
 20067bc:	91c43226 	beq	r18,r7,2007888 <___vfprintf_internal_r+0x18d8>
 20067c0:	84000414 	ori	r16,r16,16
 20067c4:	003e5806 	br	2006128 <___vfprintf_internal_r+0x178>
 20067c8:	d8c12d17 	ldw	r3,1204(sp)
 20067cc:	02000044 	movi	r8,1
 20067d0:	da012815 	stw	r8,1184(sp)
 20067d4:	18800017 	ldw	r2,0(r3)
 20067d8:	18c00104 	addi	r3,r3,4
 20067dc:	d8012585 	stb	zero,1174(sp)
 20067e0:	d8810405 	stb	r2,1040(sp)
 20067e4:	d8c12d15 	stw	r3,1204(sp)
 20067e8:	da012b15 	stw	r8,1196(sp)
 20067ec:	dcc10404 	addi	r19,sp,1040
 20067f0:	d8013115 	stw	zero,1220(sp)
 20067f4:	003ee006 	br	2006378 <___vfprintf_internal_r+0x3c8>
 20067f8:	8080080c 	andi	r2,r16,32
 20067fc:	10031026 	beq	r2,zero,2007440 <___vfprintf_internal_r+0x1490>
 2006800:	d9012d17 	ldw	r4,1204(sp)
 2006804:	da012c17 	ldw	r8,1200(sp)
 2006808:	20800017 	ldw	r2,0(r4)
 200680c:	4007d7fa 	srai	r3,r8,31
 2006810:	21000104 	addi	r4,r4,4
 2006814:	d9012d15 	stw	r4,1204(sp)
 2006818:	12000015 	stw	r8,0(r2)
 200681c:	10c00115 	stw	r3,4(r2)
 2006820:	003e1906 	br	2006088 <___vfprintf_internal_r+0xd8>
 2006824:	da012d17 	ldw	r8,1204(sp)
 2006828:	d9012d17 	ldw	r4,1204(sp)
 200682c:	42000017 	ldw	r8,0(r8)
 2006830:	20800104 	addi	r2,r4,4
 2006834:	da012e15 	stw	r8,1208(sp)
 2006838:	403f2f16 	blt	r8,zero,20064f8 <___vfprintf_internal_r+0x548>
 200683c:	d8812d15 	stw	r2,1204(sp)
 2006840:	ac800007 	ldb	r18,0(r21)
 2006844:	003e3806 	br	2006128 <___vfprintf_internal_r+0x178>
 2006848:	0009883a 	mov	r4,zero
 200684c:	90bff404 	addi	r2,r18,-48
 2006850:	ac800007 	ldb	r18,0(r21)
 2006854:	210002a4 	muli	r4,r4,10
 2006858:	ad400044 	addi	r21,r21,1
 200685c:	2089883a 	add	r4,r4,r2
 2006860:	90bff404 	addi	r2,r18,-48
 2006864:	28bffa2e 	bgeu	r5,r2,2006850 <___vfprintf_internal_r+0x8a0>
 2006868:	d9012e15 	stw	r4,1208(sp)
 200686c:	003e2f06 	br	200612c <___vfprintf_internal_r+0x17c>
 2006870:	8080020c 	andi	r2,r16,8
 2006874:	1002d426 	beq	r2,zero,20073c8 <___vfprintf_internal_r+0x1418>
 2006878:	d8c12d17 	ldw	r3,1204(sp)
 200687c:	1d800017 	ldw	r22,0(r3)
 2006880:	1d000117 	ldw	r20,4(r3)
 2006884:	18c00204 	addi	r3,r3,8
 2006888:	d8c12d15 	stw	r3,1204(sp)
 200688c:	dd813315 	stw	r22,1228(sp)
 2006890:	dd013415 	stw	r20,1232(sp)
 2006894:	b009883a 	mov	r4,r22
 2006898:	a00b883a 	mov	r5,r20
 200689c:	da413c15 	stw	r9,1264(sp)
 20068a0:	200ca440 	call	200ca44 <__isinfd>
 20068a4:	da413c17 	ldw	r9,1264(sp)
 20068a8:	b009883a 	mov	r4,r22
 20068ac:	a00b883a 	mov	r5,r20
 20068b0:	10035726 	beq	r2,zero,2007610 <___vfprintf_internal_r+0x1660>
 20068b4:	000d883a 	mov	r6,zero
 20068b8:	000f883a 	mov	r7,zero
 20068bc:	200e0200 	call	200e020 <__ltdf2>
 20068c0:	da413c17 	ldw	r9,1264(sp)
 20068c4:	10041b16 	blt	r2,zero,2007934 <___vfprintf_internal_r+0x1984>
 20068c8:	d8812583 	ldbu	r2,1174(sp)
 20068cc:	00c011c4 	movi	r3,71
 20068d0:	1c830b16 	blt	r3,r18,2007500 <___vfprintf_internal_r+0x1550>
 20068d4:	04c08074 	movhi	r19,513
 20068d8:	9cc73604 	addi	r19,r19,7384
 20068dc:	020000c4 	movi	r8,3
 20068e0:	00ffdfc4 	movi	r3,-129
 20068e4:	da012815 	stw	r8,1184(sp)
 20068e8:	80e0703a 	and	r16,r16,r3
 20068ec:	da012b15 	stw	r8,1196(sp)
 20068f0:	d8013115 	stw	zero,1220(sp)
 20068f4:	003e9906 	br	200635c <___vfprintf_internal_r+0x3ac>
 20068f8:	d8812d17 	ldw	r2,1204(sp)
 20068fc:	d8c12d17 	ldw	r3,1204(sp)
 2006900:	02008074 	movhi	r8,513
 2006904:	42073f04 	addi	r8,r8,7420
 2006908:	15c00017 	ldw	r23,0(r2)
 200690c:	00800c04 	movi	r2,48
 2006910:	18c00104 	addi	r3,r3,4
 2006914:	d8812505 	stb	r2,1172(sp)
 2006918:	00801e04 	movi	r2,120
 200691c:	d8812545 	stb	r2,1173(sp)
 2006920:	d8c12d15 	stw	r3,1204(sp)
 2006924:	002d883a 	mov	r22,zero
 2006928:	84000094 	ori	r16,r16,2
 200692c:	da013615 	stw	r8,1240(sp)
 2006930:	00c00084 	movi	r3,2
 2006934:	04801e04 	movi	r18,120
 2006938:	b805883a 	mov	r2,r23
 200693c:	d8012585 	stb	zero,1174(sp)
 2006940:	003e7206 	br	200630c <___vfprintf_internal_r+0x35c>
 2006944:	84000814 	ori	r16,r16,32
 2006948:	ac800007 	ldb	r18,0(r21)
 200694c:	003df606 	br	2006128 <___vfprintf_internal_r+0x178>
 2006950:	d8812d17 	ldw	r2,1204(sp)
 2006954:	d8012585 	stb	zero,1174(sp)
 2006958:	14c00017 	ldw	r19,0(r2)
 200695c:	15c00104 	addi	r23,r2,4
 2006960:	98040126 	beq	r19,zero,2007968 <___vfprintf_internal_r+0x19b8>
 2006964:	9809883a 	mov	r4,r19
 2006968:	e003dd16 	blt	fp,zero,20078e0 <___vfprintf_internal_r+0x1930>
 200696c:	000b883a 	mov	r5,zero
 2006970:	e00d883a 	mov	r6,fp
 2006974:	da413c15 	stw	r9,1264(sp)
 2006978:	200b0ac0 	call	200b0ac <memchr>
 200697c:	da413c17 	ldw	r9,1264(sp)
 2006980:	10042e26 	beq	r2,zero,2007a3c <___vfprintf_internal_r+0x1a8c>
 2006984:	14c5c83a 	sub	r2,r2,r19
 2006988:	d8812b15 	stw	r2,1196(sp)
 200698c:	e083790e 	bge	fp,r2,2007774 <___vfprintf_internal_r+0x17c4>
 2006990:	df012815 	stw	fp,1184(sp)
 2006994:	e0049516 	blt	fp,zero,2007bec <___vfprintf_internal_r+0x1c3c>
 2006998:	d8812583 	ldbu	r2,1174(sp)
 200699c:	df012b15 	stw	fp,1196(sp)
 20069a0:	ddc12d15 	stw	r23,1204(sp)
 20069a4:	d8013115 	stw	zero,1220(sp)
 20069a8:	003e6c06 	br	200635c <___vfprintf_internal_r+0x3ac>
 20069ac:	02008074 	movhi	r8,513
 20069b0:	42073f04 	addi	r8,r8,7420
 20069b4:	da013615 	stw	r8,1240(sp)
 20069b8:	8080080c 	andi	r2,r16,32
 20069bc:	103f6a1e 	bne	r2,zero,2006768 <___vfprintf_internal_r+0x7b8>
 20069c0:	8080040c 	andi	r2,r16,16
 20069c4:	10029326 	beq	r2,zero,2007414 <___vfprintf_internal_r+0x1464>
 20069c8:	d8c12d17 	ldw	r3,1204(sp)
 20069cc:	002d883a 	mov	r22,zero
 20069d0:	1dc00017 	ldw	r23,0(r3)
 20069d4:	18c00104 	addi	r3,r3,4
 20069d8:	d8c12d15 	stw	r3,1204(sp)
 20069dc:	003f6706 	br	200677c <___vfprintf_internal_r+0x7cc>
 20069e0:	84000214 	ori	r16,r16,8
 20069e4:	ac800007 	ldb	r18,0(r21)
 20069e8:	003dcf06 	br	2006128 <___vfprintf_internal_r+0x178>
 20069ec:	da011d17 	ldw	r8,1140(sp)
 20069f0:	d8c11c17 	ldw	r3,1136(sp)
 20069f4:	d8812587 	ldb	r2,1174(sp)
 20069f8:	10000b26 	beq	r2,zero,2006a28 <___vfprintf_internal_r+0xa78>
 20069fc:	d8812584 	addi	r2,sp,1174
 2006a00:	48800015 	stw	r2,0(r9)
 2006a04:	00800044 	movi	r2,1
 2006a08:	48800115 	stw	r2,4(r9)
 2006a0c:	4091883a 	add	r8,r8,r2
 2006a10:	1887883a 	add	r3,r3,r2
 2006a14:	da011d15 	stw	r8,1140(sp)
 2006a18:	d8c11c15 	stw	r3,1136(sp)
 2006a1c:	008001c4 	movi	r2,7
 2006a20:	10c18516 	blt	r2,r3,2007038 <___vfprintf_internal_r+0x1088>
 2006a24:	4a400204 	addi	r9,r9,8
 2006a28:	d9012a17 	ldw	r4,1192(sp)
 2006a2c:	20000b26 	beq	r4,zero,2006a5c <___vfprintf_internal_r+0xaac>
 2006a30:	d8812504 	addi	r2,sp,1172
 2006a34:	48800015 	stw	r2,0(r9)
 2006a38:	00800084 	movi	r2,2
 2006a3c:	48800115 	stw	r2,4(r9)
 2006a40:	4091883a 	add	r8,r8,r2
 2006a44:	18c00044 	addi	r3,r3,1
 2006a48:	da011d15 	stw	r8,1140(sp)
 2006a4c:	d8c11c15 	stw	r3,1136(sp)
 2006a50:	008001c4 	movi	r2,7
 2006a54:	10c18116 	blt	r2,r3,200705c <___vfprintf_internal_r+0x10ac>
 2006a58:	4a400204 	addi	r9,r9,8
 2006a5c:	d9012f17 	ldw	r4,1212(sp)
 2006a60:	00802004 	movi	r2,128
 2006a64:	2080fc26 	beq	r4,r2,2006e58 <___vfprintf_internal_r+0xea8>
 2006a68:	d8813117 	ldw	r2,1220(sp)
 2006a6c:	d9012b17 	ldw	r4,1196(sp)
 2006a70:	112fc83a 	sub	r23,r2,r4
 2006a74:	05c02a0e 	bge	zero,r23,2006b20 <___vfprintf_internal_r+0xb70>
 2006a78:	07000404 	movi	fp,16
 2006a7c:	05008074 	movhi	r20,513
 2006a80:	a5074a84 	addi	r20,r20,7466
 2006a84:	e5c01d0e 	bge	fp,r23,2006afc <___vfprintf_internal_r+0xb4c>
 2006a88:	dc812a15 	stw	r18,1192(sp)
 2006a8c:	058001c4 	movi	r22,7
 2006a90:	a025883a 	mov	r18,r20
 2006a94:	8029883a 	mov	r20,r16
 2006a98:	dc012917 	ldw	r16,1188(sp)
 2006a9c:	00000306 	br	2006aac <___vfprintf_internal_r+0xafc>
 2006aa0:	bdfffc04 	addi	r23,r23,-16
 2006aa4:	4a400204 	addi	r9,r9,8
 2006aa8:	e5c0110e 	bge	fp,r23,2006af0 <___vfprintf_internal_r+0xb40>
 2006aac:	4c800015 	stw	r18,0(r9)
 2006ab0:	4f000115 	stw	fp,4(r9)
 2006ab4:	42000404 	addi	r8,r8,16
 2006ab8:	18c00044 	addi	r3,r3,1
 2006abc:	da011d15 	stw	r8,1140(sp)
 2006ac0:	d8c11c15 	stw	r3,1136(sp)
 2006ac4:	b0fff60e 	bge	r22,r3,2006aa0 <___vfprintf_internal_r+0xaf0>
 2006ac8:	8809883a 	mov	r4,r17
 2006acc:	800b883a 	mov	r5,r16
 2006ad0:	d9811b04 	addi	r6,sp,1132
 2006ad4:	2005f7c0 	call	2005f7c <__sprint_r>
 2006ad8:	103ec81e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006adc:	bdfffc04 	addi	r23,r23,-16
 2006ae0:	da011d17 	ldw	r8,1140(sp)
 2006ae4:	d8c11c17 	ldw	r3,1136(sp)
 2006ae8:	da400404 	addi	r9,sp,16
 2006aec:	e5ffef16 	blt	fp,r23,2006aac <___vfprintf_internal_r+0xafc>
 2006af0:	a021883a 	mov	r16,r20
 2006af4:	9029883a 	mov	r20,r18
 2006af8:	dc812a17 	ldw	r18,1192(sp)
 2006afc:	4d000015 	stw	r20,0(r9)
 2006b00:	4dc00115 	stw	r23,4(r9)
 2006b04:	45d1883a 	add	r8,r8,r23
 2006b08:	18c00044 	addi	r3,r3,1
 2006b0c:	da011d15 	stw	r8,1140(sp)
 2006b10:	d8c11c15 	stw	r3,1136(sp)
 2006b14:	008001c4 	movi	r2,7
 2006b18:	10c13e16 	blt	r2,r3,2007014 <___vfprintf_internal_r+0x1064>
 2006b1c:	4a400204 	addi	r9,r9,8
 2006b20:	8080400c 	andi	r2,r16,256
 2006b24:	1000831e 	bne	r2,zero,2006d34 <___vfprintf_internal_r+0xd84>
 2006b28:	d8812b17 	ldw	r2,1196(sp)
 2006b2c:	4cc00015 	stw	r19,0(r9)
 2006b30:	48800115 	stw	r2,4(r9)
 2006b34:	4091883a 	add	r8,r8,r2
 2006b38:	18c00044 	addi	r3,r3,1
 2006b3c:	da011d15 	stw	r8,1140(sp)
 2006b40:	d8c11c15 	stw	r3,1136(sp)
 2006b44:	008001c4 	movi	r2,7
 2006b48:	10c05316 	blt	r2,r3,2006c98 <___vfprintf_internal_r+0xce8>
 2006b4c:	4a400204 	addi	r9,r9,8
 2006b50:	8400010c 	andi	r16,r16,4
 2006b54:	80002e26 	beq	r16,zero,2006c10 <___vfprintf_internal_r+0xc60>
 2006b58:	d8812e17 	ldw	r2,1208(sp)
 2006b5c:	d8c12817 	ldw	r3,1184(sp)
 2006b60:	10e1c83a 	sub	r16,r2,r3
 2006b64:	04002a0e 	bge	zero,r16,2006c10 <___vfprintf_internal_r+0xc60>
 2006b68:	04800404 	movi	r18,16
 2006b6c:	d8c11c17 	ldw	r3,1136(sp)
 2006b70:	05c08074 	movhi	r23,513
 2006b74:	bdc74684 	addi	r23,r23,7450
 2006b78:	9400170e 	bge	r18,r16,2006bd8 <___vfprintf_internal_r+0xc28>
 2006b7c:	04c001c4 	movi	r19,7
 2006b80:	dd012917 	ldw	r20,1188(sp)
 2006b84:	00000306 	br	2006b94 <___vfprintf_internal_r+0xbe4>
 2006b88:	843ffc04 	addi	r16,r16,-16
 2006b8c:	4a400204 	addi	r9,r9,8
 2006b90:	9400110e 	bge	r18,r16,2006bd8 <___vfprintf_internal_r+0xc28>
 2006b94:	4dc00015 	stw	r23,0(r9)
 2006b98:	4c800115 	stw	r18,4(r9)
 2006b9c:	42000404 	addi	r8,r8,16
 2006ba0:	18c00044 	addi	r3,r3,1
 2006ba4:	da011d15 	stw	r8,1140(sp)
 2006ba8:	d8c11c15 	stw	r3,1136(sp)
 2006bac:	98fff60e 	bge	r19,r3,2006b88 <___vfprintf_internal_r+0xbd8>
 2006bb0:	8809883a 	mov	r4,r17
 2006bb4:	a00b883a 	mov	r5,r20
 2006bb8:	d9811b04 	addi	r6,sp,1132
 2006bbc:	2005f7c0 	call	2005f7c <__sprint_r>
 2006bc0:	103e8e1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006bc4:	843ffc04 	addi	r16,r16,-16
 2006bc8:	da011d17 	ldw	r8,1140(sp)
 2006bcc:	d8c11c17 	ldw	r3,1136(sp)
 2006bd0:	da400404 	addi	r9,sp,16
 2006bd4:	943fef16 	blt	r18,r16,2006b94 <___vfprintf_internal_r+0xbe4>
 2006bd8:	4dc00015 	stw	r23,0(r9)
 2006bdc:	4c000115 	stw	r16,4(r9)
 2006be0:	8211883a 	add	r8,r16,r8
 2006be4:	18c00044 	addi	r3,r3,1
 2006be8:	da011d15 	stw	r8,1140(sp)
 2006bec:	d8c11c15 	stw	r3,1136(sp)
 2006bf0:	008001c4 	movi	r2,7
 2006bf4:	10c0060e 	bge	r2,r3,2006c10 <___vfprintf_internal_r+0xc60>
 2006bf8:	d9412917 	ldw	r5,1188(sp)
 2006bfc:	8809883a 	mov	r4,r17
 2006c00:	d9811b04 	addi	r6,sp,1132
 2006c04:	2005f7c0 	call	2005f7c <__sprint_r>
 2006c08:	103e7c1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006c0c:	da011d17 	ldw	r8,1140(sp)
 2006c10:	dd012817 	ldw	r20,1184(sp)
 2006c14:	d9012e17 	ldw	r4,1208(sp)
 2006c18:	a100010e 	bge	r20,r4,2006c20 <___vfprintf_internal_r+0xc70>
 2006c1c:	2029883a 	mov	r20,r4
 2006c20:	d8812c17 	ldw	r2,1200(sp)
 2006c24:	1505883a 	add	r2,r2,r20
 2006c28:	d8812c15 	stw	r2,1200(sp)
 2006c2c:	4000b91e 	bne	r8,zero,2006f14 <___vfprintf_internal_r+0xf64>
 2006c30:	d8011c15 	stw	zero,1136(sp)
 2006c34:	a8800007 	ldb	r2,0(r21)
 2006c38:	da400404 	addi	r9,sp,16
 2006c3c:	103d141e 	bne	r2,zero,2006090 <___vfprintf_internal_r+0xe0>
 2006c40:	a825883a 	mov	r18,r21
 2006c44:	003d2a06 	br	20060f0 <___vfprintf_internal_r+0x140>
 2006c48:	d9412917 	ldw	r5,1188(sp)
 2006c4c:	8809883a 	mov	r4,r17
 2006c50:	d9811b04 	addi	r6,sp,1132
 2006c54:	2005f7c0 	call	2005f7c <__sprint_r>
 2006c58:	103e681e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006c5c:	da011d17 	ldw	r8,1140(sp)
 2006c60:	da400404 	addi	r9,sp,16
 2006c64:	8080004c 	andi	r2,r16,1
 2006c68:	103fb926 	beq	r2,zero,2006b50 <___vfprintf_internal_r+0xba0>
 2006c6c:	d8c11c17 	ldw	r3,1136(sp)
 2006c70:	d9013717 	ldw	r4,1244(sp)
 2006c74:	00800044 	movi	r2,1
 2006c78:	48800115 	stw	r2,4(r9)
 2006c7c:	49000015 	stw	r4,0(r9)
 2006c80:	4091883a 	add	r8,r8,r2
 2006c84:	1887883a 	add	r3,r3,r2
 2006c88:	da011d15 	stw	r8,1140(sp)
 2006c8c:	d8c11c15 	stw	r3,1136(sp)
 2006c90:	008001c4 	movi	r2,7
 2006c94:	10ffad0e 	bge	r2,r3,2006b4c <___vfprintf_internal_r+0xb9c>
 2006c98:	d9412917 	ldw	r5,1188(sp)
 2006c9c:	8809883a 	mov	r4,r17
 2006ca0:	d9811b04 	addi	r6,sp,1132
 2006ca4:	2005f7c0 	call	2005f7c <__sprint_r>
 2006ca8:	103e541e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006cac:	da400404 	addi	r9,sp,16
 2006cb0:	da011d17 	ldw	r8,1140(sp)
 2006cb4:	003fa606 	br	2006b50 <___vfprintf_internal_r+0xba0>
 2006cb8:	18803fcc 	andi	r2,r3,255
 2006cbc:	00c00044 	movi	r3,1
 2006cc0:	10c10126 	beq	r2,r3,20070c8 <___vfprintf_internal_r+0x1118>
 2006cc4:	00c00084 	movi	r3,2
 2006cc8:	10c0f026 	beq	r2,r3,200708c <___vfprintf_internal_r+0x10dc>
 2006ccc:	d8c10dc4 	addi	r3,sp,1079
 2006cd0:	b808d0fa 	srli	r4,r23,3
 2006cd4:	b00a977a 	slli	r5,r22,29
 2006cd8:	b02cd0fa 	srli	r22,r22,3
 2006cdc:	bdc001cc 	andi	r23,r23,7
 2006ce0:	b8800c04 	addi	r2,r23,48
 2006ce4:	292eb03a 	or	r23,r5,r4
 2006ce8:	18800005 	stb	r2,0(r3)
 2006cec:	bd88b03a 	or	r4,r23,r22
 2006cf0:	1827883a 	mov	r19,r3
 2006cf4:	18ffffc4 	addi	r3,r3,-1
 2006cf8:	203ff51e 	bne	r4,zero,2006cd0 <___vfprintf_internal_r+0xd20>
 2006cfc:	8100004c 	andi	r4,r16,1
 2006d00:	980b883a 	mov	r5,r19
 2006d04:	20000726 	beq	r4,zero,2006d24 <___vfprintf_internal_r+0xd74>
 2006d08:	10803fcc 	andi	r2,r2,255
 2006d0c:	1080201c 	xori	r2,r2,128
 2006d10:	10bfe004 	addi	r2,r2,-128
 2006d14:	01000c04 	movi	r4,48
 2006d18:	11000226 	beq	r2,r4,2006d24 <___vfprintf_internal_r+0xd74>
 2006d1c:	1827883a 	mov	r19,r3
 2006d20:	293fffc5 	stb	r4,-1(r5)
 2006d24:	d8812717 	ldw	r2,1180(sp)
 2006d28:	14c5c83a 	sub	r2,r2,r19
 2006d2c:	d8812b15 	stw	r2,1196(sp)
 2006d30:	003d8406 	br	2006344 <___vfprintf_internal_r+0x394>
 2006d34:	00801944 	movi	r2,101
 2006d38:	14807c0e 	bge	r2,r18,2006f2c <___vfprintf_internal_r+0xf7c>
 2006d3c:	d9013317 	ldw	r4,1228(sp)
 2006d40:	d9413417 	ldw	r5,1232(sp)
 2006d44:	000d883a 	mov	r6,zero
 2006d48:	000f883a 	mov	r7,zero
 2006d4c:	d8c13b15 	stw	r3,1260(sp)
 2006d50:	da013a15 	stw	r8,1256(sp)
 2006d54:	da413c15 	stw	r9,1264(sp)
 2006d58:	200df040 	call	200df04 <__eqdf2>
 2006d5c:	d8c13b17 	ldw	r3,1260(sp)
 2006d60:	da013a17 	ldw	r8,1256(sp)
 2006d64:	da413c17 	ldw	r9,1264(sp)
 2006d68:	1001001e 	bne	r2,zero,200716c <___vfprintf_internal_r+0x11bc>
 2006d6c:	00808074 	movhi	r2,513
 2006d70:	10874604 	addi	r2,r2,7448
 2006d74:	48800015 	stw	r2,0(r9)
 2006d78:	00800044 	movi	r2,1
 2006d7c:	48800115 	stw	r2,4(r9)
 2006d80:	4091883a 	add	r8,r8,r2
 2006d84:	1887883a 	add	r3,r3,r2
 2006d88:	da011d15 	stw	r8,1140(sp)
 2006d8c:	d8c11c15 	stw	r3,1136(sp)
 2006d90:	008001c4 	movi	r2,7
 2006d94:	10c1dd16 	blt	r2,r3,200750c <___vfprintf_internal_r+0x155c>
 2006d98:	4a400204 	addi	r9,r9,8
 2006d9c:	d8812417 	ldw	r2,1168(sp)
 2006da0:	d8c13217 	ldw	r3,1224(sp)
 2006da4:	10c00216 	blt	r2,r3,2006db0 <___vfprintf_internal_r+0xe00>
 2006da8:	8080004c 	andi	r2,r16,1
 2006dac:	103f6826 	beq	r2,zero,2006b50 <___vfprintf_internal_r+0xba0>
 2006db0:	d8c11c17 	ldw	r3,1136(sp)
 2006db4:	d9013717 	ldw	r4,1244(sp)
 2006db8:	00800044 	movi	r2,1
 2006dbc:	48800115 	stw	r2,4(r9)
 2006dc0:	49000015 	stw	r4,0(r9)
 2006dc4:	4091883a 	add	r8,r8,r2
 2006dc8:	1887883a 	add	r3,r3,r2
 2006dcc:	da011d15 	stw	r8,1140(sp)
 2006dd0:	d8c11c15 	stw	r3,1136(sp)
 2006dd4:	008001c4 	movi	r2,7
 2006dd8:	10c2af16 	blt	r2,r3,2007898 <___vfprintf_internal_r+0x18e8>
 2006ddc:	4a400204 	addi	r9,r9,8
 2006de0:	d8813217 	ldw	r2,1224(sp)
 2006de4:	14bfffc4 	addi	r18,r2,-1
 2006de8:	04bf590e 	bge	zero,r18,2006b50 <___vfprintf_internal_r+0xba0>
 2006dec:	04c00404 	movi	r19,16
 2006df0:	d8c11c17 	ldw	r3,1136(sp)
 2006df4:	05008074 	movhi	r20,513
 2006df8:	a5074a84 	addi	r20,r20,7466
 2006dfc:	9c81630e 	bge	r19,r18,200738c <___vfprintf_internal_r+0x13dc>
 2006e00:	058001c4 	movi	r22,7
 2006e04:	ddc12917 	ldw	r23,1188(sp)
 2006e08:	00000306 	br	2006e18 <___vfprintf_internal_r+0xe68>
 2006e0c:	4a400204 	addi	r9,r9,8
 2006e10:	94bffc04 	addi	r18,r18,-16
 2006e14:	9c815d0e 	bge	r19,r18,200738c <___vfprintf_internal_r+0x13dc>
 2006e18:	4d000015 	stw	r20,0(r9)
 2006e1c:	4cc00115 	stw	r19,4(r9)
 2006e20:	42000404 	addi	r8,r8,16
 2006e24:	18c00044 	addi	r3,r3,1
 2006e28:	da011d15 	stw	r8,1140(sp)
 2006e2c:	d8c11c15 	stw	r3,1136(sp)
 2006e30:	b0fff60e 	bge	r22,r3,2006e0c <___vfprintf_internal_r+0xe5c>
 2006e34:	8809883a 	mov	r4,r17
 2006e38:	b80b883a 	mov	r5,r23
 2006e3c:	d9811b04 	addi	r6,sp,1132
 2006e40:	2005f7c0 	call	2005f7c <__sprint_r>
 2006e44:	103ded1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006e48:	da011d17 	ldw	r8,1140(sp)
 2006e4c:	d8c11c17 	ldw	r3,1136(sp)
 2006e50:	da400404 	addi	r9,sp,16
 2006e54:	003fee06 	br	2006e10 <___vfprintf_internal_r+0xe60>
 2006e58:	d8812e17 	ldw	r2,1208(sp)
 2006e5c:	d9012817 	ldw	r4,1184(sp)
 2006e60:	112fc83a 	sub	r23,r2,r4
 2006e64:	05ff000e 	bge	zero,r23,2006a68 <___vfprintf_internal_r+0xab8>
 2006e68:	07000404 	movi	fp,16
 2006e6c:	05008074 	movhi	r20,513
 2006e70:	a5074a84 	addi	r20,r20,7466
 2006e74:	e5c01d0e 	bge	fp,r23,2006eec <___vfprintf_internal_r+0xf3c>
 2006e78:	dc812a15 	stw	r18,1192(sp)
 2006e7c:	058001c4 	movi	r22,7
 2006e80:	a025883a 	mov	r18,r20
 2006e84:	8029883a 	mov	r20,r16
 2006e88:	dc012917 	ldw	r16,1188(sp)
 2006e8c:	00000306 	br	2006e9c <___vfprintf_internal_r+0xeec>
 2006e90:	bdfffc04 	addi	r23,r23,-16
 2006e94:	4a400204 	addi	r9,r9,8
 2006e98:	e5c0110e 	bge	fp,r23,2006ee0 <___vfprintf_internal_r+0xf30>
 2006e9c:	4c800015 	stw	r18,0(r9)
 2006ea0:	4f000115 	stw	fp,4(r9)
 2006ea4:	42000404 	addi	r8,r8,16
 2006ea8:	18c00044 	addi	r3,r3,1
 2006eac:	da011d15 	stw	r8,1140(sp)
 2006eb0:	d8c11c15 	stw	r3,1136(sp)
 2006eb4:	b0fff60e 	bge	r22,r3,2006e90 <___vfprintf_internal_r+0xee0>
 2006eb8:	8809883a 	mov	r4,r17
 2006ebc:	800b883a 	mov	r5,r16
 2006ec0:	d9811b04 	addi	r6,sp,1132
 2006ec4:	2005f7c0 	call	2005f7c <__sprint_r>
 2006ec8:	103dcc1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2006ecc:	bdfffc04 	addi	r23,r23,-16
 2006ed0:	da011d17 	ldw	r8,1140(sp)
 2006ed4:	d8c11c17 	ldw	r3,1136(sp)
 2006ed8:	da400404 	addi	r9,sp,16
 2006edc:	e5ffef16 	blt	fp,r23,2006e9c <___vfprintf_internal_r+0xeec>
 2006ee0:	a021883a 	mov	r16,r20
 2006ee4:	9029883a 	mov	r20,r18
 2006ee8:	dc812a17 	ldw	r18,1192(sp)
 2006eec:	4d000015 	stw	r20,0(r9)
 2006ef0:	4dc00115 	stw	r23,4(r9)
 2006ef4:	45d1883a 	add	r8,r8,r23
 2006ef8:	18c00044 	addi	r3,r3,1
 2006efc:	da011d15 	stw	r8,1140(sp)
 2006f00:	d8c11c15 	stw	r3,1136(sp)
 2006f04:	008001c4 	movi	r2,7
 2006f08:	10c11716 	blt	r2,r3,2007368 <___vfprintf_internal_r+0x13b8>
 2006f0c:	4a400204 	addi	r9,r9,8
 2006f10:	003ed506 	br	2006a68 <___vfprintf_internal_r+0xab8>
 2006f14:	d9412917 	ldw	r5,1188(sp)
 2006f18:	8809883a 	mov	r4,r17
 2006f1c:	d9811b04 	addi	r6,sp,1132
 2006f20:	2005f7c0 	call	2005f7c <__sprint_r>
 2006f24:	103f4226 	beq	r2,zero,2006c30 <___vfprintf_internal_r+0xc80>
 2006f28:	003db406 	br	20065fc <___vfprintf_internal_r+0x64c>
 2006f2c:	d9013217 	ldw	r4,1224(sp)
 2006f30:	00800044 	movi	r2,1
 2006f34:	4cc00015 	stw	r19,0(r9)
 2006f38:	1100e10e 	bge	r2,r4,20072c0 <___vfprintf_internal_r+0x1310>
 2006f3c:	00800044 	movi	r2,1
 2006f40:	48800115 	stw	r2,4(r9)
 2006f44:	4091883a 	add	r8,r8,r2
 2006f48:	1887883a 	add	r3,r3,r2
 2006f4c:	da011d15 	stw	r8,1140(sp)
 2006f50:	d8c11c15 	stw	r3,1136(sp)
 2006f54:	008001c4 	movi	r2,7
 2006f58:	10c0ed16 	blt	r2,r3,2007310 <___vfprintf_internal_r+0x1360>
 2006f5c:	4a400204 	addi	r9,r9,8
 2006f60:	d8813717 	ldw	r2,1244(sp)
 2006f64:	48800015 	stw	r2,0(r9)
 2006f68:	00800044 	movi	r2,1
 2006f6c:	48800115 	stw	r2,4(r9)
 2006f70:	4091883a 	add	r8,r8,r2
 2006f74:	1887883a 	add	r3,r3,r2
 2006f78:	da011d15 	stw	r8,1140(sp)
 2006f7c:	d8c11c15 	stw	r3,1136(sp)
 2006f80:	008001c4 	movi	r2,7
 2006f84:	10c0eb16 	blt	r2,r3,2007334 <___vfprintf_internal_r+0x1384>
 2006f88:	4c800204 	addi	r18,r9,8
 2006f8c:	d9013317 	ldw	r4,1228(sp)
 2006f90:	d9413417 	ldw	r5,1232(sp)
 2006f94:	000d883a 	mov	r6,zero
 2006f98:	000f883a 	mov	r7,zero
 2006f9c:	d8c13b15 	stw	r3,1260(sp)
 2006fa0:	da013a15 	stw	r8,1256(sp)
 2006fa4:	200df600 	call	200df60 <__nedf2>
 2006fa8:	d8c13b17 	ldw	r3,1260(sp)
 2006fac:	da013a17 	ldw	r8,1256(sp)
 2006fb0:	1000a626 	beq	r2,zero,200724c <___vfprintf_internal_r+0x129c>
 2006fb4:	d9013217 	ldw	r4,1224(sp)
 2006fb8:	9cc00044 	addi	r19,r19,1
 2006fbc:	94c00015 	stw	r19,0(r18)
 2006fc0:	20bfffc4 	addi	r2,r4,-1
 2006fc4:	90800115 	stw	r2,4(r18)
 2006fc8:	4091883a 	add	r8,r8,r2
 2006fcc:	18c00044 	addi	r3,r3,1
 2006fd0:	da011d15 	stw	r8,1140(sp)
 2006fd4:	d8c11c15 	stw	r3,1136(sp)
 2006fd8:	008001c4 	movi	r2,7
 2006fdc:	10c0c316 	blt	r2,r3,20072ec <___vfprintf_internal_r+0x133c>
 2006fe0:	94800204 	addi	r18,r18,8
 2006fe4:	d9013517 	ldw	r4,1236(sp)
 2006fe8:	d8811fc4 	addi	r2,sp,1151
 2006fec:	90800015 	stw	r2,0(r18)
 2006ff0:	91000115 	stw	r4,4(r18)
 2006ff4:	4111883a 	add	r8,r8,r4
 2006ff8:	18c00044 	addi	r3,r3,1
 2006ffc:	da011d15 	stw	r8,1140(sp)
 2007000:	d8c11c15 	stw	r3,1136(sp)
 2007004:	008001c4 	movi	r2,7
 2007008:	10ff2316 	blt	r2,r3,2006c98 <___vfprintf_internal_r+0xce8>
 200700c:	92400204 	addi	r9,r18,8
 2007010:	003ecf06 	br	2006b50 <___vfprintf_internal_r+0xba0>
 2007014:	d9412917 	ldw	r5,1188(sp)
 2007018:	8809883a 	mov	r4,r17
 200701c:	d9811b04 	addi	r6,sp,1132
 2007020:	2005f7c0 	call	2005f7c <__sprint_r>
 2007024:	103d751e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007028:	da011d17 	ldw	r8,1140(sp)
 200702c:	d8c11c17 	ldw	r3,1136(sp)
 2007030:	da400404 	addi	r9,sp,16
 2007034:	003eba06 	br	2006b20 <___vfprintf_internal_r+0xb70>
 2007038:	d9412917 	ldw	r5,1188(sp)
 200703c:	8809883a 	mov	r4,r17
 2007040:	d9811b04 	addi	r6,sp,1132
 2007044:	2005f7c0 	call	2005f7c <__sprint_r>
 2007048:	103d6c1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 200704c:	da011d17 	ldw	r8,1140(sp)
 2007050:	d8c11c17 	ldw	r3,1136(sp)
 2007054:	da400404 	addi	r9,sp,16
 2007058:	003e7306 	br	2006a28 <___vfprintf_internal_r+0xa78>
 200705c:	d9412917 	ldw	r5,1188(sp)
 2007060:	8809883a 	mov	r4,r17
 2007064:	d9811b04 	addi	r6,sp,1132
 2007068:	2005f7c0 	call	2005f7c <__sprint_r>
 200706c:	103d631e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007070:	da011d17 	ldw	r8,1140(sp)
 2007074:	d8c11c17 	ldw	r3,1136(sp)
 2007078:	da400404 	addi	r9,sp,16
 200707c:	003e7706 	br	2006a5c <___vfprintf_internal_r+0xaac>
 2007080:	d8012b15 	stw	zero,1196(sp)
 2007084:	dcc10e04 	addi	r19,sp,1080
 2007088:	003cae06 	br	2006344 <___vfprintf_internal_r+0x394>
 200708c:	d9413617 	ldw	r5,1240(sp)
 2007090:	d8810dc4 	addi	r2,sp,1079
 2007094:	b8c003cc 	andi	r3,r23,15
 2007098:	b008973a 	slli	r4,r22,28
 200709c:	28c7883a 	add	r3,r5,r3
 20070a0:	b82ed13a 	srli	r23,r23,4
 20070a4:	18c00003 	ldbu	r3,0(r3)
 20070a8:	b02cd13a 	srli	r22,r22,4
 20070ac:	25eeb03a 	or	r23,r4,r23
 20070b0:	10c00005 	stb	r3,0(r2)
 20070b4:	bd86b03a 	or	r3,r23,r22
 20070b8:	1027883a 	mov	r19,r2
 20070bc:	10bfffc4 	addi	r2,r2,-1
 20070c0:	183ff41e 	bne	r3,zero,2007094 <___vfprintf_internal_r+0x10e4>
 20070c4:	003f1706 	br	2006d24 <___vfprintf_internal_r+0xd74>
 20070c8:	b0025826 	beq	r22,zero,2007a2c <___vfprintf_internal_r+0x1a7c>
 20070cc:	b807883a 	mov	r3,r23
 20070d0:	d8810dc4 	addi	r2,sp,1079
 20070d4:	882f883a 	mov	r23,r17
 20070d8:	04c00244 	movi	r19,9
 20070dc:	8023883a 	mov	r17,r16
 20070e0:	da412815 	stw	r9,1184(sp)
 20070e4:	1821883a 	mov	r16,r3
 20070e8:	8009883a 	mov	r4,r16
 20070ec:	b00b883a 	mov	r5,r22
 20070f0:	01800284 	movi	r6,10
 20070f4:	000f883a 	mov	r7,zero
 20070f8:	1029883a 	mov	r20,r2
 20070fc:	200d7c40 	call	200d7c4 <__umoddi3>
 2007100:	10800c04 	addi	r2,r2,48
 2007104:	8009883a 	mov	r4,r16
 2007108:	b00b883a 	mov	r5,r22
 200710c:	a0800005 	stb	r2,0(r20)
 2007110:	01800284 	movi	r6,10
 2007114:	000f883a 	mov	r7,zero
 2007118:	200d1fc0 	call	200d1fc <__udivdi3>
 200711c:	1021883a 	mov	r16,r2
 2007120:	182d883a 	mov	r22,r3
 2007124:	a0bfffc4 	addi	r2,r20,-1
 2007128:	183fef1e 	bne	r3,zero,20070e8 <___vfprintf_internal_r+0x1138>
 200712c:	9c3fee36 	bltu	r19,r16,20070e8 <___vfprintf_internal_r+0x1138>
 2007130:	da412817 	ldw	r9,1184(sp)
 2007134:	8005883a 	mov	r2,r16
 2007138:	8821883a 	mov	r16,r17
 200713c:	b823883a 	mov	r17,r23
 2007140:	102f883a 	mov	r23,r2
 2007144:	d8812717 	ldw	r2,1180(sp)
 2007148:	a4ffffc4 	addi	r19,r20,-1
 200714c:	bdc00c04 	addi	r23,r23,48
 2007150:	14c5c83a 	sub	r2,r2,r19
 2007154:	a5ffffc5 	stb	r23,-1(r20)
 2007158:	d8812b15 	stw	r2,1196(sp)
 200715c:	003c7906 	br	2006344 <___vfprintf_internal_r+0x394>
 2007160:	00c00044 	movi	r3,1
 2007164:	bd84b03a 	or	r2,r23,r22
 2007168:	003c6806 	br	200630c <___vfprintf_internal_r+0x35c>
 200716c:	dc812417 	ldw	r18,1168(sp)
 2007170:	0480ee0e 	bge	zero,r18,200752c <___vfprintf_internal_r+0x157c>
 2007174:	d9013217 	ldw	r4,1224(sp)
 2007178:	4cc00015 	stw	r19,0(r9)
 200717c:	9100c616 	blt	r18,r4,2007498 <___vfprintf_internal_r+0x14e8>
 2007180:	49000115 	stw	r4,4(r9)
 2007184:	4111883a 	add	r8,r8,r4
 2007188:	18c00044 	addi	r3,r3,1
 200718c:	da011d15 	stw	r8,1140(sp)
 2007190:	d8c11c15 	stw	r3,1136(sp)
 2007194:	008001c4 	movi	r2,7
 2007198:	10c20916 	blt	r2,r3,20079c0 <___vfprintf_internal_r+0x1a10>
 200719c:	4a400204 	addi	r9,r9,8
 20071a0:	d8813217 	ldw	r2,1224(sp)
 20071a4:	90a5c83a 	sub	r18,r18,r2
 20071a8:	04beae0e 	bge	zero,r18,2006c64 <___vfprintf_internal_r+0xcb4>
 20071ac:	04c00404 	movi	r19,16
 20071b0:	d8c11c17 	ldw	r3,1136(sp)
 20071b4:	05008074 	movhi	r20,513
 20071b8:	a5074a84 	addi	r20,r20,7466
 20071bc:	9c81be0e 	bge	r19,r18,20078b8 <___vfprintf_internal_r+0x1908>
 20071c0:	058001c4 	movi	r22,7
 20071c4:	ddc12917 	ldw	r23,1188(sp)
 20071c8:	00000306 	br	20071d8 <___vfprintf_internal_r+0x1228>
 20071cc:	4a400204 	addi	r9,r9,8
 20071d0:	94bffc04 	addi	r18,r18,-16
 20071d4:	9c81b80e 	bge	r19,r18,20078b8 <___vfprintf_internal_r+0x1908>
 20071d8:	4d000015 	stw	r20,0(r9)
 20071dc:	4cc00115 	stw	r19,4(r9)
 20071e0:	42000404 	addi	r8,r8,16
 20071e4:	18c00044 	addi	r3,r3,1
 20071e8:	da011d15 	stw	r8,1140(sp)
 20071ec:	d8c11c15 	stw	r3,1136(sp)
 20071f0:	b0fff60e 	bge	r22,r3,20071cc <___vfprintf_internal_r+0x121c>
 20071f4:	8809883a 	mov	r4,r17
 20071f8:	b80b883a 	mov	r5,r23
 20071fc:	d9811b04 	addi	r6,sp,1132
 2007200:	2005f7c0 	call	2005f7c <__sprint_r>
 2007204:	103cfd1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007208:	da011d17 	ldw	r8,1140(sp)
 200720c:	d8c11c17 	ldw	r3,1136(sp)
 2007210:	da400404 	addi	r9,sp,16
 2007214:	003fee06 	br	20071d0 <___vfprintf_internal_r+0x1220>
 2007218:	d9412917 	ldw	r5,1188(sp)
 200721c:	8809883a 	mov	r4,r17
 2007220:	d9811b04 	addi	r6,sp,1132
 2007224:	2005f7c0 	call	2005f7c <__sprint_r>
 2007228:	103cf41e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 200722c:	da011d17 	ldw	r8,1140(sp)
 2007230:	d8c11c17 	ldw	r3,1136(sp)
 2007234:	da400404 	addi	r9,sp,16
 2007238:	003dee06 	br	20069f4 <___vfprintf_internal_r+0xa44>
 200723c:	00c00084 	movi	r3,2
 2007240:	bd84b03a 	or	r2,r23,r22
 2007244:	d8012585 	stb	zero,1174(sp)
 2007248:	003c3006 	br	200630c <___vfprintf_internal_r+0x35c>
 200724c:	d8813217 	ldw	r2,1224(sp)
 2007250:	14ffffc4 	addi	r19,r2,-1
 2007254:	04ff630e 	bge	zero,r19,2006fe4 <___vfprintf_internal_r+0x1034>
 2007258:	05800404 	movi	r22,16
 200725c:	05008074 	movhi	r20,513
 2007260:	a5074a84 	addi	r20,r20,7466
 2007264:	b4c03c0e 	bge	r22,r19,2007358 <___vfprintf_internal_r+0x13a8>
 2007268:	05c001c4 	movi	r23,7
 200726c:	df012917 	ldw	fp,1188(sp)
 2007270:	00000306 	br	2007280 <___vfprintf_internal_r+0x12d0>
 2007274:	94800204 	addi	r18,r18,8
 2007278:	9cfffc04 	addi	r19,r19,-16
 200727c:	b4c0360e 	bge	r22,r19,2007358 <___vfprintf_internal_r+0x13a8>
 2007280:	95000015 	stw	r20,0(r18)
 2007284:	95800115 	stw	r22,4(r18)
 2007288:	42000404 	addi	r8,r8,16
 200728c:	18c00044 	addi	r3,r3,1
 2007290:	da011d15 	stw	r8,1140(sp)
 2007294:	d8c11c15 	stw	r3,1136(sp)
 2007298:	b8fff60e 	bge	r23,r3,2007274 <___vfprintf_internal_r+0x12c4>
 200729c:	8809883a 	mov	r4,r17
 20072a0:	e00b883a 	mov	r5,fp
 20072a4:	d9811b04 	addi	r6,sp,1132
 20072a8:	2005f7c0 	call	2005f7c <__sprint_r>
 20072ac:	103cd31e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 20072b0:	da011d17 	ldw	r8,1140(sp)
 20072b4:	d8c11c17 	ldw	r3,1136(sp)
 20072b8:	dc800404 	addi	r18,sp,16
 20072bc:	003fee06 	br	2007278 <___vfprintf_internal_r+0x12c8>
 20072c0:	8088703a 	and	r4,r16,r2
 20072c4:	203f1d1e 	bne	r4,zero,2006f3c <___vfprintf_internal_r+0xf8c>
 20072c8:	48800115 	stw	r2,4(r9)
 20072cc:	42000044 	addi	r8,r8,1
 20072d0:	18c00044 	addi	r3,r3,1
 20072d4:	da011d15 	stw	r8,1140(sp)
 20072d8:	d8c11c15 	stw	r3,1136(sp)
 20072dc:	008001c4 	movi	r2,7
 20072e0:	10c00216 	blt	r2,r3,20072ec <___vfprintf_internal_r+0x133c>
 20072e4:	4c800204 	addi	r18,r9,8
 20072e8:	003f3e06 	br	2006fe4 <___vfprintf_internal_r+0x1034>
 20072ec:	d9412917 	ldw	r5,1188(sp)
 20072f0:	8809883a 	mov	r4,r17
 20072f4:	d9811b04 	addi	r6,sp,1132
 20072f8:	2005f7c0 	call	2005f7c <__sprint_r>
 20072fc:	103cbf1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007300:	dc800404 	addi	r18,sp,16
 2007304:	da011d17 	ldw	r8,1140(sp)
 2007308:	d8c11c17 	ldw	r3,1136(sp)
 200730c:	003f3506 	br	2006fe4 <___vfprintf_internal_r+0x1034>
 2007310:	d9412917 	ldw	r5,1188(sp)
 2007314:	8809883a 	mov	r4,r17
 2007318:	d9811b04 	addi	r6,sp,1132
 200731c:	2005f7c0 	call	2005f7c <__sprint_r>
 2007320:	103cb61e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007324:	da011d17 	ldw	r8,1140(sp)
 2007328:	d8c11c17 	ldw	r3,1136(sp)
 200732c:	da400404 	addi	r9,sp,16
 2007330:	003f0b06 	br	2006f60 <___vfprintf_internal_r+0xfb0>
 2007334:	d9412917 	ldw	r5,1188(sp)
 2007338:	8809883a 	mov	r4,r17
 200733c:	d9811b04 	addi	r6,sp,1132
 2007340:	2005f7c0 	call	2005f7c <__sprint_r>
 2007344:	103cad1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007348:	da011d17 	ldw	r8,1140(sp)
 200734c:	d8c11c17 	ldw	r3,1136(sp)
 2007350:	dc800404 	addi	r18,sp,16
 2007354:	003f0d06 	br	2006f8c <___vfprintf_internal_r+0xfdc>
 2007358:	95000015 	stw	r20,0(r18)
 200735c:	94c00115 	stw	r19,4(r18)
 2007360:	44d1883a 	add	r8,r8,r19
 2007364:	003f1906 	br	2006fcc <___vfprintf_internal_r+0x101c>
 2007368:	d9412917 	ldw	r5,1188(sp)
 200736c:	8809883a 	mov	r4,r17
 2007370:	d9811b04 	addi	r6,sp,1132
 2007374:	2005f7c0 	call	2005f7c <__sprint_r>
 2007378:	103ca01e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 200737c:	da011d17 	ldw	r8,1140(sp)
 2007380:	d8c11c17 	ldw	r3,1136(sp)
 2007384:	da400404 	addi	r9,sp,16
 2007388:	003db706 	br	2006a68 <___vfprintf_internal_r+0xab8>
 200738c:	4d000015 	stw	r20,0(r9)
 2007390:	4c800115 	stw	r18,4(r9)
 2007394:	4491883a 	add	r8,r8,r18
 2007398:	003de706 	br	2006b38 <___vfprintf_internal_r+0xb88>
 200739c:	8080100c 	andi	r2,r16,64
 20073a0:	10010226 	beq	r2,zero,20077ac <___vfprintf_internal_r+0x17fc>
 20073a4:	d8812d17 	ldw	r2,1204(sp)
 20073a8:	002d883a 	mov	r22,zero
 20073ac:	00c00044 	movi	r3,1
 20073b0:	15c0000b 	ldhu	r23,0(r2)
 20073b4:	10800104 	addi	r2,r2,4
 20073b8:	d8812d15 	stw	r2,1204(sp)
 20073bc:	d8012585 	stb	zero,1174(sp)
 20073c0:	b805883a 	mov	r2,r23
 20073c4:	003bd106 	br	200630c <___vfprintf_internal_r+0x35c>
 20073c8:	d9012d17 	ldw	r4,1204(sp)
 20073cc:	25800017 	ldw	r22,0(r4)
 20073d0:	25000117 	ldw	r20,4(r4)
 20073d4:	21000204 	addi	r4,r4,8
 20073d8:	d9012d15 	stw	r4,1204(sp)
 20073dc:	dd813315 	stw	r22,1228(sp)
 20073e0:	dd013415 	stw	r20,1232(sp)
 20073e4:	003d2b06 	br	2006894 <___vfprintf_internal_r+0x8e4>
 20073e8:	8080100c 	andi	r2,r16,64
 20073ec:	1000fe26 	beq	r2,zero,20077e8 <___vfprintf_internal_r+0x1838>
 20073f0:	d9012d17 	ldw	r4,1204(sp)
 20073f4:	002d883a 	mov	r22,zero
 20073f8:	0007883a 	mov	r3,zero
 20073fc:	25c0000b 	ldhu	r23,0(r4)
 2007400:	21000104 	addi	r4,r4,4
 2007404:	d9012d15 	stw	r4,1204(sp)
 2007408:	b805883a 	mov	r2,r23
 200740c:	d8012585 	stb	zero,1174(sp)
 2007410:	003bbe06 	br	200630c <___vfprintf_internal_r+0x35c>
 2007414:	8080100c 	andi	r2,r16,64
 2007418:	1000ed26 	beq	r2,zero,20077d0 <___vfprintf_internal_r+0x1820>
 200741c:	d9012d17 	ldw	r4,1204(sp)
 2007420:	002d883a 	mov	r22,zero
 2007424:	25c0000b 	ldhu	r23,0(r4)
 2007428:	21000104 	addi	r4,r4,4
 200742c:	d9012d15 	stw	r4,1204(sp)
 2007430:	003cd206 	br	200677c <___vfprintf_internal_r+0x7cc>
 2007434:	00c00084 	movi	r3,2
 2007438:	d8012585 	stb	zero,1174(sp)
 200743c:	003bb306 	br	200630c <___vfprintf_internal_r+0x35c>
 2007440:	8080040c 	andi	r2,r16,16
 2007444:	1000f11e 	bne	r2,zero,200780c <___vfprintf_internal_r+0x185c>
 2007448:	8400100c 	andi	r16,r16,64
 200744c:	80015526 	beq	r16,zero,20079a4 <___vfprintf_internal_r+0x19f4>
 2007450:	da012d17 	ldw	r8,1204(sp)
 2007454:	d8c12c17 	ldw	r3,1200(sp)
 2007458:	40800017 	ldw	r2,0(r8)
 200745c:	42000104 	addi	r8,r8,4
 2007460:	da012d15 	stw	r8,1204(sp)
 2007464:	10c0000d 	sth	r3,0(r2)
 2007468:	003b0706 	br	2006088 <___vfprintf_internal_r+0xd8>
 200746c:	8080100c 	andi	r2,r16,64
 2007470:	1000c726 	beq	r2,zero,2007790 <___vfprintf_internal_r+0x17e0>
 2007474:	da012d17 	ldw	r8,1204(sp)
 2007478:	45c0000f 	ldh	r23,0(r8)
 200747c:	42000104 	addi	r8,r8,4
 2007480:	da012d15 	stw	r8,1204(sp)
 2007484:	b82dd7fa 	srai	r22,r23,31
 2007488:	b005883a 	mov	r2,r22
 200748c:	003c1006 	br	20064d0 <___vfprintf_internal_r+0x520>
 2007490:	ac800007 	ldb	r18,0(r21)
 2007494:	003b2406 	br	2006128 <___vfprintf_internal_r+0x178>
 2007498:	4c800115 	stw	r18,4(r9)
 200749c:	9211883a 	add	r8,r18,r8
 20074a0:	18c00044 	addi	r3,r3,1
 20074a4:	da011d15 	stw	r8,1140(sp)
 20074a8:	d8c11c15 	stw	r3,1136(sp)
 20074ac:	008001c4 	movi	r2,7
 20074b0:	10c15416 	blt	r2,r3,2007a04 <___vfprintf_internal_r+0x1a54>
 20074b4:	4a400204 	addi	r9,r9,8
 20074b8:	d8813717 	ldw	r2,1244(sp)
 20074bc:	9ca7883a 	add	r19,r19,r18
 20074c0:	48800015 	stw	r2,0(r9)
 20074c4:	00800044 	movi	r2,1
 20074c8:	48800115 	stw	r2,4(r9)
 20074cc:	4091883a 	add	r8,r8,r2
 20074d0:	1887883a 	add	r3,r3,r2
 20074d4:	da011d15 	stw	r8,1140(sp)
 20074d8:	d8c11c15 	stw	r3,1136(sp)
 20074dc:	008001c4 	movi	r2,7
 20074e0:	10c14016 	blt	r2,r3,20079e4 <___vfprintf_internal_r+0x1a34>
 20074e4:	4a400204 	addi	r9,r9,8
 20074e8:	d9013217 	ldw	r4,1224(sp)
 20074ec:	da011d17 	ldw	r8,1140(sp)
 20074f0:	d8c11c17 	ldw	r3,1136(sp)
 20074f4:	24a5c83a 	sub	r18,r4,r18
 20074f8:	4cc00015 	stw	r19,0(r9)
 20074fc:	003fa406 	br	2007390 <___vfprintf_internal_r+0x13e0>
 2007500:	04c08074 	movhi	r19,513
 2007504:	9cc73704 	addi	r19,r19,7388
 2007508:	003cf406 	br	20068dc <___vfprintf_internal_r+0x92c>
 200750c:	d9412917 	ldw	r5,1188(sp)
 2007510:	8809883a 	mov	r4,r17
 2007514:	d9811b04 	addi	r6,sp,1132
 2007518:	2005f7c0 	call	2005f7c <__sprint_r>
 200751c:	103c371e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007520:	da011d17 	ldw	r8,1140(sp)
 2007524:	da400404 	addi	r9,sp,16
 2007528:	003e1c06 	br	2006d9c <___vfprintf_internal_r+0xdec>
 200752c:	00808074 	movhi	r2,513
 2007530:	10874604 	addi	r2,r2,7448
 2007534:	48800015 	stw	r2,0(r9)
 2007538:	00800044 	movi	r2,1
 200753c:	48800115 	stw	r2,4(r9)
 2007540:	4091883a 	add	r8,r8,r2
 2007544:	1887883a 	add	r3,r3,r2
 2007548:	da011d15 	stw	r8,1140(sp)
 200754c:	d8c11c15 	stw	r3,1136(sp)
 2007550:	008001c4 	movi	r2,7
 2007554:	10c0c316 	blt	r2,r3,2007864 <___vfprintf_internal_r+0x18b4>
 2007558:	4a400204 	addi	r9,r9,8
 200755c:	9000041e 	bne	r18,zero,2007570 <___vfprintf_internal_r+0x15c0>
 2007560:	d8c13217 	ldw	r3,1224(sp)
 2007564:	1800021e 	bne	r3,zero,2007570 <___vfprintf_internal_r+0x15c0>
 2007568:	8080004c 	andi	r2,r16,1
 200756c:	103d7826 	beq	r2,zero,2006b50 <___vfprintf_internal_r+0xba0>
 2007570:	d8c11c17 	ldw	r3,1136(sp)
 2007574:	d9013717 	ldw	r4,1244(sp)
 2007578:	00800044 	movi	r2,1
 200757c:	48800115 	stw	r2,4(r9)
 2007580:	49000015 	stw	r4,0(r9)
 2007584:	4091883a 	add	r8,r8,r2
 2007588:	1887883a 	add	r3,r3,r2
 200758c:	da011d15 	stw	r8,1140(sp)
 2007590:	d8c11c15 	stw	r3,1136(sp)
 2007594:	008001c4 	movi	r2,7
 2007598:	10c12e16 	blt	r2,r3,2007a54 <___vfprintf_internal_r+0x1aa4>
 200759c:	4a400204 	addi	r9,r9,8
 20075a0:	04a5c83a 	sub	r18,zero,r18
 20075a4:	0480de0e 	bge	zero,r18,2007920 <___vfprintf_internal_r+0x1970>
 20075a8:	05800404 	movi	r22,16
 20075ac:	05008074 	movhi	r20,513
 20075b0:	a5074a84 	addi	r20,r20,7466
 20075b4:	b480e20e 	bge	r22,r18,2007940 <___vfprintf_internal_r+0x1990>
 20075b8:	05c001c4 	movi	r23,7
 20075bc:	df012917 	ldw	fp,1188(sp)
 20075c0:	00000306 	br	20075d0 <___vfprintf_internal_r+0x1620>
 20075c4:	4a400204 	addi	r9,r9,8
 20075c8:	94bffc04 	addi	r18,r18,-16
 20075cc:	b480dc0e 	bge	r22,r18,2007940 <___vfprintf_internal_r+0x1990>
 20075d0:	4d000015 	stw	r20,0(r9)
 20075d4:	4d800115 	stw	r22,4(r9)
 20075d8:	42000404 	addi	r8,r8,16
 20075dc:	18c00044 	addi	r3,r3,1
 20075e0:	da011d15 	stw	r8,1140(sp)
 20075e4:	d8c11c15 	stw	r3,1136(sp)
 20075e8:	b8fff60e 	bge	r23,r3,20075c4 <___vfprintf_internal_r+0x1614>
 20075ec:	8809883a 	mov	r4,r17
 20075f0:	e00b883a 	mov	r5,fp
 20075f4:	d9811b04 	addi	r6,sp,1132
 20075f8:	2005f7c0 	call	2005f7c <__sprint_r>
 20075fc:	103bff1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007600:	da011d17 	ldw	r8,1140(sp)
 2007604:	d8c11c17 	ldw	r3,1136(sp)
 2007608:	da400404 	addi	r9,sp,16
 200760c:	003fee06 	br	20075c8 <___vfprintf_internal_r+0x1618>
 2007610:	da413c15 	stw	r9,1264(sp)
 2007614:	200ca7c0 	call	200ca7c <__isnand>
 2007618:	da413c17 	ldw	r9,1264(sp)
 200761c:	1000851e 	bne	r2,zero,2007834 <___vfprintf_internal_r+0x1884>
 2007620:	00bfffc4 	movi	r2,-1
 2007624:	e0817626 	beq	fp,r2,2007c00 <___vfprintf_internal_r+0x1c50>
 2007628:	008019c4 	movi	r2,103
 200762c:	90817126 	beq	r18,r2,2007bf4 <___vfprintf_internal_r+0x1c44>
 2007630:	008011c4 	movi	r2,71
 2007634:	90816f26 	beq	r18,r2,2007bf4 <___vfprintf_internal_r+0x1c44>
 2007638:	82004014 	ori	r8,r16,256
 200763c:	da012a15 	stw	r8,1192(sp)
 2007640:	a0017116 	blt	r20,zero,2007c08 <___vfprintf_internal_r+0x1c58>
 2007644:	d8012f05 	stb	zero,1212(sp)
 2007648:	00801984 	movi	r2,102
 200764c:	90811226 	beq	r18,r2,2007a98 <___vfprintf_internal_r+0x1ae8>
 2007650:	00801184 	movi	r2,70
 2007654:	90811026 	beq	r18,r2,2007a98 <___vfprintf_internal_r+0x1ae8>
 2007658:	00801944 	movi	r2,101
 200765c:	90819b26 	beq	r18,r2,2007ccc <___vfprintf_internal_r+0x1d1c>
 2007660:	00801144 	movi	r2,69
 2007664:	90819926 	beq	r18,r2,2007ccc <___vfprintf_internal_r+0x1d1c>
 2007668:	e02f883a 	mov	r23,fp
 200766c:	d8812404 	addi	r2,sp,1168
 2007670:	d8800115 	stw	r2,4(sp)
 2007674:	d8812304 	addi	r2,sp,1164
 2007678:	d8800215 	stw	r2,8(sp)
 200767c:	d8812204 	addi	r2,sp,1160
 2007680:	ddc00015 	stw	r23,0(sp)
 2007684:	d8800315 	stw	r2,12(sp)
 2007688:	8809883a 	mov	r4,r17
 200768c:	b00b883a 	mov	r5,r22
 2007690:	a00d883a 	mov	r6,r20
 2007694:	01c00084 	movi	r7,2
 2007698:	da413c15 	stw	r9,1264(sp)
 200769c:	20081480 	call	2008148 <_dtoa_r>
 20076a0:	1027883a 	mov	r19,r2
 20076a4:	008019c4 	movi	r2,103
 20076a8:	da413c17 	ldw	r9,1264(sp)
 20076ac:	90818c1e 	bne	r18,r2,2007ce0 <___vfprintf_internal_r+0x1d30>
 20076b0:	8080004c 	andi	r2,r16,1
 20076b4:	10017926 	beq	r2,zero,2007c9c <___vfprintf_internal_r+0x1cec>
 20076b8:	00801184 	movi	r2,70
 20076bc:	9dc7883a 	add	r3,r19,r23
 20076c0:	90810626 	beq	r18,r2,2007adc <___vfprintf_internal_r+0x1b2c>
 20076c4:	b009883a 	mov	r4,r22
 20076c8:	a00b883a 	mov	r5,r20
 20076cc:	000d883a 	mov	r6,zero
 20076d0:	000f883a 	mov	r7,zero
 20076d4:	d8c13b15 	stw	r3,1260(sp)
 20076d8:	da413c15 	stw	r9,1264(sp)
 20076dc:	200df040 	call	200df04 <__eqdf2>
 20076e0:	d8c13b17 	ldw	r3,1260(sp)
 20076e4:	da413c17 	ldw	r9,1264(sp)
 20076e8:	10000726 	beq	r2,zero,2007708 <___vfprintf_internal_r+0x1758>
 20076ec:	d8812217 	ldw	r2,1160(sp)
 20076f0:	10c1962e 	bgeu	r2,r3,2007d4c <___vfprintf_internal_r+0x1d9c>
 20076f4:	01000c04 	movi	r4,48
 20076f8:	11000005 	stb	r4,0(r2)
 20076fc:	10800044 	addi	r2,r2,1
 2007700:	d8812215 	stw	r2,1160(sp)
 2007704:	10fffc1e 	bne	r2,r3,20076f8 <___vfprintf_internal_r+0x1748>
 2007708:	1cc7c83a 	sub	r3,r3,r19
 200770c:	d8c13215 	stw	r3,1224(sp)
 2007710:	008019c4 	movi	r2,103
 2007714:	90810626 	beq	r18,r2,2007b30 <___vfprintf_internal_r+0x1b80>
 2007718:	008011c4 	movi	r2,71
 200771c:	90810426 	beq	r18,r2,2007b30 <___vfprintf_internal_r+0x1b80>
 2007720:	00801984 	movi	r2,102
 2007724:	90819a1e 	bne	r18,r2,2007d90 <___vfprintf_internal_r+0x1de0>
 2007728:	d8812417 	ldw	r2,1168(sp)
 200772c:	d8812b15 	stw	r2,1196(sp)
 2007730:	0081880e 	bge	zero,r2,2007d54 <___vfprintf_internal_r+0x1da4>
 2007734:	e000021e 	bne	fp,zero,2007740 <___vfprintf_internal_r+0x1790>
 2007738:	8400004c 	andi	r16,r16,1
 200773c:	80000426 	beq	r16,zero,2007750 <___vfprintf_internal_r+0x17a0>
 2007740:	d8812b17 	ldw	r2,1196(sp)
 2007744:	e2000044 	addi	r8,fp,1
 2007748:	1205883a 	add	r2,r2,r8
 200774c:	d8812b15 	stw	r2,1196(sp)
 2007750:	d8812815 	stw	r2,1184(sp)
 2007754:	10011716 	blt	r2,zero,2007bb4 <___vfprintf_internal_r+0x1c04>
 2007758:	ddc12f07 	ldb	r23,1212(sp)
 200775c:	b800ca26 	beq	r23,zero,2007a88 <___vfprintf_internal_r+0x1ad8>
 2007760:	00800b44 	movi	r2,45
 2007764:	d8812585 	stb	r2,1174(sp)
 2007768:	dc012a17 	ldw	r16,1192(sp)
 200776c:	d8013115 	stw	zero,1220(sp)
 2007770:	003afe06 	br	200636c <___vfprintf_internal_r+0x3bc>
 2007774:	d8812b17 	ldw	r2,1196(sp)
 2007778:	d8812815 	stw	r2,1184(sp)
 200777c:	10005e16 	blt	r2,zero,20078f8 <___vfprintf_internal_r+0x1948>
 2007780:	d8812583 	ldbu	r2,1174(sp)
 2007784:	ddc12d15 	stw	r23,1204(sp)
 2007788:	d8013115 	stw	zero,1220(sp)
 200778c:	003af306 	br	200635c <___vfprintf_internal_r+0x3ac>
 2007790:	d8812d17 	ldw	r2,1204(sp)
 2007794:	15c00017 	ldw	r23,0(r2)
 2007798:	10800104 	addi	r2,r2,4
 200779c:	d8812d15 	stw	r2,1204(sp)
 20077a0:	b82dd7fa 	srai	r22,r23,31
 20077a4:	b005883a 	mov	r2,r22
 20077a8:	003b4906 	br	20064d0 <___vfprintf_internal_r+0x520>
 20077ac:	d8c12d17 	ldw	r3,1204(sp)
 20077b0:	002d883a 	mov	r22,zero
 20077b4:	1dc00017 	ldw	r23,0(r3)
 20077b8:	18c00104 	addi	r3,r3,4
 20077bc:	d8c12d15 	stw	r3,1204(sp)
 20077c0:	b805883a 	mov	r2,r23
 20077c4:	00c00044 	movi	r3,1
 20077c8:	d8012585 	stb	zero,1174(sp)
 20077cc:	003acf06 	br	200630c <___vfprintf_internal_r+0x35c>
 20077d0:	da012d17 	ldw	r8,1204(sp)
 20077d4:	002d883a 	mov	r22,zero
 20077d8:	45c00017 	ldw	r23,0(r8)
 20077dc:	42000104 	addi	r8,r8,4
 20077e0:	da012d15 	stw	r8,1204(sp)
 20077e4:	003be506 	br	200677c <___vfprintf_internal_r+0x7cc>
 20077e8:	da012d17 	ldw	r8,1204(sp)
 20077ec:	002d883a 	mov	r22,zero
 20077f0:	0007883a 	mov	r3,zero
 20077f4:	45c00017 	ldw	r23,0(r8)
 20077f8:	42000104 	addi	r8,r8,4
 20077fc:	da012d15 	stw	r8,1204(sp)
 2007800:	b805883a 	mov	r2,r23
 2007804:	d8012585 	stb	zero,1174(sp)
 2007808:	003ac006 	br	200630c <___vfprintf_internal_r+0x35c>
 200780c:	d8c12d17 	ldw	r3,1204(sp)
 2007810:	d9012c17 	ldw	r4,1200(sp)
 2007814:	18800017 	ldw	r2,0(r3)
 2007818:	18c00104 	addi	r3,r3,4
 200781c:	d8c12d15 	stw	r3,1204(sp)
 2007820:	11000015 	stw	r4,0(r2)
 2007824:	003a1806 	br	2006088 <___vfprintf_internal_r+0xd8>
 2007828:	073fffc4 	movi	fp,-1
 200782c:	202b883a 	mov	r21,r4
 2007830:	003a3e06 	br	200612c <___vfprintf_internal_r+0x17c>
 2007834:	008011c4 	movi	r2,71
 2007838:	14809016 	blt	r2,r18,2007a7c <___vfprintf_internal_r+0x1acc>
 200783c:	04c08074 	movhi	r19,513
 2007840:	9cc73804 	addi	r19,r19,7392
 2007844:	00c000c4 	movi	r3,3
 2007848:	00bfdfc4 	movi	r2,-129
 200784c:	80a0703a 	and	r16,r16,r2
 2007850:	d8c12815 	stw	r3,1184(sp)
 2007854:	d8812583 	ldbu	r2,1174(sp)
 2007858:	d8c12b15 	stw	r3,1196(sp)
 200785c:	d8013115 	stw	zero,1220(sp)
 2007860:	003abe06 	br	200635c <___vfprintf_internal_r+0x3ac>
 2007864:	d9412917 	ldw	r5,1188(sp)
 2007868:	8809883a 	mov	r4,r17
 200786c:	d9811b04 	addi	r6,sp,1132
 2007870:	2005f7c0 	call	2005f7c <__sprint_r>
 2007874:	103b611e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007878:	dc812417 	ldw	r18,1168(sp)
 200787c:	da011d17 	ldw	r8,1140(sp)
 2007880:	da400404 	addi	r9,sp,16
 2007884:	003f3506 	br	200755c <___vfprintf_internal_r+0x15ac>
 2007888:	ad400044 	addi	r21,r21,1
 200788c:	84000814 	ori	r16,r16,32
 2007890:	14800047 	ldb	r18,1(r2)
 2007894:	003a2406 	br	2006128 <___vfprintf_internal_r+0x178>
 2007898:	d9412917 	ldw	r5,1188(sp)
 200789c:	8809883a 	mov	r4,r17
 20078a0:	d9811b04 	addi	r6,sp,1132
 20078a4:	2005f7c0 	call	2005f7c <__sprint_r>
 20078a8:	103b541e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 20078ac:	da011d17 	ldw	r8,1140(sp)
 20078b0:	da400404 	addi	r9,sp,16
 20078b4:	003d4a06 	br	2006de0 <___vfprintf_internal_r+0xe30>
 20078b8:	4d000015 	stw	r20,0(r9)
 20078bc:	4c800115 	stw	r18,4(r9)
 20078c0:	4491883a 	add	r8,r8,r18
 20078c4:	18c00044 	addi	r3,r3,1
 20078c8:	da011d15 	stw	r8,1140(sp)
 20078cc:	d8c11c15 	stw	r3,1136(sp)
 20078d0:	008001c4 	movi	r2,7
 20078d4:	10fcdc16 	blt	r2,r3,2006c48 <___vfprintf_internal_r+0xc98>
 20078d8:	4a400204 	addi	r9,r9,8
 20078dc:	003ce106 	br	2006c64 <___vfprintf_internal_r+0xcb4>
 20078e0:	da413c15 	stw	r9,1264(sp)
 20078e4:	200ccf00 	call	200ccf0 <strlen>
 20078e8:	d8812b15 	stw	r2,1196(sp)
 20078ec:	d8812815 	stw	r2,1184(sp)
 20078f0:	da413c17 	ldw	r9,1264(sp)
 20078f4:	103fa20e 	bge	r2,zero,2007780 <___vfprintf_internal_r+0x17d0>
 20078f8:	d8012815 	stw	zero,1184(sp)
 20078fc:	003fa006 	br	2007780 <___vfprintf_internal_r+0x17d0>
 2007900:	d9412917 	ldw	r5,1188(sp)
 2007904:	8809883a 	mov	r4,r17
 2007908:	d9811b04 	addi	r6,sp,1132
 200790c:	2005f7c0 	call	2005f7c <__sprint_r>
 2007910:	103b3a1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007914:	da011d17 	ldw	r8,1140(sp)
 2007918:	d8c11c17 	ldw	r3,1136(sp)
 200791c:	da400404 	addi	r9,sp,16
 2007920:	d8813217 	ldw	r2,1224(sp)
 2007924:	4cc00015 	stw	r19,0(r9)
 2007928:	48800115 	stw	r2,4(r9)
 200792c:	4091883a 	add	r8,r8,r2
 2007930:	003c8106 	br	2006b38 <___vfprintf_internal_r+0xb88>
 2007934:	00800b44 	movi	r2,45
 2007938:	d8812585 	stb	r2,1174(sp)
 200793c:	003be306 	br	20068cc <___vfprintf_internal_r+0x91c>
 2007940:	4d000015 	stw	r20,0(r9)
 2007944:	4c800115 	stw	r18,4(r9)
 2007948:	4491883a 	add	r8,r8,r18
 200794c:	18c00044 	addi	r3,r3,1
 2007950:	da011d15 	stw	r8,1140(sp)
 2007954:	d8c11c15 	stw	r3,1136(sp)
 2007958:	008001c4 	movi	r2,7
 200795c:	10ffe816 	blt	r2,r3,2007900 <___vfprintf_internal_r+0x1950>
 2007960:	4a400204 	addi	r9,r9,8
 2007964:	003fee06 	br	2007920 <___vfprintf_internal_r+0x1970>
 2007968:	df012b15 	stw	fp,1196(sp)
 200796c:	00800184 	movi	r2,6
 2007970:	1700072e 	bgeu	r2,fp,2007990 <___vfprintf_internal_r+0x19e0>
 2007974:	d8812b15 	stw	r2,1196(sp)
 2007978:	d8812815 	stw	r2,1184(sp)
 200797c:	ddc12d15 	stw	r23,1204(sp)
 2007980:	04c08074 	movhi	r19,513
 2007984:	9cc74404 	addi	r19,r19,7440
 2007988:	d8013115 	stw	zero,1220(sp)
 200798c:	003a7a06 	br	2006378 <___vfprintf_internal_r+0x3c8>
 2007990:	d8812b17 	ldw	r2,1196(sp)
 2007994:	d8812815 	stw	r2,1184(sp)
 2007998:	103ff80e 	bge	r2,zero,200797c <___vfprintf_internal_r+0x19cc>
 200799c:	d8012815 	stw	zero,1184(sp)
 20079a0:	003ff606 	br	200797c <___vfprintf_internal_r+0x19cc>
 20079a4:	d9012d17 	ldw	r4,1204(sp)
 20079a8:	da012c17 	ldw	r8,1200(sp)
 20079ac:	20800017 	ldw	r2,0(r4)
 20079b0:	21000104 	addi	r4,r4,4
 20079b4:	d9012d15 	stw	r4,1204(sp)
 20079b8:	12000015 	stw	r8,0(r2)
 20079bc:	0039b206 	br	2006088 <___vfprintf_internal_r+0xd8>
 20079c0:	d9412917 	ldw	r5,1188(sp)
 20079c4:	8809883a 	mov	r4,r17
 20079c8:	d9811b04 	addi	r6,sp,1132
 20079cc:	2005f7c0 	call	2005f7c <__sprint_r>
 20079d0:	103b0a1e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 20079d4:	dc812417 	ldw	r18,1168(sp)
 20079d8:	da011d17 	ldw	r8,1140(sp)
 20079dc:	da400404 	addi	r9,sp,16
 20079e0:	003def06 	br	20071a0 <___vfprintf_internal_r+0x11f0>
 20079e4:	d9412917 	ldw	r5,1188(sp)
 20079e8:	8809883a 	mov	r4,r17
 20079ec:	d9811b04 	addi	r6,sp,1132
 20079f0:	2005f7c0 	call	2005f7c <__sprint_r>
 20079f4:	103b011e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 20079f8:	dc812417 	ldw	r18,1168(sp)
 20079fc:	da400404 	addi	r9,sp,16
 2007a00:	003eb906 	br	20074e8 <___vfprintf_internal_r+0x1538>
 2007a04:	d9412917 	ldw	r5,1188(sp)
 2007a08:	8809883a 	mov	r4,r17
 2007a0c:	d9811b04 	addi	r6,sp,1132
 2007a10:	2005f7c0 	call	2005f7c <__sprint_r>
 2007a14:	103af91e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007a18:	dc812417 	ldw	r18,1168(sp)
 2007a1c:	da011d17 	ldw	r8,1140(sp)
 2007a20:	d8c11c17 	ldw	r3,1136(sp)
 2007a24:	da400404 	addi	r9,sp,16
 2007a28:	003ea306 	br	20074b8 <___vfprintf_internal_r+0x1508>
 2007a2c:	00800244 	movi	r2,9
 2007a30:	15fda636 	bltu	r2,r23,20070cc <___vfprintf_internal_r+0x111c>
 2007a34:	dd010e04 	addi	r20,sp,1080
 2007a38:	003dc206 	br	2007144 <___vfprintf_internal_r+0x1194>
 2007a3c:	df012815 	stw	fp,1184(sp)
 2007a40:	d8812583 	ldbu	r2,1174(sp)
 2007a44:	df012b15 	stw	fp,1196(sp)
 2007a48:	ddc12d15 	stw	r23,1204(sp)
 2007a4c:	d8013115 	stw	zero,1220(sp)
 2007a50:	003a4206 	br	200635c <___vfprintf_internal_r+0x3ac>
 2007a54:	d9412917 	ldw	r5,1188(sp)
 2007a58:	8809883a 	mov	r4,r17
 2007a5c:	d9811b04 	addi	r6,sp,1132
 2007a60:	2005f7c0 	call	2005f7c <__sprint_r>
 2007a64:	103ae51e 	bne	r2,zero,20065fc <___vfprintf_internal_r+0x64c>
 2007a68:	dc812417 	ldw	r18,1168(sp)
 2007a6c:	da011d17 	ldw	r8,1140(sp)
 2007a70:	d8c11c17 	ldw	r3,1136(sp)
 2007a74:	da400404 	addi	r9,sp,16
 2007a78:	003ec906 	br	20075a0 <___vfprintf_internal_r+0x15f0>
 2007a7c:	04c08074 	movhi	r19,513
 2007a80:	9cc73904 	addi	r19,r19,7396
 2007a84:	003f6f06 	br	2007844 <___vfprintf_internal_r+0x1894>
 2007a88:	d8812583 	ldbu	r2,1174(sp)
 2007a8c:	dc012a17 	ldw	r16,1192(sp)
 2007a90:	d8013115 	stw	zero,1220(sp)
 2007a94:	003a3106 	br	200635c <___vfprintf_internal_r+0x3ac>
 2007a98:	d8812404 	addi	r2,sp,1168
 2007a9c:	d8800115 	stw	r2,4(sp)
 2007aa0:	d8812304 	addi	r2,sp,1164
 2007aa4:	d8800215 	stw	r2,8(sp)
 2007aa8:	d8812204 	addi	r2,sp,1160
 2007aac:	df000015 	stw	fp,0(sp)
 2007ab0:	d8800315 	stw	r2,12(sp)
 2007ab4:	8809883a 	mov	r4,r17
 2007ab8:	b00b883a 	mov	r5,r22
 2007abc:	a00d883a 	mov	r6,r20
 2007ac0:	01c000c4 	movi	r7,3
 2007ac4:	da413c15 	stw	r9,1264(sp)
 2007ac8:	20081480 	call	2008148 <_dtoa_r>
 2007acc:	da413c17 	ldw	r9,1264(sp)
 2007ad0:	1027883a 	mov	r19,r2
 2007ad4:	1707883a 	add	r3,r2,fp
 2007ad8:	e02f883a 	mov	r23,fp
 2007adc:	99000007 	ldb	r4,0(r19)
 2007ae0:	00800c04 	movi	r2,48
 2007ae4:	20800326 	beq	r4,r2,2007af4 <___vfprintf_internal_r+0x1b44>
 2007ae8:	da812417 	ldw	r10,1168(sp)
 2007aec:	1a87883a 	add	r3,r3,r10
 2007af0:	003ef406 	br	20076c4 <___vfprintf_internal_r+0x1714>
 2007af4:	b009883a 	mov	r4,r22
 2007af8:	a00b883a 	mov	r5,r20
 2007afc:	000d883a 	mov	r6,zero
 2007b00:	000f883a 	mov	r7,zero
 2007b04:	d8c13b15 	stw	r3,1260(sp)
 2007b08:	da413c15 	stw	r9,1264(sp)
 2007b0c:	200df600 	call	200df60 <__nedf2>
 2007b10:	d8c13b17 	ldw	r3,1260(sp)
 2007b14:	da413c17 	ldw	r9,1264(sp)
 2007b18:	103ff326 	beq	r2,zero,2007ae8 <___vfprintf_internal_r+0x1b38>
 2007b1c:	00800044 	movi	r2,1
 2007b20:	15d5c83a 	sub	r10,r2,r23
 2007b24:	da812415 	stw	r10,1168(sp)
 2007b28:	1a87883a 	add	r3,r3,r10
 2007b2c:	003ee506 	br	20076c4 <___vfprintf_internal_r+0x1714>
 2007b30:	d8812417 	ldw	r2,1168(sp)
 2007b34:	d8812b15 	stw	r2,1196(sp)
 2007b38:	1029883a 	mov	r20,r2
 2007b3c:	00bfff44 	movi	r2,-3
 2007b40:	a0800116 	blt	r20,r2,2007b48 <___vfprintf_internal_r+0x1b98>
 2007b44:	e5001d0e 	bge	fp,r20,2007bbc <___vfprintf_internal_r+0x1c0c>
 2007b48:	94bfff84 	addi	r18,r18,-2
 2007b4c:	a53fffc4 	addi	r20,r20,-1
 2007b50:	dd012415 	stw	r20,1168(sp)
 2007b54:	dc811fc5 	stb	r18,1151(sp)
 2007b58:	a0007816 	blt	r20,zero,2007d3c <___vfprintf_internal_r+0x1d8c>
 2007b5c:	00800ac4 	movi	r2,43
 2007b60:	d8812005 	stb	r2,1152(sp)
 2007b64:	00800244 	movi	r2,9
 2007b68:	15002b16 	blt	r2,r20,2007c18 <___vfprintf_internal_r+0x1c68>
 2007b6c:	00800c04 	movi	r2,48
 2007b70:	a5000c04 	addi	r20,r20,48
 2007b74:	d8812045 	stb	r2,1153(sp)
 2007b78:	dd012085 	stb	r20,1154(sp)
 2007b7c:	d8c120c4 	addi	r3,sp,1155
 2007b80:	d8811fc4 	addi	r2,sp,1151
 2007b84:	da013217 	ldw	r8,1224(sp)
 2007b88:	1885c83a 	sub	r2,r3,r2
 2007b8c:	d8813515 	stw	r2,1236(sp)
 2007b90:	4085883a 	add	r2,r8,r2
 2007b94:	d8812b15 	stw	r2,1196(sp)
 2007b98:	00800044 	movi	r2,1
 2007b9c:	1200610e 	bge	r2,r8,2007d24 <___vfprintf_internal_r+0x1d74>
 2007ba0:	d8812b17 	ldw	r2,1196(sp)
 2007ba4:	10800044 	addi	r2,r2,1
 2007ba8:	d8812b15 	stw	r2,1196(sp)
 2007bac:	d8812815 	stw	r2,1184(sp)
 2007bb0:	103ee90e 	bge	r2,zero,2007758 <___vfprintf_internal_r+0x17a8>
 2007bb4:	d8012815 	stw	zero,1184(sp)
 2007bb8:	003ee706 	br	2007758 <___vfprintf_internal_r+0x17a8>
 2007bbc:	d8812b17 	ldw	r2,1196(sp)
 2007bc0:	da013217 	ldw	r8,1224(sp)
 2007bc4:	12003716 	blt	r2,r8,2007ca4 <___vfprintf_internal_r+0x1cf4>
 2007bc8:	8400004c 	andi	r16,r16,1
 2007bcc:	80000326 	beq	r16,zero,2007bdc <___vfprintf_internal_r+0x1c2c>
 2007bd0:	d8812b17 	ldw	r2,1196(sp)
 2007bd4:	10800044 	addi	r2,r2,1
 2007bd8:	d8812b15 	stw	r2,1196(sp)
 2007bdc:	d8812815 	stw	r2,1184(sp)
 2007be0:	10003716 	blt	r2,zero,2007cc0 <___vfprintf_internal_r+0x1d10>
 2007be4:	048019c4 	movi	r18,103
 2007be8:	003edb06 	br	2007758 <___vfprintf_internal_r+0x17a8>
 2007bec:	d8012815 	stw	zero,1184(sp)
 2007bf0:	003b6906 	br	2006998 <___vfprintf_internal_r+0x9e8>
 2007bf4:	e03e901e 	bne	fp,zero,2007638 <___vfprintf_internal_r+0x1688>
 2007bf8:	07000044 	movi	fp,1
 2007bfc:	003e8e06 	br	2007638 <___vfprintf_internal_r+0x1688>
 2007c00:	07000184 	movi	fp,6
 2007c04:	003e8c06 	br	2007638 <___vfprintf_internal_r+0x1688>
 2007c08:	00c00b44 	movi	r3,45
 2007c0c:	a520003c 	xorhi	r20,r20,32768
 2007c10:	d8c12f05 	stb	r3,1212(sp)
 2007c14:	003e8c06 	br	2007648 <___vfprintf_internal_r+0x1698>
 2007c18:	d8c11f84 	addi	r3,sp,1150
 2007c1c:	102f883a 	mov	r23,r2
 2007c20:	4839883a 	mov	fp,r9
 2007c24:	a009883a 	mov	r4,r20
 2007c28:	01400284 	movi	r5,10
 2007c2c:	182d883a 	mov	r22,r3
 2007c30:	200e25c0 	call	200e25c <__modsi3>
 2007c34:	10800c04 	addi	r2,r2,48
 2007c38:	a009883a 	mov	r4,r20
 2007c3c:	b0800005 	stb	r2,0(r22)
 2007c40:	01400284 	movi	r5,10
 2007c44:	200e20c0 	call	200e20c <__divsi3>
 2007c48:	1029883a 	mov	r20,r2
 2007c4c:	b0ffffc4 	addi	r3,r22,-1
 2007c50:	b8bff416 	blt	r23,r2,2007c24 <___vfprintf_internal_r+0x1c74>
 2007c54:	11400c04 	addi	r5,r2,48
 2007c58:	b17fffc5 	stb	r5,-1(r22)
 2007c5c:	d8811fc4 	addi	r2,sp,1151
 2007c60:	e013883a 	mov	r9,fp
 2007c64:	1880482e 	bgeu	r3,r2,2007d88 <___vfprintf_internal_r+0x1dd8>
 2007c68:	b007883a 	mov	r3,r22
 2007c6c:	d9012044 	addi	r4,sp,1153
 2007c70:	00000206 	br	2007c7c <___vfprintf_internal_r+0x1ccc>
 2007c74:	19400003 	ldbu	r5,0(r3)
 2007c78:	18c00044 	addi	r3,r3,1
 2007c7c:	21400005 	stb	r5,0(r4)
 2007c80:	21000044 	addi	r4,r4,1
 2007c84:	10fffb1e 	bne	r2,r3,2007c74 <___vfprintf_internal_r+0x1cc4>
 2007c88:	d8c12004 	addi	r3,sp,1152
 2007c8c:	1d87c83a 	sub	r3,r3,r22
 2007c90:	d9012044 	addi	r4,sp,1153
 2007c94:	20c7883a 	add	r3,r4,r3
 2007c98:	003fba06 	br	2007b84 <___vfprintf_internal_r+0x1bd4>
 2007c9c:	d8c12217 	ldw	r3,1160(sp)
 2007ca0:	003e9906 	br	2007708 <___vfprintf_internal_r+0x1758>
 2007ca4:	05000b0e 	bge	zero,r20,2007cd4 <___vfprintf_internal_r+0x1d24>
 2007ca8:	05000044 	movi	r20,1
 2007cac:	da013217 	ldw	r8,1224(sp)
 2007cb0:	a229883a 	add	r20,r20,r8
 2007cb4:	dd012b15 	stw	r20,1196(sp)
 2007cb8:	dd012815 	stw	r20,1184(sp)
 2007cbc:	a03fc90e 	bge	r20,zero,2007be4 <___vfprintf_internal_r+0x1c34>
 2007cc0:	d8012815 	stw	zero,1184(sp)
 2007cc4:	048019c4 	movi	r18,103
 2007cc8:	003ea306 	br	2007758 <___vfprintf_internal_r+0x17a8>
 2007ccc:	e5c00044 	addi	r23,fp,1
 2007cd0:	003e6606 	br	200766c <___vfprintf_internal_r+0x16bc>
 2007cd4:	00800084 	movi	r2,2
 2007cd8:	1529c83a 	sub	r20,r2,r20
 2007cdc:	003ff306 	br	2007cac <___vfprintf_internal_r+0x1cfc>
 2007ce0:	008011c4 	movi	r2,71
 2007ce4:	90be7226 	beq	r18,r2,20076b0 <___vfprintf_internal_r+0x1700>
 2007ce8:	003e7306 	br	20076b8 <___vfprintf_internal_r+0x1708>
 2007cec:	d8812d17 	ldw	r2,1204(sp)
 2007cf0:	ac800043 	ldbu	r18,1(r21)
 2007cf4:	202b883a 	mov	r21,r4
 2007cf8:	17000017 	ldw	fp,0(r2)
 2007cfc:	10800104 	addi	r2,r2,4
 2007d00:	d8812d15 	stw	r2,1204(sp)
 2007d04:	e0001b16 	blt	fp,zero,2007d74 <___vfprintf_internal_r+0x1dc4>
 2007d08:	94803fcc 	andi	r18,r18,255
 2007d0c:	9480201c 	xori	r18,r18,128
 2007d10:	94bfe004 	addi	r18,r18,-128
 2007d14:	00390406 	br	2006128 <___vfprintf_internal_r+0x178>
 2007d18:	00bfffc4 	movi	r2,-1
 2007d1c:	d8812c15 	stw	r2,1200(sp)
 2007d20:	003a2506 	br	20065b8 <___vfprintf_internal_r+0x608>
 2007d24:	80a0703a 	and	r16,r16,r2
 2007d28:	803f9d1e 	bne	r16,zero,2007ba0 <___vfprintf_internal_r+0x1bf0>
 2007d2c:	d8812b17 	ldw	r2,1196(sp)
 2007d30:	d8812815 	stw	r2,1184(sp)
 2007d34:	103e880e 	bge	r2,zero,2007758 <___vfprintf_internal_r+0x17a8>
 2007d38:	003f9e06 	br	2007bb4 <___vfprintf_internal_r+0x1c04>
 2007d3c:	00800b44 	movi	r2,45
 2007d40:	0529c83a 	sub	r20,zero,r20
 2007d44:	d8812005 	stb	r2,1152(sp)
 2007d48:	003f8606 	br	2007b64 <___vfprintf_internal_r+0x1bb4>
 2007d4c:	1007883a 	mov	r3,r2
 2007d50:	003e6d06 	br	2007708 <___vfprintf_internal_r+0x1758>
 2007d54:	e000021e 	bne	fp,zero,2007d60 <___vfprintf_internal_r+0x1db0>
 2007d58:	8400004c 	andi	r16,r16,1
 2007d5c:	80000e26 	beq	r16,zero,2007d98 <___vfprintf_internal_r+0x1de8>
 2007d60:	e7000084 	addi	fp,fp,2
 2007d64:	df012b15 	stw	fp,1196(sp)
 2007d68:	df012815 	stw	fp,1184(sp)
 2007d6c:	e03e7a0e 	bge	fp,zero,2007758 <___vfprintf_internal_r+0x17a8>
 2007d70:	003f9006 	br	2007bb4 <___vfprintf_internal_r+0x1c04>
 2007d74:	94803fcc 	andi	r18,r18,255
 2007d78:	9480201c 	xori	r18,r18,128
 2007d7c:	073fffc4 	movi	fp,-1
 2007d80:	94bfe004 	addi	r18,r18,-128
 2007d84:	0038e806 	br	2006128 <___vfprintf_internal_r+0x178>
 2007d88:	d8c12044 	addi	r3,sp,1153
 2007d8c:	003f7d06 	br	2007b84 <___vfprintf_internal_r+0x1bd4>
 2007d90:	dd012417 	ldw	r20,1168(sp)
 2007d94:	003f6d06 	br	2007b4c <___vfprintf_internal_r+0x1b9c>
 2007d98:	00c00044 	movi	r3,1
 2007d9c:	d8c12815 	stw	r3,1184(sp)
 2007da0:	d8c12b15 	stw	r3,1196(sp)
 2007da4:	003e6c06 	br	2007758 <___vfprintf_internal_r+0x17a8>

02007da8 <__vfprintf_internal>:
 2007da8:	00808074 	movhi	r2,513
 2007dac:	108e7804 	addi	r2,r2,14816
 2007db0:	2007883a 	mov	r3,r4
 2007db4:	11000017 	ldw	r4,0(r2)
 2007db8:	2805883a 	mov	r2,r5
 2007dbc:	300f883a 	mov	r7,r6
 2007dc0:	180b883a 	mov	r5,r3
 2007dc4:	100d883a 	mov	r6,r2
 2007dc8:	2005fb01 	jmpi	2005fb0 <___vfprintf_internal_r>

02007dcc <__swsetup_r>:
 2007dcc:	00808074 	movhi	r2,513
 2007dd0:	108e7804 	addi	r2,r2,14816
 2007dd4:	10800017 	ldw	r2,0(r2)
 2007dd8:	defffd04 	addi	sp,sp,-12
 2007ddc:	dc400115 	stw	r17,4(sp)
 2007de0:	dc000015 	stw	r16,0(sp)
 2007de4:	dfc00215 	stw	ra,8(sp)
 2007de8:	2023883a 	mov	r17,r4
 2007dec:	2821883a 	mov	r16,r5
 2007df0:	10000226 	beq	r2,zero,2007dfc <__swsetup_r+0x30>
 2007df4:	10c00e17 	ldw	r3,56(r2)
 2007df8:	18003d26 	beq	r3,zero,2007ef0 <__swsetup_r+0x124>
 2007dfc:	8080030b 	ldhu	r2,12(r16)
 2007e00:	10c0020c 	andi	r3,r2,8
 2007e04:	18ffffcc 	andi	r3,r3,65535
 2007e08:	18e0001c 	xori	r3,r3,32768
 2007e0c:	18e00004 	addi	r3,r3,-32768
 2007e10:	18001226 	beq	r3,zero,2007e5c <__swsetup_r+0x90>
 2007e14:	80c00417 	ldw	r3,16(r16)
 2007e18:	18001f26 	beq	r3,zero,2007e98 <__swsetup_r+0xcc>
 2007e1c:	1100004c 	andi	r4,r2,1
 2007e20:	2000261e 	bne	r4,zero,2007ebc <__swsetup_r+0xf0>
 2007e24:	1080008c 	andi	r2,r2,2
 2007e28:	10bfffcc 	andi	r2,r2,65535
 2007e2c:	10a0001c 	xori	r2,r2,32768
 2007e30:	10a00004 	addi	r2,r2,-32768
 2007e34:	1000311e 	bne	r2,zero,2007efc <__swsetup_r+0x130>
 2007e38:	80800517 	ldw	r2,20(r16)
 2007e3c:	80800215 	stw	r2,8(r16)
 2007e40:	18002326 	beq	r3,zero,2007ed0 <__swsetup_r+0x104>
 2007e44:	0005883a 	mov	r2,zero
 2007e48:	dfc00217 	ldw	ra,8(sp)
 2007e4c:	dc400117 	ldw	r17,4(sp)
 2007e50:	dc000017 	ldw	r16,0(sp)
 2007e54:	dec00304 	addi	sp,sp,12
 2007e58:	f800283a 	ret
 2007e5c:	10c0040c 	andi	r3,r2,16
 2007e60:	18ffffcc 	andi	r3,r3,65535
 2007e64:	18e0001c 	xori	r3,r3,32768
 2007e68:	18e00004 	addi	r3,r3,-32768
 2007e6c:	18001e26 	beq	r3,zero,2007ee8 <__swsetup_r+0x11c>
 2007e70:	10c0010c 	andi	r3,r2,4
 2007e74:	18ffffcc 	andi	r3,r3,65535
 2007e78:	18e0001c 	xori	r3,r3,32768
 2007e7c:	18e00004 	addi	r3,r3,-32768
 2007e80:	1800211e 	bne	r3,zero,2007f08 <__swsetup_r+0x13c>
 2007e84:	80c00417 	ldw	r3,16(r16)
 2007e88:	11400214 	ori	r5,r2,8
 2007e8c:	8140030d 	sth	r5,12(r16)
 2007e90:	2805883a 	mov	r2,r5
 2007e94:	183fe11e 	bne	r3,zero,2007e1c <__swsetup_r+0x50>
 2007e98:	1140a00c 	andi	r5,r2,640
 2007e9c:	01008004 	movi	r4,512
 2007ea0:	293fde26 	beq	r5,r4,2007e1c <__swsetup_r+0x50>
 2007ea4:	8809883a 	mov	r4,r17
 2007ea8:	800b883a 	mov	r5,r16
 2007eac:	200a7800 	call	200a780 <__smakebuf_r>
 2007eb0:	8080030b 	ldhu	r2,12(r16)
 2007eb4:	80c00417 	ldw	r3,16(r16)
 2007eb8:	003fd806 	br	2007e1c <__swsetup_r+0x50>
 2007ebc:	80800517 	ldw	r2,20(r16)
 2007ec0:	80000215 	stw	zero,8(r16)
 2007ec4:	0085c83a 	sub	r2,zero,r2
 2007ec8:	80800615 	stw	r2,24(r16)
 2007ecc:	183fdd1e 	bne	r3,zero,2007e44 <__swsetup_r+0x78>
 2007ed0:	8080030b 	ldhu	r2,12(r16)
 2007ed4:	1080200c 	andi	r2,r2,128
 2007ed8:	10bfffcc 	andi	r2,r2,65535
 2007edc:	10a0001c 	xori	r2,r2,32768
 2007ee0:	10a00004 	addi	r2,r2,-32768
 2007ee4:	103fd826 	beq	r2,zero,2007e48 <__swsetup_r+0x7c>
 2007ee8:	00bfffc4 	movi	r2,-1
 2007eec:	003fd606 	br	2007e48 <__swsetup_r+0x7c>
 2007ef0:	1009883a 	mov	r4,r2
 2007ef4:	2009a0c0 	call	2009a0c <__sinit>
 2007ef8:	003fc006 	br	2007dfc <__swsetup_r+0x30>
 2007efc:	0005883a 	mov	r2,zero
 2007f00:	80800215 	stw	r2,8(r16)
 2007f04:	003fce06 	br	2007e40 <__swsetup_r+0x74>
 2007f08:	81400c17 	ldw	r5,48(r16)
 2007f0c:	28000626 	beq	r5,zero,2007f28 <__swsetup_r+0x15c>
 2007f10:	80c01004 	addi	r3,r16,64
 2007f14:	28c00326 	beq	r5,r3,2007f24 <__swsetup_r+0x158>
 2007f18:	8809883a 	mov	r4,r17
 2007f1c:	2009d900 	call	2009d90 <_free_r>
 2007f20:	8080030b 	ldhu	r2,12(r16)
 2007f24:	80000c15 	stw	zero,48(r16)
 2007f28:	80c00417 	ldw	r3,16(r16)
 2007f2c:	013ff6c4 	movi	r4,-37
 2007f30:	2084703a 	and	r2,r4,r2
 2007f34:	80000115 	stw	zero,4(r16)
 2007f38:	80c00015 	stw	r3,0(r16)
 2007f3c:	003fd206 	br	2007e88 <__swsetup_r+0xbc>

02007f40 <quorem>:
 2007f40:	defff704 	addi	sp,sp,-36
 2007f44:	dc400115 	stw	r17,4(sp)
 2007f48:	20800417 	ldw	r2,16(r4)
 2007f4c:	2c400417 	ldw	r17,16(r5)
 2007f50:	dd800615 	stw	r22,24(sp)
 2007f54:	dd400515 	stw	r21,20(sp)
 2007f58:	dfc00815 	stw	ra,32(sp)
 2007f5c:	ddc00715 	stw	r23,28(sp)
 2007f60:	dd000415 	stw	r20,16(sp)
 2007f64:	dcc00315 	stw	r19,12(sp)
 2007f68:	dc800215 	stw	r18,8(sp)
 2007f6c:	dc000015 	stw	r16,0(sp)
 2007f70:	202b883a 	mov	r21,r4
 2007f74:	282d883a 	mov	r22,r5
 2007f78:	14407116 	blt	r2,r17,2008140 <quorem+0x200>
 2007f7c:	88800104 	addi	r2,r17,4
 2007f80:	1085883a 	add	r2,r2,r2
 2007f84:	1085883a 	add	r2,r2,r2
 2007f88:	28a7883a 	add	r19,r5,r2
 2007f8c:	2085883a 	add	r2,r4,r2
 2007f90:	15c00017 	ldw	r23,0(r2)
 2007f94:	99400017 	ldw	r5,0(r19)
 2007f98:	8c7fffc4 	addi	r17,r17,-1
 2007f9c:	b809883a 	mov	r4,r23
 2007fa0:	29400044 	addi	r5,r5,1
 2007fa4:	200e2b80 	call	200e2b8 <__udivsi3>
 2007fa8:	1025883a 	mov	r18,r2
 2007fac:	b4000504 	addi	r16,r22,20
 2007fb0:	ad000504 	addi	r20,r21,20
 2007fb4:	10002d26 	beq	r2,zero,200806c <quorem+0x12c>
 2007fb8:	800d883a 	mov	r6,r16
 2007fbc:	a007883a 	mov	r3,r20
 2007fc0:	000f883a 	mov	r7,zero
 2007fc4:	0005883a 	mov	r2,zero
 2007fc8:	32c00017 	ldw	r11,0(r6)
 2007fcc:	1a400017 	ldw	r9,0(r3)
 2007fd0:	31800104 	addi	r6,r6,4
 2007fd4:	5abfffcc 	andi	r10,r11,65535
 2007fd8:	5495383a 	mul	r10,r10,r18
 2007fdc:	5816d43a 	srli	r11,r11,16
 2007fe0:	4a3fffcc 	andi	r8,r9,65535
 2007fe4:	3a95883a 	add	r10,r7,r10
 2007fe8:	500ed43a 	srli	r7,r10,16
 2007fec:	5c97383a 	mul	r11,r11,r18
 2007ff0:	4085883a 	add	r2,r8,r2
 2007ff4:	52bfffcc 	andi	r10,r10,65535
 2007ff8:	1291c83a 	sub	r8,r2,r10
 2007ffc:	4804d43a 	srli	r2,r9,16
 2008000:	3acf883a 	add	r7,r7,r11
 2008004:	4015d43a 	srai	r10,r8,16
 2008008:	393fffcc 	andi	r4,r7,65535
 200800c:	1105c83a 	sub	r2,r2,r4
 2008010:	1285883a 	add	r2,r2,r10
 2008014:	1880008d 	sth	r2,2(r3)
 2008018:	1a00000d 	sth	r8,0(r3)
 200801c:	380ed43a 	srli	r7,r7,16
 2008020:	1005d43a 	srai	r2,r2,16
 2008024:	18c00104 	addi	r3,r3,4
 2008028:	99bfe72e 	bgeu	r19,r6,2007fc8 <quorem+0x88>
 200802c:	b8000f1e 	bne	r23,zero,200806c <quorem+0x12c>
 2008030:	88800144 	addi	r2,r17,5
 2008034:	1085883a 	add	r2,r2,r2
 2008038:	1085883a 	add	r2,r2,r2
 200803c:	a887883a 	add	r3,r21,r2
 2008040:	18bfff04 	addi	r2,r3,-4
 2008044:	a080082e 	bgeu	r20,r2,2008068 <quorem+0x128>
 2008048:	18ffff17 	ldw	r3,-4(r3)
 200804c:	18000326 	beq	r3,zero,200805c <quorem+0x11c>
 2008050:	00000506 	br	2008068 <quorem+0x128>
 2008054:	10c00017 	ldw	r3,0(r2)
 2008058:	1800031e 	bne	r3,zero,2008068 <quorem+0x128>
 200805c:	10bfff04 	addi	r2,r2,-4
 2008060:	8c7fffc4 	addi	r17,r17,-1
 2008064:	a0bffb36 	bltu	r20,r2,2008054 <quorem+0x114>
 2008068:	ac400415 	stw	r17,16(r21)
 200806c:	a809883a 	mov	r4,r21
 2008070:	b00b883a 	mov	r5,r22
 2008074:	200bd440 	call	200bd44 <__mcmp>
 2008078:	10002516 	blt	r2,zero,2008110 <quorem+0x1d0>
 200807c:	94800044 	addi	r18,r18,1
 2008080:	a007883a 	mov	r3,r20
 2008084:	000b883a 	mov	r5,zero
 2008088:	1a000017 	ldw	r8,0(r3)
 200808c:	81c00017 	ldw	r7,0(r16)
 2008090:	84000104 	addi	r16,r16,4
 2008094:	41bfffcc 	andi	r6,r8,65535
 2008098:	38bfffcc 	andi	r2,r7,65535
 200809c:	314b883a 	add	r5,r6,r5
 20080a0:	288dc83a 	sub	r6,r5,r2
 20080a4:	380ed43a 	srli	r7,r7,16
 20080a8:	400ad43a 	srli	r5,r8,16
 20080ac:	3005d43a 	srai	r2,r6,16
 20080b0:	1980000d 	sth	r6,0(r3)
 20080b4:	29cbc83a 	sub	r5,r5,r7
 20080b8:	288b883a 	add	r5,r5,r2
 20080bc:	1940008d 	sth	r5,2(r3)
 20080c0:	280bd43a 	srai	r5,r5,16
 20080c4:	18c00104 	addi	r3,r3,4
 20080c8:	9c3fef2e 	bgeu	r19,r16,2008088 <quorem+0x148>
 20080cc:	88800144 	addi	r2,r17,5
 20080d0:	1085883a 	add	r2,r2,r2
 20080d4:	1085883a 	add	r2,r2,r2
 20080d8:	a885883a 	add	r2,r21,r2
 20080dc:	10c00017 	ldw	r3,0(r2)
 20080e0:	18000b1e 	bne	r3,zero,2008110 <quorem+0x1d0>
 20080e4:	10ffff04 	addi	r3,r2,-4
 20080e8:	a0c0082e 	bgeu	r20,r3,200810c <quorem+0x1cc>
 20080ec:	10bfff17 	ldw	r2,-4(r2)
 20080f0:	10000326 	beq	r2,zero,2008100 <quorem+0x1c0>
 20080f4:	00000506 	br	200810c <quorem+0x1cc>
 20080f8:	18800017 	ldw	r2,0(r3)
 20080fc:	1000031e 	bne	r2,zero,200810c <quorem+0x1cc>
 2008100:	18ffff04 	addi	r3,r3,-4
 2008104:	8c7fffc4 	addi	r17,r17,-1
 2008108:	a0fffb36 	bltu	r20,r3,20080f8 <quorem+0x1b8>
 200810c:	ac400415 	stw	r17,16(r21)
 2008110:	9005883a 	mov	r2,r18
 2008114:	dfc00817 	ldw	ra,32(sp)
 2008118:	ddc00717 	ldw	r23,28(sp)
 200811c:	dd800617 	ldw	r22,24(sp)
 2008120:	dd400517 	ldw	r21,20(sp)
 2008124:	dd000417 	ldw	r20,16(sp)
 2008128:	dcc00317 	ldw	r19,12(sp)
 200812c:	dc800217 	ldw	r18,8(sp)
 2008130:	dc400117 	ldw	r17,4(sp)
 2008134:	dc000017 	ldw	r16,0(sp)
 2008138:	dec00904 	addi	sp,sp,36
 200813c:	f800283a 	ret
 2008140:	0005883a 	mov	r2,zero
 2008144:	003ff306 	br	2008114 <quorem+0x1d4>

02008148 <_dtoa_r>:
 2008148:	20801017 	ldw	r2,64(r4)
 200814c:	deffdf04 	addi	sp,sp,-132
 2008150:	dcc01a15 	stw	r19,104(sp)
 2008154:	dc801915 	stw	r18,100(sp)
 2008158:	dc401815 	stw	r17,96(sp)
 200815c:	dc001715 	stw	r16,92(sp)
 2008160:	dfc02015 	stw	ra,128(sp)
 2008164:	df001f15 	stw	fp,124(sp)
 2008168:	ddc01e15 	stw	r23,120(sp)
 200816c:	dd801d15 	stw	r22,116(sp)
 2008170:	dd401c15 	stw	r21,112(sp)
 2008174:	dd001b15 	stw	r20,108(sp)
 2008178:	d9400315 	stw	r5,12(sp)
 200817c:	d9c00415 	stw	r7,16(sp)
 2008180:	2021883a 	mov	r16,r4
 2008184:	3025883a 	mov	r18,r6
 2008188:	dcc02317 	ldw	r19,140(sp)
 200818c:	3023883a 	mov	r17,r6
 2008190:	10000826 	beq	r2,zero,20081b4 <_dtoa_r+0x6c>
 2008194:	20c01117 	ldw	r3,68(r4)
 2008198:	01800044 	movi	r6,1
 200819c:	100b883a 	mov	r5,r2
 20081a0:	30cc983a 	sll	r6,r6,r3
 20081a4:	10c00115 	stw	r3,4(r2)
 20081a8:	11800215 	stw	r6,8(r2)
 20081ac:	200b5480 	call	200b548 <_Bfree>
 20081b0:	80001015 	stw	zero,64(r16)
 20081b4:	90002f16 	blt	r18,zero,2008274 <_dtoa_r+0x12c>
 20081b8:	98000015 	stw	zero,0(r19)
 20081bc:	90dffc2c 	andhi	r3,r18,32752
 20081c0:	009ffc34 	movhi	r2,32752
 20081c4:	18801c26 	beq	r3,r2,2008238 <_dtoa_r+0xf0>
 20081c8:	d9000317 	ldw	r4,12(sp)
 20081cc:	880b883a 	mov	r5,r17
 20081d0:	000d883a 	mov	r6,zero
 20081d4:	000f883a 	mov	r7,zero
 20081d8:	200df040 	call	200df04 <__eqdf2>
 20081dc:	10002c1e 	bne	r2,zero,2008290 <_dtoa_r+0x148>
 20081e0:	d9002217 	ldw	r4,136(sp)
 20081e4:	d9c02417 	ldw	r7,144(sp)
 20081e8:	00800044 	movi	r2,1
 20081ec:	20800015 	stw	r2,0(r4)
 20081f0:	38019426 	beq	r7,zero,2008844 <_dtoa_r+0x6fc>
 20081f4:	00808074 	movhi	r2,513
 20081f8:	10874644 	addi	r2,r2,7449
 20081fc:	38800015 	stw	r2,0(r7)
 2008200:	15ffffc4 	addi	r23,r2,-1
 2008204:	b805883a 	mov	r2,r23
 2008208:	dfc02017 	ldw	ra,128(sp)
 200820c:	df001f17 	ldw	fp,124(sp)
 2008210:	ddc01e17 	ldw	r23,120(sp)
 2008214:	dd801d17 	ldw	r22,116(sp)
 2008218:	dd401c17 	ldw	r21,112(sp)
 200821c:	dd001b17 	ldw	r20,108(sp)
 2008220:	dcc01a17 	ldw	r19,104(sp)
 2008224:	dc801917 	ldw	r18,100(sp)
 2008228:	dc401817 	ldw	r17,96(sp)
 200822c:	dc001717 	ldw	r16,92(sp)
 2008230:	dec02104 	addi	sp,sp,132
 2008234:	f800283a 	ret
 2008238:	d8c02217 	ldw	r3,136(sp)
 200823c:	d9000317 	ldw	r4,12(sp)
 2008240:	0089c3c4 	movi	r2,9999
 2008244:	18800015 	stw	r2,0(r3)
 2008248:	20016c26 	beq	r4,zero,20087fc <_dtoa_r+0x6b4>
 200824c:	05c08074 	movhi	r23,513
 2008250:	bdc75204 	addi	r23,r23,7496
 2008254:	d9c02417 	ldw	r7,144(sp)
 2008258:	383fea26 	beq	r7,zero,2008204 <_dtoa_r+0xbc>
 200825c:	b88000c7 	ldb	r2,3(r23)
 2008260:	10016d1e 	bne	r2,zero,2008818 <_dtoa_r+0x6d0>
 2008264:	b88000c4 	addi	r2,r23,3
 2008268:	d8c02417 	ldw	r3,144(sp)
 200826c:	18800015 	stw	r2,0(r3)
 2008270:	003fe406 	br	2008204 <_dtoa_r+0xbc>
 2008274:	04600034 	movhi	r17,32768
 2008278:	8c7fffc4 	addi	r17,r17,-1
 200827c:	9462703a 	and	r17,r18,r17
 2008280:	00800044 	movi	r2,1
 2008284:	98800015 	stw	r2,0(r19)
 2008288:	8825883a 	mov	r18,r17
 200828c:	003fcb06 	br	20081bc <_dtoa_r+0x74>
 2008290:	d9400317 	ldw	r5,12(sp)
 2008294:	9028d53a 	srli	r20,r18,20
 2008298:	d8800204 	addi	r2,sp,8
 200829c:	d8800015 	stw	r2,0(sp)
 20082a0:	8009883a 	mov	r4,r16
 20082a4:	880d883a 	mov	r6,r17
 20082a8:	d9c00104 	addi	r7,sp,4
 20082ac:	200c0ec0 	call	200c0ec <__d2b>
 20082b0:	a501ffcc 	andi	r20,r20,2047
 20082b4:	1039883a 	mov	fp,r2
 20082b8:	a001591e 	bne	r20,zero,2008820 <_dtoa_r+0x6d8>
 20082bc:	dd400217 	ldw	r21,8(sp)
 20082c0:	dd000117 	ldw	r20,4(sp)
 20082c4:	00befbc4 	movi	r2,-1041
 20082c8:	ad29883a 	add	r20,r21,r20
 20082cc:	a082d216 	blt	r20,r2,2008e18 <_dtoa_r+0xcd0>
 20082d0:	d8c00317 	ldw	r3,12(sp)
 20082d4:	013f0384 	movi	r4,-1010
 20082d8:	2509c83a 	sub	r4,r4,r20
 20082dc:	a0810484 	addi	r2,r20,1042
 20082e0:	9124983a 	sll	r18,r18,r4
 20082e4:	1884d83a 	srl	r2,r3,r2
 20082e8:	9088b03a 	or	r4,r18,r2
 20082ec:	200e07c0 	call	200e07c <__floatunsidf>
 20082f0:	1009883a 	mov	r4,r2
 20082f4:	017f8434 	movhi	r5,65040
 20082f8:	00800044 	movi	r2,1
 20082fc:	194b883a 	add	r5,r3,r5
 2008300:	a53fffc4 	addi	r20,r20,-1
 2008304:	d8800f15 	stw	r2,60(sp)
 2008308:	000d883a 	mov	r6,zero
 200830c:	01cffe34 	movhi	r7,16376
 2008310:	20054380 	call	2005438 <__subdf3>
 2008314:	1009883a 	mov	r4,r2
 2008318:	180b883a 	mov	r5,r3
 200831c:	0198dbf4 	movhi	r6,25455
 2008320:	3190d844 	addi	r6,r6,17249
 2008324:	01cff4f4 	movhi	r7,16339
 2008328:	39e1e9c4 	addi	r7,r7,-30809
 200832c:	20054980 	call	2005498 <__muldf3>
 2008330:	180b883a 	mov	r5,r3
 2008334:	01a2d874 	movhi	r6,35681
 2008338:	31b22cc4 	addi	r6,r6,-14157
 200833c:	01cff1f4 	movhi	r7,16327
 2008340:	39e28a04 	addi	r7,r7,-30168
 2008344:	1009883a 	mov	r4,r2
 2008348:	20053e40 	call	20053e4 <__adddf3>
 200834c:	a009883a 	mov	r4,r20
 2008350:	1027883a 	mov	r19,r2
 2008354:	1825883a 	mov	r18,r3
 2008358:	20057e00 	call	20057e0 <__floatsidf>
 200835c:	1009883a 	mov	r4,r2
 2008360:	180b883a 	mov	r5,r3
 2008364:	019427f4 	movhi	r6,20639
 2008368:	319e7ec4 	addi	r6,r6,31227
 200836c:	01cff4f4 	movhi	r7,16339
 2008370:	39d104c4 	addi	r7,r7,17427
 2008374:	20054980 	call	2005498 <__muldf3>
 2008378:	9809883a 	mov	r4,r19
 200837c:	900b883a 	mov	r5,r18
 2008380:	100d883a 	mov	r6,r2
 2008384:	180f883a 	mov	r7,r3
 2008388:	20053e40 	call	20053e4 <__adddf3>
 200838c:	1009883a 	mov	r4,r2
 2008390:	180b883a 	mov	r5,r3
 2008394:	1027883a 	mov	r19,r2
 2008398:	1825883a 	mov	r18,r3
 200839c:	20058b40 	call	20058b4 <__fixdfsi>
 20083a0:	9809883a 	mov	r4,r19
 20083a4:	900b883a 	mov	r5,r18
 20083a8:	000d883a 	mov	r6,zero
 20083ac:	000f883a 	mov	r7,zero
 20083b0:	d8800615 	stw	r2,24(sp)
 20083b4:	200e0200 	call	200e020 <__ltdf2>
 20083b8:	10027e16 	blt	r2,zero,2008db4 <_dtoa_r+0xc6c>
 20083bc:	d8c00617 	ldw	r3,24(sp)
 20083c0:	00800584 	movi	r2,22
 20083c4:	10c26c36 	bltu	r2,r3,2008d78 <_dtoa_r+0xc30>
 20083c8:	180490fa 	slli	r2,r3,3
 20083cc:	00c08074 	movhi	r3,513
 20083d0:	18c77804 	addi	r3,r3,7648
 20083d4:	d9800317 	ldw	r6,12(sp)
 20083d8:	1885883a 	add	r2,r3,r2
 20083dc:	11000017 	ldw	r4,0(r2)
 20083e0:	11400117 	ldw	r5,4(r2)
 20083e4:	880f883a 	mov	r7,r17
 20083e8:	200dfbc0 	call	200dfbc <__gtdf2>
 20083ec:	00828f0e 	bge	zero,r2,2008e2c <_dtoa_r+0xce4>
 20083f0:	d8800617 	ldw	r2,24(sp)
 20083f4:	d8000d15 	stw	zero,52(sp)
 20083f8:	10bfffc4 	addi	r2,r2,-1
 20083fc:	d8800615 	stw	r2,24(sp)
 2008400:	ad29c83a 	sub	r20,r21,r20
 2008404:	a53fffc4 	addi	r20,r20,-1
 2008408:	a0026616 	blt	r20,zero,2008da4 <_dtoa_r+0xc5c>
 200840c:	dd000715 	stw	r20,28(sp)
 2008410:	d8000815 	stw	zero,32(sp)
 2008414:	d8800617 	ldw	r2,24(sp)
 2008418:	10025a16 	blt	r2,zero,2008d84 <_dtoa_r+0xc3c>
 200841c:	d8c00717 	ldw	r3,28(sp)
 2008420:	d8800b15 	stw	r2,44(sp)
 2008424:	d8000a15 	stw	zero,40(sp)
 2008428:	1887883a 	add	r3,r3,r2
 200842c:	d8c00715 	stw	r3,28(sp)
 2008430:	d9c00417 	ldw	r7,16(sp)
 2008434:	00800244 	movi	r2,9
 2008438:	11c10536 	bltu	r2,r7,2008850 <_dtoa_r+0x708>
 200843c:	00800144 	movi	r2,5
 2008440:	11c4c60e 	bge	r2,r7,200975c <_dtoa_r+0x1614>
 2008444:	39ffff04 	addi	r7,r7,-4
 2008448:	d9c00415 	stw	r7,16(sp)
 200844c:	0027883a 	mov	r19,zero
 2008450:	d9c00417 	ldw	r7,16(sp)
 2008454:	008000c4 	movi	r2,3
 2008458:	3883a226 	beq	r7,r2,20092e4 <_dtoa_r+0x119c>
 200845c:	11c2bc16 	blt	r2,r7,2008f50 <_dtoa_r+0xe08>
 2008460:	00800084 	movi	r2,2
 2008464:	3880fb1e 	bne	r7,r2,2008854 <_dtoa_r+0x70c>
 2008468:	d8000c15 	stw	zero,48(sp)
 200846c:	d9002117 	ldw	r4,132(sp)
 2008470:	0103ae0e 	bge	zero,r4,200932c <_dtoa_r+0x11e4>
 2008474:	2025883a 	mov	r18,r4
 2008478:	d9000e15 	stw	r4,56(sp)
 200847c:	d9000915 	stw	r4,36(sp)
 2008480:	80001115 	stw	zero,68(r16)
 2008484:	008005c4 	movi	r2,23
 2008488:	1484b22e 	bgeu	r2,r18,2009754 <_dtoa_r+0x160c>
 200848c:	00c00044 	movi	r3,1
 2008490:	00800104 	movi	r2,4
 2008494:	1085883a 	add	r2,r2,r2
 2008498:	11000504 	addi	r4,r2,20
 200849c:	180b883a 	mov	r5,r3
 20084a0:	18c00044 	addi	r3,r3,1
 20084a4:	913ffb2e 	bgeu	r18,r4,2008494 <_dtoa_r+0x34c>
 20084a8:	81401115 	stw	r5,68(r16)
 20084ac:	8009883a 	mov	r4,r16
 20084b0:	200b4a00 	call	200b4a0 <_Balloc>
 20084b4:	102f883a 	mov	r23,r2
 20084b8:	80801015 	stw	r2,64(r16)
 20084bc:	00800384 	movi	r2,14
 20084c0:	1480f036 	bltu	r2,r18,2008884 <_dtoa_r+0x73c>
 20084c4:	9800ef26 	beq	r19,zero,2008884 <_dtoa_r+0x73c>
 20084c8:	d8800617 	ldw	r2,24(sp)
 20084cc:	00839c0e 	bge	zero,r2,2009340 <_dtoa_r+0x11f8>
 20084d0:	d8c00617 	ldw	r3,24(sp)
 20084d4:	108003cc 	andi	r2,r2,15
 20084d8:	100490fa 	slli	r2,r2,3
 20084dc:	182bd13a 	srai	r21,r3,4
 20084e0:	00c08074 	movhi	r3,513
 20084e4:	18c77804 	addi	r3,r3,7648
 20084e8:	1885883a 	add	r2,r3,r2
 20084ec:	a8c0040c 	andi	r3,r21,16
 20084f0:	12800017 	ldw	r10,0(r2)
 20084f4:	15800117 	ldw	r22,4(r2)
 20084f8:	18038726 	beq	r3,zero,2009318 <_dtoa_r+0x11d0>
 20084fc:	00808074 	movhi	r2,513
 2008500:	10876e04 	addi	r2,r2,7608
 2008504:	11800817 	ldw	r6,32(r2)
 2008508:	11c00917 	ldw	r7,36(r2)
 200850c:	d9000317 	ldw	r4,12(sp)
 2008510:	880b883a 	mov	r5,r17
 2008514:	da801515 	stw	r10,84(sp)
 2008518:	200dd500 	call	200dd50 <__divdf3>
 200851c:	da801517 	ldw	r10,84(sp)
 2008520:	d8801015 	stw	r2,64(sp)
 2008524:	1829883a 	mov	r20,r3
 2008528:	ad4003cc 	andi	r21,r21,15
 200852c:	048000c4 	movi	r18,3
 2008530:	a8001126 	beq	r21,zero,2008578 <_dtoa_r+0x430>
 2008534:	04c08074 	movhi	r19,513
 2008538:	9cc76e04 	addi	r19,r19,7608
 200853c:	5005883a 	mov	r2,r10
 2008540:	b007883a 	mov	r3,r22
 2008544:	a980004c 	andi	r6,r21,1
 2008548:	1009883a 	mov	r4,r2
 200854c:	a82bd07a 	srai	r21,r21,1
 2008550:	180b883a 	mov	r5,r3
 2008554:	30000426 	beq	r6,zero,2008568 <_dtoa_r+0x420>
 2008558:	99800017 	ldw	r6,0(r19)
 200855c:	99c00117 	ldw	r7,4(r19)
 2008560:	94800044 	addi	r18,r18,1
 2008564:	20054980 	call	2005498 <__muldf3>
 2008568:	9cc00204 	addi	r19,r19,8
 200856c:	a83ff51e 	bne	r21,zero,2008544 <_dtoa_r+0x3fc>
 2008570:	1015883a 	mov	r10,r2
 2008574:	182d883a 	mov	r22,r3
 2008578:	d9001017 	ldw	r4,64(sp)
 200857c:	a00b883a 	mov	r5,r20
 2008580:	500d883a 	mov	r6,r10
 2008584:	b00f883a 	mov	r7,r22
 2008588:	200dd500 	call	200dd50 <__divdf3>
 200858c:	1027883a 	mov	r19,r2
 2008590:	1829883a 	mov	r20,r3
 2008594:	d8c00d17 	ldw	r3,52(sp)
 2008598:	18000626 	beq	r3,zero,20085b4 <_dtoa_r+0x46c>
 200859c:	9809883a 	mov	r4,r19
 20085a0:	a00b883a 	mov	r5,r20
 20085a4:	000d883a 	mov	r6,zero
 20085a8:	01cffc34 	movhi	r7,16368
 20085ac:	200e0200 	call	200e020 <__ltdf2>
 20085b0:	10040e16 	blt	r2,zero,20095ec <_dtoa_r+0x14a4>
 20085b4:	9009883a 	mov	r4,r18
 20085b8:	20057e00 	call	20057e0 <__floatsidf>
 20085bc:	1009883a 	mov	r4,r2
 20085c0:	180b883a 	mov	r5,r3
 20085c4:	980d883a 	mov	r6,r19
 20085c8:	a00f883a 	mov	r7,r20
 20085cc:	20054980 	call	2005498 <__muldf3>
 20085d0:	1009883a 	mov	r4,r2
 20085d4:	180b883a 	mov	r5,r3
 20085d8:	000d883a 	mov	r6,zero
 20085dc:	01d00734 	movhi	r7,16412
 20085e0:	20053e40 	call	20053e4 <__adddf3>
 20085e4:	057f3034 	movhi	r21,64704
 20085e8:	1d6b883a 	add	r21,r3,r21
 20085ec:	d8c00917 	ldw	r3,36(sp)
 20085f0:	1025883a 	mov	r18,r2
 20085f4:	18031f26 	beq	r3,zero,2009274 <_dtoa_r+0x112c>
 20085f8:	d8800617 	ldw	r2,24(sp)
 20085fc:	dac00917 	ldw	r11,36(sp)
 2008600:	d8801315 	stw	r2,76(sp)
 2008604:	d8c00c17 	ldw	r3,48(sp)
 2008608:	18039026 	beq	r3,zero,200944c <_dtoa_r+0x1304>
 200860c:	58bfffc4 	addi	r2,r11,-1
 2008610:	100490fa 	slli	r2,r2,3
 2008614:	00c08074 	movhi	r3,513
 2008618:	18c77804 	addi	r3,r3,7648
 200861c:	0009883a 	mov	r4,zero
 2008620:	1885883a 	add	r2,r3,r2
 2008624:	11800017 	ldw	r6,0(r2)
 2008628:	11c00117 	ldw	r7,4(r2)
 200862c:	014ff834 	movhi	r5,16352
 2008630:	dac01615 	stw	r11,88(sp)
 2008634:	200dd500 	call	200dd50 <__divdf3>
 2008638:	900d883a 	mov	r6,r18
 200863c:	a80f883a 	mov	r7,r21
 2008640:	1009883a 	mov	r4,r2
 2008644:	180b883a 	mov	r5,r3
 2008648:	20054380 	call	2005438 <__subdf3>
 200864c:	a00b883a 	mov	r5,r20
 2008650:	9809883a 	mov	r4,r19
 2008654:	182b883a 	mov	r21,r3
 2008658:	d8801015 	stw	r2,64(sp)
 200865c:	20058b40 	call	20058b4 <__fixdfsi>
 2008660:	1009883a 	mov	r4,r2
 2008664:	d8801515 	stw	r2,84(sp)
 2008668:	20057e00 	call	20057e0 <__floatsidf>
 200866c:	9809883a 	mov	r4,r19
 2008670:	a00b883a 	mov	r5,r20
 2008674:	100d883a 	mov	r6,r2
 2008678:	180f883a 	mov	r7,r3
 200867c:	20054380 	call	2005438 <__subdf3>
 2008680:	da401517 	ldw	r9,84(sp)
 2008684:	d9001017 	ldw	r4,64(sp)
 2008688:	a80b883a 	mov	r5,r21
 200868c:	4d000c04 	addi	r20,r9,48
 2008690:	bd000005 	stb	r20,0(r23)
 2008694:	100d883a 	mov	r6,r2
 2008698:	180f883a 	mov	r7,r3
 200869c:	bd800044 	addi	r22,r23,1
 20086a0:	1025883a 	mov	r18,r2
 20086a4:	1827883a 	mov	r19,r3
 20086a8:	200dfbc0 	call	200dfbc <__gtdf2>
 20086ac:	00842216 	blt	zero,r2,2009738 <_dtoa_r+0x15f0>
 20086b0:	0009883a 	mov	r4,zero
 20086b4:	014ffc34 	movhi	r5,16368
 20086b8:	900d883a 	mov	r6,r18
 20086bc:	980f883a 	mov	r7,r19
 20086c0:	20054380 	call	2005438 <__subdf3>
 20086c4:	d9001017 	ldw	r4,64(sp)
 20086c8:	a80b883a 	mov	r5,r21
 20086cc:	100d883a 	mov	r6,r2
 20086d0:	180f883a 	mov	r7,r3
 20086d4:	200dfbc0 	call	200dfbc <__gtdf2>
 20086d8:	dac01617 	ldw	r11,88(sp)
 20086dc:	00841316 	blt	zero,r2,200972c <_dtoa_r+0x15e4>
 20086e0:	00800044 	movi	r2,1
 20086e4:	12c0670e 	bge	r2,r11,2008884 <_dtoa_r+0x73c>
 20086e8:	bad7883a 	add	r11,r23,r11
 20086ec:	df001115 	stw	fp,68(sp)
 20086f0:	dc401215 	stw	r17,72(sp)
 20086f4:	5839883a 	mov	fp,r11
 20086f8:	dc401017 	ldw	r17,64(sp)
 20086fc:	00000806 	br	2008720 <_dtoa_r+0x5d8>
 2008700:	20054380 	call	2005438 <__subdf3>
 2008704:	1009883a 	mov	r4,r2
 2008708:	180b883a 	mov	r5,r3
 200870c:	880d883a 	mov	r6,r17
 2008710:	a80f883a 	mov	r7,r21
 2008714:	200e0200 	call	200e020 <__ltdf2>
 2008718:	1003ee16 	blt	r2,zero,20096d4 <_dtoa_r+0x158c>
 200871c:	b703f126 	beq	r22,fp,20096e4 <_dtoa_r+0x159c>
 2008720:	8809883a 	mov	r4,r17
 2008724:	a80b883a 	mov	r5,r21
 2008728:	000d883a 	mov	r6,zero
 200872c:	01d00934 	movhi	r7,16420
 2008730:	20054980 	call	2005498 <__muldf3>
 2008734:	000d883a 	mov	r6,zero
 2008738:	01d00934 	movhi	r7,16420
 200873c:	9009883a 	mov	r4,r18
 2008740:	980b883a 	mov	r5,r19
 2008744:	1023883a 	mov	r17,r2
 2008748:	182b883a 	mov	r21,r3
 200874c:	20054980 	call	2005498 <__muldf3>
 2008750:	180b883a 	mov	r5,r3
 2008754:	1009883a 	mov	r4,r2
 2008758:	1825883a 	mov	r18,r3
 200875c:	1027883a 	mov	r19,r2
 2008760:	20058b40 	call	20058b4 <__fixdfsi>
 2008764:	1009883a 	mov	r4,r2
 2008768:	1029883a 	mov	r20,r2
 200876c:	20057e00 	call	20057e0 <__floatsidf>
 2008770:	9809883a 	mov	r4,r19
 2008774:	900b883a 	mov	r5,r18
 2008778:	100d883a 	mov	r6,r2
 200877c:	180f883a 	mov	r7,r3
 2008780:	20054380 	call	2005438 <__subdf3>
 2008784:	a5000c04 	addi	r20,r20,48
 2008788:	b5000005 	stb	r20,0(r22)
 200878c:	1009883a 	mov	r4,r2
 2008790:	180b883a 	mov	r5,r3
 2008794:	880d883a 	mov	r6,r17
 2008798:	a80f883a 	mov	r7,r21
 200879c:	1025883a 	mov	r18,r2
 20087a0:	1827883a 	mov	r19,r3
 20087a4:	200e0200 	call	200e020 <__ltdf2>
 20087a8:	b5800044 	addi	r22,r22,1
 20087ac:	0009883a 	mov	r4,zero
 20087b0:	014ffc34 	movhi	r5,16368
 20087b4:	900d883a 	mov	r6,r18
 20087b8:	980f883a 	mov	r7,r19
 20087bc:	103fd00e 	bge	r2,zero,2008700 <_dtoa_r+0x5b8>
 20087c0:	d9001317 	ldw	r4,76(sp)
 20087c4:	df001117 	ldw	fp,68(sp)
 20087c8:	d9000615 	stw	r4,24(sp)
 20087cc:	8009883a 	mov	r4,r16
 20087d0:	e00b883a 	mov	r5,fp
 20087d4:	200b5480 	call	200b548 <_Bfree>
 20087d8:	d9c00617 	ldw	r7,24(sp)
 20087dc:	d8c02217 	ldw	r3,136(sp)
 20087e0:	d9002417 	ldw	r4,144(sp)
 20087e4:	b0000005 	stb	zero,0(r22)
 20087e8:	38800044 	addi	r2,r7,1
 20087ec:	18800015 	stw	r2,0(r3)
 20087f0:	203e8426 	beq	r4,zero,2008204 <_dtoa_r+0xbc>
 20087f4:	25800015 	stw	r22,0(r4)
 20087f8:	003e8206 	br	2008204 <_dtoa_r+0xbc>
 20087fc:	00800434 	movhi	r2,16
 2008800:	10bfffc4 	addi	r2,r2,-1
 2008804:	90a4703a 	and	r18,r18,r2
 2008808:	903e901e 	bne	r18,zero,200824c <_dtoa_r+0x104>
 200880c:	05c08074 	movhi	r23,513
 2008810:	bdc74f04 	addi	r23,r23,7484
 2008814:	003e8f06 	br	2008254 <_dtoa_r+0x10c>
 2008818:	b8800204 	addi	r2,r23,8
 200881c:	003e9206 	br	2008268 <_dtoa_r+0x120>
 2008820:	01400434 	movhi	r5,16
 2008824:	297fffc4 	addi	r5,r5,-1
 2008828:	894a703a 	and	r5,r17,r5
 200882c:	d9000317 	ldw	r4,12(sp)
 2008830:	294ffc34 	orhi	r5,r5,16368
 2008834:	a53f0044 	addi	r20,r20,-1023
 2008838:	dd400217 	ldw	r21,8(sp)
 200883c:	d8000f15 	stw	zero,60(sp)
 2008840:	003eb106 	br	2008308 <_dtoa_r+0x1c0>
 2008844:	05c08074 	movhi	r23,513
 2008848:	bdc74604 	addi	r23,r23,7448
 200884c:	003e6d06 	br	2008204 <_dtoa_r+0xbc>
 2008850:	d8000415 	stw	zero,16(sp)
 2008854:	80001115 	stw	zero,68(r16)
 2008858:	8009883a 	mov	r4,r16
 200885c:	000b883a 	mov	r5,zero
 2008860:	200b4a00 	call	200b4a0 <_Balloc>
 2008864:	01ffffc4 	movi	r7,-1
 2008868:	102f883a 	mov	r23,r2
 200886c:	80801015 	stw	r2,64(r16)
 2008870:	00800044 	movi	r2,1
 2008874:	d9c00915 	stw	r7,36(sp)
 2008878:	d8002115 	stw	zero,132(sp)
 200887c:	d9c00e15 	stw	r7,56(sp)
 2008880:	d8800c15 	stw	r2,48(sp)
 2008884:	d8800117 	ldw	r2,4(sp)
 2008888:	10008b16 	blt	r2,zero,2008ab8 <_dtoa_r+0x970>
 200888c:	d9000617 	ldw	r4,24(sp)
 2008890:	00c00384 	movi	r3,14
 2008894:	19008816 	blt	r3,r4,2008ab8 <_dtoa_r+0x970>
 2008898:	200490fa 	slli	r2,r4,3
 200889c:	d9c02117 	ldw	r7,132(sp)
 20088a0:	00c08074 	movhi	r3,513
 20088a4:	18c77804 	addi	r3,r3,7648
 20088a8:	1885883a 	add	r2,r3,r2
 20088ac:	14800017 	ldw	r18,0(r2)
 20088b0:	14c00117 	ldw	r19,4(r2)
 20088b4:	3801c916 	blt	r7,zero,2008fdc <_dtoa_r+0xe94>
 20088b8:	d9000317 	ldw	r4,12(sp)
 20088bc:	900d883a 	mov	r6,r18
 20088c0:	980f883a 	mov	r7,r19
 20088c4:	880b883a 	mov	r5,r17
 20088c8:	200dd500 	call	200dd50 <__divdf3>
 20088cc:	180b883a 	mov	r5,r3
 20088d0:	1009883a 	mov	r4,r2
 20088d4:	20058b40 	call	20058b4 <__fixdfsi>
 20088d8:	1009883a 	mov	r4,r2
 20088dc:	102b883a 	mov	r21,r2
 20088e0:	20057e00 	call	20057e0 <__floatsidf>
 20088e4:	1009883a 	mov	r4,r2
 20088e8:	180b883a 	mov	r5,r3
 20088ec:	900d883a 	mov	r6,r18
 20088f0:	980f883a 	mov	r7,r19
 20088f4:	20054980 	call	2005498 <__muldf3>
 20088f8:	d9000317 	ldw	r4,12(sp)
 20088fc:	880b883a 	mov	r5,r17
 2008900:	100d883a 	mov	r6,r2
 2008904:	180f883a 	mov	r7,r3
 2008908:	20054380 	call	2005438 <__subdf3>
 200890c:	d9c00917 	ldw	r7,36(sp)
 2008910:	1009883a 	mov	r4,r2
 2008914:	a8800c04 	addi	r2,r21,48
 2008918:	b8800005 	stb	r2,0(r23)
 200891c:	01800044 	movi	r6,1
 2008920:	180b883a 	mov	r5,r3
 2008924:	2005883a 	mov	r2,r4
 2008928:	bd800044 	addi	r22,r23,1
 200892c:	39803726 	beq	r7,r6,2008a0c <_dtoa_r+0x8c4>
 2008930:	000d883a 	mov	r6,zero
 2008934:	01d00934 	movhi	r7,16420
 2008938:	20054980 	call	2005498 <__muldf3>
 200893c:	1009883a 	mov	r4,r2
 2008940:	180b883a 	mov	r5,r3
 2008944:	000d883a 	mov	r6,zero
 2008948:	000f883a 	mov	r7,zero
 200894c:	1029883a 	mov	r20,r2
 2008950:	1823883a 	mov	r17,r3
 2008954:	200df040 	call	200df04 <__eqdf2>
 2008958:	103f9c26 	beq	r2,zero,20087cc <_dtoa_r+0x684>
 200895c:	dd400917 	ldw	r21,36(sp)
 2008960:	dc000415 	stw	r16,16(sp)
 2008964:	00000906 	br	200898c <_dtoa_r+0x844>
 2008968:	20054980 	call	2005498 <__muldf3>
 200896c:	1009883a 	mov	r4,r2
 2008970:	180b883a 	mov	r5,r3
 2008974:	000d883a 	mov	r6,zero
 2008978:	000f883a 	mov	r7,zero
 200897c:	1029883a 	mov	r20,r2
 2008980:	1823883a 	mov	r17,r3
 2008984:	200df040 	call	200df04 <__eqdf2>
 2008988:	10022926 	beq	r2,zero,2009230 <_dtoa_r+0x10e8>
 200898c:	900d883a 	mov	r6,r18
 2008990:	980f883a 	mov	r7,r19
 2008994:	a009883a 	mov	r4,r20
 2008998:	880b883a 	mov	r5,r17
 200899c:	200dd500 	call	200dd50 <__divdf3>
 20089a0:	180b883a 	mov	r5,r3
 20089a4:	1009883a 	mov	r4,r2
 20089a8:	20058b40 	call	20058b4 <__fixdfsi>
 20089ac:	1009883a 	mov	r4,r2
 20089b0:	1021883a 	mov	r16,r2
 20089b4:	20057e00 	call	20057e0 <__floatsidf>
 20089b8:	1009883a 	mov	r4,r2
 20089bc:	180b883a 	mov	r5,r3
 20089c0:	900d883a 	mov	r6,r18
 20089c4:	980f883a 	mov	r7,r19
 20089c8:	20054980 	call	2005498 <__muldf3>
 20089cc:	a009883a 	mov	r4,r20
 20089d0:	880b883a 	mov	r5,r17
 20089d4:	100d883a 	mov	r6,r2
 20089d8:	180f883a 	mov	r7,r3
 20089dc:	20054380 	call	2005438 <__subdf3>
 20089e0:	82400c04 	addi	r9,r16,48
 20089e4:	b2400005 	stb	r9,0(r22)
 20089e8:	b5800044 	addi	r22,r22,1
 20089ec:	b5d3c83a 	sub	r9,r22,r23
 20089f0:	000d883a 	mov	r6,zero
 20089f4:	01d00934 	movhi	r7,16420
 20089f8:	1009883a 	mov	r4,r2
 20089fc:	180b883a 	mov	r5,r3
 2008a00:	aa7fd91e 	bne	r21,r9,2008968 <_dtoa_r+0x820>
 2008a04:	802b883a 	mov	r21,r16
 2008a08:	dc000417 	ldw	r16,16(sp)
 2008a0c:	1009883a 	mov	r4,r2
 2008a10:	180b883a 	mov	r5,r3
 2008a14:	100d883a 	mov	r6,r2
 2008a18:	180f883a 	mov	r7,r3
 2008a1c:	20053e40 	call	20053e4 <__adddf3>
 2008a20:	9009883a 	mov	r4,r18
 2008a24:	980b883a 	mov	r5,r19
 2008a28:	100d883a 	mov	r6,r2
 2008a2c:	180f883a 	mov	r7,r3
 2008a30:	1023883a 	mov	r17,r2
 2008a34:	1829883a 	mov	r20,r3
 2008a38:	200e0200 	call	200e020 <__ltdf2>
 2008a3c:	10000816 	blt	r2,zero,2008a60 <_dtoa_r+0x918>
 2008a40:	9009883a 	mov	r4,r18
 2008a44:	980b883a 	mov	r5,r19
 2008a48:	880d883a 	mov	r6,r17
 2008a4c:	a00f883a 	mov	r7,r20
 2008a50:	200df040 	call	200df04 <__eqdf2>
 2008a54:	103f5d1e 	bne	r2,zero,20087cc <_dtoa_r+0x684>
 2008a58:	ad40004c 	andi	r21,r21,1
 2008a5c:	a83f5b26 	beq	r21,zero,20087cc <_dtoa_r+0x684>
 2008a60:	b53fffc3 	ldbu	r20,-1(r22)
 2008a64:	b0ffff84 	addi	r3,r22,-2
 2008a68:	01400e44 	movi	r5,57
 2008a6c:	00000306 	br	2008a7c <_dtoa_r+0x934>
 2008a70:	1d000003 	ldbu	r20,0(r3)
 2008a74:	102d883a 	mov	r22,r2
 2008a78:	18ffffc4 	addi	r3,r3,-1
 2008a7c:	a1003fcc 	andi	r4,r20,255
 2008a80:	2100201c 	xori	r4,r4,128
 2008a84:	213fe004 	addi	r4,r4,-128
 2008a88:	b0bfffc4 	addi	r2,r22,-1
 2008a8c:	2142ca1e 	bne	r4,r5,20095b8 <_dtoa_r+0x1470>
 2008a90:	b8bff71e 	bne	r23,r2,2008a70 <_dtoa_r+0x928>
 2008a94:	d8800617 	ldw	r2,24(sp)
 2008a98:	05000c44 	movi	r20,49
 2008a9c:	10800044 	addi	r2,r2,1
 2008aa0:	d8800615 	stw	r2,24(sp)
 2008aa4:	00800c04 	movi	r2,48
 2008aa8:	b8800005 	stb	r2,0(r23)
 2008aac:	b805883a 	mov	r2,r23
 2008ab0:	15000005 	stb	r20,0(r2)
 2008ab4:	003f4506 	br	20087cc <_dtoa_r+0x684>
 2008ab8:	d9c00c17 	ldw	r7,48(sp)
 2008abc:	3800c926 	beq	r7,zero,2008de4 <_dtoa_r+0xc9c>
 2008ac0:	d9c00417 	ldw	r7,16(sp)
 2008ac4:	00c00044 	movi	r3,1
 2008ac8:	19c16c0e 	bge	r3,r7,200907c <_dtoa_r+0xf34>
 2008acc:	d9000917 	ldw	r4,36(sp)
 2008ad0:	d9c00a17 	ldw	r7,40(sp)
 2008ad4:	24ffffc4 	addi	r19,r4,-1
 2008ad8:	3cc20716 	blt	r7,r19,20092f8 <_dtoa_r+0x11b0>
 2008adc:	3ce7c83a 	sub	r19,r7,r19
 2008ae0:	d9c00917 	ldw	r7,36(sp)
 2008ae4:	3802ae16 	blt	r7,zero,20095a0 <_dtoa_r+0x1458>
 2008ae8:	dc800817 	ldw	r18,32(sp)
 2008aec:	d8800917 	ldw	r2,36(sp)
 2008af0:	d8c00817 	ldw	r3,32(sp)
 2008af4:	d9c00717 	ldw	r7,28(sp)
 2008af8:	8009883a 	mov	r4,r16
 2008afc:	1887883a 	add	r3,r3,r2
 2008b00:	388f883a 	add	r7,r7,r2
 2008b04:	01400044 	movi	r5,1
 2008b08:	d8c00815 	stw	r3,32(sp)
 2008b0c:	d9c00715 	stw	r7,28(sp)
 2008b10:	200b8a00 	call	200b8a0 <__i2b>
 2008b14:	102b883a 	mov	r21,r2
 2008b18:	90000a26 	beq	r18,zero,2008b44 <_dtoa_r+0x9fc>
 2008b1c:	d8800717 	ldw	r2,28(sp)
 2008b20:	0080080e 	bge	zero,r2,2008b44 <_dtoa_r+0x9fc>
 2008b24:	90812b16 	blt	r18,r2,2008fd4 <_dtoa_r+0xe8c>
 2008b28:	d8c00817 	ldw	r3,32(sp)
 2008b2c:	d9000717 	ldw	r4,28(sp)
 2008b30:	90a5c83a 	sub	r18,r18,r2
 2008b34:	1887c83a 	sub	r3,r3,r2
 2008b38:	2089c83a 	sub	r4,r4,r2
 2008b3c:	d8c00815 	stw	r3,32(sp)
 2008b40:	d9000715 	stw	r4,28(sp)
 2008b44:	d9c00a17 	ldw	r7,40(sp)
 2008b48:	01c0140e 	bge	zero,r7,2008b9c <_dtoa_r+0xa54>
 2008b4c:	d8800c17 	ldw	r2,48(sp)
 2008b50:	1001de26 	beq	r2,zero,20092cc <_dtoa_r+0x1184>
 2008b54:	04c00e0e 	bge	zero,r19,2008b90 <_dtoa_r+0xa48>
 2008b58:	a80b883a 	mov	r5,r21
 2008b5c:	8009883a 	mov	r4,r16
 2008b60:	980d883a 	mov	r6,r19
 2008b64:	200babc0 	call	200babc <__pow5mult>
 2008b68:	e00d883a 	mov	r6,fp
 2008b6c:	8009883a 	mov	r4,r16
 2008b70:	100b883a 	mov	r5,r2
 2008b74:	102b883a 	mov	r21,r2
 2008b78:	200b8dc0 	call	200b8dc <__multiply>
 2008b7c:	1029883a 	mov	r20,r2
 2008b80:	e00b883a 	mov	r5,fp
 2008b84:	8009883a 	mov	r4,r16
 2008b88:	200b5480 	call	200b548 <_Bfree>
 2008b8c:	a039883a 	mov	fp,r20
 2008b90:	d8c00a17 	ldw	r3,40(sp)
 2008b94:	1ccdc83a 	sub	r6,r3,r19
 2008b98:	3001291e 	bne	r6,zero,2009040 <_dtoa_r+0xef8>
 2008b9c:	8009883a 	mov	r4,r16
 2008ba0:	01400044 	movi	r5,1
 2008ba4:	200b8a00 	call	200b8a0 <__i2b>
 2008ba8:	d9000b17 	ldw	r4,44(sp)
 2008bac:	1029883a 	mov	r20,r2
 2008bb0:	0100050e 	bge	zero,r4,2008bc8 <_dtoa_r+0xa80>
 2008bb4:	d9800b17 	ldw	r6,44(sp)
 2008bb8:	8009883a 	mov	r4,r16
 2008bbc:	100b883a 	mov	r5,r2
 2008bc0:	200babc0 	call	200babc <__pow5mult>
 2008bc4:	1029883a 	mov	r20,r2
 2008bc8:	d9c00417 	ldw	r7,16(sp)
 2008bcc:	00800044 	movi	r2,1
 2008bd0:	11c0f00e 	bge	r2,r7,2008f94 <_dtoa_r+0xe4c>
 2008bd4:	0023883a 	mov	r17,zero
 2008bd8:	d8800b17 	ldw	r2,44(sp)
 2008bdc:	1001741e 	bne	r2,zero,20091b0 <_dtoa_r+0x1068>
 2008be0:	00800044 	movi	r2,1
 2008be4:	d8c00717 	ldw	r3,28(sp)
 2008be8:	10c5883a 	add	r2,r2,r3
 2008bec:	108007cc 	andi	r2,r2,31
 2008bf0:	10008026 	beq	r2,zero,2008df4 <_dtoa_r+0xcac>
 2008bf4:	01000804 	movi	r4,32
 2008bf8:	2089c83a 	sub	r4,r4,r2
 2008bfc:	00c00104 	movi	r3,4
 2008c00:	1902d00e 	bge	r3,r4,2009744 <_dtoa_r+0x15fc>
 2008c04:	d9000817 	ldw	r4,32(sp)
 2008c08:	d9c00717 	ldw	r7,28(sp)
 2008c0c:	00c00704 	movi	r3,28
 2008c10:	1885c83a 	sub	r2,r3,r2
 2008c14:	2089883a 	add	r4,r4,r2
 2008c18:	388f883a 	add	r7,r7,r2
 2008c1c:	d9000815 	stw	r4,32(sp)
 2008c20:	90a5883a 	add	r18,r18,r2
 2008c24:	d9c00715 	stw	r7,28(sp)
 2008c28:	d9c00817 	ldw	r7,32(sp)
 2008c2c:	01c0050e 	bge	zero,r7,2008c44 <_dtoa_r+0xafc>
 2008c30:	e00b883a 	mov	r5,fp
 2008c34:	8009883a 	mov	r4,r16
 2008c38:	380d883a 	mov	r6,r7
 2008c3c:	200bbe80 	call	200bbe8 <__lshift>
 2008c40:	1039883a 	mov	fp,r2
 2008c44:	d8800717 	ldw	r2,28(sp)
 2008c48:	0080050e 	bge	zero,r2,2008c60 <_dtoa_r+0xb18>
 2008c4c:	a00b883a 	mov	r5,r20
 2008c50:	8009883a 	mov	r4,r16
 2008c54:	100d883a 	mov	r6,r2
 2008c58:	200bbe80 	call	200bbe8 <__lshift>
 2008c5c:	1029883a 	mov	r20,r2
 2008c60:	d8c00d17 	ldw	r3,52(sp)
 2008c64:	1801401e 	bne	r3,zero,2009168 <_dtoa_r+0x1020>
 2008c68:	d8800917 	ldw	r2,36(sp)
 2008c6c:	00815a0e 	bge	zero,r2,20091d8 <_dtoa_r+0x1090>
 2008c70:	d8c00c17 	ldw	r3,48(sp)
 2008c74:	18006f1e 	bne	r3,zero,2008e34 <_dtoa_r+0xcec>
 2008c78:	b823883a 	mov	r17,r23
 2008c7c:	dc800917 	ldw	r18,36(sp)
 2008c80:	00000206 	br	2008c8c <_dtoa_r+0xb44>
 2008c84:	200b5700 	call	200b570 <__multadd>
 2008c88:	1039883a 	mov	fp,r2
 2008c8c:	e009883a 	mov	r4,fp
 2008c90:	a00b883a 	mov	r5,r20
 2008c94:	2007f400 	call	2007f40 <quorem>
 2008c98:	10800c04 	addi	r2,r2,48
 2008c9c:	88800005 	stb	r2,0(r17)
 2008ca0:	8c400044 	addi	r17,r17,1
 2008ca4:	8dc7c83a 	sub	r3,r17,r23
 2008ca8:	8009883a 	mov	r4,r16
 2008cac:	e00b883a 	mov	r5,fp
 2008cb0:	01800284 	movi	r6,10
 2008cb4:	000f883a 	mov	r7,zero
 2008cb8:	1cbff216 	blt	r3,r18,2008c84 <_dtoa_r+0xb3c>
 2008cbc:	dd800917 	ldw	r22,36(sp)
 2008cc0:	1007883a 	mov	r3,r2
 2008cc4:	05823a0e 	bge	zero,r22,20095b0 <_dtoa_r+0x1468>
 2008cc8:	bdad883a 	add	r22,r23,r22
 2008ccc:	0023883a 	mov	r17,zero
 2008cd0:	e00b883a 	mov	r5,fp
 2008cd4:	01800044 	movi	r6,1
 2008cd8:	8009883a 	mov	r4,r16
 2008cdc:	d8c01515 	stw	r3,84(sp)
 2008ce0:	200bbe80 	call	200bbe8 <__lshift>
 2008ce4:	1009883a 	mov	r4,r2
 2008ce8:	a00b883a 	mov	r5,r20
 2008cec:	1039883a 	mov	fp,r2
 2008cf0:	200bd440 	call	200bd44 <__mcmp>
 2008cf4:	d8c01517 	ldw	r3,84(sp)
 2008cf8:	0080d60e 	bge	zero,r2,2009054 <_dtoa_r+0xf0c>
 2008cfc:	b13fffc3 	ldbu	r4,-1(r22)
 2008d00:	b0ffff84 	addi	r3,r22,-2
 2008d04:	01800e44 	movi	r6,57
 2008d08:	00000306 	br	2008d18 <_dtoa_r+0xbd0>
 2008d0c:	19000003 	ldbu	r4,0(r3)
 2008d10:	102d883a 	mov	r22,r2
 2008d14:	18ffffc4 	addi	r3,r3,-1
 2008d18:	21403fcc 	andi	r5,r4,255
 2008d1c:	2940201c 	xori	r5,r5,128
 2008d20:	297fe004 	addi	r5,r5,-128
 2008d24:	b0bfffc4 	addi	r2,r22,-1
 2008d28:	2981a71e 	bne	r5,r6,20093c8 <_dtoa_r+0x1280>
 2008d2c:	b8bff71e 	bne	r23,r2,2008d0c <_dtoa_r+0xbc4>
 2008d30:	d8800617 	ldw	r2,24(sp)
 2008d34:	10800044 	addi	r2,r2,1
 2008d38:	d8800615 	stw	r2,24(sp)
 2008d3c:	00800c44 	movi	r2,49
 2008d40:	b8800005 	stb	r2,0(r23)
 2008d44:	8009883a 	mov	r4,r16
 2008d48:	a00b883a 	mov	r5,r20
 2008d4c:	200b5480 	call	200b548 <_Bfree>
 2008d50:	a83e9e26 	beq	r21,zero,20087cc <_dtoa_r+0x684>
 2008d54:	88000426 	beq	r17,zero,2008d68 <_dtoa_r+0xc20>
 2008d58:	8d400326 	beq	r17,r21,2008d68 <_dtoa_r+0xc20>
 2008d5c:	8009883a 	mov	r4,r16
 2008d60:	880b883a 	mov	r5,r17
 2008d64:	200b5480 	call	200b548 <_Bfree>
 2008d68:	8009883a 	mov	r4,r16
 2008d6c:	a80b883a 	mov	r5,r21
 2008d70:	200b5480 	call	200b548 <_Bfree>
 2008d74:	003e9506 	br	20087cc <_dtoa_r+0x684>
 2008d78:	00c00044 	movi	r3,1
 2008d7c:	d8c00d15 	stw	r3,52(sp)
 2008d80:	003d9f06 	br	2008400 <_dtoa_r+0x2b8>
 2008d84:	d9000817 	ldw	r4,32(sp)
 2008d88:	d8800617 	ldw	r2,24(sp)
 2008d8c:	d8000b15 	stw	zero,44(sp)
 2008d90:	2089c83a 	sub	r4,r4,r2
 2008d94:	0087c83a 	sub	r3,zero,r2
 2008d98:	d9000815 	stw	r4,32(sp)
 2008d9c:	d8c00a15 	stw	r3,40(sp)
 2008da0:	003da306 	br	2008430 <_dtoa_r+0x2e8>
 2008da4:	0529c83a 	sub	r20,zero,r20
 2008da8:	dd000815 	stw	r20,32(sp)
 2008dac:	d8000715 	stw	zero,28(sp)
 2008db0:	003d9806 	br	2008414 <_dtoa_r+0x2cc>
 2008db4:	d9000617 	ldw	r4,24(sp)
 2008db8:	20057e00 	call	20057e0 <__floatsidf>
 2008dbc:	1009883a 	mov	r4,r2
 2008dc0:	180b883a 	mov	r5,r3
 2008dc4:	980d883a 	mov	r6,r19
 2008dc8:	900f883a 	mov	r7,r18
 2008dcc:	200df600 	call	200df60 <__nedf2>
 2008dd0:	103d7a26 	beq	r2,zero,20083bc <_dtoa_r+0x274>
 2008dd4:	d8800617 	ldw	r2,24(sp)
 2008dd8:	10bfffc4 	addi	r2,r2,-1
 2008ddc:	d8800615 	stw	r2,24(sp)
 2008de0:	003d7606 	br	20083bc <_dtoa_r+0x274>
 2008de4:	dcc00a17 	ldw	r19,40(sp)
 2008de8:	dc800817 	ldw	r18,32(sp)
 2008dec:	002b883a 	mov	r21,zero
 2008df0:	003f4906 	br	2008b18 <_dtoa_r+0x9d0>
 2008df4:	00800704 	movi	r2,28
 2008df8:	d8c00817 	ldw	r3,32(sp)
 2008dfc:	d9000717 	ldw	r4,28(sp)
 2008e00:	90a5883a 	add	r18,r18,r2
 2008e04:	1887883a 	add	r3,r3,r2
 2008e08:	2089883a 	add	r4,r4,r2
 2008e0c:	d8c00815 	stw	r3,32(sp)
 2008e10:	d9000715 	stw	r4,28(sp)
 2008e14:	003f8406 	br	2008c28 <_dtoa_r+0xae0>
 2008e18:	d9c00317 	ldw	r7,12(sp)
 2008e1c:	013efb84 	movi	r4,-1042
 2008e20:	2509c83a 	sub	r4,r4,r20
 2008e24:	3908983a 	sll	r4,r7,r4
 2008e28:	003d3006 	br	20082ec <_dtoa_r+0x1a4>
 2008e2c:	d8000d15 	stw	zero,52(sp)
 2008e30:	003d7306 	br	2008400 <_dtoa_r+0x2b8>
 2008e34:	0480050e 	bge	zero,r18,2008e4c <_dtoa_r+0xd04>
 2008e38:	a80b883a 	mov	r5,r21
 2008e3c:	8009883a 	mov	r4,r16
 2008e40:	900d883a 	mov	r6,r18
 2008e44:	200bbe80 	call	200bbe8 <__lshift>
 2008e48:	102b883a 	mov	r21,r2
 2008e4c:	8801611e 	bne	r17,zero,20093d4 <_dtoa_r+0x128c>
 2008e50:	a827883a 	mov	r19,r21
 2008e54:	d8c00317 	ldw	r3,12(sp)
 2008e58:	d9000917 	ldw	r4,36(sp)
 2008e5c:	b8bfffc4 	addi	r2,r23,-1
 2008e60:	18c0004c 	andi	r3,r3,1
 2008e64:	1105883a 	add	r2,r2,r4
 2008e68:	b825883a 	mov	r18,r23
 2008e6c:	d8800515 	stw	r2,20(sp)
 2008e70:	a823883a 	mov	r17,r21
 2008e74:	d8c00315 	stw	r3,12(sp)
 2008e78:	ddc00715 	stw	r23,28(sp)
 2008e7c:	e009883a 	mov	r4,fp
 2008e80:	a00b883a 	mov	r5,r20
 2008e84:	2007f400 	call	2007f40 <quorem>
 2008e88:	e009883a 	mov	r4,fp
 2008e8c:	880b883a 	mov	r5,r17
 2008e90:	102d883a 	mov	r22,r2
 2008e94:	200bd440 	call	200bd44 <__mcmp>
 2008e98:	980d883a 	mov	r6,r19
 2008e9c:	8009883a 	mov	r4,r16
 2008ea0:	a00b883a 	mov	r5,r20
 2008ea4:	102b883a 	mov	r21,r2
 2008ea8:	200bd9c0 	call	200bd9c <__mdiff>
 2008eac:	100d883a 	mov	r6,r2
 2008eb0:	10800317 	ldw	r2,12(r2)
 2008eb4:	b5c00c04 	addi	r23,r22,48
 2008eb8:	10008c26 	beq	r2,zero,20090ec <_dtoa_r+0xfa4>
 2008ebc:	8009883a 	mov	r4,r16
 2008ec0:	300b883a 	mov	r5,r6
 2008ec4:	200b5480 	call	200b548 <_Bfree>
 2008ec8:	00800044 	movi	r2,1
 2008ecc:	a8007116 	blt	r21,zero,2009094 <_dtoa_r+0xf4c>
 2008ed0:	a800041e 	bne	r21,zero,2008ee4 <_dtoa_r+0xd9c>
 2008ed4:	d9c00417 	ldw	r7,16(sp)
 2008ed8:	3800021e 	bne	r7,zero,2008ee4 <_dtoa_r+0xd9c>
 2008edc:	d8c00317 	ldw	r3,12(sp)
 2008ee0:	18006c26 	beq	r3,zero,2009094 <_dtoa_r+0xf4c>
 2008ee4:	00814c16 	blt	zero,r2,2009418 <_dtoa_r+0x12d0>
 2008ee8:	d8c00517 	ldw	r3,20(sp)
 2008eec:	95400044 	addi	r21,r18,1
 2008ef0:	95c00005 	stb	r23,0(r18)
 2008ef4:	a82d883a 	mov	r22,r21
 2008ef8:	90c14d26 	beq	r18,r3,2009430 <_dtoa_r+0x12e8>
 2008efc:	e00b883a 	mov	r5,fp
 2008f00:	8009883a 	mov	r4,r16
 2008f04:	01800284 	movi	r6,10
 2008f08:	000f883a 	mov	r7,zero
 2008f0c:	200b5700 	call	200b570 <__multadd>
 2008f10:	1039883a 	mov	fp,r2
 2008f14:	8cc08b26 	beq	r17,r19,2009144 <_dtoa_r+0xffc>
 2008f18:	880b883a 	mov	r5,r17
 2008f1c:	01800284 	movi	r6,10
 2008f20:	000f883a 	mov	r7,zero
 2008f24:	8009883a 	mov	r4,r16
 2008f28:	200b5700 	call	200b570 <__multadd>
 2008f2c:	980b883a 	mov	r5,r19
 2008f30:	8009883a 	mov	r4,r16
 2008f34:	01800284 	movi	r6,10
 2008f38:	000f883a 	mov	r7,zero
 2008f3c:	1023883a 	mov	r17,r2
 2008f40:	200b5700 	call	200b570 <__multadd>
 2008f44:	1027883a 	mov	r19,r2
 2008f48:	a825883a 	mov	r18,r21
 2008f4c:	003fcb06 	br	2008e7c <_dtoa_r+0xd34>
 2008f50:	d9c00417 	ldw	r7,16(sp)
 2008f54:	00800104 	movi	r2,4
 2008f58:	3880e426 	beq	r7,r2,20092ec <_dtoa_r+0x11a4>
 2008f5c:	00800144 	movi	r2,5
 2008f60:	38be3c1e 	bne	r7,r2,2008854 <_dtoa_r+0x70c>
 2008f64:	00c00044 	movi	r3,1
 2008f68:	d8c00c15 	stw	r3,48(sp)
 2008f6c:	d9c02117 	ldw	r7,132(sp)
 2008f70:	d8800617 	ldw	r2,24(sp)
 2008f74:	388f883a 	add	r7,r7,r2
 2008f78:	3c800044 	addi	r18,r7,1
 2008f7c:	d9c00e15 	stw	r7,56(sp)
 2008f80:	dc800915 	stw	r18,36(sp)
 2008f84:	04bd3e16 	blt	zero,r18,2008480 <_dtoa_r+0x338>
 2008f88:	80001115 	stw	zero,68(r16)
 2008f8c:	000b883a 	mov	r5,zero
 2008f90:	003d4606 	br	20084ac <_dtoa_r+0x364>
 2008f94:	d8c00317 	ldw	r3,12(sp)
 2008f98:	183f0e1e 	bne	r3,zero,2008bd4 <_dtoa_r+0xa8c>
 2008f9c:	00c00434 	movhi	r3,16
 2008fa0:	18ffffc4 	addi	r3,r3,-1
 2008fa4:	88c6703a 	and	r3,r17,r3
 2008fa8:	183f0a1e 	bne	r3,zero,2008bd4 <_dtoa_r+0xa8c>
 2008fac:	8c5ffc2c 	andhi	r17,r17,32752
 2008fb0:	883f0826 	beq	r17,zero,2008bd4 <_dtoa_r+0xa8c>
 2008fb4:	d9000817 	ldw	r4,32(sp)
 2008fb8:	d9c00717 	ldw	r7,28(sp)
 2008fbc:	1023883a 	mov	r17,r2
 2008fc0:	2089883a 	add	r4,r4,r2
 2008fc4:	388f883a 	add	r7,r7,r2
 2008fc8:	d9000815 	stw	r4,32(sp)
 2008fcc:	d9c00715 	stw	r7,28(sp)
 2008fd0:	003f0106 	br	2008bd8 <_dtoa_r+0xa90>
 2008fd4:	9005883a 	mov	r2,r18
 2008fd8:	003ed306 	br	2008b28 <_dtoa_r+0x9e0>
 2008fdc:	d8800917 	ldw	r2,36(sp)
 2008fe0:	00be3516 	blt	zero,r2,20088b8 <_dtoa_r+0x770>
 2008fe4:	1000b61e 	bne	r2,zero,20092c0 <_dtoa_r+0x1178>
 2008fe8:	9009883a 	mov	r4,r18
 2008fec:	980b883a 	mov	r5,r19
 2008ff0:	000d883a 	mov	r6,zero
 2008ff4:	01d00534 	movhi	r7,16404
 2008ff8:	20054980 	call	2005498 <__muldf3>
 2008ffc:	d9800317 	ldw	r6,12(sp)
 2009000:	1009883a 	mov	r4,r2
 2009004:	180b883a 	mov	r5,r3
 2009008:	880f883a 	mov	r7,r17
 200900c:	200577c0 	call	200577c <__gedf2>
 2009010:	0029883a 	mov	r20,zero
 2009014:	002b883a 	mov	r21,zero
 2009018:	10007e16 	blt	r2,zero,2009214 <_dtoa_r+0x10cc>
 200901c:	d8802117 	ldw	r2,132(sp)
 2009020:	b82d883a 	mov	r22,r23
 2009024:	0084303a 	nor	r2,zero,r2
 2009028:	d8800615 	stw	r2,24(sp)
 200902c:	8009883a 	mov	r4,r16
 2009030:	a00b883a 	mov	r5,r20
 2009034:	200b5480 	call	200b548 <_Bfree>
 2009038:	a83f4b1e 	bne	r21,zero,2008d68 <_dtoa_r+0xc20>
 200903c:	003de306 	br	20087cc <_dtoa_r+0x684>
 2009040:	e00b883a 	mov	r5,fp
 2009044:	8009883a 	mov	r4,r16
 2009048:	200babc0 	call	200babc <__pow5mult>
 200904c:	1039883a 	mov	fp,r2
 2009050:	003ed206 	br	2008b9c <_dtoa_r+0xa54>
 2009054:	1000021e 	bne	r2,zero,2009060 <_dtoa_r+0xf18>
 2009058:	18c0004c 	andi	r3,r3,1
 200905c:	183f271e 	bne	r3,zero,2008cfc <_dtoa_r+0xbb4>
 2009060:	01000c04 	movi	r4,48
 2009064:	00000106 	br	200906c <_dtoa_r+0xf24>
 2009068:	102d883a 	mov	r22,r2
 200906c:	b0bfffc4 	addi	r2,r22,-1
 2009070:	10c00007 	ldb	r3,0(r2)
 2009074:	193ffc26 	beq	r3,r4,2009068 <_dtoa_r+0xf20>
 2009078:	003f3206 	br	2008d44 <_dtoa_r+0xbfc>
 200907c:	d8c00f17 	ldw	r3,60(sp)
 2009080:	18015026 	beq	r3,zero,20095c4 <_dtoa_r+0x147c>
 2009084:	10810cc4 	addi	r2,r2,1075
 2009088:	dcc00a17 	ldw	r19,40(sp)
 200908c:	dc800817 	ldw	r18,32(sp)
 2009090:	003e9706 	br	2008af0 <_dtoa_r+0x9a8>
 2009094:	b807883a 	mov	r3,r23
 2009098:	182b883a 	mov	r21,r3
 200909c:	ddc00717 	ldw	r23,28(sp)
 20090a0:	00800e0e 	bge	zero,r2,20090dc <_dtoa_r+0xf94>
 20090a4:	e00b883a 	mov	r5,fp
 20090a8:	01800044 	movi	r6,1
 20090ac:	8009883a 	mov	r4,r16
 20090b0:	d8c01515 	stw	r3,84(sp)
 20090b4:	200bbe80 	call	200bbe8 <__lshift>
 20090b8:	1009883a 	mov	r4,r2
 20090bc:	a00b883a 	mov	r5,r20
 20090c0:	1039883a 	mov	fp,r2
 20090c4:	200bd440 	call	200bd44 <__mcmp>
 20090c8:	d8c01517 	ldw	r3,84(sp)
 20090cc:	0081880e 	bge	zero,r2,20096f0 <_dtoa_r+0x15a8>
 20090d0:	00800e44 	movi	r2,57
 20090d4:	b0c00c44 	addi	r3,r22,49
 20090d8:	a8816326 	beq	r21,r2,2009668 <_dtoa_r+0x1520>
 20090dc:	90c00005 	stb	r3,0(r18)
 20090e0:	95800044 	addi	r22,r18,1
 20090e4:	982b883a 	mov	r21,r19
 20090e8:	003f1606 	br	2008d44 <_dtoa_r+0xbfc>
 20090ec:	300b883a 	mov	r5,r6
 20090f0:	e009883a 	mov	r4,fp
 20090f4:	d9801515 	stw	r6,84(sp)
 20090f8:	200bd440 	call	200bd44 <__mcmp>
 20090fc:	d9801517 	ldw	r6,84(sp)
 2009100:	8009883a 	mov	r4,r16
 2009104:	d8801515 	stw	r2,84(sp)
 2009108:	300b883a 	mov	r5,r6
 200910c:	200b5480 	call	200b548 <_Bfree>
 2009110:	d8801517 	ldw	r2,84(sp)
 2009114:	103f6d1e 	bne	r2,zero,2008ecc <_dtoa_r+0xd84>
 2009118:	d9c00417 	ldw	r7,16(sp)
 200911c:	383f6b1e 	bne	r7,zero,2008ecc <_dtoa_r+0xd84>
 2009120:	d8c00317 	ldw	r3,12(sp)
 2009124:	183f691e 	bne	r3,zero,2008ecc <_dtoa_r+0xd84>
 2009128:	b807883a 	mov	r3,r23
 200912c:	00800e44 	movi	r2,57
 2009130:	ddc00717 	ldw	r23,28(sp)
 2009134:	18814c26 	beq	r3,r2,2009668 <_dtoa_r+0x1520>
 2009138:	057fe80e 	bge	zero,r21,20090dc <_dtoa_r+0xf94>
 200913c:	b0c00c44 	addi	r3,r22,49
 2009140:	003fe606 	br	20090dc <_dtoa_r+0xf94>
 2009144:	880b883a 	mov	r5,r17
 2009148:	8009883a 	mov	r4,r16
 200914c:	01800284 	movi	r6,10
 2009150:	000f883a 	mov	r7,zero
 2009154:	200b5700 	call	200b570 <__multadd>
 2009158:	1023883a 	mov	r17,r2
 200915c:	1027883a 	mov	r19,r2
 2009160:	a825883a 	mov	r18,r21
 2009164:	003f4506 	br	2008e7c <_dtoa_r+0xd34>
 2009168:	e009883a 	mov	r4,fp
 200916c:	a00b883a 	mov	r5,r20
 2009170:	200bd440 	call	200bd44 <__mcmp>
 2009174:	103ebc0e 	bge	r2,zero,2008c68 <_dtoa_r+0xb20>
 2009178:	e00b883a 	mov	r5,fp
 200917c:	8009883a 	mov	r4,r16
 2009180:	01800284 	movi	r6,10
 2009184:	000f883a 	mov	r7,zero
 2009188:	200b5700 	call	200b570 <__multadd>
 200918c:	1039883a 	mov	fp,r2
 2009190:	d8800617 	ldw	r2,24(sp)
 2009194:	d8c00c17 	ldw	r3,48(sp)
 2009198:	10bfffc4 	addi	r2,r2,-1
 200919c:	d8800615 	stw	r2,24(sp)
 20091a0:	1801571e 	bne	r3,zero,2009700 <_dtoa_r+0x15b8>
 20091a4:	d9c00e17 	ldw	r7,56(sp)
 20091a8:	d9c00915 	stw	r7,36(sp)
 20091ac:	003eae06 	br	2008c68 <_dtoa_r+0xb20>
 20091b0:	a0800417 	ldw	r2,16(r20)
 20091b4:	10800104 	addi	r2,r2,4
 20091b8:	1085883a 	add	r2,r2,r2
 20091bc:	1085883a 	add	r2,r2,r2
 20091c0:	a085883a 	add	r2,r20,r2
 20091c4:	11000017 	ldw	r4,0(r2)
 20091c8:	200b7880 	call	200b788 <__hi0bits>
 20091cc:	00c00804 	movi	r3,32
 20091d0:	1885c83a 	sub	r2,r3,r2
 20091d4:	003e8306 	br	2008be4 <_dtoa_r+0xa9c>
 20091d8:	d9c00417 	ldw	r7,16(sp)
 20091dc:	00800084 	movi	r2,2
 20091e0:	11fea30e 	bge	r2,r7,2008c70 <_dtoa_r+0xb28>
 20091e4:	d8800917 	ldw	r2,36(sp)
 20091e8:	103f8c1e 	bne	r2,zero,200901c <_dtoa_r+0xed4>
 20091ec:	a00b883a 	mov	r5,r20
 20091f0:	8009883a 	mov	r4,r16
 20091f4:	01800144 	movi	r6,5
 20091f8:	000f883a 	mov	r7,zero
 20091fc:	200b5700 	call	200b570 <__multadd>
 2009200:	e009883a 	mov	r4,fp
 2009204:	100b883a 	mov	r5,r2
 2009208:	1029883a 	mov	r20,r2
 200920c:	200bd440 	call	200bd44 <__mcmp>
 2009210:	00bf820e 	bge	zero,r2,200901c <_dtoa_r+0xed4>
 2009214:	00800c44 	movi	r2,49
 2009218:	b8800005 	stb	r2,0(r23)
 200921c:	d8800617 	ldw	r2,24(sp)
 2009220:	bd800044 	addi	r22,r23,1
 2009224:	10800044 	addi	r2,r2,1
 2009228:	d8800615 	stw	r2,24(sp)
 200922c:	003f7f06 	br	200902c <_dtoa_r+0xee4>
 2009230:	dc000417 	ldw	r16,16(sp)
 2009234:	003d6506 	br	20087cc <_dtoa_r+0x684>
 2009238:	9009883a 	mov	r4,r18
 200923c:	20057e00 	call	20057e0 <__floatsidf>
 2009240:	1009883a 	mov	r4,r2
 2009244:	180b883a 	mov	r5,r3
 2009248:	980d883a 	mov	r6,r19
 200924c:	a00f883a 	mov	r7,r20
 2009250:	20054980 	call	2005498 <__muldf3>
 2009254:	1009883a 	mov	r4,r2
 2009258:	180b883a 	mov	r5,r3
 200925c:	000d883a 	mov	r6,zero
 2009260:	01d00734 	movhi	r7,16412
 2009264:	20053e40 	call	20053e4 <__adddf3>
 2009268:	057f3034 	movhi	r21,64704
 200926c:	1025883a 	mov	r18,r2
 2009270:	1d6b883a 	add	r21,r3,r21
 2009274:	9809883a 	mov	r4,r19
 2009278:	a00b883a 	mov	r5,r20
 200927c:	000d883a 	mov	r6,zero
 2009280:	01d00534 	movhi	r7,16404
 2009284:	20054380 	call	2005438 <__subdf3>
 2009288:	1009883a 	mov	r4,r2
 200928c:	180b883a 	mov	r5,r3
 2009290:	900d883a 	mov	r6,r18
 2009294:	a80f883a 	mov	r7,r21
 2009298:	1027883a 	mov	r19,r2
 200929c:	1829883a 	mov	r20,r3
 20092a0:	200dfbc0 	call	200dfbc <__gtdf2>
 20092a4:	00806616 	blt	zero,r2,2009440 <_dtoa_r+0x12f8>
 20092a8:	a9e0003c 	xorhi	r7,r21,32768
 20092ac:	9809883a 	mov	r4,r19
 20092b0:	a00b883a 	mov	r5,r20
 20092b4:	900d883a 	mov	r6,r18
 20092b8:	200e0200 	call	200e020 <__ltdf2>
 20092bc:	103d710e 	bge	r2,zero,2008884 <_dtoa_r+0x73c>
 20092c0:	0029883a 	mov	r20,zero
 20092c4:	002b883a 	mov	r21,zero
 20092c8:	003f5406 	br	200901c <_dtoa_r+0xed4>
 20092cc:	d9800a17 	ldw	r6,40(sp)
 20092d0:	e00b883a 	mov	r5,fp
 20092d4:	8009883a 	mov	r4,r16
 20092d8:	200babc0 	call	200babc <__pow5mult>
 20092dc:	1039883a 	mov	fp,r2
 20092e0:	003e2e06 	br	2008b9c <_dtoa_r+0xa54>
 20092e4:	d8000c15 	stw	zero,48(sp)
 20092e8:	003f2006 	br	2008f6c <_dtoa_r+0xe24>
 20092ec:	00800044 	movi	r2,1
 20092f0:	d8800c15 	stw	r2,48(sp)
 20092f4:	003c5d06 	br	200846c <_dtoa_r+0x324>
 20092f8:	d8c00a17 	ldw	r3,40(sp)
 20092fc:	d9000b17 	ldw	r4,44(sp)
 2009300:	dcc00a15 	stw	r19,40(sp)
 2009304:	98c5c83a 	sub	r2,r19,r3
 2009308:	2089883a 	add	r4,r4,r2
 200930c:	d9000b15 	stw	r4,44(sp)
 2009310:	0027883a 	mov	r19,zero
 2009314:	003df206 	br	2008ae0 <_dtoa_r+0x998>
 2009318:	d9000317 	ldw	r4,12(sp)
 200931c:	8829883a 	mov	r20,r17
 2009320:	04800084 	movi	r18,2
 2009324:	d9001015 	stw	r4,64(sp)
 2009328:	003c8106 	br	2008530 <_dtoa_r+0x3e8>
 200932c:	04800044 	movi	r18,1
 2009330:	dc800e15 	stw	r18,56(sp)
 2009334:	dc800915 	stw	r18,36(sp)
 2009338:	dc802115 	stw	r18,132(sp)
 200933c:	003f1206 	br	2008f88 <_dtoa_r+0xe40>
 2009340:	d8800617 	ldw	r2,24(sp)
 2009344:	00abc83a 	sub	r21,zero,r2
 2009348:	a800a426 	beq	r21,zero,20095dc <_dtoa_r+0x1494>
 200934c:	a88003cc 	andi	r2,r21,15
 2009350:	100490fa 	slli	r2,r2,3
 2009354:	00c08074 	movhi	r3,513
 2009358:	18c77804 	addi	r3,r3,7648
 200935c:	d9000317 	ldw	r4,12(sp)
 2009360:	1885883a 	add	r2,r3,r2
 2009364:	11800017 	ldw	r6,0(r2)
 2009368:	11c00117 	ldw	r7,4(r2)
 200936c:	a82bd13a 	srai	r21,r21,4
 2009370:	880b883a 	mov	r5,r17
 2009374:	20054980 	call	2005498 <__muldf3>
 2009378:	1027883a 	mov	r19,r2
 200937c:	1829883a 	mov	r20,r3
 2009380:	a800e826 	beq	r21,zero,2009724 <_dtoa_r+0x15dc>
 2009384:	05808074 	movhi	r22,513
 2009388:	b5876e04 	addi	r22,r22,7608
 200938c:	04800084 	movi	r18,2
 2009390:	a980004c 	andi	r6,r21,1
 2009394:	1009883a 	mov	r4,r2
 2009398:	a82bd07a 	srai	r21,r21,1
 200939c:	180b883a 	mov	r5,r3
 20093a0:	30000426 	beq	r6,zero,20093b4 <_dtoa_r+0x126c>
 20093a4:	b1800017 	ldw	r6,0(r22)
 20093a8:	b1c00117 	ldw	r7,4(r22)
 20093ac:	94800044 	addi	r18,r18,1
 20093b0:	20054980 	call	2005498 <__muldf3>
 20093b4:	b5800204 	addi	r22,r22,8
 20093b8:	a83ff51e 	bne	r21,zero,2009390 <_dtoa_r+0x1248>
 20093bc:	1027883a 	mov	r19,r2
 20093c0:	1829883a 	mov	r20,r3
 20093c4:	003c7306 	br	2008594 <_dtoa_r+0x44c>
 20093c8:	21000044 	addi	r4,r4,1
 20093cc:	11000005 	stb	r4,0(r2)
 20093d0:	003e5c06 	br	2008d44 <_dtoa_r+0xbfc>
 20093d4:	a9400117 	ldw	r5,4(r21)
 20093d8:	8009883a 	mov	r4,r16
 20093dc:	200b4a00 	call	200b4a0 <_Balloc>
 20093e0:	a9800417 	ldw	r6,16(r21)
 20093e4:	11000304 	addi	r4,r2,12
 20093e8:	a9400304 	addi	r5,r21,12
 20093ec:	31800084 	addi	r6,r6,2
 20093f0:	318d883a 	add	r6,r6,r6
 20093f4:	318d883a 	add	r6,r6,r6
 20093f8:	1023883a 	mov	r17,r2
 20093fc:	200b1a40 	call	200b1a4 <memcpy>
 2009400:	8009883a 	mov	r4,r16
 2009404:	880b883a 	mov	r5,r17
 2009408:	01800044 	movi	r6,1
 200940c:	200bbe80 	call	200bbe8 <__lshift>
 2009410:	1027883a 	mov	r19,r2
 2009414:	003e8f06 	br	2008e54 <_dtoa_r+0xd0c>
 2009418:	b807883a 	mov	r3,r23
 200941c:	00800e44 	movi	r2,57
 2009420:	ddc00717 	ldw	r23,28(sp)
 2009424:	18809026 	beq	r3,r2,2009668 <_dtoa_r+0x1520>
 2009428:	18c00044 	addi	r3,r3,1
 200942c:	003f2b06 	br	20090dc <_dtoa_r+0xf94>
 2009430:	b807883a 	mov	r3,r23
 2009434:	982b883a 	mov	r21,r19
 2009438:	ddc00717 	ldw	r23,28(sp)
 200943c:	003e2406 	br	2008cd0 <_dtoa_r+0xb88>
 2009440:	0029883a 	mov	r20,zero
 2009444:	002b883a 	mov	r21,zero
 2009448:	003f7206 	br	2009214 <_dtoa_r+0x10cc>
 200944c:	593fffc4 	addi	r4,r11,-1
 2009450:	200490fa 	slli	r2,r4,3
 2009454:	00c08074 	movhi	r3,513
 2009458:	18c77804 	addi	r3,r3,7648
 200945c:	d9001015 	stw	r4,64(sp)
 2009460:	1885883a 	add	r2,r3,r2
 2009464:	11000017 	ldw	r4,0(r2)
 2009468:	11400117 	ldw	r5,4(r2)
 200946c:	900d883a 	mov	r6,r18
 2009470:	a80f883a 	mov	r7,r21
 2009474:	dac01615 	stw	r11,88(sp)
 2009478:	20054980 	call	2005498 <__muldf3>
 200947c:	a00b883a 	mov	r5,r20
 2009480:	9809883a 	mov	r4,r19
 2009484:	d8c01215 	stw	r3,72(sp)
 2009488:	d8801115 	stw	r2,68(sp)
 200948c:	20058b40 	call	20058b4 <__fixdfsi>
 2009490:	1009883a 	mov	r4,r2
 2009494:	1025883a 	mov	r18,r2
 2009498:	20057e00 	call	20057e0 <__floatsidf>
 200949c:	9809883a 	mov	r4,r19
 20094a0:	a00b883a 	mov	r5,r20
 20094a4:	100d883a 	mov	r6,r2
 20094a8:	180f883a 	mov	r7,r3
 20094ac:	94800c04 	addi	r18,r18,48
 20094b0:	20054380 	call	2005438 <__subdf3>
 20094b4:	bc800005 	stb	r18,0(r23)
 20094b8:	dac01617 	ldw	r11,88(sp)
 20094bc:	102b883a 	mov	r21,r2
 20094c0:	00800044 	movi	r2,1
 20094c4:	bd800044 	addi	r22,r23,1
 20094c8:	1815883a 	mov	r10,r3
 20094cc:	58802226 	beq	r11,r2,2009558 <_dtoa_r+0x1410>
 20094d0:	bad7883a 	add	r11,r23,r11
 20094d4:	dc001415 	stw	r16,80(sp)
 20094d8:	a805883a 	mov	r2,r21
 20094dc:	b027883a 	mov	r19,r22
 20094e0:	5821883a 	mov	r16,r11
 20094e4:	882b883a 	mov	r21,r17
 20094e8:	000d883a 	mov	r6,zero
 20094ec:	01d00934 	movhi	r7,16420
 20094f0:	1009883a 	mov	r4,r2
 20094f4:	180b883a 	mov	r5,r3
 20094f8:	20054980 	call	2005498 <__muldf3>
 20094fc:	180b883a 	mov	r5,r3
 2009500:	1009883a 	mov	r4,r2
 2009504:	1829883a 	mov	r20,r3
 2009508:	1023883a 	mov	r17,r2
 200950c:	20058b40 	call	20058b4 <__fixdfsi>
 2009510:	1009883a 	mov	r4,r2
 2009514:	1025883a 	mov	r18,r2
 2009518:	20057e00 	call	20057e0 <__floatsidf>
 200951c:	8809883a 	mov	r4,r17
 2009520:	a00b883a 	mov	r5,r20
 2009524:	100d883a 	mov	r6,r2
 2009528:	180f883a 	mov	r7,r3
 200952c:	94800c04 	addi	r18,r18,48
 2009530:	20054380 	call	2005438 <__subdf3>
 2009534:	9cc00044 	addi	r19,r19,1
 2009538:	9cbfffc5 	stb	r18,-1(r19)
 200953c:	9c3fea1e 	bne	r19,r16,20094e8 <_dtoa_r+0x13a0>
 2009540:	1815883a 	mov	r10,r3
 2009544:	d8c01017 	ldw	r3,64(sp)
 2009548:	dc001417 	ldw	r16,80(sp)
 200954c:	a823883a 	mov	r17,r21
 2009550:	b0ed883a 	add	r22,r22,r3
 2009554:	102b883a 	mov	r21,r2
 2009558:	d9001117 	ldw	r4,68(sp)
 200955c:	d9401217 	ldw	r5,72(sp)
 2009560:	000d883a 	mov	r6,zero
 2009564:	01cff834 	movhi	r7,16352
 2009568:	da801515 	stw	r10,84(sp)
 200956c:	20053e40 	call	20053e4 <__adddf3>
 2009570:	da801517 	ldw	r10,84(sp)
 2009574:	1009883a 	mov	r4,r2
 2009578:	180b883a 	mov	r5,r3
 200957c:	500f883a 	mov	r7,r10
 2009580:	a80d883a 	mov	r6,r21
 2009584:	200e0200 	call	200e020 <__ltdf2>
 2009588:	da801517 	ldw	r10,84(sp)
 200958c:	10003b0e 	bge	r2,zero,200967c <_dtoa_r+0x1534>
 2009590:	d9c01317 	ldw	r7,76(sp)
 2009594:	b53fffc3 	ldbu	r20,-1(r22)
 2009598:	d9c00615 	stw	r7,24(sp)
 200959c:	003d3106 	br	2008a64 <_dtoa_r+0x91c>
 20095a0:	d8800817 	ldw	r2,32(sp)
 20095a4:	11e5c83a 	sub	r18,r2,r7
 20095a8:	0005883a 	mov	r2,zero
 20095ac:	003d5006 	br	2008af0 <_dtoa_r+0x9a8>
 20095b0:	05800044 	movi	r22,1
 20095b4:	003dc406 	br	2008cc8 <_dtoa_r+0xb80>
 20095b8:	a5000044 	addi	r20,r20,1
 20095bc:	15000005 	stb	r20,0(r2)
 20095c0:	003c8206 	br	20087cc <_dtoa_r+0x684>
 20095c4:	d8800217 	ldw	r2,8(sp)
 20095c8:	00c00d84 	movi	r3,54
 20095cc:	dcc00a17 	ldw	r19,40(sp)
 20095d0:	1885c83a 	sub	r2,r3,r2
 20095d4:	dc800817 	ldw	r18,32(sp)
 20095d8:	003d4506 	br	2008af0 <_dtoa_r+0x9a8>
 20095dc:	dcc00317 	ldw	r19,12(sp)
 20095e0:	8829883a 	mov	r20,r17
 20095e4:	04800084 	movi	r18,2
 20095e8:	003bea06 	br	2008594 <_dtoa_r+0x44c>
 20095ec:	d9000917 	ldw	r4,36(sp)
 20095f0:	203f1126 	beq	r4,zero,2009238 <_dtoa_r+0x10f0>
 20095f4:	d9c00e17 	ldw	r7,56(sp)
 20095f8:	01fca20e 	bge	zero,r7,2008884 <_dtoa_r+0x73c>
 20095fc:	a00b883a 	mov	r5,r20
 2009600:	9809883a 	mov	r4,r19
 2009604:	000d883a 	mov	r6,zero
 2009608:	01d00934 	movhi	r7,16420
 200960c:	20054980 	call	2005498 <__muldf3>
 2009610:	91000044 	addi	r4,r18,1
 2009614:	1027883a 	mov	r19,r2
 2009618:	1829883a 	mov	r20,r3
 200961c:	20057e00 	call	20057e0 <__floatsidf>
 2009620:	9809883a 	mov	r4,r19
 2009624:	a00b883a 	mov	r5,r20
 2009628:	100d883a 	mov	r6,r2
 200962c:	180f883a 	mov	r7,r3
 2009630:	20054980 	call	2005498 <__muldf3>
 2009634:	1009883a 	mov	r4,r2
 2009638:	180b883a 	mov	r5,r3
 200963c:	000d883a 	mov	r6,zero
 2009640:	01d00734 	movhi	r7,16412
 2009644:	20053e40 	call	20053e4 <__adddf3>
 2009648:	1025883a 	mov	r18,r2
 200964c:	d8800617 	ldw	r2,24(sp)
 2009650:	057f3034 	movhi	r21,64704
 2009654:	1d6b883a 	add	r21,r3,r21
 2009658:	10bfffc4 	addi	r2,r2,-1
 200965c:	d8801315 	stw	r2,76(sp)
 2009660:	dac00e17 	ldw	r11,56(sp)
 2009664:	003be706 	br	2008604 <_dtoa_r+0x4bc>
 2009668:	01000e44 	movi	r4,57
 200966c:	91000005 	stb	r4,0(r18)
 2009670:	95800044 	addi	r22,r18,1
 2009674:	982b883a 	mov	r21,r19
 2009678:	003da106 	br	2008d00 <_dtoa_r+0xbb8>
 200967c:	d9801117 	ldw	r6,68(sp)
 2009680:	d9c01217 	ldw	r7,72(sp)
 2009684:	0009883a 	mov	r4,zero
 2009688:	014ff834 	movhi	r5,16352
 200968c:	da801515 	stw	r10,84(sp)
 2009690:	20054380 	call	2005438 <__subdf3>
 2009694:	da801517 	ldw	r10,84(sp)
 2009698:	1009883a 	mov	r4,r2
 200969c:	180b883a 	mov	r5,r3
 20096a0:	a80d883a 	mov	r6,r21
 20096a4:	500f883a 	mov	r7,r10
 20096a8:	200dfbc0 	call	200dfbc <__gtdf2>
 20096ac:	00bc750e 	bge	zero,r2,2008884 <_dtoa_r+0x73c>
 20096b0:	01000c04 	movi	r4,48
 20096b4:	00000106 	br	20096bc <_dtoa_r+0x1574>
 20096b8:	102d883a 	mov	r22,r2
 20096bc:	b0bfffc4 	addi	r2,r22,-1
 20096c0:	10c00007 	ldb	r3,0(r2)
 20096c4:	193ffc26 	beq	r3,r4,20096b8 <_dtoa_r+0x1570>
 20096c8:	d8801317 	ldw	r2,76(sp)
 20096cc:	d8800615 	stw	r2,24(sp)
 20096d0:	003c3e06 	br	20087cc <_dtoa_r+0x684>
 20096d4:	d9001317 	ldw	r4,76(sp)
 20096d8:	df001117 	ldw	fp,68(sp)
 20096dc:	d9000615 	stw	r4,24(sp)
 20096e0:	003ce006 	br	2008a64 <_dtoa_r+0x91c>
 20096e4:	df001117 	ldw	fp,68(sp)
 20096e8:	dc401217 	ldw	r17,72(sp)
 20096ec:	003c6506 	br	2008884 <_dtoa_r+0x73c>
 20096f0:	103e7a1e 	bne	r2,zero,20090dc <_dtoa_r+0xf94>
 20096f4:	1880004c 	andi	r2,r3,1
 20096f8:	103e7826 	beq	r2,zero,20090dc <_dtoa_r+0xf94>
 20096fc:	003e7406 	br	20090d0 <_dtoa_r+0xf88>
 2009700:	8009883a 	mov	r4,r16
 2009704:	a80b883a 	mov	r5,r21
 2009708:	01800284 	movi	r6,10
 200970c:	000f883a 	mov	r7,zero
 2009710:	200b5700 	call	200b570 <__multadd>
 2009714:	d9000e17 	ldw	r4,56(sp)
 2009718:	102b883a 	mov	r21,r2
 200971c:	d9000915 	stw	r4,36(sp)
 2009720:	003d5106 	br	2008c68 <_dtoa_r+0xb20>
 2009724:	04800084 	movi	r18,2
 2009728:	003b9a06 	br	2008594 <_dtoa_r+0x44c>
 200972c:	d8c01317 	ldw	r3,76(sp)
 2009730:	d8c00615 	stw	r3,24(sp)
 2009734:	003ccb06 	br	2008a64 <_dtoa_r+0x91c>
 2009738:	d8c01317 	ldw	r3,76(sp)
 200973c:	d8c00615 	stw	r3,24(sp)
 2009740:	003c2206 	br	20087cc <_dtoa_r+0x684>
 2009744:	20fd3826 	beq	r4,r3,2008c28 <_dtoa_r+0xae0>
 2009748:	00c00f04 	movi	r3,60
 200974c:	1885c83a 	sub	r2,r3,r2
 2009750:	003da906 	br	2008df8 <_dtoa_r+0xcb0>
 2009754:	000b883a 	mov	r5,zero
 2009758:	003b5406 	br	20084ac <_dtoa_r+0x364>
 200975c:	04c00044 	movi	r19,1
 2009760:	003b3b06 	br	2008450 <_dtoa_r+0x308>

02009764 <_fflush_r>:
 2009764:	defffb04 	addi	sp,sp,-20
 2009768:	dcc00315 	stw	r19,12(sp)
 200976c:	dc400115 	stw	r17,4(sp)
 2009770:	dfc00415 	stw	ra,16(sp)
 2009774:	dc800215 	stw	r18,8(sp)
 2009778:	dc000015 	stw	r16,0(sp)
 200977c:	2027883a 	mov	r19,r4
 2009780:	2823883a 	mov	r17,r5
 2009784:	20000226 	beq	r4,zero,2009790 <_fflush_r+0x2c>
 2009788:	20800e17 	ldw	r2,56(r4)
 200978c:	10005726 	beq	r2,zero,20098ec <_fflush_r+0x188>
 2009790:	8880030b 	ldhu	r2,12(r17)
 2009794:	10c0020c 	andi	r3,r2,8
 2009798:	18ffffcc 	andi	r3,r3,65535
 200979c:	18e0001c 	xori	r3,r3,32768
 20097a0:	18e00004 	addi	r3,r3,-32768
 20097a4:	1800311e 	bne	r3,zero,200986c <_fflush_r+0x108>
 20097a8:	89000117 	ldw	r4,4(r17)
 20097ac:	10c20014 	ori	r3,r2,2048
 20097b0:	88c0030d 	sth	r3,12(r17)
 20097b4:	180b883a 	mov	r5,r3
 20097b8:	0100520e 	bge	zero,r4,2009904 <_fflush_r+0x1a0>
 20097bc:	88c00a17 	ldw	r3,40(r17)
 20097c0:	18002226 	beq	r3,zero,200984c <_fflush_r+0xe8>
 20097c4:	1084000c 	andi	r2,r2,4096
 20097c8:	10bfffcc 	andi	r2,r2,65535
 20097cc:	10a0001c 	xori	r2,r2,32768
 20097d0:	10a00004 	addi	r2,r2,-32768
 20097d4:	10004e26 	beq	r2,zero,2009910 <_fflush_r+0x1ac>
 20097d8:	8c001417 	ldw	r16,80(r17)
 20097dc:	2940010c 	andi	r5,r5,4
 20097e0:	297fffcc 	andi	r5,r5,65535
 20097e4:	2960001c 	xori	r5,r5,32768
 20097e8:	29600004 	addi	r5,r5,-32768
 20097ec:	28000626 	beq	r5,zero,2009808 <_fflush_r+0xa4>
 20097f0:	89000117 	ldw	r4,4(r17)
 20097f4:	88800c17 	ldw	r2,48(r17)
 20097f8:	8121c83a 	sub	r16,r16,r4
 20097fc:	10000226 	beq	r2,zero,2009808 <_fflush_r+0xa4>
 2009800:	88800f17 	ldw	r2,60(r17)
 2009804:	80a1c83a 	sub	r16,r16,r2
 2009808:	89400717 	ldw	r5,28(r17)
 200980c:	9809883a 	mov	r4,r19
 2009810:	800d883a 	mov	r6,r16
 2009814:	000f883a 	mov	r7,zero
 2009818:	183ee83a 	callr	r3
 200981c:	8080281e 	bne	r16,r2,20098c0 <_fflush_r+0x15c>
 2009820:	8880030b 	ldhu	r2,12(r17)
 2009824:	88c00417 	ldw	r3,16(r17)
 2009828:	88000115 	stw	zero,4(r17)
 200982c:	113dffcc 	andi	r4,r2,63487
 2009830:	1084000c 	andi	r2,r2,4096
 2009834:	10bfffcc 	andi	r2,r2,65535
 2009838:	10a0001c 	xori	r2,r2,32768
 200983c:	8900030d 	sth	r4,12(r17)
 2009840:	88c00015 	stw	r3,0(r17)
 2009844:	10a00004 	addi	r2,r2,-32768
 2009848:	10002c1e 	bne	r2,zero,20098fc <_fflush_r+0x198>
 200984c:	0005883a 	mov	r2,zero
 2009850:	dfc00417 	ldw	ra,16(sp)
 2009854:	dcc00317 	ldw	r19,12(sp)
 2009858:	dc800217 	ldw	r18,8(sp)
 200985c:	dc400117 	ldw	r17,4(sp)
 2009860:	dc000017 	ldw	r16,0(sp)
 2009864:	dec00504 	addi	sp,sp,20
 2009868:	f800283a 	ret
 200986c:	8c800417 	ldw	r18,16(r17)
 2009870:	903ff626 	beq	r18,zero,200984c <_fflush_r+0xe8>
 2009874:	8c000017 	ldw	r16,0(r17)
 2009878:	108000cc 	andi	r2,r2,3
 200987c:	8c800015 	stw	r18,0(r17)
 2009880:	84a1c83a 	sub	r16,r16,r18
 2009884:	10001b1e 	bne	r2,zero,20098f4 <_fflush_r+0x190>
 2009888:	88800517 	ldw	r2,20(r17)
 200988c:	88800215 	stw	r2,8(r17)
 2009890:	04000316 	blt	zero,r16,20098a0 <_fflush_r+0x13c>
 2009894:	003fed06 	br	200984c <_fflush_r+0xe8>
 2009898:	90a5883a 	add	r18,r18,r2
 200989c:	043feb0e 	bge	zero,r16,200984c <_fflush_r+0xe8>
 20098a0:	88800917 	ldw	r2,36(r17)
 20098a4:	89400717 	ldw	r5,28(r17)
 20098a8:	800f883a 	mov	r7,r16
 20098ac:	900d883a 	mov	r6,r18
 20098b0:	9809883a 	mov	r4,r19
 20098b4:	103ee83a 	callr	r2
 20098b8:	80a1c83a 	sub	r16,r16,r2
 20098bc:	00bff616 	blt	zero,r2,2009898 <_fflush_r+0x134>
 20098c0:	88c0030b 	ldhu	r3,12(r17)
 20098c4:	00bfffc4 	movi	r2,-1
 20098c8:	18c01014 	ori	r3,r3,64
 20098cc:	88c0030d 	sth	r3,12(r17)
 20098d0:	dfc00417 	ldw	ra,16(sp)
 20098d4:	dcc00317 	ldw	r19,12(sp)
 20098d8:	dc800217 	ldw	r18,8(sp)
 20098dc:	dc400117 	ldw	r17,4(sp)
 20098e0:	dc000017 	ldw	r16,0(sp)
 20098e4:	dec00504 	addi	sp,sp,20
 20098e8:	f800283a 	ret
 20098ec:	2009a0c0 	call	2009a0c <__sinit>
 20098f0:	003fa706 	br	2009790 <_fflush_r+0x2c>
 20098f4:	0005883a 	mov	r2,zero
 20098f8:	003fe406 	br	200988c <_fflush_r+0x128>
 20098fc:	8c001415 	stw	r16,80(r17)
 2009900:	003fd206 	br	200984c <_fflush_r+0xe8>
 2009904:	88c00f17 	ldw	r3,60(r17)
 2009908:	00ffac16 	blt	zero,r3,20097bc <_fflush_r+0x58>
 200990c:	003fcf06 	br	200984c <_fflush_r+0xe8>
 2009910:	89400717 	ldw	r5,28(r17)
 2009914:	9809883a 	mov	r4,r19
 2009918:	000d883a 	mov	r6,zero
 200991c:	01c00044 	movi	r7,1
 2009920:	183ee83a 	callr	r3
 2009924:	1021883a 	mov	r16,r2
 2009928:	00bfffc4 	movi	r2,-1
 200992c:	80800326 	beq	r16,r2,200993c <_fflush_r+0x1d8>
 2009930:	8940030b 	ldhu	r5,12(r17)
 2009934:	88c00a17 	ldw	r3,40(r17)
 2009938:	003fa806 	br	20097dc <_fflush_r+0x78>
 200993c:	98c00017 	ldw	r3,0(r19)
 2009940:	00800744 	movi	r2,29
 2009944:	18bfde1e 	bne	r3,r2,20098c0 <_fflush_r+0x15c>
 2009948:	003fc006 	br	200984c <_fflush_r+0xe8>

0200994c <fflush>:
 200994c:	200b883a 	mov	r5,r4
 2009950:	20000426 	beq	r4,zero,2009964 <fflush+0x18>
 2009954:	00808074 	movhi	r2,513
 2009958:	108e7804 	addi	r2,r2,14816
 200995c:	11000017 	ldw	r4,0(r2)
 2009960:	20097641 	jmpi	2009764 <_fflush_r>
 2009964:	00808074 	movhi	r2,513
 2009968:	108e7704 	addi	r2,r2,14812
 200996c:	11000017 	ldw	r4,0(r2)
 2009970:	01408074 	movhi	r5,513
 2009974:	2965d904 	addi	r5,r5,-26780
 2009978:	200a5ec1 	jmpi	200a5ec <_fwalk_reent>

0200997c <__fp_lock>:
 200997c:	0005883a 	mov	r2,zero
 2009980:	f800283a 	ret

02009984 <__fp_unlock>:
 2009984:	0005883a 	mov	r2,zero
 2009988:	f800283a 	ret

0200998c <_cleanup_r>:
 200998c:	01408074 	movhi	r5,513
 2009990:	29741104 	addi	r5,r5,-12220
 2009994:	200a5441 	jmpi	200a544 <_fwalk>

02009998 <__sfmoreglue>:
 2009998:	defffc04 	addi	sp,sp,-16
 200999c:	dc400115 	stw	r17,4(sp)
 20099a0:	2c401724 	muli	r17,r5,92
 20099a4:	dc800215 	stw	r18,8(sp)
 20099a8:	2825883a 	mov	r18,r5
 20099ac:	89400304 	addi	r5,r17,12
 20099b0:	dc000015 	stw	r16,0(sp)
 20099b4:	dfc00315 	stw	ra,12(sp)
 20099b8:	200a9280 	call	200a928 <_malloc_r>
 20099bc:	1021883a 	mov	r16,r2
 20099c0:	10000726 	beq	r2,zero,20099e0 <__sfmoreglue+0x48>
 20099c4:	11000304 	addi	r4,r2,12
 20099c8:	10000015 	stw	zero,0(r2)
 20099cc:	14800115 	stw	r18,4(r2)
 20099d0:	11000215 	stw	r4,8(r2)
 20099d4:	000b883a 	mov	r5,zero
 20099d8:	880d883a 	mov	r6,r17
 20099dc:	200b3c40 	call	200b3c4 <memset>
 20099e0:	8005883a 	mov	r2,r16
 20099e4:	dfc00317 	ldw	ra,12(sp)
 20099e8:	dc800217 	ldw	r18,8(sp)
 20099ec:	dc400117 	ldw	r17,4(sp)
 20099f0:	dc000017 	ldw	r16,0(sp)
 20099f4:	dec00404 	addi	sp,sp,16
 20099f8:	f800283a 	ret

020099fc <_cleanup>:
 20099fc:	00808074 	movhi	r2,513
 2009a00:	108e7704 	addi	r2,r2,14812
 2009a04:	11000017 	ldw	r4,0(r2)
 2009a08:	200998c1 	jmpi	200998c <_cleanup_r>

02009a0c <__sinit>:
 2009a0c:	20800e17 	ldw	r2,56(r4)
 2009a10:	1000401e 	bne	r2,zero,2009b14 <__sinit+0x108>
 2009a14:	21400117 	ldw	r5,4(r4)
 2009a18:	01808074 	movhi	r6,513
 2009a1c:	31a66304 	addi	r6,r6,-26228
 2009a20:	20c00217 	ldw	r3,8(r4)
 2009a24:	21800f15 	stw	r6,60(r4)
 2009a28:	2080bb04 	addi	r2,r4,748
 2009a2c:	02400044 	movi	r9,1
 2009a30:	018000c4 	movi	r6,3
 2009a34:	2180b915 	stw	r6,740(r4)
 2009a38:	2080ba15 	stw	r2,744(r4)
 2009a3c:	22400e15 	stw	r9,56(r4)
 2009a40:	20800317 	ldw	r2,12(r4)
 2009a44:	2000b815 	stw	zero,736(r4)
 2009a48:	02008074 	movhi	r8,513
 2009a4c:	4232c304 	addi	r8,r8,-13556
 2009a50:	01c08074 	movhi	r7,513
 2009a54:	39f2d804 	addi	r7,r7,-13472
 2009a58:	01808074 	movhi	r6,513
 2009a5c:	31b2fa04 	addi	r6,r6,-13336
 2009a60:	01008074 	movhi	r4,513
 2009a64:	21331104 	addi	r4,r4,-13244
 2009a68:	02800104 	movi	r10,4
 2009a6c:	28000015 	stw	zero,0(r5)
 2009a70:	28000115 	stw	zero,4(r5)
 2009a74:	28000215 	stw	zero,8(r5)
 2009a78:	2a80030d 	sth	r10,12(r5)
 2009a7c:	2800038d 	sth	zero,14(r5)
 2009a80:	28000415 	stw	zero,16(r5)
 2009a84:	28000515 	stw	zero,20(r5)
 2009a88:	28000615 	stw	zero,24(r5)
 2009a8c:	29400715 	stw	r5,28(r5)
 2009a90:	2a000815 	stw	r8,32(r5)
 2009a94:	29c00915 	stw	r7,36(r5)
 2009a98:	29800a15 	stw	r6,40(r5)
 2009a9c:	29000b15 	stw	r4,44(r5)
 2009aa0:	01400284 	movi	r5,10
 2009aa4:	18000015 	stw	zero,0(r3)
 2009aa8:	18000115 	stw	zero,4(r3)
 2009aac:	18000215 	stw	zero,8(r3)
 2009ab0:	1940030d 	sth	r5,12(r3)
 2009ab4:	1a40038d 	sth	r9,14(r3)
 2009ab8:	18000415 	stw	zero,16(r3)
 2009abc:	18000515 	stw	zero,20(r3)
 2009ac0:	18000615 	stw	zero,24(r3)
 2009ac4:	18c00715 	stw	r3,28(r3)
 2009ac8:	1a000815 	stw	r8,32(r3)
 2009acc:	19c00915 	stw	r7,36(r3)
 2009ad0:	19800a15 	stw	r6,40(r3)
 2009ad4:	19000b15 	stw	r4,44(r3)
 2009ad8:	00c00484 	movi	r3,18
 2009adc:	10c0030d 	sth	r3,12(r2)
 2009ae0:	00c00084 	movi	r3,2
 2009ae4:	10000015 	stw	zero,0(r2)
 2009ae8:	10000115 	stw	zero,4(r2)
 2009aec:	10000215 	stw	zero,8(r2)
 2009af0:	10c0038d 	sth	r3,14(r2)
 2009af4:	10000415 	stw	zero,16(r2)
 2009af8:	10000515 	stw	zero,20(r2)
 2009afc:	10000615 	stw	zero,24(r2)
 2009b00:	10800715 	stw	r2,28(r2)
 2009b04:	12000815 	stw	r8,32(r2)
 2009b08:	11c00915 	stw	r7,36(r2)
 2009b0c:	11800a15 	stw	r6,40(r2)
 2009b10:	11000b15 	stw	r4,44(r2)
 2009b14:	f800283a 	ret

02009b18 <__sfp>:
 2009b18:	defffc04 	addi	sp,sp,-16
 2009b1c:	00808074 	movhi	r2,513
 2009b20:	108e7704 	addi	r2,r2,14812
 2009b24:	dc400115 	stw	r17,4(sp)
 2009b28:	14400017 	ldw	r17,0(r2)
 2009b2c:	dc800215 	stw	r18,8(sp)
 2009b30:	dfc00315 	stw	ra,12(sp)
 2009b34:	88800e17 	ldw	r2,56(r17)
 2009b38:	dc000015 	stw	r16,0(sp)
 2009b3c:	2025883a 	mov	r18,r4
 2009b40:	10002826 	beq	r2,zero,2009be4 <__sfp+0xcc>
 2009b44:	8c40b804 	addi	r17,r17,736
 2009b48:	043fffc4 	movi	r16,-1
 2009b4c:	89400117 	ldw	r5,4(r17)
 2009b50:	88800217 	ldw	r2,8(r17)
 2009b54:	297fffc4 	addi	r5,r5,-1
 2009b58:	28000a16 	blt	r5,zero,2009b84 <__sfp+0x6c>
 2009b5c:	10c0030f 	ldh	r3,12(r2)
 2009b60:	18000c26 	beq	r3,zero,2009b94 <__sfp+0x7c>
 2009b64:	10c01a04 	addi	r3,r2,104
 2009b68:	00000206 	br	2009b74 <__sfp+0x5c>
 2009b6c:	19bfe90f 	ldh	r6,-92(r3)
 2009b70:	30000826 	beq	r6,zero,2009b94 <__sfp+0x7c>
 2009b74:	297fffc4 	addi	r5,r5,-1
 2009b78:	18bffd04 	addi	r2,r3,-12
 2009b7c:	18c01704 	addi	r3,r3,92
 2009b80:	2c3ffa1e 	bne	r5,r16,2009b6c <__sfp+0x54>
 2009b84:	88800017 	ldw	r2,0(r17)
 2009b88:	10001926 	beq	r2,zero,2009bf0 <__sfp+0xd8>
 2009b8c:	1023883a 	mov	r17,r2
 2009b90:	003fee06 	br	2009b4c <__sfp+0x34>
 2009b94:	00ffffc4 	movi	r3,-1
 2009b98:	10c0038d 	sth	r3,14(r2)
 2009b9c:	00c00044 	movi	r3,1
 2009ba0:	10c0030d 	sth	r3,12(r2)
 2009ba4:	10000015 	stw	zero,0(r2)
 2009ba8:	10000215 	stw	zero,8(r2)
 2009bac:	10000115 	stw	zero,4(r2)
 2009bb0:	10000415 	stw	zero,16(r2)
 2009bb4:	10000515 	stw	zero,20(r2)
 2009bb8:	10000615 	stw	zero,24(r2)
 2009bbc:	10000c15 	stw	zero,48(r2)
 2009bc0:	10000d15 	stw	zero,52(r2)
 2009bc4:	10001115 	stw	zero,68(r2)
 2009bc8:	10001215 	stw	zero,72(r2)
 2009bcc:	dfc00317 	ldw	ra,12(sp)
 2009bd0:	dc800217 	ldw	r18,8(sp)
 2009bd4:	dc400117 	ldw	r17,4(sp)
 2009bd8:	dc000017 	ldw	r16,0(sp)
 2009bdc:	dec00404 	addi	sp,sp,16
 2009be0:	f800283a 	ret
 2009be4:	8809883a 	mov	r4,r17
 2009be8:	2009a0c0 	call	2009a0c <__sinit>
 2009bec:	003fd506 	br	2009b44 <__sfp+0x2c>
 2009bf0:	9009883a 	mov	r4,r18
 2009bf4:	01400104 	movi	r5,4
 2009bf8:	20099980 	call	2009998 <__sfmoreglue>
 2009bfc:	88800015 	stw	r2,0(r17)
 2009c00:	103fe21e 	bne	r2,zero,2009b8c <__sfp+0x74>
 2009c04:	00800304 	movi	r2,12
 2009c08:	90800015 	stw	r2,0(r18)
 2009c0c:	0005883a 	mov	r2,zero
 2009c10:	003fee06 	br	2009bcc <__sfp+0xb4>

02009c14 <__sfp_lock_acquire>:
 2009c14:	f800283a 	ret

02009c18 <__sfp_lock_release>:
 2009c18:	f800283a 	ret

02009c1c <__sinit_lock_acquire>:
 2009c1c:	f800283a 	ret

02009c20 <__sinit_lock_release>:
 2009c20:	f800283a 	ret

02009c24 <__fp_lock_all>:
 2009c24:	00808074 	movhi	r2,513
 2009c28:	108e7804 	addi	r2,r2,14816
 2009c2c:	11000017 	ldw	r4,0(r2)
 2009c30:	01408074 	movhi	r5,513
 2009c34:	29665f04 	addi	r5,r5,-26244
 2009c38:	200a5441 	jmpi	200a544 <_fwalk>

02009c3c <__fp_unlock_all>:
 2009c3c:	00808074 	movhi	r2,513
 2009c40:	108e7804 	addi	r2,r2,14816
 2009c44:	11000017 	ldw	r4,0(r2)
 2009c48:	01408074 	movhi	r5,513
 2009c4c:	29666104 	addi	r5,r5,-26236
 2009c50:	200a5441 	jmpi	200a544 <_fwalk>

02009c54 <_malloc_trim_r>:
 2009c54:	defffb04 	addi	sp,sp,-20
 2009c58:	dcc00315 	stw	r19,12(sp)
 2009c5c:	dc800215 	stw	r18,8(sp)
 2009c60:	dc400115 	stw	r17,4(sp)
 2009c64:	dc000015 	stw	r16,0(sp)
 2009c68:	2827883a 	mov	r19,r5
 2009c6c:	dfc00415 	stw	ra,16(sp)
 2009c70:	04408074 	movhi	r17,513
 2009c74:	8c48bf04 	addi	r17,r17,8956
 2009c78:	2021883a 	mov	r16,r4
 2009c7c:	200e7900 	call	200e790 <__malloc_lock>
 2009c80:	88800217 	ldw	r2,8(r17)
 2009c84:	14800117 	ldw	r18,4(r2)
 2009c88:	00bfff04 	movi	r2,-4
 2009c8c:	90a4703a 	and	r18,r18,r2
 2009c90:	9083fbc4 	addi	r2,r18,4079
 2009c94:	14e7c83a 	sub	r19,r2,r19
 2009c98:	9826d33a 	srli	r19,r19,12
 2009c9c:	0083ffc4 	movi	r2,4095
 2009ca0:	9cffffc4 	addi	r19,r19,-1
 2009ca4:	9826933a 	slli	r19,r19,12
 2009ca8:	14c0060e 	bge	r2,r19,2009cc4 <_malloc_trim_r+0x70>
 2009cac:	8009883a 	mov	r4,r16
 2009cb0:	000b883a 	mov	r5,zero
 2009cb4:	200caa80 	call	200caa8 <_sbrk_r>
 2009cb8:	88c00217 	ldw	r3,8(r17)
 2009cbc:	1c87883a 	add	r3,r3,r18
 2009cc0:	10c00a26 	beq	r2,r3,2009cec <_malloc_trim_r+0x98>
 2009cc4:	8009883a 	mov	r4,r16
 2009cc8:	200e7b00 	call	200e7b0 <__malloc_unlock>
 2009ccc:	0005883a 	mov	r2,zero
 2009cd0:	dfc00417 	ldw	ra,16(sp)
 2009cd4:	dcc00317 	ldw	r19,12(sp)
 2009cd8:	dc800217 	ldw	r18,8(sp)
 2009cdc:	dc400117 	ldw	r17,4(sp)
 2009ce0:	dc000017 	ldw	r16,0(sp)
 2009ce4:	dec00504 	addi	sp,sp,20
 2009ce8:	f800283a 	ret
 2009cec:	8009883a 	mov	r4,r16
 2009cf0:	04cbc83a 	sub	r5,zero,r19
 2009cf4:	200caa80 	call	200caa8 <_sbrk_r>
 2009cf8:	00ffffc4 	movi	r3,-1
 2009cfc:	10c01326 	beq	r2,r3,2009d4c <_malloc_trim_r+0xf8>
 2009d00:	00808074 	movhi	r2,513
 2009d04:	108e9504 	addi	r2,r2,14932
 2009d08:	11000017 	ldw	r4,0(r2)
 2009d0c:	88c00217 	ldw	r3,8(r17)
 2009d10:	94e5c83a 	sub	r18,r18,r19
 2009d14:	94800054 	ori	r18,r18,1
 2009d18:	24e7c83a 	sub	r19,r4,r19
 2009d1c:	1c800115 	stw	r18,4(r3)
 2009d20:	8009883a 	mov	r4,r16
 2009d24:	14c00015 	stw	r19,0(r2)
 2009d28:	200e7b00 	call	200e7b0 <__malloc_unlock>
 2009d2c:	00800044 	movi	r2,1
 2009d30:	dfc00417 	ldw	ra,16(sp)
 2009d34:	dcc00317 	ldw	r19,12(sp)
 2009d38:	dc800217 	ldw	r18,8(sp)
 2009d3c:	dc400117 	ldw	r17,4(sp)
 2009d40:	dc000017 	ldw	r16,0(sp)
 2009d44:	dec00504 	addi	sp,sp,20
 2009d48:	f800283a 	ret
 2009d4c:	8009883a 	mov	r4,r16
 2009d50:	000b883a 	mov	r5,zero
 2009d54:	200caa80 	call	200caa8 <_sbrk_r>
 2009d58:	88c00217 	ldw	r3,8(r17)
 2009d5c:	014003c4 	movi	r5,15
 2009d60:	10c9c83a 	sub	r4,r2,r3
 2009d64:	293fd70e 	bge	r5,r4,2009cc4 <_malloc_trim_r+0x70>
 2009d68:	01408074 	movhi	r5,513
 2009d6c:	294e7a04 	addi	r5,r5,14824
 2009d70:	29400017 	ldw	r5,0(r5)
 2009d74:	21000054 	ori	r4,r4,1
 2009d78:	19000115 	stw	r4,4(r3)
 2009d7c:	1145c83a 	sub	r2,r2,r5
 2009d80:	01408074 	movhi	r5,513
 2009d84:	294e9504 	addi	r5,r5,14932
 2009d88:	28800015 	stw	r2,0(r5)
 2009d8c:	003fcd06 	br	2009cc4 <_malloc_trim_r+0x70>

02009d90 <_free_r>:
 2009d90:	defffd04 	addi	sp,sp,-12
 2009d94:	dc400115 	stw	r17,4(sp)
 2009d98:	dc000015 	stw	r16,0(sp)
 2009d9c:	dfc00215 	stw	ra,8(sp)
 2009da0:	2821883a 	mov	r16,r5
 2009da4:	2023883a 	mov	r17,r4
 2009da8:	28004b26 	beq	r5,zero,2009ed8 <_free_r+0x148>
 2009dac:	200e7900 	call	200e790 <__malloc_lock>
 2009db0:	823fff17 	ldw	r8,-4(r16)
 2009db4:	00bfff84 	movi	r2,-2
 2009db8:	81bffe04 	addi	r6,r16,-8
 2009dbc:	4084703a 	and	r2,r8,r2
 2009dc0:	3087883a 	add	r3,r6,r2
 2009dc4:	01408074 	movhi	r5,513
 2009dc8:	2948bf04 	addi	r5,r5,8956
 2009dcc:	1a400117 	ldw	r9,4(r3)
 2009dd0:	29000217 	ldw	r4,8(r5)
 2009dd4:	01ffff04 	movi	r7,-4
 2009dd8:	49ce703a 	and	r7,r9,r7
 2009ddc:	20c06526 	beq	r4,r3,2009f74 <_free_r+0x1e4>
 2009de0:	19c00115 	stw	r7,4(r3)
 2009de4:	4200004c 	andi	r8,r8,1
 2009de8:	40003026 	beq	r8,zero,2009eac <_free_r+0x11c>
 2009dec:	0009883a 	mov	r4,zero
 2009df0:	19d1883a 	add	r8,r3,r7
 2009df4:	42000117 	ldw	r8,4(r8)
 2009df8:	4200004c 	andi	r8,r8,1
 2009dfc:	4000061e 	bne	r8,zero,2009e18 <_free_r+0x88>
 2009e00:	11c5883a 	add	r2,r2,r7
 2009e04:	19c00217 	ldw	r7,8(r3)
 2009e08:	20004e26 	beq	r4,zero,2009f44 <_free_r+0x1b4>
 2009e0c:	18c00317 	ldw	r3,12(r3)
 2009e10:	38c00315 	stw	r3,12(r7)
 2009e14:	19c00215 	stw	r7,8(r3)
 2009e18:	11c00054 	ori	r7,r2,1
 2009e1c:	3087883a 	add	r3,r6,r2
 2009e20:	31c00115 	stw	r7,4(r6)
 2009e24:	18800015 	stw	r2,0(r3)
 2009e28:	20001a1e 	bne	r4,zero,2009e94 <_free_r+0x104>
 2009e2c:	00c07fc4 	movi	r3,511
 2009e30:	18802e2e 	bgeu	r3,r2,2009eec <_free_r+0x15c>
 2009e34:	1006d27a 	srli	r3,r2,9
 2009e38:	01000104 	movi	r4,4
 2009e3c:	20c06636 	bltu	r4,r3,2009fd8 <_free_r+0x248>
 2009e40:	1008d1ba 	srli	r4,r2,6
 2009e44:	21000e04 	addi	r4,r4,56
 2009e48:	210f883a 	add	r7,r4,r4
 2009e4c:	39cf883a 	add	r7,r7,r7
 2009e50:	39cf883a 	add	r7,r7,r7
 2009e54:	29cf883a 	add	r7,r5,r7
 2009e58:	38c00217 	ldw	r3,8(r7)
 2009e5c:	01408074 	movhi	r5,513
 2009e60:	2948bf04 	addi	r5,r5,8956
 2009e64:	19c06126 	beq	r3,r7,2009fec <_free_r+0x25c>
 2009e68:	013fff04 	movi	r4,-4
 2009e6c:	19400117 	ldw	r5,4(r3)
 2009e70:	290a703a 	and	r5,r5,r4
 2009e74:	1140022e 	bgeu	r2,r5,2009e80 <_free_r+0xf0>
 2009e78:	18c00217 	ldw	r3,8(r3)
 2009e7c:	38fffb1e 	bne	r7,r3,2009e6c <_free_r+0xdc>
 2009e80:	18800317 	ldw	r2,12(r3)
 2009e84:	30800315 	stw	r2,12(r6)
 2009e88:	30c00215 	stw	r3,8(r6)
 2009e8c:	11800215 	stw	r6,8(r2)
 2009e90:	19800315 	stw	r6,12(r3)
 2009e94:	8809883a 	mov	r4,r17
 2009e98:	dfc00217 	ldw	ra,8(sp)
 2009e9c:	dc400117 	ldw	r17,4(sp)
 2009ea0:	dc000017 	ldw	r16,0(sp)
 2009ea4:	dec00304 	addi	sp,sp,12
 2009ea8:	200e7b01 	jmpi	200e7b0 <__malloc_unlock>
 2009eac:	813ffe17 	ldw	r4,-8(r16)
 2009eb0:	2a400204 	addi	r9,r5,8
 2009eb4:	310dc83a 	sub	r6,r6,r4
 2009eb8:	32000217 	ldw	r8,8(r6)
 2009ebc:	1105883a 	add	r2,r2,r4
 2009ec0:	42404326 	beq	r8,r9,2009fd0 <_free_r+0x240>
 2009ec4:	32400317 	ldw	r9,12(r6)
 2009ec8:	0009883a 	mov	r4,zero
 2009ecc:	42400315 	stw	r9,12(r8)
 2009ed0:	4a000215 	stw	r8,8(r9)
 2009ed4:	003fc606 	br	2009df0 <_free_r+0x60>
 2009ed8:	dfc00217 	ldw	ra,8(sp)
 2009edc:	dc400117 	ldw	r17,4(sp)
 2009ee0:	dc000017 	ldw	r16,0(sp)
 2009ee4:	dec00304 	addi	sp,sp,12
 2009ee8:	f800283a 	ret
 2009eec:	1004d0fa 	srli	r2,r2,3
 2009ef0:	02000044 	movi	r8,1
 2009ef4:	29c00117 	ldw	r7,4(r5)
 2009ef8:	1087883a 	add	r3,r2,r2
 2009efc:	18c7883a 	add	r3,r3,r3
 2009f00:	1005d0ba 	srai	r2,r2,2
 2009f04:	18c7883a 	add	r3,r3,r3
 2009f08:	28c7883a 	add	r3,r5,r3
 2009f0c:	19000217 	ldw	r4,8(r3)
 2009f10:	4084983a 	sll	r2,r8,r2
 2009f14:	30c00315 	stw	r3,12(r6)
 2009f18:	31000215 	stw	r4,8(r6)
 2009f1c:	11c4b03a 	or	r2,r2,r7
 2009f20:	21800315 	stw	r6,12(r4)
 2009f24:	8809883a 	mov	r4,r17
 2009f28:	28800115 	stw	r2,4(r5)
 2009f2c:	19800215 	stw	r6,8(r3)
 2009f30:	dfc00217 	ldw	ra,8(sp)
 2009f34:	dc400117 	ldw	r17,4(sp)
 2009f38:	dc000017 	ldw	r16,0(sp)
 2009f3c:	dec00304 	addi	sp,sp,12
 2009f40:	200e7b01 	jmpi	200e7b0 <__malloc_unlock>
 2009f44:	02008074 	movhi	r8,513
 2009f48:	4208c104 	addi	r8,r8,8964
 2009f4c:	3a3faf1e 	bne	r7,r8,2009e0c <_free_r+0x7c>
 2009f50:	29800515 	stw	r6,20(r5)
 2009f54:	29800415 	stw	r6,16(r5)
 2009f58:	11000054 	ori	r4,r2,1
 2009f5c:	3087883a 	add	r3,r6,r2
 2009f60:	31c00315 	stw	r7,12(r6)
 2009f64:	31c00215 	stw	r7,8(r6)
 2009f68:	31000115 	stw	r4,4(r6)
 2009f6c:	18800015 	stw	r2,0(r3)
 2009f70:	003fc806 	br	2009e94 <_free_r+0x104>
 2009f74:	4200004c 	andi	r8,r8,1
 2009f78:	3885883a 	add	r2,r7,r2
 2009f7c:	4000071e 	bne	r8,zero,2009f9c <_free_r+0x20c>
 2009f80:	81fffe17 	ldw	r7,-8(r16)
 2009f84:	31cdc83a 	sub	r6,r6,r7
 2009f88:	30c00317 	ldw	r3,12(r6)
 2009f8c:	31000217 	ldw	r4,8(r6)
 2009f90:	11c5883a 	add	r2,r2,r7
 2009f94:	20c00315 	stw	r3,12(r4)
 2009f98:	19000215 	stw	r4,8(r3)
 2009f9c:	00c08074 	movhi	r3,513
 2009fa0:	18ce7b04 	addi	r3,r3,14828
 2009fa4:	18c00017 	ldw	r3,0(r3)
 2009fa8:	11000054 	ori	r4,r2,1
 2009fac:	31000115 	stw	r4,4(r6)
 2009fb0:	29800215 	stw	r6,8(r5)
 2009fb4:	10ffb736 	bltu	r2,r3,2009e94 <_free_r+0x104>
 2009fb8:	00808074 	movhi	r2,513
 2009fbc:	108e8d04 	addi	r2,r2,14900
 2009fc0:	11400017 	ldw	r5,0(r2)
 2009fc4:	8809883a 	mov	r4,r17
 2009fc8:	2009c540 	call	2009c54 <_malloc_trim_r>
 2009fcc:	003fb106 	br	2009e94 <_free_r+0x104>
 2009fd0:	01000044 	movi	r4,1
 2009fd4:	003f8606 	br	2009df0 <_free_r+0x60>
 2009fd8:	01000504 	movi	r4,20
 2009fdc:	20c00b36 	bltu	r4,r3,200a00c <_free_r+0x27c>
 2009fe0:	190016c4 	addi	r4,r3,91
 2009fe4:	210f883a 	add	r7,r4,r4
 2009fe8:	003f9806 	br	2009e4c <_free_r+0xbc>
 2009fec:	2009d0ba 	srai	r4,r4,2
 2009ff0:	00800044 	movi	r2,1
 2009ff4:	29c00117 	ldw	r7,4(r5)
 2009ff8:	1108983a 	sll	r4,r2,r4
 2009ffc:	1805883a 	mov	r2,r3
 200a000:	21c8b03a 	or	r4,r4,r7
 200a004:	29000115 	stw	r4,4(r5)
 200a008:	003f9e06 	br	2009e84 <_free_r+0xf4>
 200a00c:	01001504 	movi	r4,84
 200a010:	20c00436 	bltu	r4,r3,200a024 <_free_r+0x294>
 200a014:	1008d33a 	srli	r4,r2,12
 200a018:	21001b84 	addi	r4,r4,110
 200a01c:	210f883a 	add	r7,r4,r4
 200a020:	003f8a06 	br	2009e4c <_free_r+0xbc>
 200a024:	01005504 	movi	r4,340
 200a028:	20c00436 	bltu	r4,r3,200a03c <_free_r+0x2ac>
 200a02c:	1008d3fa 	srli	r4,r2,15
 200a030:	21001dc4 	addi	r4,r4,119
 200a034:	210f883a 	add	r7,r4,r4
 200a038:	003f8406 	br	2009e4c <_free_r+0xbc>
 200a03c:	01015504 	movi	r4,1364
 200a040:	20c00436 	bltu	r4,r3,200a054 <_free_r+0x2c4>
 200a044:	1008d4ba 	srli	r4,r2,18
 200a048:	21001f04 	addi	r4,r4,124
 200a04c:	210f883a 	add	r7,r4,r4
 200a050:	003f7e06 	br	2009e4c <_free_r+0xbc>
 200a054:	01c03f04 	movi	r7,252
 200a058:	01001f84 	movi	r4,126
 200a05c:	003f7b06 	br	2009e4c <_free_r+0xbc>

0200a060 <__sfvwrite_r>:
 200a060:	30800217 	ldw	r2,8(r6)
 200a064:	defff504 	addi	sp,sp,-44
 200a068:	dd400615 	stw	r21,24(sp)
 200a06c:	dd000515 	stw	r20,20(sp)
 200a070:	dc000115 	stw	r16,4(sp)
 200a074:	dfc00a15 	stw	ra,40(sp)
 200a078:	df000915 	stw	fp,36(sp)
 200a07c:	ddc00815 	stw	r23,32(sp)
 200a080:	dd800715 	stw	r22,28(sp)
 200a084:	dcc00415 	stw	r19,16(sp)
 200a088:	dc800315 	stw	r18,12(sp)
 200a08c:	dc400215 	stw	r17,8(sp)
 200a090:	3029883a 	mov	r20,r6
 200a094:	202b883a 	mov	r21,r4
 200a098:	2821883a 	mov	r16,r5
 200a09c:	10002126 	beq	r2,zero,200a124 <__sfvwrite_r+0xc4>
 200a0a0:	2880030b 	ldhu	r2,12(r5)
 200a0a4:	10c0020c 	andi	r3,r2,8
 200a0a8:	18ffffcc 	andi	r3,r3,65535
 200a0ac:	18e0001c 	xori	r3,r3,32768
 200a0b0:	18e00004 	addi	r3,r3,-32768
 200a0b4:	18002826 	beq	r3,zero,200a158 <__sfvwrite_r+0xf8>
 200a0b8:	28c00417 	ldw	r3,16(r5)
 200a0bc:	18002626 	beq	r3,zero,200a158 <__sfvwrite_r+0xf8>
 200a0c0:	10c0008c 	andi	r3,r2,2
 200a0c4:	18ffffcc 	andi	r3,r3,65535
 200a0c8:	18e0001c 	xori	r3,r3,32768
 200a0cc:	18e00004 	addi	r3,r3,-32768
 200a0d0:	a4400017 	ldw	r17,0(r20)
 200a0d4:	18002b26 	beq	r3,zero,200a184 <__sfvwrite_r+0x124>
 200a0d8:	0027883a 	mov	r19,zero
 200a0dc:	0025883a 	mov	r18,zero
 200a0e0:	05810004 	movi	r22,1024
 200a0e4:	980d883a 	mov	r6,r19
 200a0e8:	a809883a 	mov	r4,r21
 200a0ec:	90004f26 	beq	r18,zero,200a22c <__sfvwrite_r+0x1cc>
 200a0f0:	900f883a 	mov	r7,r18
 200a0f4:	81400717 	ldw	r5,28(r16)
 200a0f8:	b480012e 	bgeu	r22,r18,200a100 <__sfvwrite_r+0xa0>
 200a0fc:	01c10004 	movi	r7,1024
 200a100:	80800917 	ldw	r2,36(r16)
 200a104:	103ee83a 	callr	r2
 200a108:	0080540e 	bge	zero,r2,200a25c <__sfvwrite_r+0x1fc>
 200a10c:	a0c00217 	ldw	r3,8(r20)
 200a110:	98a7883a 	add	r19,r19,r2
 200a114:	90a5c83a 	sub	r18,r18,r2
 200a118:	1885c83a 	sub	r2,r3,r2
 200a11c:	a0800215 	stw	r2,8(r20)
 200a120:	103ff01e 	bne	r2,zero,200a0e4 <__sfvwrite_r+0x84>
 200a124:	0005883a 	mov	r2,zero
 200a128:	dfc00a17 	ldw	ra,40(sp)
 200a12c:	df000917 	ldw	fp,36(sp)
 200a130:	ddc00817 	ldw	r23,32(sp)
 200a134:	dd800717 	ldw	r22,28(sp)
 200a138:	dd400617 	ldw	r21,24(sp)
 200a13c:	dd000517 	ldw	r20,20(sp)
 200a140:	dcc00417 	ldw	r19,16(sp)
 200a144:	dc800317 	ldw	r18,12(sp)
 200a148:	dc400217 	ldw	r17,8(sp)
 200a14c:	dc000117 	ldw	r16,4(sp)
 200a150:	dec00b04 	addi	sp,sp,44
 200a154:	f800283a 	ret
 200a158:	a809883a 	mov	r4,r21
 200a15c:	800b883a 	mov	r5,r16
 200a160:	2007dcc0 	call	2007dcc <__swsetup_r>
 200a164:	1000f01e 	bne	r2,zero,200a528 <__sfvwrite_r+0x4c8>
 200a168:	8080030b 	ldhu	r2,12(r16)
 200a16c:	a4400017 	ldw	r17,0(r20)
 200a170:	10c0008c 	andi	r3,r2,2
 200a174:	18ffffcc 	andi	r3,r3,65535
 200a178:	18e0001c 	xori	r3,r3,32768
 200a17c:	18e00004 	addi	r3,r3,-32768
 200a180:	183fd51e 	bne	r3,zero,200a0d8 <__sfvwrite_r+0x78>
 200a184:	10c0004c 	andi	r3,r2,1
 200a188:	002d883a 	mov	r22,zero
 200a18c:	1800381e 	bne	r3,zero,200a270 <__sfvwrite_r+0x210>
 200a190:	0025883a 	mov	r18,zero
 200a194:	90002126 	beq	r18,zero,200a21c <__sfvwrite_r+0x1bc>
 200a198:	10c0800c 	andi	r3,r2,512
 200a19c:	18ffffcc 	andi	r3,r3,65535
 200a1a0:	18e0001c 	xori	r3,r3,32768
 200a1a4:	18e00004 	addi	r3,r3,-32768
 200a1a8:	84c00217 	ldw	r19,8(r16)
 200a1ac:	18006b26 	beq	r3,zero,200a35c <__sfvwrite_r+0x2fc>
 200a1b0:	980f883a 	mov	r7,r19
 200a1b4:	94c08636 	bltu	r18,r19,200a3d0 <__sfvwrite_r+0x370>
 200a1b8:	10c1200c 	andi	r3,r2,1152
 200a1bc:	18009f1e 	bne	r3,zero,200a43c <__sfvwrite_r+0x3dc>
 200a1c0:	81000017 	ldw	r4,0(r16)
 200a1c4:	982f883a 	mov	r23,r19
 200a1c8:	9039883a 	mov	fp,r18
 200a1cc:	9027883a 	mov	r19,r18
 200a1d0:	380d883a 	mov	r6,r7
 200a1d4:	b00b883a 	mov	r5,r22
 200a1d8:	d9c00015 	stw	r7,0(sp)
 200a1dc:	200b29c0 	call	200b29c <memmove>
 200a1e0:	d9c00017 	ldw	r7,0(sp)
 200a1e4:	81000217 	ldw	r4,8(r16)
 200a1e8:	80800017 	ldw	r2,0(r16)
 200a1ec:	25efc83a 	sub	r23,r4,r23
 200a1f0:	11cf883a 	add	r7,r2,r7
 200a1f4:	85c00215 	stw	r23,8(r16)
 200a1f8:	81c00015 	stw	r7,0(r16)
 200a1fc:	a0800217 	ldw	r2,8(r20)
 200a200:	b72d883a 	add	r22,r22,fp
 200a204:	9725c83a 	sub	r18,r18,fp
 200a208:	14e7c83a 	sub	r19,r2,r19
 200a20c:	a4c00215 	stw	r19,8(r20)
 200a210:	983fc426 	beq	r19,zero,200a124 <__sfvwrite_r+0xc4>
 200a214:	8080030b 	ldhu	r2,12(r16)
 200a218:	903fdf1e 	bne	r18,zero,200a198 <__sfvwrite_r+0x138>
 200a21c:	8d800017 	ldw	r22,0(r17)
 200a220:	8c800117 	ldw	r18,4(r17)
 200a224:	8c400204 	addi	r17,r17,8
 200a228:	003fda06 	br	200a194 <__sfvwrite_r+0x134>
 200a22c:	8cc00017 	ldw	r19,0(r17)
 200a230:	8c800117 	ldw	r18,4(r17)
 200a234:	8c400204 	addi	r17,r17,8
 200a238:	003faa06 	br	200a0e4 <__sfvwrite_r+0x84>
 200a23c:	200c4480 	call	200c448 <_realloc_r>
 200a240:	102f883a 	mov	r23,r2
 200a244:	10009f1e 	bne	r2,zero,200a4c4 <__sfvwrite_r+0x464>
 200a248:	81400417 	ldw	r5,16(r16)
 200a24c:	a809883a 	mov	r4,r21
 200a250:	2009d900 	call	2009d90 <_free_r>
 200a254:	00800304 	movi	r2,12
 200a258:	a8800015 	stw	r2,0(r21)
 200a25c:	80c0030b 	ldhu	r3,12(r16)
 200a260:	00bfffc4 	movi	r2,-1
 200a264:	18c01014 	ori	r3,r3,64
 200a268:	80c0030d 	sth	r3,12(r16)
 200a26c:	003fae06 	br	200a128 <__sfvwrite_r+0xc8>
 200a270:	0007883a 	mov	r3,zero
 200a274:	0039883a 	mov	fp,zero
 200a278:	0025883a 	mov	r18,zero
 200a27c:	90001e26 	beq	r18,zero,200a2f8 <__sfvwrite_r+0x298>
 200a280:	18006526 	beq	r3,zero,200a418 <__sfvwrite_r+0x3b8>
 200a284:	b02f883a 	mov	r23,r22
 200a288:	9580012e 	bgeu	r18,r22,200a290 <__sfvwrite_r+0x230>
 200a28c:	902f883a 	mov	r23,r18
 200a290:	81000017 	ldw	r4,0(r16)
 200a294:	80800417 	ldw	r2,16(r16)
 200a298:	84c00217 	ldw	r19,8(r16)
 200a29c:	81c00517 	ldw	r7,20(r16)
 200a2a0:	1100022e 	bgeu	r2,r4,200a2ac <__sfvwrite_r+0x24c>
 200a2a4:	99e7883a 	add	r19,r19,r7
 200a2a8:	9dc01816 	blt	r19,r23,200a30c <__sfvwrite_r+0x2ac>
 200a2ac:	b9c03b16 	blt	r23,r7,200a39c <__sfvwrite_r+0x33c>
 200a2b0:	80800917 	ldw	r2,36(r16)
 200a2b4:	81400717 	ldw	r5,28(r16)
 200a2b8:	a809883a 	mov	r4,r21
 200a2bc:	d8c00015 	stw	r3,0(sp)
 200a2c0:	e00d883a 	mov	r6,fp
 200a2c4:	103ee83a 	callr	r2
 200a2c8:	1027883a 	mov	r19,r2
 200a2cc:	d8c00017 	ldw	r3,0(sp)
 200a2d0:	00bfe20e 	bge	zero,r2,200a25c <__sfvwrite_r+0x1fc>
 200a2d4:	b4edc83a 	sub	r22,r22,r19
 200a2d8:	b0001a26 	beq	r22,zero,200a344 <__sfvwrite_r+0x2e4>
 200a2dc:	a0800217 	ldw	r2,8(r20)
 200a2e0:	e4f9883a 	add	fp,fp,r19
 200a2e4:	94e5c83a 	sub	r18,r18,r19
 200a2e8:	14e7c83a 	sub	r19,r2,r19
 200a2ec:	a4c00215 	stw	r19,8(r20)
 200a2f0:	983f8c26 	beq	r19,zero,200a124 <__sfvwrite_r+0xc4>
 200a2f4:	903fe21e 	bne	r18,zero,200a280 <__sfvwrite_r+0x220>
 200a2f8:	8f000017 	ldw	fp,0(r17)
 200a2fc:	8c800117 	ldw	r18,4(r17)
 200a300:	0007883a 	mov	r3,zero
 200a304:	8c400204 	addi	r17,r17,8
 200a308:	003fdc06 	br	200a27c <__sfvwrite_r+0x21c>
 200a30c:	e00b883a 	mov	r5,fp
 200a310:	980d883a 	mov	r6,r19
 200a314:	d8c00015 	stw	r3,0(sp)
 200a318:	200b29c0 	call	200b29c <memmove>
 200a31c:	80800017 	ldw	r2,0(r16)
 200a320:	a809883a 	mov	r4,r21
 200a324:	800b883a 	mov	r5,r16
 200a328:	14c5883a 	add	r2,r2,r19
 200a32c:	80800015 	stw	r2,0(r16)
 200a330:	20097640 	call	2009764 <_fflush_r>
 200a334:	d8c00017 	ldw	r3,0(sp)
 200a338:	103fc81e 	bne	r2,zero,200a25c <__sfvwrite_r+0x1fc>
 200a33c:	b4edc83a 	sub	r22,r22,r19
 200a340:	b03fe61e 	bne	r22,zero,200a2dc <__sfvwrite_r+0x27c>
 200a344:	a809883a 	mov	r4,r21
 200a348:	800b883a 	mov	r5,r16
 200a34c:	20097640 	call	2009764 <_fflush_r>
 200a350:	103fc21e 	bne	r2,zero,200a25c <__sfvwrite_r+0x1fc>
 200a354:	0007883a 	mov	r3,zero
 200a358:	003fe006 	br	200a2dc <__sfvwrite_r+0x27c>
 200a35c:	81000017 	ldw	r4,0(r16)
 200a360:	80800417 	ldw	r2,16(r16)
 200a364:	1100022e 	bgeu	r2,r4,200a370 <__sfvwrite_r+0x310>
 200a368:	9839883a 	mov	fp,r19
 200a36c:	9c806036 	bltu	r19,r18,200a4f0 <__sfvwrite_r+0x490>
 200a370:	81c00517 	ldw	r7,20(r16)
 200a374:	91c01c36 	bltu	r18,r7,200a3e8 <__sfvwrite_r+0x388>
 200a378:	80800917 	ldw	r2,36(r16)
 200a37c:	81400717 	ldw	r5,28(r16)
 200a380:	a809883a 	mov	r4,r21
 200a384:	b00d883a 	mov	r6,r22
 200a388:	103ee83a 	callr	r2
 200a38c:	1027883a 	mov	r19,r2
 200a390:	00bfb20e 	bge	zero,r2,200a25c <__sfvwrite_r+0x1fc>
 200a394:	1039883a 	mov	fp,r2
 200a398:	003f9806 	br	200a1fc <__sfvwrite_r+0x19c>
 200a39c:	b80d883a 	mov	r6,r23
 200a3a0:	e00b883a 	mov	r5,fp
 200a3a4:	d8c00015 	stw	r3,0(sp)
 200a3a8:	200b29c0 	call	200b29c <memmove>
 200a3ac:	80800217 	ldw	r2,8(r16)
 200a3b0:	81000017 	ldw	r4,0(r16)
 200a3b4:	b827883a 	mov	r19,r23
 200a3b8:	15c5c83a 	sub	r2,r2,r23
 200a3bc:	25ef883a 	add	r23,r4,r23
 200a3c0:	80800215 	stw	r2,8(r16)
 200a3c4:	85c00015 	stw	r23,0(r16)
 200a3c8:	d8c00017 	ldw	r3,0(sp)
 200a3cc:	003fc106 	br	200a2d4 <__sfvwrite_r+0x274>
 200a3d0:	81000017 	ldw	r4,0(r16)
 200a3d4:	902f883a 	mov	r23,r18
 200a3d8:	9039883a 	mov	fp,r18
 200a3dc:	9027883a 	mov	r19,r18
 200a3e0:	900f883a 	mov	r7,r18
 200a3e4:	003f7a06 	br	200a1d0 <__sfvwrite_r+0x170>
 200a3e8:	b00b883a 	mov	r5,r22
 200a3ec:	900d883a 	mov	r6,r18
 200a3f0:	200b29c0 	call	200b29c <memmove>
 200a3f4:	80c00217 	ldw	r3,8(r16)
 200a3f8:	80800017 	ldw	r2,0(r16)
 200a3fc:	9027883a 	mov	r19,r18
 200a400:	1c87c83a 	sub	r3,r3,r18
 200a404:	1485883a 	add	r2,r2,r18
 200a408:	80c00215 	stw	r3,8(r16)
 200a40c:	80800015 	stw	r2,0(r16)
 200a410:	9039883a 	mov	fp,r18
 200a414:	003f7906 	br	200a1fc <__sfvwrite_r+0x19c>
 200a418:	e009883a 	mov	r4,fp
 200a41c:	01400284 	movi	r5,10
 200a420:	900d883a 	mov	r6,r18
 200a424:	200b0ac0 	call	200b0ac <memchr>
 200a428:	10003c26 	beq	r2,zero,200a51c <__sfvwrite_r+0x4bc>
 200a42c:	15800044 	addi	r22,r2,1
 200a430:	b72dc83a 	sub	r22,r22,fp
 200a434:	00c00044 	movi	r3,1
 200a438:	003f9206 	br	200a284 <__sfvwrite_r+0x224>
 200a43c:	81000517 	ldw	r4,20(r16)
 200a440:	81400417 	ldw	r5,16(r16)
 200a444:	80c00017 	ldw	r3,0(r16)
 200a448:	210d883a 	add	r6,r4,r4
 200a44c:	3109883a 	add	r4,r6,r4
 200a450:	2026d7fa 	srli	r19,r4,31
 200a454:	1979c83a 	sub	fp,r3,r5
 200a458:	e1800044 	addi	r6,fp,1
 200a45c:	9909883a 	add	r4,r19,r4
 200a460:	2027d07a 	srai	r19,r4,1
 200a464:	3489883a 	add	r4,r6,r18
 200a468:	980d883a 	mov	r6,r19
 200a46c:	9900022e 	bgeu	r19,r4,200a478 <__sfvwrite_r+0x418>
 200a470:	2027883a 	mov	r19,r4
 200a474:	200d883a 	mov	r6,r4
 200a478:	1081000c 	andi	r2,r2,1024
 200a47c:	10bfffcc 	andi	r2,r2,65535
 200a480:	10a0001c 	xori	r2,r2,32768
 200a484:	10a00004 	addi	r2,r2,-32768
 200a488:	a809883a 	mov	r4,r21
 200a48c:	103f6b26 	beq	r2,zero,200a23c <__sfvwrite_r+0x1dc>
 200a490:	300b883a 	mov	r5,r6
 200a494:	200a9280 	call	200a928 <_malloc_r>
 200a498:	102f883a 	mov	r23,r2
 200a49c:	103f6d26 	beq	r2,zero,200a254 <__sfvwrite_r+0x1f4>
 200a4a0:	81400417 	ldw	r5,16(r16)
 200a4a4:	1009883a 	mov	r4,r2
 200a4a8:	e00d883a 	mov	r6,fp
 200a4ac:	200b1a40 	call	200b1a4 <memcpy>
 200a4b0:	8080030b 	ldhu	r2,12(r16)
 200a4b4:	00fedfc4 	movi	r3,-1153
 200a4b8:	10c4703a 	and	r2,r2,r3
 200a4bc:	10802014 	ori	r2,r2,128
 200a4c0:	8080030d 	sth	r2,12(r16)
 200a4c4:	bf09883a 	add	r4,r23,fp
 200a4c8:	9f07c83a 	sub	r3,r19,fp
 200a4cc:	85c00415 	stw	r23,16(r16)
 200a4d0:	84c00515 	stw	r19,20(r16)
 200a4d4:	81000015 	stw	r4,0(r16)
 200a4d8:	902f883a 	mov	r23,r18
 200a4dc:	80c00215 	stw	r3,8(r16)
 200a4e0:	9039883a 	mov	fp,r18
 200a4e4:	9027883a 	mov	r19,r18
 200a4e8:	900f883a 	mov	r7,r18
 200a4ec:	003f3806 	br	200a1d0 <__sfvwrite_r+0x170>
 200a4f0:	b00b883a 	mov	r5,r22
 200a4f4:	980d883a 	mov	r6,r19
 200a4f8:	200b29c0 	call	200b29c <memmove>
 200a4fc:	80800017 	ldw	r2,0(r16)
 200a500:	a809883a 	mov	r4,r21
 200a504:	800b883a 	mov	r5,r16
 200a508:	14c5883a 	add	r2,r2,r19
 200a50c:	80800015 	stw	r2,0(r16)
 200a510:	20097640 	call	2009764 <_fflush_r>
 200a514:	103f3926 	beq	r2,zero,200a1fc <__sfvwrite_r+0x19c>
 200a518:	003f5006 	br	200a25c <__sfvwrite_r+0x1fc>
 200a51c:	95800044 	addi	r22,r18,1
 200a520:	00c00044 	movi	r3,1
 200a524:	003f5706 	br	200a284 <__sfvwrite_r+0x224>
 200a528:	80c0030b 	ldhu	r3,12(r16)
 200a52c:	00bfffc4 	movi	r2,-1
 200a530:	18c01014 	ori	r3,r3,64
 200a534:	80c0030d 	sth	r3,12(r16)
 200a538:	00c00244 	movi	r3,9
 200a53c:	a8c00015 	stw	r3,0(r21)
 200a540:	003ef906 	br	200a128 <__sfvwrite_r+0xc8>

0200a544 <_fwalk>:
 200a544:	defff904 	addi	sp,sp,-28
 200a548:	dcc00315 	stw	r19,12(sp)
 200a54c:	24c0b804 	addi	r19,r4,736
 200a550:	dd400515 	stw	r21,20(sp)
 200a554:	dd000415 	stw	r20,16(sp)
 200a558:	dfc00615 	stw	ra,24(sp)
 200a55c:	dc800215 	stw	r18,8(sp)
 200a560:	dc400115 	stw	r17,4(sp)
 200a564:	dc000015 	stw	r16,0(sp)
 200a568:	282b883a 	mov	r21,r5
 200a56c:	0029883a 	mov	r20,zero
 200a570:	2009c140 	call	2009c14 <__sfp_lock_acquire>
 200a574:	98001226 	beq	r19,zero,200a5c0 <_fwalk+0x7c>
 200a578:	04bfffc4 	movi	r18,-1
 200a57c:	9c400117 	ldw	r17,4(r19)
 200a580:	9c000217 	ldw	r16,8(r19)
 200a584:	8c7fffc4 	addi	r17,r17,-1
 200a588:	88000b16 	blt	r17,zero,200a5b8 <_fwalk+0x74>
 200a58c:	84000304 	addi	r16,r16,12
 200a590:	80c0000f 	ldh	r3,0(r16)
 200a594:	8c7fffc4 	addi	r17,r17,-1
 200a598:	813ffd04 	addi	r4,r16,-12
 200a59c:	18000426 	beq	r3,zero,200a5b0 <_fwalk+0x6c>
 200a5a0:	80c0008f 	ldh	r3,2(r16)
 200a5a4:	1c800226 	beq	r3,r18,200a5b0 <_fwalk+0x6c>
 200a5a8:	a83ee83a 	callr	r21
 200a5ac:	a0a8b03a 	or	r20,r20,r2
 200a5b0:	84001704 	addi	r16,r16,92
 200a5b4:	8cbff61e 	bne	r17,r18,200a590 <_fwalk+0x4c>
 200a5b8:	9cc00017 	ldw	r19,0(r19)
 200a5bc:	983fef1e 	bne	r19,zero,200a57c <_fwalk+0x38>
 200a5c0:	2009c180 	call	2009c18 <__sfp_lock_release>
 200a5c4:	a005883a 	mov	r2,r20
 200a5c8:	dfc00617 	ldw	ra,24(sp)
 200a5cc:	dd400517 	ldw	r21,20(sp)
 200a5d0:	dd000417 	ldw	r20,16(sp)
 200a5d4:	dcc00317 	ldw	r19,12(sp)
 200a5d8:	dc800217 	ldw	r18,8(sp)
 200a5dc:	dc400117 	ldw	r17,4(sp)
 200a5e0:	dc000017 	ldw	r16,0(sp)
 200a5e4:	dec00704 	addi	sp,sp,28
 200a5e8:	f800283a 	ret

0200a5ec <_fwalk_reent>:
 200a5ec:	defff804 	addi	sp,sp,-32
 200a5f0:	dcc00315 	stw	r19,12(sp)
 200a5f4:	24c0b804 	addi	r19,r4,736
 200a5f8:	dd800615 	stw	r22,24(sp)
 200a5fc:	dd400515 	stw	r21,20(sp)
 200a600:	dd000415 	stw	r20,16(sp)
 200a604:	dfc00715 	stw	ra,28(sp)
 200a608:	dc800215 	stw	r18,8(sp)
 200a60c:	dc400115 	stw	r17,4(sp)
 200a610:	dc000015 	stw	r16,0(sp)
 200a614:	2029883a 	mov	r20,r4
 200a618:	282b883a 	mov	r21,r5
 200a61c:	002d883a 	mov	r22,zero
 200a620:	2009c140 	call	2009c14 <__sfp_lock_acquire>
 200a624:	98001326 	beq	r19,zero,200a674 <_fwalk_reent+0x88>
 200a628:	04bfffc4 	movi	r18,-1
 200a62c:	9c400117 	ldw	r17,4(r19)
 200a630:	9c000217 	ldw	r16,8(r19)
 200a634:	8c7fffc4 	addi	r17,r17,-1
 200a638:	88000c16 	blt	r17,zero,200a66c <_fwalk_reent+0x80>
 200a63c:	84000304 	addi	r16,r16,12
 200a640:	80c0000f 	ldh	r3,0(r16)
 200a644:	8c7fffc4 	addi	r17,r17,-1
 200a648:	817ffd04 	addi	r5,r16,-12
 200a64c:	18000526 	beq	r3,zero,200a664 <_fwalk_reent+0x78>
 200a650:	80c0008f 	ldh	r3,2(r16)
 200a654:	a009883a 	mov	r4,r20
 200a658:	1c800226 	beq	r3,r18,200a664 <_fwalk_reent+0x78>
 200a65c:	a83ee83a 	callr	r21
 200a660:	b0acb03a 	or	r22,r22,r2
 200a664:	84001704 	addi	r16,r16,92
 200a668:	8cbff51e 	bne	r17,r18,200a640 <_fwalk_reent+0x54>
 200a66c:	9cc00017 	ldw	r19,0(r19)
 200a670:	983fee1e 	bne	r19,zero,200a62c <_fwalk_reent+0x40>
 200a674:	2009c180 	call	2009c18 <__sfp_lock_release>
 200a678:	b005883a 	mov	r2,r22
 200a67c:	dfc00717 	ldw	ra,28(sp)
 200a680:	dd800617 	ldw	r22,24(sp)
 200a684:	dd400517 	ldw	r21,20(sp)
 200a688:	dd000417 	ldw	r20,16(sp)
 200a68c:	dcc00317 	ldw	r19,12(sp)
 200a690:	dc800217 	ldw	r18,8(sp)
 200a694:	dc400117 	ldw	r17,4(sp)
 200a698:	dc000017 	ldw	r16,0(sp)
 200a69c:	dec00804 	addi	sp,sp,32
 200a6a0:	f800283a 	ret

0200a6a4 <_setlocale_r>:
 200a6a4:	defffc04 	addi	sp,sp,-16
 200a6a8:	dc800215 	stw	r18,8(sp)
 200a6ac:	dc400115 	stw	r17,4(sp)
 200a6b0:	dc000015 	stw	r16,0(sp)
 200a6b4:	dfc00315 	stw	ra,12(sp)
 200a6b8:	3021883a 	mov	r16,r6
 200a6bc:	2023883a 	mov	r17,r4
 200a6c0:	2825883a 	mov	r18,r5
 200a6c4:	30001626 	beq	r6,zero,200a720 <_setlocale_r+0x7c>
 200a6c8:	3009883a 	mov	r4,r6
 200a6cc:	01408074 	movhi	r5,513
 200a6d0:	29475304 	addi	r5,r5,7500
 200a6d4:	200cc4c0 	call	200cc4c <strcmp>
 200a6d8:	10000a1e 	bne	r2,zero,200a704 <_setlocale_r+0x60>
 200a6dc:	8c800c15 	stw	r18,48(r17)
 200a6e0:	8c000d15 	stw	r16,52(r17)
 200a6e4:	00808074 	movhi	r2,513
 200a6e8:	10875304 	addi	r2,r2,7500
 200a6ec:	dfc00317 	ldw	ra,12(sp)
 200a6f0:	dc800217 	ldw	r18,8(sp)
 200a6f4:	dc400117 	ldw	r17,4(sp)
 200a6f8:	dc000017 	ldw	r16,0(sp)
 200a6fc:	dec00404 	addi	sp,sp,16
 200a700:	f800283a 	ret
 200a704:	8009883a 	mov	r4,r16
 200a708:	01408074 	movhi	r5,513
 200a70c:	29473e04 	addi	r5,r5,7416
 200a710:	200cc4c0 	call	200cc4c <strcmp>
 200a714:	103ff126 	beq	r2,zero,200a6dc <_setlocale_r+0x38>
 200a718:	0005883a 	mov	r2,zero
 200a71c:	003ff306 	br	200a6ec <_setlocale_r+0x48>
 200a720:	00808074 	movhi	r2,513
 200a724:	10875304 	addi	r2,r2,7500
 200a728:	dfc00317 	ldw	ra,12(sp)
 200a72c:	dc800217 	ldw	r18,8(sp)
 200a730:	dc400117 	ldw	r17,4(sp)
 200a734:	dc000017 	ldw	r16,0(sp)
 200a738:	dec00404 	addi	sp,sp,16
 200a73c:	f800283a 	ret

0200a740 <__locale_charset>:
 200a740:	00808074 	movhi	r2,513
 200a744:	10875404 	addi	r2,r2,7504
 200a748:	f800283a 	ret

0200a74c <_localeconv_r>:
 200a74c:	00808074 	movhi	r2,513
 200a750:	10875804 	addi	r2,r2,7520
 200a754:	f800283a 	ret

0200a758 <setlocale>:
 200a758:	00c08074 	movhi	r3,513
 200a75c:	18ce7804 	addi	r3,r3,14816
 200a760:	2005883a 	mov	r2,r4
 200a764:	19000017 	ldw	r4,0(r3)
 200a768:	280d883a 	mov	r6,r5
 200a76c:	100b883a 	mov	r5,r2
 200a770:	200a6a41 	jmpi	200a6a4 <_setlocale_r>

0200a774 <localeconv>:
 200a774:	00808074 	movhi	r2,513
 200a778:	10875804 	addi	r2,r2,7520
 200a77c:	f800283a 	ret

0200a780 <__smakebuf_r>:
 200a780:	2880030b 	ldhu	r2,12(r5)
 200a784:	deffed04 	addi	sp,sp,-76
 200a788:	dc401015 	stw	r17,64(sp)
 200a78c:	10c0008c 	andi	r3,r2,2
 200a790:	18ffffcc 	andi	r3,r3,65535
 200a794:	18e0001c 	xori	r3,r3,32768
 200a798:	dc000f15 	stw	r16,60(sp)
 200a79c:	dfc01215 	stw	ra,72(sp)
 200a7a0:	dc801115 	stw	r18,68(sp)
 200a7a4:	18e00004 	addi	r3,r3,-32768
 200a7a8:	2821883a 	mov	r16,r5
 200a7ac:	2023883a 	mov	r17,r4
 200a7b0:	1800381e 	bne	r3,zero,200a894 <__smakebuf_r+0x114>
 200a7b4:	2940038f 	ldh	r5,14(r5)
 200a7b8:	28002d16 	blt	r5,zero,200a870 <__smakebuf_r+0xf0>
 200a7bc:	d80d883a 	mov	r6,sp
 200a7c0:	200d0580 	call	200d058 <_fstat_r>
 200a7c4:	10002916 	blt	r2,zero,200a86c <__smakebuf_r+0xec>
 200a7c8:	d8800117 	ldw	r2,4(sp)
 200a7cc:	00e00014 	movui	r3,32768
 200a7d0:	10bc000c 	andi	r2,r2,61440
 200a7d4:	10c03c26 	beq	r2,r3,200a8c8 <__smakebuf_r+0x148>
 200a7d8:	80c0030b 	ldhu	r3,12(r16)
 200a7dc:	18c20014 	ori	r3,r3,2048
 200a7e0:	80c0030d 	sth	r3,12(r16)
 200a7e4:	00c80004 	movi	r3,8192
 200a7e8:	10c00c1e 	bne	r2,r3,200a81c <__smakebuf_r+0x9c>
 200a7ec:	8140038f 	ldh	r5,14(r16)
 200a7f0:	8809883a 	mov	r4,r17
 200a7f4:	200d0c00 	call	200d0c0 <_isatty_r>
 200a7f8:	10000826 	beq	r2,zero,200a81c <__smakebuf_r+0x9c>
 200a7fc:	80c0030b 	ldhu	r3,12(r16)
 200a800:	808010c4 	addi	r2,r16,67
 200a804:	80800015 	stw	r2,0(r16)
 200a808:	18c00054 	ori	r3,r3,1
 200a80c:	80800415 	stw	r2,16(r16)
 200a810:	00800044 	movi	r2,1
 200a814:	80c0030d 	sth	r3,12(r16)
 200a818:	80800515 	stw	r2,20(r16)
 200a81c:	04810004 	movi	r18,1024
 200a820:	8809883a 	mov	r4,r17
 200a824:	900b883a 	mov	r5,r18
 200a828:	200a9280 	call	200a928 <_malloc_r>
 200a82c:	10003026 	beq	r2,zero,200a8f0 <__smakebuf_r+0x170>
 200a830:	80c0030b 	ldhu	r3,12(r16)
 200a834:	01008074 	movhi	r4,513
 200a838:	21266304 	addi	r4,r4,-26228
 200a83c:	89000f15 	stw	r4,60(r17)
 200a840:	18c02014 	ori	r3,r3,128
 200a844:	80c0030d 	sth	r3,12(r16)
 200a848:	80800015 	stw	r2,0(r16)
 200a84c:	80800415 	stw	r2,16(r16)
 200a850:	84800515 	stw	r18,20(r16)
 200a854:	dfc01217 	ldw	ra,72(sp)
 200a858:	dc801117 	ldw	r18,68(sp)
 200a85c:	dc401017 	ldw	r17,64(sp)
 200a860:	dc000f17 	ldw	r16,60(sp)
 200a864:	dec01304 	addi	sp,sp,76
 200a868:	f800283a 	ret
 200a86c:	8080030b 	ldhu	r2,12(r16)
 200a870:	10c0200c 	andi	r3,r2,128
 200a874:	18ffffcc 	andi	r3,r3,65535
 200a878:	18e0001c 	xori	r3,r3,32768
 200a87c:	18e00004 	addi	r3,r3,-32768
 200a880:	18000f1e 	bne	r3,zero,200a8c0 <__smakebuf_r+0x140>
 200a884:	04810004 	movi	r18,1024
 200a888:	10820014 	ori	r2,r2,2048
 200a88c:	8080030d 	sth	r2,12(r16)
 200a890:	003fe306 	br	200a820 <__smakebuf_r+0xa0>
 200a894:	288010c4 	addi	r2,r5,67
 200a898:	28800015 	stw	r2,0(r5)
 200a89c:	28800415 	stw	r2,16(r5)
 200a8a0:	00800044 	movi	r2,1
 200a8a4:	28800515 	stw	r2,20(r5)
 200a8a8:	dfc01217 	ldw	ra,72(sp)
 200a8ac:	dc801117 	ldw	r18,68(sp)
 200a8b0:	dc401017 	ldw	r17,64(sp)
 200a8b4:	dc000f17 	ldw	r16,60(sp)
 200a8b8:	dec01304 	addi	sp,sp,76
 200a8bc:	f800283a 	ret
 200a8c0:	04801004 	movi	r18,64
 200a8c4:	003ff006 	br	200a888 <__smakebuf_r+0x108>
 200a8c8:	81000a17 	ldw	r4,40(r16)
 200a8cc:	00c08074 	movhi	r3,513
 200a8d0:	18f2fa04 	addi	r3,r3,-13336
 200a8d4:	20ffc01e 	bne	r4,r3,200a7d8 <__smakebuf_r+0x58>
 200a8d8:	8080030b 	ldhu	r2,12(r16)
 200a8dc:	00c10004 	movi	r3,1024
 200a8e0:	80c01315 	stw	r3,76(r16)
 200a8e4:	10c4b03a 	or	r2,r2,r3
 200a8e8:	8080030d 	sth	r2,12(r16)
 200a8ec:	003fcb06 	br	200a81c <__smakebuf_r+0x9c>
 200a8f0:	8080030b 	ldhu	r2,12(r16)
 200a8f4:	10c0800c 	andi	r3,r2,512
 200a8f8:	18ffffcc 	andi	r3,r3,65535
 200a8fc:	18e0001c 	xori	r3,r3,32768
 200a900:	18e00004 	addi	r3,r3,-32768
 200a904:	183fd31e 	bne	r3,zero,200a854 <__smakebuf_r+0xd4>
 200a908:	10800094 	ori	r2,r2,2
 200a90c:	80c010c4 	addi	r3,r16,67
 200a910:	8080030d 	sth	r2,12(r16)
 200a914:	00800044 	movi	r2,1
 200a918:	80c00015 	stw	r3,0(r16)
 200a91c:	80c00415 	stw	r3,16(r16)
 200a920:	80800515 	stw	r2,20(r16)
 200a924:	003fcb06 	br	200a854 <__smakebuf_r+0xd4>

0200a928 <_malloc_r>:
 200a928:	defff604 	addi	sp,sp,-40
 200a92c:	dc800215 	stw	r18,8(sp)
 200a930:	dfc00915 	stw	ra,36(sp)
 200a934:	df000815 	stw	fp,32(sp)
 200a938:	ddc00715 	stw	r23,28(sp)
 200a93c:	dd800615 	stw	r22,24(sp)
 200a940:	dd400515 	stw	r21,20(sp)
 200a944:	dd000415 	stw	r20,16(sp)
 200a948:	dcc00315 	stw	r19,12(sp)
 200a94c:	dc400115 	stw	r17,4(sp)
 200a950:	dc000015 	stw	r16,0(sp)
 200a954:	288002c4 	addi	r2,r5,11
 200a958:	00c00584 	movi	r3,22
 200a95c:	2025883a 	mov	r18,r4
 200a960:	18802b2e 	bgeu	r3,r2,200aa10 <_malloc_r+0xe8>
 200a964:	047ffe04 	movi	r17,-8
 200a968:	1462703a 	and	r17,r2,r17
 200a96c:	88002a16 	blt	r17,zero,200aa18 <_malloc_r+0xf0>
 200a970:	89402936 	bltu	r17,r5,200aa18 <_malloc_r+0xf0>
 200a974:	9009883a 	mov	r4,r18
 200a978:	200e7900 	call	200e790 <__malloc_lock>
 200a97c:	00807dc4 	movi	r2,503
 200a980:	14402936 	bltu	r2,r17,200aa28 <_malloc_r+0x100>
 200a984:	8808d0fa 	srli	r4,r17,3
 200a988:	04c08074 	movhi	r19,513
 200a98c:	9cc8bf04 	addi	r19,r19,8956
 200a990:	2105883a 	add	r2,r4,r4
 200a994:	1085883a 	add	r2,r2,r2
 200a998:	1085883a 	add	r2,r2,r2
 200a99c:	9885883a 	add	r2,r19,r2
 200a9a0:	14000317 	ldw	r16,12(r2)
 200a9a4:	80815526 	beq	r16,r2,200aefc <_malloc_r+0x5d4>
 200a9a8:	81000117 	ldw	r4,4(r16)
 200a9ac:	00bfff04 	movi	r2,-4
 200a9b0:	80c00317 	ldw	r3,12(r16)
 200a9b4:	2084703a 	and	r2,r4,r2
 200a9b8:	8085883a 	add	r2,r16,r2
 200a9bc:	11800117 	ldw	r6,4(r2)
 200a9c0:	81400217 	ldw	r5,8(r16)
 200a9c4:	9009883a 	mov	r4,r18
 200a9c8:	31800054 	ori	r6,r6,1
 200a9cc:	11800115 	stw	r6,4(r2)
 200a9d0:	28c00315 	stw	r3,12(r5)
 200a9d4:	19400215 	stw	r5,8(r3)
 200a9d8:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200a9dc:	80800204 	addi	r2,r16,8
 200a9e0:	dfc00917 	ldw	ra,36(sp)
 200a9e4:	df000817 	ldw	fp,32(sp)
 200a9e8:	ddc00717 	ldw	r23,28(sp)
 200a9ec:	dd800617 	ldw	r22,24(sp)
 200a9f0:	dd400517 	ldw	r21,20(sp)
 200a9f4:	dd000417 	ldw	r20,16(sp)
 200a9f8:	dcc00317 	ldw	r19,12(sp)
 200a9fc:	dc800217 	ldw	r18,8(sp)
 200aa00:	dc400117 	ldw	r17,4(sp)
 200aa04:	dc000017 	ldw	r16,0(sp)
 200aa08:	dec00a04 	addi	sp,sp,40
 200aa0c:	f800283a 	ret
 200aa10:	04400404 	movi	r17,16
 200aa14:	897fd72e 	bgeu	r17,r5,200a974 <_malloc_r+0x4c>
 200aa18:	00800304 	movi	r2,12
 200aa1c:	90800015 	stw	r2,0(r18)
 200aa20:	0005883a 	mov	r2,zero
 200aa24:	003fee06 	br	200a9e0 <_malloc_r+0xb8>
 200aa28:	8808d27a 	srli	r4,r17,9
 200aa2c:	20007126 	beq	r4,zero,200abf4 <_malloc_r+0x2cc>
 200aa30:	00800104 	movi	r2,4
 200aa34:	1100eb36 	bltu	r2,r4,200ade4 <_malloc_r+0x4bc>
 200aa38:	8808d1ba 	srli	r4,r17,6
 200aa3c:	21000e04 	addi	r4,r4,56
 200aa40:	210b883a 	add	r5,r4,r4
 200aa44:	294b883a 	add	r5,r5,r5
 200aa48:	294b883a 	add	r5,r5,r5
 200aa4c:	04c08074 	movhi	r19,513
 200aa50:	9cc8bf04 	addi	r19,r19,8956
 200aa54:	994b883a 	add	r5,r19,r5
 200aa58:	2c000317 	ldw	r16,12(r5)
 200aa5c:	2c000e26 	beq	r5,r16,200aa98 <_malloc_r+0x170>
 200aa60:	80c00117 	ldw	r3,4(r16)
 200aa64:	01ffff04 	movi	r7,-4
 200aa68:	018003c4 	movi	r6,15
 200aa6c:	19c6703a 	and	r3,r3,r7
 200aa70:	1c45c83a 	sub	r2,r3,r17
 200aa74:	30800716 	blt	r6,r2,200aa94 <_malloc_r+0x16c>
 200aa78:	1000610e 	bge	r2,zero,200ac00 <_malloc_r+0x2d8>
 200aa7c:	84000317 	ldw	r16,12(r16)
 200aa80:	2c000526 	beq	r5,r16,200aa98 <_malloc_r+0x170>
 200aa84:	80c00117 	ldw	r3,4(r16)
 200aa88:	19c6703a 	and	r3,r3,r7
 200aa8c:	1c45c83a 	sub	r2,r3,r17
 200aa90:	30bff90e 	bge	r6,r2,200aa78 <_malloc_r+0x150>
 200aa94:	213fffc4 	addi	r4,r4,-1
 200aa98:	21000044 	addi	r4,r4,1
 200aa9c:	9c000417 	ldw	r16,16(r19)
 200aaa0:	00c08074 	movhi	r3,513
 200aaa4:	18c8bf04 	addi	r3,r3,8956
 200aaa8:	1a400204 	addi	r9,r3,8
 200aaac:	8240ff26 	beq	r16,r9,200aeac <_malloc_r+0x584>
 200aab0:	81400117 	ldw	r5,4(r16)
 200aab4:	00bfff04 	movi	r2,-4
 200aab8:	018003c4 	movi	r6,15
 200aabc:	2884703a 	and	r2,r5,r2
 200aac0:	144bc83a 	sub	r5,r2,r17
 200aac4:	3140ea16 	blt	r6,r5,200ae70 <_malloc_r+0x548>
 200aac8:	1a400515 	stw	r9,20(r3)
 200aacc:	1a400415 	stw	r9,16(r3)
 200aad0:	2800570e 	bge	r5,zero,200ac30 <_malloc_r+0x308>
 200aad4:	01407fc4 	movi	r5,511
 200aad8:	2880ca36 	bltu	r5,r2,200ae04 <_malloc_r+0x4dc>
 200aadc:	1004d0fa 	srli	r2,r2,3
 200aae0:	02000044 	movi	r8,1
 200aae4:	19c00117 	ldw	r7,4(r3)
 200aae8:	108b883a 	add	r5,r2,r2
 200aaec:	294b883a 	add	r5,r5,r5
 200aaf0:	1005d0ba 	srai	r2,r2,2
 200aaf4:	294b883a 	add	r5,r5,r5
 200aaf8:	28cb883a 	add	r5,r5,r3
 200aafc:	29800217 	ldw	r6,8(r5)
 200ab00:	4084983a 	sll	r2,r8,r2
 200ab04:	81400315 	stw	r5,12(r16)
 200ab08:	81800215 	stw	r6,8(r16)
 200ab0c:	11c4b03a 	or	r2,r2,r7
 200ab10:	18800115 	stw	r2,4(r3)
 200ab14:	2c000215 	stw	r16,8(r5)
 200ab18:	34000315 	stw	r16,12(r6)
 200ab1c:	200bd0ba 	srai	r5,r4,2
 200ab20:	00c00044 	movi	r3,1
 200ab24:	194a983a 	sll	r5,r3,r5
 200ab28:	11404936 	bltu	r2,r5,200ac50 <_malloc_r+0x328>
 200ab2c:	1146703a 	and	r3,r2,r5
 200ab30:	18000a1e 	bne	r3,zero,200ab5c <_malloc_r+0x234>
 200ab34:	00ffff04 	movi	r3,-4
 200ab38:	294b883a 	add	r5,r5,r5
 200ab3c:	20c8703a 	and	r4,r4,r3
 200ab40:	1146703a 	and	r3,r2,r5
 200ab44:	21000104 	addi	r4,r4,4
 200ab48:	1800041e 	bne	r3,zero,200ab5c <_malloc_r+0x234>
 200ab4c:	294b883a 	add	r5,r5,r5
 200ab50:	1146703a 	and	r3,r2,r5
 200ab54:	21000104 	addi	r4,r4,4
 200ab58:	183ffc26 	beq	r3,zero,200ab4c <_malloc_r+0x224>
 200ab5c:	023fff04 	movi	r8,-4
 200ab60:	01c003c4 	movi	r7,15
 200ab64:	2105883a 	add	r2,r4,r4
 200ab68:	1085883a 	add	r2,r2,r2
 200ab6c:	1085883a 	add	r2,r2,r2
 200ab70:	9899883a 	add	r12,r19,r2
 200ab74:	62800304 	addi	r10,r12,12
 200ab78:	2017883a 	mov	r11,r4
 200ab7c:	54000017 	ldw	r16,0(r10)
 200ab80:	51bffd04 	addi	r6,r10,-12
 200ab84:	8180041e 	bne	r16,r6,200ab98 <_malloc_r+0x270>
 200ab88:	0000ca06 	br	200aeb4 <_malloc_r+0x58c>
 200ab8c:	10001c0e 	bge	r2,zero,200ac00 <_malloc_r+0x2d8>
 200ab90:	84000317 	ldw	r16,12(r16)
 200ab94:	8180c726 	beq	r16,r6,200aeb4 <_malloc_r+0x58c>
 200ab98:	80c00117 	ldw	r3,4(r16)
 200ab9c:	1a06703a 	and	r3,r3,r8
 200aba0:	1c45c83a 	sub	r2,r3,r17
 200aba4:	38bff90e 	bge	r7,r2,200ab8c <_malloc_r+0x264>
 200aba8:	81000317 	ldw	r4,12(r16)
 200abac:	81400217 	ldw	r5,8(r16)
 200abb0:	8447883a 	add	r3,r16,r17
 200abb4:	8c400054 	ori	r17,r17,1
 200abb8:	29000315 	stw	r4,12(r5)
 200abbc:	21400215 	stw	r5,8(r4)
 200abc0:	84400115 	stw	r17,4(r16)
 200abc4:	1889883a 	add	r4,r3,r2
 200abc8:	11400054 	ori	r5,r2,1
 200abcc:	98c00515 	stw	r3,20(r19)
 200abd0:	98c00415 	stw	r3,16(r19)
 200abd4:	20800015 	stw	r2,0(r4)
 200abd8:	1a400315 	stw	r9,12(r3)
 200abdc:	1a400215 	stw	r9,8(r3)
 200abe0:	19400115 	stw	r5,4(r3)
 200abe4:	9009883a 	mov	r4,r18
 200abe8:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200abec:	80800204 	addi	r2,r16,8
 200abf0:	003f7b06 	br	200a9e0 <_malloc_r+0xb8>
 200abf4:	8808d0fa 	srli	r4,r17,3
 200abf8:	210b883a 	add	r5,r4,r4
 200abfc:	003f9106 	br	200aa44 <_malloc_r+0x11c>
 200ac00:	80c7883a 	add	r3,r16,r3
 200ac04:	19400117 	ldw	r5,4(r3)
 200ac08:	80800317 	ldw	r2,12(r16)
 200ac0c:	81000217 	ldw	r4,8(r16)
 200ac10:	29400054 	ori	r5,r5,1
 200ac14:	19400115 	stw	r5,4(r3)
 200ac18:	20800315 	stw	r2,12(r4)
 200ac1c:	11000215 	stw	r4,8(r2)
 200ac20:	9009883a 	mov	r4,r18
 200ac24:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200ac28:	80800204 	addi	r2,r16,8
 200ac2c:	003f6c06 	br	200a9e0 <_malloc_r+0xb8>
 200ac30:	8085883a 	add	r2,r16,r2
 200ac34:	10c00117 	ldw	r3,4(r2)
 200ac38:	9009883a 	mov	r4,r18
 200ac3c:	18c00054 	ori	r3,r3,1
 200ac40:	10c00115 	stw	r3,4(r2)
 200ac44:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200ac48:	80800204 	addi	r2,r16,8
 200ac4c:	003f6406 	br	200a9e0 <_malloc_r+0xb8>
 200ac50:	9c000217 	ldw	r16,8(r19)
 200ac54:	00bfff04 	movi	r2,-4
 200ac58:	85400117 	ldw	r21,4(r16)
 200ac5c:	a8aa703a 	and	r21,r21,r2
 200ac60:	ac400336 	bltu	r21,r17,200ac70 <_malloc_r+0x348>
 200ac64:	ac45c83a 	sub	r2,r21,r17
 200ac68:	00c003c4 	movi	r3,15
 200ac6c:	18805316 	blt	r3,r2,200adbc <_malloc_r+0x494>
 200ac70:	d5e01817 	ldw	r23,-32672(gp)
 200ac74:	d0e00517 	ldw	r3,-32748(gp)
 200ac78:	00bfffc4 	movi	r2,-1
 200ac7c:	8579883a 	add	fp,r16,r21
 200ac80:	8def883a 	add	r23,r17,r23
 200ac84:	1880d226 	beq	r3,r2,200afd0 <_malloc_r+0x6a8>
 200ac88:	bdc403c4 	addi	r23,r23,4111
 200ac8c:	00bc0004 	movi	r2,-4096
 200ac90:	b8ae703a 	and	r23,r23,r2
 200ac94:	9009883a 	mov	r4,r18
 200ac98:	b80b883a 	mov	r5,r23
 200ac9c:	200caa80 	call	200caa8 <_sbrk_r>
 200aca0:	1029883a 	mov	r20,r2
 200aca4:	00bfffc4 	movi	r2,-1
 200aca8:	a080d126 	beq	r20,r2,200aff0 <_malloc_r+0x6c8>
 200acac:	a7009f36 	bltu	r20,fp,200af2c <_malloc_r+0x604>
 200acb0:	05808074 	movhi	r22,513
 200acb4:	b58e9504 	addi	r22,r22,14932
 200acb8:	b0800017 	ldw	r2,0(r22)
 200acbc:	b885883a 	add	r2,r23,r2
 200acc0:	b0800015 	stw	r2,0(r22)
 200acc4:	e500cf26 	beq	fp,r20,200b004 <_malloc_r+0x6dc>
 200acc8:	d1200517 	ldw	r4,-32748(gp)
 200accc:	00ffffc4 	movi	r3,-1
 200acd0:	20c0e026 	beq	r4,r3,200b054 <_malloc_r+0x72c>
 200acd4:	a739c83a 	sub	fp,r20,fp
 200acd8:	1705883a 	add	r2,r2,fp
 200acdc:	b0800015 	stw	r2,0(r22)
 200ace0:	a08001cc 	andi	r2,r20,7
 200ace4:	1000a526 	beq	r2,zero,200af7c <_malloc_r+0x654>
 200ace8:	a0a9c83a 	sub	r20,r20,r2
 200acec:	00c40204 	movi	r3,4104
 200acf0:	a5000204 	addi	r20,r20,8
 200acf4:	1885c83a 	sub	r2,r3,r2
 200acf8:	a5c7883a 	add	r3,r20,r23
 200acfc:	18c3ffcc 	andi	r3,r3,4095
 200ad00:	10efc83a 	sub	r23,r2,r3
 200ad04:	9009883a 	mov	r4,r18
 200ad08:	b80b883a 	mov	r5,r23
 200ad0c:	200caa80 	call	200caa8 <_sbrk_r>
 200ad10:	00ffffc4 	movi	r3,-1
 200ad14:	10c0cc26 	beq	r2,r3,200b048 <_malloc_r+0x720>
 200ad18:	1505c83a 	sub	r2,r2,r20
 200ad1c:	b887883a 	add	r3,r23,r2
 200ad20:	18c00054 	ori	r3,r3,1
 200ad24:	b0800017 	ldw	r2,0(r22)
 200ad28:	9d000215 	stw	r20,8(r19)
 200ad2c:	a0c00115 	stw	r3,4(r20)
 200ad30:	b885883a 	add	r2,r23,r2
 200ad34:	b0800015 	stw	r2,0(r22)
 200ad38:	84c00e26 	beq	r16,r19,200ad74 <_malloc_r+0x44c>
 200ad3c:	00c003c4 	movi	r3,15
 200ad40:	1d40902e 	bgeu	r3,r21,200af84 <_malloc_r+0x65c>
 200ad44:	ad7ffd04 	addi	r21,r21,-12
 200ad48:	013ffe04 	movi	r4,-8
 200ad4c:	a908703a 	and	r4,r21,r4
 200ad50:	810b883a 	add	r5,r16,r4
 200ad54:	01800144 	movi	r6,5
 200ad58:	29800115 	stw	r6,4(r5)
 200ad5c:	29800215 	stw	r6,8(r5)
 200ad60:	81400117 	ldw	r5,4(r16)
 200ad64:	2940004c 	andi	r5,r5,1
 200ad68:	214ab03a 	or	r5,r4,r5
 200ad6c:	81400115 	stw	r5,4(r16)
 200ad70:	1900ae36 	bltu	r3,r4,200b02c <_malloc_r+0x704>
 200ad74:	d0e01717 	ldw	r3,-32676(gp)
 200ad78:	1880012e 	bgeu	r3,r2,200ad80 <_malloc_r+0x458>
 200ad7c:	d0a01715 	stw	r2,-32676(gp)
 200ad80:	d0e01617 	ldw	r3,-32680(gp)
 200ad84:	9c000217 	ldw	r16,8(r19)
 200ad88:	1880012e 	bgeu	r3,r2,200ad90 <_malloc_r+0x468>
 200ad8c:	d0a01615 	stw	r2,-32680(gp)
 200ad90:	80c00117 	ldw	r3,4(r16)
 200ad94:	00bfff04 	movi	r2,-4
 200ad98:	1886703a 	and	r3,r3,r2
 200ad9c:	1c45c83a 	sub	r2,r3,r17
 200ada0:	1c400236 	bltu	r3,r17,200adac <_malloc_r+0x484>
 200ada4:	00c003c4 	movi	r3,15
 200ada8:	18800416 	blt	r3,r2,200adbc <_malloc_r+0x494>
 200adac:	9009883a 	mov	r4,r18
 200adb0:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200adb4:	0005883a 	mov	r2,zero
 200adb8:	003f0906 	br	200a9e0 <_malloc_r+0xb8>
 200adbc:	88c00054 	ori	r3,r17,1
 200adc0:	10800054 	ori	r2,r2,1
 200adc4:	80c00115 	stw	r3,4(r16)
 200adc8:	8463883a 	add	r17,r16,r17
 200adcc:	88800115 	stw	r2,4(r17)
 200add0:	9009883a 	mov	r4,r18
 200add4:	9c400215 	stw	r17,8(r19)
 200add8:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200addc:	80800204 	addi	r2,r16,8
 200ade0:	003eff06 	br	200a9e0 <_malloc_r+0xb8>
 200ade4:	00800504 	movi	r2,20
 200ade8:	1100492e 	bgeu	r2,r4,200af10 <_malloc_r+0x5e8>
 200adec:	00801504 	movi	r2,84
 200adf0:	11005c36 	bltu	r2,r4,200af64 <_malloc_r+0x63c>
 200adf4:	8808d33a 	srli	r4,r17,12
 200adf8:	21001b84 	addi	r4,r4,110
 200adfc:	210b883a 	add	r5,r4,r4
 200ae00:	003f1006 	br	200aa44 <_malloc_r+0x11c>
 200ae04:	1006d27a 	srli	r3,r2,9
 200ae08:	01400104 	movi	r5,4
 200ae0c:	28c0432e 	bgeu	r5,r3,200af1c <_malloc_r+0x5f4>
 200ae10:	01400504 	movi	r5,20
 200ae14:	28c07036 	bltu	r5,r3,200afd8 <_malloc_r+0x6b0>
 200ae18:	194016c4 	addi	r5,r3,91
 200ae1c:	294d883a 	add	r6,r5,r5
 200ae20:	318d883a 	add	r6,r6,r6
 200ae24:	318d883a 	add	r6,r6,r6
 200ae28:	998d883a 	add	r6,r19,r6
 200ae2c:	30c00217 	ldw	r3,8(r6)
 200ae30:	01c08074 	movhi	r7,513
 200ae34:	39c8bf04 	addi	r7,r7,8956
 200ae38:	19805726 	beq	r3,r6,200af98 <_malloc_r+0x670>
 200ae3c:	01ffff04 	movi	r7,-4
 200ae40:	19400117 	ldw	r5,4(r3)
 200ae44:	29ca703a 	and	r5,r5,r7
 200ae48:	1140022e 	bgeu	r2,r5,200ae54 <_malloc_r+0x52c>
 200ae4c:	18c00217 	ldw	r3,8(r3)
 200ae50:	30fffb1e 	bne	r6,r3,200ae40 <_malloc_r+0x518>
 200ae54:	19400317 	ldw	r5,12(r3)
 200ae58:	98800117 	ldw	r2,4(r19)
 200ae5c:	81400315 	stw	r5,12(r16)
 200ae60:	80c00215 	stw	r3,8(r16)
 200ae64:	2c000215 	stw	r16,8(r5)
 200ae68:	1c000315 	stw	r16,12(r3)
 200ae6c:	003f2b06 	br	200ab1c <_malloc_r+0x1f4>
 200ae70:	8445883a 	add	r2,r16,r17
 200ae74:	8c400054 	ori	r17,r17,1
 200ae78:	18800515 	stw	r2,20(r3)
 200ae7c:	18800415 	stw	r2,16(r3)
 200ae80:	29000054 	ori	r4,r5,1
 200ae84:	1147883a 	add	r3,r2,r5
 200ae88:	84400115 	stw	r17,4(r16)
 200ae8c:	11000115 	stw	r4,4(r2)
 200ae90:	12400315 	stw	r9,12(r2)
 200ae94:	12400215 	stw	r9,8(r2)
 200ae98:	19400015 	stw	r5,0(r3)
 200ae9c:	9009883a 	mov	r4,r18
 200aea0:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200aea4:	80800204 	addi	r2,r16,8
 200aea8:	003ecd06 	br	200a9e0 <_malloc_r+0xb8>
 200aeac:	18800117 	ldw	r2,4(r3)
 200aeb0:	003f1a06 	br	200ab1c <_malloc_r+0x1f4>
 200aeb4:	5ac00044 	addi	r11,r11,1
 200aeb8:	588000cc 	andi	r2,r11,3
 200aebc:	52800204 	addi	r10,r10,8
 200aec0:	103f2e1e 	bne	r2,zero,200ab7c <_malloc_r+0x254>
 200aec4:	20c000cc 	andi	r3,r4,3
 200aec8:	60bffe04 	addi	r2,r12,-8
 200aecc:	18006f26 	beq	r3,zero,200b08c <_malloc_r+0x764>
 200aed0:	63000017 	ldw	r12,0(r12)
 200aed4:	213fffc4 	addi	r4,r4,-1
 200aed8:	60bffa26 	beq	r12,r2,200aec4 <_malloc_r+0x59c>
 200aedc:	98800117 	ldw	r2,4(r19)
 200aee0:	294b883a 	add	r5,r5,r5
 200aee4:	117f5a36 	bltu	r2,r5,200ac50 <_malloc_r+0x328>
 200aee8:	283f5926 	beq	r5,zero,200ac50 <_malloc_r+0x328>
 200aeec:	1146703a 	and	r3,r2,r5
 200aef0:	18001626 	beq	r3,zero,200af4c <_malloc_r+0x624>
 200aef4:	5809883a 	mov	r4,r11
 200aef8:	003f1a06 	br	200ab64 <_malloc_r+0x23c>
 200aefc:	80800204 	addi	r2,r16,8
 200af00:	84000517 	ldw	r16,20(r16)
 200af04:	143ea81e 	bne	r2,r16,200a9a8 <_malloc_r+0x80>
 200af08:	21000084 	addi	r4,r4,2
 200af0c:	003ee306 	br	200aa9c <_malloc_r+0x174>
 200af10:	210016c4 	addi	r4,r4,91
 200af14:	210b883a 	add	r5,r4,r4
 200af18:	003eca06 	br	200aa44 <_malloc_r+0x11c>
 200af1c:	100ad1ba 	srli	r5,r2,6
 200af20:	29400e04 	addi	r5,r5,56
 200af24:	294d883a 	add	r6,r5,r5
 200af28:	003fbd06 	br	200ae20 <_malloc_r+0x4f8>
 200af2c:	84ff6026 	beq	r16,r19,200acb0 <_malloc_r+0x388>
 200af30:	00808074 	movhi	r2,513
 200af34:	1088bf04 	addi	r2,r2,8956
 200af38:	14000217 	ldw	r16,8(r2)
 200af3c:	00bfff04 	movi	r2,-4
 200af40:	80c00117 	ldw	r3,4(r16)
 200af44:	1886703a 	and	r3,r3,r2
 200af48:	003f9406 	br	200ad9c <_malloc_r+0x474>
 200af4c:	294b883a 	add	r5,r5,r5
 200af50:	1146703a 	and	r3,r2,r5
 200af54:	5ac00104 	addi	r11,r11,4
 200af58:	183ffc26 	beq	r3,zero,200af4c <_malloc_r+0x624>
 200af5c:	5809883a 	mov	r4,r11
 200af60:	003f0006 	br	200ab64 <_malloc_r+0x23c>
 200af64:	00805504 	movi	r2,340
 200af68:	11001336 	bltu	r2,r4,200afb8 <_malloc_r+0x690>
 200af6c:	8808d3fa 	srli	r4,r17,15
 200af70:	21001dc4 	addi	r4,r4,119
 200af74:	210b883a 	add	r5,r4,r4
 200af78:	003eb206 	br	200aa44 <_malloc_r+0x11c>
 200af7c:	00840004 	movi	r2,4096
 200af80:	003f5d06 	br	200acf8 <_malloc_r+0x3d0>
 200af84:	00800044 	movi	r2,1
 200af88:	a0800115 	stw	r2,4(r20)
 200af8c:	a021883a 	mov	r16,r20
 200af90:	0007883a 	mov	r3,zero
 200af94:	003f8106 	br	200ad9c <_malloc_r+0x474>
 200af98:	280bd0ba 	srai	r5,r5,2
 200af9c:	01800044 	movi	r6,1
 200afa0:	38800117 	ldw	r2,4(r7)
 200afa4:	314c983a 	sll	r6,r6,r5
 200afa8:	180b883a 	mov	r5,r3
 200afac:	3084b03a 	or	r2,r6,r2
 200afb0:	38800115 	stw	r2,4(r7)
 200afb4:	003fa906 	br	200ae5c <_malloc_r+0x534>
 200afb8:	00815504 	movi	r2,1364
 200afbc:	11001836 	bltu	r2,r4,200b020 <_malloc_r+0x6f8>
 200afc0:	8808d4ba 	srli	r4,r17,18
 200afc4:	21001f04 	addi	r4,r4,124
 200afc8:	210b883a 	add	r5,r4,r4
 200afcc:	003e9d06 	br	200aa44 <_malloc_r+0x11c>
 200afd0:	bdc00404 	addi	r23,r23,16
 200afd4:	003f2f06 	br	200ac94 <_malloc_r+0x36c>
 200afd8:	01401504 	movi	r5,84
 200afdc:	28c01f36 	bltu	r5,r3,200b05c <_malloc_r+0x734>
 200afe0:	100ad33a 	srli	r5,r2,12
 200afe4:	29401b84 	addi	r5,r5,110
 200afe8:	294d883a 	add	r6,r5,r5
 200afec:	003f8c06 	br	200ae20 <_malloc_r+0x4f8>
 200aff0:	9c000217 	ldw	r16,8(r19)
 200aff4:	00bfff04 	movi	r2,-4
 200aff8:	80c00117 	ldw	r3,4(r16)
 200affc:	1886703a 	and	r3,r3,r2
 200b000:	003f6606 	br	200ad9c <_malloc_r+0x474>
 200b004:	e0c3ffcc 	andi	r3,fp,4095
 200b008:	183f2f1e 	bne	r3,zero,200acc8 <_malloc_r+0x3a0>
 200b00c:	98c00217 	ldw	r3,8(r19)
 200b010:	bd49883a 	add	r4,r23,r21
 200b014:	21000054 	ori	r4,r4,1
 200b018:	19000115 	stw	r4,4(r3)
 200b01c:	003f5506 	br	200ad74 <_malloc_r+0x44c>
 200b020:	01403f04 	movi	r5,252
 200b024:	01001f84 	movi	r4,126
 200b028:	003e8606 	br	200aa44 <_malloc_r+0x11c>
 200b02c:	9009883a 	mov	r4,r18
 200b030:	81400204 	addi	r5,r16,8
 200b034:	2009d900 	call	2009d90 <_free_r>
 200b038:	00808074 	movhi	r2,513
 200b03c:	108e9504 	addi	r2,r2,14932
 200b040:	10800017 	ldw	r2,0(r2)
 200b044:	003f4b06 	br	200ad74 <_malloc_r+0x44c>
 200b048:	00c00044 	movi	r3,1
 200b04c:	002f883a 	mov	r23,zero
 200b050:	003f3406 	br	200ad24 <_malloc_r+0x3fc>
 200b054:	d5200515 	stw	r20,-32748(gp)
 200b058:	003f2106 	br	200ace0 <_malloc_r+0x3b8>
 200b05c:	01405504 	movi	r5,340
 200b060:	28c00436 	bltu	r5,r3,200b074 <_malloc_r+0x74c>
 200b064:	100ad3fa 	srli	r5,r2,15
 200b068:	29401dc4 	addi	r5,r5,119
 200b06c:	294d883a 	add	r6,r5,r5
 200b070:	003f6b06 	br	200ae20 <_malloc_r+0x4f8>
 200b074:	01415504 	movi	r5,1364
 200b078:	28c00936 	bltu	r5,r3,200b0a0 <_malloc_r+0x778>
 200b07c:	100ad4ba 	srli	r5,r2,18
 200b080:	29401f04 	addi	r5,r5,124
 200b084:	294d883a 	add	r6,r5,r5
 200b088:	003f6506 	br	200ae20 <_malloc_r+0x4f8>
 200b08c:	98800117 	ldw	r2,4(r19)
 200b090:	0146303a 	nor	r3,zero,r5
 200b094:	1884703a 	and	r2,r3,r2
 200b098:	98800115 	stw	r2,4(r19)
 200b09c:	003f9006 	br	200aee0 <_malloc_r+0x5b8>
 200b0a0:	01803f04 	movi	r6,252
 200b0a4:	01401f84 	movi	r5,126
 200b0a8:	003f5d06 	br	200ae20 <_malloc_r+0x4f8>

0200b0ac <memchr>:
 200b0ac:	008000c4 	movi	r2,3
 200b0b0:	29403fcc 	andi	r5,r5,255
 200b0b4:	1180282e 	bgeu	r2,r6,200b158 <memchr+0xac>
 200b0b8:	2086703a 	and	r3,r4,r2
 200b0bc:	1800351e 	bne	r3,zero,200b194 <memchr+0xe8>
 200b0c0:	2816923a 	slli	r11,r5,8
 200b0c4:	2093883a 	add	r9,r4,r2
 200b0c8:	22000084 	addi	r8,r4,2
 200b0cc:	5957883a 	add	r11,r11,r5
 200b0d0:	5816923a 	slli	r11,r11,8
 200b0d4:	20c00044 	addi	r3,r4,1
 200b0d8:	037fbff4 	movhi	r13,65279
 200b0dc:	6b7fbfc4 	addi	r13,r13,-257
 200b0e0:	5957883a 	add	r11,r11,r5
 200b0e4:	5816923a 	slli	r11,r11,8
 200b0e8:	03202074 	movhi	r12,32897
 200b0ec:	63202004 	addi	r12,r12,-32640
 200b0f0:	101d883a 	mov	r14,r2
 200b0f4:	5957883a 	add	r11,r11,r5
 200b0f8:	21c00017 	ldw	r7,0(r4)
 200b0fc:	31bfff04 	addi	r6,r6,-4
 200b100:	1805883a 	mov	r2,r3
 200b104:	3acef03a 	xor	r7,r7,r11
 200b108:	3b55883a 	add	r10,r7,r13
 200b10c:	01ce303a 	nor	r7,zero,r7
 200b110:	51ce703a 	and	r7,r10,r7
 200b114:	3b0e703a 	and	r7,r7,r12
 200b118:	38000a26 	beq	r7,zero,200b144 <memchr+0x98>
 200b11c:	21c00003 	ldbu	r7,0(r4)
 200b120:	39401e26 	beq	r7,r5,200b19c <memchr+0xf0>
 200b124:	19c00003 	ldbu	r7,0(r3)
 200b128:	39401926 	beq	r7,r5,200b190 <memchr+0xe4>
 200b12c:	41c00003 	ldbu	r7,0(r8)
 200b130:	4005883a 	mov	r2,r8
 200b134:	39401626 	beq	r7,r5,200b190 <memchr+0xe4>
 200b138:	49c00003 	ldbu	r7,0(r9)
 200b13c:	4805883a 	mov	r2,r9
 200b140:	39401326 	beq	r7,r5,200b190 <memchr+0xe4>
 200b144:	21000104 	addi	r4,r4,4
 200b148:	4a400104 	addi	r9,r9,4
 200b14c:	42000104 	addi	r8,r8,4
 200b150:	18c00104 	addi	r3,r3,4
 200b154:	71bfe836 	bltu	r14,r6,200b0f8 <memchr+0x4c>
 200b158:	2005883a 	mov	r2,r4
 200b15c:	30000a26 	beq	r6,zero,200b188 <memchr+0xdc>
 200b160:	10c00003 	ldbu	r3,0(r2)
 200b164:	19400a26 	beq	r3,r5,200b190 <memchr+0xe4>
 200b168:	10c00044 	addi	r3,r2,1
 200b16c:	118d883a 	add	r6,r2,r6
 200b170:	00000306 	br	200b180 <memchr+0xd4>
 200b174:	11000003 	ldbu	r4,0(r2)
 200b178:	18c00044 	addi	r3,r3,1
 200b17c:	21400426 	beq	r4,r5,200b190 <memchr+0xe4>
 200b180:	1805883a 	mov	r2,r3
 200b184:	19bffb1e 	bne	r3,r6,200b174 <memchr+0xc8>
 200b188:	0005883a 	mov	r2,zero
 200b18c:	f800283a 	ret
 200b190:	f800283a 	ret
 200b194:	2005883a 	mov	r2,r4
 200b198:	003ff106 	br	200b160 <memchr+0xb4>
 200b19c:	2005883a 	mov	r2,r4
 200b1a0:	f800283a 	ret

0200b1a4 <memcpy>:
 200b1a4:	00c003c4 	movi	r3,15
 200b1a8:	2005883a 	mov	r2,r4
 200b1ac:	3009883a 	mov	r4,r6
 200b1b0:	1980032e 	bgeu	r3,r6,200b1c0 <memcpy+0x1c>
 200b1b4:	2886b03a 	or	r3,r5,r2
 200b1b8:	18c000cc 	andi	r3,r3,3
 200b1bc:	18000926 	beq	r3,zero,200b1e4 <memcpy+0x40>
 200b1c0:	1007883a 	mov	r3,r2
 200b1c4:	290f883a 	add	r7,r5,r4
 200b1c8:	20000526 	beq	r4,zero,200b1e0 <memcpy+0x3c>
 200b1cc:	29800003 	ldbu	r6,0(r5)
 200b1d0:	18c00044 	addi	r3,r3,1
 200b1d4:	29400044 	addi	r5,r5,1
 200b1d8:	19bfffc5 	stb	r6,-1(r3)
 200b1dc:	29fffb1e 	bne	r5,r7,200b1cc <memcpy+0x28>
 200b1e0:	f800283a 	ret
 200b1e4:	327ffc04 	addi	r9,r6,-16
 200b1e8:	4812d13a 	srli	r9,r9,4
 200b1ec:	11000404 	addi	r4,r2,16
 200b1f0:	1007883a 	mov	r3,r2
 200b1f4:	4810913a 	slli	r8,r9,4
 200b1f8:	280f883a 	mov	r7,r5
 200b1fc:	2209883a 	add	r4,r4,r8
 200b200:	3a000017 	ldw	r8,0(r7)
 200b204:	18c00404 	addi	r3,r3,16
 200b208:	39c00404 	addi	r7,r7,16
 200b20c:	1a3ffc15 	stw	r8,-16(r3)
 200b210:	3a3ffd17 	ldw	r8,-12(r7)
 200b214:	1a3ffd15 	stw	r8,-12(r3)
 200b218:	3a3ffe17 	ldw	r8,-8(r7)
 200b21c:	1a3ffe15 	stw	r8,-8(r3)
 200b220:	3a3fff17 	ldw	r8,-4(r7)
 200b224:	1a3fff15 	stw	r8,-4(r3)
 200b228:	193ff51e 	bne	r3,r4,200b200 <memcpy+0x5c>
 200b22c:	49c00044 	addi	r7,r9,1
 200b230:	380e913a 	slli	r7,r7,4
 200b234:	310003cc 	andi	r4,r6,15
 200b238:	018000c4 	movi	r6,3
 200b23c:	11c7883a 	add	r3,r2,r7
 200b240:	29cb883a 	add	r5,r5,r7
 200b244:	313fdf2e 	bgeu	r6,r4,200b1c4 <memcpy+0x20>
 200b248:	213fff04 	addi	r4,r4,-4
 200b24c:	2014d0ba 	srli	r10,r4,2
 200b250:	1a400104 	addi	r9,r3,4
 200b254:	180d883a 	mov	r6,r3
 200b258:	528f883a 	add	r7,r10,r10
 200b25c:	39cf883a 	add	r7,r7,r7
 200b260:	49d3883a 	add	r9,r9,r7
 200b264:	280f883a 	mov	r7,r5
 200b268:	3a000017 	ldw	r8,0(r7)
 200b26c:	31800104 	addi	r6,r6,4
 200b270:	39c00104 	addi	r7,r7,4
 200b274:	323fff15 	stw	r8,-4(r6)
 200b278:	327ffb1e 	bne	r6,r9,200b268 <memcpy+0xc4>
 200b27c:	51800044 	addi	r6,r10,1
 200b280:	52bfff24 	muli	r10,r10,-4
 200b284:	318d883a 	add	r6,r6,r6
 200b288:	318d883a 	add	r6,r6,r6
 200b28c:	5109883a 	add	r4,r10,r4
 200b290:	298b883a 	add	r5,r5,r6
 200b294:	1987883a 	add	r3,r3,r6
 200b298:	003fca06 	br	200b1c4 <memcpy+0x20>

0200b29c <memmove>:
 200b29c:	2005883a 	mov	r2,r4
 200b2a0:	300f883a 	mov	r7,r6
 200b2a4:	29000b2e 	bgeu	r5,r4,200b2d4 <memmove+0x38>
 200b2a8:	2987883a 	add	r3,r5,r6
 200b2ac:	20c0092e 	bgeu	r4,r3,200b2d4 <memmove+0x38>
 200b2b0:	218b883a 	add	r5,r4,r6
 200b2b4:	198fc83a 	sub	r7,r3,r6
 200b2b8:	30003f26 	beq	r6,zero,200b3b8 <memmove+0x11c>
 200b2bc:	18ffffc4 	addi	r3,r3,-1
 200b2c0:	19000003 	ldbu	r4,0(r3)
 200b2c4:	297fffc4 	addi	r5,r5,-1
 200b2c8:	29000005 	stb	r4,0(r5)
 200b2cc:	19fffb1e 	bne	r3,r7,200b2bc <memmove+0x20>
 200b2d0:	f800283a 	ret
 200b2d4:	00c003c4 	movi	r3,15
 200b2d8:	1980382e 	bgeu	r3,r6,200b3bc <memmove+0x120>
 200b2dc:	2886b03a 	or	r3,r5,r2
 200b2e0:	18c000cc 	andi	r3,r3,3
 200b2e4:	1800351e 	bne	r3,zero,200b3bc <memmove+0x120>
 200b2e8:	327ffc04 	addi	r9,r6,-16
 200b2ec:	4812d13a 	srli	r9,r9,4
 200b2f0:	12000404 	addi	r8,r2,16
 200b2f4:	1007883a 	mov	r3,r2
 200b2f8:	4808913a 	slli	r4,r9,4
 200b2fc:	280f883a 	mov	r7,r5
 200b300:	4111883a 	add	r8,r8,r4
 200b304:	39000017 	ldw	r4,0(r7)
 200b308:	18c00404 	addi	r3,r3,16
 200b30c:	39c00404 	addi	r7,r7,16
 200b310:	193ffc15 	stw	r4,-16(r3)
 200b314:	393ffd17 	ldw	r4,-12(r7)
 200b318:	193ffd15 	stw	r4,-12(r3)
 200b31c:	393ffe17 	ldw	r4,-8(r7)
 200b320:	193ffe15 	stw	r4,-8(r3)
 200b324:	393fff17 	ldw	r4,-4(r7)
 200b328:	193fff15 	stw	r4,-4(r3)
 200b32c:	1a3ff51e 	bne	r3,r8,200b304 <memmove+0x68>
 200b330:	49000044 	addi	r4,r9,1
 200b334:	2008913a 	slli	r4,r4,4
 200b338:	31c003cc 	andi	r7,r6,15
 200b33c:	1107883a 	add	r3,r2,r4
 200b340:	290b883a 	add	r5,r5,r4
 200b344:	010000c4 	movi	r4,3
 200b348:	21c0142e 	bgeu	r4,r7,200b39c <memmove+0x100>
 200b34c:	39ffff04 	addi	r7,r7,-4
 200b350:	3814d0ba 	srli	r10,r7,2
 200b354:	1a400104 	addi	r9,r3,4
 200b358:	180d883a 	mov	r6,r3
 200b35c:	5289883a 	add	r4,r10,r10
 200b360:	2109883a 	add	r4,r4,r4
 200b364:	4913883a 	add	r9,r9,r4
 200b368:	2809883a 	mov	r4,r5
 200b36c:	22000017 	ldw	r8,0(r4)
 200b370:	31800104 	addi	r6,r6,4
 200b374:	21000104 	addi	r4,r4,4
 200b378:	323fff15 	stw	r8,-4(r6)
 200b37c:	327ffb1e 	bne	r6,r9,200b36c <memmove+0xd0>
 200b380:	51000044 	addi	r4,r10,1
 200b384:	52bfff24 	muli	r10,r10,-4
 200b388:	2109883a 	add	r4,r4,r4
 200b38c:	2109883a 	add	r4,r4,r4
 200b390:	51cf883a 	add	r7,r10,r7
 200b394:	290b883a 	add	r5,r5,r4
 200b398:	1907883a 	add	r3,r3,r4
 200b39c:	38000626 	beq	r7,zero,200b3b8 <memmove+0x11c>
 200b3a0:	19cf883a 	add	r7,r3,r7
 200b3a4:	29800003 	ldbu	r6,0(r5)
 200b3a8:	18c00044 	addi	r3,r3,1
 200b3ac:	29400044 	addi	r5,r5,1
 200b3b0:	19bfffc5 	stb	r6,-1(r3)
 200b3b4:	19fffb1e 	bne	r3,r7,200b3a4 <memmove+0x108>
 200b3b8:	f800283a 	ret
 200b3bc:	1007883a 	mov	r3,r2
 200b3c0:	003ff606 	br	200b39c <memmove+0x100>

0200b3c4 <memset>:
 200b3c4:	00c000c4 	movi	r3,3
 200b3c8:	2005883a 	mov	r2,r4
 200b3cc:	29403fcc 	andi	r5,r5,255
 200b3d0:	19802d2e 	bgeu	r3,r6,200b488 <memset+0xc4>
 200b3d4:	20c6703a 	and	r3,r4,r3
 200b3d8:	18002e1e 	bne	r3,zero,200b494 <memset+0xd0>
 200b3dc:	2806923a 	slli	r3,r5,8
 200b3e0:	010003c4 	movi	r4,15
 200b3e4:	3011883a 	mov	r8,r6
 200b3e8:	1946b03a 	or	r3,r3,r5
 200b3ec:	180e943a 	slli	r7,r3,16
 200b3f0:	38ceb03a 	or	r7,r7,r3
 200b3f4:	1007883a 	mov	r3,r2
 200b3f8:	21800f2e 	bgeu	r4,r6,200b438 <memset+0x74>
 200b3fc:	19c00015 	stw	r7,0(r3)
 200b400:	19c00115 	stw	r7,4(r3)
 200b404:	19c00215 	stw	r7,8(r3)
 200b408:	19c00315 	stw	r7,12(r3)
 200b40c:	423ffc04 	addi	r8,r8,-16
 200b410:	18c00404 	addi	r3,r3,16
 200b414:	223ff936 	bltu	r4,r8,200b3fc <memset+0x38>
 200b418:	30fffc04 	addi	r3,r6,-16
 200b41c:	1806d13a 	srli	r3,r3,4
 200b420:	318003cc 	andi	r6,r6,15
 200b424:	010000c4 	movi	r4,3
 200b428:	18c00044 	addi	r3,r3,1
 200b42c:	1806913a 	slli	r3,r3,4
 200b430:	10c7883a 	add	r3,r2,r3
 200b434:	21800e2e 	bgeu	r4,r6,200b470 <memset+0xac>
 200b438:	1813883a 	mov	r9,r3
 200b43c:	3011883a 	mov	r8,r6
 200b440:	010000c4 	movi	r4,3
 200b444:	49c00015 	stw	r7,0(r9)
 200b448:	423fff04 	addi	r8,r8,-4
 200b44c:	4a400104 	addi	r9,r9,4
 200b450:	223ffc36 	bltu	r4,r8,200b444 <memset+0x80>
 200b454:	313fff04 	addi	r4,r6,-4
 200b458:	2008d0ba 	srli	r4,r4,2
 200b45c:	318000cc 	andi	r6,r6,3
 200b460:	21000044 	addi	r4,r4,1
 200b464:	2109883a 	add	r4,r4,r4
 200b468:	2109883a 	add	r4,r4,r4
 200b46c:	1907883a 	add	r3,r3,r4
 200b470:	30000a26 	beq	r6,zero,200b49c <memset+0xd8>
 200b474:	198d883a 	add	r6,r3,r6
 200b478:	19400005 	stb	r5,0(r3)
 200b47c:	18c00044 	addi	r3,r3,1
 200b480:	19bffd1e 	bne	r3,r6,200b478 <memset+0xb4>
 200b484:	f800283a 	ret
 200b488:	2007883a 	mov	r3,r4
 200b48c:	303ff91e 	bne	r6,zero,200b474 <memset+0xb0>
 200b490:	00000206 	br	200b49c <memset+0xd8>
 200b494:	2007883a 	mov	r3,r4
 200b498:	003ff606 	br	200b474 <memset+0xb0>
 200b49c:	f800283a 	ret

0200b4a0 <_Balloc>:
 200b4a0:	20801317 	ldw	r2,76(r4)
 200b4a4:	defffc04 	addi	sp,sp,-16
 200b4a8:	dc400115 	stw	r17,4(sp)
 200b4ac:	dc000015 	stw	r16,0(sp)
 200b4b0:	dfc00315 	stw	ra,12(sp)
 200b4b4:	dc800215 	stw	r18,8(sp)
 200b4b8:	2023883a 	mov	r17,r4
 200b4bc:	2821883a 	mov	r16,r5
 200b4c0:	10000f26 	beq	r2,zero,200b500 <_Balloc+0x60>
 200b4c4:	8407883a 	add	r3,r16,r16
 200b4c8:	18c7883a 	add	r3,r3,r3
 200b4cc:	10c7883a 	add	r3,r2,r3
 200b4d0:	18800017 	ldw	r2,0(r3)
 200b4d4:	10001126 	beq	r2,zero,200b51c <_Balloc+0x7c>
 200b4d8:	11000017 	ldw	r4,0(r2)
 200b4dc:	19000015 	stw	r4,0(r3)
 200b4e0:	10000415 	stw	zero,16(r2)
 200b4e4:	10000315 	stw	zero,12(r2)
 200b4e8:	dfc00317 	ldw	ra,12(sp)
 200b4ec:	dc800217 	ldw	r18,8(sp)
 200b4f0:	dc400117 	ldw	r17,4(sp)
 200b4f4:	dc000017 	ldw	r16,0(sp)
 200b4f8:	dec00404 	addi	sp,sp,16
 200b4fc:	f800283a 	ret
 200b500:	01400104 	movi	r5,4
 200b504:	01800404 	movi	r6,16
 200b508:	200cde80 	call	200cde8 <_calloc_r>
 200b50c:	88801315 	stw	r2,76(r17)
 200b510:	103fec1e 	bne	r2,zero,200b4c4 <_Balloc+0x24>
 200b514:	0005883a 	mov	r2,zero
 200b518:	003ff306 	br	200b4e8 <_Balloc+0x48>
 200b51c:	01400044 	movi	r5,1
 200b520:	2c24983a 	sll	r18,r5,r16
 200b524:	8809883a 	mov	r4,r17
 200b528:	91800144 	addi	r6,r18,5
 200b52c:	318d883a 	add	r6,r6,r6
 200b530:	318d883a 	add	r6,r6,r6
 200b534:	200cde80 	call	200cde8 <_calloc_r>
 200b538:	103ff626 	beq	r2,zero,200b514 <_Balloc+0x74>
 200b53c:	14000115 	stw	r16,4(r2)
 200b540:	14800215 	stw	r18,8(r2)
 200b544:	003fe606 	br	200b4e0 <_Balloc+0x40>

0200b548 <_Bfree>:
 200b548:	28000826 	beq	r5,zero,200b56c <_Bfree+0x24>
 200b54c:	28c00117 	ldw	r3,4(r5)
 200b550:	20801317 	ldw	r2,76(r4)
 200b554:	18c7883a 	add	r3,r3,r3
 200b558:	18c7883a 	add	r3,r3,r3
 200b55c:	10c5883a 	add	r2,r2,r3
 200b560:	10c00017 	ldw	r3,0(r2)
 200b564:	28c00015 	stw	r3,0(r5)
 200b568:	11400015 	stw	r5,0(r2)
 200b56c:	f800283a 	ret

0200b570 <__multadd>:
 200b570:	defffa04 	addi	sp,sp,-24
 200b574:	dc000115 	stw	r16,4(sp)
 200b578:	2c000417 	ldw	r16,16(r5)
 200b57c:	dc800315 	stw	r18,12(sp)
 200b580:	dc400215 	stw	r17,8(sp)
 200b584:	dfc00515 	stw	ra,20(sp)
 200b588:	dcc00415 	stw	r19,16(sp)
 200b58c:	2823883a 	mov	r17,r5
 200b590:	2025883a 	mov	r18,r4
 200b594:	28c00504 	addi	r3,r5,20
 200b598:	0011883a 	mov	r8,zero
 200b59c:	1a800017 	ldw	r10,0(r3)
 200b5a0:	18c00104 	addi	r3,r3,4
 200b5a4:	42000044 	addi	r8,r8,1
 200b5a8:	527fffcc 	andi	r9,r10,65535
 200b5ac:	4993383a 	mul	r9,r9,r6
 200b5b0:	5014d43a 	srli	r10,r10,16
 200b5b4:	49d3883a 	add	r9,r9,r7
 200b5b8:	480ed43a 	srli	r7,r9,16
 200b5bc:	5195383a 	mul	r10,r10,r6
 200b5c0:	4a7fffcc 	andi	r9,r9,65535
 200b5c4:	3a8f883a 	add	r7,r7,r10
 200b5c8:	3814943a 	slli	r10,r7,16
 200b5cc:	380ed43a 	srli	r7,r7,16
 200b5d0:	5253883a 	add	r9,r10,r9
 200b5d4:	1a7fff15 	stw	r9,-4(r3)
 200b5d8:	443ff016 	blt	r8,r16,200b59c <__multadd+0x2c>
 200b5dc:	38000926 	beq	r7,zero,200b604 <__multadd+0x94>
 200b5e0:	88800217 	ldw	r2,8(r17)
 200b5e4:	80800f0e 	bge	r16,r2,200b624 <__multadd+0xb4>
 200b5e8:	80800144 	addi	r2,r16,5
 200b5ec:	1085883a 	add	r2,r2,r2
 200b5f0:	1085883a 	add	r2,r2,r2
 200b5f4:	8885883a 	add	r2,r17,r2
 200b5f8:	84000044 	addi	r16,r16,1
 200b5fc:	11c00015 	stw	r7,0(r2)
 200b600:	8c000415 	stw	r16,16(r17)
 200b604:	8805883a 	mov	r2,r17
 200b608:	dfc00517 	ldw	ra,20(sp)
 200b60c:	dcc00417 	ldw	r19,16(sp)
 200b610:	dc800317 	ldw	r18,12(sp)
 200b614:	dc400217 	ldw	r17,8(sp)
 200b618:	dc000117 	ldw	r16,4(sp)
 200b61c:	dec00604 	addi	sp,sp,24
 200b620:	f800283a 	ret
 200b624:	89400117 	ldw	r5,4(r17)
 200b628:	9009883a 	mov	r4,r18
 200b62c:	d9c00015 	stw	r7,0(sp)
 200b630:	29400044 	addi	r5,r5,1
 200b634:	200b4a00 	call	200b4a0 <_Balloc>
 200b638:	89800417 	ldw	r6,16(r17)
 200b63c:	89400304 	addi	r5,r17,12
 200b640:	11000304 	addi	r4,r2,12
 200b644:	31800084 	addi	r6,r6,2
 200b648:	318d883a 	add	r6,r6,r6
 200b64c:	318d883a 	add	r6,r6,r6
 200b650:	1027883a 	mov	r19,r2
 200b654:	200b1a40 	call	200b1a4 <memcpy>
 200b658:	88c00117 	ldw	r3,4(r17)
 200b65c:	90801317 	ldw	r2,76(r18)
 200b660:	d9c00017 	ldw	r7,0(sp)
 200b664:	18c7883a 	add	r3,r3,r3
 200b668:	18c7883a 	add	r3,r3,r3
 200b66c:	10c5883a 	add	r2,r2,r3
 200b670:	10c00017 	ldw	r3,0(r2)
 200b674:	88c00015 	stw	r3,0(r17)
 200b678:	14400015 	stw	r17,0(r2)
 200b67c:	9823883a 	mov	r17,r19
 200b680:	003fd906 	br	200b5e8 <__multadd+0x78>

0200b684 <__s2b>:
 200b684:	defff904 	addi	sp,sp,-28
 200b688:	dd000415 	stw	r20,16(sp)
 200b68c:	dc400115 	stw	r17,4(sp)
 200b690:	2829883a 	mov	r20,r5
 200b694:	2023883a 	mov	r17,r4
 200b698:	01400244 	movi	r5,9
 200b69c:	39000204 	addi	r4,r7,8
 200b6a0:	dcc00315 	stw	r19,12(sp)
 200b6a4:	dc800215 	stw	r18,8(sp)
 200b6a8:	dfc00615 	stw	ra,24(sp)
 200b6ac:	dd400515 	stw	r21,20(sp)
 200b6b0:	dc000015 	stw	r16,0(sp)
 200b6b4:	3825883a 	mov	r18,r7
 200b6b8:	3027883a 	mov	r19,r6
 200b6bc:	200e20c0 	call	200e20c <__divsi3>
 200b6c0:	00c00044 	movi	r3,1
 200b6c4:	000b883a 	mov	r5,zero
 200b6c8:	1880030e 	bge	r3,r2,200b6d8 <__s2b+0x54>
 200b6cc:	18c7883a 	add	r3,r3,r3
 200b6d0:	29400044 	addi	r5,r5,1
 200b6d4:	18bffd16 	blt	r3,r2,200b6cc <__s2b+0x48>
 200b6d8:	8809883a 	mov	r4,r17
 200b6dc:	200b4a00 	call	200b4a0 <_Balloc>
 200b6e0:	d8c00717 	ldw	r3,28(sp)
 200b6e4:	10c00515 	stw	r3,20(r2)
 200b6e8:	00c00044 	movi	r3,1
 200b6ec:	10c00415 	stw	r3,16(r2)
 200b6f0:	00c00244 	movi	r3,9
 200b6f4:	1cc0210e 	bge	r3,r19,200b77c <__s2b+0xf8>
 200b6f8:	a0eb883a 	add	r21,r20,r3
 200b6fc:	a821883a 	mov	r16,r21
 200b700:	a4e9883a 	add	r20,r20,r19
 200b704:	81c00007 	ldb	r7,0(r16)
 200b708:	8809883a 	mov	r4,r17
 200b70c:	84000044 	addi	r16,r16,1
 200b710:	100b883a 	mov	r5,r2
 200b714:	01800284 	movi	r6,10
 200b718:	39fff404 	addi	r7,r7,-48
 200b71c:	200b5700 	call	200b570 <__multadd>
 200b720:	853ff81e 	bne	r16,r20,200b704 <__s2b+0x80>
 200b724:	ace1883a 	add	r16,r21,r19
 200b728:	843ffe04 	addi	r16,r16,-8
 200b72c:	9c800a0e 	bge	r19,r18,200b758 <__s2b+0xd4>
 200b730:	94e5c83a 	sub	r18,r18,r19
 200b734:	84a5883a 	add	r18,r16,r18
 200b738:	81c00007 	ldb	r7,0(r16)
 200b73c:	8809883a 	mov	r4,r17
 200b740:	84000044 	addi	r16,r16,1
 200b744:	100b883a 	mov	r5,r2
 200b748:	01800284 	movi	r6,10
 200b74c:	39fff404 	addi	r7,r7,-48
 200b750:	200b5700 	call	200b570 <__multadd>
 200b754:	84bff81e 	bne	r16,r18,200b738 <__s2b+0xb4>
 200b758:	dfc00617 	ldw	ra,24(sp)
 200b75c:	dd400517 	ldw	r21,20(sp)
 200b760:	dd000417 	ldw	r20,16(sp)
 200b764:	dcc00317 	ldw	r19,12(sp)
 200b768:	dc800217 	ldw	r18,8(sp)
 200b76c:	dc400117 	ldw	r17,4(sp)
 200b770:	dc000017 	ldw	r16,0(sp)
 200b774:	dec00704 	addi	sp,sp,28
 200b778:	f800283a 	ret
 200b77c:	a4000284 	addi	r16,r20,10
 200b780:	1827883a 	mov	r19,r3
 200b784:	003fe906 	br	200b72c <__s2b+0xa8>

0200b788 <__hi0bits>:
 200b788:	20bfffec 	andhi	r2,r4,65535
 200b78c:	1000141e 	bne	r2,zero,200b7e0 <__hi0bits+0x58>
 200b790:	2008943a 	slli	r4,r4,16
 200b794:	00800404 	movi	r2,16
 200b798:	20ffc02c 	andhi	r3,r4,65280
 200b79c:	1800021e 	bne	r3,zero,200b7a8 <__hi0bits+0x20>
 200b7a0:	2008923a 	slli	r4,r4,8
 200b7a4:	10800204 	addi	r2,r2,8
 200b7a8:	20fc002c 	andhi	r3,r4,61440
 200b7ac:	1800021e 	bne	r3,zero,200b7b8 <__hi0bits+0x30>
 200b7b0:	2008913a 	slli	r4,r4,4
 200b7b4:	10800104 	addi	r2,r2,4
 200b7b8:	20f0002c 	andhi	r3,r4,49152
 200b7bc:	1800031e 	bne	r3,zero,200b7cc <__hi0bits+0x44>
 200b7c0:	2109883a 	add	r4,r4,r4
 200b7c4:	10800084 	addi	r2,r2,2
 200b7c8:	2109883a 	add	r4,r4,r4
 200b7cc:	20000316 	blt	r4,zero,200b7dc <__hi0bits+0x54>
 200b7d0:	2110002c 	andhi	r4,r4,16384
 200b7d4:	2000041e 	bne	r4,zero,200b7e8 <__hi0bits+0x60>
 200b7d8:	00800804 	movi	r2,32
 200b7dc:	f800283a 	ret
 200b7e0:	0005883a 	mov	r2,zero
 200b7e4:	003fec06 	br	200b798 <__hi0bits+0x10>
 200b7e8:	10800044 	addi	r2,r2,1
 200b7ec:	f800283a 	ret

0200b7f0 <__lo0bits>:
 200b7f0:	20c00017 	ldw	r3,0(r4)
 200b7f4:	188001cc 	andi	r2,r3,7
 200b7f8:	10000826 	beq	r2,zero,200b81c <__lo0bits+0x2c>
 200b7fc:	1880004c 	andi	r2,r3,1
 200b800:	1000211e 	bne	r2,zero,200b888 <__lo0bits+0x98>
 200b804:	1880008c 	andi	r2,r3,2
 200b808:	1000211e 	bne	r2,zero,200b890 <__lo0bits+0xa0>
 200b80c:	1806d0ba 	srli	r3,r3,2
 200b810:	00800084 	movi	r2,2
 200b814:	20c00015 	stw	r3,0(r4)
 200b818:	f800283a 	ret
 200b81c:	18bfffcc 	andi	r2,r3,65535
 200b820:	10001326 	beq	r2,zero,200b870 <__lo0bits+0x80>
 200b824:	0005883a 	mov	r2,zero
 200b828:	19403fcc 	andi	r5,r3,255
 200b82c:	2800021e 	bne	r5,zero,200b838 <__lo0bits+0x48>
 200b830:	1806d23a 	srli	r3,r3,8
 200b834:	10800204 	addi	r2,r2,8
 200b838:	194003cc 	andi	r5,r3,15
 200b83c:	2800021e 	bne	r5,zero,200b848 <__lo0bits+0x58>
 200b840:	1806d13a 	srli	r3,r3,4
 200b844:	10800104 	addi	r2,r2,4
 200b848:	194000cc 	andi	r5,r3,3
 200b84c:	2800021e 	bne	r5,zero,200b858 <__lo0bits+0x68>
 200b850:	1806d0ba 	srli	r3,r3,2
 200b854:	10800084 	addi	r2,r2,2
 200b858:	1940004c 	andi	r5,r3,1
 200b85c:	2800081e 	bne	r5,zero,200b880 <__lo0bits+0x90>
 200b860:	1806d07a 	srli	r3,r3,1
 200b864:	1800051e 	bne	r3,zero,200b87c <__lo0bits+0x8c>
 200b868:	00800804 	movi	r2,32
 200b86c:	f800283a 	ret
 200b870:	1806d43a 	srli	r3,r3,16
 200b874:	00800404 	movi	r2,16
 200b878:	003feb06 	br	200b828 <__lo0bits+0x38>
 200b87c:	10800044 	addi	r2,r2,1
 200b880:	20c00015 	stw	r3,0(r4)
 200b884:	f800283a 	ret
 200b888:	0005883a 	mov	r2,zero
 200b88c:	f800283a 	ret
 200b890:	1806d07a 	srli	r3,r3,1
 200b894:	00800044 	movi	r2,1
 200b898:	20c00015 	stw	r3,0(r4)
 200b89c:	f800283a 	ret

0200b8a0 <__i2b>:
 200b8a0:	defffd04 	addi	sp,sp,-12
 200b8a4:	dc000015 	stw	r16,0(sp)
 200b8a8:	04000044 	movi	r16,1
 200b8ac:	dc400115 	stw	r17,4(sp)
 200b8b0:	2823883a 	mov	r17,r5
 200b8b4:	800b883a 	mov	r5,r16
 200b8b8:	dfc00215 	stw	ra,8(sp)
 200b8bc:	200b4a00 	call	200b4a0 <_Balloc>
 200b8c0:	14400515 	stw	r17,20(r2)
 200b8c4:	14000415 	stw	r16,16(r2)
 200b8c8:	dfc00217 	ldw	ra,8(sp)
 200b8cc:	dc400117 	ldw	r17,4(sp)
 200b8d0:	dc000017 	ldw	r16,0(sp)
 200b8d4:	dec00304 	addi	sp,sp,12
 200b8d8:	f800283a 	ret

0200b8dc <__multiply>:
 200b8dc:	defffa04 	addi	sp,sp,-24
 200b8e0:	dcc00315 	stw	r19,12(sp)
 200b8e4:	dc400115 	stw	r17,4(sp)
 200b8e8:	34c00417 	ldw	r19,16(r6)
 200b8ec:	2c400417 	ldw	r17,16(r5)
 200b8f0:	dd000415 	stw	r20,16(sp)
 200b8f4:	dc800215 	stw	r18,8(sp)
 200b8f8:	dfc00515 	stw	ra,20(sp)
 200b8fc:	dc000015 	stw	r16,0(sp)
 200b900:	2825883a 	mov	r18,r5
 200b904:	3029883a 	mov	r20,r6
 200b908:	8cc0050e 	bge	r17,r19,200b920 <__multiply+0x44>
 200b90c:	8807883a 	mov	r3,r17
 200b910:	3025883a 	mov	r18,r6
 200b914:	9823883a 	mov	r17,r19
 200b918:	2829883a 	mov	r20,r5
 200b91c:	1827883a 	mov	r19,r3
 200b920:	90800217 	ldw	r2,8(r18)
 200b924:	8ce1883a 	add	r16,r17,r19
 200b928:	91400117 	ldw	r5,4(r18)
 200b92c:	1400010e 	bge	r2,r16,200b934 <__multiply+0x58>
 200b930:	29400044 	addi	r5,r5,1
 200b934:	200b4a00 	call	200b4a0 <_Balloc>
 200b938:	83c00144 	addi	r15,r16,5
 200b93c:	7bdf883a 	add	r15,r15,r15
 200b940:	7bdf883a 	add	r15,r15,r15
 200b944:	13800504 	addi	r14,r2,20
 200b948:	13df883a 	add	r15,r2,r15
 200b94c:	7007883a 	mov	r3,r14
 200b950:	73c0032e 	bgeu	r14,r15,200b960 <__multiply+0x84>
 200b954:	18000015 	stw	zero,0(r3)
 200b958:	18c00104 	addi	r3,r3,4
 200b95c:	1bfffd36 	bltu	r3,r15,200b954 <__multiply+0x78>
 200b960:	99800144 	addi	r6,r19,5
 200b964:	8b000144 	addi	r12,r17,5
 200b968:	318d883a 	add	r6,r6,r6
 200b96c:	6319883a 	add	r12,r12,r12
 200b970:	318d883a 	add	r6,r6,r6
 200b974:	6319883a 	add	r12,r12,r12
 200b978:	a3400504 	addi	r13,r20,20
 200b97c:	a18d883a 	add	r6,r20,r6
 200b980:	94400504 	addi	r17,r18,20
 200b984:	9319883a 	add	r12,r18,r12
 200b988:	6980392e 	bgeu	r13,r6,200ba70 <__multiply+0x194>
 200b98c:	6a800017 	ldw	r10,0(r13)
 200b990:	52ffffcc 	andi	r11,r10,65535
 200b994:	58001826 	beq	r11,zero,200b9f8 <__multiply+0x11c>
 200b998:	7007883a 	mov	r3,r14
 200b99c:	8809883a 	mov	r4,r17
 200b9a0:	000b883a 	mov	r5,zero
 200b9a4:	22400017 	ldw	r9,0(r4)
 200b9a8:	1a000017 	ldw	r8,0(r3)
 200b9ac:	21000104 	addi	r4,r4,4
 200b9b0:	49ffffcc 	andi	r7,r9,65535
 200b9b4:	3acf383a 	mul	r7,r7,r11
 200b9b8:	4812d43a 	srli	r9,r9,16
 200b9bc:	42bfffcc 	andi	r10,r8,65535
 200b9c0:	3a8f883a 	add	r7,r7,r10
 200b9c4:	394f883a 	add	r7,r7,r5
 200b9c8:	4010d43a 	srli	r8,r8,16
 200b9cc:	4acb383a 	mul	r5,r9,r11
 200b9d0:	3814d43a 	srli	r10,r7,16
 200b9d4:	19c0000d 	sth	r7,0(r3)
 200b9d8:	2a0b883a 	add	r5,r5,r8
 200b9dc:	2a8b883a 	add	r5,r5,r10
 200b9e0:	1940008d 	sth	r5,2(r3)
 200b9e4:	280ad43a 	srli	r5,r5,16
 200b9e8:	18c00104 	addi	r3,r3,4
 200b9ec:	233fed36 	bltu	r4,r12,200b9a4 <__multiply+0xc8>
 200b9f0:	19400015 	stw	r5,0(r3)
 200b9f4:	6a800017 	ldw	r10,0(r13)
 200b9f8:	5014d43a 	srli	r10,r10,16
 200b9fc:	50001926 	beq	r10,zero,200ba64 <__multiply+0x188>
 200ba00:	71400017 	ldw	r5,0(r14)
 200ba04:	7007883a 	mov	r3,r14
 200ba08:	8809883a 	mov	r4,r17
 200ba0c:	280f883a 	mov	r7,r5
 200ba10:	0017883a 	mov	r11,zero
 200ba14:	22400017 	ldw	r9,0(r4)
 200ba18:	380ed43a 	srli	r7,r7,16
 200ba1c:	1940000d 	sth	r5,0(r3)
 200ba20:	4a3fffcc 	andi	r8,r9,65535
 200ba24:	4291383a 	mul	r8,r8,r10
 200ba28:	4812d43a 	srli	r9,r9,16
 200ba2c:	18c00104 	addi	r3,r3,4
 200ba30:	41d1883a 	add	r8,r8,r7
 200ba34:	19c00017 	ldw	r7,0(r3)
 200ba38:	42d1883a 	add	r8,r8,r11
 200ba3c:	4a93383a 	mul	r9,r9,r10
 200ba40:	1a3fff8d 	sth	r8,-2(r3)
 200ba44:	4010d43a 	srli	r8,r8,16
 200ba48:	397fffcc 	andi	r5,r7,65535
 200ba4c:	2a4b883a 	add	r5,r5,r9
 200ba50:	2a0b883a 	add	r5,r5,r8
 200ba54:	21000104 	addi	r4,r4,4
 200ba58:	2816d43a 	srli	r11,r5,16
 200ba5c:	233fed36 	bltu	r4,r12,200ba14 <__multiply+0x138>
 200ba60:	19400015 	stw	r5,0(r3)
 200ba64:	6b400104 	addi	r13,r13,4
 200ba68:	73800104 	addi	r14,r14,4
 200ba6c:	69bfc736 	bltu	r13,r6,200b98c <__multiply+0xb0>
 200ba70:	0400090e 	bge	zero,r16,200ba98 <__multiply+0x1bc>
 200ba74:	78ffff17 	ldw	r3,-4(r15)
 200ba78:	7bffff04 	addi	r15,r15,-4
 200ba7c:	18000326 	beq	r3,zero,200ba8c <__multiply+0x1b0>
 200ba80:	00000506 	br	200ba98 <__multiply+0x1bc>
 200ba84:	78c00017 	ldw	r3,0(r15)
 200ba88:	1800031e 	bne	r3,zero,200ba98 <__multiply+0x1bc>
 200ba8c:	843fffc4 	addi	r16,r16,-1
 200ba90:	7bffff04 	addi	r15,r15,-4
 200ba94:	803ffb1e 	bne	r16,zero,200ba84 <__multiply+0x1a8>
 200ba98:	14000415 	stw	r16,16(r2)
 200ba9c:	dfc00517 	ldw	ra,20(sp)
 200baa0:	dd000417 	ldw	r20,16(sp)
 200baa4:	dcc00317 	ldw	r19,12(sp)
 200baa8:	dc800217 	ldw	r18,8(sp)
 200baac:	dc400117 	ldw	r17,4(sp)
 200bab0:	dc000017 	ldw	r16,0(sp)
 200bab4:	dec00604 	addi	sp,sp,24
 200bab8:	f800283a 	ret

0200babc <__pow5mult>:
 200babc:	defffb04 	addi	sp,sp,-20
 200bac0:	dcc00315 	stw	r19,12(sp)
 200bac4:	dc800215 	stw	r18,8(sp)
 200bac8:	dc000015 	stw	r16,0(sp)
 200bacc:	dfc00415 	stw	ra,16(sp)
 200bad0:	dc400115 	stw	r17,4(sp)
 200bad4:	308000cc 	andi	r2,r6,3
 200bad8:	3021883a 	mov	r16,r6
 200badc:	2027883a 	mov	r19,r4
 200bae0:	2825883a 	mov	r18,r5
 200bae4:	10002e1e 	bne	r2,zero,200bba0 <__pow5mult+0xe4>
 200bae8:	8021d0ba 	srai	r16,r16,2
 200baec:	80001a26 	beq	r16,zero,200bb58 <__pow5mult+0x9c>
 200baf0:	9c401217 	ldw	r17,72(r19)
 200baf4:	8800061e 	bne	r17,zero,200bb10 <__pow5mult+0x54>
 200baf8:	00003406 	br	200bbcc <__pow5mult+0x110>
 200bafc:	8021d07a 	srai	r16,r16,1
 200bb00:	80001526 	beq	r16,zero,200bb58 <__pow5mult+0x9c>
 200bb04:	88c00017 	ldw	r3,0(r17)
 200bb08:	18001b26 	beq	r3,zero,200bb78 <__pow5mult+0xbc>
 200bb0c:	1823883a 	mov	r17,r3
 200bb10:	80c0004c 	andi	r3,r16,1
 200bb14:	183ff926 	beq	r3,zero,200bafc <__pow5mult+0x40>
 200bb18:	900b883a 	mov	r5,r18
 200bb1c:	880d883a 	mov	r6,r17
 200bb20:	9809883a 	mov	r4,r19
 200bb24:	200b8dc0 	call	200b8dc <__multiply>
 200bb28:	90001b26 	beq	r18,zero,200bb98 <__pow5mult+0xdc>
 200bb2c:	91000117 	ldw	r4,4(r18)
 200bb30:	98c01317 	ldw	r3,76(r19)
 200bb34:	8021d07a 	srai	r16,r16,1
 200bb38:	2109883a 	add	r4,r4,r4
 200bb3c:	2109883a 	add	r4,r4,r4
 200bb40:	1907883a 	add	r3,r3,r4
 200bb44:	19000017 	ldw	r4,0(r3)
 200bb48:	91000015 	stw	r4,0(r18)
 200bb4c:	1c800015 	stw	r18,0(r3)
 200bb50:	1025883a 	mov	r18,r2
 200bb54:	803feb1e 	bne	r16,zero,200bb04 <__pow5mult+0x48>
 200bb58:	9005883a 	mov	r2,r18
 200bb5c:	dfc00417 	ldw	ra,16(sp)
 200bb60:	dcc00317 	ldw	r19,12(sp)
 200bb64:	dc800217 	ldw	r18,8(sp)
 200bb68:	dc400117 	ldw	r17,4(sp)
 200bb6c:	dc000017 	ldw	r16,0(sp)
 200bb70:	dec00504 	addi	sp,sp,20
 200bb74:	f800283a 	ret
 200bb78:	880b883a 	mov	r5,r17
 200bb7c:	880d883a 	mov	r6,r17
 200bb80:	9809883a 	mov	r4,r19
 200bb84:	200b8dc0 	call	200b8dc <__multiply>
 200bb88:	88800015 	stw	r2,0(r17)
 200bb8c:	10000015 	stw	zero,0(r2)
 200bb90:	1023883a 	mov	r17,r2
 200bb94:	003fde06 	br	200bb10 <__pow5mult+0x54>
 200bb98:	1025883a 	mov	r18,r2
 200bb9c:	003fd706 	br	200bafc <__pow5mult+0x40>
 200bba0:	10bfffc4 	addi	r2,r2,-1
 200bba4:	1085883a 	add	r2,r2,r2
 200bba8:	00c08074 	movhi	r3,513
 200bbac:	18c7aa04 	addi	r3,r3,7848
 200bbb0:	1085883a 	add	r2,r2,r2
 200bbb4:	1885883a 	add	r2,r3,r2
 200bbb8:	11800017 	ldw	r6,0(r2)
 200bbbc:	000f883a 	mov	r7,zero
 200bbc0:	200b5700 	call	200b570 <__multadd>
 200bbc4:	1025883a 	mov	r18,r2
 200bbc8:	003fc706 	br	200bae8 <__pow5mult+0x2c>
 200bbcc:	9809883a 	mov	r4,r19
 200bbd0:	01409c44 	movi	r5,625
 200bbd4:	200b8a00 	call	200b8a0 <__i2b>
 200bbd8:	98801215 	stw	r2,72(r19)
 200bbdc:	1023883a 	mov	r17,r2
 200bbe0:	10000015 	stw	zero,0(r2)
 200bbe4:	003fca06 	br	200bb10 <__pow5mult+0x54>

0200bbe8 <__lshift>:
 200bbe8:	defff904 	addi	sp,sp,-28
 200bbec:	dd400515 	stw	r21,20(sp)
 200bbf0:	dc400115 	stw	r17,4(sp)
 200bbf4:	2d400417 	ldw	r21,16(r5)
 200bbf8:	3023d17a 	srai	r17,r6,5
 200bbfc:	28800217 	ldw	r2,8(r5)
 200bc00:	dd000415 	stw	r20,16(sp)
 200bc04:	8d6b883a 	add	r21,r17,r21
 200bc08:	dcc00315 	stw	r19,12(sp)
 200bc0c:	dc800215 	stw	r18,8(sp)
 200bc10:	dc000015 	stw	r16,0(sp)
 200bc14:	dfc00615 	stw	ra,24(sp)
 200bc18:	ac000044 	addi	r16,r21,1
 200bc1c:	2825883a 	mov	r18,r5
 200bc20:	3029883a 	mov	r20,r6
 200bc24:	2027883a 	mov	r19,r4
 200bc28:	29400117 	ldw	r5,4(r5)
 200bc2c:	1400030e 	bge	r2,r16,200bc3c <__lshift+0x54>
 200bc30:	1085883a 	add	r2,r2,r2
 200bc34:	29400044 	addi	r5,r5,1
 200bc38:	143ffd16 	blt	r2,r16,200bc30 <__lshift+0x48>
 200bc3c:	9809883a 	mov	r4,r19
 200bc40:	200b4a00 	call	200b4a0 <_Balloc>
 200bc44:	10c00504 	addi	r3,r2,20
 200bc48:	0440090e 	bge	zero,r17,200bc70 <__lshift+0x88>
 200bc4c:	000f883a 	mov	r7,zero
 200bc50:	18000015 	stw	zero,0(r3)
 200bc54:	39c00044 	addi	r7,r7,1
 200bc58:	18c00104 	addi	r3,r3,4
 200bc5c:	3c7ffc1e 	bne	r7,r17,200bc50 <__lshift+0x68>
 200bc60:	38c00144 	addi	r3,r7,5
 200bc64:	18c7883a 	add	r3,r3,r3
 200bc68:	18c7883a 	add	r3,r3,r3
 200bc6c:	10c7883a 	add	r3,r2,r3
 200bc70:	92000417 	ldw	r8,16(r18)
 200bc74:	a18007cc 	andi	r6,r20,31
 200bc78:	91c00504 	addi	r7,r18,20
 200bc7c:	42000144 	addi	r8,r8,5
 200bc80:	4211883a 	add	r8,r8,r8
 200bc84:	4211883a 	add	r8,r8,r8
 200bc88:	9211883a 	add	r8,r18,r8
 200bc8c:	30002226 	beq	r6,zero,200bd18 <__lshift+0x130>
 200bc90:	02800804 	movi	r10,32
 200bc94:	5195c83a 	sub	r10,r10,r6
 200bc98:	000b883a 	mov	r5,zero
 200bc9c:	3a400017 	ldw	r9,0(r7)
 200bca0:	18c00104 	addi	r3,r3,4
 200bca4:	39c00104 	addi	r7,r7,4
 200bca8:	4992983a 	sll	r9,r9,r6
 200bcac:	2a4ab03a 	or	r5,r5,r9
 200bcb0:	197fff15 	stw	r5,-4(r3)
 200bcb4:	397fff17 	ldw	r5,-4(r7)
 200bcb8:	2a8ad83a 	srl	r5,r5,r10
 200bcbc:	3a3ff736 	bltu	r7,r8,200bc9c <__lshift+0xb4>
 200bcc0:	19400015 	stw	r5,0(r3)
 200bcc4:	28000126 	beq	r5,zero,200bccc <__lshift+0xe4>
 200bcc8:	ac000084 	addi	r16,r21,2
 200bccc:	91000117 	ldw	r4,4(r18)
 200bcd0:	98c01317 	ldw	r3,76(r19)
 200bcd4:	843fffc4 	addi	r16,r16,-1
 200bcd8:	2109883a 	add	r4,r4,r4
 200bcdc:	2109883a 	add	r4,r4,r4
 200bce0:	1907883a 	add	r3,r3,r4
 200bce4:	19000017 	ldw	r4,0(r3)
 200bce8:	14000415 	stw	r16,16(r2)
 200bcec:	91000015 	stw	r4,0(r18)
 200bcf0:	1c800015 	stw	r18,0(r3)
 200bcf4:	dfc00617 	ldw	ra,24(sp)
 200bcf8:	dd400517 	ldw	r21,20(sp)
 200bcfc:	dd000417 	ldw	r20,16(sp)
 200bd00:	dcc00317 	ldw	r19,12(sp)
 200bd04:	dc800217 	ldw	r18,8(sp)
 200bd08:	dc400117 	ldw	r17,4(sp)
 200bd0c:	dc000017 	ldw	r16,0(sp)
 200bd10:	dec00704 	addi	sp,sp,28
 200bd14:	f800283a 	ret
 200bd18:	39400017 	ldw	r5,0(r7)
 200bd1c:	18c00104 	addi	r3,r3,4
 200bd20:	39c00104 	addi	r7,r7,4
 200bd24:	197fff15 	stw	r5,-4(r3)
 200bd28:	3a3fe82e 	bgeu	r7,r8,200bccc <__lshift+0xe4>
 200bd2c:	39400017 	ldw	r5,0(r7)
 200bd30:	18c00104 	addi	r3,r3,4
 200bd34:	39c00104 	addi	r7,r7,4
 200bd38:	197fff15 	stw	r5,-4(r3)
 200bd3c:	3a3ff636 	bltu	r7,r8,200bd18 <__lshift+0x130>
 200bd40:	003fe206 	br	200bccc <__lshift+0xe4>

0200bd44 <__mcmp>:
 200bd44:	20800417 	ldw	r2,16(r4)
 200bd48:	28c00417 	ldw	r3,16(r5)
 200bd4c:	10c5c83a 	sub	r2,r2,r3
 200bd50:	10000f1e 	bne	r2,zero,200bd90 <__mcmp+0x4c>
 200bd54:	18c00144 	addi	r3,r3,5
 200bd58:	18c7883a 	add	r3,r3,r3
 200bd5c:	18c7883a 	add	r3,r3,r3
 200bd60:	21c00504 	addi	r7,r4,20
 200bd64:	28cb883a 	add	r5,r5,r3
 200bd68:	20c9883a 	add	r4,r4,r3
 200bd6c:	213fff04 	addi	r4,r4,-4
 200bd70:	297fff04 	addi	r5,r5,-4
 200bd74:	21800017 	ldw	r6,0(r4)
 200bd78:	28c00017 	ldw	r3,0(r5)
 200bd7c:	30c0021e 	bne	r6,r3,200bd88 <__mcmp+0x44>
 200bd80:	393ffa36 	bltu	r7,r4,200bd6c <__mcmp+0x28>
 200bd84:	f800283a 	ret
 200bd88:	30c00236 	bltu	r6,r3,200bd94 <__mcmp+0x50>
 200bd8c:	00800044 	movi	r2,1
 200bd90:	f800283a 	ret
 200bd94:	00bfffc4 	movi	r2,-1
 200bd98:	f800283a 	ret

0200bd9c <__mdiff>:
 200bd9c:	defffb04 	addi	sp,sp,-20
 200bda0:	dc000015 	stw	r16,0(sp)
 200bda4:	2821883a 	mov	r16,r5
 200bda8:	dc800215 	stw	r18,8(sp)
 200bdac:	300b883a 	mov	r5,r6
 200bdb0:	2025883a 	mov	r18,r4
 200bdb4:	8009883a 	mov	r4,r16
 200bdb8:	dc400115 	stw	r17,4(sp)
 200bdbc:	dfc00415 	stw	ra,16(sp)
 200bdc0:	dcc00315 	stw	r19,12(sp)
 200bdc4:	3023883a 	mov	r17,r6
 200bdc8:	200bd440 	call	200bd44 <__mcmp>
 200bdcc:	10005026 	beq	r2,zero,200bf10 <__mdiff+0x174>
 200bdd0:	10004a16 	blt	r2,zero,200befc <__mdiff+0x160>
 200bdd4:	0027883a 	mov	r19,zero
 200bdd8:	81400117 	ldw	r5,4(r16)
 200bddc:	9009883a 	mov	r4,r18
 200bde0:	200b4a00 	call	200b4a0 <_Balloc>
 200bde4:	82400417 	ldw	r9,16(r16)
 200bde8:	89800417 	ldw	r6,16(r17)
 200bdec:	14c00315 	stw	r19,12(r2)
 200bdf0:	4b800144 	addi	r14,r9,5
 200bdf4:	31800144 	addi	r6,r6,5
 200bdf8:	739d883a 	add	r14,r14,r14
 200bdfc:	318d883a 	add	r6,r6,r6
 200be00:	739d883a 	add	r14,r14,r14
 200be04:	318d883a 	add	r6,r6,r6
 200be08:	81c00504 	addi	r7,r16,20
 200be0c:	839d883a 	add	r14,r16,r14
 200be10:	8a000504 	addi	r8,r17,20
 200be14:	898d883a 	add	r6,r17,r6
 200be18:	10c00504 	addi	r3,r2,20
 200be1c:	0009883a 	mov	r4,zero
 200be20:	3b000017 	ldw	r12,0(r7)
 200be24:	42c00017 	ldw	r11,0(r8)
 200be28:	42000104 	addi	r8,r8,4
 200be2c:	62bfffcc 	andi	r10,r12,65535
 200be30:	5b7fffcc 	andi	r13,r11,65535
 200be34:	5109883a 	add	r4,r10,r4
 200be38:	2355c83a 	sub	r10,r4,r13
 200be3c:	5816d43a 	srli	r11,r11,16
 200be40:	6008d43a 	srli	r4,r12,16
 200be44:	501bd43a 	srai	r13,r10,16
 200be48:	1a80000d 	sth	r10,0(r3)
 200be4c:	22c9c83a 	sub	r4,r4,r11
 200be50:	2349883a 	add	r4,r4,r13
 200be54:	1900008d 	sth	r4,2(r3)
 200be58:	39c00104 	addi	r7,r7,4
 200be5c:	2009d43a 	srai	r4,r4,16
 200be60:	18c00104 	addi	r3,r3,4
 200be64:	41bfee36 	bltu	r8,r6,200be20 <__mdiff+0x84>
 200be68:	180b883a 	mov	r5,r3
 200be6c:	3815883a 	mov	r10,r7
 200be70:	3b80132e 	bgeu	r7,r14,200bec0 <__mdiff+0x124>
 200be74:	3a000017 	ldw	r8,0(r7)
 200be78:	18c00104 	addi	r3,r3,4
 200be7c:	39c00104 	addi	r7,r7,4
 200be80:	41bfffcc 	andi	r6,r8,65535
 200be84:	310d883a 	add	r6,r6,r4
 200be88:	3009d43a 	srai	r4,r6,16
 200be8c:	4010d43a 	srli	r8,r8,16
 200be90:	19bfff0d 	sth	r6,-4(r3)
 200be94:	2209883a 	add	r4,r4,r8
 200be98:	193fff8d 	sth	r4,-2(r3)
 200be9c:	2009d43a 	srai	r4,r4,16
 200bea0:	3bbff436 	bltu	r7,r14,200be74 <__mdiff+0xd8>
 200bea4:	0286303a 	nor	r3,zero,r10
 200bea8:	1b87883a 	add	r3,r3,r14
 200beac:	1806d0ba 	srli	r3,r3,2
 200beb0:	18c00044 	addi	r3,r3,1
 200beb4:	18c7883a 	add	r3,r3,r3
 200beb8:	18c7883a 	add	r3,r3,r3
 200bebc:	28c7883a 	add	r3,r5,r3
 200bec0:	193fff17 	ldw	r4,-4(r3)
 200bec4:	18ffff04 	addi	r3,r3,-4
 200bec8:	2000041e 	bne	r4,zero,200bedc <__mdiff+0x140>
 200becc:	18ffff04 	addi	r3,r3,-4
 200bed0:	19000017 	ldw	r4,0(r3)
 200bed4:	4a7fffc4 	addi	r9,r9,-1
 200bed8:	203ffc26 	beq	r4,zero,200becc <__mdiff+0x130>
 200bedc:	12400415 	stw	r9,16(r2)
 200bee0:	dfc00417 	ldw	ra,16(sp)
 200bee4:	dcc00317 	ldw	r19,12(sp)
 200bee8:	dc800217 	ldw	r18,8(sp)
 200beec:	dc400117 	ldw	r17,4(sp)
 200bef0:	dc000017 	ldw	r16,0(sp)
 200bef4:	dec00504 	addi	sp,sp,20
 200bef8:	f800283a 	ret
 200befc:	8005883a 	mov	r2,r16
 200bf00:	04c00044 	movi	r19,1
 200bf04:	8821883a 	mov	r16,r17
 200bf08:	1023883a 	mov	r17,r2
 200bf0c:	003fb206 	br	200bdd8 <__mdiff+0x3c>
 200bf10:	9009883a 	mov	r4,r18
 200bf14:	000b883a 	mov	r5,zero
 200bf18:	200b4a00 	call	200b4a0 <_Balloc>
 200bf1c:	00c00044 	movi	r3,1
 200bf20:	10c00415 	stw	r3,16(r2)
 200bf24:	10000515 	stw	zero,20(r2)
 200bf28:	dfc00417 	ldw	ra,16(sp)
 200bf2c:	dcc00317 	ldw	r19,12(sp)
 200bf30:	dc800217 	ldw	r18,8(sp)
 200bf34:	dc400117 	ldw	r17,4(sp)
 200bf38:	dc000017 	ldw	r16,0(sp)
 200bf3c:	dec00504 	addi	sp,sp,20
 200bf40:	f800283a 	ret

0200bf44 <__ulp>:
 200bf44:	295ffc2c 	andhi	r5,r5,32752
 200bf48:	00bf3034 	movhi	r2,64704
 200bf4c:	2887883a 	add	r3,r5,r2
 200bf50:	00c0020e 	bge	zero,r3,200bf5c <__ulp+0x18>
 200bf54:	0005883a 	mov	r2,zero
 200bf58:	f800283a 	ret
 200bf5c:	00c7c83a 	sub	r3,zero,r3
 200bf60:	1805d53a 	srai	r2,r3,20
 200bf64:	00c004c4 	movi	r3,19
 200bf68:	18800a0e 	bge	r3,r2,200bf94 <__ulp+0x50>
 200bf6c:	01000c84 	movi	r4,50
 200bf70:	0007883a 	mov	r3,zero
 200bf74:	20800516 	blt	r4,r2,200bf8c <__ulp+0x48>
 200bf78:	01000cc4 	movi	r4,51
 200bf7c:	2085c83a 	sub	r2,r4,r2
 200bf80:	01000044 	movi	r4,1
 200bf84:	2084983a 	sll	r2,r4,r2
 200bf88:	f800283a 	ret
 200bf8c:	00800044 	movi	r2,1
 200bf90:	f800283a 	ret
 200bf94:	00c00234 	movhi	r3,8
 200bf98:	1887d83a 	sra	r3,r3,r2
 200bf9c:	0005883a 	mov	r2,zero
 200bfa0:	f800283a 	ret

0200bfa4 <__b2d>:
 200bfa4:	defffa04 	addi	sp,sp,-24
 200bfa8:	dc000015 	stw	r16,0(sp)
 200bfac:	24000417 	ldw	r16,16(r4)
 200bfb0:	dc400115 	stw	r17,4(sp)
 200bfb4:	dcc00315 	stw	r19,12(sp)
 200bfb8:	84000144 	addi	r16,r16,5
 200bfbc:	8421883a 	add	r16,r16,r16
 200bfc0:	8421883a 	add	r16,r16,r16
 200bfc4:	2421883a 	add	r16,r4,r16
 200bfc8:	847fff17 	ldw	r17,-4(r16)
 200bfcc:	24c00504 	addi	r19,r4,20
 200bfd0:	dd000415 	stw	r20,16(sp)
 200bfd4:	8809883a 	mov	r4,r17
 200bfd8:	dc800215 	stw	r18,8(sp)
 200bfdc:	2829883a 	mov	r20,r5
 200bfe0:	dfc00515 	stw	ra,20(sp)
 200bfe4:	200b7880 	call	200b788 <__hi0bits>
 200bfe8:	00c00804 	movi	r3,32
 200bfec:	1887c83a 	sub	r3,r3,r2
 200bff0:	a0c00015 	stw	r3,0(r20)
 200bff4:	00c00284 	movi	r3,10
 200bff8:	84bfff04 	addi	r18,r16,-4
 200bffc:	18801216 	blt	r3,r2,200c048 <__b2d+0xa4>
 200c000:	010002c4 	movi	r4,11
 200c004:	2089c83a 	sub	r4,r4,r2
 200c008:	8906d83a 	srl	r3,r17,r4
 200c00c:	18cffc34 	orhi	r3,r3,16368
 200c010:	9c80322e 	bgeu	r19,r18,200c0dc <__b2d+0x138>
 200c014:	817ffe17 	ldw	r5,-8(r16)
 200c018:	2908d83a 	srl	r4,r5,r4
 200c01c:	10800544 	addi	r2,r2,21
 200c020:	88a2983a 	sll	r17,r17,r2
 200c024:	2444b03a 	or	r2,r4,r17
 200c028:	dfc00517 	ldw	ra,20(sp)
 200c02c:	dd000417 	ldw	r20,16(sp)
 200c030:	dcc00317 	ldw	r19,12(sp)
 200c034:	dc800217 	ldw	r18,8(sp)
 200c038:	dc400117 	ldw	r17,4(sp)
 200c03c:	dc000017 	ldw	r16,0(sp)
 200c040:	dec00604 	addi	sp,sp,24
 200c044:	f800283a 	ret
 200c048:	9c801636 	bltu	r19,r18,200c0a4 <__b2d+0x100>
 200c04c:	113ffd44 	addi	r4,r2,-11
 200c050:	000b883a 	mov	r5,zero
 200c054:	20001726 	beq	r4,zero,200c0b4 <__b2d+0x110>
 200c058:	00c00ac4 	movi	r3,43
 200c05c:	1885c83a 	sub	r2,r3,r2
 200c060:	8906983a 	sll	r3,r17,r4
 200c064:	288cd83a 	srl	r6,r5,r2
 200c068:	18cffc34 	orhi	r3,r3,16368
 200c06c:	1986b03a 	or	r3,r3,r6
 200c070:	9c801c2e 	bgeu	r19,r18,200c0e4 <__b2d+0x140>
 200c074:	91bfff17 	ldw	r6,-4(r18)
 200c078:	3084d83a 	srl	r2,r6,r2
 200c07c:	2908983a 	sll	r4,r5,r4
 200c080:	1104b03a 	or	r2,r2,r4
 200c084:	dfc00517 	ldw	ra,20(sp)
 200c088:	dd000417 	ldw	r20,16(sp)
 200c08c:	dcc00317 	ldw	r19,12(sp)
 200c090:	dc800217 	ldw	r18,8(sp)
 200c094:	dc400117 	ldw	r17,4(sp)
 200c098:	dc000017 	ldw	r16,0(sp)
 200c09c:	dec00604 	addi	sp,sp,24
 200c0a0:	f800283a 	ret
 200c0a4:	113ffd44 	addi	r4,r2,-11
 200c0a8:	84bffe04 	addi	r18,r16,-8
 200c0ac:	817ffe17 	ldw	r5,-8(r16)
 200c0b0:	203fe91e 	bne	r4,zero,200c058 <__b2d+0xb4>
 200c0b4:	88cffc34 	orhi	r3,r17,16368
 200c0b8:	2805883a 	mov	r2,r5
 200c0bc:	dfc00517 	ldw	ra,20(sp)
 200c0c0:	dd000417 	ldw	r20,16(sp)
 200c0c4:	dcc00317 	ldw	r19,12(sp)
 200c0c8:	dc800217 	ldw	r18,8(sp)
 200c0cc:	dc400117 	ldw	r17,4(sp)
 200c0d0:	dc000017 	ldw	r16,0(sp)
 200c0d4:	dec00604 	addi	sp,sp,24
 200c0d8:	f800283a 	ret
 200c0dc:	0009883a 	mov	r4,zero
 200c0e0:	003fce06 	br	200c01c <__b2d+0x78>
 200c0e4:	0005883a 	mov	r2,zero
 200c0e8:	003fe406 	br	200c07c <__b2d+0xd8>

0200c0ec <__d2b>:
 200c0ec:	defff804 	addi	sp,sp,-32
 200c0f0:	dc400315 	stw	r17,12(sp)
 200c0f4:	3023883a 	mov	r17,r6
 200c0f8:	dc800415 	stw	r18,16(sp)
 200c0fc:	8824907a 	slli	r18,r17,1
 200c100:	dcc00515 	stw	r19,20(sp)
 200c104:	2827883a 	mov	r19,r5
 200c108:	9024d57a 	srli	r18,r18,21
 200c10c:	01400044 	movi	r5,1
 200c110:	dd000615 	stw	r20,24(sp)
 200c114:	dc000215 	stw	r16,8(sp)
 200c118:	dfc00715 	stw	ra,28(sp)
 200c11c:	3829883a 	mov	r20,r7
 200c120:	200b4a00 	call	200b4a0 <_Balloc>
 200c124:	1021883a 	mov	r16,r2
 200c128:	00800434 	movhi	r2,16
 200c12c:	10bfffc4 	addi	r2,r2,-1
 200c130:	88a2703a 	and	r17,r17,r2
 200c134:	90000126 	beq	r18,zero,200c13c <__d2b+0x50>
 200c138:	8c400434 	orhi	r17,r17,16
 200c13c:	dc400015 	stw	r17,0(sp)
 200c140:	98002226 	beq	r19,zero,200c1cc <__d2b+0xe0>
 200c144:	d9000104 	addi	r4,sp,4
 200c148:	dcc00115 	stw	r19,4(sp)
 200c14c:	200b7f00 	call	200b7f0 <__lo0bits>
 200c150:	d8c00017 	ldw	r3,0(sp)
 200c154:	10002d1e 	bne	r2,zero,200c20c <__d2b+0x120>
 200c158:	d9000117 	ldw	r4,4(sp)
 200c15c:	81000515 	stw	r4,20(r16)
 200c160:	1823003a 	cmpeq	r17,r3,zero
 200c164:	01000084 	movi	r4,2
 200c168:	2463c83a 	sub	r17,r4,r17
 200c16c:	80c00615 	stw	r3,24(r16)
 200c170:	84400415 	stw	r17,16(r16)
 200c174:	90001d1e 	bne	r18,zero,200c1ec <__d2b+0x100>
 200c178:	88c00104 	addi	r3,r17,4
 200c17c:	18c7883a 	add	r3,r3,r3
 200c180:	18c7883a 	add	r3,r3,r3
 200c184:	80c7883a 	add	r3,r16,r3
 200c188:	19000017 	ldw	r4,0(r3)
 200c18c:	10bef384 	addi	r2,r2,-1074
 200c190:	a0800015 	stw	r2,0(r20)
 200c194:	200b7880 	call	200b788 <__hi0bits>
 200c198:	8822917a 	slli	r17,r17,5
 200c19c:	d8c00817 	ldw	r3,32(sp)
 200c1a0:	8885c83a 	sub	r2,r17,r2
 200c1a4:	18800015 	stw	r2,0(r3)
 200c1a8:	8005883a 	mov	r2,r16
 200c1ac:	dfc00717 	ldw	ra,28(sp)
 200c1b0:	dd000617 	ldw	r20,24(sp)
 200c1b4:	dcc00517 	ldw	r19,20(sp)
 200c1b8:	dc800417 	ldw	r18,16(sp)
 200c1bc:	dc400317 	ldw	r17,12(sp)
 200c1c0:	dc000217 	ldw	r16,8(sp)
 200c1c4:	dec00804 	addi	sp,sp,32
 200c1c8:	f800283a 	ret
 200c1cc:	d809883a 	mov	r4,sp
 200c1d0:	200b7f00 	call	200b7f0 <__lo0bits>
 200c1d4:	d8c00017 	ldw	r3,0(sp)
 200c1d8:	04400044 	movi	r17,1
 200c1dc:	84400415 	stw	r17,16(r16)
 200c1e0:	80c00515 	stw	r3,20(r16)
 200c1e4:	10800804 	addi	r2,r2,32
 200c1e8:	903fe326 	beq	r18,zero,200c178 <__d2b+0x8c>
 200c1ec:	00c00d44 	movi	r3,53
 200c1f0:	94bef344 	addi	r18,r18,-1075
 200c1f4:	90a5883a 	add	r18,r18,r2
 200c1f8:	1885c83a 	sub	r2,r3,r2
 200c1fc:	d8c00817 	ldw	r3,32(sp)
 200c200:	a4800015 	stw	r18,0(r20)
 200c204:	18800015 	stw	r2,0(r3)
 200c208:	003fe706 	br	200c1a8 <__d2b+0xbc>
 200c20c:	01000804 	movi	r4,32
 200c210:	2089c83a 	sub	r4,r4,r2
 200c214:	1908983a 	sll	r4,r3,r4
 200c218:	d9400117 	ldw	r5,4(sp)
 200c21c:	1886d83a 	srl	r3,r3,r2
 200c220:	2148b03a 	or	r4,r4,r5
 200c224:	81000515 	stw	r4,20(r16)
 200c228:	d8c00015 	stw	r3,0(sp)
 200c22c:	003fcc06 	br	200c160 <__d2b+0x74>

0200c230 <__ratio>:
 200c230:	defff904 	addi	sp,sp,-28
 200c234:	dc400315 	stw	r17,12(sp)
 200c238:	2823883a 	mov	r17,r5
 200c23c:	d9400104 	addi	r5,sp,4
 200c240:	dfc00615 	stw	ra,24(sp)
 200c244:	dcc00515 	stw	r19,20(sp)
 200c248:	dc800415 	stw	r18,16(sp)
 200c24c:	2027883a 	mov	r19,r4
 200c250:	dc000215 	stw	r16,8(sp)
 200c254:	200bfa40 	call	200bfa4 <__b2d>
 200c258:	8809883a 	mov	r4,r17
 200c25c:	d80b883a 	mov	r5,sp
 200c260:	1025883a 	mov	r18,r2
 200c264:	1821883a 	mov	r16,r3
 200c268:	200bfa40 	call	200bfa4 <__b2d>
 200c26c:	99400417 	ldw	r5,16(r19)
 200c270:	89000417 	ldw	r4,16(r17)
 200c274:	d9800117 	ldw	r6,4(sp)
 200c278:	2909c83a 	sub	r4,r5,r4
 200c27c:	d9400017 	ldw	r5,0(sp)
 200c280:	2008917a 	slli	r4,r4,5
 200c284:	314bc83a 	sub	r5,r6,r5
 200c288:	290b883a 	add	r5,r5,r4
 200c28c:	01400e0e 	bge	zero,r5,200c2c8 <__ratio+0x98>
 200c290:	280a953a 	slli	r5,r5,20
 200c294:	2c21883a 	add	r16,r5,r16
 200c298:	9009883a 	mov	r4,r18
 200c29c:	800b883a 	mov	r5,r16
 200c2a0:	100d883a 	mov	r6,r2
 200c2a4:	180f883a 	mov	r7,r3
 200c2a8:	200dd500 	call	200dd50 <__divdf3>
 200c2ac:	dfc00617 	ldw	ra,24(sp)
 200c2b0:	dcc00517 	ldw	r19,20(sp)
 200c2b4:	dc800417 	ldw	r18,16(sp)
 200c2b8:	dc400317 	ldw	r17,12(sp)
 200c2bc:	dc000217 	ldw	r16,8(sp)
 200c2c0:	dec00704 	addi	sp,sp,28
 200c2c4:	f800283a 	ret
 200c2c8:	280a953a 	slli	r5,r5,20
 200c2cc:	1947c83a 	sub	r3,r3,r5
 200c2d0:	003ff106 	br	200c298 <__ratio+0x68>

0200c2d4 <_mprec_log10>:
 200c2d4:	defffe04 	addi	sp,sp,-8
 200c2d8:	dc000015 	stw	r16,0(sp)
 200c2dc:	dfc00115 	stw	ra,4(sp)
 200c2e0:	008005c4 	movi	r2,23
 200c2e4:	2021883a 	mov	r16,r4
 200c2e8:	11000d0e 	bge	r2,r4,200c320 <_mprec_log10+0x4c>
 200c2ec:	0005883a 	mov	r2,zero
 200c2f0:	00cffc34 	movhi	r3,16368
 200c2f4:	843fffc4 	addi	r16,r16,-1
 200c2f8:	1009883a 	mov	r4,r2
 200c2fc:	180b883a 	mov	r5,r3
 200c300:	000d883a 	mov	r6,zero
 200c304:	01d00934 	movhi	r7,16420
 200c308:	20054980 	call	2005498 <__muldf3>
 200c30c:	803ff91e 	bne	r16,zero,200c2f4 <_mprec_log10+0x20>
 200c310:	dfc00117 	ldw	ra,4(sp)
 200c314:	dc000017 	ldw	r16,0(sp)
 200c318:	dec00204 	addi	sp,sp,8
 200c31c:	f800283a 	ret
 200c320:	202090fa 	slli	r16,r4,3
 200c324:	00808074 	movhi	r2,513
 200c328:	10877804 	addi	r2,r2,7648
 200c32c:	1421883a 	add	r16,r2,r16
 200c330:	80800017 	ldw	r2,0(r16)
 200c334:	80c00117 	ldw	r3,4(r16)
 200c338:	dfc00117 	ldw	ra,4(sp)
 200c33c:	dc000017 	ldw	r16,0(sp)
 200c340:	dec00204 	addi	sp,sp,8
 200c344:	f800283a 	ret

0200c348 <__copybits>:
 200c348:	297fffc4 	addi	r5,r5,-1
 200c34c:	31c00417 	ldw	r7,16(r6)
 200c350:	2811d17a 	srai	r8,r5,5
 200c354:	30800504 	addi	r2,r6,20
 200c358:	39c00144 	addi	r7,r7,5
 200c35c:	42000044 	addi	r8,r8,1
 200c360:	39cf883a 	add	r7,r7,r7
 200c364:	4211883a 	add	r8,r8,r8
 200c368:	39cf883a 	add	r7,r7,r7
 200c36c:	4211883a 	add	r8,r8,r8
 200c370:	31cf883a 	add	r7,r6,r7
 200c374:	2211883a 	add	r8,r4,r8
 200c378:	11c00d2e 	bgeu	r2,r7,200c3b0 <__copybits+0x68>
 200c37c:	2007883a 	mov	r3,r4
 200c380:	11400017 	ldw	r5,0(r2)
 200c384:	18c00104 	addi	r3,r3,4
 200c388:	10800104 	addi	r2,r2,4
 200c38c:	197fff15 	stw	r5,-4(r3)
 200c390:	11fffb36 	bltu	r2,r7,200c380 <__copybits+0x38>
 200c394:	3985c83a 	sub	r2,r7,r6
 200c398:	10bffac4 	addi	r2,r2,-21
 200c39c:	1004d0ba 	srli	r2,r2,2
 200c3a0:	10800044 	addi	r2,r2,1
 200c3a4:	1085883a 	add	r2,r2,r2
 200c3a8:	1085883a 	add	r2,r2,r2
 200c3ac:	2089883a 	add	r4,r4,r2
 200c3b0:	2200032e 	bgeu	r4,r8,200c3c0 <__copybits+0x78>
 200c3b4:	20000015 	stw	zero,0(r4)
 200c3b8:	21000104 	addi	r4,r4,4
 200c3bc:	223ffd36 	bltu	r4,r8,200c3b4 <__copybits+0x6c>
 200c3c0:	f800283a 	ret

0200c3c4 <__any_on>:
 200c3c4:	21800417 	ldw	r6,16(r4)
 200c3c8:	2805d17a 	srai	r2,r5,5
 200c3cc:	20c00504 	addi	r3,r4,20
 200c3d0:	30800f0e 	bge	r6,r2,200c410 <__any_on+0x4c>
 200c3d4:	3005883a 	mov	r2,r6
 200c3d8:	10800144 	addi	r2,r2,5
 200c3dc:	1085883a 	add	r2,r2,r2
 200c3e0:	1085883a 	add	r2,r2,r2
 200c3e4:	2089883a 	add	r4,r4,r2
 200c3e8:	1900152e 	bgeu	r3,r4,200c440 <__any_on+0x7c>
 200c3ec:	20bfff17 	ldw	r2,-4(r4)
 200c3f0:	213fff04 	addi	r4,r4,-4
 200c3f4:	1000041e 	bne	r2,zero,200c408 <__any_on+0x44>
 200c3f8:	1900112e 	bgeu	r3,r4,200c440 <__any_on+0x7c>
 200c3fc:	213fff04 	addi	r4,r4,-4
 200c400:	20800017 	ldw	r2,0(r4)
 200c404:	103ffc26 	beq	r2,zero,200c3f8 <__any_on+0x34>
 200c408:	00800044 	movi	r2,1
 200c40c:	f800283a 	ret
 200c410:	11bff10e 	bge	r2,r6,200c3d8 <__any_on+0x14>
 200c414:	294007cc 	andi	r5,r5,31
 200c418:	283fef26 	beq	r5,zero,200c3d8 <__any_on+0x14>
 200c41c:	11800144 	addi	r6,r2,5
 200c420:	318d883a 	add	r6,r6,r6
 200c424:	318d883a 	add	r6,r6,r6
 200c428:	218d883a 	add	r6,r4,r6
 200c42c:	31800017 	ldw	r6,0(r6)
 200c430:	314ed83a 	srl	r7,r6,r5
 200c434:	394a983a 	sll	r5,r7,r5
 200c438:	29bff31e 	bne	r5,r6,200c408 <__any_on+0x44>
 200c43c:	003fe606 	br	200c3d8 <__any_on+0x14>
 200c440:	0005883a 	mov	r2,zero
 200c444:	f800283a 	ret

0200c448 <_realloc_r>:
 200c448:	defff504 	addi	sp,sp,-44
 200c44c:	dd400615 	stw	r21,24(sp)
 200c450:	dc800315 	stw	r18,12(sp)
 200c454:	dc000115 	stw	r16,4(sp)
 200c458:	dfc00a15 	stw	ra,40(sp)
 200c45c:	df000915 	stw	fp,36(sp)
 200c460:	ddc00815 	stw	r23,32(sp)
 200c464:	dd800715 	stw	r22,28(sp)
 200c468:	dd000515 	stw	r20,20(sp)
 200c46c:	dcc00415 	stw	r19,16(sp)
 200c470:	dc400215 	stw	r17,8(sp)
 200c474:	2821883a 	mov	r16,r5
 200c478:	202b883a 	mov	r21,r4
 200c47c:	3025883a 	mov	r18,r6
 200c480:	28009626 	beq	r5,zero,200c6dc <_realloc_r+0x294>
 200c484:	200e7900 	call	200e790 <__malloc_lock>
 200c488:	80bfff17 	ldw	r2,-4(r16)
 200c48c:	04ffff04 	movi	r19,-4
 200c490:	90c002c4 	addi	r3,r18,11
 200c494:	01000584 	movi	r4,22
 200c498:	85bffe04 	addi	r22,r16,-8
 200c49c:	14e6703a 	and	r19,r2,r19
 200c4a0:	20c0372e 	bgeu	r4,r3,200c580 <_realloc_r+0x138>
 200c4a4:	047ffe04 	movi	r17,-8
 200c4a8:	1c62703a 	and	r17,r3,r17
 200c4ac:	8807883a 	mov	r3,r17
 200c4b0:	88005a16 	blt	r17,zero,200c61c <_realloc_r+0x1d4>
 200c4b4:	8c805936 	bltu	r17,r18,200c61c <_realloc_r+0x1d4>
 200c4b8:	98c0340e 	bge	r19,r3,200c58c <_realloc_r+0x144>
 200c4bc:	07008074 	movhi	fp,513
 200c4c0:	e708bf04 	addi	fp,fp,8956
 200c4c4:	e1400217 	ldw	r5,8(fp)
 200c4c8:	b4c9883a 	add	r4,r22,r19
 200c4cc:	29009026 	beq	r5,r4,200c710 <_realloc_r+0x2c8>
 200c4d0:	21800117 	ldw	r6,4(r4)
 200c4d4:	01ffff84 	movi	r7,-2
 200c4d8:	31ce703a 	and	r7,r6,r7
 200c4dc:	21cf883a 	add	r7,r4,r7
 200c4e0:	39c00117 	ldw	r7,4(r7)
 200c4e4:	39c0004c 	andi	r7,r7,1
 200c4e8:	38004326 	beq	r7,zero,200c5f8 <_realloc_r+0x1b0>
 200c4ec:	000d883a 	mov	r6,zero
 200c4f0:	0009883a 	mov	r4,zero
 200c4f4:	1080004c 	andi	r2,r2,1
 200c4f8:	10005a1e 	bne	r2,zero,200c664 <_realloc_r+0x21c>
 200c4fc:	85fffe17 	ldw	r23,-8(r16)
 200c500:	00bfff04 	movi	r2,-4
 200c504:	b5efc83a 	sub	r23,r22,r23
 200c508:	b9c00117 	ldw	r7,4(r23)
 200c50c:	388e703a 	and	r7,r7,r2
 200c510:	3ccf883a 	add	r7,r7,r19
 200c514:	20005226 	beq	r4,zero,200c660 <_realloc_r+0x218>
 200c518:	31e9883a 	add	r20,r6,r7
 200c51c:	2140c726 	beq	r4,r5,200c83c <_realloc_r+0x3f4>
 200c520:	a0c04f16 	blt	r20,r3,200c660 <_realloc_r+0x218>
 200c524:	20800317 	ldw	r2,12(r4)
 200c528:	20c00217 	ldw	r3,8(r4)
 200c52c:	99bfff04 	addi	r6,r19,-4
 200c530:	01000904 	movi	r4,36
 200c534:	18800315 	stw	r2,12(r3)
 200c538:	10c00215 	stw	r3,8(r2)
 200c53c:	b8c00217 	ldw	r3,8(r23)
 200c540:	b8800317 	ldw	r2,12(r23)
 200c544:	bc800204 	addi	r18,r23,8
 200c548:	18800315 	stw	r2,12(r3)
 200c54c:	10c00215 	stw	r3,8(r2)
 200c550:	2180ed36 	bltu	r4,r6,200c908 <_realloc_r+0x4c0>
 200c554:	008004c4 	movi	r2,19
 200c558:	11809b2e 	bgeu	r2,r6,200c7c8 <_realloc_r+0x380>
 200c55c:	80800017 	ldw	r2,0(r16)
 200c560:	b8800215 	stw	r2,8(r23)
 200c564:	80800117 	ldw	r2,4(r16)
 200c568:	b8800315 	stw	r2,12(r23)
 200c56c:	008006c4 	movi	r2,27
 200c570:	1180f936 	bltu	r2,r6,200c958 <_realloc_r+0x510>
 200c574:	b8800404 	addi	r2,r23,16
 200c578:	80c00204 	addi	r3,r16,8
 200c57c:	00009406 	br	200c7d0 <_realloc_r+0x388>
 200c580:	00c00404 	movi	r3,16
 200c584:	1823883a 	mov	r17,r3
 200c588:	003fca06 	br	200c4b4 <_realloc_r+0x6c>
 200c58c:	9829883a 	mov	r20,r19
 200c590:	a447c83a 	sub	r3,r20,r17
 200c594:	010003c4 	movi	r4,15
 200c598:	1080004c 	andi	r2,r2,1
 200c59c:	20c02336 	bltu	r4,r3,200c62c <_realloc_r+0x1e4>
 200c5a0:	1504b03a 	or	r2,r2,r20
 200c5a4:	b0800115 	stw	r2,4(r22)
 200c5a8:	b52d883a 	add	r22,r22,r20
 200c5ac:	b0800117 	ldw	r2,4(r22)
 200c5b0:	10800054 	ori	r2,r2,1
 200c5b4:	b0800115 	stw	r2,4(r22)
 200c5b8:	a809883a 	mov	r4,r21
 200c5bc:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200c5c0:	8025883a 	mov	r18,r16
 200c5c4:	9005883a 	mov	r2,r18
 200c5c8:	dfc00a17 	ldw	ra,40(sp)
 200c5cc:	df000917 	ldw	fp,36(sp)
 200c5d0:	ddc00817 	ldw	r23,32(sp)
 200c5d4:	dd800717 	ldw	r22,28(sp)
 200c5d8:	dd400617 	ldw	r21,24(sp)
 200c5dc:	dd000517 	ldw	r20,20(sp)
 200c5e0:	dcc00417 	ldw	r19,16(sp)
 200c5e4:	dc800317 	ldw	r18,12(sp)
 200c5e8:	dc400217 	ldw	r17,8(sp)
 200c5ec:	dc000117 	ldw	r16,4(sp)
 200c5f0:	dec00b04 	addi	sp,sp,44
 200c5f4:	f800283a 	ret
 200c5f8:	01ffff04 	movi	r7,-4
 200c5fc:	31cc703a 	and	r6,r6,r7
 200c600:	34e9883a 	add	r20,r6,r19
 200c604:	a0ffbb16 	blt	r20,r3,200c4f4 <_realloc_r+0xac>
 200c608:	20c00317 	ldw	r3,12(r4)
 200c60c:	21000217 	ldw	r4,8(r4)
 200c610:	20c00315 	stw	r3,12(r4)
 200c614:	19000215 	stw	r4,8(r3)
 200c618:	003fdd06 	br	200c590 <_realloc_r+0x148>
 200c61c:	00800304 	movi	r2,12
 200c620:	a8800015 	stw	r2,0(r21)
 200c624:	0025883a 	mov	r18,zero
 200c628:	003fe606 	br	200c5c4 <_realloc_r+0x17c>
 200c62c:	1444b03a 	or	r2,r2,r17
 200c630:	b0800115 	stw	r2,4(r22)
 200c634:	b44b883a 	add	r5,r22,r17
 200c638:	18800054 	ori	r2,r3,1
 200c63c:	28800115 	stw	r2,4(r5)
 200c640:	28c7883a 	add	r3,r5,r3
 200c644:	18800117 	ldw	r2,4(r3)
 200c648:	a809883a 	mov	r4,r21
 200c64c:	29400204 	addi	r5,r5,8
 200c650:	10800054 	ori	r2,r2,1
 200c654:	18800115 	stw	r2,4(r3)
 200c658:	2009d900 	call	2009d90 <_free_r>
 200c65c:	003fd606 	br	200c5b8 <_realloc_r+0x170>
 200c660:	38c0330e 	bge	r7,r3,200c730 <_realloc_r+0x2e8>
 200c664:	900b883a 	mov	r5,r18
 200c668:	a809883a 	mov	r4,r21
 200c66c:	200a9280 	call	200a928 <_malloc_r>
 200c670:	1025883a 	mov	r18,r2
 200c674:	10001626 	beq	r2,zero,200c6d0 <_realloc_r+0x288>
 200c678:	80bfff17 	ldw	r2,-4(r16)
 200c67c:	00ffff84 	movi	r3,-2
 200c680:	913ffe04 	addi	r4,r18,-8
 200c684:	10c6703a 	and	r3,r2,r3
 200c688:	b0c7883a 	add	r3,r22,r3
 200c68c:	20c09926 	beq	r4,r3,200c8f4 <_realloc_r+0x4ac>
 200c690:	99bfff04 	addi	r6,r19,-4
 200c694:	00800904 	movi	r2,36
 200c698:	11806436 	bltu	r2,r6,200c82c <_realloc_r+0x3e4>
 200c69c:	00c004c4 	movi	r3,19
 200c6a0:	19804036 	bltu	r3,r6,200c7a4 <_realloc_r+0x35c>
 200c6a4:	9005883a 	mov	r2,r18
 200c6a8:	8007883a 	mov	r3,r16
 200c6ac:	19000017 	ldw	r4,0(r3)
 200c6b0:	11000015 	stw	r4,0(r2)
 200c6b4:	19000117 	ldw	r4,4(r3)
 200c6b8:	11000115 	stw	r4,4(r2)
 200c6bc:	18c00217 	ldw	r3,8(r3)
 200c6c0:	10c00215 	stw	r3,8(r2)
 200c6c4:	a809883a 	mov	r4,r21
 200c6c8:	800b883a 	mov	r5,r16
 200c6cc:	2009d900 	call	2009d90 <_free_r>
 200c6d0:	a809883a 	mov	r4,r21
 200c6d4:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200c6d8:	003fba06 	br	200c5c4 <_realloc_r+0x17c>
 200c6dc:	300b883a 	mov	r5,r6
 200c6e0:	dfc00a17 	ldw	ra,40(sp)
 200c6e4:	df000917 	ldw	fp,36(sp)
 200c6e8:	ddc00817 	ldw	r23,32(sp)
 200c6ec:	dd800717 	ldw	r22,28(sp)
 200c6f0:	dd400617 	ldw	r21,24(sp)
 200c6f4:	dd000517 	ldw	r20,20(sp)
 200c6f8:	dcc00417 	ldw	r19,16(sp)
 200c6fc:	dc800317 	ldw	r18,12(sp)
 200c700:	dc400217 	ldw	r17,8(sp)
 200c704:	dc000117 	ldw	r16,4(sp)
 200c708:	dec00b04 	addi	sp,sp,44
 200c70c:	200a9281 	jmpi	200a928 <_malloc_r>
 200c710:	29800117 	ldw	r6,4(r5)
 200c714:	013fff04 	movi	r4,-4
 200c718:	89c00404 	addi	r7,r17,16
 200c71c:	310c703a 	and	r6,r6,r4
 200c720:	34c9883a 	add	r4,r6,r19
 200c724:	21c0340e 	bge	r4,r7,200c7f8 <_realloc_r+0x3b0>
 200c728:	2809883a 	mov	r4,r5
 200c72c:	003f7106 	br	200c4f4 <_realloc_r+0xac>
 200c730:	b8800317 	ldw	r2,12(r23)
 200c734:	b8c00217 	ldw	r3,8(r23)
 200c738:	99bfff04 	addi	r6,r19,-4
 200c73c:	01000904 	movi	r4,36
 200c740:	18800315 	stw	r2,12(r3)
 200c744:	10c00215 	stw	r3,8(r2)
 200c748:	bc800204 	addi	r18,r23,8
 200c74c:	21807836 	bltu	r4,r6,200c930 <_realloc_r+0x4e8>
 200c750:	008004c4 	movi	r2,19
 200c754:	1180732e 	bgeu	r2,r6,200c924 <_realloc_r+0x4dc>
 200c758:	80800017 	ldw	r2,0(r16)
 200c75c:	b8800215 	stw	r2,8(r23)
 200c760:	80800117 	ldw	r2,4(r16)
 200c764:	b8800315 	stw	r2,12(r23)
 200c768:	008006c4 	movi	r2,27
 200c76c:	11808936 	bltu	r2,r6,200c994 <_realloc_r+0x54c>
 200c770:	b8800404 	addi	r2,r23,16
 200c774:	80c00204 	addi	r3,r16,8
 200c778:	19000017 	ldw	r4,0(r3)
 200c77c:	9021883a 	mov	r16,r18
 200c780:	3829883a 	mov	r20,r7
 200c784:	11000015 	stw	r4,0(r2)
 200c788:	19000117 	ldw	r4,4(r3)
 200c78c:	b82d883a 	mov	r22,r23
 200c790:	11000115 	stw	r4,4(r2)
 200c794:	18c00217 	ldw	r3,8(r3)
 200c798:	10c00215 	stw	r3,8(r2)
 200c79c:	b8800117 	ldw	r2,4(r23)
 200c7a0:	003f7b06 	br	200c590 <_realloc_r+0x148>
 200c7a4:	80c00017 	ldw	r3,0(r16)
 200c7a8:	90c00015 	stw	r3,0(r18)
 200c7ac:	80c00117 	ldw	r3,4(r16)
 200c7b0:	90c00115 	stw	r3,4(r18)
 200c7b4:	00c006c4 	movi	r3,27
 200c7b8:	19804636 	bltu	r3,r6,200c8d4 <_realloc_r+0x48c>
 200c7bc:	90800204 	addi	r2,r18,8
 200c7c0:	80c00204 	addi	r3,r16,8
 200c7c4:	003fb906 	br	200c6ac <_realloc_r+0x264>
 200c7c8:	9005883a 	mov	r2,r18
 200c7cc:	8007883a 	mov	r3,r16
 200c7d0:	19000017 	ldw	r4,0(r3)
 200c7d4:	9021883a 	mov	r16,r18
 200c7d8:	b82d883a 	mov	r22,r23
 200c7dc:	11000015 	stw	r4,0(r2)
 200c7e0:	19000117 	ldw	r4,4(r3)
 200c7e4:	11000115 	stw	r4,4(r2)
 200c7e8:	18c00217 	ldw	r3,8(r3)
 200c7ec:	10c00215 	stw	r3,8(r2)
 200c7f0:	b8800117 	ldw	r2,4(r23)
 200c7f4:	003f6606 	br	200c590 <_realloc_r+0x148>
 200c7f8:	2445c83a 	sub	r2,r4,r17
 200c7fc:	b46d883a 	add	r22,r22,r17
 200c800:	10800054 	ori	r2,r2,1
 200c804:	b0800115 	stw	r2,4(r22)
 200c808:	80bfff17 	ldw	r2,-4(r16)
 200c80c:	a809883a 	mov	r4,r21
 200c810:	e5800215 	stw	r22,8(fp)
 200c814:	1080004c 	andi	r2,r2,1
 200c818:	88a2b03a 	or	r17,r17,r2
 200c81c:	847fff15 	stw	r17,-4(r16)
 200c820:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200c824:	8025883a 	mov	r18,r16
 200c828:	003f6606 	br	200c5c4 <_realloc_r+0x17c>
 200c82c:	9009883a 	mov	r4,r18
 200c830:	800b883a 	mov	r5,r16
 200c834:	200b29c0 	call	200b29c <memmove>
 200c838:	003fa206 	br	200c6c4 <_realloc_r+0x27c>
 200c83c:	88800404 	addi	r2,r17,16
 200c840:	a0bf8716 	blt	r20,r2,200c660 <_realloc_r+0x218>
 200c844:	b8800317 	ldw	r2,12(r23)
 200c848:	b8c00217 	ldw	r3,8(r23)
 200c84c:	99bfff04 	addi	r6,r19,-4
 200c850:	01000904 	movi	r4,36
 200c854:	18800315 	stw	r2,12(r3)
 200c858:	10c00215 	stw	r3,8(r2)
 200c85c:	bc800204 	addi	r18,r23,8
 200c860:	21806536 	bltu	r4,r6,200c9f8 <_realloc_r+0x5b0>
 200c864:	008004c4 	movi	r2,19
 200c868:	1180592e 	bgeu	r2,r6,200c9d0 <_realloc_r+0x588>
 200c86c:	80800017 	ldw	r2,0(r16)
 200c870:	b8800215 	stw	r2,8(r23)
 200c874:	80800117 	ldw	r2,4(r16)
 200c878:	b8800315 	stw	r2,12(r23)
 200c87c:	008006c4 	movi	r2,27
 200c880:	11806136 	bltu	r2,r6,200ca08 <_realloc_r+0x5c0>
 200c884:	b8800404 	addi	r2,r23,16
 200c888:	80c00204 	addi	r3,r16,8
 200c88c:	19000017 	ldw	r4,0(r3)
 200c890:	11000015 	stw	r4,0(r2)
 200c894:	19000117 	ldw	r4,4(r3)
 200c898:	11000115 	stw	r4,4(r2)
 200c89c:	18c00217 	ldw	r3,8(r3)
 200c8a0:	10c00215 	stw	r3,8(r2)
 200c8a4:	a447c83a 	sub	r3,r20,r17
 200c8a8:	bc45883a 	add	r2,r23,r17
 200c8ac:	18c00054 	ori	r3,r3,1
 200c8b0:	10c00115 	stw	r3,4(r2)
 200c8b4:	b8c00117 	ldw	r3,4(r23)
 200c8b8:	e0800215 	stw	r2,8(fp)
 200c8bc:	a809883a 	mov	r4,r21
 200c8c0:	1880004c 	andi	r2,r3,1
 200c8c4:	88a2b03a 	or	r17,r17,r2
 200c8c8:	bc400115 	stw	r17,4(r23)
 200c8cc:	200e7b00 	call	200e7b0 <__malloc_unlock>
 200c8d0:	003f3c06 	br	200c5c4 <_realloc_r+0x17c>
 200c8d4:	80c00217 	ldw	r3,8(r16)
 200c8d8:	90c00215 	stw	r3,8(r18)
 200c8dc:	80c00317 	ldw	r3,12(r16)
 200c8e0:	90c00315 	stw	r3,12(r18)
 200c8e4:	30802426 	beq	r6,r2,200c978 <_realloc_r+0x530>
 200c8e8:	90800404 	addi	r2,r18,16
 200c8ec:	80c00404 	addi	r3,r16,16
 200c8f0:	003f6e06 	br	200c6ac <_realloc_r+0x264>
 200c8f4:	953fff17 	ldw	r20,-4(r18)
 200c8f8:	00ffff04 	movi	r3,-4
 200c8fc:	a0e8703a 	and	r20,r20,r3
 200c900:	a4e9883a 	add	r20,r20,r19
 200c904:	003f2206 	br	200c590 <_realloc_r+0x148>
 200c908:	800b883a 	mov	r5,r16
 200c90c:	9009883a 	mov	r4,r18
 200c910:	200b29c0 	call	200b29c <memmove>
 200c914:	9021883a 	mov	r16,r18
 200c918:	b8800117 	ldw	r2,4(r23)
 200c91c:	b82d883a 	mov	r22,r23
 200c920:	003f1b06 	br	200c590 <_realloc_r+0x148>
 200c924:	9005883a 	mov	r2,r18
 200c928:	8007883a 	mov	r3,r16
 200c92c:	003f9206 	br	200c778 <_realloc_r+0x330>
 200c930:	800b883a 	mov	r5,r16
 200c934:	9009883a 	mov	r4,r18
 200c938:	d9c00015 	stw	r7,0(sp)
 200c93c:	200b29c0 	call	200b29c <memmove>
 200c940:	d9c00017 	ldw	r7,0(sp)
 200c944:	9021883a 	mov	r16,r18
 200c948:	b8800117 	ldw	r2,4(r23)
 200c94c:	3829883a 	mov	r20,r7
 200c950:	b82d883a 	mov	r22,r23
 200c954:	003f0e06 	br	200c590 <_realloc_r+0x148>
 200c958:	80800217 	ldw	r2,8(r16)
 200c95c:	b8800415 	stw	r2,16(r23)
 200c960:	80800317 	ldw	r2,12(r16)
 200c964:	b8800515 	stw	r2,20(r23)
 200c968:	31001226 	beq	r6,r4,200c9b4 <_realloc_r+0x56c>
 200c96c:	b8800604 	addi	r2,r23,24
 200c970:	80c00404 	addi	r3,r16,16
 200c974:	003f9606 	br	200c7d0 <_realloc_r+0x388>
 200c978:	81000417 	ldw	r4,16(r16)
 200c97c:	90800604 	addi	r2,r18,24
 200c980:	80c00604 	addi	r3,r16,24
 200c984:	91000415 	stw	r4,16(r18)
 200c988:	81000517 	ldw	r4,20(r16)
 200c98c:	91000515 	stw	r4,20(r18)
 200c990:	003f4606 	br	200c6ac <_realloc_r+0x264>
 200c994:	80800217 	ldw	r2,8(r16)
 200c998:	b8800415 	stw	r2,16(r23)
 200c99c:	80800317 	ldw	r2,12(r16)
 200c9a0:	b8800515 	stw	r2,20(r23)
 200c9a4:	31000d26 	beq	r6,r4,200c9dc <_realloc_r+0x594>
 200c9a8:	b8800604 	addi	r2,r23,24
 200c9ac:	80c00404 	addi	r3,r16,16
 200c9b0:	003f7106 	br	200c778 <_realloc_r+0x330>
 200c9b4:	81000417 	ldw	r4,16(r16)
 200c9b8:	b8800804 	addi	r2,r23,32
 200c9bc:	80c00604 	addi	r3,r16,24
 200c9c0:	b9000615 	stw	r4,24(r23)
 200c9c4:	81000517 	ldw	r4,20(r16)
 200c9c8:	b9000715 	stw	r4,28(r23)
 200c9cc:	003f8006 	br	200c7d0 <_realloc_r+0x388>
 200c9d0:	9005883a 	mov	r2,r18
 200c9d4:	8007883a 	mov	r3,r16
 200c9d8:	003fac06 	br	200c88c <_realloc_r+0x444>
 200c9dc:	81000417 	ldw	r4,16(r16)
 200c9e0:	b8800804 	addi	r2,r23,32
 200c9e4:	80c00604 	addi	r3,r16,24
 200c9e8:	b9000615 	stw	r4,24(r23)
 200c9ec:	81000517 	ldw	r4,20(r16)
 200c9f0:	b9000715 	stw	r4,28(r23)
 200c9f4:	003f6006 	br	200c778 <_realloc_r+0x330>
 200c9f8:	9009883a 	mov	r4,r18
 200c9fc:	800b883a 	mov	r5,r16
 200ca00:	200b29c0 	call	200b29c <memmove>
 200ca04:	003fa706 	br	200c8a4 <_realloc_r+0x45c>
 200ca08:	80800217 	ldw	r2,8(r16)
 200ca0c:	b8800415 	stw	r2,16(r23)
 200ca10:	80800317 	ldw	r2,12(r16)
 200ca14:	b8800515 	stw	r2,20(r23)
 200ca18:	31000326 	beq	r6,r4,200ca28 <_realloc_r+0x5e0>
 200ca1c:	b8800604 	addi	r2,r23,24
 200ca20:	80c00404 	addi	r3,r16,16
 200ca24:	003f9906 	br	200c88c <_realloc_r+0x444>
 200ca28:	81000417 	ldw	r4,16(r16)
 200ca2c:	b8800804 	addi	r2,r23,32
 200ca30:	80c00604 	addi	r3,r16,24
 200ca34:	b9000615 	stw	r4,24(r23)
 200ca38:	81000517 	ldw	r4,20(r16)
 200ca3c:	b9000715 	stw	r4,28(r23)
 200ca40:	003f9206 	br	200c88c <_realloc_r+0x444>

0200ca44 <__isinfd>:
 200ca44:	0105c83a 	sub	r2,zero,r4
 200ca48:	1108b03a 	or	r4,r2,r4
 200ca4c:	2004d7fa 	srli	r2,r4,31
 200ca50:	00e00034 	movhi	r3,32768
 200ca54:	18ffffc4 	addi	r3,r3,-1
 200ca58:	28ca703a 	and	r5,r5,r3
 200ca5c:	1144b03a 	or	r2,r2,r5
 200ca60:	00dffc34 	movhi	r3,32752
 200ca64:	1885c83a 	sub	r2,r3,r2
 200ca68:	0087c83a 	sub	r3,zero,r2
 200ca6c:	1884b03a 	or	r2,r3,r2
 200ca70:	1005d7fa 	srai	r2,r2,31
 200ca74:	10800044 	addi	r2,r2,1
 200ca78:	f800283a 	ret

0200ca7c <__isnand>:
 200ca7c:	0105c83a 	sub	r2,zero,r4
 200ca80:	1108b03a 	or	r4,r2,r4
 200ca84:	2004d7fa 	srli	r2,r4,31
 200ca88:	00e00034 	movhi	r3,32768
 200ca8c:	18ffffc4 	addi	r3,r3,-1
 200ca90:	28ca703a 	and	r5,r5,r3
 200ca94:	1144b03a 	or	r2,r2,r5
 200ca98:	00dffc34 	movhi	r3,32752
 200ca9c:	1885c83a 	sub	r2,r3,r2
 200caa0:	1004d7fa 	srli	r2,r2,31
 200caa4:	f800283a 	ret

0200caa8 <_sbrk_r>:
 200caa8:	defffd04 	addi	sp,sp,-12
 200caac:	dc400115 	stw	r17,4(sp)
 200cab0:	dc000015 	stw	r16,0(sp)
 200cab4:	2023883a 	mov	r17,r4
 200cab8:	04008074 	movhi	r16,513
 200cabc:	840e8e04 	addi	r16,r16,14904
 200cac0:	2809883a 	mov	r4,r5
 200cac4:	dfc00215 	stw	ra,8(sp)
 200cac8:	80000015 	stw	zero,0(r16)
 200cacc:	200e9700 	call	200e970 <sbrk>
 200cad0:	00ffffc4 	movi	r3,-1
 200cad4:	10c00526 	beq	r2,r3,200caec <_sbrk_r+0x44>
 200cad8:	dfc00217 	ldw	ra,8(sp)
 200cadc:	dc400117 	ldw	r17,4(sp)
 200cae0:	dc000017 	ldw	r16,0(sp)
 200cae4:	dec00304 	addi	sp,sp,12
 200cae8:	f800283a 	ret
 200caec:	80c00017 	ldw	r3,0(r16)
 200caf0:	183ff926 	beq	r3,zero,200cad8 <_sbrk_r+0x30>
 200caf4:	88c00015 	stw	r3,0(r17)
 200caf8:	dfc00217 	ldw	ra,8(sp)
 200cafc:	dc400117 	ldw	r17,4(sp)
 200cb00:	dc000017 	ldw	r16,0(sp)
 200cb04:	dec00304 	addi	sp,sp,12
 200cb08:	f800283a 	ret

0200cb0c <__sread>:
 200cb0c:	defffe04 	addi	sp,sp,-8
 200cb10:	dc000015 	stw	r16,0(sp)
 200cb14:	2821883a 	mov	r16,r5
 200cb18:	2940038f 	ldh	r5,14(r5)
 200cb1c:	dfc00115 	stw	ra,4(sp)
 200cb20:	200d1900 	call	200d190 <_read_r>
 200cb24:	10000716 	blt	r2,zero,200cb44 <__sread+0x38>
 200cb28:	80c01417 	ldw	r3,80(r16)
 200cb2c:	1887883a 	add	r3,r3,r2
 200cb30:	80c01415 	stw	r3,80(r16)
 200cb34:	dfc00117 	ldw	ra,4(sp)
 200cb38:	dc000017 	ldw	r16,0(sp)
 200cb3c:	dec00204 	addi	sp,sp,8
 200cb40:	f800283a 	ret
 200cb44:	80c0030b 	ldhu	r3,12(r16)
 200cb48:	18fbffcc 	andi	r3,r3,61439
 200cb4c:	80c0030d 	sth	r3,12(r16)
 200cb50:	dfc00117 	ldw	ra,4(sp)
 200cb54:	dc000017 	ldw	r16,0(sp)
 200cb58:	dec00204 	addi	sp,sp,8
 200cb5c:	f800283a 	ret

0200cb60 <__swrite>:
 200cb60:	2880030b 	ldhu	r2,12(r5)
 200cb64:	defffb04 	addi	sp,sp,-20
 200cb68:	dcc00315 	stw	r19,12(sp)
 200cb6c:	10c0400c 	andi	r3,r2,256
 200cb70:	18ffffcc 	andi	r3,r3,65535
 200cb74:	18e0001c 	xori	r3,r3,32768
 200cb78:	dc800215 	stw	r18,8(sp)
 200cb7c:	dc400115 	stw	r17,4(sp)
 200cb80:	dc000015 	stw	r16,0(sp)
 200cb84:	dfc00415 	stw	ra,16(sp)
 200cb88:	18e00004 	addi	r3,r3,-32768
 200cb8c:	2821883a 	mov	r16,r5
 200cb90:	2027883a 	mov	r19,r4
 200cb94:	3025883a 	mov	r18,r6
 200cb98:	3823883a 	mov	r17,r7
 200cb9c:	18000526 	beq	r3,zero,200cbb4 <__swrite+0x54>
 200cba0:	2940038f 	ldh	r5,14(r5)
 200cba4:	000d883a 	mov	r6,zero
 200cba8:	01c00084 	movi	r7,2
 200cbac:	200d1240 	call	200d124 <_lseek_r>
 200cbb0:	8080030b 	ldhu	r2,12(r16)
 200cbb4:	8140038f 	ldh	r5,14(r16)
 200cbb8:	10bbffcc 	andi	r2,r2,61439
 200cbbc:	9809883a 	mov	r4,r19
 200cbc0:	900d883a 	mov	r6,r18
 200cbc4:	880f883a 	mov	r7,r17
 200cbc8:	8080030d 	sth	r2,12(r16)
 200cbcc:	dfc00417 	ldw	ra,16(sp)
 200cbd0:	dcc00317 	ldw	r19,12(sp)
 200cbd4:	dc800217 	ldw	r18,8(sp)
 200cbd8:	dc400117 	ldw	r17,4(sp)
 200cbdc:	dc000017 	ldw	r16,0(sp)
 200cbe0:	dec00504 	addi	sp,sp,20
 200cbe4:	200cd7c1 	jmpi	200cd7c <_write_r>

0200cbe8 <__sseek>:
 200cbe8:	defffe04 	addi	sp,sp,-8
 200cbec:	dc000015 	stw	r16,0(sp)
 200cbf0:	2821883a 	mov	r16,r5
 200cbf4:	2940038f 	ldh	r5,14(r5)
 200cbf8:	dfc00115 	stw	ra,4(sp)
 200cbfc:	200d1240 	call	200d124 <_lseek_r>
 200cc00:	00ffffc4 	movi	r3,-1
 200cc04:	10c00826 	beq	r2,r3,200cc28 <__sseek+0x40>
 200cc08:	80c0030b 	ldhu	r3,12(r16)
 200cc0c:	80801415 	stw	r2,80(r16)
 200cc10:	18c40014 	ori	r3,r3,4096
 200cc14:	80c0030d 	sth	r3,12(r16)
 200cc18:	dfc00117 	ldw	ra,4(sp)
 200cc1c:	dc000017 	ldw	r16,0(sp)
 200cc20:	dec00204 	addi	sp,sp,8
 200cc24:	f800283a 	ret
 200cc28:	80c0030b 	ldhu	r3,12(r16)
 200cc2c:	18fbffcc 	andi	r3,r3,61439
 200cc30:	80c0030d 	sth	r3,12(r16)
 200cc34:	dfc00117 	ldw	ra,4(sp)
 200cc38:	dc000017 	ldw	r16,0(sp)
 200cc3c:	dec00204 	addi	sp,sp,8
 200cc40:	f800283a 	ret

0200cc44 <__sclose>:
 200cc44:	2940038f 	ldh	r5,14(r5)
 200cc48:	200cea41 	jmpi	200cea4 <_close_r>

0200cc4c <strcmp>:
 200cc4c:	2904b03a 	or	r2,r5,r4
 200cc50:	108000cc 	andi	r2,r2,3
 200cc54:	1000171e 	bne	r2,zero,200ccb4 <strcmp+0x68>
 200cc58:	20800017 	ldw	r2,0(r4)
 200cc5c:	28c00017 	ldw	r3,0(r5)
 200cc60:	10c0141e 	bne	r2,r3,200ccb4 <strcmp+0x68>
 200cc64:	027fbff4 	movhi	r9,65279
 200cc68:	4a7fbfc4 	addi	r9,r9,-257
 200cc6c:	1247883a 	add	r3,r2,r9
 200cc70:	0084303a 	nor	r2,zero,r2
 200cc74:	1884703a 	and	r2,r3,r2
 200cc78:	02202074 	movhi	r8,32897
 200cc7c:	42202004 	addi	r8,r8,-32640
 200cc80:	1204703a 	and	r2,r2,r8
 200cc84:	10000226 	beq	r2,zero,200cc90 <strcmp+0x44>
 200cc88:	00001706 	br	200cce8 <strcmp+0x9c>
 200cc8c:	3000161e 	bne	r6,zero,200cce8 <strcmp+0x9c>
 200cc90:	21000104 	addi	r4,r4,4
 200cc94:	20800017 	ldw	r2,0(r4)
 200cc98:	29400104 	addi	r5,r5,4
 200cc9c:	28c00017 	ldw	r3,0(r5)
 200cca0:	124f883a 	add	r7,r2,r9
 200cca4:	008c303a 	nor	r6,zero,r2
 200cca8:	398c703a 	and	r6,r7,r6
 200ccac:	320c703a 	and	r6,r6,r8
 200ccb0:	10fff626 	beq	r2,r3,200cc8c <strcmp+0x40>
 200ccb4:	20800007 	ldb	r2,0(r4)
 200ccb8:	1000051e 	bne	r2,zero,200ccd0 <strcmp+0x84>
 200ccbc:	00000606 	br	200ccd8 <strcmp+0x8c>
 200ccc0:	21000044 	addi	r4,r4,1
 200ccc4:	20800007 	ldb	r2,0(r4)
 200ccc8:	29400044 	addi	r5,r5,1
 200cccc:	10000226 	beq	r2,zero,200ccd8 <strcmp+0x8c>
 200ccd0:	28c00007 	ldb	r3,0(r5)
 200ccd4:	10fffa26 	beq	r2,r3,200ccc0 <strcmp+0x74>
 200ccd8:	20c00003 	ldbu	r3,0(r4)
 200ccdc:	28800003 	ldbu	r2,0(r5)
 200cce0:	1885c83a 	sub	r2,r3,r2
 200cce4:	f800283a 	ret
 200cce8:	0005883a 	mov	r2,zero
 200ccec:	f800283a 	ret

0200ccf0 <strlen>:
 200ccf0:	208000cc 	andi	r2,r4,3
 200ccf4:	10001f1e 	bne	r2,zero,200cd74 <strlen+0x84>
 200ccf8:	20800017 	ldw	r2,0(r4)
 200ccfc:	01ffbff4 	movhi	r7,65279
 200cd00:	39ffbfc4 	addi	r7,r7,-257
 200cd04:	01a02074 	movhi	r6,32897
 200cd08:	31a02004 	addi	r6,r6,-32640
 200cd0c:	11c7883a 	add	r3,r2,r7
 200cd10:	0084303a 	nor	r2,zero,r2
 200cd14:	1886703a 	and	r3,r3,r2
 200cd18:	1986703a 	and	r3,r3,r6
 200cd1c:	2005883a 	mov	r2,r4
 200cd20:	1800101e 	bne	r3,zero,200cd64 <strlen+0x74>
 200cd24:	10800104 	addi	r2,r2,4
 200cd28:	10c00017 	ldw	r3,0(r2)
 200cd2c:	19cb883a 	add	r5,r3,r7
 200cd30:	00c6303a 	nor	r3,zero,r3
 200cd34:	28c6703a 	and	r3,r5,r3
 200cd38:	1986703a 	and	r3,r3,r6
 200cd3c:	1800091e 	bne	r3,zero,200cd64 <strlen+0x74>
 200cd40:	10800104 	addi	r2,r2,4
 200cd44:	10c00017 	ldw	r3,0(r2)
 200cd48:	19cb883a 	add	r5,r3,r7
 200cd4c:	00c6303a 	nor	r3,zero,r3
 200cd50:	28c6703a 	and	r3,r5,r3
 200cd54:	1986703a 	and	r3,r3,r6
 200cd58:	183ff226 	beq	r3,zero,200cd24 <strlen+0x34>
 200cd5c:	00000106 	br	200cd64 <strlen+0x74>
 200cd60:	10800044 	addi	r2,r2,1
 200cd64:	10c00007 	ldb	r3,0(r2)
 200cd68:	183ffd1e 	bne	r3,zero,200cd60 <strlen+0x70>
 200cd6c:	1105c83a 	sub	r2,r2,r4
 200cd70:	f800283a 	ret
 200cd74:	2005883a 	mov	r2,r4
 200cd78:	003ffa06 	br	200cd64 <strlen+0x74>

0200cd7c <_write_r>:
 200cd7c:	defffd04 	addi	sp,sp,-12
 200cd80:	dc400115 	stw	r17,4(sp)
 200cd84:	dc000015 	stw	r16,0(sp)
 200cd88:	2023883a 	mov	r17,r4
 200cd8c:	04008074 	movhi	r16,513
 200cd90:	840e8e04 	addi	r16,r16,14904
 200cd94:	2809883a 	mov	r4,r5
 200cd98:	300b883a 	mov	r5,r6
 200cd9c:	380d883a 	mov	r6,r7
 200cda0:	dfc00215 	stw	ra,8(sp)
 200cda4:	80000015 	stw	zero,0(r16)
 200cda8:	200eaa00 	call	200eaa0 <write>
 200cdac:	00ffffc4 	movi	r3,-1
 200cdb0:	10c00526 	beq	r2,r3,200cdc8 <_write_r+0x4c>
 200cdb4:	dfc00217 	ldw	ra,8(sp)
 200cdb8:	dc400117 	ldw	r17,4(sp)
 200cdbc:	dc000017 	ldw	r16,0(sp)
 200cdc0:	dec00304 	addi	sp,sp,12
 200cdc4:	f800283a 	ret
 200cdc8:	80c00017 	ldw	r3,0(r16)
 200cdcc:	183ff926 	beq	r3,zero,200cdb4 <_write_r+0x38>
 200cdd0:	88c00015 	stw	r3,0(r17)
 200cdd4:	dfc00217 	ldw	ra,8(sp)
 200cdd8:	dc400117 	ldw	r17,4(sp)
 200cddc:	dc000017 	ldw	r16,0(sp)
 200cde0:	dec00304 	addi	sp,sp,12
 200cde4:	f800283a 	ret

0200cde8 <_calloc_r>:
 200cde8:	314b383a 	mul	r5,r6,r5
 200cdec:	defffe04 	addi	sp,sp,-8
 200cdf0:	dc000015 	stw	r16,0(sp)
 200cdf4:	dfc00115 	stw	ra,4(sp)
 200cdf8:	200a9280 	call	200a928 <_malloc_r>
 200cdfc:	1021883a 	mov	r16,r2
 200ce00:	10000c26 	beq	r2,zero,200ce34 <_calloc_r+0x4c>
 200ce04:	11bfff17 	ldw	r6,-4(r2)
 200ce08:	00ffff04 	movi	r3,-4
 200ce0c:	00800904 	movi	r2,36
 200ce10:	30cc703a 	and	r6,r6,r3
 200ce14:	30cd883a 	add	r6,r6,r3
 200ce18:	11801436 	bltu	r2,r6,200ce6c <_calloc_r+0x84>
 200ce1c:	00c004c4 	movi	r3,19
 200ce20:	19800936 	bltu	r3,r6,200ce48 <_calloc_r+0x60>
 200ce24:	8005883a 	mov	r2,r16
 200ce28:	10000015 	stw	zero,0(r2)
 200ce2c:	10000115 	stw	zero,4(r2)
 200ce30:	10000215 	stw	zero,8(r2)
 200ce34:	8005883a 	mov	r2,r16
 200ce38:	dfc00117 	ldw	ra,4(sp)
 200ce3c:	dc000017 	ldw	r16,0(sp)
 200ce40:	dec00204 	addi	sp,sp,8
 200ce44:	f800283a 	ret
 200ce48:	80000015 	stw	zero,0(r16)
 200ce4c:	80000115 	stw	zero,4(r16)
 200ce50:	00c006c4 	movi	r3,27
 200ce54:	19800d2e 	bgeu	r3,r6,200ce8c <_calloc_r+0xa4>
 200ce58:	80000215 	stw	zero,8(r16)
 200ce5c:	80000315 	stw	zero,12(r16)
 200ce60:	30800c26 	beq	r6,r2,200ce94 <_calloc_r+0xac>
 200ce64:	80800404 	addi	r2,r16,16
 200ce68:	003fef06 	br	200ce28 <_calloc_r+0x40>
 200ce6c:	8009883a 	mov	r4,r16
 200ce70:	000b883a 	mov	r5,zero
 200ce74:	200b3c40 	call	200b3c4 <memset>
 200ce78:	8005883a 	mov	r2,r16
 200ce7c:	dfc00117 	ldw	ra,4(sp)
 200ce80:	dc000017 	ldw	r16,0(sp)
 200ce84:	dec00204 	addi	sp,sp,8
 200ce88:	f800283a 	ret
 200ce8c:	80800204 	addi	r2,r16,8
 200ce90:	003fe506 	br	200ce28 <_calloc_r+0x40>
 200ce94:	80000415 	stw	zero,16(r16)
 200ce98:	80000515 	stw	zero,20(r16)
 200ce9c:	80800604 	addi	r2,r16,24
 200cea0:	003fe106 	br	200ce28 <_calloc_r+0x40>

0200cea4 <_close_r>:
 200cea4:	defffd04 	addi	sp,sp,-12
 200cea8:	dc400115 	stw	r17,4(sp)
 200ceac:	dc000015 	stw	r16,0(sp)
 200ceb0:	2023883a 	mov	r17,r4
 200ceb4:	04008074 	movhi	r16,513
 200ceb8:	840e8e04 	addi	r16,r16,14904
 200cebc:	2809883a 	mov	r4,r5
 200cec0:	dfc00215 	stw	ra,8(sp)
 200cec4:	80000015 	stw	zero,0(r16)
 200cec8:	200e3180 	call	200e318 <close>
 200cecc:	00ffffc4 	movi	r3,-1
 200ced0:	10c00526 	beq	r2,r3,200cee8 <_close_r+0x44>
 200ced4:	dfc00217 	ldw	ra,8(sp)
 200ced8:	dc400117 	ldw	r17,4(sp)
 200cedc:	dc000017 	ldw	r16,0(sp)
 200cee0:	dec00304 	addi	sp,sp,12
 200cee4:	f800283a 	ret
 200cee8:	80c00017 	ldw	r3,0(r16)
 200ceec:	183ff926 	beq	r3,zero,200ced4 <_close_r+0x30>
 200cef0:	88c00015 	stw	r3,0(r17)
 200cef4:	dfc00217 	ldw	ra,8(sp)
 200cef8:	dc400117 	ldw	r17,4(sp)
 200cefc:	dc000017 	ldw	r16,0(sp)
 200cf00:	dec00304 	addi	sp,sp,12
 200cf04:	f800283a 	ret

0200cf08 <_fclose_r>:
 200cf08:	defffc04 	addi	sp,sp,-16
 200cf0c:	dc400115 	stw	r17,4(sp)
 200cf10:	dc000015 	stw	r16,0(sp)
 200cf14:	dfc00315 	stw	ra,12(sp)
 200cf18:	dc800215 	stw	r18,8(sp)
 200cf1c:	2821883a 	mov	r16,r5
 200cf20:	2023883a 	mov	r17,r4
 200cf24:	28003426 	beq	r5,zero,200cff8 <_fclose_r+0xf0>
 200cf28:	2009c140 	call	2009c14 <__sfp_lock_acquire>
 200cf2c:	88000226 	beq	r17,zero,200cf38 <_fclose_r+0x30>
 200cf30:	88800e17 	ldw	r2,56(r17)
 200cf34:	10003826 	beq	r2,zero,200d018 <_fclose_r+0x110>
 200cf38:	8080030f 	ldh	r2,12(r16)
 200cf3c:	10002526 	beq	r2,zero,200cfd4 <_fclose_r+0xcc>
 200cf40:	8809883a 	mov	r4,r17
 200cf44:	800b883a 	mov	r5,r16
 200cf48:	20097640 	call	2009764 <_fflush_r>
 200cf4c:	1025883a 	mov	r18,r2
 200cf50:	80800b17 	ldw	r2,44(r16)
 200cf54:	10000426 	beq	r2,zero,200cf68 <_fclose_r+0x60>
 200cf58:	81400717 	ldw	r5,28(r16)
 200cf5c:	8809883a 	mov	r4,r17
 200cf60:	103ee83a 	callr	r2
 200cf64:	10003516 	blt	r2,zero,200d03c <_fclose_r+0x134>
 200cf68:	8080030b 	ldhu	r2,12(r16)
 200cf6c:	1080200c 	andi	r2,r2,128
 200cf70:	10bfffcc 	andi	r2,r2,65535
 200cf74:	10a0001c 	xori	r2,r2,32768
 200cf78:	10a00004 	addi	r2,r2,-32768
 200cf7c:	10002b1e 	bne	r2,zero,200d02c <_fclose_r+0x124>
 200cf80:	81400c17 	ldw	r5,48(r16)
 200cf84:	28000526 	beq	r5,zero,200cf9c <_fclose_r+0x94>
 200cf88:	80801004 	addi	r2,r16,64
 200cf8c:	28800226 	beq	r5,r2,200cf98 <_fclose_r+0x90>
 200cf90:	8809883a 	mov	r4,r17
 200cf94:	2009d900 	call	2009d90 <_free_r>
 200cf98:	80000c15 	stw	zero,48(r16)
 200cf9c:	81401117 	ldw	r5,68(r16)
 200cfa0:	28000326 	beq	r5,zero,200cfb0 <_fclose_r+0xa8>
 200cfa4:	8809883a 	mov	r4,r17
 200cfa8:	2009d900 	call	2009d90 <_free_r>
 200cfac:	80001115 	stw	zero,68(r16)
 200cfb0:	8000030d 	sth	zero,12(r16)
 200cfb4:	2009c180 	call	2009c18 <__sfp_lock_release>
 200cfb8:	9005883a 	mov	r2,r18
 200cfbc:	dfc00317 	ldw	ra,12(sp)
 200cfc0:	dc800217 	ldw	r18,8(sp)
 200cfc4:	dc400117 	ldw	r17,4(sp)
 200cfc8:	dc000017 	ldw	r16,0(sp)
 200cfcc:	dec00404 	addi	sp,sp,16
 200cfd0:	f800283a 	ret
 200cfd4:	2009c180 	call	2009c18 <__sfp_lock_release>
 200cfd8:	0025883a 	mov	r18,zero
 200cfdc:	9005883a 	mov	r2,r18
 200cfe0:	dfc00317 	ldw	ra,12(sp)
 200cfe4:	dc800217 	ldw	r18,8(sp)
 200cfe8:	dc400117 	ldw	r17,4(sp)
 200cfec:	dc000017 	ldw	r16,0(sp)
 200cff0:	dec00404 	addi	sp,sp,16
 200cff4:	f800283a 	ret
 200cff8:	0025883a 	mov	r18,zero
 200cffc:	9005883a 	mov	r2,r18
 200d000:	dfc00317 	ldw	ra,12(sp)
 200d004:	dc800217 	ldw	r18,8(sp)
 200d008:	dc400117 	ldw	r17,4(sp)
 200d00c:	dc000017 	ldw	r16,0(sp)
 200d010:	dec00404 	addi	sp,sp,16
 200d014:	f800283a 	ret
 200d018:	8809883a 	mov	r4,r17
 200d01c:	2009a0c0 	call	2009a0c <__sinit>
 200d020:	8080030f 	ldh	r2,12(r16)
 200d024:	103fc61e 	bne	r2,zero,200cf40 <_fclose_r+0x38>
 200d028:	003fea06 	br	200cfd4 <_fclose_r+0xcc>
 200d02c:	81400417 	ldw	r5,16(r16)
 200d030:	8809883a 	mov	r4,r17
 200d034:	2009d900 	call	2009d90 <_free_r>
 200d038:	003fd106 	br	200cf80 <_fclose_r+0x78>
 200d03c:	04bfffc4 	movi	r18,-1
 200d040:	003fc906 	br	200cf68 <_fclose_r+0x60>

0200d044 <fclose>:
 200d044:	00808074 	movhi	r2,513
 200d048:	108e7804 	addi	r2,r2,14816
 200d04c:	200b883a 	mov	r5,r4
 200d050:	11000017 	ldw	r4,0(r2)
 200d054:	200cf081 	jmpi	200cf08 <_fclose_r>

0200d058 <_fstat_r>:
 200d058:	defffd04 	addi	sp,sp,-12
 200d05c:	dc400115 	stw	r17,4(sp)
 200d060:	dc000015 	stw	r16,0(sp)
 200d064:	2023883a 	mov	r17,r4
 200d068:	04008074 	movhi	r16,513
 200d06c:	840e8e04 	addi	r16,r16,14904
 200d070:	2809883a 	mov	r4,r5
 200d074:	300b883a 	mov	r5,r6
 200d078:	dfc00215 	stw	ra,8(sp)
 200d07c:	80000015 	stw	zero,0(r16)
 200d080:	200e45c0 	call	200e45c <fstat>
 200d084:	00ffffc4 	movi	r3,-1
 200d088:	10c00526 	beq	r2,r3,200d0a0 <_fstat_r+0x48>
 200d08c:	dfc00217 	ldw	ra,8(sp)
 200d090:	dc400117 	ldw	r17,4(sp)
 200d094:	dc000017 	ldw	r16,0(sp)
 200d098:	dec00304 	addi	sp,sp,12
 200d09c:	f800283a 	ret
 200d0a0:	80c00017 	ldw	r3,0(r16)
 200d0a4:	183ff926 	beq	r3,zero,200d08c <_fstat_r+0x34>
 200d0a8:	88c00015 	stw	r3,0(r17)
 200d0ac:	dfc00217 	ldw	ra,8(sp)
 200d0b0:	dc400117 	ldw	r17,4(sp)
 200d0b4:	dc000017 	ldw	r16,0(sp)
 200d0b8:	dec00304 	addi	sp,sp,12
 200d0bc:	f800283a 	ret

0200d0c0 <_isatty_r>:
 200d0c0:	defffd04 	addi	sp,sp,-12
 200d0c4:	dc400115 	stw	r17,4(sp)
 200d0c8:	dc000015 	stw	r16,0(sp)
 200d0cc:	2023883a 	mov	r17,r4
 200d0d0:	04008074 	movhi	r16,513
 200d0d4:	840e8e04 	addi	r16,r16,14904
 200d0d8:	2809883a 	mov	r4,r5
 200d0dc:	dfc00215 	stw	ra,8(sp)
 200d0e0:	80000015 	stw	zero,0(r16)
 200d0e4:	200e5580 	call	200e558 <isatty>
 200d0e8:	00ffffc4 	movi	r3,-1
 200d0ec:	10c00526 	beq	r2,r3,200d104 <_isatty_r+0x44>
 200d0f0:	dfc00217 	ldw	ra,8(sp)
 200d0f4:	dc400117 	ldw	r17,4(sp)
 200d0f8:	dc000017 	ldw	r16,0(sp)
 200d0fc:	dec00304 	addi	sp,sp,12
 200d100:	f800283a 	ret
 200d104:	80c00017 	ldw	r3,0(r16)
 200d108:	183ff926 	beq	r3,zero,200d0f0 <_isatty_r+0x30>
 200d10c:	88c00015 	stw	r3,0(r17)
 200d110:	dfc00217 	ldw	ra,8(sp)
 200d114:	dc400117 	ldw	r17,4(sp)
 200d118:	dc000017 	ldw	r16,0(sp)
 200d11c:	dec00304 	addi	sp,sp,12
 200d120:	f800283a 	ret

0200d124 <_lseek_r>:
 200d124:	defffd04 	addi	sp,sp,-12
 200d128:	dc400115 	stw	r17,4(sp)
 200d12c:	dc000015 	stw	r16,0(sp)
 200d130:	2023883a 	mov	r17,r4
 200d134:	04008074 	movhi	r16,513
 200d138:	840e8e04 	addi	r16,r16,14904
 200d13c:	2809883a 	mov	r4,r5
 200d140:	300b883a 	mov	r5,r6
 200d144:	380d883a 	mov	r6,r7
 200d148:	dfc00215 	stw	ra,8(sp)
 200d14c:	80000015 	stw	zero,0(r16)
 200d150:	200e6480 	call	200e648 <lseek>
 200d154:	00ffffc4 	movi	r3,-1
 200d158:	10c00526 	beq	r2,r3,200d170 <_lseek_r+0x4c>
 200d15c:	dfc00217 	ldw	ra,8(sp)
 200d160:	dc400117 	ldw	r17,4(sp)
 200d164:	dc000017 	ldw	r16,0(sp)
 200d168:	dec00304 	addi	sp,sp,12
 200d16c:	f800283a 	ret
 200d170:	80c00017 	ldw	r3,0(r16)
 200d174:	183ff926 	beq	r3,zero,200d15c <_lseek_r+0x38>
 200d178:	88c00015 	stw	r3,0(r17)
 200d17c:	dfc00217 	ldw	ra,8(sp)
 200d180:	dc400117 	ldw	r17,4(sp)
 200d184:	dc000017 	ldw	r16,0(sp)
 200d188:	dec00304 	addi	sp,sp,12
 200d18c:	f800283a 	ret

0200d190 <_read_r>:
 200d190:	defffd04 	addi	sp,sp,-12
 200d194:	dc400115 	stw	r17,4(sp)
 200d198:	dc000015 	stw	r16,0(sp)
 200d19c:	2023883a 	mov	r17,r4
 200d1a0:	04008074 	movhi	r16,513
 200d1a4:	840e8e04 	addi	r16,r16,14904
 200d1a8:	2809883a 	mov	r4,r5
 200d1ac:	300b883a 	mov	r5,r6
 200d1b0:	380d883a 	mov	r6,r7
 200d1b4:	dfc00215 	stw	ra,8(sp)
 200d1b8:	80000015 	stw	zero,0(r16)
 200d1bc:	200e8200 	call	200e820 <read>
 200d1c0:	00ffffc4 	movi	r3,-1
 200d1c4:	10c00526 	beq	r2,r3,200d1dc <_read_r+0x4c>
 200d1c8:	dfc00217 	ldw	ra,8(sp)
 200d1cc:	dc400117 	ldw	r17,4(sp)
 200d1d0:	dc000017 	ldw	r16,0(sp)
 200d1d4:	dec00304 	addi	sp,sp,12
 200d1d8:	f800283a 	ret
 200d1dc:	80c00017 	ldw	r3,0(r16)
 200d1e0:	183ff926 	beq	r3,zero,200d1c8 <_read_r+0x38>
 200d1e4:	88c00015 	stw	r3,0(r17)
 200d1e8:	dfc00217 	ldw	ra,8(sp)
 200d1ec:	dc400117 	ldw	r17,4(sp)
 200d1f0:	dc000017 	ldw	r16,0(sp)
 200d1f4:	dec00304 	addi	sp,sp,12
 200d1f8:	f800283a 	ret

0200d1fc <__udivdi3>:
 200d1fc:	defff504 	addi	sp,sp,-44
 200d200:	dd000515 	stw	r20,20(sp)
 200d204:	dcc00415 	stw	r19,16(sp)
 200d208:	dc800315 	stw	r18,12(sp)
 200d20c:	dc400215 	stw	r17,8(sp)
 200d210:	dc000115 	stw	r16,4(sp)
 200d214:	dfc00a15 	stw	ra,40(sp)
 200d218:	df000915 	stw	fp,36(sp)
 200d21c:	ddc00815 	stw	r23,32(sp)
 200d220:	dd800715 	stw	r22,28(sp)
 200d224:	dd400615 	stw	r21,24(sp)
 200d228:	2025883a 	mov	r18,r4
 200d22c:	2823883a 	mov	r17,r5
 200d230:	3021883a 	mov	r16,r6
 200d234:	2027883a 	mov	r19,r4
 200d238:	2829883a 	mov	r20,r5
 200d23c:	3800401e 	bne	r7,zero,200d340 <__udivdi3+0x144>
 200d240:	2980602e 	bgeu	r5,r6,200d3c4 <__udivdi3+0x1c8>
 200d244:	00bfffd4 	movui	r2,65535
 200d248:	1180aa36 	bltu	r2,r6,200d4f4 <__udivdi3+0x2f8>
 200d24c:	00803fc4 	movi	r2,255
 200d250:	11814436 	bltu	r2,r6,200d764 <__udivdi3+0x568>
 200d254:	0005883a 	mov	r2,zero
 200d258:	0007883a 	mov	r3,zero
 200d25c:	3084d83a 	srl	r2,r6,r2
 200d260:	01008074 	movhi	r4,513
 200d264:	2106f604 	addi	r4,r4,7128
 200d268:	2085883a 	add	r2,r4,r2
 200d26c:	10800003 	ldbu	r2,0(r2)
 200d270:	10c7883a 	add	r3,r2,r3
 200d274:	00800804 	movi	r2,32
 200d278:	10c5c83a 	sub	r2,r2,r3
 200d27c:	10000526 	beq	r2,zero,200d294 <__udivdi3+0x98>
 200d280:	88a2983a 	sll	r17,r17,r2
 200d284:	90c6d83a 	srl	r3,r18,r3
 200d288:	30a0983a 	sll	r16,r6,r2
 200d28c:	90a6983a 	sll	r19,r18,r2
 200d290:	88e8b03a 	or	r20,r17,r3
 200d294:	8022d43a 	srli	r17,r16,16
 200d298:	a009883a 	mov	r4,r20
 200d29c:	857fffcc 	andi	r21,r16,65535
 200d2a0:	880b883a 	mov	r5,r17
 200d2a4:	200e2c00 	call	200e2c0 <__umodsi3>
 200d2a8:	a009883a 	mov	r4,r20
 200d2ac:	880b883a 	mov	r5,r17
 200d2b0:	102d883a 	mov	r22,r2
 200d2b4:	200e2b80 	call	200e2b8 <__udivsi3>
 200d2b8:	b02c943a 	slli	r22,r22,16
 200d2bc:	9806d43a 	srli	r3,r19,16
 200d2c0:	1549383a 	mul	r4,r2,r21
 200d2c4:	1025883a 	mov	r18,r2
 200d2c8:	b0c6b03a 	or	r3,r22,r3
 200d2cc:	1900052e 	bgeu	r3,r4,200d2e4 <__udivdi3+0xe8>
 200d2d0:	1c07883a 	add	r3,r3,r16
 200d2d4:	10bfffc4 	addi	r2,r2,-1
 200d2d8:	1c000136 	bltu	r3,r16,200d2e0 <__udivdi3+0xe4>
 200d2dc:	19013636 	bltu	r3,r4,200d7b8 <__udivdi3+0x5bc>
 200d2e0:	1025883a 	mov	r18,r2
 200d2e4:	1929c83a 	sub	r20,r3,r4
 200d2e8:	a009883a 	mov	r4,r20
 200d2ec:	880b883a 	mov	r5,r17
 200d2f0:	200e2c00 	call	200e2c0 <__umodsi3>
 200d2f4:	102d883a 	mov	r22,r2
 200d2f8:	a009883a 	mov	r4,r20
 200d2fc:	880b883a 	mov	r5,r17
 200d300:	200e2b80 	call	200e2b8 <__udivsi3>
 200d304:	b02c943a 	slli	r22,r22,16
 200d308:	156b383a 	mul	r21,r2,r21
 200d30c:	9cffffcc 	andi	r19,r19,65535
 200d310:	b4e6b03a 	or	r19,r22,r19
 200d314:	1009883a 	mov	r4,r2
 200d318:	9d40052e 	bgeu	r19,r21,200d330 <__udivdi3+0x134>
 200d31c:	9c27883a 	add	r19,r19,r16
 200d320:	10bfffc4 	addi	r2,r2,-1
 200d324:	9c00f736 	bltu	r19,r16,200d704 <__udivdi3+0x508>
 200d328:	9d40f62e 	bgeu	r19,r21,200d704 <__udivdi3+0x508>
 200d32c:	213fff84 	addi	r4,r4,-2
 200d330:	9004943a 	slli	r2,r18,16
 200d334:	0007883a 	mov	r3,zero
 200d338:	2084b03a 	or	r2,r4,r2
 200d33c:	00001506 	br	200d394 <__udivdi3+0x198>
 200d340:	29c06536 	bltu	r5,r7,200d4d8 <__udivdi3+0x2dc>
 200d344:	00bfffd4 	movui	r2,65535
 200d348:	11c0652e 	bgeu	r2,r7,200d4e0 <__udivdi3+0x2e4>
 200d34c:	00804034 	movhi	r2,256
 200d350:	10bfffc4 	addi	r2,r2,-1
 200d354:	11c0f736 	bltu	r2,r7,200d734 <__udivdi3+0x538>
 200d358:	00c00404 	movi	r3,16
 200d35c:	180b883a 	mov	r5,r3
 200d360:	38c6d83a 	srl	r3,r7,r3
 200d364:	01008074 	movhi	r4,513
 200d368:	2106f604 	addi	r4,r4,7128
 200d36c:	04000804 	movi	r16,32
 200d370:	20c7883a 	add	r3,r4,r3
 200d374:	18800003 	ldbu	r2,0(r3)
 200d378:	1145883a 	add	r2,r2,r5
 200d37c:	80a1c83a 	sub	r16,r16,r2
 200d380:	8000691e 	bne	r16,zero,200d528 <__udivdi3+0x32c>
 200d384:	0007883a 	mov	r3,zero
 200d388:	3c406536 	bltu	r7,r17,200d520 <__udivdi3+0x324>
 200d38c:	9180642e 	bgeu	r18,r6,200d520 <__udivdi3+0x324>
 200d390:	0005883a 	mov	r2,zero
 200d394:	dfc00a17 	ldw	ra,40(sp)
 200d398:	df000917 	ldw	fp,36(sp)
 200d39c:	ddc00817 	ldw	r23,32(sp)
 200d3a0:	dd800717 	ldw	r22,28(sp)
 200d3a4:	dd400617 	ldw	r21,24(sp)
 200d3a8:	dd000517 	ldw	r20,20(sp)
 200d3ac:	dcc00417 	ldw	r19,16(sp)
 200d3b0:	dc800317 	ldw	r18,12(sp)
 200d3b4:	dc400217 	ldw	r17,8(sp)
 200d3b8:	dc000117 	ldw	r16,4(sp)
 200d3bc:	dec00b04 	addi	sp,sp,44
 200d3c0:	f800283a 	ret
 200d3c4:	3000041e 	bne	r6,zero,200d3d8 <__udivdi3+0x1dc>
 200d3c8:	01000044 	movi	r4,1
 200d3cc:	000b883a 	mov	r5,zero
 200d3d0:	200e2b80 	call	200e2b8 <__udivsi3>
 200d3d4:	1021883a 	mov	r16,r2
 200d3d8:	00bfffd4 	movui	r2,65535
 200d3dc:	14004b2e 	bgeu	r2,r16,200d50c <__udivdi3+0x310>
 200d3e0:	00804034 	movhi	r2,256
 200d3e4:	10bfffc4 	addi	r2,r2,-1
 200d3e8:	1400d836 	bltu	r2,r16,200d74c <__udivdi3+0x550>
 200d3ec:	00800404 	movi	r2,16
 200d3f0:	1007883a 	mov	r3,r2
 200d3f4:	8084d83a 	srl	r2,r16,r2
 200d3f8:	01008074 	movhi	r4,513
 200d3fc:	2106f604 	addi	r4,r4,7128
 200d400:	2085883a 	add	r2,r4,r2
 200d404:	10800003 	ldbu	r2,0(r2)
 200d408:	10c7883a 	add	r3,r2,r3
 200d40c:	00800804 	movi	r2,32
 200d410:	10c5c83a 	sub	r2,r2,r3
 200d414:	1000891e 	bne	r2,zero,200d63c <__udivdi3+0x440>
 200d418:	8028d43a 	srli	r20,r16,16
 200d41c:	8c23c83a 	sub	r17,r17,r16
 200d420:	84bfffcc 	andi	r18,r16,65535
 200d424:	00c00044 	movi	r3,1
 200d428:	8809883a 	mov	r4,r17
 200d42c:	a00b883a 	mov	r5,r20
 200d430:	d8c00015 	stw	r3,0(sp)
 200d434:	200e2c00 	call	200e2c0 <__umodsi3>
 200d438:	8809883a 	mov	r4,r17
 200d43c:	a00b883a 	mov	r5,r20
 200d440:	102b883a 	mov	r21,r2
 200d444:	200e2b80 	call	200e2b8 <__udivsi3>
 200d448:	a82a943a 	slli	r21,r21,16
 200d44c:	9808d43a 	srli	r4,r19,16
 200d450:	148b383a 	mul	r5,r2,r18
 200d454:	1023883a 	mov	r17,r2
 200d458:	a908b03a 	or	r4,r21,r4
 200d45c:	d8c00017 	ldw	r3,0(sp)
 200d460:	2140052e 	bgeu	r4,r5,200d478 <__udivdi3+0x27c>
 200d464:	2409883a 	add	r4,r4,r16
 200d468:	10bfffc4 	addi	r2,r2,-1
 200d46c:	24000136 	bltu	r4,r16,200d474 <__udivdi3+0x278>
 200d470:	2140ce36 	bltu	r4,r5,200d7ac <__udivdi3+0x5b0>
 200d474:	1023883a 	mov	r17,r2
 200d478:	216bc83a 	sub	r21,r4,r5
 200d47c:	a809883a 	mov	r4,r21
 200d480:	a00b883a 	mov	r5,r20
 200d484:	d8c00015 	stw	r3,0(sp)
 200d488:	200e2c00 	call	200e2c0 <__umodsi3>
 200d48c:	102d883a 	mov	r22,r2
 200d490:	a809883a 	mov	r4,r21
 200d494:	a00b883a 	mov	r5,r20
 200d498:	200e2b80 	call	200e2b8 <__udivsi3>
 200d49c:	b02c943a 	slli	r22,r22,16
 200d4a0:	14a5383a 	mul	r18,r2,r18
 200d4a4:	9cffffcc 	andi	r19,r19,65535
 200d4a8:	b4e6b03a 	or	r19,r22,r19
 200d4ac:	1009883a 	mov	r4,r2
 200d4b0:	d8c00017 	ldw	r3,0(sp)
 200d4b4:	9c80052e 	bgeu	r19,r18,200d4cc <__udivdi3+0x2d0>
 200d4b8:	9c27883a 	add	r19,r19,r16
 200d4bc:	10bfffc4 	addi	r2,r2,-1
 200d4c0:	9c009236 	bltu	r19,r16,200d70c <__udivdi3+0x510>
 200d4c4:	9c80912e 	bgeu	r19,r18,200d70c <__udivdi3+0x510>
 200d4c8:	213fff84 	addi	r4,r4,-2
 200d4cc:	8804943a 	slli	r2,r17,16
 200d4d0:	2084b03a 	or	r2,r4,r2
 200d4d4:	003faf06 	br	200d394 <__udivdi3+0x198>
 200d4d8:	0007883a 	mov	r3,zero
 200d4dc:	003fac06 	br	200d390 <__udivdi3+0x194>
 200d4e0:	00803fc4 	movi	r2,255
 200d4e4:	11c09636 	bltu	r2,r7,200d740 <__udivdi3+0x544>
 200d4e8:	0007883a 	mov	r3,zero
 200d4ec:	000b883a 	mov	r5,zero
 200d4f0:	003f9b06 	br	200d360 <__udivdi3+0x164>
 200d4f4:	00804034 	movhi	r2,256
 200d4f8:	10bfffc4 	addi	r2,r2,-1
 200d4fc:	11809636 	bltu	r2,r6,200d758 <__udivdi3+0x55c>
 200d500:	00800404 	movi	r2,16
 200d504:	1007883a 	mov	r3,r2
 200d508:	003f5406 	br	200d25c <__udivdi3+0x60>
 200d50c:	00803fc4 	movi	r2,255
 200d510:	14009736 	bltu	r2,r16,200d770 <__udivdi3+0x574>
 200d514:	0005883a 	mov	r2,zero
 200d518:	0007883a 	mov	r3,zero
 200d51c:	003fb506 	br	200d3f4 <__udivdi3+0x1f8>
 200d520:	00800044 	movi	r2,1
 200d524:	003f9b06 	br	200d394 <__udivdi3+0x198>
 200d528:	3086d83a 	srl	r3,r6,r2
 200d52c:	3c0e983a 	sll	r7,r7,r16
 200d530:	88aad83a 	srl	r21,r17,r2
 200d534:	9084d83a 	srl	r2,r18,r2
 200d538:	38e6b03a 	or	r19,r7,r3
 200d53c:	9828d43a 	srli	r20,r19,16
 200d540:	8c22983a 	sll	r17,r17,r16
 200d544:	a809883a 	mov	r4,r21
 200d548:	a00b883a 	mov	r5,r20
 200d54c:	342c983a 	sll	r22,r6,r16
 200d550:	88a2b03a 	or	r17,r17,r2
 200d554:	200e2c00 	call	200e2c0 <__umodsi3>
 200d558:	a809883a 	mov	r4,r21
 200d55c:	a00b883a 	mov	r5,r20
 200d560:	1039883a 	mov	fp,r2
 200d564:	200e2b80 	call	200e2b8 <__udivsi3>
 200d568:	102b883a 	mov	r21,r2
 200d56c:	9dffffcc 	andi	r23,r19,65535
 200d570:	e008943a 	slli	r4,fp,16
 200d574:	8804d43a 	srli	r2,r17,16
 200d578:	adcd383a 	mul	r6,r21,r23
 200d57c:	2088b03a 	or	r4,r4,r2
 200d580:	2180042e 	bgeu	r4,r6,200d594 <__udivdi3+0x398>
 200d584:	24c9883a 	add	r4,r4,r19
 200d588:	a8bfffc4 	addi	r2,r21,-1
 200d58c:	24c07f2e 	bgeu	r4,r19,200d78c <__udivdi3+0x590>
 200d590:	102b883a 	mov	r21,r2
 200d594:	21b9c83a 	sub	fp,r4,r6
 200d598:	e009883a 	mov	r4,fp
 200d59c:	a00b883a 	mov	r5,r20
 200d5a0:	200e2c00 	call	200e2c0 <__umodsi3>
 200d5a4:	e009883a 	mov	r4,fp
 200d5a8:	a00b883a 	mov	r5,r20
 200d5ac:	d8800015 	stw	r2,0(sp)
 200d5b0:	200e2b80 	call	200e2b8 <__udivsi3>
 200d5b4:	d8c00017 	ldw	r3,0(sp)
 200d5b8:	15cb383a 	mul	r5,r2,r23
 200d5bc:	8c7fffcc 	andi	r17,r17,65535
 200d5c0:	1806943a 	slli	r3,r3,16
 200d5c4:	1009883a 	mov	r4,r2
 200d5c8:	1c46b03a 	or	r3,r3,r17
 200d5cc:	1940042e 	bgeu	r3,r5,200d5e0 <__udivdi3+0x3e4>
 200d5d0:	1cc7883a 	add	r3,r3,r19
 200d5d4:	10bfffc4 	addi	r2,r2,-1
 200d5d8:	1cc0682e 	bgeu	r3,r19,200d77c <__udivdi3+0x580>
 200d5dc:	1009883a 	mov	r4,r2
 200d5e0:	a804943a 	slli	r2,r21,16
 200d5e4:	b1ffffcc 	andi	r7,r22,65535
 200d5e8:	b02cd43a 	srli	r22,r22,16
 200d5ec:	2084b03a 	or	r2,r4,r2
 200d5f0:	113fffcc 	andi	r4,r2,65535
 200d5f4:	100cd43a 	srli	r6,r2,16
 200d5f8:	21d1383a 	mul	r8,r4,r7
 200d5fc:	2589383a 	mul	r4,r4,r22
 200d600:	31cf383a 	mul	r7,r6,r7
 200d604:	4012d43a 	srli	r9,r8,16
 200d608:	1947c83a 	sub	r3,r3,r5
 200d60c:	3909883a 	add	r4,r7,r4
 200d610:	2249883a 	add	r4,r4,r9
 200d614:	35ad383a 	mul	r22,r6,r22
 200d618:	21c0022e 	bgeu	r4,r7,200d624 <__udivdi3+0x428>
 200d61c:	01400074 	movhi	r5,1
 200d620:	b16d883a 	add	r22,r22,r5
 200d624:	200ad43a 	srli	r5,r4,16
 200d628:	b16d883a 	add	r22,r22,r5
 200d62c:	1d803e36 	bltu	r3,r22,200d728 <__udivdi3+0x52c>
 200d630:	1d803826 	beq	r3,r22,200d714 <__udivdi3+0x518>
 200d634:	0007883a 	mov	r3,zero
 200d638:	003f5606 	br	200d394 <__udivdi3+0x198>
 200d63c:	80a0983a 	sll	r16,r16,r2
 200d640:	88ead83a 	srl	r21,r17,r3
 200d644:	90c6d83a 	srl	r3,r18,r3
 200d648:	8028d43a 	srli	r20,r16,16
 200d64c:	88a2983a 	sll	r17,r17,r2
 200d650:	a809883a 	mov	r4,r21
 200d654:	a00b883a 	mov	r5,r20
 200d658:	88ecb03a 	or	r22,r17,r3
 200d65c:	90a6983a 	sll	r19,r18,r2
 200d660:	200e2c00 	call	200e2c0 <__umodsi3>
 200d664:	a809883a 	mov	r4,r21
 200d668:	a00b883a 	mov	r5,r20
 200d66c:	1023883a 	mov	r17,r2
 200d670:	200e2b80 	call	200e2b8 <__udivsi3>
 200d674:	102b883a 	mov	r21,r2
 200d678:	84bfffcc 	andi	r18,r16,65535
 200d67c:	8808943a 	slli	r4,r17,16
 200d680:	b004d43a 	srli	r2,r22,16
 200d684:	ac87383a 	mul	r3,r21,r18
 200d688:	2088b03a 	or	r4,r4,r2
 200d68c:	20c0062e 	bgeu	r4,r3,200d6a8 <__udivdi3+0x4ac>
 200d690:	2409883a 	add	r4,r4,r16
 200d694:	a8bfffc4 	addi	r2,r21,-1
 200d698:	24004236 	bltu	r4,r16,200d7a4 <__udivdi3+0x5a8>
 200d69c:	20c0412e 	bgeu	r4,r3,200d7a4 <__udivdi3+0x5a8>
 200d6a0:	ad7fff84 	addi	r21,r21,-2
 200d6a4:	2409883a 	add	r4,r4,r16
 200d6a8:	20efc83a 	sub	r23,r4,r3
 200d6ac:	b809883a 	mov	r4,r23
 200d6b0:	a00b883a 	mov	r5,r20
 200d6b4:	200e2c00 	call	200e2c0 <__umodsi3>
 200d6b8:	1023883a 	mov	r17,r2
 200d6bc:	a00b883a 	mov	r5,r20
 200d6c0:	b809883a 	mov	r4,r23
 200d6c4:	200e2b80 	call	200e2b8 <__udivsi3>
 200d6c8:	8822943a 	slli	r17,r17,16
 200d6cc:	148b383a 	mul	r5,r2,r18
 200d6d0:	b5bfffcc 	andi	r22,r22,65535
 200d6d4:	8da2b03a 	or	r17,r17,r22
 200d6d8:	8940062e 	bgeu	r17,r5,200d6f4 <__udivdi3+0x4f8>
 200d6dc:	8c23883a 	add	r17,r17,r16
 200d6e0:	10ffffc4 	addi	r3,r2,-1
 200d6e4:	8c002d36 	bltu	r17,r16,200d79c <__udivdi3+0x5a0>
 200d6e8:	89402c2e 	bgeu	r17,r5,200d79c <__udivdi3+0x5a0>
 200d6ec:	10bfff84 	addi	r2,r2,-2
 200d6f0:	8c23883a 	add	r17,r17,r16
 200d6f4:	a806943a 	slli	r3,r21,16
 200d6f8:	8963c83a 	sub	r17,r17,r5
 200d6fc:	10c6b03a 	or	r3,r2,r3
 200d700:	003f4906 	br	200d428 <__udivdi3+0x22c>
 200d704:	1009883a 	mov	r4,r2
 200d708:	003f0906 	br	200d330 <__udivdi3+0x134>
 200d70c:	1009883a 	mov	r4,r2
 200d710:	003f6e06 	br	200d4cc <__udivdi3+0x2d0>
 200d714:	2008943a 	slli	r4,r4,16
 200d718:	9420983a 	sll	r16,r18,r16
 200d71c:	423fffcc 	andi	r8,r8,65535
 200d720:	2209883a 	add	r4,r4,r8
 200d724:	813fc32e 	bgeu	r16,r4,200d634 <__udivdi3+0x438>
 200d728:	10bfffc4 	addi	r2,r2,-1
 200d72c:	0007883a 	mov	r3,zero
 200d730:	003f1806 	br	200d394 <__udivdi3+0x198>
 200d734:	00c00604 	movi	r3,24
 200d738:	180b883a 	mov	r5,r3
 200d73c:	003f0806 	br	200d360 <__udivdi3+0x164>
 200d740:	00c00204 	movi	r3,8
 200d744:	180b883a 	mov	r5,r3
 200d748:	003f0506 	br	200d360 <__udivdi3+0x164>
 200d74c:	00800604 	movi	r2,24
 200d750:	1007883a 	mov	r3,r2
 200d754:	003f2706 	br	200d3f4 <__udivdi3+0x1f8>
 200d758:	00800604 	movi	r2,24
 200d75c:	1007883a 	mov	r3,r2
 200d760:	003ebe06 	br	200d25c <__udivdi3+0x60>
 200d764:	00800204 	movi	r2,8
 200d768:	1007883a 	mov	r3,r2
 200d76c:	003ebb06 	br	200d25c <__udivdi3+0x60>
 200d770:	00800204 	movi	r2,8
 200d774:	1007883a 	mov	r3,r2
 200d778:	003f1e06 	br	200d3f4 <__udivdi3+0x1f8>
 200d77c:	197f972e 	bgeu	r3,r5,200d5dc <__udivdi3+0x3e0>
 200d780:	213fff84 	addi	r4,r4,-2
 200d784:	1cc7883a 	add	r3,r3,r19
 200d788:	003f9506 	br	200d5e0 <__udivdi3+0x3e4>
 200d78c:	21bf802e 	bgeu	r4,r6,200d590 <__udivdi3+0x394>
 200d790:	ad7fff84 	addi	r21,r21,-2
 200d794:	24c9883a 	add	r4,r4,r19
 200d798:	003f7e06 	br	200d594 <__udivdi3+0x398>
 200d79c:	1805883a 	mov	r2,r3
 200d7a0:	003fd406 	br	200d6f4 <__udivdi3+0x4f8>
 200d7a4:	102b883a 	mov	r21,r2
 200d7a8:	003fbf06 	br	200d6a8 <__udivdi3+0x4ac>
 200d7ac:	8c7fff84 	addi	r17,r17,-2
 200d7b0:	2409883a 	add	r4,r4,r16
 200d7b4:	003f3006 	br	200d478 <__udivdi3+0x27c>
 200d7b8:	94bfff84 	addi	r18,r18,-2
 200d7bc:	1c07883a 	add	r3,r3,r16
 200d7c0:	003ec806 	br	200d2e4 <__udivdi3+0xe8>

0200d7c4 <__umoddi3>:
 200d7c4:	defff504 	addi	sp,sp,-44
 200d7c8:	dd000515 	stw	r20,20(sp)
 200d7cc:	dcc00415 	stw	r19,16(sp)
 200d7d0:	dc800315 	stw	r18,12(sp)
 200d7d4:	dc400215 	stw	r17,8(sp)
 200d7d8:	dc000115 	stw	r16,4(sp)
 200d7dc:	dfc00a15 	stw	ra,40(sp)
 200d7e0:	df000915 	stw	fp,36(sp)
 200d7e4:	ddc00815 	stw	r23,32(sp)
 200d7e8:	dd800715 	stw	r22,28(sp)
 200d7ec:	dd400615 	stw	r21,24(sp)
 200d7f0:	2025883a 	mov	r18,r4
 200d7f4:	2823883a 	mov	r17,r5
 200d7f8:	3021883a 	mov	r16,r6
 200d7fc:	2027883a 	mov	r19,r4
 200d800:	2829883a 	mov	r20,r5
 200d804:	3800351e 	bne	r7,zero,200d8dc <__umoddi3+0x118>
 200d808:	29804d2e 	bgeu	r5,r6,200d940 <__umoddi3+0x17c>
 200d80c:	00bfffd4 	movui	r2,65535
 200d810:	11809a36 	bltu	r2,r6,200da7c <__umoddi3+0x2b8>
 200d814:	00803fc4 	movi	r2,255
 200d818:	11813936 	bltu	r2,r6,200dd00 <__umoddi3+0x53c>
 200d81c:	0005883a 	mov	r2,zero
 200d820:	0009883a 	mov	r4,zero
 200d824:	3084d83a 	srl	r2,r6,r2
 200d828:	00c08074 	movhi	r3,513
 200d82c:	18c6f604 	addi	r3,r3,7128
 200d830:	05400804 	movi	r21,32
 200d834:	1885883a 	add	r2,r3,r2
 200d838:	10800003 	ldbu	r2,0(r2)
 200d83c:	1109883a 	add	r4,r2,r4
 200d840:	a92bc83a 	sub	r21,r21,r4
 200d844:	a800ec26 	beq	r21,zero,200dbf8 <__umoddi3+0x434>
 200d848:	8d62983a 	sll	r17,r17,r21
 200d84c:	9108d83a 	srl	r4,r18,r4
 200d850:	3560983a 	sll	r16,r6,r21
 200d854:	9566983a 	sll	r19,r18,r21
 200d858:	8928b03a 	or	r20,r17,r4
 200d85c:	8022d43a 	srli	r17,r16,16
 200d860:	a009883a 	mov	r4,r20
 200d864:	84bfffcc 	andi	r18,r16,65535
 200d868:	880b883a 	mov	r5,r17
 200d86c:	200e2c00 	call	200e2c0 <__umodsi3>
 200d870:	a009883a 	mov	r4,r20
 200d874:	880b883a 	mov	r5,r17
 200d878:	102d883a 	mov	r22,r2
 200d87c:	200e2b80 	call	200e2b8 <__udivsi3>
 200d880:	b02c943a 	slli	r22,r22,16
 200d884:	9806d43a 	srli	r3,r19,16
 200d888:	1485383a 	mul	r2,r2,r18
 200d88c:	b0c6b03a 	or	r3,r22,r3
 200d890:	1880042e 	bgeu	r3,r2,200d8a4 <__umoddi3+0xe0>
 200d894:	1c07883a 	add	r3,r3,r16
 200d898:	1c000236 	bltu	r3,r16,200d8a4 <__umoddi3+0xe0>
 200d89c:	1880012e 	bgeu	r3,r2,200d8a4 <__umoddi3+0xe0>
 200d8a0:	1c07883a 	add	r3,r3,r16
 200d8a4:	18a9c83a 	sub	r20,r3,r2
 200d8a8:	a009883a 	mov	r4,r20
 200d8ac:	880b883a 	mov	r5,r17
 200d8b0:	200e2c00 	call	200e2c0 <__umodsi3>
 200d8b4:	102d883a 	mov	r22,r2
 200d8b8:	a009883a 	mov	r4,r20
 200d8bc:	880b883a 	mov	r5,r17
 200d8c0:	200e2b80 	call	200e2b8 <__udivsi3>
 200d8c4:	b02c943a 	slli	r22,r22,16
 200d8c8:	1485383a 	mul	r2,r2,r18
 200d8cc:	9cffffcc 	andi	r19,r19,65535
 200d8d0:	b4e6b03a 	or	r19,r22,r19
 200d8d4:	9880522e 	bgeu	r19,r2,200da20 <__umoddi3+0x25c>
 200d8d8:	00004d06 	br	200da10 <__umoddi3+0x24c>
 200d8dc:	29c05436 	bltu	r5,r7,200da30 <__umoddi3+0x26c>
 200d8e0:	00bfffd4 	movui	r2,65535
 200d8e4:	11c0602e 	bgeu	r2,r7,200da68 <__umoddi3+0x2a4>
 200d8e8:	00804034 	movhi	r2,256
 200d8ec:	10bfffc4 	addi	r2,r2,-1
 200d8f0:	11c0f736 	bltu	r2,r7,200dcd0 <__umoddi3+0x50c>
 200d8f4:	00c00404 	movi	r3,16
 200d8f8:	1827883a 	mov	r19,r3
 200d8fc:	38c6d83a 	srl	r3,r7,r3
 200d900:	01008074 	movhi	r4,513
 200d904:	2106f604 	addi	r4,r4,7128
 200d908:	04000804 	movi	r16,32
 200d90c:	20c7883a 	add	r3,r4,r3
 200d910:	18800003 	ldbu	r2,0(r3)
 200d914:	14e7883a 	add	r19,r2,r19
 200d918:	84e1c83a 	sub	r16,r16,r19
 200d91c:	8000621e 	bne	r16,zero,200daa8 <__umoddi3+0x2e4>
 200d920:	3c400136 	bltu	r7,r17,200d928 <__umoddi3+0x164>
 200d924:	91810336 	bltu	r18,r6,200dd34 <__umoddi3+0x570>
 200d928:	9185c83a 	sub	r2,r18,r6
 200d92c:	89e3c83a 	sub	r17,r17,r7
 200d930:	90a5803a 	cmpltu	r18,r18,r2
 200d934:	8ca9c83a 	sub	r20,r17,r18
 200d938:	a007883a 	mov	r3,r20
 200d93c:	00003e06 	br	200da38 <__umoddi3+0x274>
 200d940:	3000041e 	bne	r6,zero,200d954 <__umoddi3+0x190>
 200d944:	01000044 	movi	r4,1
 200d948:	000b883a 	mov	r5,zero
 200d94c:	200e2b80 	call	200e2b8 <__udivsi3>
 200d950:	1021883a 	mov	r16,r2
 200d954:	00bfffd4 	movui	r2,65535
 200d958:	14004e2e 	bgeu	r2,r16,200da94 <__umoddi3+0x2d0>
 200d95c:	00804034 	movhi	r2,256
 200d960:	10bfffc4 	addi	r2,r2,-1
 200d964:	1400e336 	bltu	r2,r16,200dcf4 <__umoddi3+0x530>
 200d968:	00800404 	movi	r2,16
 200d96c:	1007883a 	mov	r3,r2
 200d970:	8084d83a 	srl	r2,r16,r2
 200d974:	01008074 	movhi	r4,513
 200d978:	2106f604 	addi	r4,r4,7128
 200d97c:	05400804 	movi	r21,32
 200d980:	2085883a 	add	r2,r4,r2
 200d984:	10800003 	ldbu	r2,0(r2)
 200d988:	10c7883a 	add	r3,r2,r3
 200d98c:	a8ebc83a 	sub	r21,r21,r3
 200d990:	a8009b1e 	bne	r21,zero,200dc00 <__umoddi3+0x43c>
 200d994:	8028d43a 	srli	r20,r16,16
 200d998:	8c23c83a 	sub	r17,r17,r16
 200d99c:	85bfffcc 	andi	r22,r16,65535
 200d9a0:	8809883a 	mov	r4,r17
 200d9a4:	a00b883a 	mov	r5,r20
 200d9a8:	200e2c00 	call	200e2c0 <__umodsi3>
 200d9ac:	8809883a 	mov	r4,r17
 200d9b0:	a00b883a 	mov	r5,r20
 200d9b4:	1025883a 	mov	r18,r2
 200d9b8:	200e2b80 	call	200e2b8 <__udivsi3>
 200d9bc:	9024943a 	slli	r18,r18,16
 200d9c0:	9806d43a 	srli	r3,r19,16
 200d9c4:	1585383a 	mul	r2,r2,r22
 200d9c8:	90c6b03a 	or	r3,r18,r3
 200d9cc:	1880032e 	bgeu	r3,r2,200d9dc <__umoddi3+0x218>
 200d9d0:	1c07883a 	add	r3,r3,r16
 200d9d4:	1c000136 	bltu	r3,r16,200d9dc <__umoddi3+0x218>
 200d9d8:	1880d436 	bltu	r3,r2,200dd2c <__umoddi3+0x568>
 200d9dc:	18a3c83a 	sub	r17,r3,r2
 200d9e0:	8809883a 	mov	r4,r17
 200d9e4:	a00b883a 	mov	r5,r20
 200d9e8:	200e2c00 	call	200e2c0 <__umodsi3>
 200d9ec:	1025883a 	mov	r18,r2
 200d9f0:	8809883a 	mov	r4,r17
 200d9f4:	a00b883a 	mov	r5,r20
 200d9f8:	200e2b80 	call	200e2b8 <__udivsi3>
 200d9fc:	9024943a 	slli	r18,r18,16
 200da00:	1585383a 	mul	r2,r2,r22
 200da04:	9cffffcc 	andi	r19,r19,65535
 200da08:	94e6b03a 	or	r19,r18,r19
 200da0c:	9880042e 	bgeu	r19,r2,200da20 <__umoddi3+0x25c>
 200da10:	9c27883a 	add	r19,r19,r16
 200da14:	9c000236 	bltu	r19,r16,200da20 <__umoddi3+0x25c>
 200da18:	9880012e 	bgeu	r19,r2,200da20 <__umoddi3+0x25c>
 200da1c:	9c27883a 	add	r19,r19,r16
 200da20:	98a7c83a 	sub	r19,r19,r2
 200da24:	9d44d83a 	srl	r2,r19,r21
 200da28:	0007883a 	mov	r3,zero
 200da2c:	00000206 	br	200da38 <__umoddi3+0x274>
 200da30:	2005883a 	mov	r2,r4
 200da34:	2807883a 	mov	r3,r5
 200da38:	dfc00a17 	ldw	ra,40(sp)
 200da3c:	df000917 	ldw	fp,36(sp)
 200da40:	ddc00817 	ldw	r23,32(sp)
 200da44:	dd800717 	ldw	r22,28(sp)
 200da48:	dd400617 	ldw	r21,24(sp)
 200da4c:	dd000517 	ldw	r20,20(sp)
 200da50:	dcc00417 	ldw	r19,16(sp)
 200da54:	dc800317 	ldw	r18,12(sp)
 200da58:	dc400217 	ldw	r17,8(sp)
 200da5c:	dc000117 	ldw	r16,4(sp)
 200da60:	dec00b04 	addi	sp,sp,44
 200da64:	f800283a 	ret
 200da68:	00803fc4 	movi	r2,255
 200da6c:	11c09536 	bltu	r2,r7,200dcc4 <__umoddi3+0x500>
 200da70:	0007883a 	mov	r3,zero
 200da74:	0027883a 	mov	r19,zero
 200da78:	003fa006 	br	200d8fc <__umoddi3+0x138>
 200da7c:	00804034 	movhi	r2,256
 200da80:	10bfffc4 	addi	r2,r2,-1
 200da84:	11809536 	bltu	r2,r6,200dcdc <__umoddi3+0x518>
 200da88:	00800404 	movi	r2,16
 200da8c:	1009883a 	mov	r4,r2
 200da90:	003f6406 	br	200d824 <__umoddi3+0x60>
 200da94:	00803fc4 	movi	r2,255
 200da98:	14009336 	bltu	r2,r16,200dce8 <__umoddi3+0x524>
 200da9c:	0005883a 	mov	r2,zero
 200daa0:	0007883a 	mov	r3,zero
 200daa4:	003fb206 	br	200d970 <__umoddi3+0x1ac>
 200daa8:	34c4d83a 	srl	r2,r6,r19
 200daac:	3c0e983a 	sll	r7,r7,r16
 200dab0:	8ceed83a 	srl	r23,r17,r19
 200dab4:	8c22983a 	sll	r17,r17,r16
 200dab8:	38a8b03a 	or	r20,r7,r2
 200dabc:	a02ad43a 	srli	r21,r20,16
 200dac0:	94c4d83a 	srl	r2,r18,r19
 200dac4:	b809883a 	mov	r4,r23
 200dac8:	a80b883a 	mov	r5,r21
 200dacc:	88a2b03a 	or	r17,r17,r2
 200dad0:	342c983a 	sll	r22,r6,r16
 200dad4:	200e2c00 	call	200e2c0 <__umodsi3>
 200dad8:	b809883a 	mov	r4,r23
 200dadc:	a80b883a 	mov	r5,r21
 200dae0:	d8800015 	stw	r2,0(sp)
 200dae4:	200e2b80 	call	200e2b8 <__udivsi3>
 200dae8:	d8c00017 	ldw	r3,0(sp)
 200daec:	102f883a 	mov	r23,r2
 200daf0:	a73fffcc 	andi	fp,r20,65535
 200daf4:	180a943a 	slli	r5,r3,16
 200daf8:	8804d43a 	srli	r2,r17,16
 200dafc:	bf09383a 	mul	r4,r23,fp
 200db00:	9424983a 	sll	r18,r18,r16
 200db04:	288ab03a 	or	r5,r5,r2
 200db08:	2900042e 	bgeu	r5,r4,200db1c <__umoddi3+0x358>
 200db0c:	2d0b883a 	add	r5,r5,r20
 200db10:	b8bfffc4 	addi	r2,r23,-1
 200db14:	2d00812e 	bgeu	r5,r20,200dd1c <__umoddi3+0x558>
 200db18:	102f883a 	mov	r23,r2
 200db1c:	2907c83a 	sub	r3,r5,r4
 200db20:	1809883a 	mov	r4,r3
 200db24:	a80b883a 	mov	r5,r21
 200db28:	d8c00015 	stw	r3,0(sp)
 200db2c:	200e2c00 	call	200e2c0 <__umodsi3>
 200db30:	d8c00017 	ldw	r3,0(sp)
 200db34:	a80b883a 	mov	r5,r21
 200db38:	d8800015 	stw	r2,0(sp)
 200db3c:	1809883a 	mov	r4,r3
 200db40:	200e2b80 	call	200e2b8 <__udivsi3>
 200db44:	d9800017 	ldw	r6,0(sp)
 200db48:	8c7fffcc 	andi	r17,r17,65535
 200db4c:	3008943a 	slli	r4,r6,16
 200db50:	170d383a 	mul	r6,r2,fp
 200db54:	2448b03a 	or	r4,r4,r17
 200db58:	2180042e 	bgeu	r4,r6,200db6c <__umoddi3+0x3a8>
 200db5c:	2509883a 	add	r4,r4,r20
 200db60:	10ffffc4 	addi	r3,r2,-1
 200db64:	2500692e 	bgeu	r4,r20,200dd0c <__umoddi3+0x548>
 200db68:	1805883a 	mov	r2,r3
 200db6c:	b82e943a 	slli	r23,r23,16
 200db70:	b010d43a 	srli	r8,r22,16
 200db74:	b1ffffcc 	andi	r7,r22,65535
 200db78:	15eeb03a 	or	r23,r2,r23
 200db7c:	b8bfffcc 	andi	r2,r23,65535
 200db80:	b82ed43a 	srli	r23,r23,16
 200db84:	11c7383a 	mul	r3,r2,r7
 200db88:	1205383a 	mul	r2,r2,r8
 200db8c:	b9cf383a 	mul	r7,r23,r7
 200db90:	400b883a 	mov	r5,r8
 200db94:	1810d43a 	srli	r8,r3,16
 200db98:	3885883a 	add	r2,r7,r2
 200db9c:	2189c83a 	sub	r4,r4,r6
 200dba0:	1205883a 	add	r2,r2,r8
 200dba4:	b94b383a 	mul	r5,r23,r5
 200dba8:	11c0022e 	bgeu	r2,r7,200dbb4 <__umoddi3+0x3f0>
 200dbac:	01800074 	movhi	r6,1
 200dbb0:	298b883a 	add	r5,r5,r6
 200dbb4:	100cd43a 	srli	r6,r2,16
 200dbb8:	1004943a 	slli	r2,r2,16
 200dbbc:	18ffffcc 	andi	r3,r3,65535
 200dbc0:	298b883a 	add	r5,r5,r6
 200dbc4:	10c5883a 	add	r2,r2,r3
 200dbc8:	21403836 	bltu	r4,r5,200dcac <__umoddi3+0x4e8>
 200dbcc:	21405c26 	beq	r4,r5,200dd40 <__umoddi3+0x57c>
 200dbd0:	2147c83a 	sub	r3,r4,r5
 200dbd4:	102d883a 	mov	r22,r2
 200dbd8:	95adc83a 	sub	r22,r18,r22
 200dbdc:	95a5803a 	cmpltu	r18,r18,r22
 200dbe0:	1c87c83a 	sub	r3,r3,r18
 200dbe4:	1cc4983a 	sll	r2,r3,r19
 200dbe8:	b42cd83a 	srl	r22,r22,r16
 200dbec:	1c06d83a 	srl	r3,r3,r16
 200dbf0:	1584b03a 	or	r2,r2,r22
 200dbf4:	003f9006 	br	200da38 <__umoddi3+0x274>
 200dbf8:	002b883a 	mov	r21,zero
 200dbfc:	003f1706 	br	200d85c <__umoddi3+0x98>
 200dc00:	8560983a 	sll	r16,r16,r21
 200dc04:	88e6d83a 	srl	r19,r17,r3
 200dc08:	90c6d83a 	srl	r3,r18,r3
 200dc0c:	8028d43a 	srli	r20,r16,16
 200dc10:	8d62983a 	sll	r17,r17,r21
 200dc14:	9809883a 	mov	r4,r19
 200dc18:	a00b883a 	mov	r5,r20
 200dc1c:	88eeb03a 	or	r23,r17,r3
 200dc20:	200e2c00 	call	200e2c0 <__umodsi3>
 200dc24:	9809883a 	mov	r4,r19
 200dc28:	a00b883a 	mov	r5,r20
 200dc2c:	1023883a 	mov	r17,r2
 200dc30:	200e2b80 	call	200e2b8 <__udivsi3>
 200dc34:	85bfffcc 	andi	r22,r16,65535
 200dc38:	880a943a 	slli	r5,r17,16
 200dc3c:	b806d43a 	srli	r3,r23,16
 200dc40:	1585383a 	mul	r2,r2,r22
 200dc44:	9566983a 	sll	r19,r18,r21
 200dc48:	28cab03a 	or	r5,r5,r3
 200dc4c:	2880042e 	bgeu	r5,r2,200dc60 <__umoddi3+0x49c>
 200dc50:	2c0b883a 	add	r5,r5,r16
 200dc54:	2c000236 	bltu	r5,r16,200dc60 <__umoddi3+0x49c>
 200dc58:	2880012e 	bgeu	r5,r2,200dc60 <__umoddi3+0x49c>
 200dc5c:	2c0b883a 	add	r5,r5,r16
 200dc60:	28a5c83a 	sub	r18,r5,r2
 200dc64:	9009883a 	mov	r4,r18
 200dc68:	a00b883a 	mov	r5,r20
 200dc6c:	200e2c00 	call	200e2c0 <__umodsi3>
 200dc70:	1023883a 	mov	r17,r2
 200dc74:	9009883a 	mov	r4,r18
 200dc78:	a00b883a 	mov	r5,r20
 200dc7c:	200e2b80 	call	200e2b8 <__udivsi3>
 200dc80:	8822943a 	slli	r17,r17,16
 200dc84:	1585383a 	mul	r2,r2,r22
 200dc88:	bdffffcc 	andi	r23,r23,65535
 200dc8c:	8de2b03a 	or	r17,r17,r23
 200dc90:	8880042e 	bgeu	r17,r2,200dca4 <__umoddi3+0x4e0>
 200dc94:	8c23883a 	add	r17,r17,r16
 200dc98:	8c000236 	bltu	r17,r16,200dca4 <__umoddi3+0x4e0>
 200dc9c:	8880012e 	bgeu	r17,r2,200dca4 <__umoddi3+0x4e0>
 200dca0:	8c23883a 	add	r17,r17,r16
 200dca4:	88a3c83a 	sub	r17,r17,r2
 200dca8:	003f3d06 	br	200d9a0 <__umoddi3+0x1dc>
 200dcac:	15adc83a 	sub	r22,r2,r22
 200dcb0:	2d07c83a 	sub	r3,r5,r20
 200dcb4:	1585803a 	cmpltu	r2,r2,r22
 200dcb8:	1887c83a 	sub	r3,r3,r2
 200dcbc:	20c7c83a 	sub	r3,r4,r3
 200dcc0:	003fc506 	br	200dbd8 <__umoddi3+0x414>
 200dcc4:	00c00204 	movi	r3,8
 200dcc8:	1827883a 	mov	r19,r3
 200dccc:	003f0b06 	br	200d8fc <__umoddi3+0x138>
 200dcd0:	00c00604 	movi	r3,24
 200dcd4:	1827883a 	mov	r19,r3
 200dcd8:	003f0806 	br	200d8fc <__umoddi3+0x138>
 200dcdc:	00800604 	movi	r2,24
 200dce0:	1009883a 	mov	r4,r2
 200dce4:	003ecf06 	br	200d824 <__umoddi3+0x60>
 200dce8:	00800204 	movi	r2,8
 200dcec:	1007883a 	mov	r3,r2
 200dcf0:	003f1f06 	br	200d970 <__umoddi3+0x1ac>
 200dcf4:	00800604 	movi	r2,24
 200dcf8:	1007883a 	mov	r3,r2
 200dcfc:	003f1c06 	br	200d970 <__umoddi3+0x1ac>
 200dd00:	00800204 	movi	r2,8
 200dd04:	1009883a 	mov	r4,r2
 200dd08:	003ec606 	br	200d824 <__umoddi3+0x60>
 200dd0c:	21bf962e 	bgeu	r4,r6,200db68 <__umoddi3+0x3a4>
 200dd10:	10bfff84 	addi	r2,r2,-2
 200dd14:	2509883a 	add	r4,r4,r20
 200dd18:	003f9406 	br	200db6c <__umoddi3+0x3a8>
 200dd1c:	293f7e2e 	bgeu	r5,r4,200db18 <__umoddi3+0x354>
 200dd20:	bdffff84 	addi	r23,r23,-2
 200dd24:	2d0b883a 	add	r5,r5,r20
 200dd28:	003f7c06 	br	200db1c <__umoddi3+0x358>
 200dd2c:	1c07883a 	add	r3,r3,r16
 200dd30:	003f2a06 	br	200d9dc <__umoddi3+0x218>
 200dd34:	9005883a 	mov	r2,r18
 200dd38:	a007883a 	mov	r3,r20
 200dd3c:	003f3e06 	br	200da38 <__umoddi3+0x274>
 200dd40:	90bfda36 	bltu	r18,r2,200dcac <__umoddi3+0x4e8>
 200dd44:	102d883a 	mov	r22,r2
 200dd48:	0007883a 	mov	r3,zero
 200dd4c:	003fa206 	br	200dbd8 <__umoddi3+0x414>

0200dd50 <__divdf3>:
 200dd50:	defff104 	addi	sp,sp,-60
 200dd54:	d9000c15 	stw	r4,48(sp)
 200dd58:	d9400d15 	stw	r5,52(sp)
 200dd5c:	d9000c04 	addi	r4,sp,48
 200dd60:	d9400504 	addi	r5,sp,20
 200dd64:	dfc00e15 	stw	ra,56(sp)
 200dd68:	d9800a15 	stw	r6,40(sp)
 200dd6c:	d9c00b15 	stw	r7,44(sp)
 200dd70:	2005cb80 	call	2005cb8 <__unpack_d>
 200dd74:	d9000a04 	addi	r4,sp,40
 200dd78:	d80b883a 	mov	r5,sp
 200dd7c:	2005cb80 	call	2005cb8 <__unpack_d>
 200dd80:	d8c00517 	ldw	r3,20(sp)
 200dd84:	00800044 	movi	r2,1
 200dd88:	10c00536 	bltu	r2,r3,200dda0 <__divdf3+0x50>
 200dd8c:	d9000504 	addi	r4,sp,20
 200dd90:	2005a940 	call	2005a94 <__pack_d>
 200dd94:	dfc00e17 	ldw	ra,56(sp)
 200dd98:	dec00f04 	addi	sp,sp,60
 200dd9c:	f800283a 	ret
 200dda0:	d9000017 	ldw	r4,0(sp)
 200dda4:	11000536 	bltu	r2,r4,200ddbc <__divdf3+0x6c>
 200dda8:	d809883a 	mov	r4,sp
 200ddac:	2005a940 	call	2005a94 <__pack_d>
 200ddb0:	dfc00e17 	ldw	ra,56(sp)
 200ddb4:	dec00f04 	addi	sp,sp,60
 200ddb8:	f800283a 	ret
 200ddbc:	d9800617 	ldw	r6,24(sp)
 200ddc0:	d9400117 	ldw	r5,4(sp)
 200ddc4:	00800104 	movi	r2,4
 200ddc8:	314af03a 	xor	r5,r6,r5
 200ddcc:	d9400615 	stw	r5,24(sp)
 200ddd0:	18800226 	beq	r3,r2,200dddc <__divdf3+0x8c>
 200ddd4:	01400084 	movi	r5,2
 200ddd8:	1940041e 	bne	r3,r5,200ddec <__divdf3+0x9c>
 200dddc:	193feb1e 	bne	r3,r4,200dd8c <__divdf3+0x3c>
 200dde0:	01008074 	movhi	r4,513
 200dde4:	2106f104 	addi	r4,r4,7108
 200dde8:	003fe906 	br	200dd90 <__divdf3+0x40>
 200ddec:	20803326 	beq	r4,r2,200debc <__divdf3+0x16c>
 200ddf0:	21403726 	beq	r4,r5,200ded0 <__divdf3+0x180>
 200ddf4:	d8800217 	ldw	r2,8(sp)
 200ddf8:	d9000717 	ldw	r4,28(sp)
 200ddfc:	d8c00917 	ldw	r3,36(sp)
 200de00:	da000417 	ldw	r8,16(sp)
 200de04:	2089c83a 	sub	r4,r4,r2
 200de08:	d9000715 	stw	r4,28(sp)
 200de0c:	d8800817 	ldw	r2,32(sp)
 200de10:	dbc00317 	ldw	r15,12(sp)
 200de14:	1a000236 	bltu	r3,r8,200de20 <__divdf3+0xd0>
 200de18:	40c0081e 	bne	r8,r3,200de3c <__divdf3+0xec>
 200de1c:	13c0072e 	bgeu	r2,r15,200de3c <__divdf3+0xec>
 200de20:	108b883a 	add	r5,r2,r2
 200de24:	288d803a 	cmpltu	r6,r5,r2
 200de28:	18c7883a 	add	r3,r3,r3
 200de2c:	213fffc4 	addi	r4,r4,-1
 200de30:	2805883a 	mov	r2,r5
 200de34:	30c7883a 	add	r3,r6,r3
 200de38:	d9000715 	stw	r4,28(sp)
 200de3c:	01400f44 	movi	r5,61
 200de40:	000f883a 	mov	r7,zero
 200de44:	01040034 	movhi	r4,4096
 200de48:	0019883a 	mov	r12,zero
 200de4c:	001b883a 	mov	r13,zero
 200de50:	201697fa 	slli	r11,r4,31
 200de54:	3814d07a 	srli	r10,r7,1
 200de58:	297fffc4 	addi	r5,r5,-1
 200de5c:	1a000936 	bltu	r3,r8,200de84 <__divdf3+0x134>
 200de60:	13cdc83a 	sub	r6,r2,r15
 200de64:	1193803a 	cmpltu	r9,r2,r6
 200de68:	1a1dc83a 	sub	r14,r3,r8
 200de6c:	40c0011e 	bne	r8,r3,200de74 <__divdf3+0x124>
 200de70:	13c00436 	bltu	r2,r15,200de84 <__divdf3+0x134>
 200de74:	3005883a 	mov	r2,r6
 200de78:	7247c83a 	sub	r3,r14,r9
 200de7c:	61d8b03a 	or	r12,r12,r7
 200de80:	691ab03a 	or	r13,r13,r4
 200de84:	108d883a 	add	r6,r2,r2
 200de88:	3093803a 	cmpltu	r9,r6,r2
 200de8c:	18c7883a 	add	r3,r3,r3
 200de90:	5a8eb03a 	or	r7,r11,r10
 200de94:	2008d07a 	srli	r4,r4,1
 200de98:	3005883a 	mov	r2,r6
 200de9c:	48c7883a 	add	r3,r9,r3
 200dea0:	283feb1e 	bne	r5,zero,200de50 <__divdf3+0x100>
 200dea4:	61003fcc 	andi	r4,r12,255
 200dea8:	01402004 	movi	r5,128
 200deac:	21400b26 	beq	r4,r5,200dedc <__divdf3+0x18c>
 200deb0:	db000815 	stw	r12,32(sp)
 200deb4:	db400915 	stw	r13,36(sp)
 200deb8:	003fb406 	br	200dd8c <__divdf3+0x3c>
 200debc:	d8000815 	stw	zero,32(sp)
 200dec0:	d8000915 	stw	zero,36(sp)
 200dec4:	d8000715 	stw	zero,28(sp)
 200dec8:	d9000504 	addi	r4,sp,20
 200decc:	003fb006 	br	200dd90 <__divdf3+0x40>
 200ded0:	d8800515 	stw	r2,20(sp)
 200ded4:	d9000504 	addi	r4,sp,20
 200ded8:	003fad06 	br	200dd90 <__divdf3+0x40>
 200dedc:	6140400c 	andi	r5,r12,256
 200dee0:	283ff31e 	bne	r5,zero,200deb0 <__divdf3+0x160>
 200dee4:	30c4b03a 	or	r2,r6,r3
 200dee8:	103ff126 	beq	r2,zero,200deb0 <__divdf3+0x160>
 200deec:	6109883a 	add	r4,r12,r4
 200def0:	2305803a 	cmpltu	r2,r4,r12
 200def4:	033fc004 	movi	r12,-256
 200def8:	2318703a 	and	r12,r4,r12
 200defc:	135b883a 	add	r13,r2,r13
 200df00:	003feb06 	br	200deb0 <__divdf3+0x160>

0200df04 <__eqdf2>:
 200df04:	defff104 	addi	sp,sp,-60
 200df08:	d9000c15 	stw	r4,48(sp)
 200df0c:	d9400d15 	stw	r5,52(sp)
 200df10:	d9000c04 	addi	r4,sp,48
 200df14:	d9400504 	addi	r5,sp,20
 200df18:	dfc00e15 	stw	ra,56(sp)
 200df1c:	d9800a15 	stw	r6,40(sp)
 200df20:	d9c00b15 	stw	r7,44(sp)
 200df24:	2005cb80 	call	2005cb8 <__unpack_d>
 200df28:	d9000a04 	addi	r4,sp,40
 200df2c:	d80b883a 	mov	r5,sp
 200df30:	2005cb80 	call	2005cb8 <__unpack_d>
 200df34:	d8c00517 	ldw	r3,20(sp)
 200df38:	00800044 	movi	r2,1
 200df3c:	10c0052e 	bgeu	r2,r3,200df54 <__eqdf2+0x50>
 200df40:	d8c00017 	ldw	r3,0(sp)
 200df44:	10c0032e 	bgeu	r2,r3,200df54 <__eqdf2+0x50>
 200df48:	d9000504 	addi	r4,sp,20
 200df4c:	d80b883a 	mov	r5,sp
 200df50:	2005dbc0 	call	2005dbc <__fpcmp_parts_d>
 200df54:	dfc00e17 	ldw	ra,56(sp)
 200df58:	dec00f04 	addi	sp,sp,60
 200df5c:	f800283a 	ret

0200df60 <__nedf2>:
 200df60:	defff104 	addi	sp,sp,-60
 200df64:	d9000c15 	stw	r4,48(sp)
 200df68:	d9400d15 	stw	r5,52(sp)
 200df6c:	d9000c04 	addi	r4,sp,48
 200df70:	d9400504 	addi	r5,sp,20
 200df74:	dfc00e15 	stw	ra,56(sp)
 200df78:	d9800a15 	stw	r6,40(sp)
 200df7c:	d9c00b15 	stw	r7,44(sp)
 200df80:	2005cb80 	call	2005cb8 <__unpack_d>
 200df84:	d9000a04 	addi	r4,sp,40
 200df88:	d80b883a 	mov	r5,sp
 200df8c:	2005cb80 	call	2005cb8 <__unpack_d>
 200df90:	d8c00517 	ldw	r3,20(sp)
 200df94:	00800044 	movi	r2,1
 200df98:	10c0052e 	bgeu	r2,r3,200dfb0 <__nedf2+0x50>
 200df9c:	d8c00017 	ldw	r3,0(sp)
 200dfa0:	10c0032e 	bgeu	r2,r3,200dfb0 <__nedf2+0x50>
 200dfa4:	d9000504 	addi	r4,sp,20
 200dfa8:	d80b883a 	mov	r5,sp
 200dfac:	2005dbc0 	call	2005dbc <__fpcmp_parts_d>
 200dfb0:	dfc00e17 	ldw	ra,56(sp)
 200dfb4:	dec00f04 	addi	sp,sp,60
 200dfb8:	f800283a 	ret

0200dfbc <__gtdf2>:
 200dfbc:	defff104 	addi	sp,sp,-60
 200dfc0:	d9000c15 	stw	r4,48(sp)
 200dfc4:	d9400d15 	stw	r5,52(sp)
 200dfc8:	d9000c04 	addi	r4,sp,48
 200dfcc:	d9400504 	addi	r5,sp,20
 200dfd0:	dfc00e15 	stw	ra,56(sp)
 200dfd4:	d9800a15 	stw	r6,40(sp)
 200dfd8:	d9c00b15 	stw	r7,44(sp)
 200dfdc:	2005cb80 	call	2005cb8 <__unpack_d>
 200dfe0:	d9000a04 	addi	r4,sp,40
 200dfe4:	d80b883a 	mov	r5,sp
 200dfe8:	2005cb80 	call	2005cb8 <__unpack_d>
 200dfec:	d8c00517 	ldw	r3,20(sp)
 200dff0:	00800044 	movi	r2,1
 200dff4:	10c0082e 	bgeu	r2,r3,200e018 <__gtdf2+0x5c>
 200dff8:	d8c00017 	ldw	r3,0(sp)
 200dffc:	10c0062e 	bgeu	r2,r3,200e018 <__gtdf2+0x5c>
 200e000:	d9000504 	addi	r4,sp,20
 200e004:	d80b883a 	mov	r5,sp
 200e008:	2005dbc0 	call	2005dbc <__fpcmp_parts_d>
 200e00c:	dfc00e17 	ldw	ra,56(sp)
 200e010:	dec00f04 	addi	sp,sp,60
 200e014:	f800283a 	ret
 200e018:	00bfffc4 	movi	r2,-1
 200e01c:	003ffb06 	br	200e00c <__gtdf2+0x50>

0200e020 <__ltdf2>:
 200e020:	defff104 	addi	sp,sp,-60
 200e024:	d9000c15 	stw	r4,48(sp)
 200e028:	d9400d15 	stw	r5,52(sp)
 200e02c:	d9000c04 	addi	r4,sp,48
 200e030:	d9400504 	addi	r5,sp,20
 200e034:	dfc00e15 	stw	ra,56(sp)
 200e038:	d9800a15 	stw	r6,40(sp)
 200e03c:	d9c00b15 	stw	r7,44(sp)
 200e040:	2005cb80 	call	2005cb8 <__unpack_d>
 200e044:	d9000a04 	addi	r4,sp,40
 200e048:	d80b883a 	mov	r5,sp
 200e04c:	2005cb80 	call	2005cb8 <__unpack_d>
 200e050:	d8c00517 	ldw	r3,20(sp)
 200e054:	00800044 	movi	r2,1
 200e058:	10c0052e 	bgeu	r2,r3,200e070 <__ltdf2+0x50>
 200e05c:	d8c00017 	ldw	r3,0(sp)
 200e060:	10c0032e 	bgeu	r2,r3,200e070 <__ltdf2+0x50>
 200e064:	d9000504 	addi	r4,sp,20
 200e068:	d80b883a 	mov	r5,sp
 200e06c:	2005dbc0 	call	2005dbc <__fpcmp_parts_d>
 200e070:	dfc00e17 	ldw	ra,56(sp)
 200e074:	dec00f04 	addi	sp,sp,60
 200e078:	f800283a 	ret

0200e07c <__floatunsidf>:
 200e07c:	defff904 	addi	sp,sp,-28
 200e080:	dc000515 	stw	r16,20(sp)
 200e084:	dfc00615 	stw	ra,24(sp)
 200e088:	d8000115 	stw	zero,4(sp)
 200e08c:	2021883a 	mov	r16,r4
 200e090:	20001726 	beq	r4,zero,200e0f0 <__floatunsidf+0x74>
 200e094:	008000c4 	movi	r2,3
 200e098:	d8800015 	stw	r2,0(sp)
 200e09c:	00800f04 	movi	r2,60
 200e0a0:	d8800215 	stw	r2,8(sp)
 200e0a4:	20059e80 	call	20059e8 <__clzsi2>
 200e0a8:	10c00744 	addi	r3,r2,29
 200e0ac:	18001816 	blt	r3,zero,200e110 <__floatunsidf+0x94>
 200e0b0:	18002d26 	beq	r3,zero,200e168 <__floatunsidf+0xec>
 200e0b4:	113fff44 	addi	r4,r2,-3
 200e0b8:	20002e16 	blt	r4,zero,200e174 <__floatunsidf+0xf8>
 200e0bc:	8108983a 	sll	r4,r16,r4
 200e0c0:	0021883a 	mov	r16,zero
 200e0c4:	014007c4 	movi	r5,31
 200e0c8:	2885c83a 	sub	r2,r5,r2
 200e0cc:	dc000315 	stw	r16,12(sp)
 200e0d0:	d9000415 	stw	r4,16(sp)
 200e0d4:	d8800215 	stw	r2,8(sp)
 200e0d8:	d809883a 	mov	r4,sp
 200e0dc:	2005a940 	call	2005a94 <__pack_d>
 200e0e0:	dfc00617 	ldw	ra,24(sp)
 200e0e4:	dc000517 	ldw	r16,20(sp)
 200e0e8:	dec00704 	addi	sp,sp,28
 200e0ec:	f800283a 	ret
 200e0f0:	00800084 	movi	r2,2
 200e0f4:	d809883a 	mov	r4,sp
 200e0f8:	d8800015 	stw	r2,0(sp)
 200e0fc:	2005a940 	call	2005a94 <__pack_d>
 200e100:	dfc00617 	ldw	ra,24(sp)
 200e104:	dc000517 	ldw	r16,20(sp)
 200e108:	dec00704 	addi	sp,sp,28
 200e10c:	f800283a 	ret
 200e110:	00c7c83a 	sub	r3,zero,r3
 200e114:	193ff804 	addi	r4,r3,-32
 200e118:	20001c16 	blt	r4,zero,200e18c <__floatunsidf+0x110>
 200e11c:	000b883a 	mov	r5,zero
 200e120:	2009d7fa 	srai	r4,r4,31
 200e124:	80c6d83a 	srl	r3,r16,r3
 200e128:	297fffc4 	addi	r5,r5,-1
 200e12c:	2c20703a 	and	r16,r5,r16
 200e130:	8020c03a 	cmpne	r16,r16,zero
 200e134:	1906703a 	and	r3,r3,r4
 200e138:	010007c4 	movi	r4,31
 200e13c:	80c6b03a 	or	r3,r16,r3
 200e140:	2085c83a 	sub	r2,r4,r2
 200e144:	d809883a 	mov	r4,sp
 200e148:	d8c00315 	stw	r3,12(sp)
 200e14c:	d8000415 	stw	zero,16(sp)
 200e150:	d8800215 	stw	r2,8(sp)
 200e154:	2005a940 	call	2005a94 <__pack_d>
 200e158:	dfc00617 	ldw	ra,24(sp)
 200e15c:	dc000517 	ldw	r16,20(sp)
 200e160:	dec00704 	addi	sp,sp,28
 200e164:	f800283a 	ret
 200e168:	dc000315 	stw	r16,12(sp)
 200e16c:	d8000415 	stw	zero,16(sp)
 200e170:	003fd906 	br	200e0d8 <__floatunsidf+0x5c>
 200e174:	800ad07a 	srli	r5,r16,1
 200e178:	010007c4 	movi	r4,31
 200e17c:	20c9c83a 	sub	r4,r4,r3
 200e180:	2908d83a 	srl	r4,r5,r4
 200e184:	80e0983a 	sll	r16,r16,r3
 200e188:	003fce06 	br	200e0c4 <__floatunsidf+0x48>
 200e18c:	01400044 	movi	r5,1
 200e190:	28ca983a 	sll	r5,r5,r3
 200e194:	003fe206 	br	200e120 <__floatunsidf+0xa4>

0200e198 <udivmodsi4>:
 200e198:	2005883a 	mov	r2,r4
 200e19c:	2900182e 	bgeu	r5,r4,200e200 <udivmodsi4+0x68>
 200e1a0:	28001716 	blt	r5,zero,200e200 <udivmodsi4+0x68>
 200e1a4:	01000804 	movi	r4,32
 200e1a8:	00c00044 	movi	r3,1
 200e1ac:	00000206 	br	200e1b8 <udivmodsi4+0x20>
 200e1b0:	20001126 	beq	r4,zero,200e1f8 <udivmodsi4+0x60>
 200e1b4:	28000516 	blt	r5,zero,200e1cc <udivmodsi4+0x34>
 200e1b8:	294b883a 	add	r5,r5,r5
 200e1bc:	213fffc4 	addi	r4,r4,-1
 200e1c0:	18c7883a 	add	r3,r3,r3
 200e1c4:	28bffa36 	bltu	r5,r2,200e1b0 <udivmodsi4+0x18>
 200e1c8:	18000b26 	beq	r3,zero,200e1f8 <udivmodsi4+0x60>
 200e1cc:	0009883a 	mov	r4,zero
 200e1d0:	11400236 	bltu	r2,r5,200e1dc <udivmodsi4+0x44>
 200e1d4:	1145c83a 	sub	r2,r2,r5
 200e1d8:	20c8b03a 	or	r4,r4,r3
 200e1dc:	1806d07a 	srli	r3,r3,1
 200e1e0:	280ad07a 	srli	r5,r5,1
 200e1e4:	183ffa1e 	bne	r3,zero,200e1d0 <udivmodsi4+0x38>
 200e1e8:	3000021e 	bne	r6,zero,200e1f4 <udivmodsi4+0x5c>
 200e1ec:	2005883a 	mov	r2,r4
 200e1f0:	f800283a 	ret
 200e1f4:	f800283a 	ret
 200e1f8:	0009883a 	mov	r4,zero
 200e1fc:	003ffa06 	br	200e1e8 <udivmodsi4+0x50>
 200e200:	00c00044 	movi	r3,1
 200e204:	0009883a 	mov	r4,zero
 200e208:	003ff106 	br	200e1d0 <udivmodsi4+0x38>

0200e20c <__divsi3>:
 200e20c:	defffe04 	addi	sp,sp,-8
 200e210:	dfc00115 	stw	ra,4(sp)
 200e214:	dc000015 	stw	r16,0(sp)
 200e218:	20000a16 	blt	r4,zero,200e244 <__divsi3+0x38>
 200e21c:	0021883a 	mov	r16,zero
 200e220:	28000b16 	blt	r5,zero,200e250 <__divsi3+0x44>
 200e224:	000d883a 	mov	r6,zero
 200e228:	200e1980 	call	200e198 <udivmodsi4>
 200e22c:	80000126 	beq	r16,zero,200e234 <__divsi3+0x28>
 200e230:	0085c83a 	sub	r2,zero,r2
 200e234:	dfc00117 	ldw	ra,4(sp)
 200e238:	dc000017 	ldw	r16,0(sp)
 200e23c:	dec00204 	addi	sp,sp,8
 200e240:	f800283a 	ret
 200e244:	0109c83a 	sub	r4,zero,r4
 200e248:	04000044 	movi	r16,1
 200e24c:	283ff50e 	bge	r5,zero,200e224 <__divsi3+0x18>
 200e250:	014bc83a 	sub	r5,zero,r5
 200e254:	8400005c 	xori	r16,r16,1
 200e258:	003ff206 	br	200e224 <__divsi3+0x18>

0200e25c <__modsi3>:
 200e25c:	deffff04 	addi	sp,sp,-4
 200e260:	dfc00015 	stw	ra,0(sp)
 200e264:	20000516 	blt	r4,zero,200e27c <__modsi3+0x20>
 200e268:	28000c16 	blt	r5,zero,200e29c <__modsi3+0x40>
 200e26c:	01800044 	movi	r6,1
 200e270:	dfc00017 	ldw	ra,0(sp)
 200e274:	dec00104 	addi	sp,sp,4
 200e278:	200e1981 	jmpi	200e198 <udivmodsi4>
 200e27c:	0109c83a 	sub	r4,zero,r4
 200e280:	28000b16 	blt	r5,zero,200e2b0 <__modsi3+0x54>
 200e284:	01800044 	movi	r6,1
 200e288:	200e1980 	call	200e198 <udivmodsi4>
 200e28c:	0085c83a 	sub	r2,zero,r2
 200e290:	dfc00017 	ldw	ra,0(sp)
 200e294:	dec00104 	addi	sp,sp,4
 200e298:	f800283a 	ret
 200e29c:	014bc83a 	sub	r5,zero,r5
 200e2a0:	01800044 	movi	r6,1
 200e2a4:	dfc00017 	ldw	ra,0(sp)
 200e2a8:	dec00104 	addi	sp,sp,4
 200e2ac:	200e1981 	jmpi	200e198 <udivmodsi4>
 200e2b0:	014bc83a 	sub	r5,zero,r5
 200e2b4:	003ff306 	br	200e284 <__modsi3+0x28>

0200e2b8 <__udivsi3>:
 200e2b8:	000d883a 	mov	r6,zero
 200e2bc:	200e1981 	jmpi	200e198 <udivmodsi4>

0200e2c0 <__umodsi3>:
 200e2c0:	01800044 	movi	r6,1
 200e2c4:	200e1981 	jmpi	200e198 <udivmodsi4>

0200e2c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e2c8:	defffe04 	addi	sp,sp,-8
 200e2cc:	dfc00115 	stw	ra,4(sp)
 200e2d0:	df000015 	stw	fp,0(sp)
 200e2d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e2d8:	00808074 	movhi	r2,513
 200e2dc:	108e8104 	addi	r2,r2,14852
 200e2e0:	10800017 	ldw	r2,0(r2)
 200e2e4:	10000526 	beq	r2,zero,200e2fc <alt_get_errno+0x34>
 200e2e8:	00808074 	movhi	r2,513
 200e2ec:	108e8104 	addi	r2,r2,14852
 200e2f0:	10800017 	ldw	r2,0(r2)
 200e2f4:	103ee83a 	callr	r2
 200e2f8:	00000206 	br	200e304 <alt_get_errno+0x3c>
 200e2fc:	00808074 	movhi	r2,513
 200e300:	108e8e04 	addi	r2,r2,14904
}
 200e304:	e037883a 	mov	sp,fp
 200e308:	dfc00117 	ldw	ra,4(sp)
 200e30c:	df000017 	ldw	fp,0(sp)
 200e310:	dec00204 	addi	sp,sp,8
 200e314:	f800283a 	ret

0200e318 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200e318:	defffb04 	addi	sp,sp,-20
 200e31c:	dfc00415 	stw	ra,16(sp)
 200e320:	df000315 	stw	fp,12(sp)
 200e324:	df000304 	addi	fp,sp,12
 200e328:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200e32c:	e0bfff17 	ldw	r2,-4(fp)
 200e330:	10000616 	blt	r2,zero,200e34c <close+0x34>
 200e334:	e0bfff17 	ldw	r2,-4(fp)
 200e338:	10c00324 	muli	r3,r2,12
 200e33c:	00808074 	movhi	r2,513
 200e340:	1089cb04 	addi	r2,r2,10028
 200e344:	1885883a 	add	r2,r3,r2
 200e348:	00000106 	br	200e350 <close+0x38>
 200e34c:	0005883a 	mov	r2,zero
 200e350:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200e354:	e0bffd17 	ldw	r2,-12(fp)
 200e358:	10001826 	beq	r2,zero,200e3bc <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200e35c:	e0bffd17 	ldw	r2,-12(fp)
 200e360:	10800017 	ldw	r2,0(r2)
 200e364:	10800417 	ldw	r2,16(r2)
 200e368:	10000626 	beq	r2,zero,200e384 <close+0x6c>
 200e36c:	e0bffd17 	ldw	r2,-12(fp)
 200e370:	10800017 	ldw	r2,0(r2)
 200e374:	10800417 	ldw	r2,16(r2)
 200e378:	e13ffd17 	ldw	r4,-12(fp)
 200e37c:	103ee83a 	callr	r2
 200e380:	00000106 	br	200e388 <close+0x70>
 200e384:	0005883a 	mov	r2,zero
 200e388:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200e38c:	e13fff17 	ldw	r4,-4(fp)
 200e390:	200e9100 	call	200e910 <alt_release_fd>
    if (rval < 0)
 200e394:	e0bffe17 	ldw	r2,-8(fp)
 200e398:	1000060e 	bge	r2,zero,200e3b4 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 200e39c:	200e2c80 	call	200e2c8 <alt_get_errno>
 200e3a0:	e0fffe17 	ldw	r3,-8(fp)
 200e3a4:	00c7c83a 	sub	r3,zero,r3
 200e3a8:	10c00015 	stw	r3,0(r2)
      return -1;
 200e3ac:	00bfffc4 	movi	r2,-1
 200e3b0:	00000606 	br	200e3cc <close+0xb4>
    }
    return 0;
 200e3b4:	0005883a 	mov	r2,zero
 200e3b8:	00000406 	br	200e3cc <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e3bc:	200e2c80 	call	200e2c8 <alt_get_errno>
 200e3c0:	00c01444 	movi	r3,81
 200e3c4:	10c00015 	stw	r3,0(r2)
    return -1;
 200e3c8:	00bfffc4 	movi	r2,-1
  }
}
 200e3cc:	e037883a 	mov	sp,fp
 200e3d0:	dfc00117 	ldw	ra,4(sp)
 200e3d4:	df000017 	ldw	fp,0(sp)
 200e3d8:	dec00204 	addi	sp,sp,8
 200e3dc:	f800283a 	ret

0200e3e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200e3e0:	defffc04 	addi	sp,sp,-16
 200e3e4:	df000315 	stw	fp,12(sp)
 200e3e8:	df000304 	addi	fp,sp,12
 200e3ec:	e13ffd15 	stw	r4,-12(fp)
 200e3f0:	e17ffe15 	stw	r5,-8(fp)
 200e3f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200e3f8:	e0bfff17 	ldw	r2,-4(fp)
}
 200e3fc:	e037883a 	mov	sp,fp
 200e400:	df000017 	ldw	fp,0(sp)
 200e404:	dec00104 	addi	sp,sp,4
 200e408:	f800283a 	ret

0200e40c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e40c:	defffe04 	addi	sp,sp,-8
 200e410:	dfc00115 	stw	ra,4(sp)
 200e414:	df000015 	stw	fp,0(sp)
 200e418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e41c:	00808074 	movhi	r2,513
 200e420:	108e8104 	addi	r2,r2,14852
 200e424:	10800017 	ldw	r2,0(r2)
 200e428:	10000526 	beq	r2,zero,200e440 <alt_get_errno+0x34>
 200e42c:	00808074 	movhi	r2,513
 200e430:	108e8104 	addi	r2,r2,14852
 200e434:	10800017 	ldw	r2,0(r2)
 200e438:	103ee83a 	callr	r2
 200e43c:	00000206 	br	200e448 <alt_get_errno+0x3c>
 200e440:	00808074 	movhi	r2,513
 200e444:	108e8e04 	addi	r2,r2,14904
}
 200e448:	e037883a 	mov	sp,fp
 200e44c:	dfc00117 	ldw	ra,4(sp)
 200e450:	df000017 	ldw	fp,0(sp)
 200e454:	dec00204 	addi	sp,sp,8
 200e458:	f800283a 	ret

0200e45c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200e45c:	defffb04 	addi	sp,sp,-20
 200e460:	dfc00415 	stw	ra,16(sp)
 200e464:	df000315 	stw	fp,12(sp)
 200e468:	df000304 	addi	fp,sp,12
 200e46c:	e13ffe15 	stw	r4,-8(fp)
 200e470:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e474:	e0bffe17 	ldw	r2,-8(fp)
 200e478:	10000616 	blt	r2,zero,200e494 <fstat+0x38>
 200e47c:	e0bffe17 	ldw	r2,-8(fp)
 200e480:	10c00324 	muli	r3,r2,12
 200e484:	00808074 	movhi	r2,513
 200e488:	1089cb04 	addi	r2,r2,10028
 200e48c:	1885883a 	add	r2,r3,r2
 200e490:	00000106 	br	200e498 <fstat+0x3c>
 200e494:	0005883a 	mov	r2,zero
 200e498:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200e49c:	e0bffd17 	ldw	r2,-12(fp)
 200e4a0:	10001026 	beq	r2,zero,200e4e4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200e4a4:	e0bffd17 	ldw	r2,-12(fp)
 200e4a8:	10800017 	ldw	r2,0(r2)
 200e4ac:	10800817 	ldw	r2,32(r2)
 200e4b0:	10000726 	beq	r2,zero,200e4d0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 200e4b4:	e0bffd17 	ldw	r2,-12(fp)
 200e4b8:	10800017 	ldw	r2,0(r2)
 200e4bc:	10800817 	ldw	r2,32(r2)
 200e4c0:	e13ffd17 	ldw	r4,-12(fp)
 200e4c4:	e17fff17 	ldw	r5,-4(fp)
 200e4c8:	103ee83a 	callr	r2
 200e4cc:	00000906 	br	200e4f4 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200e4d0:	e0bfff17 	ldw	r2,-4(fp)
 200e4d4:	00c80004 	movi	r3,8192
 200e4d8:	10c00115 	stw	r3,4(r2)
      return 0;
 200e4dc:	0005883a 	mov	r2,zero
 200e4e0:	00000406 	br	200e4f4 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e4e4:	200e40c0 	call	200e40c <alt_get_errno>
 200e4e8:	00c01444 	movi	r3,81
 200e4ec:	10c00015 	stw	r3,0(r2)
    return -1;
 200e4f0:	00bfffc4 	movi	r2,-1
  }
}
 200e4f4:	e037883a 	mov	sp,fp
 200e4f8:	dfc00117 	ldw	ra,4(sp)
 200e4fc:	df000017 	ldw	fp,0(sp)
 200e500:	dec00204 	addi	sp,sp,8
 200e504:	f800283a 	ret

0200e508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e508:	defffe04 	addi	sp,sp,-8
 200e50c:	dfc00115 	stw	ra,4(sp)
 200e510:	df000015 	stw	fp,0(sp)
 200e514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e518:	00808074 	movhi	r2,513
 200e51c:	108e8104 	addi	r2,r2,14852
 200e520:	10800017 	ldw	r2,0(r2)
 200e524:	10000526 	beq	r2,zero,200e53c <alt_get_errno+0x34>
 200e528:	00808074 	movhi	r2,513
 200e52c:	108e8104 	addi	r2,r2,14852
 200e530:	10800017 	ldw	r2,0(r2)
 200e534:	103ee83a 	callr	r2
 200e538:	00000206 	br	200e544 <alt_get_errno+0x3c>
 200e53c:	00808074 	movhi	r2,513
 200e540:	108e8e04 	addi	r2,r2,14904
}
 200e544:	e037883a 	mov	sp,fp
 200e548:	dfc00117 	ldw	ra,4(sp)
 200e54c:	df000017 	ldw	fp,0(sp)
 200e550:	dec00204 	addi	sp,sp,8
 200e554:	f800283a 	ret

0200e558 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200e558:	deffed04 	addi	sp,sp,-76
 200e55c:	dfc01215 	stw	ra,72(sp)
 200e560:	df001115 	stw	fp,68(sp)
 200e564:	df001104 	addi	fp,sp,68
 200e568:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e56c:	e0bfff17 	ldw	r2,-4(fp)
 200e570:	10000616 	blt	r2,zero,200e58c <isatty+0x34>
 200e574:	e0bfff17 	ldw	r2,-4(fp)
 200e578:	10c00324 	muli	r3,r2,12
 200e57c:	00808074 	movhi	r2,513
 200e580:	1089cb04 	addi	r2,r2,10028
 200e584:	1885883a 	add	r2,r3,r2
 200e588:	00000106 	br	200e590 <isatty+0x38>
 200e58c:	0005883a 	mov	r2,zero
 200e590:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200e594:	e0bfef17 	ldw	r2,-68(fp)
 200e598:	10000e26 	beq	r2,zero,200e5d4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200e59c:	e0bfef17 	ldw	r2,-68(fp)
 200e5a0:	10800017 	ldw	r2,0(r2)
 200e5a4:	10800817 	ldw	r2,32(r2)
 200e5a8:	1000021e 	bne	r2,zero,200e5b4 <isatty+0x5c>
    {
      return 1;
 200e5ac:	00800044 	movi	r2,1
 200e5b0:	00000c06 	br	200e5e4 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200e5b4:	e0bff004 	addi	r2,fp,-64
 200e5b8:	e13fff17 	ldw	r4,-4(fp)
 200e5bc:	100b883a 	mov	r5,r2
 200e5c0:	200e45c0 	call	200e45c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200e5c4:	e0bff117 	ldw	r2,-60(fp)
 200e5c8:	10880020 	cmpeqi	r2,r2,8192
 200e5cc:	10803fcc 	andi	r2,r2,255
 200e5d0:	00000406 	br	200e5e4 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e5d4:	200e5080 	call	200e508 <alt_get_errno>
 200e5d8:	00c01444 	movi	r3,81
 200e5dc:	10c00015 	stw	r3,0(r2)
    return 0;
 200e5e0:	0005883a 	mov	r2,zero
  }
}
 200e5e4:	e037883a 	mov	sp,fp
 200e5e8:	dfc00117 	ldw	ra,4(sp)
 200e5ec:	df000017 	ldw	fp,0(sp)
 200e5f0:	dec00204 	addi	sp,sp,8
 200e5f4:	f800283a 	ret

0200e5f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e5f8:	defffe04 	addi	sp,sp,-8
 200e5fc:	dfc00115 	stw	ra,4(sp)
 200e600:	df000015 	stw	fp,0(sp)
 200e604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e608:	00808074 	movhi	r2,513
 200e60c:	108e8104 	addi	r2,r2,14852
 200e610:	10800017 	ldw	r2,0(r2)
 200e614:	10000526 	beq	r2,zero,200e62c <alt_get_errno+0x34>
 200e618:	00808074 	movhi	r2,513
 200e61c:	108e8104 	addi	r2,r2,14852
 200e620:	10800017 	ldw	r2,0(r2)
 200e624:	103ee83a 	callr	r2
 200e628:	00000206 	br	200e634 <alt_get_errno+0x3c>
 200e62c:	00808074 	movhi	r2,513
 200e630:	108e8e04 	addi	r2,r2,14904
}
 200e634:	e037883a 	mov	sp,fp
 200e638:	dfc00117 	ldw	ra,4(sp)
 200e63c:	df000017 	ldw	fp,0(sp)
 200e640:	dec00204 	addi	sp,sp,8
 200e644:	f800283a 	ret

0200e648 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200e648:	defff904 	addi	sp,sp,-28
 200e64c:	dfc00615 	stw	ra,24(sp)
 200e650:	df000515 	stw	fp,20(sp)
 200e654:	df000504 	addi	fp,sp,20
 200e658:	e13ffd15 	stw	r4,-12(fp)
 200e65c:	e17ffe15 	stw	r5,-8(fp)
 200e660:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200e664:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e668:	e0bffd17 	ldw	r2,-12(fp)
 200e66c:	10000616 	blt	r2,zero,200e688 <lseek+0x40>
 200e670:	e0bffd17 	ldw	r2,-12(fp)
 200e674:	10c00324 	muli	r3,r2,12
 200e678:	00808074 	movhi	r2,513
 200e67c:	1089cb04 	addi	r2,r2,10028
 200e680:	1885883a 	add	r2,r3,r2
 200e684:	00000106 	br	200e68c <lseek+0x44>
 200e688:	0005883a 	mov	r2,zero
 200e68c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200e690:	e0bffc17 	ldw	r2,-16(fp)
 200e694:	10001026 	beq	r2,zero,200e6d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200e698:	e0bffc17 	ldw	r2,-16(fp)
 200e69c:	10800017 	ldw	r2,0(r2)
 200e6a0:	10800717 	ldw	r2,28(r2)
 200e6a4:	10000926 	beq	r2,zero,200e6cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200e6a8:	e0bffc17 	ldw	r2,-16(fp)
 200e6ac:	10800017 	ldw	r2,0(r2)
 200e6b0:	10800717 	ldw	r2,28(r2)
 200e6b4:	e13ffc17 	ldw	r4,-16(fp)
 200e6b8:	e17ffe17 	ldw	r5,-8(fp)
 200e6bc:	e1bfff17 	ldw	r6,-4(fp)
 200e6c0:	103ee83a 	callr	r2
 200e6c4:	e0bffb15 	stw	r2,-20(fp)
 200e6c8:	00000506 	br	200e6e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200e6cc:	00bfde84 	movi	r2,-134
 200e6d0:	e0bffb15 	stw	r2,-20(fp)
 200e6d4:	00000206 	br	200e6e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 200e6d8:	00bfebc4 	movi	r2,-81
 200e6dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200e6e0:	e0bffb17 	ldw	r2,-20(fp)
 200e6e4:	1000060e 	bge	r2,zero,200e700 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 200e6e8:	200e5f80 	call	200e5f8 <alt_get_errno>
 200e6ec:	e0fffb17 	ldw	r3,-20(fp)
 200e6f0:	00c7c83a 	sub	r3,zero,r3
 200e6f4:	10c00015 	stw	r3,0(r2)
    rc = -1;
 200e6f8:	00bfffc4 	movi	r2,-1
 200e6fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200e700:	e0bffb17 	ldw	r2,-20(fp)
}
 200e704:	e037883a 	mov	sp,fp
 200e708:	dfc00117 	ldw	ra,4(sp)
 200e70c:	df000017 	ldw	fp,0(sp)
 200e710:	dec00204 	addi	sp,sp,8
 200e714:	f800283a 	ret

0200e718 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200e718:	defffd04 	addi	sp,sp,-12
 200e71c:	dfc00215 	stw	ra,8(sp)
 200e720:	df000115 	stw	fp,4(sp)
 200e724:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200e728:	0009883a 	mov	r4,zero
 200e72c:	200ebc40 	call	200ebc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200e730:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200e734:	200ebf80 	call	200ebf8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200e738:	01008074 	movhi	r4,513
 200e73c:	2107b004 	addi	r4,r4,7872
 200e740:	01408074 	movhi	r5,513
 200e744:	2947b004 	addi	r5,r5,7872
 200e748:	01808074 	movhi	r6,513
 200e74c:	3187b004 	addi	r6,r6,7872
 200e750:	2010edc0 	call	2010edc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200e754:	20109e40 	call	20109e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200e758:	01008074 	movhi	r4,513
 200e75c:	21029004 	addi	r4,r4,2624
 200e760:	20117e00 	call	20117e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200e764:	d1201a17 	ldw	r4,-32664(gp)
 200e768:	d0e01b17 	ldw	r3,-32660(gp)
 200e76c:	d0a01c17 	ldw	r2,-32656(gp)
 200e770:	180b883a 	mov	r5,r3
 200e774:	100d883a 	mov	r6,r2
 200e778:	2004fe00 	call	2004fe0 <main>
 200e77c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200e780:	01000044 	movi	r4,1
 200e784:	200e3180 	call	200e318 <close>
  exit (result);
 200e788:	e13fff17 	ldw	r4,-4(fp)
 200e78c:	20117f40 	call	20117f4 <exit>

0200e790 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200e790:	defffe04 	addi	sp,sp,-8
 200e794:	df000115 	stw	fp,4(sp)
 200e798:	df000104 	addi	fp,sp,4
 200e79c:	e13fff15 	stw	r4,-4(fp)
}
 200e7a0:	e037883a 	mov	sp,fp
 200e7a4:	df000017 	ldw	fp,0(sp)
 200e7a8:	dec00104 	addi	sp,sp,4
 200e7ac:	f800283a 	ret

0200e7b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200e7b0:	defffe04 	addi	sp,sp,-8
 200e7b4:	df000115 	stw	fp,4(sp)
 200e7b8:	df000104 	addi	fp,sp,4
 200e7bc:	e13fff15 	stw	r4,-4(fp)
}
 200e7c0:	e037883a 	mov	sp,fp
 200e7c4:	df000017 	ldw	fp,0(sp)
 200e7c8:	dec00104 	addi	sp,sp,4
 200e7cc:	f800283a 	ret

0200e7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e7d0:	defffe04 	addi	sp,sp,-8
 200e7d4:	dfc00115 	stw	ra,4(sp)
 200e7d8:	df000015 	stw	fp,0(sp)
 200e7dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e7e0:	00808074 	movhi	r2,513
 200e7e4:	108e8104 	addi	r2,r2,14852
 200e7e8:	10800017 	ldw	r2,0(r2)
 200e7ec:	10000526 	beq	r2,zero,200e804 <alt_get_errno+0x34>
 200e7f0:	00808074 	movhi	r2,513
 200e7f4:	108e8104 	addi	r2,r2,14852
 200e7f8:	10800017 	ldw	r2,0(r2)
 200e7fc:	103ee83a 	callr	r2
 200e800:	00000206 	br	200e80c <alt_get_errno+0x3c>
 200e804:	00808074 	movhi	r2,513
 200e808:	108e8e04 	addi	r2,r2,14904
}
 200e80c:	e037883a 	mov	sp,fp
 200e810:	dfc00117 	ldw	ra,4(sp)
 200e814:	df000017 	ldw	fp,0(sp)
 200e818:	dec00204 	addi	sp,sp,8
 200e81c:	f800283a 	ret

0200e820 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200e820:	defff904 	addi	sp,sp,-28
 200e824:	dfc00615 	stw	ra,24(sp)
 200e828:	df000515 	stw	fp,20(sp)
 200e82c:	df000504 	addi	fp,sp,20
 200e830:	e13ffd15 	stw	r4,-12(fp)
 200e834:	e17ffe15 	stw	r5,-8(fp)
 200e838:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e83c:	e0bffd17 	ldw	r2,-12(fp)
 200e840:	10000616 	blt	r2,zero,200e85c <read+0x3c>
 200e844:	e0bffd17 	ldw	r2,-12(fp)
 200e848:	10c00324 	muli	r3,r2,12
 200e84c:	00808074 	movhi	r2,513
 200e850:	1089cb04 	addi	r2,r2,10028
 200e854:	1885883a 	add	r2,r3,r2
 200e858:	00000106 	br	200e860 <read+0x40>
 200e85c:	0005883a 	mov	r2,zero
 200e860:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200e864:	e0bffb17 	ldw	r2,-20(fp)
 200e868:	10002026 	beq	r2,zero,200e8ec <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200e86c:	e0bffb17 	ldw	r2,-20(fp)
 200e870:	10800217 	ldw	r2,8(r2)
 200e874:	108000cc 	andi	r2,r2,3
 200e878:	10800060 	cmpeqi	r2,r2,1
 200e87c:	1000171e 	bne	r2,zero,200e8dc <read+0xbc>
        (fd->dev->read))
 200e880:	e0bffb17 	ldw	r2,-20(fp)
 200e884:	10800017 	ldw	r2,0(r2)
 200e888:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200e88c:	10001326 	beq	r2,zero,200e8dc <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200e890:	e0bffb17 	ldw	r2,-20(fp)
 200e894:	10800017 	ldw	r2,0(r2)
 200e898:	10c00517 	ldw	r3,20(r2)
 200e89c:	e0bfff17 	ldw	r2,-4(fp)
 200e8a0:	e13ffb17 	ldw	r4,-20(fp)
 200e8a4:	e17ffe17 	ldw	r5,-8(fp)
 200e8a8:	100d883a 	mov	r6,r2
 200e8ac:	183ee83a 	callr	r3
 200e8b0:	e0bffc15 	stw	r2,-16(fp)
 200e8b4:	e0bffc17 	ldw	r2,-16(fp)
 200e8b8:	1000060e 	bge	r2,zero,200e8d4 <read+0xb4>
        {
          ALT_ERRNO = -rval;
 200e8bc:	200e7d00 	call	200e7d0 <alt_get_errno>
 200e8c0:	e0fffc17 	ldw	r3,-16(fp)
 200e8c4:	00c7c83a 	sub	r3,zero,r3
 200e8c8:	10c00015 	stw	r3,0(r2)
          return -1;
 200e8cc:	00bfffc4 	movi	r2,-1
 200e8d0:	00000a06 	br	200e8fc <read+0xdc>
        }
        return rval;
 200e8d4:	e0bffc17 	ldw	r2,-16(fp)
 200e8d8:	00000806 	br	200e8fc <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200e8dc:	200e7d00 	call	200e7d0 <alt_get_errno>
 200e8e0:	00c00344 	movi	r3,13
 200e8e4:	10c00015 	stw	r3,0(r2)
 200e8e8:	00000306 	br	200e8f8 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200e8ec:	200e7d00 	call	200e7d0 <alt_get_errno>
 200e8f0:	00c01444 	movi	r3,81
 200e8f4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 200e8f8:	00bfffc4 	movi	r2,-1
}
 200e8fc:	e037883a 	mov	sp,fp
 200e900:	dfc00117 	ldw	ra,4(sp)
 200e904:	df000017 	ldw	fp,0(sp)
 200e908:	dec00204 	addi	sp,sp,8
 200e90c:	f800283a 	ret

0200e910 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200e910:	defffe04 	addi	sp,sp,-8
 200e914:	df000115 	stw	fp,4(sp)
 200e918:	df000104 	addi	fp,sp,4
 200e91c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200e920:	e0bfff17 	ldw	r2,-4(fp)
 200e924:	108000d0 	cmplti	r2,r2,3
 200e928:	10000d1e 	bne	r2,zero,200e960 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 200e92c:	00c08074 	movhi	r3,513
 200e930:	18c9cb04 	addi	r3,r3,10028
 200e934:	e0bfff17 	ldw	r2,-4(fp)
 200e938:	10800324 	muli	r2,r2,12
 200e93c:	1885883a 	add	r2,r3,r2
 200e940:	10800204 	addi	r2,r2,8
 200e944:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200e948:	00c08074 	movhi	r3,513
 200e94c:	18c9cb04 	addi	r3,r3,10028
 200e950:	e0bfff17 	ldw	r2,-4(fp)
 200e954:	10800324 	muli	r2,r2,12
 200e958:	1885883a 	add	r2,r3,r2
 200e95c:	10000015 	stw	zero,0(r2)
  }
}
 200e960:	e037883a 	mov	sp,fp
 200e964:	df000017 	ldw	fp,0(sp)
 200e968:	dec00104 	addi	sp,sp,4
 200e96c:	f800283a 	ret

0200e970 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200e970:	defff904 	addi	sp,sp,-28
 200e974:	df000615 	stw	fp,24(sp)
 200e978:	df000604 	addi	fp,sp,24
 200e97c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e980:	0005303a 	rdctl	r2,status
 200e984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e988:	e0fffc17 	ldw	r3,-16(fp)
 200e98c:	00bfff84 	movi	r2,-2
 200e990:	1884703a 	and	r2,r3,r2
 200e994:	1001703a 	wrctl	status,r2
  
  return context;
 200e998:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200e99c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200e9a0:	d0a00d17 	ldw	r2,-32716(gp)
 200e9a4:	10c000c4 	addi	r3,r2,3
 200e9a8:	00bfff04 	movi	r2,-4
 200e9ac:	1884703a 	and	r2,r3,r2
 200e9b0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200e9b4:	d0e00d17 	ldw	r3,-32716(gp)
 200e9b8:	e0bfff17 	ldw	r2,-4(fp)
 200e9bc:	1885883a 	add	r2,r3,r2
 200e9c0:	00c10034 	movhi	r3,1024
 200e9c4:	18c00004 	addi	r3,r3,0
 200e9c8:	1880062e 	bgeu	r3,r2,200e9e4 <sbrk+0x74>
 200e9cc:	e0bffa17 	ldw	r2,-24(fp)
 200e9d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e9d4:	e0bffd17 	ldw	r2,-12(fp)
 200e9d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200e9dc:	00bfffc4 	movi	r2,-1
 200e9e0:	00000b06 	br	200ea10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200e9e4:	d0a00d17 	ldw	r2,-32716(gp)
 200e9e8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 200e9ec:	d0e00d17 	ldw	r3,-32716(gp)
 200e9f0:	e0bfff17 	ldw	r2,-4(fp)
 200e9f4:	1885883a 	add	r2,r3,r2
 200e9f8:	d0a00d15 	stw	r2,-32716(gp)
 200e9fc:	e0bffa17 	ldw	r2,-24(fp)
 200ea00:	e0bffe15 	stw	r2,-8(fp)
 200ea04:	e0bffe17 	ldw	r2,-8(fp)
 200ea08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200ea0c:	e0bffb17 	ldw	r2,-20(fp)
} 
 200ea10:	e037883a 	mov	sp,fp
 200ea14:	df000017 	ldw	fp,0(sp)
 200ea18:	dec00104 	addi	sp,sp,4
 200ea1c:	f800283a 	ret

0200ea20 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200ea20:	defffd04 	addi	sp,sp,-12
 200ea24:	dfc00215 	stw	ra,8(sp)
 200ea28:	df000115 	stw	fp,4(sp)
 200ea2c:	df000104 	addi	fp,sp,4
 200ea30:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 200ea34:	e13fff17 	ldw	r4,-4(fp)
 200ea38:	20107a00 	call	20107a0 <alt_busy_sleep>
}
 200ea3c:	e037883a 	mov	sp,fp
 200ea40:	dfc00117 	ldw	ra,4(sp)
 200ea44:	df000017 	ldw	fp,0(sp)
 200ea48:	dec00204 	addi	sp,sp,8
 200ea4c:	f800283a 	ret

0200ea50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200ea50:	defffe04 	addi	sp,sp,-8
 200ea54:	dfc00115 	stw	ra,4(sp)
 200ea58:	df000015 	stw	fp,0(sp)
 200ea5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200ea60:	00808074 	movhi	r2,513
 200ea64:	108e8104 	addi	r2,r2,14852
 200ea68:	10800017 	ldw	r2,0(r2)
 200ea6c:	10000526 	beq	r2,zero,200ea84 <alt_get_errno+0x34>
 200ea70:	00808074 	movhi	r2,513
 200ea74:	108e8104 	addi	r2,r2,14852
 200ea78:	10800017 	ldw	r2,0(r2)
 200ea7c:	103ee83a 	callr	r2
 200ea80:	00000206 	br	200ea8c <alt_get_errno+0x3c>
 200ea84:	00808074 	movhi	r2,513
 200ea88:	108e8e04 	addi	r2,r2,14904
}
 200ea8c:	e037883a 	mov	sp,fp
 200ea90:	dfc00117 	ldw	ra,4(sp)
 200ea94:	df000017 	ldw	fp,0(sp)
 200ea98:	dec00204 	addi	sp,sp,8
 200ea9c:	f800283a 	ret

0200eaa0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200eaa0:	defff904 	addi	sp,sp,-28
 200eaa4:	dfc00615 	stw	ra,24(sp)
 200eaa8:	df000515 	stw	fp,20(sp)
 200eaac:	df000504 	addi	fp,sp,20
 200eab0:	e13ffd15 	stw	r4,-12(fp)
 200eab4:	e17ffe15 	stw	r5,-8(fp)
 200eab8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200eabc:	e0bffd17 	ldw	r2,-12(fp)
 200eac0:	10000616 	blt	r2,zero,200eadc <write+0x3c>
 200eac4:	e0bffd17 	ldw	r2,-12(fp)
 200eac8:	10c00324 	muli	r3,r2,12
 200eacc:	00808074 	movhi	r2,513
 200ead0:	1089cb04 	addi	r2,r2,10028
 200ead4:	1885883a 	add	r2,r3,r2
 200ead8:	00000106 	br	200eae0 <write+0x40>
 200eadc:	0005883a 	mov	r2,zero
 200eae0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200eae4:	e0bffb17 	ldw	r2,-20(fp)
 200eae8:	10001f26 	beq	r2,zero,200eb68 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200eaec:	e0bffb17 	ldw	r2,-20(fp)
 200eaf0:	10800217 	ldw	r2,8(r2)
 200eaf4:	108000cc 	andi	r2,r2,3
 200eaf8:	10001726 	beq	r2,zero,200eb58 <write+0xb8>
 200eafc:	e0bffb17 	ldw	r2,-20(fp)
 200eb00:	10800017 	ldw	r2,0(r2)
 200eb04:	10800617 	ldw	r2,24(r2)
 200eb08:	10001326 	beq	r2,zero,200eb58 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200eb0c:	e0bffb17 	ldw	r2,-20(fp)
 200eb10:	10800017 	ldw	r2,0(r2)
 200eb14:	10c00617 	ldw	r3,24(r2)
 200eb18:	e0bfff17 	ldw	r2,-4(fp)
 200eb1c:	e13ffb17 	ldw	r4,-20(fp)
 200eb20:	e17ffe17 	ldw	r5,-8(fp)
 200eb24:	100d883a 	mov	r6,r2
 200eb28:	183ee83a 	callr	r3
 200eb2c:	e0bffc15 	stw	r2,-16(fp)
 200eb30:	e0bffc17 	ldw	r2,-16(fp)
 200eb34:	1000060e 	bge	r2,zero,200eb50 <write+0xb0>
      {
        ALT_ERRNO = -rval;
 200eb38:	200ea500 	call	200ea50 <alt_get_errno>
 200eb3c:	e0fffc17 	ldw	r3,-16(fp)
 200eb40:	00c7c83a 	sub	r3,zero,r3
 200eb44:	10c00015 	stw	r3,0(r2)
        return -1;
 200eb48:	00bfffc4 	movi	r2,-1
 200eb4c:	00000a06 	br	200eb78 <write+0xd8>
      }
      return rval;
 200eb50:	e0bffc17 	ldw	r2,-16(fp)
 200eb54:	00000806 	br	200eb78 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200eb58:	200ea500 	call	200ea50 <alt_get_errno>
 200eb5c:	00c00344 	movi	r3,13
 200eb60:	10c00015 	stw	r3,0(r2)
 200eb64:	00000306 	br	200eb74 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200eb68:	200ea500 	call	200ea50 <alt_get_errno>
 200eb6c:	00c01444 	movi	r3,81
 200eb70:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 200eb74:	00bfffc4 	movi	r2,-1
}
 200eb78:	e037883a 	mov	sp,fp
 200eb7c:	dfc00117 	ldw	ra,4(sp)
 200eb80:	df000017 	ldw	fp,0(sp)
 200eb84:	dec00204 	addi	sp,sp,8
 200eb88:	f800283a 	ret

0200eb8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200eb8c:	defffd04 	addi	sp,sp,-12
 200eb90:	dfc00215 	stw	ra,8(sp)
 200eb94:	df000115 	stw	fp,4(sp)
 200eb98:	df000104 	addi	fp,sp,4
 200eb9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200eba0:	e13fff17 	ldw	r4,-4(fp)
 200eba4:	01408074 	movhi	r5,513
 200eba8:	294e7e04 	addi	r5,r5,14840
 200ebac:	20109440 	call	2010944 <alt_dev_llist_insert>
}
 200ebb0:	e037883a 	mov	sp,fp
 200ebb4:	dfc00117 	ldw	ra,4(sp)
 200ebb8:	df000017 	ldw	fp,0(sp)
 200ebbc:	dec00204 	addi	sp,sp,8
 200ebc0:	f800283a 	ret

0200ebc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200ebc4:	defffd04 	addi	sp,sp,-12
 200ebc8:	dfc00215 	stw	ra,8(sp)
 200ebcc:	df000115 	stw	fp,4(sp)
 200ebd0:	df000104 	addi	fp,sp,4
 200ebd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
 200ebd8:	20113600 	call	2011360 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200ebdc:	00800044 	movi	r2,1
 200ebe0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200ebe4:	e037883a 	mov	sp,fp
 200ebe8:	dfc00117 	ldw	ra,4(sp)
 200ebec:	df000017 	ldw	fp,0(sp)
 200ebf0:	dec00204 	addi	sp,sp,8
 200ebf4:	f800283a 	ret

0200ebf8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200ebf8:	defffe04 	addi	sp,sp,-8
 200ebfc:	dfc00115 	stw	ra,4(sp)
 200ec00:	df000015 	stw	fp,0(sp)
 200ec04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH, epcs_flash);
 200ec08:	01008074 	movhi	r4,513
 200ec0c:	210a2b04 	addi	r4,r4,10412
 200ec10:	200ec800 	call	200ec80 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 200ec14:	01008074 	movhi	r4,513
 200ec18:	210a6704 	addi	r4,r4,10652
 200ec1c:	000b883a 	mov	r5,zero
 200ec20:	000d883a 	mov	r6,zero
 200ec24:	200f73c0 	call	200f73c <altera_avalon_jtag_uart_init>
 200ec28:	01008074 	movhi	r4,513
 200ec2c:	210a5d04 	addi	r4,r4,10612
 200ec30:	200eb8c0 	call	200eb8c <alt_dev_reg>
}
 200ec34:	e037883a 	mov	sp,fp
 200ec38:	dfc00117 	ldw	ra,4(sp)
 200ec3c:	df000017 	ldw	fp,0(sp)
 200ec40:	dec00204 	addi	sp,sp,8
 200ec44:	f800283a 	ret

0200ec48 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 200ec48:	defffd04 	addi	sp,sp,-12
 200ec4c:	dfc00215 	stw	ra,8(sp)
 200ec50:	df000115 	stw	fp,4(sp)
 200ec54:	df000104 	addi	fp,sp,4
 200ec58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 200ec5c:	e13fff17 	ldw	r4,-4(fp)
 200ec60:	01408074 	movhi	r5,513
 200ec64:	294e8304 	addi	r5,r5,14860
 200ec68:	20109440 	call	2010944 <alt_dev_llist_insert>
}
 200ec6c:	e037883a 	mov	sp,fp
 200ec70:	dfc00117 	ldw	ra,4(sp)
 200ec74:	df000017 	ldw	fp,0(sp)
 200ec78:	dec00204 	addi	sp,sp,8
 200ec7c:	f800283a 	ret

0200ec80 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 200ec80:	defffc04 	addi	sp,sp,-16
 200ec84:	dfc00315 	stw	ra,12(sp)
 200ec88:	df000215 	stw	fp,8(sp)
 200ec8c:	df000204 	addi	fp,sp,8
 200ec90:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200ec94:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 200ec98:	e13fff17 	ldw	r4,-4(fp)
 200ec9c:	200ecd40 	call	200ecd4 <alt_epcs_flash_query>
 200eca0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 200eca4:	e0bffe17 	ldw	r2,-8(fp)
 200eca8:	1000041e 	bne	r2,zero,200ecbc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 200ecac:	e0bfff17 	ldw	r2,-4(fp)
 200ecb0:	1009883a 	mov	r4,r2
 200ecb4:	200ec480 	call	200ec48 <alt_flash_device_register>
 200ecb8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 200ecbc:	e0bffe17 	ldw	r2,-8(fp)
}
 200ecc0:	e037883a 	mov	sp,fp
 200ecc4:	dfc00117 	ldw	ra,4(sp)
 200ecc8:	df000017 	ldw	fp,0(sp)
 200eccc:	dec00204 	addi	sp,sp,8
 200ecd0:	f800283a 	ret

0200ecd4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 200ecd4:	defffc04 	addi	sp,sp,-16
 200ecd8:	dfc00315 	stw	ra,12(sp)
 200ecdc:	df000215 	stw	fp,8(sp)
 200ece0:	df000204 	addi	fp,sp,8
 200ece4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200ece8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 200ecec:	e0bfff17 	ldw	r2,-4(fp)
 200ecf0:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 200ecf4:	e0bfff17 	ldw	r2,-4(fp)
 200ecf8:	10802d17 	ldw	r2,180(r2)
 200ecfc:	1009883a 	mov	r4,r2
 200ed00:	20104c80 	call	20104c8 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 200ed04:	10c03fcc 	andi	r3,r2,255
 200ed08:	e0bfff17 	ldw	r2,-4(fp)
 200ed0c:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 200ed10:	e0bfff17 	ldw	r2,-4(fp)
 200ed14:	10802f17 	ldw	r2,188(r2)
 200ed18:	10800598 	cmpnei	r2,r2,22
 200ed1c:	10000a1e 	bne	r2,zero,200ed48 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 200ed20:	e0bfff17 	ldw	r2,-4(fp)
 200ed24:	00c02034 	movhi	r3,128
 200ed28:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 200ed2c:	e0bfff17 	ldw	r2,-4(fp)
 200ed30:	00c02004 	movi	r3,128
 200ed34:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200ed38:	e0bfff17 	ldw	r2,-4(fp)
 200ed3c:	00c00074 	movhi	r3,1
 200ed40:	10c01015 	stw	r3,64(r2)
 200ed44:	00007306 	br	200ef14 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 200ed48:	e0bfff17 	ldw	r2,-4(fp)
 200ed4c:	10802f17 	ldw	r2,188(r2)
 200ed50:	10800518 	cmpnei	r2,r2,20
 200ed54:	10000a1e 	bne	r2,zero,200ed80 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 200ed58:	e0bfff17 	ldw	r2,-4(fp)
 200ed5c:	00c00834 	movhi	r3,32
 200ed60:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 200ed64:	e0bfff17 	ldw	r2,-4(fp)
 200ed68:	00c00804 	movi	r3,32
 200ed6c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200ed70:	e0bfff17 	ldw	r2,-4(fp)
 200ed74:	00c00074 	movhi	r3,1
 200ed78:	10c01015 	stw	r3,64(r2)
 200ed7c:	00006506 	br	200ef14 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 200ed80:	e0bfff17 	ldw	r2,-4(fp)
 200ed84:	10802f17 	ldw	r2,188(r2)
 200ed88:	108004d8 	cmpnei	r2,r2,19
 200ed8c:	10000a1e 	bne	r2,zero,200edb8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 200ed90:	e0bfff17 	ldw	r2,-4(fp)
 200ed94:	00c00434 	movhi	r3,16
 200ed98:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 200ed9c:	e0bfff17 	ldw	r2,-4(fp)
 200eda0:	00c00404 	movi	r3,16
 200eda4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200eda8:	e0bfff17 	ldw	r2,-4(fp)
 200edac:	00c00074 	movhi	r3,1
 200edb0:	10c01015 	stw	r3,64(r2)
 200edb4:	00005706 	br	200ef14 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 200edb8:	e0bfff17 	ldw	r2,-4(fp)
 200edbc:	10802f17 	ldw	r2,188(r2)
 200edc0:	10800498 	cmpnei	r2,r2,18
 200edc4:	10000a1e 	bne	r2,zero,200edf0 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 200edc8:	e0bfff17 	ldw	r2,-4(fp)
 200edcc:	00c00234 	movhi	r3,8
 200edd0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 200edd4:	e0bfff17 	ldw	r2,-4(fp)
 200edd8:	00c00204 	movi	r3,8
 200eddc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200ede0:	e0bfff17 	ldw	r2,-4(fp)
 200ede4:	00c00074 	movhi	r3,1
 200ede8:	10c01015 	stw	r3,64(r2)
 200edec:	00004906 	br	200ef14 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 200edf0:	e0bfff17 	ldw	r2,-4(fp)
 200edf4:	10802f17 	ldw	r2,188(r2)
 200edf8:	10800418 	cmpnei	r2,r2,16
 200edfc:	10000a1e 	bne	r2,zero,200ee28 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 200ee00:	e0bfff17 	ldw	r2,-4(fp)
 200ee04:	00c000b4 	movhi	r3,2
 200ee08:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 200ee0c:	e0bfff17 	ldw	r2,-4(fp)
 200ee10:	00c00104 	movi	r3,4
 200ee14:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 200ee18:	e0bfff17 	ldw	r2,-4(fp)
 200ee1c:	00e00014 	movui	r3,32768
 200ee20:	10c01015 	stw	r3,64(r2)
 200ee24:	00003b06 	br	200ef14 <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 200ee28:	e0bfff17 	ldw	r2,-4(fp)
 200ee2c:	10802d17 	ldw	r2,180(r2)
 200ee30:	1009883a 	mov	r4,r2
 200ee34:	20105300 	call	2010530 <epcs_read_device_id>
 200ee38:	e0ffff17 	ldw	r3,-4(fp)
 200ee3c:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 200ee40:	e0bfff17 	ldw	r2,-4(fp)
 200ee44:	10c02f17 	ldw	r3,188(r2)
 200ee48:	00804034 	movhi	r2,256
 200ee4c:	10bfffc4 	addi	r2,r2,-1
 200ee50:	1886703a 	and	r3,r3,r2
 200ee54:	00800874 	movhi	r2,33
 200ee58:	10ae8604 	addi	r2,r2,-17896
 200ee5c:	18800a1e 	bne	r3,r2,200ee88 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200ee60:	e0bfff17 	ldw	r2,-4(fp)
 200ee64:	00c04034 	movhi	r3,256
 200ee68:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 200ee6c:	e0bfff17 	ldw	r2,-4(fp)
 200ee70:	00c04004 	movi	r3,256
 200ee74:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200ee78:	e0bfff17 	ldw	r2,-4(fp)
 200ee7c:	00c00074 	movhi	r3,1
 200ee80:	10c01015 	stw	r3,64(r2)
 200ee84:	00002306 	br	200ef14 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 200ee88:	e0bfff17 	ldw	r2,-4(fp)
 200ee8c:	10802f17 	ldw	r2,188(r2)
 200ee90:	10803fcc 	andi	r2,r2,255
 200ee94:	10800618 	cmpnei	r2,r2,24
 200ee98:	10000a1e 	bne	r2,zero,200eec4 <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200ee9c:	e0bfff17 	ldw	r2,-4(fp)
 200eea0:	00c04034 	movhi	r3,256
 200eea4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 200eea8:	e0bfff17 	ldw	r2,-4(fp)
 200eeac:	00c01004 	movi	r3,64
 200eeb0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 200eeb4:	e0bfff17 	ldw	r2,-4(fp)
 200eeb8:	00c00134 	movhi	r3,4
 200eebc:	10c01015 	stw	r3,64(r2)
 200eec0:	00001406 	br	200ef14 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 200eec4:	e0bfff17 	ldw	r2,-4(fp)
 200eec8:	10802f17 	ldw	r2,188(r2)
 200eecc:	10803fcc 	andi	r2,r2,255
 200eed0:	10800658 	cmpnei	r2,r2,25
 200eed4:	10000d1e 	bne	r2,zero,200ef0c <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 200eed8:	e0bfff17 	ldw	r2,-4(fp)
 200eedc:	00c08034 	movhi	r3,512
 200eee0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 200eee4:	e0bfff17 	ldw	r2,-4(fp)
 200eee8:	00c08004 	movi	r3,512
 200eeec:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200eef0:	e0bfff17 	ldw	r2,-4(fp)
 200eef4:	00c00074 	movhi	r3,1
 200eef8:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 200eefc:	e0bfff17 	ldw	r2,-4(fp)
 200ef00:	00c00044 	movi	r3,1
 200ef04:	10c03115 	stw	r3,196(r2)
 200ef08:	00000206 	br	200ef14 <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 200ef0c:	00bffb44 	movi	r2,-19
 200ef10:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 200ef14:	e0bfff17 	ldw	r2,-4(fp)
 200ef18:	10800e17 	ldw	r2,56(r2)
 200ef1c:	1007883a 	mov	r3,r2
 200ef20:	e0bfff17 	ldw	r2,-4(fp)
 200ef24:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 200ef28:	e0bfff17 	ldw	r2,-4(fp)
 200ef2c:	00c00044 	movi	r3,1
 200ef30:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 200ef34:	e0bfff17 	ldw	r2,-4(fp)
 200ef38:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 200ef3c:	e0bfff17 	ldw	r2,-4(fp)
 200ef40:	00c04004 	movi	r3,256
 200ef44:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 200ef48:	e0bffe17 	ldw	r2,-8(fp)
}
 200ef4c:	e037883a 	mov	sp,fp
 200ef50:	dfc00117 	ldw	ra,4(sp)
 200ef54:	df000017 	ldw	fp,0(sp)
 200ef58:	dec00204 	addi	sp,sp,8
 200ef5c:	f800283a 	ret

0200ef60 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 200ef60:	deffee04 	addi	sp,sp,-72
 200ef64:	dfc01115 	stw	ra,68(sp)
 200ef68:	df001015 	stw	fp,64(sp)
 200ef6c:	df001004 	addi	fp,sp,64
 200ef70:	e13ffc15 	stw	r4,-16(fp)
 200ef74:	e17ffd15 	stw	r5,-12(fp)
 200ef78:	e1bffe15 	stw	r6,-8(fp)
 200ef7c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 200ef80:	00800804 	movi	r2,32
 200ef84:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 200ef88:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 200ef8c:	00002606 	br	200f028 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 200ef90:	e0bff117 	ldw	r2,-60(fp)
 200ef94:	e0ffff17 	ldw	r3,-4(fp)
 200ef98:	1880012e 	bgeu	r3,r2,200efa0 <alt_epcs_flash_memcmp+0x40>
 200ef9c:	1805883a 	mov	r2,r3
 200efa0:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 200efa4:	e0fffe17 	ldw	r3,-8(fp)
 200efa8:	e0bff017 	ldw	r2,-64(fp)
 200efac:	1887883a 	add	r3,r3,r2
 200efb0:	e0bff404 	addi	r2,fp,-48
 200efb4:	e13ffc17 	ldw	r4,-16(fp)
 200efb8:	180b883a 	mov	r5,r3
 200efbc:	100d883a 	mov	r6,r2
 200efc0:	e1fff217 	ldw	r7,-56(fp)
 200efc4:	200f5400 	call	200f540 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 200efc8:	1000020e 	bge	r2,zero,200efd4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 200efcc:	00bfffc4 	movi	r2,-1
 200efd0:	00001806 	br	200f034 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 200efd4:	e0bff017 	ldw	r2,-64(fp)
 200efd8:	e0fffd17 	ldw	r3,-12(fp)
 200efdc:	1889883a 	add	r4,r3,r2
 200efe0:	e0bff217 	ldw	r2,-56(fp)
 200efe4:	e0fff404 	addi	r3,fp,-48
 200efe8:	180b883a 	mov	r5,r3
 200efec:	100d883a 	mov	r6,r2
 200eff0:	201182c0 	call	201182c <memcmp>
 200eff4:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 200eff8:	e0bff317 	ldw	r2,-52(fp)
 200effc:	10000226 	beq	r2,zero,200f008 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 200f000:	e0bff317 	ldw	r2,-52(fp)
 200f004:	00000b06 	br	200f034 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 200f008:	e0bff217 	ldw	r2,-56(fp)
 200f00c:	e0ffff17 	ldw	r3,-4(fp)
 200f010:	1885c83a 	sub	r2,r3,r2
 200f014:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 200f018:	e0fff017 	ldw	r3,-64(fp)
 200f01c:	e0bff217 	ldw	r2,-56(fp)
 200f020:	1885883a 	add	r2,r3,r2
 200f024:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 200f028:	e0bfff17 	ldw	r2,-4(fp)
 200f02c:	103fd81e 	bne	r2,zero,200ef90 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 200f030:	0005883a 	mov	r2,zero
}
 200f034:	e037883a 	mov	sp,fp
 200f038:	dfc00117 	ldw	ra,4(sp)
 200f03c:	df000017 	ldw	fp,0(sp)
 200f040:	dec00204 	addi	sp,sp,8
 200f044:	f800283a 	ret

0200f048 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 200f048:	defff404 	addi	sp,sp,-48
 200f04c:	dfc00b15 	stw	ra,44(sp)
 200f050:	df000a15 	stw	fp,40(sp)
 200f054:	df000a04 	addi	fp,sp,40
 200f058:	e13ffc15 	stw	r4,-16(fp)
 200f05c:	e17ffd15 	stw	r5,-12(fp)
 200f060:	e1bffe15 	stw	r6,-8(fp)
 200f064:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 200f068:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200f06c:	e03ff815 	stw	zero,-32(fp)
 200f070:	00008306 	br	200f280 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200f074:	e0fffc17 	ldw	r3,-16(fp)
 200f078:	e0bff817 	ldw	r2,-32(fp)
 200f07c:	1004913a 	slli	r2,r2,4
 200f080:	1885883a 	add	r2,r3,r2
 200f084:	10800d04 	addi	r2,r2,52
 200f088:	10800017 	ldw	r2,0(r2)
 200f08c:	e0fffd17 	ldw	r3,-12(fp)
 200f090:	18807816 	blt	r3,r2,200f274 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 200f094:	e0fffc17 	ldw	r3,-16(fp)
 200f098:	e0bff817 	ldw	r2,-32(fp)
 200f09c:	1004913a 	slli	r2,r2,4
 200f0a0:	1885883a 	add	r2,r3,r2
 200f0a4:	10800d04 	addi	r2,r2,52
 200f0a8:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 200f0ac:	e13ffc17 	ldw	r4,-16(fp)
 200f0b0:	e0bff817 	ldw	r2,-32(fp)
 200f0b4:	1004913a 	slli	r2,r2,4
 200f0b8:	2085883a 	add	r2,r4,r2
 200f0bc:	10800e04 	addi	r2,r2,56
 200f0c0:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 200f0c4:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200f0c8:	e0fffd17 	ldw	r3,-12(fp)
 200f0cc:	1880690e 	bge	r3,r2,200f274 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 200f0d0:	e0fffc17 	ldw	r3,-16(fp)
 200f0d4:	e0bff817 	ldw	r2,-32(fp)
 200f0d8:	1004913a 	slli	r2,r2,4
 200f0dc:	1885883a 	add	r2,r3,r2
 200f0e0:	10800d04 	addi	r2,r2,52
 200f0e4:	10800017 	ldw	r2,0(r2)
 200f0e8:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200f0ec:	e03ff915 	stw	zero,-28(fp)
 200f0f0:	00005806 	br	200f254 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 200f0f4:	e0fffd17 	ldw	r3,-12(fp)
 200f0f8:	e0bffa17 	ldw	r2,-24(fp)
 200f0fc:	18804916 	blt	r3,r2,200f224 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 200f100:	e0fffc17 	ldw	r3,-16(fp)
 200f104:	e0bff817 	ldw	r2,-32(fp)
 200f108:	10800104 	addi	r2,r2,4
 200f10c:	1004913a 	slli	r2,r2,4
 200f110:	1885883a 	add	r2,r3,r2
 200f114:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 200f118:	e0bffa17 	ldw	r2,-24(fp)
 200f11c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 200f120:	e0fffd17 	ldw	r3,-12(fp)
 200f124:	18803f0e 	bge	r3,r2,200f224 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 200f128:	e0fffc17 	ldw	r3,-16(fp)
 200f12c:	e0bff817 	ldw	r2,-32(fp)
 200f130:	10800104 	addi	r2,r2,4
 200f134:	1004913a 	slli	r2,r2,4
 200f138:	1885883a 	add	r2,r3,r2
 200f13c:	10c00017 	ldw	r3,0(r2)
 200f140:	e0bffa17 	ldw	r2,-24(fp)
 200f144:	1887883a 	add	r3,r3,r2
 200f148:	e0bffd17 	ldw	r2,-12(fp)
 200f14c:	1885c83a 	sub	r2,r3,r2
 200f150:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 200f154:	e0fffb17 	ldw	r3,-20(fp)
 200f158:	e0bfff17 	ldw	r2,-4(fp)
 200f15c:	1880010e 	bge	r3,r2,200f164 <alt_epcs_flash_write+0x11c>
 200f160:	1805883a 	mov	r2,r3
 200f164:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 200f168:	e0bffb17 	ldw	r2,-20(fp)
 200f16c:	e13ffc17 	ldw	r4,-16(fp)
 200f170:	e17ffe17 	ldw	r5,-8(fp)
 200f174:	e1bffd17 	ldw	r6,-12(fp)
 200f178:	100f883a 	mov	r7,r2
 200f17c:	200ef600 	call	200ef60 <alt_epcs_flash_memcmp>
 200f180:	10001226 	beq	r2,zero,200f1cc <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 200f184:	e0bffc17 	ldw	r2,-16(fp)
 200f188:	10800817 	ldw	r2,32(r2)
 200f18c:	e13ffc17 	ldw	r4,-16(fp)
 200f190:	e17ffa17 	ldw	r5,-24(fp)
 200f194:	103ee83a 	callr	r2
 200f198:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 200f19c:	e0bff717 	ldw	r2,-36(fp)
 200f1a0:	10000a1e 	bne	r2,zero,200f1cc <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 200f1a4:	e0bffc17 	ldw	r2,-16(fp)
 200f1a8:	10800917 	ldw	r2,36(r2)
 200f1ac:	e0fffb17 	ldw	r3,-20(fp)
 200f1b0:	d8c00015 	stw	r3,0(sp)
 200f1b4:	e13ffc17 	ldw	r4,-16(fp)
 200f1b8:	e17ffa17 	ldw	r5,-24(fp)
 200f1bc:	e1bffd17 	ldw	r6,-12(fp)
 200f1c0:	e1fffe17 	ldw	r7,-8(fp)
 200f1c4:	103ee83a 	callr	r2
 200f1c8:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 200f1cc:	e0ffff17 	ldw	r3,-4(fp)
 200f1d0:	e0bffb17 	ldw	r2,-20(fp)
 200f1d4:	18802e26 	beq	r3,r2,200f290 <alt_epcs_flash_write+0x248>
 200f1d8:	e0bff717 	ldw	r2,-36(fp)
 200f1dc:	10002c1e 	bne	r2,zero,200f290 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 200f1e0:	e0ffff17 	ldw	r3,-4(fp)
 200f1e4:	e0bffb17 	ldw	r2,-20(fp)
 200f1e8:	1885c83a 	sub	r2,r3,r2
 200f1ec:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 200f1f0:	e0fffc17 	ldw	r3,-16(fp)
 200f1f4:	e0bff817 	ldw	r2,-32(fp)
 200f1f8:	10800104 	addi	r2,r2,4
 200f1fc:	1004913a 	slli	r2,r2,4
 200f200:	1885883a 	add	r2,r3,r2
 200f204:	10c00017 	ldw	r3,0(r2)
 200f208:	e0bffa17 	ldw	r2,-24(fp)
 200f20c:	1885883a 	add	r2,r3,r2
 200f210:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 200f214:	e0bffb17 	ldw	r2,-20(fp)
 200f218:	e0fffe17 	ldw	r3,-8(fp)
 200f21c:	1885883a 	add	r2,r3,r2
 200f220:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 200f224:	e0fffc17 	ldw	r3,-16(fp)
 200f228:	e0bff817 	ldw	r2,-32(fp)
 200f22c:	10800104 	addi	r2,r2,4
 200f230:	1004913a 	slli	r2,r2,4
 200f234:	1885883a 	add	r2,r3,r2
 200f238:	10800017 	ldw	r2,0(r2)
 200f23c:	e0fffa17 	ldw	r3,-24(fp)
 200f240:	1885883a 	add	r2,r3,r2
 200f244:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200f248:	e0bff917 	ldw	r2,-28(fp)
 200f24c:	10800044 	addi	r2,r2,1
 200f250:	e0bff915 	stw	r2,-28(fp)
 200f254:	e0fffc17 	ldw	r3,-16(fp)
 200f258:	e0bff817 	ldw	r2,-32(fp)
 200f25c:	1004913a 	slli	r2,r2,4
 200f260:	1885883a 	add	r2,r3,r2
 200f264:	10800f04 	addi	r2,r2,60
 200f268:	10800017 	ldw	r2,0(r2)
 200f26c:	e0fff917 	ldw	r3,-28(fp)
 200f270:	18bfa016 	blt	r3,r2,200f0f4 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200f274:	e0bff817 	ldw	r2,-32(fp)
 200f278:	10800044 	addi	r2,r2,1
 200f27c:	e0bff815 	stw	r2,-32(fp)
 200f280:	e0bffc17 	ldw	r2,-16(fp)
 200f284:	10800c17 	ldw	r2,48(r2)
 200f288:	e0fff817 	ldw	r3,-32(fp)
 200f28c:	18bf7916 	blt	r3,r2,200f074 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 200f290:	e0bff717 	ldw	r2,-36(fp)
}
 200f294:	e037883a 	mov	sp,fp
 200f298:	dfc00117 	ldw	ra,4(sp)
 200f29c:	df000017 	ldw	fp,0(sp)
 200f2a0:	dec00204 	addi	sp,sp,8
 200f2a4:	f800283a 	ret

0200f2a8 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 200f2a8:	defffa04 	addi	sp,sp,-24
 200f2ac:	df000515 	stw	fp,20(sp)
 200f2b0:	df000504 	addi	fp,sp,20
 200f2b4:	e13ffd15 	stw	r4,-12(fp)
 200f2b8:	e17ffe15 	stw	r5,-8(fp)
 200f2bc:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 200f2c0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 200f2c4:	e0bffd17 	ldw	r2,-12(fp)
 200f2c8:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 200f2cc:	e0bffc17 	ldw	r2,-16(fp)
 200f2d0:	10c00c17 	ldw	r3,48(r2)
 200f2d4:	e0bfff17 	ldw	r2,-4(fp)
 200f2d8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 200f2dc:	e0bffc17 	ldw	r2,-16(fp)
 200f2e0:	10800c17 	ldw	r2,48(r2)
 200f2e4:	1000031e 	bne	r2,zero,200f2f4 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 200f2e8:	00bffec4 	movi	r2,-5
 200f2ec:	e0bffb15 	stw	r2,-20(fp)
 200f2f0:	00000b06 	br	200f320 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 200f2f4:	e0bffc17 	ldw	r2,-16(fp)
 200f2f8:	10800c17 	ldw	r2,48(r2)
 200f2fc:	10800250 	cmplti	r2,r2,9
 200f300:	1000031e 	bne	r2,zero,200f310 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 200f304:	00bffd04 	movi	r2,-12
 200f308:	e0bffb15 	stw	r2,-20(fp)
 200f30c:	00000406 	br	200f320 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 200f310:	e0bffc17 	ldw	r2,-16(fp)
 200f314:	10c00d04 	addi	r3,r2,52
 200f318:	e0bffe17 	ldw	r2,-8(fp)
 200f31c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 200f320:	e0bffb17 	ldw	r2,-20(fp)
}
 200f324:	e037883a 	mov	sp,fp
 200f328:	df000017 	ldw	fp,0(sp)
 200f32c:	dec00104 	addi	sp,sp,4
 200f330:	f800283a 	ret

0200f334 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 200f334:	defff904 	addi	sp,sp,-28
 200f338:	df000615 	stw	fp,24(sp)
 200f33c:	df000604 	addi	fp,sp,24
 200f340:	e13ffe15 	stw	r4,-8(fp)
 200f344:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200f348:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f34c:	e0bffe17 	ldw	r2,-8(fp)
 200f350:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 200f354:	e0bffb17 	ldw	r2,-20(fp)
 200f358:	10800c17 	ldw	r2,48(r2)
 200f35c:	10bfffc4 	addi	r2,r2,-1
 200f360:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200f364:	e0fffb17 	ldw	r3,-20(fp)
 200f368:	e0bffc17 	ldw	r2,-16(fp)
 200f36c:	1004913a 	slli	r2,r2,4
 200f370:	1885883a 	add	r2,r3,r2
 200f374:	10800d04 	addi	r2,r2,52
 200f378:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 200f37c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200f380:	e13ffb17 	ldw	r4,-20(fp)
 200f384:	e0bffc17 	ldw	r2,-16(fp)
 200f388:	1004913a 	slli	r2,r2,4
 200f38c:	2085883a 	add	r2,r4,r2
 200f390:	10800e04 	addi	r2,r2,56
 200f394:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200f398:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 200f39c:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 200f3a0:	e0bfff17 	ldw	r2,-4(fp)
 200f3a4:	e0fffd17 	ldw	r3,-12(fp)
 200f3a8:	1880022e 	bgeu	r3,r2,200f3b4 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 200f3ac:	00bffec4 	movi	r2,-5
 200f3b0:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 200f3b4:	e0bffa17 	ldw	r2,-24(fp)
}
 200f3b8:	e037883a 	mov	sp,fp
 200f3bc:	df000017 	ldw	fp,0(sp)
 200f3c0:	dec00104 	addi	sp,sp,4
 200f3c4:	f800283a 	ret

0200f3c8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 200f3c8:	defffa04 	addi	sp,sp,-24
 200f3cc:	dfc00515 	stw	ra,20(sp)
 200f3d0:	df000415 	stw	fp,16(sp)
 200f3d4:	df000404 	addi	fp,sp,16
 200f3d8:	e13ffe15 	stw	r4,-8(fp)
 200f3dc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200f3e0:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f3e4:	e0bffe17 	ldw	r2,-8(fp)
 200f3e8:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 200f3ec:	e13ffe17 	ldw	r4,-8(fp)
 200f3f0:	e17fff17 	ldw	r5,-4(fp)
 200f3f4:	200f3340 	call	200f334 <alt_epcs_test_address>
 200f3f8:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 200f3fc:	e0bffc17 	ldw	r2,-16(fp)
 200f400:	10000816 	blt	r2,zero,200f424 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 200f404:	e0bffd17 	ldw	r2,-12(fp)
 200f408:	11002d17 	ldw	r4,180(r2)
 200f40c:	e0ffff17 	ldw	r3,-4(fp)
 200f410:	e0bffd17 	ldw	r2,-12(fp)
 200f414:	10803117 	ldw	r2,196(r2)
 200f418:	180b883a 	mov	r5,r3
 200f41c:	100d883a 	mov	r6,r2
 200f420:	20101080 	call	2010108 <epcs_sector_erase>
  }
  return ret_code;
 200f424:	e0bffc17 	ldw	r2,-16(fp)
}
 200f428:	e037883a 	mov	sp,fp
 200f42c:	dfc00117 	ldw	ra,4(sp)
 200f430:	df000017 	ldw	fp,0(sp)
 200f434:	dec00204 	addi	sp,sp,8
 200f438:	f800283a 	ret

0200f43c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 200f43c:	defff404 	addi	sp,sp,-48
 200f440:	dfc00b15 	stw	ra,44(sp)
 200f444:	df000a15 	stw	fp,40(sp)
 200f448:	df000a04 	addi	fp,sp,40
 200f44c:	e13ffc15 	stw	r4,-16(fp)
 200f450:	e17ffd15 	stw	r5,-12(fp)
 200f454:	e1bffe15 	stw	r6,-8(fp)
 200f458:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f45c:	e0bffc17 	ldw	r2,-16(fp)
 200f460:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 200f464:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 200f468:	e13ffc17 	ldw	r4,-16(fp)
 200f46c:	e17ffe17 	ldw	r5,-8(fp)
 200f470:	200f3340 	call	200f334 <alt_epcs_test_address>
 200f474:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 200f478:	e0bff917 	ldw	r2,-28(fp)
 200f47c:	10002a16 	blt	r2,zero,200f528 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200f480:	00002706 	br	200f520 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 200f484:	e0bff817 	ldw	r2,-32(fp)
 200f488:	10c03017 	ldw	r3,192(r2)
 200f48c:	e0bffe17 	ldw	r2,-8(fp)
 200f490:	1887883a 	add	r3,r3,r2
 200f494:	e0bff817 	ldw	r2,-32(fp)
 200f498:	10803017 	ldw	r2,192(r2)
 200f49c:	0085c83a 	sub	r2,zero,r2
 200f4a0:	1884703a 	and	r2,r3,r2
 200f4a4:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 200f4a8:	e0fffa17 	ldw	r3,-24(fp)
 200f4ac:	e0bffe17 	ldw	r2,-8(fp)
 200f4b0:	1885c83a 	sub	r2,r3,r2
 200f4b4:	e0c00217 	ldw	r3,8(fp)
 200f4b8:	1880010e 	bge	r3,r2,200f4c0 <alt_epcs_flash_write_block+0x84>
 200f4bc:	1805883a 	mov	r2,r3
 200f4c0:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200f4c4:	e0bff817 	ldw	r2,-32(fp)
 200f4c8:	10c02d17 	ldw	r3,180(r2)
 200f4cc:	e0bff717 	ldw	r2,-36(fp)
 200f4d0:	e13fff17 	ldw	r4,-4(fp)
 200f4d4:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 200f4d8:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200f4dc:	21003117 	ldw	r4,196(r4)
 200f4e0:	d9000015 	stw	r4,0(sp)
 200f4e4:	1809883a 	mov	r4,r3
 200f4e8:	e17ffe17 	ldw	r5,-8(fp)
 200f4ec:	100d883a 	mov	r6,r2
 200f4f0:	e1fffb17 	ldw	r7,-20(fp)
 200f4f4:	20103ac0 	call	20103ac <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 200f4f8:	e0c00217 	ldw	r3,8(fp)
 200f4fc:	e0bffb17 	ldw	r2,-20(fp)
 200f500:	1885c83a 	sub	r2,r3,r2
 200f504:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 200f508:	e0fff717 	ldw	r3,-36(fp)
 200f50c:	e0bffb17 	ldw	r2,-20(fp)
 200f510:	1885883a 	add	r2,r3,r2
 200f514:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 200f518:	e0bffa17 	ldw	r2,-24(fp)
 200f51c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200f520:	e0800217 	ldw	r2,8(fp)
 200f524:	103fd71e 	bne	r2,zero,200f484 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 200f528:	e0bff917 	ldw	r2,-28(fp)
}
 200f52c:	e037883a 	mov	sp,fp
 200f530:	dfc00117 	ldw	ra,4(sp)
 200f534:	df000017 	ldw	fp,0(sp)
 200f538:	dec00204 	addi	sp,sp,8
 200f53c:	f800283a 	ret

0200f540 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 200f540:	defff704 	addi	sp,sp,-36
 200f544:	dfc00815 	stw	ra,32(sp)
 200f548:	df000715 	stw	fp,28(sp)
 200f54c:	df000704 	addi	fp,sp,28
 200f550:	e13ffc15 	stw	r4,-16(fp)
 200f554:	e17ffd15 	stw	r5,-12(fp)
 200f558:	e1bffe15 	stw	r6,-8(fp)
 200f55c:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 200f560:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200f564:	e0bffc17 	ldw	r2,-16(fp)
 200f568:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 200f56c:	e13ffc17 	ldw	r4,-16(fp)
 200f570:	e17ffd17 	ldw	r5,-12(fp)
 200f574:	200f3340 	call	200f334 <alt_epcs_test_address>
 200f578:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 200f57c:	e0bffa17 	ldw	r2,-24(fp)
 200f580:	10000f16 	blt	r2,zero,200f5c0 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200f584:	e0bffb17 	ldw	r2,-20(fp)
 200f588:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 200f58c:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200f590:	18c03117 	ldw	r3,196(r3)
 200f594:	d8c00015 	stw	r3,0(sp)
 200f598:	1009883a 	mov	r4,r2
 200f59c:	e17ffd17 	ldw	r5,-12(fp)
 200f5a0:	e1bffe17 	ldw	r6,-8(fp)
 200f5a4:	e1ffff17 	ldw	r7,-4(fp)
 200f5a8:	20102000 	call	2010200 <epcs_read_buffer>
 200f5ac:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200f5b0:	e0fffa17 	ldw	r3,-24(fp)
 200f5b4:	e0bfff17 	ldw	r2,-4(fp)
 200f5b8:	1880011e 	bne	r3,r2,200f5c0 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 200f5bc:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 200f5c0:	e0bffa17 	ldw	r2,-24(fp)
}
 200f5c4:	e037883a 	mov	sp,fp
 200f5c8:	dfc00117 	ldw	ra,4(sp)
 200f5cc:	df000017 	ldw	fp,0(sp)
 200f5d0:	dec00204 	addi	sp,sp,8
 200f5d4:	f800283a 	ret

0200f5d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200f5d8:	defffa04 	addi	sp,sp,-24
 200f5dc:	dfc00515 	stw	ra,20(sp)
 200f5e0:	df000415 	stw	fp,16(sp)
 200f5e4:	df000404 	addi	fp,sp,16
 200f5e8:	e13ffd15 	stw	r4,-12(fp)
 200f5ec:	e17ffe15 	stw	r5,-8(fp)
 200f5f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f5f4:	e0bffd17 	ldw	r2,-12(fp)
 200f5f8:	10800017 	ldw	r2,0(r2)
 200f5fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200f600:	e0bffc17 	ldw	r2,-16(fp)
 200f604:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 200f608:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200f60c:	10800217 	ldw	r2,8(r2)
 200f610:	1809883a 	mov	r4,r3
 200f614:	e17ffe17 	ldw	r5,-8(fp)
 200f618:	e1bfff17 	ldw	r6,-4(fp)
 200f61c:	100f883a 	mov	r7,r2
 200f620:	200fc000 	call	200fc00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200f624:	e037883a 	mov	sp,fp
 200f628:	dfc00117 	ldw	ra,4(sp)
 200f62c:	df000017 	ldw	fp,0(sp)
 200f630:	dec00204 	addi	sp,sp,8
 200f634:	f800283a 	ret

0200f638 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200f638:	defffa04 	addi	sp,sp,-24
 200f63c:	dfc00515 	stw	ra,20(sp)
 200f640:	df000415 	stw	fp,16(sp)
 200f644:	df000404 	addi	fp,sp,16
 200f648:	e13ffd15 	stw	r4,-12(fp)
 200f64c:	e17ffe15 	stw	r5,-8(fp)
 200f650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f654:	e0bffd17 	ldw	r2,-12(fp)
 200f658:	10800017 	ldw	r2,0(r2)
 200f65c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200f660:	e0bffc17 	ldw	r2,-16(fp)
 200f664:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 200f668:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200f66c:	10800217 	ldw	r2,8(r2)
 200f670:	1809883a 	mov	r4,r3
 200f674:	e17ffe17 	ldw	r5,-8(fp)
 200f678:	e1bfff17 	ldw	r6,-4(fp)
 200f67c:	100f883a 	mov	r7,r2
 200f680:	200fe180 	call	200fe18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200f684:	e037883a 	mov	sp,fp
 200f688:	dfc00117 	ldw	ra,4(sp)
 200f68c:	df000017 	ldw	fp,0(sp)
 200f690:	dec00204 	addi	sp,sp,8
 200f694:	f800283a 	ret

0200f698 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200f698:	defffc04 	addi	sp,sp,-16
 200f69c:	dfc00315 	stw	ra,12(sp)
 200f6a0:	df000215 	stw	fp,8(sp)
 200f6a4:	df000204 	addi	fp,sp,8
 200f6a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f6ac:	e0bfff17 	ldw	r2,-4(fp)
 200f6b0:	10800017 	ldw	r2,0(r2)
 200f6b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200f6b8:	e0bffe17 	ldw	r2,-8(fp)
 200f6bc:	10c00a04 	addi	r3,r2,40
 200f6c0:	e0bfff17 	ldw	r2,-4(fp)
 200f6c4:	10800217 	ldw	r2,8(r2)
 200f6c8:	1809883a 	mov	r4,r3
 200f6cc:	100b883a 	mov	r5,r2
 200f6d0:	200faa40 	call	200faa4 <altera_avalon_jtag_uart_close>
}
 200f6d4:	e037883a 	mov	sp,fp
 200f6d8:	dfc00117 	ldw	ra,4(sp)
 200f6dc:	df000017 	ldw	fp,0(sp)
 200f6e0:	dec00204 	addi	sp,sp,8
 200f6e4:	f800283a 	ret

0200f6e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200f6e8:	defffa04 	addi	sp,sp,-24
 200f6ec:	dfc00515 	stw	ra,20(sp)
 200f6f0:	df000415 	stw	fp,16(sp)
 200f6f4:	df000404 	addi	fp,sp,16
 200f6f8:	e13ffd15 	stw	r4,-12(fp)
 200f6fc:	e17ffe15 	stw	r5,-8(fp)
 200f700:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200f704:	e0bffd17 	ldw	r2,-12(fp)
 200f708:	10800017 	ldw	r2,0(r2)
 200f70c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200f710:	e0bffc17 	ldw	r2,-16(fp)
 200f714:	10800a04 	addi	r2,r2,40
 200f718:	1009883a 	mov	r4,r2
 200f71c:	e17ffe17 	ldw	r5,-8(fp)
 200f720:	e1bfff17 	ldw	r6,-4(fp)
 200f724:	200fb0c0 	call	200fb0c <altera_avalon_jtag_uart_ioctl>
}
 200f728:	e037883a 	mov	sp,fp
 200f72c:	dfc00117 	ldw	ra,4(sp)
 200f730:	df000017 	ldw	fp,0(sp)
 200f734:	dec00204 	addi	sp,sp,8
 200f738:	f800283a 	ret

0200f73c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200f73c:	defffa04 	addi	sp,sp,-24
 200f740:	dfc00515 	stw	ra,20(sp)
 200f744:	df000415 	stw	fp,16(sp)
 200f748:	df000404 	addi	fp,sp,16
 200f74c:	e13ffd15 	stw	r4,-12(fp)
 200f750:	e17ffe15 	stw	r5,-8(fp)
 200f754:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f758:	e0bffd17 	ldw	r2,-12(fp)
 200f75c:	00c00044 	movi	r3,1
 200f760:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200f764:	e0bffd17 	ldw	r2,-12(fp)
 200f768:	10800017 	ldw	r2,0(r2)
 200f76c:	10800104 	addi	r2,r2,4
 200f770:	e0fffd17 	ldw	r3,-12(fp)
 200f774:	18c00817 	ldw	r3,32(r3)
 200f778:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200f77c:	e0fffe17 	ldw	r3,-8(fp)
 200f780:	e0bfff17 	ldw	r2,-4(fp)
 200f784:	d8000015 	stw	zero,0(sp)
 200f788:	1809883a 	mov	r4,r3
 200f78c:	100b883a 	mov	r5,r2
 200f790:	01808074 	movhi	r6,513
 200f794:	31bdff04 	addi	r6,r6,-2052
 200f798:	e1fffd17 	ldw	r7,-12(fp)
 200f79c:	2010b540 	call	2010b54 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200f7a0:	e0bffd17 	ldw	r2,-12(fp)
 200f7a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200f7a8:	e0bffd17 	ldw	r2,-12(fp)
 200f7ac:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200f7b0:	00808074 	movhi	r2,513
 200f7b4:	108e9304 	addi	r2,r2,14924
 200f7b8:	10800017 	ldw	r2,0(r2)
 200f7bc:	1809883a 	mov	r4,r3
 200f7c0:	100b883a 	mov	r5,r2
 200f7c4:	01808074 	movhi	r6,513
 200f7c8:	31be8004 	addi	r6,r6,-1536
 200f7cc:	e1fffd17 	ldw	r7,-12(fp)
 200f7d0:	20106600 	call	2010660 <alt_alarm_start>
 200f7d4:	1000040e 	bge	r2,zero,200f7e8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200f7d8:	e0bffd17 	ldw	r2,-12(fp)
 200f7dc:	00e00034 	movhi	r3,32768
 200f7e0:	18ffffc4 	addi	r3,r3,-1
 200f7e4:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200f7e8:	e037883a 	mov	sp,fp
 200f7ec:	dfc00117 	ldw	ra,4(sp)
 200f7f0:	df000017 	ldw	fp,0(sp)
 200f7f4:	dec00204 	addi	sp,sp,8
 200f7f8:	f800283a 	ret

0200f7fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200f7fc:	defff804 	addi	sp,sp,-32
 200f800:	df000715 	stw	fp,28(sp)
 200f804:	df000704 	addi	fp,sp,28
 200f808:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200f80c:	e0bfff17 	ldw	r2,-4(fp)
 200f810:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200f814:	e0bffb17 	ldw	r2,-20(fp)
 200f818:	10800017 	ldw	r2,0(r2)
 200f81c:	e0bffc15 	stw	r2,-16(fp)
 200f820:	00000106 	br	200f828 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 200f824:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f828:	e0bffc17 	ldw	r2,-16(fp)
 200f82c:	10800104 	addi	r2,r2,4
 200f830:	10800037 	ldwio	r2,0(r2)
 200f834:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200f838:	e0bffd17 	ldw	r2,-12(fp)
 200f83c:	1080c00c 	andi	r2,r2,768
 200f840:	10006a26 	beq	r2,zero,200f9ec <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200f844:	e0bffd17 	ldw	r2,-12(fp)
 200f848:	1080400c 	andi	r2,r2,256
 200f84c:	10003326 	beq	r2,zero,200f91c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200f850:	00800074 	movhi	r2,1
 200f854:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f858:	e0bffb17 	ldw	r2,-20(fp)
 200f85c:	10800a17 	ldw	r2,40(r2)
 200f860:	10800044 	addi	r2,r2,1
 200f864:	1081ffcc 	andi	r2,r2,2047
 200f868:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200f86c:	e0bffb17 	ldw	r2,-20(fp)
 200f870:	10c00b17 	ldw	r3,44(r2)
 200f874:	e0bffe17 	ldw	r2,-8(fp)
 200f878:	18801426 	beq	r3,r2,200f8cc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200f87c:	e0bffc17 	ldw	r2,-16(fp)
 200f880:	10800037 	ldwio	r2,0(r2)
 200f884:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200f888:	e0bff917 	ldw	r2,-28(fp)
 200f88c:	10a0000c 	andi	r2,r2,32768
 200f890:	10001026 	beq	r2,zero,200f8d4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200f894:	e0bffb17 	ldw	r2,-20(fp)
 200f898:	10800a17 	ldw	r2,40(r2)
 200f89c:	e0fff917 	ldw	r3,-28(fp)
 200f8a0:	e13ffb17 	ldw	r4,-20(fp)
 200f8a4:	2085883a 	add	r2,r4,r2
 200f8a8:	10800e04 	addi	r2,r2,56
 200f8ac:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f8b0:	e0bffb17 	ldw	r2,-20(fp)
 200f8b4:	10800a17 	ldw	r2,40(r2)
 200f8b8:	10800044 	addi	r2,r2,1
 200f8bc:	10c1ffcc 	andi	r3,r2,2047
 200f8c0:	e0bffb17 	ldw	r2,-20(fp)
 200f8c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200f8c8:	003fe306 	br	200f858 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200f8cc:	0001883a 	nop
 200f8d0:	00000106 	br	200f8d8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200f8d4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200f8d8:	e0bff917 	ldw	r2,-28(fp)
 200f8dc:	10bfffec 	andhi	r2,r2,65535
 200f8e0:	10000e26 	beq	r2,zero,200f91c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f8e4:	e0bffb17 	ldw	r2,-20(fp)
 200f8e8:	10c00817 	ldw	r3,32(r2)
 200f8ec:	00bfff84 	movi	r2,-2
 200f8f0:	1886703a 	and	r3,r3,r2
 200f8f4:	e0bffb17 	ldw	r2,-20(fp)
 200f8f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200f8fc:	e0bffc17 	ldw	r2,-16(fp)
 200f900:	10800104 	addi	r2,r2,4
 200f904:	e0fffb17 	ldw	r3,-20(fp)
 200f908:	18c00817 	ldw	r3,32(r3)
 200f90c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f910:	e0bffc17 	ldw	r2,-16(fp)
 200f914:	10800104 	addi	r2,r2,4
 200f918:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200f91c:	e0bffd17 	ldw	r2,-12(fp)
 200f920:	1080800c 	andi	r2,r2,512
 200f924:	103fbf26 	beq	r2,zero,200f824 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200f928:	e0bffd17 	ldw	r2,-12(fp)
 200f92c:	1004d43a 	srli	r2,r2,16
 200f930:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f934:	00001406 	br	200f988 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200f938:	e0bffc17 	ldw	r2,-16(fp)
 200f93c:	e0fffb17 	ldw	r3,-20(fp)
 200f940:	18c00d17 	ldw	r3,52(r3)
 200f944:	e13ffb17 	ldw	r4,-20(fp)
 200f948:	20c7883a 	add	r3,r4,r3
 200f94c:	18c20e04 	addi	r3,r3,2104
 200f950:	18c00003 	ldbu	r3,0(r3)
 200f954:	18c03fcc 	andi	r3,r3,255
 200f958:	18c0201c 	xori	r3,r3,128
 200f95c:	18ffe004 	addi	r3,r3,-128
 200f960:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f964:	e0bffb17 	ldw	r2,-20(fp)
 200f968:	10800d17 	ldw	r2,52(r2)
 200f96c:	10800044 	addi	r2,r2,1
 200f970:	10c1ffcc 	andi	r3,r2,2047
 200f974:	e0bffb17 	ldw	r2,-20(fp)
 200f978:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200f97c:	e0bffa17 	ldw	r2,-24(fp)
 200f980:	10bfffc4 	addi	r2,r2,-1
 200f984:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f988:	e0bffa17 	ldw	r2,-24(fp)
 200f98c:	10000526 	beq	r2,zero,200f9a4 <altera_avalon_jtag_uart_irq+0x1a8>
 200f990:	e0bffb17 	ldw	r2,-20(fp)
 200f994:	10c00d17 	ldw	r3,52(r2)
 200f998:	e0bffb17 	ldw	r2,-20(fp)
 200f99c:	10800c17 	ldw	r2,48(r2)
 200f9a0:	18bfe51e 	bne	r3,r2,200f938 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200f9a4:	e0bffa17 	ldw	r2,-24(fp)
 200f9a8:	103f9e26 	beq	r2,zero,200f824 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200f9ac:	e0bffb17 	ldw	r2,-20(fp)
 200f9b0:	10c00817 	ldw	r3,32(r2)
 200f9b4:	00bfff44 	movi	r2,-3
 200f9b8:	1886703a 	and	r3,r3,r2
 200f9bc:	e0bffb17 	ldw	r2,-20(fp)
 200f9c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200f9c4:	e0bffb17 	ldw	r2,-20(fp)
 200f9c8:	10800017 	ldw	r2,0(r2)
 200f9cc:	10800104 	addi	r2,r2,4
 200f9d0:	e0fffb17 	ldw	r3,-20(fp)
 200f9d4:	18c00817 	ldw	r3,32(r3)
 200f9d8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f9dc:	e0bffc17 	ldw	r2,-16(fp)
 200f9e0:	10800104 	addi	r2,r2,4
 200f9e4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200f9e8:	003f8e06 	br	200f824 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200f9ec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200f9f0:	e037883a 	mov	sp,fp
 200f9f4:	df000017 	ldw	fp,0(sp)
 200f9f8:	dec00104 	addi	sp,sp,4
 200f9fc:	f800283a 	ret

0200fa00 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200fa00:	defffc04 	addi	sp,sp,-16
 200fa04:	df000315 	stw	fp,12(sp)
 200fa08:	df000304 	addi	fp,sp,12
 200fa0c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200fa10:	e0bfff17 	ldw	r2,-4(fp)
 200fa14:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200fa18:	e0bffd17 	ldw	r2,-12(fp)
 200fa1c:	10800017 	ldw	r2,0(r2)
 200fa20:	10800104 	addi	r2,r2,4
 200fa24:	10800037 	ldwio	r2,0(r2)
 200fa28:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200fa2c:	e0bffe17 	ldw	r2,-8(fp)
 200fa30:	1081000c 	andi	r2,r2,1024
 200fa34:	10000a26 	beq	r2,zero,200fa60 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200fa38:	e0bffd17 	ldw	r2,-12(fp)
 200fa3c:	10800017 	ldw	r2,0(r2)
 200fa40:	10800104 	addi	r2,r2,4
 200fa44:	e0fffd17 	ldw	r3,-12(fp)
 200fa48:	18c00817 	ldw	r3,32(r3)
 200fa4c:	18c10014 	ori	r3,r3,1024
 200fa50:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 200fa54:	e0bffd17 	ldw	r2,-12(fp)
 200fa58:	10000915 	stw	zero,36(r2)
 200fa5c:	00000a06 	br	200fa88 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200fa60:	e0bffd17 	ldw	r2,-12(fp)
 200fa64:	10800917 	ldw	r2,36(r2)
 200fa68:	00e00034 	movhi	r3,32768
 200fa6c:	18ffff04 	addi	r3,r3,-4
 200fa70:	18800536 	bltu	r3,r2,200fa88 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 200fa74:	e0bffd17 	ldw	r2,-12(fp)
 200fa78:	10800917 	ldw	r2,36(r2)
 200fa7c:	10c00044 	addi	r3,r2,1
 200fa80:	e0bffd17 	ldw	r2,-12(fp)
 200fa84:	10c00915 	stw	r3,36(r2)
 200fa88:	00808074 	movhi	r2,513
 200fa8c:	108e9304 	addi	r2,r2,14924
 200fa90:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200fa94:	e037883a 	mov	sp,fp
 200fa98:	df000017 	ldw	fp,0(sp)
 200fa9c:	dec00104 	addi	sp,sp,4
 200faa0:	f800283a 	ret

0200faa4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200faa4:	defffd04 	addi	sp,sp,-12
 200faa8:	df000215 	stw	fp,8(sp)
 200faac:	df000204 	addi	fp,sp,8
 200fab0:	e13ffe15 	stw	r4,-8(fp)
 200fab4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200fab8:	00000506 	br	200fad0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200fabc:	e0bfff17 	ldw	r2,-4(fp)
 200fac0:	1090000c 	andi	r2,r2,16384
 200fac4:	10000226 	beq	r2,zero,200fad0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200fac8:	00bffd44 	movi	r2,-11
 200facc:	00000b06 	br	200fafc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200fad0:	e0bffe17 	ldw	r2,-8(fp)
 200fad4:	10c00d17 	ldw	r3,52(r2)
 200fad8:	e0bffe17 	ldw	r2,-8(fp)
 200fadc:	10800c17 	ldw	r2,48(r2)
 200fae0:	18800526 	beq	r3,r2,200faf8 <altera_avalon_jtag_uart_close+0x54>
 200fae4:	e0bffe17 	ldw	r2,-8(fp)
 200fae8:	10c00917 	ldw	r3,36(r2)
 200faec:	e0bffe17 	ldw	r2,-8(fp)
 200faf0:	10800117 	ldw	r2,4(r2)
 200faf4:	18bff136 	bltu	r3,r2,200fabc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200faf8:	0005883a 	mov	r2,zero
}
 200fafc:	e037883a 	mov	sp,fp
 200fb00:	df000017 	ldw	fp,0(sp)
 200fb04:	dec00104 	addi	sp,sp,4
 200fb08:	f800283a 	ret

0200fb0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200fb0c:	defffa04 	addi	sp,sp,-24
 200fb10:	df000515 	stw	fp,20(sp)
 200fb14:	df000504 	addi	fp,sp,20
 200fb18:	e13ffd15 	stw	r4,-12(fp)
 200fb1c:	e17ffe15 	stw	r5,-8(fp)
 200fb20:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200fb24:	00bff9c4 	movi	r2,-25
 200fb28:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200fb2c:	e0bffe17 	ldw	r2,-8(fp)
 200fb30:	10da8060 	cmpeqi	r3,r2,27137
 200fb34:	1800031e 	bne	r3,zero,200fb44 <altera_avalon_jtag_uart_ioctl+0x38>
 200fb38:	109a80a0 	cmpeqi	r2,r2,27138
 200fb3c:	1000181e 	bne	r2,zero,200fba0 <altera_avalon_jtag_uart_ioctl+0x94>
 200fb40:	00002606 	br	200fbdc <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200fb44:	e0bffd17 	ldw	r2,-12(fp)
 200fb48:	10c00117 	ldw	r3,4(r2)
 200fb4c:	00a00034 	movhi	r2,32768
 200fb50:	10bfffc4 	addi	r2,r2,-1
 200fb54:	18802226 	beq	r3,r2,200fbe0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 200fb58:	e0bfff17 	ldw	r2,-4(fp)
 200fb5c:	10800017 	ldw	r2,0(r2)
 200fb60:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200fb64:	e0bffc17 	ldw	r2,-16(fp)
 200fb68:	10800090 	cmplti	r2,r2,2
 200fb6c:	1000061e 	bne	r2,zero,200fb88 <altera_avalon_jtag_uart_ioctl+0x7c>
 200fb70:	e0fffc17 	ldw	r3,-16(fp)
 200fb74:	00a00034 	movhi	r2,32768
 200fb78:	10bfffc4 	addi	r2,r2,-1
 200fb7c:	18800226 	beq	r3,r2,200fb88 <altera_avalon_jtag_uart_ioctl+0x7c>
 200fb80:	e0bffc17 	ldw	r2,-16(fp)
 200fb84:	00000206 	br	200fb90 <altera_avalon_jtag_uart_ioctl+0x84>
 200fb88:	00a00034 	movhi	r2,32768
 200fb8c:	10bfff84 	addi	r2,r2,-2
 200fb90:	e0fffd17 	ldw	r3,-12(fp)
 200fb94:	18800115 	stw	r2,4(r3)
      rc = 0;
 200fb98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200fb9c:	00001006 	br	200fbe0 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200fba0:	e0bffd17 	ldw	r2,-12(fp)
 200fba4:	10c00117 	ldw	r3,4(r2)
 200fba8:	00a00034 	movhi	r2,32768
 200fbac:	10bfffc4 	addi	r2,r2,-1
 200fbb0:	18800d26 	beq	r3,r2,200fbe8 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200fbb4:	e0bffd17 	ldw	r2,-12(fp)
 200fbb8:	10c00917 	ldw	r3,36(r2)
 200fbbc:	e0bffd17 	ldw	r2,-12(fp)
 200fbc0:	10800117 	ldw	r2,4(r2)
 200fbc4:	1885803a 	cmpltu	r2,r3,r2
 200fbc8:	10c03fcc 	andi	r3,r2,255
 200fbcc:	e0bfff17 	ldw	r2,-4(fp)
 200fbd0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200fbd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200fbd8:	00000306 	br	200fbe8 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 200fbdc:	00000306 	br	200fbec <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200fbe0:	0001883a 	nop
 200fbe4:	00000106 	br	200fbec <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200fbe8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200fbec:	e0bffb17 	ldw	r2,-20(fp)
}
 200fbf0:	e037883a 	mov	sp,fp
 200fbf4:	df000017 	ldw	fp,0(sp)
 200fbf8:	dec00104 	addi	sp,sp,4
 200fbfc:	f800283a 	ret

0200fc00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200fc00:	defff304 	addi	sp,sp,-52
 200fc04:	dfc00c15 	stw	ra,48(sp)
 200fc08:	df000b15 	stw	fp,44(sp)
 200fc0c:	df000b04 	addi	fp,sp,44
 200fc10:	e13ffc15 	stw	r4,-16(fp)
 200fc14:	e17ffd15 	stw	r5,-12(fp)
 200fc18:	e1bffe15 	stw	r6,-8(fp)
 200fc1c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200fc20:	e0bffd17 	ldw	r2,-12(fp)
 200fc24:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200fc28:	00004706 	br	200fd48 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200fc2c:	e0bffc17 	ldw	r2,-16(fp)
 200fc30:	10800a17 	ldw	r2,40(r2)
 200fc34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200fc38:	e0bffc17 	ldw	r2,-16(fp)
 200fc3c:	10800b17 	ldw	r2,44(r2)
 200fc40:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 200fc44:	e0fff717 	ldw	r3,-36(fp)
 200fc48:	e0bff817 	ldw	r2,-32(fp)
 200fc4c:	18800536 	bltu	r3,r2,200fc64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200fc50:	e0fff717 	ldw	r3,-36(fp)
 200fc54:	e0bff817 	ldw	r2,-32(fp)
 200fc58:	1885c83a 	sub	r2,r3,r2
 200fc5c:	e0bff615 	stw	r2,-40(fp)
 200fc60:	00000406 	br	200fc74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200fc64:	00c20004 	movi	r3,2048
 200fc68:	e0bff817 	ldw	r2,-32(fp)
 200fc6c:	1885c83a 	sub	r2,r3,r2
 200fc70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200fc74:	e0bff617 	ldw	r2,-40(fp)
 200fc78:	10001e26 	beq	r2,zero,200fcf4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 200fc7c:	e0fffe17 	ldw	r3,-8(fp)
 200fc80:	e0bff617 	ldw	r2,-40(fp)
 200fc84:	1880022e 	bgeu	r3,r2,200fc90 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200fc88:	e0bffe17 	ldw	r2,-8(fp)
 200fc8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200fc90:	e0bff817 	ldw	r2,-32(fp)
 200fc94:	10800e04 	addi	r2,r2,56
 200fc98:	e0fffc17 	ldw	r3,-16(fp)
 200fc9c:	1885883a 	add	r2,r3,r2
 200fca0:	e13ff517 	ldw	r4,-44(fp)
 200fca4:	100b883a 	mov	r5,r2
 200fca8:	e1bff617 	ldw	r6,-40(fp)
 200fcac:	200b1a40 	call	200b1a4 <memcpy>
      ptr   += n;
 200fcb0:	e0fff517 	ldw	r3,-44(fp)
 200fcb4:	e0bff617 	ldw	r2,-40(fp)
 200fcb8:	1885883a 	add	r2,r3,r2
 200fcbc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 200fcc0:	e0fffe17 	ldw	r3,-8(fp)
 200fcc4:	e0bff617 	ldw	r2,-40(fp)
 200fcc8:	1885c83a 	sub	r2,r3,r2
 200fccc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200fcd0:	e0fff817 	ldw	r3,-32(fp)
 200fcd4:	e0bff617 	ldw	r2,-40(fp)
 200fcd8:	1885883a 	add	r2,r3,r2
 200fcdc:	10c1ffcc 	andi	r3,r2,2047
 200fce0:	e0bffc17 	ldw	r2,-16(fp)
 200fce4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200fce8:	e0bffe17 	ldw	r2,-8(fp)
 200fcec:	00bfcf16 	blt	zero,r2,200fc2c <altera_avalon_jtag_uart_read+0x2c>
 200fcf0:	00000106 	br	200fcf8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200fcf4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200fcf8:	e0fff517 	ldw	r3,-44(fp)
 200fcfc:	e0bffd17 	ldw	r2,-12(fp)
 200fd00:	1880141e 	bne	r3,r2,200fd54 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200fd04:	e0bfff17 	ldw	r2,-4(fp)
 200fd08:	1090000c 	andi	r2,r2,16384
 200fd0c:	1000131e 	bne	r2,zero,200fd5c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200fd10:	0001883a 	nop
 200fd14:	e0bffc17 	ldw	r2,-16(fp)
 200fd18:	10c00a17 	ldw	r3,40(r2)
 200fd1c:	e0bff717 	ldw	r2,-36(fp)
 200fd20:	1880051e 	bne	r3,r2,200fd38 <altera_avalon_jtag_uart_read+0x138>
 200fd24:	e0bffc17 	ldw	r2,-16(fp)
 200fd28:	10c00917 	ldw	r3,36(r2)
 200fd2c:	e0bffc17 	ldw	r2,-16(fp)
 200fd30:	10800117 	ldw	r2,4(r2)
 200fd34:	18bff736 	bltu	r3,r2,200fd14 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200fd38:	e0bffc17 	ldw	r2,-16(fp)
 200fd3c:	10c00a17 	ldw	r3,40(r2)
 200fd40:	e0bff717 	ldw	r2,-36(fp)
 200fd44:	18800726 	beq	r3,r2,200fd64 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200fd48:	e0bffe17 	ldw	r2,-8(fp)
 200fd4c:	00bfb716 	blt	zero,r2,200fc2c <altera_avalon_jtag_uart_read+0x2c>
 200fd50:	00000506 	br	200fd68 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200fd54:	0001883a 	nop
 200fd58:	00000306 	br	200fd68 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200fd5c:	0001883a 	nop
 200fd60:	00000106 	br	200fd68 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200fd64:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200fd68:	e0fff517 	ldw	r3,-44(fp)
 200fd6c:	e0bffd17 	ldw	r2,-12(fp)
 200fd70:	18801726 	beq	r3,r2,200fdd0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fd74:	0005303a 	rdctl	r2,status
 200fd78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fd7c:	e0fffa17 	ldw	r3,-24(fp)
 200fd80:	00bfff84 	movi	r2,-2
 200fd84:	1884703a 	and	r2,r3,r2
 200fd88:	1001703a 	wrctl	status,r2
  
  return context;
 200fd8c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200fd90:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200fd94:	e0bffc17 	ldw	r2,-16(fp)
 200fd98:	10800817 	ldw	r2,32(r2)
 200fd9c:	10c00054 	ori	r3,r2,1
 200fda0:	e0bffc17 	ldw	r2,-16(fp)
 200fda4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200fda8:	e0bffc17 	ldw	r2,-16(fp)
 200fdac:	10800017 	ldw	r2,0(r2)
 200fdb0:	10800104 	addi	r2,r2,4
 200fdb4:	e0fffc17 	ldw	r3,-16(fp)
 200fdb8:	18c00817 	ldw	r3,32(r3)
 200fdbc:	10c00035 	stwio	r3,0(r2)
 200fdc0:	e0bff917 	ldw	r2,-28(fp)
 200fdc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fdc8:	e0bffb17 	ldw	r2,-20(fp)
 200fdcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200fdd0:	e0fff517 	ldw	r3,-44(fp)
 200fdd4:	e0bffd17 	ldw	r2,-12(fp)
 200fdd8:	18800426 	beq	r3,r2,200fdec <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 200fddc:	e0fff517 	ldw	r3,-44(fp)
 200fde0:	e0bffd17 	ldw	r2,-12(fp)
 200fde4:	1885c83a 	sub	r2,r3,r2
 200fde8:	00000606 	br	200fe04 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 200fdec:	e0bfff17 	ldw	r2,-4(fp)
 200fdf0:	1090000c 	andi	r2,r2,16384
 200fdf4:	10000226 	beq	r2,zero,200fe00 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 200fdf8:	00bffd44 	movi	r2,-11
 200fdfc:	00000106 	br	200fe04 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 200fe00:	00bffec4 	movi	r2,-5
}
 200fe04:	e037883a 	mov	sp,fp
 200fe08:	dfc00117 	ldw	ra,4(sp)
 200fe0c:	df000017 	ldw	fp,0(sp)
 200fe10:	dec00204 	addi	sp,sp,8
 200fe14:	f800283a 	ret

0200fe18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200fe18:	defff304 	addi	sp,sp,-52
 200fe1c:	dfc00c15 	stw	ra,48(sp)
 200fe20:	df000b15 	stw	fp,44(sp)
 200fe24:	df000b04 	addi	fp,sp,44
 200fe28:	e13ffc15 	stw	r4,-16(fp)
 200fe2c:	e17ffd15 	stw	r5,-12(fp)
 200fe30:	e1bffe15 	stw	r6,-8(fp)
 200fe34:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200fe38:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200fe3c:	e0bffd17 	ldw	r2,-12(fp)
 200fe40:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200fe44:	00003706 	br	200ff24 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200fe48:	e0bffc17 	ldw	r2,-16(fp)
 200fe4c:	10800c17 	ldw	r2,48(r2)
 200fe50:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 200fe54:	e0bffc17 	ldw	r2,-16(fp)
 200fe58:	10800d17 	ldw	r2,52(r2)
 200fe5c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 200fe60:	e0fff817 	ldw	r3,-32(fp)
 200fe64:	e0bff517 	ldw	r2,-44(fp)
 200fe68:	1880062e 	bgeu	r3,r2,200fe84 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200fe6c:	e0fff517 	ldw	r3,-44(fp)
 200fe70:	e0bff817 	ldw	r2,-32(fp)
 200fe74:	1885c83a 	sub	r2,r3,r2
 200fe78:	10bfffc4 	addi	r2,r2,-1
 200fe7c:	e0bff615 	stw	r2,-40(fp)
 200fe80:	00000b06 	br	200feb0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200fe84:	e0bff517 	ldw	r2,-44(fp)
 200fe88:	10000526 	beq	r2,zero,200fea0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200fe8c:	00c20004 	movi	r3,2048
 200fe90:	e0bff817 	ldw	r2,-32(fp)
 200fe94:	1885c83a 	sub	r2,r3,r2
 200fe98:	e0bff615 	stw	r2,-40(fp)
 200fe9c:	00000406 	br	200feb0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200fea0:	00c1ffc4 	movi	r3,2047
 200fea4:	e0bff817 	ldw	r2,-32(fp)
 200fea8:	1885c83a 	sub	r2,r3,r2
 200feac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200feb0:	e0bff617 	ldw	r2,-40(fp)
 200feb4:	10001e26 	beq	r2,zero,200ff30 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200feb8:	e0fffe17 	ldw	r3,-8(fp)
 200febc:	e0bff617 	ldw	r2,-40(fp)
 200fec0:	1880022e 	bgeu	r3,r2,200fecc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200fec4:	e0bffe17 	ldw	r2,-8(fp)
 200fec8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200fecc:	e0bff817 	ldw	r2,-32(fp)
 200fed0:	10820e04 	addi	r2,r2,2104
 200fed4:	e0fffc17 	ldw	r3,-16(fp)
 200fed8:	1885883a 	add	r2,r3,r2
 200fedc:	1009883a 	mov	r4,r2
 200fee0:	e17ffd17 	ldw	r5,-12(fp)
 200fee4:	e1bff617 	ldw	r6,-40(fp)
 200fee8:	200b1a40 	call	200b1a4 <memcpy>
      ptr   += n;
 200feec:	e0fffd17 	ldw	r3,-12(fp)
 200fef0:	e0bff617 	ldw	r2,-40(fp)
 200fef4:	1885883a 	add	r2,r3,r2
 200fef8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200fefc:	e0fffe17 	ldw	r3,-8(fp)
 200ff00:	e0bff617 	ldw	r2,-40(fp)
 200ff04:	1885c83a 	sub	r2,r3,r2
 200ff08:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200ff0c:	e0fff817 	ldw	r3,-32(fp)
 200ff10:	e0bff617 	ldw	r2,-40(fp)
 200ff14:	1885883a 	add	r2,r3,r2
 200ff18:	10c1ffcc 	andi	r3,r2,2047
 200ff1c:	e0bffc17 	ldw	r2,-16(fp)
 200ff20:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200ff24:	e0bffe17 	ldw	r2,-8(fp)
 200ff28:	00bfc716 	blt	zero,r2,200fe48 <altera_avalon_jtag_uart_write+0x30>
 200ff2c:	00000106 	br	200ff34 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200ff30:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ff34:	0005303a 	rdctl	r2,status
 200ff38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ff3c:	e0fffa17 	ldw	r3,-24(fp)
 200ff40:	00bfff84 	movi	r2,-2
 200ff44:	1884703a 	and	r2,r3,r2
 200ff48:	1001703a 	wrctl	status,r2
  
  return context;
 200ff4c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200ff50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200ff54:	e0bffc17 	ldw	r2,-16(fp)
 200ff58:	10800817 	ldw	r2,32(r2)
 200ff5c:	10c00094 	ori	r3,r2,2
 200ff60:	e0bffc17 	ldw	r2,-16(fp)
 200ff64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200ff68:	e0bffc17 	ldw	r2,-16(fp)
 200ff6c:	10800017 	ldw	r2,0(r2)
 200ff70:	10800104 	addi	r2,r2,4
 200ff74:	e0fffc17 	ldw	r3,-16(fp)
 200ff78:	18c00817 	ldw	r3,32(r3)
 200ff7c:	10c00035 	stwio	r3,0(r2)
 200ff80:	e0bff917 	ldw	r2,-28(fp)
 200ff84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ff88:	e0bffb17 	ldw	r2,-20(fp)
 200ff8c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200ff90:	e0bffe17 	ldw	r2,-8(fp)
 200ff94:	0080110e 	bge	zero,r2,200ffdc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200ff98:	e0bfff17 	ldw	r2,-4(fp)
 200ff9c:	1090000c 	andi	r2,r2,16384
 200ffa0:	1000111e 	bne	r2,zero,200ffe8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200ffa4:	0001883a 	nop
 200ffa8:	e0bffc17 	ldw	r2,-16(fp)
 200ffac:	10c00d17 	ldw	r3,52(r2)
 200ffb0:	e0bff517 	ldw	r2,-44(fp)
 200ffb4:	1880051e 	bne	r3,r2,200ffcc <altera_avalon_jtag_uart_write+0x1b4>
 200ffb8:	e0bffc17 	ldw	r2,-16(fp)
 200ffbc:	10c00917 	ldw	r3,36(r2)
 200ffc0:	e0bffc17 	ldw	r2,-16(fp)
 200ffc4:	10800117 	ldw	r2,4(r2)
 200ffc8:	18bff736 	bltu	r3,r2,200ffa8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 200ffcc:	e0bffc17 	ldw	r2,-16(fp)
 200ffd0:	10c00d17 	ldw	r3,52(r2)
 200ffd4:	e0bff517 	ldw	r2,-44(fp)
 200ffd8:	18800526 	beq	r3,r2,200fff0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200ffdc:	e0bffe17 	ldw	r2,-8(fp)
 200ffe0:	00bfd016 	blt	zero,r2,200ff24 <altera_avalon_jtag_uart_write+0x10c>
 200ffe4:	00000306 	br	200fff4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200ffe8:	0001883a 	nop
 200ffec:	00000106 	br	200fff4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 200fff0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200fff4:	e0fffd17 	ldw	r3,-12(fp)
 200fff8:	e0bff717 	ldw	r2,-36(fp)
 200fffc:	18800426 	beq	r3,r2,2010010 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2010000:	e0fffd17 	ldw	r3,-12(fp)
 2010004:	e0bff717 	ldw	r2,-36(fp)
 2010008:	1885c83a 	sub	r2,r3,r2
 201000c:	00000606 	br	2010028 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2010010:	e0bfff17 	ldw	r2,-4(fp)
 2010014:	1090000c 	andi	r2,r2,16384
 2010018:	10000226 	beq	r2,zero,2010024 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 201001c:	00bffd44 	movi	r2,-11
 2010020:	00000106 	br	2010028 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2010024:	00bffec4 	movi	r2,-5
}
 2010028:	e037883a 	mov	sp,fp
 201002c:	dfc00117 	ldw	ra,4(sp)
 2010030:	df000017 	ldw	fp,0(sp)
 2010034:	dec00204 	addi	sp,sp,8
 2010038:	f800283a 	ret

0201003c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 201003c:	defff904 	addi	sp,sp,-28
 2010040:	dfc00615 	stw	ra,24(sp)
 2010044:	df000515 	stw	fp,20(sp)
 2010048:	df000504 	addi	fp,sp,20
 201004c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2010050:	00800144 	movi	r2,5
 2010054:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2010058:	00800044 	movi	r2,1
 201005c:	d8800015 	stw	r2,0(sp)
 2010060:	e0bffe44 	addi	r2,fp,-7
 2010064:	d8800115 	stw	r2,4(sp)
 2010068:	d8000215 	stw	zero,8(sp)
 201006c:	e13fff17 	ldw	r4,-4(fp)
 2010070:	000b883a 	mov	r5,zero
 2010074:	01800044 	movi	r6,1
 2010078:	e1fffe04 	addi	r7,fp,-8
 201007c:	20113800 	call	2011380 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2010080:	e0bffe43 	ldbu	r2,-7(fp)
}
 2010084:	e037883a 	mov	sp,fp
 2010088:	dfc00117 	ldw	ra,4(sp)
 201008c:	df000017 	ldw	fp,0(sp)
 2010090:	dec00204 	addi	sp,sp,8
 2010094:	f800283a 	ret

02010098 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2010098:	defffd04 	addi	sp,sp,-12
 201009c:	dfc00215 	stw	ra,8(sp)
 20100a0:	df000115 	stw	fp,4(sp)
 20100a4:	df000104 	addi	fp,sp,4
 20100a8:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 20100ac:	e13fff17 	ldw	r4,-4(fp)
 20100b0:	201003c0 	call	201003c <epcs_read_status_register>
 20100b4:	10803fcc 	andi	r2,r2,255
 20100b8:	1080004c 	andi	r2,r2,1
}
 20100bc:	e037883a 	mov	sp,fp
 20100c0:	dfc00117 	ldw	ra,4(sp)
 20100c4:	df000017 	ldw	fp,0(sp)
 20100c8:	dec00204 	addi	sp,sp,8
 20100cc:	f800283a 	ret

020100d0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 20100d0:	defffd04 	addi	sp,sp,-12
 20100d4:	dfc00215 	stw	ra,8(sp)
 20100d8:	df000115 	stw	fp,4(sp)
 20100dc:	df000104 	addi	fp,sp,4
 20100e0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 20100e4:	0001883a 	nop
 20100e8:	e13fff17 	ldw	r4,-4(fp)
 20100ec:	20100980 	call	2010098 <epcs_test_wip>
 20100f0:	103ffd1e 	bne	r2,zero,20100e8 <epcs_await_wip_released+0x18>
  {
  }
}
 20100f4:	e037883a 	mov	sp,fp
 20100f8:	dfc00117 	ldw	ra,4(sp)
 20100fc:	df000017 	ldw	fp,0(sp)
 2010100:	dec00204 	addi	sp,sp,8
 2010104:	f800283a 	ret

02010108 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2010108:	defff604 	addi	sp,sp,-40
 201010c:	dfc00915 	stw	ra,36(sp)
 2010110:	df000815 	stw	fp,32(sp)
 2010114:	df000804 	addi	fp,sp,32
 2010118:	e13ffd15 	stw	r4,-12(fp)
 201011c:	e17ffe15 	stw	r5,-8(fp)
 2010120:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2010124:	e0bfff17 	ldw	r2,-4(fp)
 2010128:	10001226 	beq	r2,zero,2010174 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 201012c:	00bff604 	movi	r2,-40
 2010130:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2010134:	e0bffe17 	ldw	r2,-8(fp)
 2010138:	1004d63a 	srli	r2,r2,24
 201013c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2010140:	e0bffe17 	ldw	r2,-8(fp)
 2010144:	1004d43a 	srli	r2,r2,16
 2010148:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 201014c:	e0bffe17 	ldw	r2,-8(fp)
 2010150:	1004d23a 	srli	r2,r2,8
 2010154:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2010158:	e0bffe17 	ldw	r2,-8(fp)
 201015c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2010160:	00800144 	movi	r2,5
 2010164:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2010168:	e13ffd17 	ldw	r4,-12(fp)
 201016c:	20105b00 	call	20105b0 <epcs_enter_4_bytes_mode>
 2010170:	00000c06 	br	20101a4 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2010174:	00bff604 	movi	r2,-40
 2010178:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 201017c:	e0bffe17 	ldw	r2,-8(fp)
 2010180:	1004d43a 	srli	r2,r2,16
 2010184:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2010188:	e0bffe17 	ldw	r2,-8(fp)
 201018c:	1004d23a 	srli	r2,r2,8
 2010190:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2010194:	e0bffe17 	ldw	r2,-8(fp)
 2010198:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 201019c:	00800104 	movi	r2,4
 20101a0:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 20101a4:	e13ffd17 	ldw	r4,-12(fp)
 20101a8:	20102f40 	call	20102f4 <epcs_write_enable>

  alt_avalon_spi_command(
 20101ac:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 20101b0:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 20101b4:	d8000015 	stw	zero,0(sp)
 20101b8:	d8000115 	stw	zero,4(sp)
 20101bc:	d8000215 	stw	zero,8(sp)
 20101c0:	e13ffd17 	ldw	r4,-12(fp)
 20101c4:	000b883a 	mov	r5,zero
 20101c8:	180d883a 	mov	r6,r3
 20101cc:	100f883a 	mov	r7,r2
 20101d0:	20113800 	call	2011380 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 20101d4:	e13ffd17 	ldw	r4,-12(fp)
 20101d8:	20100d00 	call	20100d0 <epcs_await_wip_released>

  if(four_bytes_mode)
 20101dc:	e0bfff17 	ldw	r2,-4(fp)
 20101e0:	10000226 	beq	r2,zero,20101ec <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 20101e4:	e13ffd17 	ldw	r4,-12(fp)
 20101e8:	20106080 	call	2010608 <epcs_exit_4_bytes_mode>
  }
}
 20101ec:	e037883a 	mov	sp,fp
 20101f0:	dfc00117 	ldw	ra,4(sp)
 20101f4:	df000017 	ldw	fp,0(sp)
 20101f8:	dec00204 	addi	sp,sp,8
 20101fc:	f800283a 	ret

02010200 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2010200:	defff404 	addi	sp,sp,-48
 2010204:	dfc00b15 	stw	ra,44(sp)
 2010208:	df000a15 	stw	fp,40(sp)
 201020c:	df000a04 	addi	fp,sp,40
 2010210:	e13ffc15 	stw	r4,-16(fp)
 2010214:	e17ffd15 	stw	r5,-12(fp)
 2010218:	e1bffe15 	stw	r6,-8(fp)
 201021c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2010220:	008000c4 	movi	r2,3
 2010224:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2010228:	e0800217 	ldw	r2,8(fp)
 201022c:	10001026 	beq	r2,zero,2010270 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2010230:	e0bffd17 	ldw	r2,-12(fp)
 2010234:	1004d63a 	srli	r2,r2,24
 2010238:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 201023c:	e0bffd17 	ldw	r2,-12(fp)
 2010240:	1005d43a 	srai	r2,r2,16
 2010244:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2010248:	e0bffd17 	ldw	r2,-12(fp)
 201024c:	1005d23a 	srai	r2,r2,8
 2010250:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2010254:	e0bffd17 	ldw	r2,-12(fp)
 2010258:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 201025c:	00800144 	movi	r2,5
 2010260:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2010264:	e13ffc17 	ldw	r4,-16(fp)
 2010268:	20105b00 	call	20105b0 <epcs_enter_4_bytes_mode>
 201026c:	00000a06 	br	2010298 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2010270:	e0bffd17 	ldw	r2,-12(fp)
 2010274:	1005d43a 	srai	r2,r2,16
 2010278:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 201027c:	e0bffd17 	ldw	r2,-12(fp)
 2010280:	1005d23a 	srai	r2,r2,8
 2010284:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2010288:	e0bffd17 	ldw	r2,-12(fp)
 201028c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2010290:	00800104 	movi	r2,4
 2010294:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2010298:	e13ffc17 	ldw	r4,-16(fp)
 201029c:	20100d00 	call	20100d0 <epcs_await_wip_released>

  alt_avalon_spi_command(
 20102a0:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 20102a4:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 20102a8:	d8c00015 	stw	r3,0(sp)
 20102ac:	e0fffe17 	ldw	r3,-8(fp)
 20102b0:	d8c00115 	stw	r3,4(sp)
 20102b4:	d8000215 	stw	zero,8(sp)
 20102b8:	e13ffc17 	ldw	r4,-16(fp)
 20102bc:	000b883a 	mov	r5,zero
 20102c0:	e1bff917 	ldw	r6,-28(fp)
 20102c4:	100f883a 	mov	r7,r2
 20102c8:	20113800 	call	2011380 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 20102cc:	e0800217 	ldw	r2,8(fp)
 20102d0:	10000226 	beq	r2,zero,20102dc <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 20102d4:	e13ffc17 	ldw	r4,-16(fp)
 20102d8:	20106080 	call	2010608 <epcs_exit_4_bytes_mode>
  }

  return length;
 20102dc:	e0bfff17 	ldw	r2,-4(fp)
}
 20102e0:	e037883a 	mov	sp,fp
 20102e4:	dfc00117 	ldw	ra,4(sp)
 20102e8:	df000017 	ldw	fp,0(sp)
 20102ec:	dec00204 	addi	sp,sp,8
 20102f0:	f800283a 	ret

020102f4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 20102f4:	defff904 	addi	sp,sp,-28
 20102f8:	dfc00615 	stw	ra,24(sp)
 20102fc:	df000515 	stw	fp,20(sp)
 2010300:	df000504 	addi	fp,sp,20
 2010304:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2010308:	00800184 	movi	r2,6
 201030c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2010310:	d8000015 	stw	zero,0(sp)
 2010314:	d8000115 	stw	zero,4(sp)
 2010318:	d8000215 	stw	zero,8(sp)
 201031c:	e13fff17 	ldw	r4,-4(fp)
 2010320:	000b883a 	mov	r5,zero
 2010324:	01800044 	movi	r6,1
 2010328:	e1fffe04 	addi	r7,fp,-8
 201032c:	20113800 	call	2011380 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2010330:	e037883a 	mov	sp,fp
 2010334:	dfc00117 	ldw	ra,4(sp)
 2010338:	df000017 	ldw	fp,0(sp)
 201033c:	dec00204 	addi	sp,sp,8
 2010340:	f800283a 	ret

02010344 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2010344:	defff804 	addi	sp,sp,-32
 2010348:	dfc00715 	stw	ra,28(sp)
 201034c:	df000615 	stw	fp,24(sp)
 2010350:	df000604 	addi	fp,sp,24
 2010354:	e13ffe15 	stw	r4,-8(fp)
 2010358:	2805883a 	mov	r2,r5
 201035c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2010360:	00800044 	movi	r2,1
 2010364:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2010368:	e0bfff03 	ldbu	r2,-4(fp)
 201036c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2010370:	d8000015 	stw	zero,0(sp)
 2010374:	d8000115 	stw	zero,4(sp)
 2010378:	d8000215 	stw	zero,8(sp)
 201037c:	e13ffe17 	ldw	r4,-8(fp)
 2010380:	000b883a 	mov	r5,zero
 2010384:	01800084 	movi	r6,2
 2010388:	e1fffd04 	addi	r7,fp,-12
 201038c:	20113800 	call	2011380 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2010390:	e13ffe17 	ldw	r4,-8(fp)
 2010394:	20100d00 	call	20100d0 <epcs_await_wip_released>
}
 2010398:	e037883a 	mov	sp,fp
 201039c:	dfc00117 	ldw	ra,4(sp)
 20103a0:	df000017 	ldw	fp,0(sp)
 20103a4:	dec00204 	addi	sp,sp,8
 20103a8:	f800283a 	ret

020103ac <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 20103ac:	defff404 	addi	sp,sp,-48
 20103b0:	dfc00b15 	stw	ra,44(sp)
 20103b4:	df000a15 	stw	fp,40(sp)
 20103b8:	df000a04 	addi	fp,sp,40
 20103bc:	e13ffc15 	stw	r4,-16(fp)
 20103c0:	e17ffd15 	stw	r5,-12(fp)
 20103c4:	e1bffe15 	stw	r6,-8(fp)
 20103c8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 20103cc:	00800084 	movi	r2,2
 20103d0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 20103d4:	e0800217 	ldw	r2,8(fp)
 20103d8:	10001026 	beq	r2,zero,201041c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 20103dc:	e0bffd17 	ldw	r2,-12(fp)
 20103e0:	1004d63a 	srli	r2,r2,24
 20103e4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 20103e8:	e0bffd17 	ldw	r2,-12(fp)
 20103ec:	1005d43a 	srai	r2,r2,16
 20103f0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 20103f4:	e0bffd17 	ldw	r2,-12(fp)
 20103f8:	1005d23a 	srai	r2,r2,8
 20103fc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2010400:	e0bffd17 	ldw	r2,-12(fp)
 2010404:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2010408:	00800144 	movi	r2,5
 201040c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2010410:	e13ffc17 	ldw	r4,-16(fp)
 2010414:	20105b00 	call	20105b0 <epcs_enter_4_bytes_mode>
 2010418:	00000a06 	br	2010444 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 201041c:	e0bffd17 	ldw	r2,-12(fp)
 2010420:	1005d43a 	srai	r2,r2,16
 2010424:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2010428:	e0bffd17 	ldw	r2,-12(fp)
 201042c:	1005d23a 	srai	r2,r2,8
 2010430:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2010434:	e0bffd17 	ldw	r2,-12(fp)
 2010438:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 201043c:	00800104 	movi	r2,4
 2010440:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2010444:	e13ffc17 	ldw	r4,-16(fp)
 2010448:	20102f40 	call	20102f4 <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 201044c:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 2010450:	d8000015 	stw	zero,0(sp)
 2010454:	d8000115 	stw	zero,4(sp)
 2010458:	00c00044 	movi	r3,1
 201045c:	d8c00215 	stw	r3,8(sp)
 2010460:	e13ffc17 	ldw	r4,-16(fp)
 2010464:	000b883a 	mov	r5,zero
 2010468:	e1bff917 	ldw	r6,-28(fp)
 201046c:	100f883a 	mov	r7,r2
 2010470:	20113800 	call	2011380 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2010474:	e0bfff17 	ldw	r2,-4(fp)
 2010478:	d8000015 	stw	zero,0(sp)
 201047c:	d8000115 	stw	zero,4(sp)
 2010480:	d8000215 	stw	zero,8(sp)
 2010484:	e13ffc17 	ldw	r4,-16(fp)
 2010488:	000b883a 	mov	r5,zero
 201048c:	100d883a 	mov	r6,r2
 2010490:	e1fffe17 	ldw	r7,-8(fp)
 2010494:	20113800 	call	2011380 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2010498:	e13ffc17 	ldw	r4,-16(fp)
 201049c:	20100d00 	call	20100d0 <epcs_await_wip_released>

  if(four_bytes_mode)
 20104a0:	e0800217 	ldw	r2,8(fp)
 20104a4:	10000226 	beq	r2,zero,20104b0 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 20104a8:	e13ffc17 	ldw	r4,-16(fp)
 20104ac:	20106080 	call	2010608 <epcs_exit_4_bytes_mode>
  }

  return length;
 20104b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20104b4:	e037883a 	mov	sp,fp
 20104b8:	dfc00117 	ldw	ra,4(sp)
 20104bc:	df000017 	ldw	fp,0(sp)
 20104c0:	dec00204 	addi	sp,sp,8
 20104c4:	f800283a 	ret

020104c8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 20104c8:	defff804 	addi	sp,sp,-32
 20104cc:	dfc00715 	stw	ra,28(sp)
 20104d0:	df000615 	stw	fp,24(sp)
 20104d4:	df000604 	addi	fp,sp,24
 20104d8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 20104dc:	00bfeac4 	movi	r2,-85
 20104e0:	e0bffd05 	stb	r2,-12(fp)
 20104e4:	e03ffd45 	stb	zero,-11(fp)
 20104e8:	e03ffd85 	stb	zero,-10(fp)
 20104ec:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 20104f0:	00800044 	movi	r2,1
 20104f4:	d8800015 	stw	r2,0(sp)
 20104f8:	e0bffe04 	addi	r2,fp,-8
 20104fc:	d8800115 	stw	r2,4(sp)
 2010500:	d8000215 	stw	zero,8(sp)
 2010504:	e13fff17 	ldw	r4,-4(fp)
 2010508:	000b883a 	mov	r5,zero
 201050c:	01800104 	movi	r6,4
 2010510:	e1fffd04 	addi	r7,fp,-12
 2010514:	20113800 	call	2011380 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2010518:	e0bffe03 	ldbu	r2,-8(fp)
}
 201051c:	e037883a 	mov	sp,fp
 2010520:	dfc00117 	ldw	ra,4(sp)
 2010524:	df000017 	ldw	fp,0(sp)
 2010528:	dec00204 	addi	sp,sp,8
 201052c:	f800283a 	ret

02010530 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2010530:	defff904 	addi	sp,sp,-28
 2010534:	dfc00615 	stw	ra,24(sp)
 2010538:	df000515 	stw	fp,20(sp)
 201053c:	df000504 	addi	fp,sp,20
 2010540:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2010544:	00bfe7c4 	movi	r2,-97
 2010548:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 201054c:	008000c4 	movi	r2,3
 2010550:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 2010554:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 2010558:	d8800115 	stw	r2,4(sp)
 201055c:	d8000215 	stw	zero,8(sp)
 2010560:	e13fff17 	ldw	r4,-4(fp)
 2010564:	000b883a 	mov	r5,zero
 2010568:	01800044 	movi	r6,1
 201056c:	e1fffe04 	addi	r7,fp,-8
 2010570:	20113800 	call	2011380 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2010574:	e0bffe43 	ldbu	r2,-7(fp)
 2010578:	10803fcc 	andi	r2,r2,255
 201057c:	1006943a 	slli	r3,r2,16
 2010580:	e0bffe83 	ldbu	r2,-6(fp)
 2010584:	10803fcc 	andi	r2,r2,255
 2010588:	1004923a 	slli	r2,r2,8
 201058c:	1886b03a 	or	r3,r3,r2
 2010590:	e0bffec3 	ldbu	r2,-5(fp)
 2010594:	10803fcc 	andi	r2,r2,255
 2010598:	1884b03a 	or	r2,r3,r2
}
 201059c:	e037883a 	mov	sp,fp
 20105a0:	dfc00117 	ldw	ra,4(sp)
 20105a4:	df000017 	ldw	fp,0(sp)
 20105a8:	dec00204 	addi	sp,sp,8
 20105ac:	f800283a 	ret

020105b0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 20105b0:	defff904 	addi	sp,sp,-28
 20105b4:	dfc00615 	stw	ra,24(sp)
 20105b8:	df000515 	stw	fp,20(sp)
 20105bc:	df000504 	addi	fp,sp,20
 20105c0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 20105c4:	00bfedc4 	movi	r2,-73
 20105c8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20105cc:	e13fff17 	ldw	r4,-4(fp)
 20105d0:	20102f40 	call	20102f4 <epcs_write_enable>

  alt_avalon_spi_command(
 20105d4:	d8000015 	stw	zero,0(sp)
 20105d8:	d8000115 	stw	zero,4(sp)
 20105dc:	d8000215 	stw	zero,8(sp)
 20105e0:	e13fff17 	ldw	r4,-4(fp)
 20105e4:	000b883a 	mov	r5,zero
 20105e8:	01800044 	movi	r6,1
 20105ec:	e1fffe04 	addi	r7,fp,-8
 20105f0:	20113800 	call	2011380 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 20105f4:	e037883a 	mov	sp,fp
 20105f8:	dfc00117 	ldw	ra,4(sp)
 20105fc:	df000017 	ldw	fp,0(sp)
 2010600:	dec00204 	addi	sp,sp,8
 2010604:	f800283a 	ret

02010608 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2010608:	defff904 	addi	sp,sp,-28
 201060c:	dfc00615 	stw	ra,24(sp)
 2010610:	df000515 	stw	fp,20(sp)
 2010614:	df000504 	addi	fp,sp,20
 2010618:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 201061c:	00bffa44 	movi	r2,-23
 2010620:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2010624:	e13fff17 	ldw	r4,-4(fp)
 2010628:	20102f40 	call	20102f4 <epcs_write_enable>

  alt_avalon_spi_command(
 201062c:	d8000015 	stw	zero,0(sp)
 2010630:	d8000115 	stw	zero,4(sp)
 2010634:	d8000215 	stw	zero,8(sp)
 2010638:	e13fff17 	ldw	r4,-4(fp)
 201063c:	000b883a 	mov	r5,zero
 2010640:	01800044 	movi	r6,1
 2010644:	e1fffe04 	addi	r7,fp,-8
 2010648:	20113800 	call	2011380 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 201064c:	e037883a 	mov	sp,fp
 2010650:	dfc00117 	ldw	ra,4(sp)
 2010654:	df000017 	ldw	fp,0(sp)
 2010658:	dec00204 	addi	sp,sp,8
 201065c:	f800283a 	ret

02010660 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2010660:	defff504 	addi	sp,sp,-44
 2010664:	df000a15 	stw	fp,40(sp)
 2010668:	df000a04 	addi	fp,sp,40
 201066c:	e13ffc15 	stw	r4,-16(fp)
 2010670:	e17ffd15 	stw	r5,-12(fp)
 2010674:	e1bffe15 	stw	r6,-8(fp)
 2010678:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 201067c:	e03ff615 	stw	zero,-40(fp)
 2010680:	00808074 	movhi	r2,513
 2010684:	108e9304 	addi	r2,r2,14924
 2010688:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 201068c:	10003f26 	beq	r2,zero,201078c <alt_alarm_start+0x12c>
  {
    if (alarm)
 2010690:	e0bffc17 	ldw	r2,-16(fp)
 2010694:	10003b26 	beq	r2,zero,2010784 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 2010698:	e0bffc17 	ldw	r2,-16(fp)
 201069c:	e0fffe17 	ldw	r3,-8(fp)
 20106a0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20106a4:	e0bffc17 	ldw	r2,-16(fp)
 20106a8:	e0ffff17 	ldw	r3,-4(fp)
 20106ac:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20106b0:	0005303a 	rdctl	r2,status
 20106b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20106b8:	e0fff817 	ldw	r3,-32(fp)
 20106bc:	00bfff84 	movi	r2,-2
 20106c0:	1884703a 	and	r2,r3,r2
 20106c4:	1001703a 	wrctl	status,r2
  
  return context;
 20106c8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 20106cc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20106d0:	00808074 	movhi	r2,513
 20106d4:	108e9404 	addi	r2,r2,14928
 20106d8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 20106dc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20106e0:	e0fffd17 	ldw	r3,-12(fp)
 20106e4:	e0bff617 	ldw	r2,-40(fp)
 20106e8:	1885883a 	add	r2,r3,r2
 20106ec:	10c00044 	addi	r3,r2,1
 20106f0:	e0bffc17 	ldw	r2,-16(fp)
 20106f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20106f8:	e0bffc17 	ldw	r2,-16(fp)
 20106fc:	10c00217 	ldw	r3,8(r2)
 2010700:	e0bff617 	ldw	r2,-40(fp)
 2010704:	1880042e 	bgeu	r3,r2,2010718 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 2010708:	e0bffc17 	ldw	r2,-16(fp)
 201070c:	00c00044 	movi	r3,1
 2010710:	10c00405 	stb	r3,16(r2)
 2010714:	00000206 	br	2010720 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 2010718:	e0bffc17 	ldw	r2,-16(fp)
 201071c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2010720:	e0bffc17 	ldw	r2,-16(fp)
 2010724:	00c08074 	movhi	r3,513
 2010728:	18ce8604 	addi	r3,r3,14872
 201072c:	e0fff915 	stw	r3,-28(fp)
 2010730:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2010734:	e0bffa17 	ldw	r2,-24(fp)
 2010738:	e0fff917 	ldw	r3,-28(fp)
 201073c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2010740:	e0bff917 	ldw	r2,-28(fp)
 2010744:	10c00017 	ldw	r3,0(r2)
 2010748:	e0bffa17 	ldw	r2,-24(fp)
 201074c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2010750:	e0bff917 	ldw	r2,-28(fp)
 2010754:	10800017 	ldw	r2,0(r2)
 2010758:	e0fffa17 	ldw	r3,-24(fp)
 201075c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2010760:	e0bff917 	ldw	r2,-28(fp)
 2010764:	e0fffa17 	ldw	r3,-24(fp)
 2010768:	10c00015 	stw	r3,0(r2)
 201076c:	e0bff717 	ldw	r2,-36(fp)
 2010770:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010774:	e0bffb17 	ldw	r2,-20(fp)
 2010778:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 201077c:	0005883a 	mov	r2,zero
 2010780:	00000306 	br	2010790 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 2010784:	00bffa84 	movi	r2,-22
 2010788:	00000106 	br	2010790 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 201078c:	00bfde84 	movi	r2,-134
  }
}
 2010790:	e037883a 	mov	sp,fp
 2010794:	df000017 	ldw	fp,0(sp)
 2010798:	dec00104 	addi	sp,sp,4
 201079c:	f800283a 	ret

020107a0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 20107a0:	defffa04 	addi	sp,sp,-24
 20107a4:	dfc00515 	stw	ra,20(sp)
 20107a8:	df000415 	stw	fp,16(sp)
 20107ac:	df000404 	addi	fp,sp,16
 20107b0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 20107b4:	008000c4 	movi	r2,3
 20107b8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 20107bc:	e0fffd17 	ldw	r3,-12(fp)
 20107c0:	008003f4 	movhi	r2,15
 20107c4:	10909004 	addi	r2,r2,16960
 20107c8:	1885383a 	mul	r2,r3,r2
 20107cc:	01017db4 	movhi	r4,1526
 20107d0:	21384004 	addi	r4,r4,-7936
 20107d4:	100b883a 	mov	r5,r2
 20107d8:	200e2b80 	call	200e2b8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 20107dc:	01200034 	movhi	r4,32768
 20107e0:	213fffc4 	addi	r4,r4,-1
 20107e4:	100b883a 	mov	r5,r2
 20107e8:	200e2b80 	call	200e2b8 <__udivsi3>
 20107ec:	e13fff17 	ldw	r4,-4(fp)
 20107f0:	100b883a 	mov	r5,r2
 20107f4:	200e2b80 	call	200e2b8 <__udivsi3>
 20107f8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 20107fc:	e0bffe17 	ldw	r2,-8(fp)
 2010800:	10002926 	beq	r2,zero,20108a8 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 2010804:	e03ffc15 	stw	zero,-16(fp)
 2010808:	00001606 	br	2010864 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 201080c:	00a00034 	movhi	r2,32768
 2010810:	10bfffc4 	addi	r2,r2,-1
 2010814:	10bfffc4 	addi	r2,r2,-1
 2010818:	103ffe1e 	bne	r2,zero,2010814 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 201081c:	e0fffd17 	ldw	r3,-12(fp)
 2010820:	008003f4 	movhi	r2,15
 2010824:	10909004 	addi	r2,r2,16960
 2010828:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 201082c:	01017db4 	movhi	r4,1526
 2010830:	21384004 	addi	r4,r4,-7936
 2010834:	100b883a 	mov	r5,r2
 2010838:	200e2b80 	call	200e2b8 <__udivsi3>
 201083c:	01200034 	movhi	r4,32768
 2010840:	213fffc4 	addi	r4,r4,-1
 2010844:	100b883a 	mov	r5,r2
 2010848:	200e2b80 	call	200e2b8 <__udivsi3>
 201084c:	e0ffff17 	ldw	r3,-4(fp)
 2010850:	1885c83a 	sub	r2,r3,r2
 2010854:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2010858:	e0bffc17 	ldw	r2,-16(fp)
 201085c:	10800044 	addi	r2,r2,1
 2010860:	e0bffc15 	stw	r2,-16(fp)
 2010864:	e0fffc17 	ldw	r3,-16(fp)
 2010868:	e0bffe17 	ldw	r2,-8(fp)
 201086c:	18bfe716 	blt	r3,r2,201080c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2010870:	e0fffd17 	ldw	r3,-12(fp)
 2010874:	008003f4 	movhi	r2,15
 2010878:	10909004 	addi	r2,r2,16960
 201087c:	1885383a 	mul	r2,r3,r2
 2010880:	01017db4 	movhi	r4,1526
 2010884:	21384004 	addi	r4,r4,-7936
 2010888:	100b883a 	mov	r5,r2
 201088c:	200e2b80 	call	200e2b8 <__udivsi3>
 2010890:	1007883a 	mov	r3,r2
 2010894:	e0bfff17 	ldw	r2,-4(fp)
 2010898:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201089c:	10bfffc4 	addi	r2,r2,-1
 20108a0:	103ffe1e 	bne	r2,zero,201089c <alt_busy_sleep+0xfc>
 20108a4:	00000d06 	br	20108dc <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 20108a8:	e0fffd17 	ldw	r3,-12(fp)
 20108ac:	008003f4 	movhi	r2,15
 20108b0:	10909004 	addi	r2,r2,16960
 20108b4:	1885383a 	mul	r2,r3,r2
 20108b8:	01017db4 	movhi	r4,1526
 20108bc:	21384004 	addi	r4,r4,-7936
 20108c0:	100b883a 	mov	r5,r2
 20108c4:	200e2b80 	call	200e2b8 <__udivsi3>
 20108c8:	1007883a 	mov	r3,r2
 20108cc:	e0bfff17 	ldw	r2,-4(fp)
 20108d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 20108d4:	10bfffc4 	addi	r2,r2,-1
 20108d8:	00bffe16 	blt	zero,r2,20108d4 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 20108dc:	0005883a 	mov	r2,zero
}
 20108e0:	e037883a 	mov	sp,fp
 20108e4:	dfc00117 	ldw	ra,4(sp)
 20108e8:	df000017 	ldw	fp,0(sp)
 20108ec:	dec00204 	addi	sp,sp,8
 20108f0:	f800283a 	ret

020108f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20108f4:	defffe04 	addi	sp,sp,-8
 20108f8:	dfc00115 	stw	ra,4(sp)
 20108fc:	df000015 	stw	fp,0(sp)
 2010900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010904:	00808074 	movhi	r2,513
 2010908:	108e8104 	addi	r2,r2,14852
 201090c:	10800017 	ldw	r2,0(r2)
 2010910:	10000526 	beq	r2,zero,2010928 <alt_get_errno+0x34>
 2010914:	00808074 	movhi	r2,513
 2010918:	108e8104 	addi	r2,r2,14852
 201091c:	10800017 	ldw	r2,0(r2)
 2010920:	103ee83a 	callr	r2
 2010924:	00000206 	br	2010930 <alt_get_errno+0x3c>
 2010928:	00808074 	movhi	r2,513
 201092c:	108e8e04 	addi	r2,r2,14904
}
 2010930:	e037883a 	mov	sp,fp
 2010934:	dfc00117 	ldw	ra,4(sp)
 2010938:	df000017 	ldw	fp,0(sp)
 201093c:	dec00204 	addi	sp,sp,8
 2010940:	f800283a 	ret

02010944 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2010944:	defffa04 	addi	sp,sp,-24
 2010948:	dfc00515 	stw	ra,20(sp)
 201094c:	df000415 	stw	fp,16(sp)
 2010950:	df000404 	addi	fp,sp,16
 2010954:	e13ffe15 	stw	r4,-8(fp)
 2010958:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201095c:	e0bffe17 	ldw	r2,-8(fp)
 2010960:	10000326 	beq	r2,zero,2010970 <alt_dev_llist_insert+0x2c>
 2010964:	e0bffe17 	ldw	r2,-8(fp)
 2010968:	10800217 	ldw	r2,8(r2)
 201096c:	1000051e 	bne	r2,zero,2010984 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 2010970:	20108f40 	call	20108f4 <alt_get_errno>
 2010974:	00c00584 	movi	r3,22
 2010978:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 201097c:	00bffa84 	movi	r2,-22
 2010980:	00001306 	br	20109d0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2010984:	e0bffe17 	ldw	r2,-8(fp)
 2010988:	e0ffff17 	ldw	r3,-4(fp)
 201098c:	e0fffc15 	stw	r3,-16(fp)
 2010990:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2010994:	e0bffd17 	ldw	r2,-12(fp)
 2010998:	e0fffc17 	ldw	r3,-16(fp)
 201099c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20109a0:	e0bffc17 	ldw	r2,-16(fp)
 20109a4:	10c00017 	ldw	r3,0(r2)
 20109a8:	e0bffd17 	ldw	r2,-12(fp)
 20109ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20109b0:	e0bffc17 	ldw	r2,-16(fp)
 20109b4:	10800017 	ldw	r2,0(r2)
 20109b8:	e0fffd17 	ldw	r3,-12(fp)
 20109bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20109c0:	e0bffc17 	ldw	r2,-16(fp)
 20109c4:	e0fffd17 	ldw	r3,-12(fp)
 20109c8:	10c00015 	stw	r3,0(r2)

  return 0;  
 20109cc:	0005883a 	mov	r2,zero
}
 20109d0:	e037883a 	mov	sp,fp
 20109d4:	dfc00117 	ldw	ra,4(sp)
 20109d8:	df000017 	ldw	fp,0(sp)
 20109dc:	dec00204 	addi	sp,sp,8
 20109e0:	f800283a 	ret

020109e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20109e4:	defffd04 	addi	sp,sp,-12
 20109e8:	dfc00215 	stw	ra,8(sp)
 20109ec:	df000115 	stw	fp,4(sp)
 20109f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20109f4:	00808074 	movhi	r2,513
 20109f8:	1086ec04 	addi	r2,r2,7088
 20109fc:	e0bfff15 	stw	r2,-4(fp)
 2010a00:	00000606 	br	2010a1c <_do_ctors+0x38>
        (*ctor) (); 
 2010a04:	e0bfff17 	ldw	r2,-4(fp)
 2010a08:	10800017 	ldw	r2,0(r2)
 2010a0c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2010a10:	e0bfff17 	ldw	r2,-4(fp)
 2010a14:	10bfff04 	addi	r2,r2,-4
 2010a18:	e0bfff15 	stw	r2,-4(fp)
 2010a1c:	e0ffff17 	ldw	r3,-4(fp)
 2010a20:	00808074 	movhi	r2,513
 2010a24:	1086ed04 	addi	r2,r2,7092
 2010a28:	18bff62e 	bgeu	r3,r2,2010a04 <_do_ctors+0x20>
        (*ctor) (); 
}
 2010a2c:	e037883a 	mov	sp,fp
 2010a30:	dfc00117 	ldw	ra,4(sp)
 2010a34:	df000017 	ldw	fp,0(sp)
 2010a38:	dec00204 	addi	sp,sp,8
 2010a3c:	f800283a 	ret

02010a40 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2010a40:	defffd04 	addi	sp,sp,-12
 2010a44:	dfc00215 	stw	ra,8(sp)
 2010a48:	df000115 	stw	fp,4(sp)
 2010a4c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2010a50:	00808074 	movhi	r2,513
 2010a54:	1086ec04 	addi	r2,r2,7088
 2010a58:	e0bfff15 	stw	r2,-4(fp)
 2010a5c:	00000606 	br	2010a78 <_do_dtors+0x38>
        (*dtor) (); 
 2010a60:	e0bfff17 	ldw	r2,-4(fp)
 2010a64:	10800017 	ldw	r2,0(r2)
 2010a68:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2010a6c:	e0bfff17 	ldw	r2,-4(fp)
 2010a70:	10bfff04 	addi	r2,r2,-4
 2010a74:	e0bfff15 	stw	r2,-4(fp)
 2010a78:	e0ffff17 	ldw	r3,-4(fp)
 2010a7c:	00808074 	movhi	r2,513
 2010a80:	1086ed04 	addi	r2,r2,7092
 2010a84:	18bff62e 	bgeu	r3,r2,2010a60 <_do_dtors+0x20>
        (*dtor) (); 
}
 2010a88:	e037883a 	mov	sp,fp
 2010a8c:	dfc00117 	ldw	ra,4(sp)
 2010a90:	df000017 	ldw	fp,0(sp)
 2010a94:	dec00204 	addi	sp,sp,8
 2010a98:	f800283a 	ret

02010a9c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2010a9c:	defffc04 	addi	sp,sp,-16
 2010aa0:	dfc00315 	stw	ra,12(sp)
 2010aa4:	df000215 	stw	fp,8(sp)
 2010aa8:	df000204 	addi	fp,sp,8
 2010aac:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2010ab0:	e13fff17 	ldw	r4,-4(fp)
 2010ab4:	d1600e04 	addi	r5,gp,-32712
 2010ab8:	20115880 	call	2011588 <alt_find_dev>
 2010abc:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 2010ac0:	e0bffe17 	ldw	r2,-8(fp)
 2010ac4:	10000926 	beq	r2,zero,2010aec <alt_flash_open_dev+0x50>
 2010ac8:	e0bffe17 	ldw	r2,-8(fp)
 2010acc:	10800317 	ldw	r2,12(r2)
 2010ad0:	10000626 	beq	r2,zero,2010aec <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 2010ad4:	e0bffe17 	ldw	r2,-8(fp)
 2010ad8:	10800317 	ldw	r2,12(r2)
 2010adc:	e13ffe17 	ldw	r4,-8(fp)
 2010ae0:	e17fff17 	ldw	r5,-4(fp)
 2010ae4:	103ee83a 	callr	r2
 2010ae8:	00000106 	br	2010af0 <alt_flash_open_dev+0x54>
  }

  return dev;
 2010aec:	e0bffe17 	ldw	r2,-8(fp)
}
 2010af0:	e037883a 	mov	sp,fp
 2010af4:	dfc00117 	ldw	ra,4(sp)
 2010af8:	df000017 	ldw	fp,0(sp)
 2010afc:	dec00204 	addi	sp,sp,8
 2010b00:	f800283a 	ret

02010b04 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2010b04:	defffd04 	addi	sp,sp,-12
 2010b08:	dfc00215 	stw	ra,8(sp)
 2010b0c:	df000115 	stw	fp,4(sp)
 2010b10:	df000104 	addi	fp,sp,4
 2010b14:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2010b18:	e0bfff17 	ldw	r2,-4(fp)
 2010b1c:	10000726 	beq	r2,zero,2010b3c <alt_flash_close_dev+0x38>
 2010b20:	e0bfff17 	ldw	r2,-4(fp)
 2010b24:	10800417 	ldw	r2,16(r2)
 2010b28:	10000426 	beq	r2,zero,2010b3c <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 2010b2c:	e0bfff17 	ldw	r2,-4(fp)
 2010b30:	10800417 	ldw	r2,16(r2)
 2010b34:	e13fff17 	ldw	r4,-4(fp)
 2010b38:	103ee83a 	callr	r2
  }
  return;
 2010b3c:	0001883a 	nop
}
 2010b40:	e037883a 	mov	sp,fp
 2010b44:	dfc00117 	ldw	ra,4(sp)
 2010b48:	df000017 	ldw	fp,0(sp)
 2010b4c:	dec00204 	addi	sp,sp,8
 2010b50:	f800283a 	ret

02010b54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2010b54:	defff904 	addi	sp,sp,-28
 2010b58:	dfc00615 	stw	ra,24(sp)
 2010b5c:	df000515 	stw	fp,20(sp)
 2010b60:	df000504 	addi	fp,sp,20
 2010b64:	e13ffc15 	stw	r4,-16(fp)
 2010b68:	e17ffd15 	stw	r5,-12(fp)
 2010b6c:	e1bffe15 	stw	r6,-8(fp)
 2010b70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2010b74:	e0800217 	ldw	r2,8(fp)
 2010b78:	d8800015 	stw	r2,0(sp)
 2010b7c:	e13ffc17 	ldw	r4,-16(fp)
 2010b80:	e17ffd17 	ldw	r5,-12(fp)
 2010b84:	e1bffe17 	ldw	r6,-8(fp)
 2010b88:	e1ffff17 	ldw	r7,-4(fp)
 2010b8c:	2010d2c0 	call	2010d2c <alt_iic_isr_register>
}  
 2010b90:	e037883a 	mov	sp,fp
 2010b94:	dfc00117 	ldw	ra,4(sp)
 2010b98:	df000017 	ldw	fp,0(sp)
 2010b9c:	dec00204 	addi	sp,sp,8
 2010ba0:	f800283a 	ret

02010ba4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2010ba4:	defff904 	addi	sp,sp,-28
 2010ba8:	df000615 	stw	fp,24(sp)
 2010bac:	df000604 	addi	fp,sp,24
 2010bb0:	e13ffe15 	stw	r4,-8(fp)
 2010bb4:	e17fff15 	stw	r5,-4(fp)
 2010bb8:	e0bfff17 	ldw	r2,-4(fp)
 2010bbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010bc0:	0005303a 	rdctl	r2,status
 2010bc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010bc8:	e0fffb17 	ldw	r3,-20(fp)
 2010bcc:	00bfff84 	movi	r2,-2
 2010bd0:	1884703a 	and	r2,r3,r2
 2010bd4:	1001703a 	wrctl	status,r2
  
  return context;
 2010bd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010bdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2010be0:	e0bffa17 	ldw	r2,-24(fp)
 2010be4:	00c00044 	movi	r3,1
 2010be8:	1884983a 	sll	r2,r3,r2
 2010bec:	1007883a 	mov	r3,r2
 2010bf0:	00808074 	movhi	r2,513
 2010bf4:	108e9204 	addi	r2,r2,14920
 2010bf8:	10800017 	ldw	r2,0(r2)
 2010bfc:	1886b03a 	or	r3,r3,r2
 2010c00:	00808074 	movhi	r2,513
 2010c04:	108e9204 	addi	r2,r2,14920
 2010c08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2010c0c:	00808074 	movhi	r2,513
 2010c10:	108e9204 	addi	r2,r2,14920
 2010c14:	10800017 	ldw	r2,0(r2)
 2010c18:	100170fa 	wrctl	ienable,r2
 2010c1c:	e0bffc17 	ldw	r2,-16(fp)
 2010c20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010c24:	e0bffd17 	ldw	r2,-12(fp)
 2010c28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2010c2c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2010c30:	e037883a 	mov	sp,fp
 2010c34:	df000017 	ldw	fp,0(sp)
 2010c38:	dec00104 	addi	sp,sp,4
 2010c3c:	f800283a 	ret

02010c40 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2010c40:	defff904 	addi	sp,sp,-28
 2010c44:	df000615 	stw	fp,24(sp)
 2010c48:	df000604 	addi	fp,sp,24
 2010c4c:	e13ffe15 	stw	r4,-8(fp)
 2010c50:	e17fff15 	stw	r5,-4(fp)
 2010c54:	e0bfff17 	ldw	r2,-4(fp)
 2010c58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010c5c:	0005303a 	rdctl	r2,status
 2010c60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010c64:	e0fffb17 	ldw	r3,-20(fp)
 2010c68:	00bfff84 	movi	r2,-2
 2010c6c:	1884703a 	and	r2,r3,r2
 2010c70:	1001703a 	wrctl	status,r2
  
  return context;
 2010c74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010c78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2010c7c:	e0bffa17 	ldw	r2,-24(fp)
 2010c80:	00c00044 	movi	r3,1
 2010c84:	1884983a 	sll	r2,r3,r2
 2010c88:	0084303a 	nor	r2,zero,r2
 2010c8c:	1007883a 	mov	r3,r2
 2010c90:	00808074 	movhi	r2,513
 2010c94:	108e9204 	addi	r2,r2,14920
 2010c98:	10800017 	ldw	r2,0(r2)
 2010c9c:	1886703a 	and	r3,r3,r2
 2010ca0:	00808074 	movhi	r2,513
 2010ca4:	108e9204 	addi	r2,r2,14920
 2010ca8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2010cac:	00808074 	movhi	r2,513
 2010cb0:	108e9204 	addi	r2,r2,14920
 2010cb4:	10800017 	ldw	r2,0(r2)
 2010cb8:	100170fa 	wrctl	ienable,r2
 2010cbc:	e0bffc17 	ldw	r2,-16(fp)
 2010cc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010cc4:	e0bffd17 	ldw	r2,-12(fp)
 2010cc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2010ccc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2010cd0:	e037883a 	mov	sp,fp
 2010cd4:	df000017 	ldw	fp,0(sp)
 2010cd8:	dec00104 	addi	sp,sp,4
 2010cdc:	f800283a 	ret

02010ce0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2010ce0:	defffc04 	addi	sp,sp,-16
 2010ce4:	df000315 	stw	fp,12(sp)
 2010ce8:	df000304 	addi	fp,sp,12
 2010cec:	e13ffe15 	stw	r4,-8(fp)
 2010cf0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2010cf4:	000530fa 	rdctl	r2,ienable
 2010cf8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2010cfc:	e0bfff17 	ldw	r2,-4(fp)
 2010d00:	00c00044 	movi	r3,1
 2010d04:	1884983a 	sll	r2,r3,r2
 2010d08:	1007883a 	mov	r3,r2
 2010d0c:	e0bffd17 	ldw	r2,-12(fp)
 2010d10:	1884703a 	and	r2,r3,r2
 2010d14:	1004c03a 	cmpne	r2,r2,zero
 2010d18:	10803fcc 	andi	r2,r2,255
}
 2010d1c:	e037883a 	mov	sp,fp
 2010d20:	df000017 	ldw	fp,0(sp)
 2010d24:	dec00104 	addi	sp,sp,4
 2010d28:	f800283a 	ret

02010d2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2010d2c:	defff504 	addi	sp,sp,-44
 2010d30:	dfc00a15 	stw	ra,40(sp)
 2010d34:	df000915 	stw	fp,36(sp)
 2010d38:	df000904 	addi	fp,sp,36
 2010d3c:	e13ffc15 	stw	r4,-16(fp)
 2010d40:	e17ffd15 	stw	r5,-12(fp)
 2010d44:	e1bffe15 	stw	r6,-8(fp)
 2010d48:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2010d4c:	00bffa84 	movi	r2,-22
 2010d50:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2010d54:	e0bffd17 	ldw	r2,-12(fp)
 2010d58:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2010d5c:	e0bff817 	ldw	r2,-32(fp)
 2010d60:	10800808 	cmpgei	r2,r2,32
 2010d64:	1000271e 	bne	r2,zero,2010e04 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010d68:	0005303a 	rdctl	r2,status
 2010d6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010d70:	e0fffa17 	ldw	r3,-24(fp)
 2010d74:	00bfff84 	movi	r2,-2
 2010d78:	1884703a 	and	r2,r3,r2
 2010d7c:	1001703a 	wrctl	status,r2
  
  return context;
 2010d80:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2010d84:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 2010d88:	00c08074 	movhi	r3,513
 2010d8c:	18cea604 	addi	r3,r3,15000
 2010d90:	e0bff817 	ldw	r2,-32(fp)
 2010d94:	100490fa 	slli	r2,r2,3
 2010d98:	1885883a 	add	r2,r3,r2
 2010d9c:	e0fffe17 	ldw	r3,-8(fp)
 2010da0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2010da4:	00c08074 	movhi	r3,513
 2010da8:	18cea604 	addi	r3,r3,15000
 2010dac:	e0bff817 	ldw	r2,-32(fp)
 2010db0:	100490fa 	slli	r2,r2,3
 2010db4:	1885883a 	add	r2,r3,r2
 2010db8:	10800104 	addi	r2,r2,4
 2010dbc:	e0ffff17 	ldw	r3,-4(fp)
 2010dc0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2010dc4:	e0bffe17 	ldw	r2,-8(fp)
 2010dc8:	10000526 	beq	r2,zero,2010de0 <alt_iic_isr_register+0xb4>
 2010dcc:	e0bff817 	ldw	r2,-32(fp)
 2010dd0:	e13ffc17 	ldw	r4,-16(fp)
 2010dd4:	100b883a 	mov	r5,r2
 2010dd8:	2010ba40 	call	2010ba4 <alt_ic_irq_enable>
 2010ddc:	00000406 	br	2010df0 <alt_iic_isr_register+0xc4>
 2010de0:	e0bff817 	ldw	r2,-32(fp)
 2010de4:	e13ffc17 	ldw	r4,-16(fp)
 2010de8:	100b883a 	mov	r5,r2
 2010dec:	2010c400 	call	2010c40 <alt_ic_irq_disable>
 2010df0:	e0bff715 	stw	r2,-36(fp)
 2010df4:	e0bff917 	ldw	r2,-28(fp)
 2010df8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010dfc:	e0bffb17 	ldw	r2,-20(fp)
 2010e00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2010e04:	e0bff717 	ldw	r2,-36(fp)
}
 2010e08:	e037883a 	mov	sp,fp
 2010e0c:	dfc00117 	ldw	ra,4(sp)
 2010e10:	df000017 	ldw	fp,0(sp)
 2010e14:	dec00204 	addi	sp,sp,8
 2010e18:	f800283a 	ret

02010e1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2010e1c:	defff904 	addi	sp,sp,-28
 2010e20:	dfc00615 	stw	ra,24(sp)
 2010e24:	df000515 	stw	fp,20(sp)
 2010e28:	df000504 	addi	fp,sp,20
 2010e2c:	e13ffc15 	stw	r4,-16(fp)
 2010e30:	e17ffd15 	stw	r5,-12(fp)
 2010e34:	e1bffe15 	stw	r6,-8(fp)
 2010e38:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2010e3c:	e13ffd17 	ldw	r4,-12(fp)
 2010e40:	e17ffe17 	ldw	r5,-8(fp)
 2010e44:	e1bfff17 	ldw	r6,-4(fp)
 2010e48:	20110700 	call	2011070 <open>
 2010e4c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2010e50:	e0bffb17 	ldw	r2,-20(fp)
 2010e54:	10001c16 	blt	r2,zero,2010ec8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2010e58:	00c08074 	movhi	r3,513
 2010e5c:	18c9cb04 	addi	r3,r3,10028
 2010e60:	e0bffb17 	ldw	r2,-20(fp)
 2010e64:	10800324 	muli	r2,r2,12
 2010e68:	1885883a 	add	r2,r3,r2
 2010e6c:	10c00017 	ldw	r3,0(r2)
 2010e70:	e0bffc17 	ldw	r2,-16(fp)
 2010e74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2010e78:	00c08074 	movhi	r3,513
 2010e7c:	18c9cb04 	addi	r3,r3,10028
 2010e80:	e0bffb17 	ldw	r2,-20(fp)
 2010e84:	10800324 	muli	r2,r2,12
 2010e88:	1885883a 	add	r2,r3,r2
 2010e8c:	10800104 	addi	r2,r2,4
 2010e90:	10c00017 	ldw	r3,0(r2)
 2010e94:	e0bffc17 	ldw	r2,-16(fp)
 2010e98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2010e9c:	00c08074 	movhi	r3,513
 2010ea0:	18c9cb04 	addi	r3,r3,10028
 2010ea4:	e0bffb17 	ldw	r2,-20(fp)
 2010ea8:	10800324 	muli	r2,r2,12
 2010eac:	1885883a 	add	r2,r3,r2
 2010eb0:	10800204 	addi	r2,r2,8
 2010eb4:	10c00017 	ldw	r3,0(r2)
 2010eb8:	e0bffc17 	ldw	r2,-16(fp)
 2010ebc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2010ec0:	e13ffb17 	ldw	r4,-20(fp)
 2010ec4:	200e9100 	call	200e910 <alt_release_fd>
  }
} 
 2010ec8:	e037883a 	mov	sp,fp
 2010ecc:	dfc00117 	ldw	ra,4(sp)
 2010ed0:	df000017 	ldw	fp,0(sp)
 2010ed4:	dec00204 	addi	sp,sp,8
 2010ed8:	f800283a 	ret

02010edc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2010edc:	defffb04 	addi	sp,sp,-20
 2010ee0:	dfc00415 	stw	ra,16(sp)
 2010ee4:	df000315 	stw	fp,12(sp)
 2010ee8:	df000304 	addi	fp,sp,12
 2010eec:	e13ffd15 	stw	r4,-12(fp)
 2010ef0:	e17ffe15 	stw	r5,-8(fp)
 2010ef4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2010ef8:	01008074 	movhi	r4,513
 2010efc:	2109ce04 	addi	r4,r4,10040
 2010f00:	e17ffd17 	ldw	r5,-12(fp)
 2010f04:	01800044 	movi	r6,1
 2010f08:	01c07fc4 	movi	r7,511
 2010f0c:	2010e1c0 	call	2010e1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2010f10:	01008074 	movhi	r4,513
 2010f14:	2109cb04 	addi	r4,r4,10028
 2010f18:	e17ffe17 	ldw	r5,-8(fp)
 2010f1c:	000d883a 	mov	r6,zero
 2010f20:	01c07fc4 	movi	r7,511
 2010f24:	2010e1c0 	call	2010e1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2010f28:	01008074 	movhi	r4,513
 2010f2c:	2109d104 	addi	r4,r4,10052
 2010f30:	e17fff17 	ldw	r5,-4(fp)
 2010f34:	01800044 	movi	r6,1
 2010f38:	01c07fc4 	movi	r7,511
 2010f3c:	2010e1c0 	call	2010e1c <alt_open_fd>
}  
 2010f40:	e037883a 	mov	sp,fp
 2010f44:	dfc00117 	ldw	ra,4(sp)
 2010f48:	df000017 	ldw	fp,0(sp)
 2010f4c:	dec00204 	addi	sp,sp,8
 2010f50:	f800283a 	ret

02010f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010f54:	defffe04 	addi	sp,sp,-8
 2010f58:	dfc00115 	stw	ra,4(sp)
 2010f5c:	df000015 	stw	fp,0(sp)
 2010f60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010f64:	00808074 	movhi	r2,513
 2010f68:	108e8104 	addi	r2,r2,14852
 2010f6c:	10800017 	ldw	r2,0(r2)
 2010f70:	10000526 	beq	r2,zero,2010f88 <alt_get_errno+0x34>
 2010f74:	00808074 	movhi	r2,513
 2010f78:	108e8104 	addi	r2,r2,14852
 2010f7c:	10800017 	ldw	r2,0(r2)
 2010f80:	103ee83a 	callr	r2
 2010f84:	00000206 	br	2010f90 <alt_get_errno+0x3c>
 2010f88:	00808074 	movhi	r2,513
 2010f8c:	108e8e04 	addi	r2,r2,14904
}
 2010f90:	e037883a 	mov	sp,fp
 2010f94:	dfc00117 	ldw	ra,4(sp)
 2010f98:	df000017 	ldw	fp,0(sp)
 2010f9c:	dec00204 	addi	sp,sp,8
 2010fa0:	f800283a 	ret

02010fa4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2010fa4:	defffd04 	addi	sp,sp,-12
 2010fa8:	df000215 	stw	fp,8(sp)
 2010fac:	df000204 	addi	fp,sp,8
 2010fb0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2010fb4:	e0bfff17 	ldw	r2,-4(fp)
 2010fb8:	10800217 	ldw	r2,8(r2)
 2010fbc:	10d00034 	orhi	r3,r2,16384
 2010fc0:	e0bfff17 	ldw	r2,-4(fp)
 2010fc4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2010fc8:	e03ffe15 	stw	zero,-8(fp)
 2010fcc:	00001d06 	br	2011044 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2010fd0:	00c08074 	movhi	r3,513
 2010fd4:	18c9cb04 	addi	r3,r3,10028
 2010fd8:	e0bffe17 	ldw	r2,-8(fp)
 2010fdc:	10800324 	muli	r2,r2,12
 2010fe0:	1885883a 	add	r2,r3,r2
 2010fe4:	10c00017 	ldw	r3,0(r2)
 2010fe8:	e0bfff17 	ldw	r2,-4(fp)
 2010fec:	10800017 	ldw	r2,0(r2)
 2010ff0:	1880111e 	bne	r3,r2,2011038 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2010ff4:	00c08074 	movhi	r3,513
 2010ff8:	18c9cb04 	addi	r3,r3,10028
 2010ffc:	e0bffe17 	ldw	r2,-8(fp)
 2011000:	10800324 	muli	r2,r2,12
 2011004:	1885883a 	add	r2,r3,r2
 2011008:	10800204 	addi	r2,r2,8
 201100c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2011010:	1000090e 	bge	r2,zero,2011038 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2011014:	e0bffe17 	ldw	r2,-8(fp)
 2011018:	10c00324 	muli	r3,r2,12
 201101c:	00808074 	movhi	r2,513
 2011020:	1089cb04 	addi	r2,r2,10028
 2011024:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2011028:	e0bfff17 	ldw	r2,-4(fp)
 201102c:	18800226 	beq	r3,r2,2011038 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2011030:	00bffcc4 	movi	r2,-13
 2011034:	00000a06 	br	2011060 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2011038:	e0bffe17 	ldw	r2,-8(fp)
 201103c:	10800044 	addi	r2,r2,1
 2011040:	e0bffe15 	stw	r2,-8(fp)
 2011044:	00808074 	movhi	r2,513
 2011048:	108e8004 	addi	r2,r2,14848
 201104c:	10800017 	ldw	r2,0(r2)
 2011050:	1007883a 	mov	r3,r2
 2011054:	e0bffe17 	ldw	r2,-8(fp)
 2011058:	18bfdd2e 	bgeu	r3,r2,2010fd0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201105c:	0005883a 	mov	r2,zero
}
 2011060:	e037883a 	mov	sp,fp
 2011064:	df000017 	ldw	fp,0(sp)
 2011068:	dec00104 	addi	sp,sp,4
 201106c:	f800283a 	ret

02011070 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2011070:	defff604 	addi	sp,sp,-40
 2011074:	dfc00915 	stw	ra,36(sp)
 2011078:	df000815 	stw	fp,32(sp)
 201107c:	df000804 	addi	fp,sp,32
 2011080:	e13ffd15 	stw	r4,-12(fp)
 2011084:	e17ffe15 	stw	r5,-8(fp)
 2011088:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201108c:	00bfffc4 	movi	r2,-1
 2011090:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2011094:	00bffb44 	movi	r2,-19
 2011098:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201109c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 20110a0:	e13ffd17 	ldw	r4,-12(fp)
 20110a4:	01408074 	movhi	r5,513
 20110a8:	294e7e04 	addi	r5,r5,14840
 20110ac:	20115880 	call	2011588 <alt_find_dev>
 20110b0:	e0bff815 	stw	r2,-32(fp)
 20110b4:	e0bff817 	ldw	r2,-32(fp)
 20110b8:	1000051e 	bne	r2,zero,20110d0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 20110bc:	e13ffd17 	ldw	r4,-12(fp)
 20110c0:	20116180 	call	2011618 <alt_find_file>
 20110c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 20110c8:	00800044 	movi	r2,1
 20110cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 20110d0:	e0bff817 	ldw	r2,-32(fp)
 20110d4:	10002926 	beq	r2,zero,201117c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 20110d8:	e13ff817 	ldw	r4,-32(fp)
 20110dc:	201172c0 	call	201172c <alt_get_fd>
 20110e0:	e0bff915 	stw	r2,-28(fp)
 20110e4:	e0bff917 	ldw	r2,-28(fp)
 20110e8:	1000030e 	bge	r2,zero,20110f8 <open+0x88>
    {
      status = index;
 20110ec:	e0bff917 	ldw	r2,-28(fp)
 20110f0:	e0bffa15 	stw	r2,-24(fp)
 20110f4:	00002306 	br	2011184 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 20110f8:	e0bff917 	ldw	r2,-28(fp)
 20110fc:	10c00324 	muli	r3,r2,12
 2011100:	00808074 	movhi	r2,513
 2011104:	1089cb04 	addi	r2,r2,10028
 2011108:	1885883a 	add	r2,r3,r2
 201110c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2011110:	e0fffe17 	ldw	r3,-8(fp)
 2011114:	00900034 	movhi	r2,16384
 2011118:	10bfffc4 	addi	r2,r2,-1
 201111c:	1886703a 	and	r3,r3,r2
 2011120:	e0bffc17 	ldw	r2,-16(fp)
 2011124:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2011128:	e0bffb17 	ldw	r2,-20(fp)
 201112c:	1000051e 	bne	r2,zero,2011144 <open+0xd4>
 2011130:	e13ffc17 	ldw	r4,-16(fp)
 2011134:	2010fa40 	call	2010fa4 <alt_file_locked>
 2011138:	e0bffa15 	stw	r2,-24(fp)
 201113c:	e0bffa17 	ldw	r2,-24(fp)
 2011140:	10001016 	blt	r2,zero,2011184 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2011144:	e0bff817 	ldw	r2,-32(fp)
 2011148:	10800317 	ldw	r2,12(r2)
 201114c:	10000826 	beq	r2,zero,2011170 <open+0x100>
 2011150:	e0bff817 	ldw	r2,-32(fp)
 2011154:	10800317 	ldw	r2,12(r2)
 2011158:	e13ffc17 	ldw	r4,-16(fp)
 201115c:	e17ffd17 	ldw	r5,-12(fp)
 2011160:	e1bffe17 	ldw	r6,-8(fp)
 2011164:	e1ffff17 	ldw	r7,-4(fp)
 2011168:	103ee83a 	callr	r2
 201116c:	00000106 	br	2011174 <open+0x104>
 2011170:	0005883a 	mov	r2,zero
 2011174:	e0bffa15 	stw	r2,-24(fp)
 2011178:	00000206 	br	2011184 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201117c:	00bffb44 	movi	r2,-19
 2011180:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2011184:	e0bffa17 	ldw	r2,-24(fp)
 2011188:	1000080e 	bge	r2,zero,20111ac <open+0x13c>
  {
    alt_release_fd (index);  
 201118c:	e13ff917 	ldw	r4,-28(fp)
 2011190:	200e9100 	call	200e910 <alt_release_fd>
    ALT_ERRNO = -status;
 2011194:	2010f540 	call	2010f54 <alt_get_errno>
 2011198:	e0fffa17 	ldw	r3,-24(fp)
 201119c:	00c7c83a 	sub	r3,zero,r3
 20111a0:	10c00015 	stw	r3,0(r2)
    return -1;
 20111a4:	00bfffc4 	movi	r2,-1
 20111a8:	00000106 	br	20111b0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 20111ac:	e0bff917 	ldw	r2,-28(fp)
}
 20111b0:	e037883a 	mov	sp,fp
 20111b4:	dfc00117 	ldw	ra,4(sp)
 20111b8:	df000017 	ldw	fp,0(sp)
 20111bc:	dec00204 	addi	sp,sp,8
 20111c0:	f800283a 	ret

020111c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20111c4:	defffa04 	addi	sp,sp,-24
 20111c8:	df000515 	stw	fp,20(sp)
 20111cc:	df000504 	addi	fp,sp,20
 20111d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20111d4:	0005303a 	rdctl	r2,status
 20111d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20111dc:	e0fffc17 	ldw	r3,-16(fp)
 20111e0:	00bfff84 	movi	r2,-2
 20111e4:	1884703a 	and	r2,r3,r2
 20111e8:	1001703a 	wrctl	status,r2
  
  return context;
 20111ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 20111f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 20111f4:	e0bfff17 	ldw	r2,-4(fp)
 20111f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 20111fc:	e0bffd17 	ldw	r2,-12(fp)
 2011200:	10800017 	ldw	r2,0(r2)
 2011204:	e0fffd17 	ldw	r3,-12(fp)
 2011208:	18c00117 	ldw	r3,4(r3)
 201120c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2011210:	e0bffd17 	ldw	r2,-12(fp)
 2011214:	10800117 	ldw	r2,4(r2)
 2011218:	e0fffd17 	ldw	r3,-12(fp)
 201121c:	18c00017 	ldw	r3,0(r3)
 2011220:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2011224:	e0bffd17 	ldw	r2,-12(fp)
 2011228:	e0fffd17 	ldw	r3,-12(fp)
 201122c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2011230:	e0bffd17 	ldw	r2,-12(fp)
 2011234:	e0fffd17 	ldw	r3,-12(fp)
 2011238:	10c00015 	stw	r3,0(r2)
 201123c:	e0bffb17 	ldw	r2,-20(fp)
 2011240:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011244:	e0bffe17 	ldw	r2,-8(fp)
 2011248:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201124c:	e037883a 	mov	sp,fp
 2011250:	df000017 	ldw	fp,0(sp)
 2011254:	dec00104 	addi	sp,sp,4
 2011258:	f800283a 	ret

0201125c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201125c:	defffb04 	addi	sp,sp,-20
 2011260:	dfc00415 	stw	ra,16(sp)
 2011264:	df000315 	stw	fp,12(sp)
 2011268:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201126c:	d0a01117 	ldw	r2,-32700(gp)
 2011270:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2011274:	d0a01f17 	ldw	r2,-32644(gp)
 2011278:	10800044 	addi	r2,r2,1
 201127c:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2011280:	00002e06 	br	201133c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2011284:	e0bffd17 	ldw	r2,-12(fp)
 2011288:	10800017 	ldw	r2,0(r2)
 201128c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2011290:	e0bffd17 	ldw	r2,-12(fp)
 2011294:	10800403 	ldbu	r2,16(r2)
 2011298:	10803fcc 	andi	r2,r2,255
 201129c:	10000426 	beq	r2,zero,20112b0 <alt_tick+0x54>
 20112a0:	d0a01f17 	ldw	r2,-32644(gp)
 20112a4:	1000021e 	bne	r2,zero,20112b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 20112a8:	e0bffd17 	ldw	r2,-12(fp)
 20112ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20112b0:	e0bffd17 	ldw	r2,-12(fp)
 20112b4:	10800217 	ldw	r2,8(r2)
 20112b8:	d0e01f17 	ldw	r3,-32644(gp)
 20112bc:	18801d36 	bltu	r3,r2,2011334 <alt_tick+0xd8>
 20112c0:	e0bffd17 	ldw	r2,-12(fp)
 20112c4:	10800403 	ldbu	r2,16(r2)
 20112c8:	10803fcc 	andi	r2,r2,255
 20112cc:	1000191e 	bne	r2,zero,2011334 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 20112d0:	e0bffd17 	ldw	r2,-12(fp)
 20112d4:	10c00317 	ldw	r3,12(r2)
 20112d8:	e0bffd17 	ldw	r2,-12(fp)
 20112dc:	10800517 	ldw	r2,20(r2)
 20112e0:	1009883a 	mov	r4,r2
 20112e4:	183ee83a 	callr	r3
 20112e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20112ec:	e0bfff17 	ldw	r2,-4(fp)
 20112f0:	1000031e 	bne	r2,zero,2011300 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 20112f4:	e13ffd17 	ldw	r4,-12(fp)
 20112f8:	20111c40 	call	20111c4 <alt_alarm_stop>
 20112fc:	00000d06 	br	2011334 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2011300:	e0bffd17 	ldw	r2,-12(fp)
 2011304:	10c00217 	ldw	r3,8(r2)
 2011308:	e0bfff17 	ldw	r2,-4(fp)
 201130c:	1887883a 	add	r3,r3,r2
 2011310:	e0bffd17 	ldw	r2,-12(fp)
 2011314:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2011318:	e0bffd17 	ldw	r2,-12(fp)
 201131c:	10c00217 	ldw	r3,8(r2)
 2011320:	d0a01f17 	ldw	r2,-32644(gp)
 2011324:	1880032e 	bgeu	r3,r2,2011334 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2011328:	e0bffd17 	ldw	r2,-12(fp)
 201132c:	00c00044 	movi	r3,1
 2011330:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2011334:	e0bffe17 	ldw	r2,-8(fp)
 2011338:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201133c:	e0fffd17 	ldw	r3,-12(fp)
 2011340:	d0a01104 	addi	r2,gp,-32700
 2011344:	18bfcf1e 	bne	r3,r2,2011284 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2011348:	0001883a 	nop
}
 201134c:	e037883a 	mov	sp,fp
 2011350:	dfc00117 	ldw	ra,4(sp)
 2011354:	df000017 	ldw	fp,0(sp)
 2011358:	dec00204 	addi	sp,sp,8
 201135c:	f800283a 	ret

02011360 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2011360:	deffff04 	addi	sp,sp,-4
 2011364:	df000015 	stw	fp,0(sp)
 2011368:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201136c:	000170fa 	wrctl	ienable,zero
}
 2011370:	e037883a 	mov	sp,fp
 2011374:	df000017 	ldw	fp,0(sp)
 2011378:	dec00104 	addi	sp,sp,4
 201137c:	f800283a 	ret

02011380 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2011380:	defff404 	addi	sp,sp,-48
 2011384:	df000b15 	stw	fp,44(sp)
 2011388:	df000b04 	addi	fp,sp,44
 201138c:	e13ffc15 	stw	r4,-16(fp)
 2011390:	e17ffd15 	stw	r5,-12(fp)
 2011394:	e1bffe15 	stw	r6,-8(fp)
 2011398:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 201139c:	e0ffff17 	ldw	r3,-4(fp)
 20113a0:	e0bffe17 	ldw	r2,-8(fp)
 20113a4:	1885883a 	add	r2,r3,r2
 20113a8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 20113ac:	e0c00217 	ldw	r3,8(fp)
 20113b0:	e0800117 	ldw	r2,4(fp)
 20113b4:	1885883a 	add	r2,r3,r2
 20113b8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 20113bc:	e0800117 	ldw	r2,4(fp)
 20113c0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 20113c4:	e0bffe17 	ldw	r2,-8(fp)
 20113c8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 20113cc:	00800044 	movi	r2,1
 20113d0:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 20113d4:	e0bffc17 	ldw	r2,-16(fp)
 20113d8:	10800504 	addi	r2,r2,20
 20113dc:	e0fffd17 	ldw	r3,-12(fp)
 20113e0:	01000044 	movi	r4,1
 20113e4:	20c6983a 	sll	r3,r4,r3
 20113e8:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 20113ec:	e0800317 	ldw	r2,12(fp)
 20113f0:	1080008c 	andi	r2,r2,2
 20113f4:	1000041e 	bne	r2,zero,2011408 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 20113f8:	e0bffc17 	ldw	r2,-16(fp)
 20113fc:	10800304 	addi	r2,r2,12
 2011400:	00c10004 	movi	r3,1024
 2011404:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2011408:	e0bffc17 	ldw	r2,-16(fp)
 201140c:	10800037 	ldwio	r2,0(r2)
 2011410:	00000106 	br	2011418 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 2011414:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2011418:	e0bffc17 	ldw	r2,-16(fp)
 201141c:	10800204 	addi	r2,r2,8
 2011420:	10800037 	ldwio	r2,0(r2)
 2011424:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2011428:	e0bffa17 	ldw	r2,-24(fp)
 201142c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2011430:	10000226 	beq	r2,zero,201143c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2011434:	e0bff717 	ldw	r2,-36(fp)
 2011438:	1000031e 	bne	r2,zero,2011448 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 201143c:	e0bffa17 	ldw	r2,-24(fp)
 2011440:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2011444:	103ff426 	beq	r2,zero,2011418 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2011448:	e0bffa17 	ldw	r2,-24(fp)
 201144c:	1080100c 	andi	r2,r2,64
 2011450:	10001e26 	beq	r2,zero,20114cc <alt_avalon_spi_command+0x14c>
 2011454:	e0bff717 	ldw	r2,-36(fp)
 2011458:	00801c0e 	bge	zero,r2,20114cc <alt_avalon_spi_command+0x14c>
    {
      credits--;
 201145c:	e0bff717 	ldw	r2,-36(fp)
 2011460:	10bfffc4 	addi	r2,r2,-1
 2011464:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 2011468:	e0ffff17 	ldw	r3,-4(fp)
 201146c:	e0bff817 	ldw	r2,-32(fp)
 2011470:	18800a2e 	bgeu	r3,r2,201149c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2011474:	e0bffc17 	ldw	r2,-16(fp)
 2011478:	10800104 	addi	r2,r2,4
 201147c:	e0ffff17 	ldw	r3,-4(fp)
 2011480:	18c00003 	ldbu	r3,0(r3)
 2011484:	18c03fcc 	andi	r3,r3,255
 2011488:	e13fff17 	ldw	r4,-4(fp)
 201148c:	21000044 	addi	r4,r4,1
 2011490:	e13fff15 	stw	r4,-4(fp)
 2011494:	10c00035 	stwio	r3,0(r2)
 2011498:	00000c06 	br	20114cc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 201149c:	e0bff517 	ldw	r2,-44(fp)
 20114a0:	10000826 	beq	r2,zero,20114c4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 20114a4:	e0bff517 	ldw	r2,-44(fp)
 20114a8:	10bfffc4 	addi	r2,r2,-1
 20114ac:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 20114b0:	e0bffc17 	ldw	r2,-16(fp)
 20114b4:	10800104 	addi	r2,r2,4
 20114b8:	0007883a 	mov	r3,zero
 20114bc:	10c00035 	stwio	r3,0(r2)
 20114c0:	00000206 	br	20114cc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 20114c4:	00bf0004 	movi	r2,-1024
 20114c8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 20114cc:	e0bffa17 	ldw	r2,-24(fp)
 20114d0:	1080200c 	andi	r2,r2,128
 20114d4:	103fcf26 	beq	r2,zero,2011414 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 20114d8:	e0bffc17 	ldw	r2,-16(fp)
 20114dc:	10800037 	ldwio	r2,0(r2)
 20114e0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 20114e4:	e0bff617 	ldw	r2,-40(fp)
 20114e8:	10000426 	beq	r2,zero,20114fc <alt_avalon_spi_command+0x17c>
        read_ignore--;
 20114ec:	e0bff617 	ldw	r2,-40(fp)
 20114f0:	10bfffc4 	addi	r2,r2,-1
 20114f4:	e0bff615 	stw	r2,-40(fp)
 20114f8:	00000706 	br	2011518 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 20114fc:	e0bffb17 	ldw	r2,-20(fp)
 2011500:	1007883a 	mov	r3,r2
 2011504:	e0800217 	ldw	r2,8(fp)
 2011508:	10c00005 	stb	r3,0(r2)
 201150c:	e0800217 	ldw	r2,8(fp)
 2011510:	10800044 	addi	r2,r2,1
 2011514:	e0800215 	stw	r2,8(fp)
      credits++;
 2011518:	e0bff717 	ldw	r2,-36(fp)
 201151c:	10800044 	addi	r2,r2,1
 2011520:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2011524:	e0bff617 	ldw	r2,-40(fp)
 2011528:	103fba1e 	bne	r2,zero,2011414 <alt_avalon_spi_command+0x94>
 201152c:	e0c00217 	ldw	r3,8(fp)
 2011530:	e0bff917 	ldw	r2,-28(fp)
 2011534:	18bfb71e 	bne	r3,r2,2011414 <alt_avalon_spi_command+0x94>
        break;
 2011538:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201153c:	e0bffc17 	ldw	r2,-16(fp)
 2011540:	10800204 	addi	r2,r2,8
 2011544:	10800037 	ldwio	r2,0(r2)
 2011548:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 201154c:	e0bffa17 	ldw	r2,-24(fp)
 2011550:	1080080c 	andi	r2,r2,32
 2011554:	103ff926 	beq	r2,zero,201153c <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2011558:	e0800317 	ldw	r2,12(fp)
 201155c:	1080004c 	andi	r2,r2,1
 2011560:	1000041e 	bne	r2,zero,2011574 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2011564:	e0bffc17 	ldw	r2,-16(fp)
 2011568:	10800304 	addi	r2,r2,12
 201156c:	0007883a 	mov	r3,zero
 2011570:	10c00035 	stwio	r3,0(r2)

  return read_length;
 2011574:	e0800117 	ldw	r2,4(fp)
}
 2011578:	e037883a 	mov	sp,fp
 201157c:	df000017 	ldw	fp,0(sp)
 2011580:	dec00104 	addi	sp,sp,4
 2011584:	f800283a 	ret

02011588 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2011588:	defffa04 	addi	sp,sp,-24
 201158c:	dfc00515 	stw	ra,20(sp)
 2011590:	df000415 	stw	fp,16(sp)
 2011594:	df000404 	addi	fp,sp,16
 2011598:	e13ffe15 	stw	r4,-8(fp)
 201159c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20115a0:	e0bfff17 	ldw	r2,-4(fp)
 20115a4:	10800017 	ldw	r2,0(r2)
 20115a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20115ac:	e13ffe17 	ldw	r4,-8(fp)
 20115b0:	200ccf00 	call	200ccf0 <strlen>
 20115b4:	10800044 	addi	r2,r2,1
 20115b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20115bc:	00000d06 	br	20115f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 20115c0:	e0bffc17 	ldw	r2,-16(fp)
 20115c4:	10c00217 	ldw	r3,8(r2)
 20115c8:	e0bffd17 	ldw	r2,-12(fp)
 20115cc:	1809883a 	mov	r4,r3
 20115d0:	e17ffe17 	ldw	r5,-8(fp)
 20115d4:	100d883a 	mov	r6,r2
 20115d8:	201182c0 	call	201182c <memcmp>
 20115dc:	1000021e 	bne	r2,zero,20115e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20115e0:	e0bffc17 	ldw	r2,-16(fp)
 20115e4:	00000706 	br	2011604 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20115e8:	e0bffc17 	ldw	r2,-16(fp)
 20115ec:	10800017 	ldw	r2,0(r2)
 20115f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20115f4:	e0fffc17 	ldw	r3,-16(fp)
 20115f8:	e0bfff17 	ldw	r2,-4(fp)
 20115fc:	18bff01e 	bne	r3,r2,20115c0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2011600:	0005883a 	mov	r2,zero
}
 2011604:	e037883a 	mov	sp,fp
 2011608:	dfc00117 	ldw	ra,4(sp)
 201160c:	df000017 	ldw	fp,0(sp)
 2011610:	dec00204 	addi	sp,sp,8
 2011614:	f800283a 	ret

02011618 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2011618:	defffb04 	addi	sp,sp,-20
 201161c:	dfc00415 	stw	ra,16(sp)
 2011620:	df000315 	stw	fp,12(sp)
 2011624:	df000304 	addi	fp,sp,12
 2011628:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201162c:	00808074 	movhi	r2,513
 2011630:	108e7c04 	addi	r2,r2,14832
 2011634:	10800017 	ldw	r2,0(r2)
 2011638:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201163c:	00003106 	br	2011704 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 2011640:	e0bffd17 	ldw	r2,-12(fp)
 2011644:	10800217 	ldw	r2,8(r2)
 2011648:	1009883a 	mov	r4,r2
 201164c:	200ccf00 	call	200ccf0 <strlen>
 2011650:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2011654:	e0bffd17 	ldw	r2,-12(fp)
 2011658:	10c00217 	ldw	r3,8(r2)
 201165c:	e0bffe17 	ldw	r2,-8(fp)
 2011660:	10bfffc4 	addi	r2,r2,-1
 2011664:	1885883a 	add	r2,r3,r2
 2011668:	10800003 	ldbu	r2,0(r2)
 201166c:	10803fcc 	andi	r2,r2,255
 2011670:	1080201c 	xori	r2,r2,128
 2011674:	10bfe004 	addi	r2,r2,-128
 2011678:	10800bd8 	cmpnei	r2,r2,47
 201167c:	1000031e 	bne	r2,zero,201168c <alt_find_file+0x74>
    {
      len -= 1;
 2011680:	e0bffe17 	ldw	r2,-8(fp)
 2011684:	10bfffc4 	addi	r2,r2,-1
 2011688:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201168c:	e0bffe17 	ldw	r2,-8(fp)
 2011690:	e0ffff17 	ldw	r3,-4(fp)
 2011694:	1885883a 	add	r2,r3,r2
 2011698:	10800003 	ldbu	r2,0(r2)
 201169c:	10803fcc 	andi	r2,r2,255
 20116a0:	1080201c 	xori	r2,r2,128
 20116a4:	10bfe004 	addi	r2,r2,-128
 20116a8:	10800be0 	cmpeqi	r2,r2,47
 20116ac:	1000081e 	bne	r2,zero,20116d0 <alt_find_file+0xb8>
 20116b0:	e0bffe17 	ldw	r2,-8(fp)
 20116b4:	e0ffff17 	ldw	r3,-4(fp)
 20116b8:	1885883a 	add	r2,r3,r2
 20116bc:	10800003 	ldbu	r2,0(r2)
 20116c0:	10803fcc 	andi	r2,r2,255
 20116c4:	1080201c 	xori	r2,r2,128
 20116c8:	10bfe004 	addi	r2,r2,-128
 20116cc:	10000a1e 	bne	r2,zero,20116f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 20116d0:	e0bffd17 	ldw	r2,-12(fp)
 20116d4:	10c00217 	ldw	r3,8(r2)
 20116d8:	e0bffe17 	ldw	r2,-8(fp)
 20116dc:	1809883a 	mov	r4,r3
 20116e0:	e17fff17 	ldw	r5,-4(fp)
 20116e4:	100d883a 	mov	r6,r2
 20116e8:	201182c0 	call	201182c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20116ec:	1000021e 	bne	r2,zero,20116f8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20116f0:	e0bffd17 	ldw	r2,-12(fp)
 20116f4:	00000806 	br	2011718 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 20116f8:	e0bffd17 	ldw	r2,-12(fp)
 20116fc:	10800017 	ldw	r2,0(r2)
 2011700:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2011704:	e0fffd17 	ldw	r3,-12(fp)
 2011708:	00808074 	movhi	r2,513
 201170c:	108e7c04 	addi	r2,r2,14832
 2011710:	18bfcb1e 	bne	r3,r2,2011640 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2011714:	0005883a 	mov	r2,zero
}
 2011718:	e037883a 	mov	sp,fp
 201171c:	dfc00117 	ldw	ra,4(sp)
 2011720:	df000017 	ldw	fp,0(sp)
 2011724:	dec00204 	addi	sp,sp,8
 2011728:	f800283a 	ret

0201172c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201172c:	defffc04 	addi	sp,sp,-16
 2011730:	df000315 	stw	fp,12(sp)
 2011734:	df000304 	addi	fp,sp,12
 2011738:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201173c:	00bffa04 	movi	r2,-24
 2011740:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2011744:	e03ffd15 	stw	zero,-12(fp)
 2011748:	00001d06 	br	20117c0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 201174c:	00c08074 	movhi	r3,513
 2011750:	18c9cb04 	addi	r3,r3,10028
 2011754:	e0bffd17 	ldw	r2,-12(fp)
 2011758:	10800324 	muli	r2,r2,12
 201175c:	1885883a 	add	r2,r3,r2
 2011760:	10800017 	ldw	r2,0(r2)
 2011764:	1000131e 	bne	r2,zero,20117b4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 2011768:	00c08074 	movhi	r3,513
 201176c:	18c9cb04 	addi	r3,r3,10028
 2011770:	e0bffd17 	ldw	r2,-12(fp)
 2011774:	10800324 	muli	r2,r2,12
 2011778:	1885883a 	add	r2,r3,r2
 201177c:	e0ffff17 	ldw	r3,-4(fp)
 2011780:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2011784:	00808074 	movhi	r2,513
 2011788:	108e8004 	addi	r2,r2,14848
 201178c:	10c00017 	ldw	r3,0(r2)
 2011790:	e0bffd17 	ldw	r2,-12(fp)
 2011794:	1880040e 	bge	r3,r2,20117a8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 2011798:	00808074 	movhi	r2,513
 201179c:	108e8004 	addi	r2,r2,14848
 20117a0:	e0fffd17 	ldw	r3,-12(fp)
 20117a4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 20117a8:	e0bffd17 	ldw	r2,-12(fp)
 20117ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 20117b0:	00000606 	br	20117cc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20117b4:	e0bffd17 	ldw	r2,-12(fp)
 20117b8:	10800044 	addi	r2,r2,1
 20117bc:	e0bffd15 	stw	r2,-12(fp)
 20117c0:	e0bffd17 	ldw	r2,-12(fp)
 20117c4:	10800810 	cmplti	r2,r2,32
 20117c8:	103fe01e 	bne	r2,zero,201174c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20117cc:	e0bffe17 	ldw	r2,-8(fp)
}
 20117d0:	e037883a 	mov	sp,fp
 20117d4:	df000017 	ldw	fp,0(sp)
 20117d8:	dec00104 	addi	sp,sp,4
 20117dc:	f800283a 	ret

020117e0 <atexit>:
 20117e0:	200b883a 	mov	r5,r4
 20117e4:	000d883a 	mov	r6,zero
 20117e8:	0009883a 	mov	r4,zero
 20117ec:	000f883a 	mov	r7,zero
 20117f0:	20118a81 	jmpi	20118a8 <__register_exitproc>

020117f4 <exit>:
 20117f4:	defffe04 	addi	sp,sp,-8
 20117f8:	000b883a 	mov	r5,zero
 20117fc:	dc000015 	stw	r16,0(sp)
 2011800:	dfc00115 	stw	ra,4(sp)
 2011804:	2021883a 	mov	r16,r4
 2011808:	20119d80 	call	20119d8 <__call_exitprocs>
 201180c:	00808074 	movhi	r2,513
 2011810:	108e7704 	addi	r2,r2,14812
 2011814:	11000017 	ldw	r4,0(r2)
 2011818:	20800f17 	ldw	r2,60(r4)
 201181c:	10000126 	beq	r2,zero,2011824 <exit+0x30>
 2011820:	103ee83a 	callr	r2
 2011824:	8009883a 	mov	r4,r16
 2011828:	2011b780 	call	2011b78 <_exit>

0201182c <memcmp>:
 201182c:	01c000c4 	movi	r7,3
 2011830:	3980192e 	bgeu	r7,r6,2011898 <memcmp+0x6c>
 2011834:	2904b03a 	or	r2,r5,r4
 2011838:	11c4703a 	and	r2,r2,r7
 201183c:	10000f26 	beq	r2,zero,201187c <memcmp+0x50>
 2011840:	20c00003 	ldbu	r3,0(r4)
 2011844:	28800003 	ldbu	r2,0(r5)
 2011848:	1880151e 	bne	r3,r2,20118a0 <memcmp+0x74>
 201184c:	31bfff84 	addi	r6,r6,-2
 2011850:	01ffffc4 	movi	r7,-1
 2011854:	00000406 	br	2011868 <memcmp+0x3c>
 2011858:	20c00003 	ldbu	r3,0(r4)
 201185c:	28800003 	ldbu	r2,0(r5)
 2011860:	31bfffc4 	addi	r6,r6,-1
 2011864:	18800e1e 	bne	r3,r2,20118a0 <memcmp+0x74>
 2011868:	21000044 	addi	r4,r4,1
 201186c:	29400044 	addi	r5,r5,1
 2011870:	31fff91e 	bne	r6,r7,2011858 <memcmp+0x2c>
 2011874:	0005883a 	mov	r2,zero
 2011878:	f800283a 	ret
 201187c:	20c00017 	ldw	r3,0(r4)
 2011880:	28800017 	ldw	r2,0(r5)
 2011884:	1880041e 	bne	r3,r2,2011898 <memcmp+0x6c>
 2011888:	31bfff04 	addi	r6,r6,-4
 201188c:	21000104 	addi	r4,r4,4
 2011890:	29400104 	addi	r5,r5,4
 2011894:	39bff936 	bltu	r7,r6,201187c <memcmp+0x50>
 2011898:	303fe91e 	bne	r6,zero,2011840 <memcmp+0x14>
 201189c:	003ff506 	br	2011874 <memcmp+0x48>
 20118a0:	1885c83a 	sub	r2,r3,r2
 20118a4:	f800283a 	ret

020118a8 <__register_exitproc>:
 20118a8:	defffa04 	addi	sp,sp,-24
 20118ac:	00808074 	movhi	r2,513
 20118b0:	108e7704 	addi	r2,r2,14812
 20118b4:	dc000315 	stw	r16,12(sp)
 20118b8:	14000017 	ldw	r16,0(r2)
 20118bc:	dc400415 	stw	r17,16(sp)
 20118c0:	dfc00515 	stw	ra,20(sp)
 20118c4:	80805217 	ldw	r2,328(r16)
 20118c8:	2023883a 	mov	r17,r4
 20118cc:	10003e26 	beq	r2,zero,20119c8 <__register_exitproc+0x120>
 20118d0:	10c00117 	ldw	r3,4(r2)
 20118d4:	020007c4 	movi	r8,31
 20118d8:	40c0180e 	bge	r8,r3,201193c <__register_exitproc+0x94>
 20118dc:	00800034 	movhi	r2,0
 20118e0:	10800004 	addi	r2,r2,0
 20118e4:	1000061e 	bne	r2,zero,2011900 <__register_exitproc+0x58>
 20118e8:	00bfffc4 	movi	r2,-1
 20118ec:	dfc00517 	ldw	ra,20(sp)
 20118f0:	dc400417 	ldw	r17,16(sp)
 20118f4:	dc000317 	ldw	r16,12(sp)
 20118f8:	dec00604 	addi	sp,sp,24
 20118fc:	f800283a 	ret
 2011900:	01006404 	movi	r4,400
 2011904:	d9400015 	stw	r5,0(sp)
 2011908:	d9800115 	stw	r6,4(sp)
 201190c:	d9c00215 	stw	r7,8(sp)
 2011910:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2011914:	d9400017 	ldw	r5,0(sp)
 2011918:	d9800117 	ldw	r6,4(sp)
 201191c:	d9c00217 	ldw	r7,8(sp)
 2011920:	103ff126 	beq	r2,zero,20118e8 <__register_exitproc+0x40>
 2011924:	80c05217 	ldw	r3,328(r16)
 2011928:	10000115 	stw	zero,4(r2)
 201192c:	10c00015 	stw	r3,0(r2)
 2011930:	80805215 	stw	r2,328(r16)
 2011934:	10006215 	stw	zero,392(r2)
 2011938:	10006315 	stw	zero,396(r2)
 201193c:	10c00117 	ldw	r3,4(r2)
 2011940:	88000d1e 	bne	r17,zero,2011978 <__register_exitproc+0xd0>
 2011944:	19000084 	addi	r4,r3,2
 2011948:	2109883a 	add	r4,r4,r4
 201194c:	18c00044 	addi	r3,r3,1
 2011950:	2109883a 	add	r4,r4,r4
 2011954:	1109883a 	add	r4,r2,r4
 2011958:	10c00115 	stw	r3,4(r2)
 201195c:	0005883a 	mov	r2,zero
 2011960:	21400015 	stw	r5,0(r4)
 2011964:	dfc00517 	ldw	ra,20(sp)
 2011968:	dc400417 	ldw	r17,16(sp)
 201196c:	dc000317 	ldw	r16,12(sp)
 2011970:	dec00604 	addi	sp,sp,24
 2011974:	f800283a 	ret
 2011978:	02400044 	movi	r9,1
 201197c:	12806217 	ldw	r10,392(r2)
 2011980:	48d2983a 	sll	r9,r9,r3
 2011984:	19000804 	addi	r4,r3,32
 2011988:	18d1883a 	add	r8,r3,r3
 201198c:	2109883a 	add	r4,r4,r4
 2011990:	4211883a 	add	r8,r8,r8
 2011994:	2109883a 	add	r4,r4,r4
 2011998:	1109883a 	add	r4,r2,r4
 201199c:	1211883a 	add	r8,r2,r8
 20119a0:	5254b03a 	or	r10,r10,r9
 20119a4:	21c02215 	stw	r7,136(r4)
 20119a8:	41802215 	stw	r6,136(r8)
 20119ac:	12806215 	stw	r10,392(r2)
 20119b0:	01000084 	movi	r4,2
 20119b4:	893fe31e 	bne	r17,r4,2011944 <__register_exitproc+0x9c>
 20119b8:	11006317 	ldw	r4,396(r2)
 20119bc:	2252b03a 	or	r9,r4,r9
 20119c0:	12406315 	stw	r9,396(r2)
 20119c4:	003fdf06 	br	2011944 <__register_exitproc+0x9c>
 20119c8:	00808074 	movhi	r2,513
 20119cc:	108ee604 	addi	r2,r2,15256
 20119d0:	80805215 	stw	r2,328(r16)
 20119d4:	003fbe06 	br	20118d0 <__register_exitproc+0x28>

020119d8 <__call_exitprocs>:
 20119d8:	00808074 	movhi	r2,513
 20119dc:	108e7704 	addi	r2,r2,14812
 20119e0:	10800017 	ldw	r2,0(r2)
 20119e4:	defff304 	addi	sp,sp,-52
 20119e8:	df000b15 	stw	fp,44(sp)
 20119ec:	d8800015 	stw	r2,0(sp)
 20119f0:	10805204 	addi	r2,r2,328
 20119f4:	dd400815 	stw	r21,32(sp)
 20119f8:	dfc00c15 	stw	ra,48(sp)
 20119fc:	ddc00a15 	stw	r23,40(sp)
 2011a00:	dd800915 	stw	r22,36(sp)
 2011a04:	dd000715 	stw	r20,28(sp)
 2011a08:	dcc00615 	stw	r19,24(sp)
 2011a0c:	dc800515 	stw	r18,20(sp)
 2011a10:	dc400415 	stw	r17,16(sp)
 2011a14:	dc000315 	stw	r16,12(sp)
 2011a18:	d9000115 	stw	r4,4(sp)
 2011a1c:	2839883a 	mov	fp,r5
 2011a20:	d8800215 	stw	r2,8(sp)
 2011a24:	057fffc4 	movi	r21,-1
 2011a28:	d8800017 	ldw	r2,0(sp)
 2011a2c:	ddc00217 	ldw	r23,8(sp)
 2011a30:	14805217 	ldw	r18,328(r2)
 2011a34:	90001726 	beq	r18,zero,2011a94 <__call_exitprocs+0xbc>
 2011a38:	94400117 	ldw	r17,4(r18)
 2011a3c:	8c3fffc4 	addi	r16,r17,-1
 2011a40:	80001116 	blt	r16,zero,2011a88 <__call_exitprocs+0xb0>
 2011a44:	8c400044 	addi	r17,r17,1
 2011a48:	8427883a 	add	r19,r16,r16
 2011a4c:	8c63883a 	add	r17,r17,r17
 2011a50:	95802204 	addi	r22,r18,136
 2011a54:	9ce7883a 	add	r19,r19,r19
 2011a58:	8c63883a 	add	r17,r17,r17
 2011a5c:	b4e7883a 	add	r19,r22,r19
 2011a60:	9463883a 	add	r17,r18,r17
 2011a64:	e0001726 	beq	fp,zero,2011ac4 <__call_exitprocs+0xec>
 2011a68:	8c87c83a 	sub	r3,r17,r18
 2011a6c:	b0c7883a 	add	r3,r22,r3
 2011a70:	18c01e17 	ldw	r3,120(r3)
 2011a74:	1f001326 	beq	r3,fp,2011ac4 <__call_exitprocs+0xec>
 2011a78:	843fffc4 	addi	r16,r16,-1
 2011a7c:	9cffff04 	addi	r19,r19,-4
 2011a80:	8c7fff04 	addi	r17,r17,-4
 2011a84:	857ff71e 	bne	r16,r21,2011a64 <__call_exitprocs+0x8c>
 2011a88:	00800034 	movhi	r2,0
 2011a8c:	10800004 	addi	r2,r2,0
 2011a90:	10002a1e 	bne	r2,zero,2011b3c <__call_exitprocs+0x164>
 2011a94:	dfc00c17 	ldw	ra,48(sp)
 2011a98:	df000b17 	ldw	fp,44(sp)
 2011a9c:	ddc00a17 	ldw	r23,40(sp)
 2011aa0:	dd800917 	ldw	r22,36(sp)
 2011aa4:	dd400817 	ldw	r21,32(sp)
 2011aa8:	dd000717 	ldw	r20,28(sp)
 2011aac:	dcc00617 	ldw	r19,24(sp)
 2011ab0:	dc800517 	ldw	r18,20(sp)
 2011ab4:	dc400417 	ldw	r17,16(sp)
 2011ab8:	dc000317 	ldw	r16,12(sp)
 2011abc:	dec00d04 	addi	sp,sp,52
 2011ac0:	f800283a 	ret
 2011ac4:	91000117 	ldw	r4,4(r18)
 2011ac8:	88c00017 	ldw	r3,0(r17)
 2011acc:	213fffc4 	addi	r4,r4,-1
 2011ad0:	24001526 	beq	r4,r16,2011b28 <__call_exitprocs+0x150>
 2011ad4:	88000015 	stw	zero,0(r17)
 2011ad8:	183fe726 	beq	r3,zero,2011a78 <__call_exitprocs+0xa0>
 2011adc:	00800044 	movi	r2,1
 2011ae0:	1408983a 	sll	r4,r2,r16
 2011ae4:	91406217 	ldw	r5,392(r18)
 2011ae8:	95000117 	ldw	r20,4(r18)
 2011aec:	214a703a 	and	r5,r4,r5
 2011af0:	28000b26 	beq	r5,zero,2011b20 <__call_exitprocs+0x148>
 2011af4:	91406317 	ldw	r5,396(r18)
 2011af8:	2148703a 	and	r4,r4,r5
 2011afc:	20000c1e 	bne	r4,zero,2011b30 <__call_exitprocs+0x158>
 2011b00:	99400017 	ldw	r5,0(r19)
 2011b04:	d9000117 	ldw	r4,4(sp)
 2011b08:	183ee83a 	callr	r3
 2011b0c:	90c00117 	ldw	r3,4(r18)
 2011b10:	1d3fc51e 	bne	r3,r20,2011a28 <__call_exitprocs+0x50>
 2011b14:	b8c00017 	ldw	r3,0(r23)
 2011b18:	1cbfd726 	beq	r3,r18,2011a78 <__call_exitprocs+0xa0>
 2011b1c:	003fc206 	br	2011a28 <__call_exitprocs+0x50>
 2011b20:	183ee83a 	callr	r3
 2011b24:	003ff906 	br	2011b0c <__call_exitprocs+0x134>
 2011b28:	94000115 	stw	r16,4(r18)
 2011b2c:	003fea06 	br	2011ad8 <__call_exitprocs+0x100>
 2011b30:	99000017 	ldw	r4,0(r19)
 2011b34:	183ee83a 	callr	r3
 2011b38:	003ff406 	br	2011b0c <__call_exitprocs+0x134>
 2011b3c:	90c00117 	ldw	r3,4(r18)
 2011b40:	1800071e 	bne	r3,zero,2011b60 <__call_exitprocs+0x188>
 2011b44:	90c00017 	ldw	r3,0(r18)
 2011b48:	18000926 	beq	r3,zero,2011b70 <__call_exitprocs+0x198>
 2011b4c:	9009883a 	mov	r4,r18
 2011b50:	b8c00015 	stw	r3,0(r23)
 2011b54:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 2011b58:	bc800017 	ldw	r18,0(r23)
 2011b5c:	003fb506 	br	2011a34 <__call_exitprocs+0x5c>
 2011b60:	90c00017 	ldw	r3,0(r18)
 2011b64:	902f883a 	mov	r23,r18
 2011b68:	1825883a 	mov	r18,r3
 2011b6c:	003fb106 	br	2011a34 <__call_exitprocs+0x5c>
 2011b70:	0007883a 	mov	r3,zero
 2011b74:	003ffb06 	br	2011b64 <__call_exitprocs+0x18c>

02011b78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2011b78:	defffc04 	addi	sp,sp,-16
 2011b7c:	df000315 	stw	fp,12(sp)
 2011b80:	df000304 	addi	fp,sp,12
 2011b84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2011b88:	0001883a 	nop
 2011b8c:	e0bfff17 	ldw	r2,-4(fp)
 2011b90:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 2011b94:	e0bffd17 	ldw	r2,-12(fp)
 2011b98:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2011b9c:	e0bffe17 	ldw	r2,-8(fp)
 2011ba0:	10000226 	beq	r2,zero,2011bac <_exit+0x34>
    ALT_SIM_FAIL();
 2011ba4:	002af070 	cmpltui	zero,zero,43969
 2011ba8:	00000106 	br	2011bb0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 2011bac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2011bb0:	003fff06 	br	2011bb0 <_exit+0x38>
