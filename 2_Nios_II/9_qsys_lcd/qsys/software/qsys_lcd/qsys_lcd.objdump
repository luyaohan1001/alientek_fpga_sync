
qsys_lcd.elf:     file format elf32-littlenios2
qsys_lcd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000d4118 memsz 0x000d4420 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012168  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000c02e8  04012320  04012320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  040d2608  040d2608  000d3608  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  040d4138  040d4138  000d5138  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000d5138  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  000d5160  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00024653  00000000  00000000  000d5ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009376  00000000  00000000  000fa54b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000ad1f  00000000  00000000  001038c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d80  00000000  00000000  0010e5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003303  00000000  00000000  00110360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010de3  00000000  00000000  00113663  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00124448  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  00124498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  001283e4  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  001283e7  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  001283ec  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  001283ed  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  001283ee  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  001283f7  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00128400  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000007  00000000  00000000  00128409  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001e  00000000  00000000  00128410  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00056e4d  00000000  00000000  0012842e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
04012320 l    d  .rodata	00000000 .rodata
040d2608 l    d  .rwdata	00000000 .rwdata
040d4138 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../qsys_lcd_bsp//obj/HAL/src/crt0.o
040001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 mculcd.c
00000000 l    df *ABS*	00000000 qsys_lcd.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
04005790 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040067a0 l     F .text	00000034 __sprint_r
040d2436 l     O .rodata	00000010 blanks.3515
040d2446 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04008764 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400a1a0 l     F .text	00000008 __fp_lock
0400a1a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
040d2608 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
040d247c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040d25c4 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400e930 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
0400ea60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400eb78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400eba4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400eca0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0400ed90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400ef68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040d4120 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400f1e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400f324 l     F .text	00000038 alt_dev_reg
040d2fc4 l     O .rwdata	000000c8 epcs
040d308c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0400f3e0 l     F .text	00000038 alt_flash_device_register
0400f46c l     F .text	0000028c alt_epcs_flash_query
0400f6f8 l     F .text	000000e8 alt_epcs_flash_memcmp
0400facc l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400ff94 l     F .text	00000204 altera_avalon_jtag_uart_irq
04010198 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
04010830 l     F .text	00000038 epcs_test_wip
04010868 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04011060 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04011588 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040116c0 l     F .text	00000050 alt_get_errno
04011710 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0400caf8 g     F .text	00000074 _mprec_log10
0400fa40 g     F .text	0000008c alt_epcs_flash_get_info
0400cbe8 g     F .text	00000084 __any_on
0400d858 g     F .text	00000064 _isatty_r
040d24ac g     O .rodata	00000028 __mprec_tinytens
04004e2c g     F .text	00000268 LCD_ShowChar
04000f80 g     F .text	00000048 LCD_DrawPoint
0400eeb0 g     F .text	00000078 alt_main
040065d0 g     F .text	00000044 __ashldi3
0400667c g     F .text	00000084 _puts_r
040d41b0 g     O .bss	00000100 alt_irq
0400d8bc g     F .text	0000006c _lseek_r
0400e69c g     F .text	0000005c __eqdf2
040d40f0 g     O .rwdata	00000004 BACK_COLOR
040d4440 g       *ABS*	00000000 __alt_heap_start
04006640 g     F .text	0000003c printf
0400d40c g     F .text	0000005c __sseek
0400a230 g     F .text	0000010c __sinit
0400aec8 g     F .text	0000009c _setlocale_r
0400a1bc g     F .text	00000064 __sfmoreglue
0400ef48 g     F .text	00000020 __malloc_unlock
0400bac0 g     F .text	00000128 memmove
0400a220 g     F .text	00000010 _cleanup
0400bcc4 g     F .text	000000a8 _Balloc
04012320 g     O .rodata	00000474 asc2_1206
0400e754 g     F .text	00000064 __gtdf2
04000604 g     F .text	00000088 LCD_DisplayOn
00000000  w      *UND*	00000000 __errno
040108a0 g     F .text	000000f8 epcs_sector_erase
00000000 g     F .entry	00000000 __reset
040019fc g     F .text	00002df8 MCULCD_Init
040047f4 g     F .text	0000008c LCD_Clear
0400d7f0 g     F .text	00000068 _fstat_r
040d4150 g     O .bss	00000004 errno
04005248 g     F .text	000001c0 LCD_ShowxNum
040d40ec g     O .rwdata	00000004 POINT_COLOR
040d4158 g     O .bss	00000004 alt_argv
040dc0ec g       *ABS*	00000000 _gp
0400f1b8 g     F .text	00000030 usleep
040009e8 g     F .text	00000598 LCD_Scan_Dir
040d2e44 g     O .rwdata	00000180 alt_fd_list
04001244 g     F .text	000000b0 LCD_SSD_BackLightSet
04010adc g     F .text	00000068 epcs_write_status_register
04011cf4 g     F .text	00000090 alt_find_dev
0400b9c8 g     F .text	000000f8 memcpy
0400a1b0 g     F .text	0000000c _cleanup_r
04005ee0 g     F .text	000000d4 __floatsidf
04011648 g     F .text	00000078 alt_io_redirect
0400e7b8 g     F .text	0000005c __ltdf2
040003e0 g     F .text	00000038 LCD_WriteRAM_Prepare
04012320 g       *ABS*	00000000 __DTOR_END__
04006700 g     F .text	00000014 puts
0400fbd4 g     F .text	00000104 alt_epcs_flash_write_block
0400ca54 g     F .text	000000a4 __ratio
04010398 g     F .text	00000218 altera_avalon_jtag_uart_read
04004a10 g     F .text	000001b0 LCD_DrawLine
00000000  w      *UND*	00000000 malloc
04006614 g     F .text	0000002c _printf_r
0400ea50 g     F .text	00000008 __udivsi3
0400ecf0 g     F .text	000000a0 isatty
040d24fc g     O .rodata	000000c8 __mprec_tens
0400af64 g     F .text	0000000c __locale_charset
0400570c g     F .text	00000084 __fixunsdfsi
040d414c g     O .bss	00000004 __malloc_top_pad
0400068c g     F .text	00000088 LCD_DisplayOff
040d40fc g     O .rwdata	00000004 __mb_cur_max
0400af70 g     F .text	0000000c _localeconv_r
0400c0c4 g     F .text	0000003c __i2b
0400a884 g     F .text	000004e4 __sfvwrite_r
0400d2cc g     F .text	00000064 _sbrk_r
04000238 g     F .text	00000068 LCD_WR_CMD
04012d84 g     O .rodata	00000d5c asc2_2412
0400d928 g     F .text	0000006c _read_r
040d2a08 g     O .rwdata	0000000c __lc_ctype
040d4118 g     O .rwdata	00000004 alt_max_fd
040063b8 g     F .text	00000104 __unpack_d
0400d6a0 g     F .text	0000013c _fclose_r
0400a170 g     F .text	00000030 fflush
040d4148 g     O .bss	00000004 __malloc_max_sbrked_mem
04001648 g     F .text	000003b4 LCD_Set_Window
04005ae4 g     F .text	00000054 __adddf3
0400fb60 g     F .text	00000074 alt_epcs_flash_erase_block
0400c7c8 g     F .text	00000148 __b2d
0400df5c g     F .text	0000058c __umoddi3
0400ede0 g     F .text	000000d0 lseek
040d40f4 g     O .rwdata	00000004 _global_impure_ptr
04010da0 g     F .text	00000058 epcs_exit_4_bytes_mode
0400cc6c g     F .text	000005fc _realloc_r
040d4440 g       *ABS*	00000000 __bss_end
04011498 g     F .text	000000f0 alt_iic_isr_register
040119c8 g     F .text	00000104 alt_tick
0400d994 g     F .text	000005c8 __udivdi3
040d24d4 g     O .rodata	00000028 __mprec_bigtens
0400bea8 g     F .text	00000104 __s2b
0400e814 g     F .text	0000011c __floatunsidf
0400c568 g     F .text	00000058 __mcmp
0400a448 g     F .text	00000018 __fp_lock_all
0401144c g     F .text	0000004c alt_ic_irq_enabled
04011930 g     F .text	00000098 alt_alarm_stop
040d4160 g     O .bss	00000004 alt_irq_active
040000ec g     F .exceptions	000000cc alt_irq_handler
040d2e1c g     O .rwdata	00000028 alt_dev_null
04016a70 g     O .rodata	000bb800 gImage_pic01
0400bfac g     F .text	00000068 __hi0bits
04005fb4 g     F .text	000000d4 __fixdfsi
040004b8 g     F .text	0000014c LCD_ReadPoint
040002a0 g     F .text	0000005c LCD_WR_DATA
040d4110 g     O .rwdata	00000008 alt_dev_list
0400f238 g     F .text	000000ec write
0400ebf4 g     F .text	000000ac fstat
0400658c g     F .text	00000044 __lshrdi3
0400c2e0 g     F .text	0000012c __pow5mult
040d4140 g     O .bss	00000004 __nlocale_changed
0400ea58 g     F .text	00000008 __umodsi3
04010c60 g     F .text	00000068 epcs_read_electronic_signature
040d4440 g       *ABS*	00000000 end
0400fed4 g     F .text	000000c0 altera_avalon_jtag_uart_init
04012320 g       *ABS*	00000000 __CTOR_LIST__
06000000 g       *ABS*	00000000 __alt_stack_pointer
040060e8 g     F .text	000000ac __clzsi2
040105b0 g     F .text	00000224 altera_avalon_jtag_uart_write
040012f4 g     F .text	00000354 LCD_Display_Dir
0400a438 g     F .text	00000004 __sfp_lock_acquire
0400b8d0 g     F .text	000000f8 memchr
040067d4 g     F .text	00001df8 ___vfprintf_internal_r
0400a5b4 g     F .text	000002d0 _free_r
04000714 g     F .text	000002d4 LCD_SetCursor
04012144 g     F .text	000001a0 __call_exitprocs
040d413c g     O .bss	00000004 __mlocale_changed
040d4100 g     O .rwdata	00000004 __malloc_sbrk_base
040001b8 g     F .text	00000048 _start
040d4164 g     O .bss	00000004 _alt_tick_rate
0400c40c g     F .text	0000015c __lshift
04011aec g     F .text	00000208 alt_avalon_spi_command
040d4168 g     O .bss	00000004 _alt_nticks
0400efb8 g     F .text	000000f0 read
0400f390 g     F .text	00000050 alt_sys_init
04012014 g     F .text	00000130 __register_exitproc
0400c100 g     F .text	000001e0 __multiply
0401023c g     F .text	00000068 altera_avalon_jtag_uart_close
040d416c g     O .bss	00000028 __malloc_current_mallinfo
0400c910 g     F .text	00000144 __d2b
040107d4 g     F .text	0000005c epcs_read_status_register
0400fd70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04011e98 g     F .text	000000b4 alt_get_fd
04010f38 g     F .text	00000128 alt_busy_sleep
040064bc g     F .text	000000d0 __fpcmp_parts_d
0400d63c g     F .text	00000064 _close_r
04010cc8 g     F .text	00000080 epcs_read_device_id
04011f98 g     F .text	0000007c memcmp
0400fe30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040d4440 g       *ABS*	00000000 __alt_stack_base
0400fe80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040085f0 g     F .text	00000174 __swsetup_r
0400e4e8 g     F .text	000001b4 __divdf3
0400a33c g     F .text	000000fc __sfp
0400cb6c g     F .text	0000007c __copybits
040d2a14 g     O .rwdata	00000408 __malloc_av_
0400a444 g     F .text	00000004 __sinit_lock_release
04005b98 g     F .text	000002e4 __muldf3
0400d330 g     F .text	00000054 __sread
04011d84 g     F .text	00000114 alt_find_file
040110b0 g     F .text	000000a0 alt_dev_llist_insert
0400ef28 g     F .text	00000020 __malloc_lock
0400f108 g     F .text	000000b0 sbrk
04009f88 g     F .text	000001e8 _fflush_r
040050fc g     F .text	0000014c LCD_ShowNum
0400d580 g     F .text	000000bc _calloc_r
040d4124 g     O .rwdata	00000008 alt_flash_dev_list
040d4138 g       *ABS*	00000000 __bss_start
0400bbe8 g     F .text	000000dc memset
040055d0 g     F .text	0000013c main
04000200 g     F .text	00000038 delay_ms
040d415c g     O .bss	00000004 alt_envp
04012794 g     O .rodata	000005f0 asc2_1608
040d4144 g     O .bss	00000004 __malloc_max_total_mem
0400fdd0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04004928 g     F .text	000000e8 LCD_Color_Fill
04000418 g     F .text	00000030 LCD_WriteRAM
0400d468 g     F .text	00000008 __sclose
06000000 g       *ABS*	00000000 __alt_heap_limit
0400d7dc g     F .text	00000014 fclose
040d42b0 g     O .bss	00000190 _atexit0
0400896c g     F .text	0000161c _dtoa_r
0400b14c g     F .text	00000784 _malloc_r
040d411c g     O .rwdata	00000004 alt_errno
0400ad68 g     F .text	000000a8 _fwalk
04000fc8 g     F .text	0000027c LCD_Fast_DrawPoint
0400e9a4 g     F .text	00000050 __divsi3
040d22dc g     O .rodata	00000014 __thenan_df
0400a478 g     F .text	0000013c _malloc_trim_r
04012320 g       *ABS*	00000000 __CTOR_END__
0400f7e0 g     F .text	00000260 alt_epcs_flash_write
0400d470 g     F .text	000000a4 strcmp
04012320 g       *ABS*	00000000 __DTOR_LIST__
0400e6f8 g     F .text	0000005c __nedf2
04004880 g     F .text	000000a8 LCD_Fill
0400f35c g     F .text	00000034 alt_irq_init
0400f0a8 g     F .text	00000060 alt_release_fd
040d22f0 g     O .rodata	00000100 __clz_tab
040d4138 g     O .bss	00000004 _PathLocale
040d4194 g     O .bss	0000001c lcddev
04011f4c g     F .text	00000014 atexit
0400d514 g     F .text	0000006c _write_r
0400af7c g     F .text	0000001c setlocale
04000368 g     F .text	0000003c LCD_WriteReg
040d40f8 g     O .rwdata	00000004 _impure_ptr
040d4154 g     O .bss	00000004 alt_argc
040111ac g     F .text	0000005c _do_dtors
04004c44 g     F .text	000001e8 LCD_Draw_Circle
04000020 g       .exceptions	00000000 alt_irq_entry
0400c768 g     F .text	00000060 __ulp
0400d268 g     F .text	00000038 __isinfd
0400a460 g     F .text	00000018 __fp_unlock_all
040d4108 g     O .rwdata	00000008 alt_fs_list
04005528 g     F .text	000000a8 LCD_DisplayPic
0400af98 g     F .text	0000000c localeconv
04010998 g     F .text	000000f4 epcs_read_buffer
04005094 g     F .text	00000068 LCD_Pow
0400f418 g     F .text	00000054 alt_epcs_flash_init
040112c0 g     F .text	00000050 alt_ic_isr_register
040d4138 g       *ABS*	00000000 _edata
040d4440 g       *ABS*	00000000 _end
04011208 g     F .text	00000068 alt_flash_open_dev
04013ae0 g     O .rodata	00002f80 asc2_3216
040102a4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
040113ac g     F .text	000000a0 alt_ic_irq_disable
04010d48 g     F .text	00000058 epcs_enter_4_bytes_mode
0400d384 g     F .text	00000088 __swrite
040d4104 g     O .rwdata	00000004 __malloc_trim_threshold
04011acc g     F .text	00000020 altera_nios2_qsys_irq_init
04011f60 g     F .text	00000038 exit
0400ae10 g     F .text	000000b8 _fwalk_reent
0400c5c0 g     F .text	000001a8 __mdiff
04011270 g     F .text	00000050 alt_flash_close_dev
0400e9f4 g     F .text	0000005c __modsi3
06000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400a43c g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04005408 g     F .text	00000120 LCD_ShowString
040122e4 g     F .text	0000003c _exit
0400d2a0 g     F .text	0000002c __isnand
04010df8 g     F .text	00000140 alt_alarm_start
04006088 g     F .text	00000060 __muldi3
0400afa4 g     F .text	000001a8 __smakebuf_r
04006714 g     F .text	0000008c strlen
04010a8c g     F .text	00000050 epcs_write_enable
040117dc g     F .text	00000154 open
04005e7c g     F .text	00000064 __gedf2
040d412c g     O .rwdata	00000004 alt_priority_mask
04011310 g     F .text	0000009c alt_ic_irq_enable
040085cc g     F .text	00000024 __vfprintf_internal
00000000 g       *ABS*	00000000 __alt_mem_epcs
04005b38 g     F .text	00000060 __subdf3
0400fcd8 g     F .text	00000098 alt_epcs_flash_read
0400c014 g     F .text	000000b0 __lo0bits
040d4130 g     O .rwdata	00000008 alt_alarm_list
040002fc g     F .text	0000006c LCD_RD_DATA
04011150 g     F .text	0000005c _do_ctors
0400eab0 g     F .text	000000c8 close
040003a4 g     F .text	0000003c LCD_ReadReg
04006194 g     F .text	00000224 __pack_d
04000448 g     F .text	00000070 LCD_BGR2RGB
04004bc0 g     F .text	00000084 LCD_DrawRectangle
00000000  w      *UND*	00000000 free
0400a440 g     F .text	00000004 __sinit_lock_acquire
04010b44 g     F .text	0000011c epcs_write_buffer
0400bd94 g     F .text	00000114 __multadd
0400bd6c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c10374 	movhi	r3,1037
 4000130:	18d06c04 	addi	r3,r3,16816
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	01010374 	movhi	r4,1037
 4000148:	21106c04 	addi	r4,r4,16816
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40001c4:	00bffd16 	blt	zero,r2,40001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c8:	06c18034 	movhi	sp,1536
    ori sp, sp, %lo(__alt_stack_pointer)
 40001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001d0:	06810374 	movhi	gp,1037
    ori gp, gp, %lo(_gp)
 40001d4:	d6b03b14 	ori	gp,gp,49388
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d8:	00810374 	movhi	r2,1037
    ori r2, r2, %lo(__bss_start)
 40001dc:	10904e14 	ori	r2,r2,16696

    movhi r3, %hi(__bss_end)
 40001e0:	00c10374 	movhi	r3,1037
    ori r3, r3, %lo(__bss_end)
 40001e4:	18d11014 	ori	r3,r3,17472

    beq r2, r3, 1f
 40001e8:	10c00326 	beq	r2,r3,40001f8 <_start+0x40>

0:
    stw zero, (r2)
 40001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f4:	10fffd36 	bltu	r2,r3,40001ec <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001f8:	400eeb00 	call	400eeb0 <alt_main>

040001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001fc:	003fff06 	br	40001fc <alt_after_alt_main>

04000200 <delay_ms>:
u32 POINT_COLOR=0xFF000000;     //画笔颜色
u32 BACK_COLOR =0xFFFFFFFF; //背景色

//LCD延迟函数，单位毫秒
void delay_ms(u32 n)
{
 4000200:	defffd04 	addi	sp,sp,-12
 4000204:	dfc00215 	stw	ra,8(sp)
 4000208:	df000115 	stw	fp,4(sp)
 400020c:	df000104 	addi	fp,sp,4
 4000210:	e13fff15 	stw	r4,-4(fp)
     usleep(n*1000);
 4000214:	e0bfff17 	ldw	r2,-4(fp)
 4000218:	1080fa24 	muli	r2,r2,1000
 400021c:	1009883a 	mov	r4,r2
 4000220:	400f1b80 	call	400f1b8 <usleep>
}
 4000224:	e037883a 	mov	sp,fp
 4000228:	dfc00117 	ldw	ra,4(sp)
 400022c:	df000017 	ldw	fp,0(sp)
 4000230:	dec00204 	addi	sp,sp,8
 4000234:	f800283a 	ret

04000238 <LCD_WR_CMD>:

//LCD写命令
void LCD_WR_CMD(u16 Cmd)
{
 4000238:	defffe04 	addi	sp,sp,-8
 400023c:	df000115 	stw	fp,4(sp)
 4000240:	df000104 	addi	fp,sp,4
 4000244:	e13fff15 	stw	r4,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DIRECTION(MLCD_DATA_BASE,0xFFFF);  // 设置DATA PIO为输出
 4000248:	00ffffd4 	movui	r3,65535
 400024c:	00861904 	movi	r2,6244
 4000250:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RS_BASE,0);              // 拉低RS
 4000254:	0007883a 	mov	r3,zero
 4000258:	00860404 	movi	r2,6160
 400025c:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RD_N_BASE,1);            // RD设为高电平
 4000260:	00c00044 	movi	r3,1
 4000264:	00860c04 	movi	r2,6192
 4000268:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_WR_N_BASE,0);            // 拉低WR
 400026c:	0007883a 	mov	r3,zero
 4000270:	00861004 	movi	r2,6208
 4000274:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_DATA_BASE,Cmd);          // 往DATA端口写命令
 4000278:	e0ffff17 	ldw	r3,-4(fp)
 400027c:	00861804 	movi	r2,6240
 4000280:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_WR_N_BASE,1);            // 拉高WR
 4000284:	00c00044 	movi	r3,1
 4000288:	00861004 	movi	r2,6208
 400028c:	10c00035 	stwio	r3,0(r2)
}
 4000290:	e037883a 	mov	sp,fp
 4000294:	df000017 	ldw	fp,0(sp)
 4000298:	dec00104 	addi	sp,sp,4
 400029c:	f800283a 	ret

040002a0 <LCD_WR_DATA>:

//LCD写数据
void LCD_WR_DATA(u16 Data)
{
 40002a0:	defffe04 	addi	sp,sp,-8
 40002a4:	df000115 	stw	fp,4(sp)
 40002a8:	df000104 	addi	fp,sp,4
 40002ac:	e13fff15 	stw	r4,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RS_BASE,1);
 40002b0:	00c00044 	movi	r3,1
 40002b4:	00860404 	movi	r2,6160
 40002b8:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RD_N_BASE,1);
 40002bc:	00c00044 	movi	r3,1
 40002c0:	00860c04 	movi	r2,6192
 40002c4:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_WR_N_BASE,0);
 40002c8:	0007883a 	mov	r3,zero
 40002cc:	00861004 	movi	r2,6208
 40002d0:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_DATA_BASE,Data);
 40002d4:	e0ffff17 	ldw	r3,-4(fp)
 40002d8:	00861804 	movi	r2,6240
 40002dc:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_WR_N_BASE,1);
 40002e0:	00c00044 	movi	r3,1
 40002e4:	00861004 	movi	r2,6208
 40002e8:	10c00035 	stwio	r3,0(r2)
}
 40002ec:	e037883a 	mov	sp,fp
 40002f0:	df000017 	ldw	fp,0(sp)
 40002f4:	dec00104 	addi	sp,sp,4
 40002f8:	f800283a 	ret

040002fc <LCD_RD_DATA>:

//LCD读数据
u16 LCD_RD_DATA()
{
 40002fc:	defffe04 	addi	sp,sp,-8
 4000300:	df000115 	stw	fp,4(sp)
 4000304:	df000104 	addi	fp,sp,4
     u16 read_data = 0;
 4000308:	e03fff15 	stw	zero,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DIRECTION(MLCD_DATA_BASE,0x0000);  // 设置DATA PIO为输入
 400030c:	0007883a 	mov	r3,zero
 4000310:	00861904 	movi	r2,6244
 4000314:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RS_BASE,1);
 4000318:	00c00044 	movi	r3,1
 400031c:	00860404 	movi	r2,6160
 4000320:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RD_N_BASE,0);
 4000324:	0007883a 	mov	r3,zero
 4000328:	00860c04 	movi	r2,6192
 400032c:	10c00035 	stwio	r3,0(r2)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_WR_N_BASE,1);
 4000330:	00c00044 	movi	r3,1
 4000334:	00861004 	movi	r2,6208
 4000338:	10c00035 	stwio	r3,0(r2)
     read_data = IORD_ALTERA_AVALON_PIO_DATA(MLCD_DATA_BASE);
 400033c:	00861804 	movi	r2,6240
 4000340:	10800037 	ldwio	r2,0(r2)
 4000344:	e0bfff15 	stw	r2,-4(fp)
     IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RD_N_BASE,1);
 4000348:	00c00044 	movi	r3,1
 400034c:	00860c04 	movi	r2,6192
 4000350:	10c00035 	stwio	r3,0(r2)

     return read_data;
 4000354:	e0bfff17 	ldw	r2,-4(fp)
}
 4000358:	e037883a 	mov	sp,fp
 400035c:	df000017 	ldw	fp,0(sp)
 4000360:	dec00104 	addi	sp,sp,4
 4000364:	f800283a 	ret

04000368 <LCD_WriteReg>:

//LCD写寄存器数据
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
 4000368:	defffc04 	addi	sp,sp,-16
 400036c:	dfc00315 	stw	ra,12(sp)
 4000370:	df000215 	stw	fp,8(sp)
 4000374:	df000204 	addi	fp,sp,8
 4000378:	e13ffe15 	stw	r4,-8(fp)
 400037c:	e17fff15 	stw	r5,-4(fp)
     LCD_WR_CMD(LCD_Reg);                                      // 写入的寄存器
 4000380:	e13ffe17 	ldw	r4,-8(fp)
 4000384:	40002380 	call	4000238 <LCD_WR_CMD>
     LCD_WR_DATA(LCD_RegValue);                                // 写入的数据
 4000388:	e13fff17 	ldw	r4,-4(fp)
 400038c:	40002a00 	call	40002a0 <LCD_WR_DATA>
}
 4000390:	e037883a 	mov	sp,fp
 4000394:	dfc00117 	ldw	ra,4(sp)
 4000398:	df000017 	ldw	fp,0(sp)
 400039c:	dec00204 	addi	sp,sp,8
 40003a0:	f800283a 	ret

040003a4 <LCD_ReadReg>:

//LCD读寄存器
u16 LCD_ReadReg(u16 LCD_Reg)
{
 40003a4:	defffd04 	addi	sp,sp,-12
 40003a8:	dfc00215 	stw	ra,8(sp)
 40003ac:	df000115 	stw	fp,4(sp)
 40003b0:	df000104 	addi	fp,sp,4
 40003b4:	e13fff15 	stw	r4,-4(fp)
     LCD_WR_CMD(LCD_Reg);                                      // 要读取的寄存器
 40003b8:	e13fff17 	ldw	r4,-4(fp)
 40003bc:	40002380 	call	4000238 <LCD_WR_CMD>
     usleep(5);                                                // 延时5us
 40003c0:	01000144 	movi	r4,5
 40003c4:	400f1b80 	call	400f1b8 <usleep>
     return LCD_RD_DATA();                                     // 返回读取的数据
 40003c8:	40002fc0 	call	40002fc <LCD_RD_DATA>
}
 40003cc:	e037883a 	mov	sp,fp
 40003d0:	dfc00117 	ldw	ra,4(sp)
 40003d4:	df000017 	ldw	fp,0(sp)
 40003d8:	dec00204 	addi	sp,sp,8
 40003dc:	f800283a 	ret

040003e0 <LCD_WriteRAM_Prepare>:

//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 40003e0:	defffe04 	addi	sp,sp,-8
 40003e4:	dfc00115 	stw	ra,4(sp)
 40003e8:	df000015 	stw	fp,0(sp)
 40003ec:	d839883a 	mov	fp,sp
     LCD_WR_CMD(lcddev.wramcmd);
 40003f0:	00810374 	movhi	r2,1037
 40003f4:	10906504 	addi	r2,r2,16788
 40003f8:	10800417 	ldw	r2,16(r2)
 40003fc:	1009883a 	mov	r4,r2
 4000400:	40002380 	call	4000238 <LCD_WR_CMD>
}
 4000404:	e037883a 	mov	sp,fp
 4000408:	dfc00117 	ldw	ra,4(sp)
 400040c:	df000017 	ldw	fp,0(sp)
 4000410:	dec00204 	addi	sp,sp,8
 4000414:	f800283a 	ret

04000418 <LCD_WriteRAM>:

//LCD写GRAM
//RGB_Code:颜色值
void LCD_WriteRAM(u16 RGB_Code)
{
 4000418:	defffd04 	addi	sp,sp,-12
 400041c:	dfc00215 	stw	ra,8(sp)
 4000420:	df000115 	stw	fp,4(sp)
 4000424:	df000104 	addi	fp,sp,4
 4000428:	e13fff15 	stw	r4,-4(fp)
     LCD_WR_DATA(RGB_Code);                                    //写十六位GRAM
 400042c:	e13fff17 	ldw	r4,-4(fp)
 4000430:	40002a00 	call	40002a0 <LCD_WR_DATA>
}
 4000434:	e037883a 	mov	sp,fp
 4000438:	dfc00117 	ldw	ra,4(sp)
 400043c:	df000017 	ldw	fp,0(sp)
 4000440:	dec00204 	addi	sp,sp,8
 4000444:	f800283a 	ret

04000448 <LCD_BGR2RGB>:
//从ILI93xx读出的数据为GBR格式，而我们写入的时候为RGB格式。
//通过该函数转换
//c:GBR格式的颜色值
//返回值：RGB格式的颜色值
u16 LCD_BGR2RGB(u16 c)
{
 4000448:	defffa04 	addi	sp,sp,-24
 400044c:	df000515 	stw	fp,20(sp)
 4000450:	df000504 	addi	fp,sp,20
 4000454:	e13fff15 	stw	r4,-4(fp)
     u16  r,g,b,rgb;
     b=(c>>0)&0x1f;
 4000458:	e0bfff17 	ldw	r2,-4(fp)
 400045c:	108007cc 	andi	r2,r2,31
 4000460:	e0bffb15 	stw	r2,-20(fp)
     g=(c>>5)&0x3f;
 4000464:	e0bfff17 	ldw	r2,-4(fp)
 4000468:	1004d17a 	srli	r2,r2,5
 400046c:	10800fcc 	andi	r2,r2,63
 4000470:	e0bffc15 	stw	r2,-16(fp)
     r=(c>>11)&0x1f;
 4000474:	e0bfff17 	ldw	r2,-4(fp)
 4000478:	1004d2fa 	srli	r2,r2,11
 400047c:	108007cc 	andi	r2,r2,31
 4000480:	e0bffd15 	stw	r2,-12(fp)
     rgb=(b<<11)+(g<<5)+(r<<0);
 4000484:	e0bffb17 	ldw	r2,-20(fp)
 4000488:	100692fa 	slli	r3,r2,11
 400048c:	e0bffc17 	ldw	r2,-16(fp)
 4000490:	1004917a 	slli	r2,r2,5
 4000494:	1887883a 	add	r3,r3,r2
 4000498:	e0bffd17 	ldw	r2,-12(fp)
 400049c:	1885883a 	add	r2,r3,r2
 40004a0:	e0bffe15 	stw	r2,-8(fp)
     return(rgb);
 40004a4:	e0bffe17 	ldw	r2,-8(fp)
}
 40004a8:	e037883a 	mov	sp,fp
 40004ac:	df000017 	ldw	fp,0(sp)
 40004b0:	dec00104 	addi	sp,sp,4
 40004b4:	f800283a 	ret

040004b8 <LCD_ReadPoint>:

//读取个某点的颜色值
//x,y:坐标
//返回值:此点的颜色
u32 LCD_ReadPoint(u16 x,u16 y)
{
 40004b8:	defff904 	addi	sp,sp,-28
 40004bc:	dfc00615 	stw	ra,24(sp)
 40004c0:	df000515 	stw	fp,20(sp)
 40004c4:	df000504 	addi	fp,sp,20
 40004c8:	e13ffe15 	stw	r4,-8(fp)
 40004cc:	e17fff15 	stw	r5,-4(fp)
     u16 r=0,g=0,b=0;
 40004d0:	e03ffb15 	stw	zero,-20(fp)
 40004d4:	e03ffc15 	stw	zero,-16(fp)
 40004d8:	e03ffd15 	stw	zero,-12(fp)
     if(x>=lcddev.width||y>=lcddev.height)return 0; //超过了范围,直接返回
 40004dc:	00810374 	movhi	r2,1037
 40004e0:	10906504 	addi	r2,r2,16788
 40004e4:	10800017 	ldw	r2,0(r2)
 40004e8:	e0fffe17 	ldw	r3,-8(fp)
 40004ec:	1880052e 	bgeu	r3,r2,4000504 <LCD_ReadPoint+0x4c>
 40004f0:	00810374 	movhi	r2,1037
 40004f4:	10906504 	addi	r2,r2,16788
 40004f8:	10800117 	ldw	r2,4(r2)
 40004fc:	e0ffff17 	ldw	r3,-4(fp)
 4000500:	18800236 	bltu	r3,r2,400050c <LCD_ReadPoint+0x54>
 4000504:	0005883a 	mov	r2,zero
 4000508:	00003906 	br	40005f0 <LCD_ReadPoint+0x138>
     LCD_SetCursor(x,y);
 400050c:	e13ffe17 	ldw	r4,-8(fp)
 4000510:	e17fff17 	ldw	r5,-4(fp)
 4000514:	40007140 	call	4000714 <LCD_SetCursor>
     if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X1963)
 4000518:	00810374 	movhi	r2,1037
 400051c:	10906504 	addi	r2,r2,16788
 4000520:	10c00217 	ldw	r3,8(r2)
 4000524:	00a4d054 	movui	r2,37697
 4000528:	18800a26 	beq	r3,r2,4000554 <LCD_ReadPoint+0x9c>
 400052c:	00810374 	movhi	r2,1037
 4000530:	10906504 	addi	r2,r2,16788
 4000534:	10800217 	ldw	r2,8(r2)
 4000538:	1094c420 	cmpeqi	r2,r2,21264
 400053c:	1000051e 	bne	r2,zero,4000554 <LCD_ReadPoint+0x9c>
 4000540:	00810374 	movhi	r2,1037
 4000544:	10906504 	addi	r2,r2,16788
 4000548:	10800217 	ldw	r2,8(r2)
 400054c:	108658d8 	cmpnei	r2,r2,6499
 4000550:	1000031e 	bne	r2,zero,4000560 <LCD_ReadPoint+0xa8>
          LCD_WR_CMD(0X2E);       //9341/3510/1963 发送读GRAM指令
 4000554:	01000b84 	movi	r4,46
 4000558:	40002380 	call	4000238 <LCD_WR_CMD>
 400055c:	00000706 	br	400057c <LCD_ReadPoint+0xc4>
     else if(lcddev.id==0X5510)
 4000560:	00810374 	movhi	r2,1037
 4000564:	10906504 	addi	r2,r2,16788
 4000568:	10800217 	ldw	r2,8(r2)
 400056c:	10954418 	cmpnei	r2,r2,21776
 4000570:	1000021e 	bne	r2,zero,400057c <LCD_ReadPoint+0xc4>
          LCD_WR_CMD(0X2E00);     //5510 发送读GRAM指令
 4000574:	010b8004 	movi	r4,11776
 4000578:	40002380 	call	4000238 <LCD_WR_CMD>
     r=LCD_RD_DATA();             //dummy Read
 400057c:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4000580:	e0bffb15 	stw	r2,-20(fp)
     if(lcddev.id==0X1963)
 4000584:	00810374 	movhi	r2,1037
 4000588:	10906504 	addi	r2,r2,16788
 400058c:	10800217 	ldw	r2,8(r2)
 4000590:	108658d8 	cmpnei	r2,r2,6499
 4000594:	1000021e 	bne	r2,zero,40005a0 <LCD_ReadPoint+0xe8>
          return r;               //1963直接读就可以
 4000598:	e0bffb17 	ldw	r2,-20(fp)
 400059c:	00001406 	br	40005f0 <LCD_ReadPoint+0x138>
     r=LCD_RD_DATA();             //实际坐标颜色
 40005a0:	40002fc0 	call	40002fc <LCD_RD_DATA>
 40005a4:	e0bffb15 	stw	r2,-20(fp)
     b=LCD_RD_DATA();             //9341/NT35310/NT35510要分2次读出
 40005a8:	40002fc0 	call	40002fc <LCD_RD_DATA>
 40005ac:	e0bffd15 	stw	r2,-12(fp)
     g=r&0XFF;      //对于9341/5310/5510,第一次读取的是RG的值,R在前,G在后,各占8位
 40005b0:	e0bffb17 	ldw	r2,-20(fp)
 40005b4:	10803fcc 	andi	r2,r2,255
 40005b8:	e0bffc15 	stw	r2,-16(fp)
     g<<=8;
 40005bc:	e0bffc17 	ldw	r2,-16(fp)
 40005c0:	1004923a 	slli	r2,r2,8
 40005c4:	e0bffc15 	stw	r2,-16(fp)
     return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));   //ILI9341/NT35310/NT35510需要公式转换一下
 40005c8:	e0fffb17 	ldw	r3,-20(fp)
 40005cc:	00be0004 	movi	r2,-2048
 40005d0:	1886703a 	and	r3,r3,r2
 40005d4:	e0bffc17 	ldw	r2,-16(fp)
 40005d8:	1004d2ba 	srli	r2,r2,10
 40005dc:	1004917a 	slli	r2,r2,5
 40005e0:	1886b03a 	or	r3,r3,r2
 40005e4:	e0bffd17 	ldw	r2,-12(fp)
 40005e8:	1004d2fa 	srli	r2,r2,11
 40005ec:	1884b03a 	or	r2,r3,r2
}
 40005f0:	e037883a 	mov	sp,fp
 40005f4:	dfc00117 	ldw	ra,4(sp)
 40005f8:	df000017 	ldw	fp,0(sp)
 40005fc:	dec00204 	addi	sp,sp,8
 4000600:	f800283a 	ret

04000604 <LCD_DisplayOn>:

//LCD开启显示
void LCD_DisplayOn(void)
{
 4000604:	defffe04 	addi	sp,sp,-8
 4000608:	dfc00115 	stw	ra,4(sp)
 400060c:	df000015 	stw	fp,0(sp)
 4000610:	d839883a 	mov	fp,sp
     if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X1963)
 4000614:	00810374 	movhi	r2,1037
 4000618:	10906504 	addi	r2,r2,16788
 400061c:	10c00217 	ldw	r3,8(r2)
 4000620:	00a4d054 	movui	r2,37697
 4000624:	18800a26 	beq	r3,r2,4000650 <LCD_DisplayOn+0x4c>
 4000628:	00810374 	movhi	r2,1037
 400062c:	10906504 	addi	r2,r2,16788
 4000630:	10800217 	ldw	r2,8(r2)
 4000634:	1094c420 	cmpeqi	r2,r2,21264
 4000638:	1000051e 	bne	r2,zero,4000650 <LCD_DisplayOn+0x4c>
 400063c:	00810374 	movhi	r2,1037
 4000640:	10906504 	addi	r2,r2,16788
 4000644:	10800217 	ldw	r2,8(r2)
 4000648:	108658d8 	cmpnei	r2,r2,6499
 400064c:	1000031e 	bne	r2,zero,400065c <LCD_DisplayOn+0x58>
          LCD_WR_CMD(0X29);     //开启显示
 4000650:	01000a44 	movi	r4,41
 4000654:	40002380 	call	4000238 <LCD_WR_CMD>
 4000658:	00000706 	br	4000678 <LCD_DisplayOn+0x74>
     else if(lcddev.id==0X5510)
 400065c:	00810374 	movhi	r2,1037
 4000660:	10906504 	addi	r2,r2,16788
 4000664:	10800217 	ldw	r2,8(r2)
 4000668:	10954418 	cmpnei	r2,r2,21776
 400066c:	1000021e 	bne	r2,zero,4000678 <LCD_DisplayOn+0x74>
          LCD_WR_CMD(0X2900);   //开启显示
 4000670:	010a4004 	movi	r4,10496
 4000674:	40002380 	call	4000238 <LCD_WR_CMD>
}
 4000678:	e037883a 	mov	sp,fp
 400067c:	dfc00117 	ldw	ra,4(sp)
 4000680:	df000017 	ldw	fp,0(sp)
 4000684:	dec00204 	addi	sp,sp,8
 4000688:	f800283a 	ret

0400068c <LCD_DisplayOff>:

//LCD关闭显示
void LCD_DisplayOff(void)
{
 400068c:	defffe04 	addi	sp,sp,-8
 4000690:	dfc00115 	stw	ra,4(sp)
 4000694:	df000015 	stw	fp,0(sp)
 4000698:	d839883a 	mov	fp,sp
     if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X1963)
 400069c:	00810374 	movhi	r2,1037
 40006a0:	10906504 	addi	r2,r2,16788
 40006a4:	10c00217 	ldw	r3,8(r2)
 40006a8:	00a4d054 	movui	r2,37697
 40006ac:	18800a26 	beq	r3,r2,40006d8 <LCD_DisplayOff+0x4c>
 40006b0:	00810374 	movhi	r2,1037
 40006b4:	10906504 	addi	r2,r2,16788
 40006b8:	10800217 	ldw	r2,8(r2)
 40006bc:	1094c420 	cmpeqi	r2,r2,21264
 40006c0:	1000051e 	bne	r2,zero,40006d8 <LCD_DisplayOff+0x4c>
 40006c4:	00810374 	movhi	r2,1037
 40006c8:	10906504 	addi	r2,r2,16788
 40006cc:	10800217 	ldw	r2,8(r2)
 40006d0:	108658d8 	cmpnei	r2,r2,6499
 40006d4:	1000031e 	bne	r2,zero,40006e4 <LCD_DisplayOff+0x58>
          LCD_WR_CMD(0X28);     //关闭显示
 40006d8:	01000a04 	movi	r4,40
 40006dc:	40002380 	call	4000238 <LCD_WR_CMD>
 40006e0:	00000706 	br	4000700 <LCD_DisplayOff+0x74>
     else if(lcddev.id==0X5510)
 40006e4:	00810374 	movhi	r2,1037
 40006e8:	10906504 	addi	r2,r2,16788
 40006ec:	10800217 	ldw	r2,8(r2)
 40006f0:	10954418 	cmpnei	r2,r2,21776
 40006f4:	1000021e 	bne	r2,zero,4000700 <LCD_DisplayOff+0x74>
          LCD_WR_CMD(0X2800);   //关闭显示
 40006f8:	010a0004 	movi	r4,10240
 40006fc:	40002380 	call	4000238 <LCD_WR_CMD>
}
 4000700:	e037883a 	mov	sp,fp
 4000704:	dfc00117 	ldw	ra,4(sp)
 4000708:	df000017 	ldw	fp,0(sp)
 400070c:	dec00204 	addi	sp,sp,8
 4000710:	f800283a 	ret

04000714 <LCD_SetCursor>:

//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 4000714:	defffc04 	addi	sp,sp,-16
 4000718:	dfc00315 	stw	ra,12(sp)
 400071c:	df000215 	stw	fp,8(sp)
 4000720:	df000204 	addi	fp,sp,8
 4000724:	e13ffe15 	stw	r4,-8(fp)
 4000728:	e17fff15 	stw	r5,-4(fp)
     if(lcddev.id==0X9341||lcddev.id==0X5310){
 400072c:	00810374 	movhi	r2,1037
 4000730:	10906504 	addi	r2,r2,16788
 4000734:	10c00217 	ldw	r3,8(r2)
 4000738:	00a4d054 	movui	r2,37697
 400073c:	18800526 	beq	r3,r2,4000754 <LCD_SetCursor+0x40>
 4000740:	00810374 	movhi	r2,1037
 4000744:	10906504 	addi	r2,r2,16788
 4000748:	10800217 	ldw	r2,8(r2)
 400074c:	1094c418 	cmpnei	r2,r2,21264
 4000750:	10001b1e 	bne	r2,zero,40007c0 <LCD_SetCursor+0xac>
          LCD_WR_CMD(lcddev.setxcmd);
 4000754:	00810374 	movhi	r2,1037
 4000758:	10906504 	addi	r2,r2,16788
 400075c:	10800517 	ldw	r2,20(r2)
 4000760:	1009883a 	mov	r4,r2
 4000764:	40002380 	call	4000238 <LCD_WR_CMD>
          LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 4000768:	e0bffe17 	ldw	r2,-8(fp)
 400076c:	1004d23a 	srli	r2,r2,8
 4000770:	1009883a 	mov	r4,r2
 4000774:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000778:	e0bffe17 	ldw	r2,-8(fp)
 400077c:	10803fcc 	andi	r2,r2,255
 4000780:	1009883a 	mov	r4,r2
 4000784:	40002a00 	call	40002a0 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setycmd);
 4000788:	00810374 	movhi	r2,1037
 400078c:	10906504 	addi	r2,r2,16788
 4000790:	10800617 	ldw	r2,24(r2)
 4000794:	1009883a 	mov	r4,r2
 4000798:	40002380 	call	4000238 <LCD_WR_CMD>
          LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 400079c:	e0bfff17 	ldw	r2,-4(fp)
 40007a0:	1004d23a 	srli	r2,r2,8
 40007a4:	1009883a 	mov	r4,r2
 40007a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
 40007ac:	e0bfff17 	ldw	r2,-4(fp)
 40007b0:	10803fcc 	andi	r2,r2,255
 40007b4:	1009883a 	mov	r4,r2
 40007b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
 40007bc:	00008506 	br	40009d4 <LCD_SetCursor+0x2c0>
     }else if(lcddev.id==0X1963){
 40007c0:	00810374 	movhi	r2,1037
 40007c4:	10906504 	addi	r2,r2,16788
 40007c8:	10800217 	ldw	r2,8(r2)
 40007cc:	108658d8 	cmpnei	r2,r2,6499
 40007d0:	1000551e 	bne	r2,zero,4000928 <LCD_SetCursor+0x214>
          if(lcddev.dir==0)//x坐标需要变换
 40007d4:	00810374 	movhi	r2,1037
 40007d8:	10906504 	addi	r2,r2,16788
 40007dc:	10800303 	ldbu	r2,12(r2)
 40007e0:	10803fcc 	andi	r2,r2,255
 40007e4:	1000191e 	bne	r2,zero,400084c <LCD_SetCursor+0x138>
          {
               Xpos=lcddev.width-1-Xpos;
 40007e8:	00810374 	movhi	r2,1037
 40007ec:	10906504 	addi	r2,r2,16788
 40007f0:	10c00017 	ldw	r3,0(r2)
 40007f4:	e0bffe17 	ldw	r2,-8(fp)
 40007f8:	1885c83a 	sub	r2,r3,r2
 40007fc:	10bfffc4 	addi	r2,r2,-1
 4000800:	e0bffe15 	stw	r2,-8(fp)
               LCD_WR_CMD(lcddev.setxcmd);
 4000804:	00810374 	movhi	r2,1037
 4000808:	10906504 	addi	r2,r2,16788
 400080c:	10800517 	ldw	r2,20(r2)
 4000810:	1009883a 	mov	r4,r2
 4000814:	40002380 	call	4000238 <LCD_WR_CMD>
               LCD_WR_DATA(0);LCD_WR_DATA(0);
 4000818:	0009883a 	mov	r4,zero
 400081c:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000820:	0009883a 	mov	r4,zero
 4000824:	40002a00 	call	40002a0 <LCD_WR_DATA>
               LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 4000828:	e0bffe17 	ldw	r2,-8(fp)
 400082c:	1004d23a 	srli	r2,r2,8
 4000830:	1009883a 	mov	r4,r2
 4000834:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000838:	e0bffe17 	ldw	r2,-8(fp)
 400083c:	10803fcc 	andi	r2,r2,255
 4000840:	1009883a 	mov	r4,r2
 4000844:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000848:	00001b06 	br	40008b8 <LCD_SetCursor+0x1a4>
          }else{
               LCD_WR_CMD(lcddev.setxcmd);
 400084c:	00810374 	movhi	r2,1037
 4000850:	10906504 	addi	r2,r2,16788
 4000854:	10800517 	ldw	r2,20(r2)
 4000858:	1009883a 	mov	r4,r2
 400085c:	40002380 	call	4000238 <LCD_WR_CMD>
               LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 4000860:	e0bffe17 	ldw	r2,-8(fp)
 4000864:	1004d23a 	srli	r2,r2,8
 4000868:	1009883a 	mov	r4,r2
 400086c:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000870:	e0bffe17 	ldw	r2,-8(fp)
 4000874:	10803fcc 	andi	r2,r2,255
 4000878:	1009883a 	mov	r4,r2
 400087c:	40002a00 	call	40002a0 <LCD_WR_DATA>
               LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 4000880:	00810374 	movhi	r2,1037
 4000884:	10906504 	addi	r2,r2,16788
 4000888:	10800017 	ldw	r2,0(r2)
 400088c:	10bfffc4 	addi	r2,r2,-1
 4000890:	1004d23a 	srli	r2,r2,8
 4000894:	1009883a 	mov	r4,r2
 4000898:	40002a00 	call	40002a0 <LCD_WR_DATA>
 400089c:	00810374 	movhi	r2,1037
 40008a0:	10906504 	addi	r2,r2,16788
 40008a4:	10800017 	ldw	r2,0(r2)
 40008a8:	10bfffc4 	addi	r2,r2,-1
 40008ac:	10803fcc 	andi	r2,r2,255
 40008b0:	1009883a 	mov	r4,r2
 40008b4:	40002a00 	call	40002a0 <LCD_WR_DATA>
          }
          LCD_WR_CMD(lcddev.setycmd);
 40008b8:	00810374 	movhi	r2,1037
 40008bc:	10906504 	addi	r2,r2,16788
 40008c0:	10800617 	ldw	r2,24(r2)
 40008c4:	1009883a 	mov	r4,r2
 40008c8:	40002380 	call	4000238 <LCD_WR_CMD>
          LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 40008cc:	e0bfff17 	ldw	r2,-4(fp)
 40008d0:	1004d23a 	srli	r2,r2,8
 40008d4:	1009883a 	mov	r4,r2
 40008d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
 40008dc:	e0bfff17 	ldw	r2,-4(fp)
 40008e0:	10803fcc 	andi	r2,r2,255
 40008e4:	1009883a 	mov	r4,r2
 40008e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
          LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 40008ec:	00810374 	movhi	r2,1037
 40008f0:	10906504 	addi	r2,r2,16788
 40008f4:	10800117 	ldw	r2,4(r2)
 40008f8:	10bfffc4 	addi	r2,r2,-1
 40008fc:	1004d23a 	srli	r2,r2,8
 4000900:	1009883a 	mov	r4,r2
 4000904:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000908:	00810374 	movhi	r2,1037
 400090c:	10906504 	addi	r2,r2,16788
 4000910:	10800117 	ldw	r2,4(r2)
 4000914:	10bfffc4 	addi	r2,r2,-1
 4000918:	10803fcc 	andi	r2,r2,255
 400091c:	1009883a 	mov	r4,r2
 4000920:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000924:	00002b06 	br	40009d4 <LCD_SetCursor+0x2c0>

     }else if(lcddev.id==0X5510) {
 4000928:	00810374 	movhi	r2,1037
 400092c:	10906504 	addi	r2,r2,16788
 4000930:	10800217 	ldw	r2,8(r2)
 4000934:	10954418 	cmpnei	r2,r2,21776
 4000938:	1000261e 	bne	r2,zero,40009d4 <LCD_SetCursor+0x2c0>
          LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 400093c:	00810374 	movhi	r2,1037
 4000940:	10906504 	addi	r2,r2,16788
 4000944:	10800517 	ldw	r2,20(r2)
 4000948:	1009883a 	mov	r4,r2
 400094c:	40002380 	call	4000238 <LCD_WR_CMD>
 4000950:	e0bffe17 	ldw	r2,-8(fp)
 4000954:	1004d23a 	srli	r2,r2,8
 4000958:	1009883a 	mov	r4,r2
 400095c:	40002a00 	call	40002a0 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 4000960:	00810374 	movhi	r2,1037
 4000964:	10906504 	addi	r2,r2,16788
 4000968:	10800517 	ldw	r2,20(r2)
 400096c:	10800044 	addi	r2,r2,1
 4000970:	1009883a 	mov	r4,r2
 4000974:	40002380 	call	4000238 <LCD_WR_CMD>
 4000978:	e0bffe17 	ldw	r2,-8(fp)
 400097c:	10803fcc 	andi	r2,r2,255
 4000980:	1009883a 	mov	r4,r2
 4000984:	40002a00 	call	40002a0 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 4000988:	00810374 	movhi	r2,1037
 400098c:	10906504 	addi	r2,r2,16788
 4000990:	10800617 	ldw	r2,24(r2)
 4000994:	1009883a 	mov	r4,r2
 4000998:	40002380 	call	4000238 <LCD_WR_CMD>
 400099c:	e0bfff17 	ldw	r2,-4(fp)
 40009a0:	1004d23a 	srli	r2,r2,8
 40009a4:	1009883a 	mov	r4,r2
 40009a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
          LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 40009ac:	00810374 	movhi	r2,1037
 40009b0:	10906504 	addi	r2,r2,16788
 40009b4:	10800617 	ldw	r2,24(r2)
 40009b8:	10800044 	addi	r2,r2,1
 40009bc:	1009883a 	mov	r4,r2
 40009c0:	40002380 	call	4000238 <LCD_WR_CMD>
 40009c4:	e0bfff17 	ldw	r2,-4(fp)
 40009c8:	10803fcc 	andi	r2,r2,255
 40009cc:	1009883a 	mov	r4,r2
 40009d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
     }
}
 40009d4:	e037883a 	mov	sp,fp
 40009d8:	dfc00117 	ldw	ra,4(sp)
 40009dc:	df000017 	ldw	fp,0(sp)
 40009e0:	dec00204 	addi	sp,sp,8
 40009e4:	f800283a 	ret

040009e8 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(u8 dir)
{
 40009e8:	defffa04 	addi	sp,sp,-24
 40009ec:	dfc00515 	stw	ra,20(sp)
 40009f0:	df000415 	stw	fp,16(sp)
 40009f4:	df000404 	addi	fp,sp,16
 40009f8:	2005883a 	mov	r2,r4
 40009fc:	e0bfff05 	stb	r2,-4(fp)
    u16 regval=0;
 4000a00:	e03ffc15 	stw	zero,-16(fp)
    u16 dirreg=0;
 4000a04:	e03ffd15 	stw	zero,-12(fp)
    u16 temp;
    if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 4000a08:	00810374 	movhi	r2,1037
 4000a0c:	10906504 	addi	r2,r2,16788
 4000a10:	10800303 	ldbu	r2,12(r2)
 4000a14:	10803fcc 	andi	r2,r2,255
 4000a18:	10800058 	cmpnei	r2,r2,1
 4000a1c:	1000051e 	bne	r2,zero,4000a34 <LCD_Scan_Dir+0x4c>
 4000a20:	00810374 	movhi	r2,1037
 4000a24:	10906504 	addi	r2,r2,16788
 4000a28:	10800217 	ldw	r2,8(r2)
 4000a2c:	108658d8 	cmpnei	r2,r2,6499
 4000a30:	10000a1e 	bne	r2,zero,4000a5c <LCD_Scan_Dir+0x74>
 4000a34:	00810374 	movhi	r2,1037
 4000a38:	10906504 	addi	r2,r2,16788
 4000a3c:	10800303 	ldbu	r2,12(r2)
 4000a40:	10803fcc 	andi	r2,r2,255
 4000a44:	10002e1e 	bne	r2,zero,4000b00 <LCD_Scan_Dir+0x118>
 4000a48:	00810374 	movhi	r2,1037
 4000a4c:	10906504 	addi	r2,r2,16788
 4000a50:	10800217 	ldw	r2,8(r2)
 4000a54:	108658d8 	cmpnei	r2,r2,6499
 4000a58:	1000291e 	bne	r2,zero,4000b00 <LCD_Scan_Dir+0x118>
    {
         switch(dir) {     //方向转换
 4000a5c:	e0bfff03 	ldbu	r2,-4(fp)
 4000a60:	10c00228 	cmpgeui	r3,r2,8
 4000a64:	1800261e 	bne	r3,zero,4000b00 <LCD_Scan_Dir+0x118>
 4000a68:	1085883a 	add	r2,r2,r2
 4000a6c:	1087883a 	add	r3,r2,r2
 4000a70:	00810034 	movhi	r2,1024
 4000a74:	1082a104 	addi	r2,r2,2692
 4000a78:	1885883a 	add	r2,r3,r2
 4000a7c:	10800017 	ldw	r2,0(r2)
 4000a80:	1000683a 	jmp	r2
 4000a84:	04000aa4 	muli	r16,zero,42
 4000a88:	04000ab0 	cmpltui	r16,zero,42
 4000a8c:	04000abc 	xorhi	r16,zero,42
 4000a90:	04000ac8 	cmpgei	r16,zero,43
 4000a94:	04000ad4 	movui	r16,43
 4000a98:	04000ae0 	cmpeqi	r16,zero,43
 4000a9c:	04000ae8 	cmpgeui	r16,zero,43
 4000aa0:	04000af4 	movhi	r16,43
         case 0:dir=6;break;
 4000aa4:	00800184 	movi	r2,6
 4000aa8:	e0bfff05 	stb	r2,-4(fp)
 4000aac:	00001406 	br	4000b00 <LCD_Scan_Dir+0x118>
         case 1:dir=7;break;
 4000ab0:	008001c4 	movi	r2,7
 4000ab4:	e0bfff05 	stb	r2,-4(fp)
 4000ab8:	00001106 	br	4000b00 <LCD_Scan_Dir+0x118>
         case 2:dir=4;break;
 4000abc:	00800104 	movi	r2,4
 4000ac0:	e0bfff05 	stb	r2,-4(fp)
 4000ac4:	00000e06 	br	4000b00 <LCD_Scan_Dir+0x118>
         case 3:dir=5;break;
 4000ac8:	00800144 	movi	r2,5
 4000acc:	e0bfff05 	stb	r2,-4(fp)
 4000ad0:	00000b06 	br	4000b00 <LCD_Scan_Dir+0x118>
         case 4:dir=1;break;
 4000ad4:	00800044 	movi	r2,1
 4000ad8:	e0bfff05 	stb	r2,-4(fp)
 4000adc:	00000806 	br	4000b00 <LCD_Scan_Dir+0x118>
         case 5:dir=0;break;
 4000ae0:	e03fff05 	stb	zero,-4(fp)
 4000ae4:	00000606 	br	4000b00 <LCD_Scan_Dir+0x118>
         case 6:dir=3;break;
 4000ae8:	008000c4 	movi	r2,3
 4000aec:	e0bfff05 	stb	r2,-4(fp)
 4000af0:	00000306 	br	4000b00 <LCD_Scan_Dir+0x118>
         case 7:dir=2;break;
 4000af4:	00800084 	movi	r2,2
 4000af8:	e0bfff05 	stb	r2,-4(fp)
 4000afc:	0001883a 	nop
         }
    }
    if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 4000b00:	00810374 	movhi	r2,1037
 4000b04:	10906504 	addi	r2,r2,16788
 4000b08:	10c00217 	ldw	r3,8(r2)
 4000b0c:	00a4d054 	movui	r2,37697
 4000b10:	18800f26 	beq	r3,r2,4000b50 <LCD_Scan_Dir+0x168>
 4000b14:	00810374 	movhi	r2,1037
 4000b18:	10906504 	addi	r2,r2,16788
 4000b1c:	10800217 	ldw	r2,8(r2)
 4000b20:	1094c420 	cmpeqi	r2,r2,21264
 4000b24:	10000a1e 	bne	r2,zero,4000b50 <LCD_Scan_Dir+0x168>
 4000b28:	00810374 	movhi	r2,1037
 4000b2c:	10906504 	addi	r2,r2,16788
 4000b30:	10800217 	ldw	r2,8(r2)
 4000b34:	10954420 	cmpeqi	r2,r2,21776
 4000b38:	1000051e 	bne	r2,zero,4000b50 <LCD_Scan_Dir+0x168>
 4000b3c:	00810374 	movhi	r2,1037
 4000b40:	10906504 	addi	r2,r2,16788
 4000b44:	10800217 	ldw	r2,8(r2)
 4000b48:	108658d8 	cmpnei	r2,r2,6499
 4000b4c:	1001071e 	bne	r2,zero,4000f6c <LCD_Scan_Dir+0x584>
    {
        switch(dir) {
 4000b50:	e0bfff03 	ldbu	r2,-4(fp)
 4000b54:	10c00228 	cmpgeui	r3,r2,8
 4000b58:	18002c1e 	bne	r3,zero,4000c0c <LCD_Scan_Dir+0x224>
 4000b5c:	1085883a 	add	r2,r2,r2
 4000b60:	1087883a 	add	r3,r2,r2
 4000b64:	00810034 	movhi	r2,1024
 4000b68:	1082de04 	addi	r2,r2,2936
 4000b6c:	1885883a 	add	r2,r3,r2
 4000b70:	10800017 	ldw	r2,0(r2)
 4000b74:	1000683a 	jmp	r2
 4000b78:	04000c08 	cmpgei	r16,zero,48
 4000b7c:	04000b98 	cmpnei	r16,zero,46
 4000b80:	04000ba8 	cmpgeui	r16,zero,46
 4000b84:	04000bb8 	rdprs	r16,zero,46
 4000b88:	04000bc8 	cmpgei	r16,zero,47
 4000b8c:	04000bd8 	cmpnei	r16,zero,47
 4000b90:	04000be8 	cmpgeui	r16,zero,47
 4000b94:	04000bf8 	rdprs	r16,zero,47
        case L2R_U2D://从左到右,从上到下
             regval|=(0<<7)|(0<<6)|(0<<5);
             break;
        case L2R_D2U://从左到右,从下到上
             regval|=(1<<7)|(0<<6)|(0<<5);
 4000b98:	e0bffc17 	ldw	r2,-16(fp)
 4000b9c:	10802014 	ori	r2,r2,128
 4000ba0:	e0bffc15 	stw	r2,-16(fp)
             break;
 4000ba4:	00001906 	br	4000c0c <LCD_Scan_Dir+0x224>
        case R2L_U2D://从右到左,从上到下
             regval|=(0<<7)|(1<<6)|(0<<5);
 4000ba8:	e0bffc17 	ldw	r2,-16(fp)
 4000bac:	10801014 	ori	r2,r2,64
 4000bb0:	e0bffc15 	stw	r2,-16(fp)
             break;
 4000bb4:	00001506 	br	4000c0c <LCD_Scan_Dir+0x224>
        case R2L_D2U://从右到左,从下到上
             regval|=(1<<7)|(1<<6)|(0<<5);
 4000bb8:	e0bffc17 	ldw	r2,-16(fp)
 4000bbc:	10803014 	ori	r2,r2,192
 4000bc0:	e0bffc15 	stw	r2,-16(fp)
             break;
 4000bc4:	00001106 	br	4000c0c <LCD_Scan_Dir+0x224>
        case U2D_L2R://从上到下,从左到右
             regval|=(0<<7)|(0<<6)|(1<<5);
 4000bc8:	e0bffc17 	ldw	r2,-16(fp)
 4000bcc:	10800814 	ori	r2,r2,32
 4000bd0:	e0bffc15 	stw	r2,-16(fp)
             break;
 4000bd4:	00000d06 	br	4000c0c <LCD_Scan_Dir+0x224>
        case U2D_R2L://从上到下,从右到左
             regval|=(0<<7)|(1<<6)|(1<<5);
 4000bd8:	e0bffc17 	ldw	r2,-16(fp)
 4000bdc:	10801814 	ori	r2,r2,96
 4000be0:	e0bffc15 	stw	r2,-16(fp)
             break;
 4000be4:	00000906 	br	4000c0c <LCD_Scan_Dir+0x224>
        case D2U_L2R://从下到上,从左到右
             regval|=(1<<7)|(0<<6)|(1<<5);
 4000be8:	e0bffc17 	ldw	r2,-16(fp)
 4000bec:	10802814 	ori	r2,r2,160
 4000bf0:	e0bffc15 	stw	r2,-16(fp)
             break;
 4000bf4:	00000506 	br	4000c0c <LCD_Scan_Dir+0x224>
        case D2U_R2L://从下到上,从右到左
             regval|=(1<<7)|(1<<6)|(1<<5);
 4000bf8:	e0bffc17 	ldw	r2,-16(fp)
 4000bfc:	10803814 	ori	r2,r2,224
 4000c00:	e0bffc15 	stw	r2,-16(fp)
             break;
 4000c04:	00000106 	br	4000c0c <LCD_Scan_Dir+0x224>
    if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
    {
        switch(dir) {
        case L2R_U2D://从左到右,从上到下
             regval|=(0<<7)|(0<<6)|(0<<5);
             break;
 4000c08:	0001883a 	nop
             break;
        case D2U_R2L://从下到上,从右到左
             regval|=(1<<7)|(1<<6)|(1<<5);
             break;
        }
        if(lcddev.id==0X5510)
 4000c0c:	00810374 	movhi	r2,1037
 4000c10:	10906504 	addi	r2,r2,16788
 4000c14:	10800217 	ldw	r2,8(r2)
 4000c18:	10954418 	cmpnei	r2,r2,21776
 4000c1c:	1000031e 	bne	r2,zero,4000c2c <LCD_Scan_Dir+0x244>
            dirreg=0X3600;
 4000c20:	008d8004 	movi	r2,13824
 4000c24:	e0bffd15 	stw	r2,-12(fp)
 4000c28:	00000206 	br	4000c34 <LCD_Scan_Dir+0x24c>
        else dirreg=0X36;
 4000c2c:	00800d84 	movi	r2,54
 4000c30:	e0bffd15 	stw	r2,-12(fp)
        if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))
 4000c34:	00810374 	movhi	r2,1037
 4000c38:	10906504 	addi	r2,r2,16788
 4000c3c:	10800217 	ldw	r2,8(r2)
 4000c40:	1094c420 	cmpeqi	r2,r2,21264
 4000c44:	10000d1e 	bne	r2,zero,4000c7c <LCD_Scan_Dir+0x294>
 4000c48:	00810374 	movhi	r2,1037
 4000c4c:	10906504 	addi	r2,r2,16788
 4000c50:	10800217 	ldw	r2,8(r2)
 4000c54:	10954420 	cmpeqi	r2,r2,21776
 4000c58:	1000081e 	bne	r2,zero,4000c7c <LCD_Scan_Dir+0x294>
 4000c5c:	00810374 	movhi	r2,1037
 4000c60:	10906504 	addi	r2,r2,16788
 4000c64:	10800217 	ldw	r2,8(r2)
 4000c68:	108658e0 	cmpeqi	r2,r2,6499
 4000c6c:	1000031e 	bne	r2,zero,4000c7c <LCD_Scan_Dir+0x294>
             regval|=0X08;//5310/5510/1963不需要BGR
 4000c70:	e0bffc17 	ldw	r2,-16(fp)
 4000c74:	10800214 	ori	r2,r2,8
 4000c78:	e0bffc15 	stw	r2,-16(fp)
        LCD_WriteReg(dirreg,regval);
 4000c7c:	e13ffd17 	ldw	r4,-12(fp)
 4000c80:	e17ffc17 	ldw	r5,-16(fp)
 4000c84:	40003680 	call	4000368 <LCD_WriteReg>
        if(lcddev.id!=0X1963)//1963不做坐标处理
 4000c88:	00810374 	movhi	r2,1037
 4000c8c:	10906504 	addi	r2,r2,16788
 4000c90:	10800217 	ldw	r2,8(r2)
 4000c94:	108658e0 	cmpeqi	r2,r2,6499
 4000c98:	10002e1e 	bne	r2,zero,4000d54 <LCD_Scan_Dir+0x36c>
        {
            if(regval&0X20) {
 4000c9c:	e0bffc17 	ldw	r2,-16(fp)
 4000ca0:	1080080c 	andi	r2,r2,32
 4000ca4:	10001626 	beq	r2,zero,4000d00 <LCD_Scan_Dir+0x318>
                 if(lcddev.width<lcddev.height) {    //交换X,Y
 4000ca8:	00810374 	movhi	r2,1037
 4000cac:	10906504 	addi	r2,r2,16788
 4000cb0:	10c00017 	ldw	r3,0(r2)
 4000cb4:	00810374 	movhi	r2,1037
 4000cb8:	10906504 	addi	r2,r2,16788
 4000cbc:	10800117 	ldw	r2,4(r2)
 4000cc0:	1880242e 	bgeu	r3,r2,4000d54 <LCD_Scan_Dir+0x36c>
                      temp=lcddev.width;
 4000cc4:	00810374 	movhi	r2,1037
 4000cc8:	10906504 	addi	r2,r2,16788
 4000ccc:	10800017 	ldw	r2,0(r2)
 4000cd0:	e0bffe15 	stw	r2,-8(fp)
                      lcddev.width=lcddev.height;
 4000cd4:	00810374 	movhi	r2,1037
 4000cd8:	10906504 	addi	r2,r2,16788
 4000cdc:	10c00117 	ldw	r3,4(r2)
 4000ce0:	00810374 	movhi	r2,1037
 4000ce4:	10906504 	addi	r2,r2,16788
 4000ce8:	10c00015 	stw	r3,0(r2)
                      lcddev.height=temp;
 4000cec:	00810374 	movhi	r2,1037
 4000cf0:	10906504 	addi	r2,r2,16788
 4000cf4:	e0fffe17 	ldw	r3,-8(fp)
 4000cf8:	10c00115 	stw	r3,4(r2)
 4000cfc:	00001506 	br	4000d54 <LCD_Scan_Dir+0x36c>
                 }
            }else {
                 if(lcddev.width>lcddev.height) {    //交换X,Y
 4000d00:	00810374 	movhi	r2,1037
 4000d04:	10906504 	addi	r2,r2,16788
 4000d08:	10800017 	ldw	r2,0(r2)
 4000d0c:	00c10374 	movhi	r3,1037
 4000d10:	18d06504 	addi	r3,r3,16788
 4000d14:	18c00117 	ldw	r3,4(r3)
 4000d18:	18800e2e 	bgeu	r3,r2,4000d54 <LCD_Scan_Dir+0x36c>
                      temp=lcddev.width;
 4000d1c:	00810374 	movhi	r2,1037
 4000d20:	10906504 	addi	r2,r2,16788
 4000d24:	10800017 	ldw	r2,0(r2)
 4000d28:	e0bffe15 	stw	r2,-8(fp)
                      lcddev.width=lcddev.height;
 4000d2c:	00810374 	movhi	r2,1037
 4000d30:	10906504 	addi	r2,r2,16788
 4000d34:	10c00117 	ldw	r3,4(r2)
 4000d38:	00810374 	movhi	r2,1037
 4000d3c:	10906504 	addi	r2,r2,16788
 4000d40:	10c00015 	stw	r3,0(r2)
                      lcddev.height=temp;
 4000d44:	00810374 	movhi	r2,1037
 4000d48:	10906504 	addi	r2,r2,16788
 4000d4c:	e0fffe17 	ldw	r3,-8(fp)
 4000d50:	10c00115 	stw	r3,4(r2)
                 }
            }
          }
        if(lcddev.id==0X5510)
 4000d54:	00810374 	movhi	r2,1037
 4000d58:	10906504 	addi	r2,r2,16788
 4000d5c:	10800217 	ldw	r2,8(r2)
 4000d60:	10954418 	cmpnei	r2,r2,21776
 4000d64:	1000531e 	bne	r2,zero,4000eb4 <LCD_Scan_Dir+0x4cc>
        {
             LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(0);
 4000d68:	00810374 	movhi	r2,1037
 4000d6c:	10906504 	addi	r2,r2,16788
 4000d70:	10800517 	ldw	r2,20(r2)
 4000d74:	1009883a 	mov	r4,r2
 4000d78:	40002380 	call	4000238 <LCD_WR_CMD>
 4000d7c:	0009883a 	mov	r4,zero
 4000d80:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(0);
 4000d84:	00810374 	movhi	r2,1037
 4000d88:	10906504 	addi	r2,r2,16788
 4000d8c:	10800517 	ldw	r2,20(r2)
 4000d90:	10800044 	addi	r2,r2,1
 4000d94:	1009883a 	mov	r4,r2
 4000d98:	40002380 	call	4000238 <LCD_WR_CMD>
 4000d9c:	0009883a 	mov	r4,zero
 4000da0:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 4000da4:	00810374 	movhi	r2,1037
 4000da8:	10906504 	addi	r2,r2,16788
 4000dac:	10800517 	ldw	r2,20(r2)
 4000db0:	10800084 	addi	r2,r2,2
 4000db4:	1009883a 	mov	r4,r2
 4000db8:	40002380 	call	4000238 <LCD_WR_CMD>
 4000dbc:	00810374 	movhi	r2,1037
 4000dc0:	10906504 	addi	r2,r2,16788
 4000dc4:	10800017 	ldw	r2,0(r2)
 4000dc8:	10bfffc4 	addi	r2,r2,-1
 4000dcc:	1004d23a 	srli	r2,r2,8
 4000dd0:	1009883a 	mov	r4,r2
 4000dd4:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 4000dd8:	00810374 	movhi	r2,1037
 4000ddc:	10906504 	addi	r2,r2,16788
 4000de0:	10800517 	ldw	r2,20(r2)
 4000de4:	108000c4 	addi	r2,r2,3
 4000de8:	1009883a 	mov	r4,r2
 4000dec:	40002380 	call	4000238 <LCD_WR_CMD>
 4000df0:	00810374 	movhi	r2,1037
 4000df4:	10906504 	addi	r2,r2,16788
 4000df8:	10800017 	ldw	r2,0(r2)
 4000dfc:	10bfffc4 	addi	r2,r2,-1
 4000e00:	10803fcc 	andi	r2,r2,255
 4000e04:	1009883a 	mov	r4,r2
 4000e08:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(0);
 4000e0c:	00810374 	movhi	r2,1037
 4000e10:	10906504 	addi	r2,r2,16788
 4000e14:	10800617 	ldw	r2,24(r2)
 4000e18:	1009883a 	mov	r4,r2
 4000e1c:	40002380 	call	4000238 <LCD_WR_CMD>
 4000e20:	0009883a 	mov	r4,zero
 4000e24:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(0);
 4000e28:	00810374 	movhi	r2,1037
 4000e2c:	10906504 	addi	r2,r2,16788
 4000e30:	10800617 	ldw	r2,24(r2)
 4000e34:	10800044 	addi	r2,r2,1
 4000e38:	1009883a 	mov	r4,r2
 4000e3c:	40002380 	call	4000238 <LCD_WR_CMD>
 4000e40:	0009883a 	mov	r4,zero
 4000e44:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 4000e48:	00810374 	movhi	r2,1037
 4000e4c:	10906504 	addi	r2,r2,16788
 4000e50:	10800617 	ldw	r2,24(r2)
 4000e54:	10800084 	addi	r2,r2,2
 4000e58:	1009883a 	mov	r4,r2
 4000e5c:	40002380 	call	4000238 <LCD_WR_CMD>
 4000e60:	00810374 	movhi	r2,1037
 4000e64:	10906504 	addi	r2,r2,16788
 4000e68:	10800117 	ldw	r2,4(r2)
 4000e6c:	10bfffc4 	addi	r2,r2,-1
 4000e70:	1004d23a 	srli	r2,r2,8
 4000e74:	1009883a 	mov	r4,r2
 4000e78:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 4000e7c:	00810374 	movhi	r2,1037
 4000e80:	10906504 	addi	r2,r2,16788
 4000e84:	10800617 	ldw	r2,24(r2)
 4000e88:	108000c4 	addi	r2,r2,3
 4000e8c:	1009883a 	mov	r4,r2
 4000e90:	40002380 	call	4000238 <LCD_WR_CMD>
 4000e94:	00810374 	movhi	r2,1037
 4000e98:	10906504 	addi	r2,r2,16788
 4000e9c:	10800117 	ldw	r2,4(r2)
 4000ea0:	10bfffc4 	addi	r2,r2,-1
 4000ea4:	10803fcc 	andi	r2,r2,255
 4000ea8:	1009883a 	mov	r4,r2
 4000eac:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000eb0:	00002e06 	br	4000f6c <LCD_Scan_Dir+0x584>
        }else {
             LCD_WR_CMD(lcddev.setxcmd);
 4000eb4:	00810374 	movhi	r2,1037
 4000eb8:	10906504 	addi	r2,r2,16788
 4000ebc:	10800517 	ldw	r2,20(r2)
 4000ec0:	1009883a 	mov	r4,r2
 4000ec4:	40002380 	call	4000238 <LCD_WR_CMD>
             LCD_WR_DATA(0);LCD_WR_DATA(0);
 4000ec8:	0009883a 	mov	r4,zero
 4000ecc:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000ed0:	0009883a 	mov	r4,zero
 4000ed4:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 4000ed8:	00810374 	movhi	r2,1037
 4000edc:	10906504 	addi	r2,r2,16788
 4000ee0:	10800017 	ldw	r2,0(r2)
 4000ee4:	10bfffc4 	addi	r2,r2,-1
 4000ee8:	1004d23a 	srli	r2,r2,8
 4000eec:	1009883a 	mov	r4,r2
 4000ef0:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000ef4:	00810374 	movhi	r2,1037
 4000ef8:	10906504 	addi	r2,r2,16788
 4000efc:	10800017 	ldw	r2,0(r2)
 4000f00:	10bfffc4 	addi	r2,r2,-1
 4000f04:	10803fcc 	andi	r2,r2,255
 4000f08:	1009883a 	mov	r4,r2
 4000f0c:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_CMD(lcddev.setycmd);
 4000f10:	00810374 	movhi	r2,1037
 4000f14:	10906504 	addi	r2,r2,16788
 4000f18:	10800617 	ldw	r2,24(r2)
 4000f1c:	1009883a 	mov	r4,r2
 4000f20:	40002380 	call	4000238 <LCD_WR_CMD>
             LCD_WR_DATA(0);LCD_WR_DATA(0);
 4000f24:	0009883a 	mov	r4,zero
 4000f28:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000f2c:	0009883a 	mov	r4,zero
 4000f30:	40002a00 	call	40002a0 <LCD_WR_DATA>
             LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 4000f34:	00810374 	movhi	r2,1037
 4000f38:	10906504 	addi	r2,r2,16788
 4000f3c:	10800117 	ldw	r2,4(r2)
 4000f40:	10bfffc4 	addi	r2,r2,-1
 4000f44:	1004d23a 	srli	r2,r2,8
 4000f48:	1009883a 	mov	r4,r2
 4000f4c:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4000f50:	00810374 	movhi	r2,1037
 4000f54:	10906504 	addi	r2,r2,16788
 4000f58:	10800117 	ldw	r2,4(r2)
 4000f5c:	10bfffc4 	addi	r2,r2,-1
 4000f60:	10803fcc 	andi	r2,r2,255
 4000f64:	1009883a 	mov	r4,r2
 4000f68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        }
    }
}
 4000f6c:	e037883a 	mov	sp,fp
 4000f70:	dfc00117 	ldw	ra,4(sp)
 4000f74:	df000017 	ldw	fp,0(sp)
 4000f78:	dec00204 	addi	sp,sp,8
 4000f7c:	f800283a 	ret

04000f80 <LCD_DrawPoint>:

//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(u16 x,u16 y)
{
 4000f80:	defffc04 	addi	sp,sp,-16
 4000f84:	dfc00315 	stw	ra,12(sp)
 4000f88:	df000215 	stw	fp,8(sp)
 4000f8c:	df000204 	addi	fp,sp,8
 4000f90:	e13ffe15 	stw	r4,-8(fp)
 4000f94:	e17fff15 	stw	r5,-4(fp)
    LCD_SetCursor(x,y);        //设置光标位置
 4000f98:	e13ffe17 	ldw	r4,-8(fp)
 4000f9c:	e17fff17 	ldw	r5,-4(fp)
 4000fa0:	40007140 	call	4000714 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();    //开始写入GRAM
 4000fa4:	40003e00 	call	40003e0 <LCD_WriteRAM_Prepare>
    LCD_WR_DATA(POINT_COLOR);
 4000fa8:	d0a00017 	ldw	r2,-32768(gp)
 4000fac:	1009883a 	mov	r4,r2
 4000fb0:	40002a00 	call	40002a0 <LCD_WR_DATA>
}
 4000fb4:	e037883a 	mov	sp,fp
 4000fb8:	dfc00117 	ldw	ra,4(sp)
 4000fbc:	df000017 	ldw	fp,0(sp)
 4000fc0:	dec00204 	addi	sp,sp,8
 4000fc4:	f800283a 	ret

04000fc8 <LCD_Fast_DrawPoint>:

//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x,u16 y,u32 color)
{
 4000fc8:	defffb04 	addi	sp,sp,-20
 4000fcc:	dfc00415 	stw	ra,16(sp)
 4000fd0:	df000315 	stw	fp,12(sp)
 4000fd4:	df000304 	addi	fp,sp,12
 4000fd8:	e13ffd15 	stw	r4,-12(fp)
 4000fdc:	e17ffe15 	stw	r5,-8(fp)
 4000fe0:	e1bfff15 	stw	r6,-4(fp)
    if(lcddev.id==0X9341||lcddev.id==0X5310)
 4000fe4:	00810374 	movhi	r2,1037
 4000fe8:	10906504 	addi	r2,r2,16788
 4000fec:	10c00217 	ldw	r3,8(r2)
 4000ff0:	00a4d054 	movui	r2,37697
 4000ff4:	18800526 	beq	r3,r2,400100c <LCD_Fast_DrawPoint+0x44>
 4000ff8:	00810374 	movhi	r2,1037
 4000ffc:	10906504 	addi	r2,r2,16788
 4001000:	10800217 	ldw	r2,8(r2)
 4001004:	1094c418 	cmpnei	r2,r2,21264
 4001008:	10001b1e 	bne	r2,zero,4001078 <LCD_Fast_DrawPoint+0xb0>
    {
         LCD_WR_CMD(lcddev.setxcmd);
 400100c:	00810374 	movhi	r2,1037
 4001010:	10906504 	addi	r2,r2,16788
 4001014:	10800517 	ldw	r2,20(r2)
 4001018:	1009883a 	mov	r4,r2
 400101c:	40002380 	call	4000238 <LCD_WR_CMD>
         LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 4001020:	e0bffd17 	ldw	r2,-12(fp)
 4001024:	1004d23a 	srli	r2,r2,8
 4001028:	1009883a 	mov	r4,r2
 400102c:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4001030:	e0bffd17 	ldw	r2,-12(fp)
 4001034:	10803fcc 	andi	r2,r2,255
 4001038:	1009883a 	mov	r4,r2
 400103c:	40002a00 	call	40002a0 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd);
 4001040:	00810374 	movhi	r2,1037
 4001044:	10906504 	addi	r2,r2,16788
 4001048:	10800617 	ldw	r2,24(r2)
 400104c:	1009883a 	mov	r4,r2
 4001050:	40002380 	call	4000238 <LCD_WR_CMD>
         LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 4001054:	e0bffe17 	ldw	r2,-8(fp)
 4001058:	1004d23a 	srli	r2,r2,8
 400105c:	1009883a 	mov	r4,r2
 4001060:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4001064:	e0bffe17 	ldw	r2,-8(fp)
 4001068:	10803fcc 	andi	r2,r2,255
 400106c:	1009883a 	mov	r4,r2
 4001070:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4001074:	00006706 	br	4001214 <LCD_Fast_DrawPoint+0x24c>
    }else if(lcddev.id==0X5510)
 4001078:	00810374 	movhi	r2,1037
 400107c:	10906504 	addi	r2,r2,16788
 4001080:	10800217 	ldw	r2,8(r2)
 4001084:	10954418 	cmpnei	r2,r2,21776
 4001088:	1000271e 	bne	r2,zero,4001128 <LCD_Fast_DrawPoint+0x160>
    {
         LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 400108c:	00810374 	movhi	r2,1037
 4001090:	10906504 	addi	r2,r2,16788
 4001094:	10800517 	ldw	r2,20(r2)
 4001098:	1009883a 	mov	r4,r2
 400109c:	40002380 	call	4000238 <LCD_WR_CMD>
 40010a0:	e0bffd17 	ldw	r2,-12(fp)
 40010a4:	1004d23a 	srli	r2,r2,8
 40010a8:	1009883a 	mov	r4,r2
 40010ac:	40002a00 	call	40002a0 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 40010b0:	00810374 	movhi	r2,1037
 40010b4:	10906504 	addi	r2,r2,16788
 40010b8:	10800517 	ldw	r2,20(r2)
 40010bc:	10800044 	addi	r2,r2,1
 40010c0:	1009883a 	mov	r4,r2
 40010c4:	40002380 	call	4000238 <LCD_WR_CMD>
 40010c8:	e0bffd17 	ldw	r2,-12(fp)
 40010cc:	10803fcc 	andi	r2,r2,255
 40010d0:	1009883a 	mov	r4,r2
 40010d4:	40002a00 	call	40002a0 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(y>>8);
 40010d8:	00810374 	movhi	r2,1037
 40010dc:	10906504 	addi	r2,r2,16788
 40010e0:	10800617 	ldw	r2,24(r2)
 40010e4:	1009883a 	mov	r4,r2
 40010e8:	40002380 	call	4000238 <LCD_WR_CMD>
 40010ec:	e0bffe17 	ldw	r2,-8(fp)
 40010f0:	1004d23a 	srli	r2,r2,8
 40010f4:	1009883a 	mov	r4,r2
 40010f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 40010fc:	00810374 	movhi	r2,1037
 4001100:	10906504 	addi	r2,r2,16788
 4001104:	10800617 	ldw	r2,24(r2)
 4001108:	10800044 	addi	r2,r2,1
 400110c:	1009883a 	mov	r4,r2
 4001110:	40002380 	call	4000238 <LCD_WR_CMD>
 4001114:	e0bffe17 	ldw	r2,-8(fp)
 4001118:	10803fcc 	andi	r2,r2,255
 400111c:	1009883a 	mov	r4,r2
 4001120:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4001124:	00003b06 	br	4001214 <LCD_Fast_DrawPoint+0x24c>
    }else if(lcddev.id==0X1963)
 4001128:	00810374 	movhi	r2,1037
 400112c:	10906504 	addi	r2,r2,16788
 4001130:	10800217 	ldw	r2,8(r2)
 4001134:	108658d8 	cmpnei	r2,r2,6499
 4001138:	1000361e 	bne	r2,zero,4001214 <LCD_Fast_DrawPoint+0x24c>
    {
         if(lcddev.dir==0)x=lcddev.width-1-x;
 400113c:	00810374 	movhi	r2,1037
 4001140:	10906504 	addi	r2,r2,16788
 4001144:	10800303 	ldbu	r2,12(r2)
 4001148:	10803fcc 	andi	r2,r2,255
 400114c:	1000071e 	bne	r2,zero,400116c <LCD_Fast_DrawPoint+0x1a4>
 4001150:	00810374 	movhi	r2,1037
 4001154:	10906504 	addi	r2,r2,16788
 4001158:	10c00017 	ldw	r3,0(r2)
 400115c:	e0bffd17 	ldw	r2,-12(fp)
 4001160:	1885c83a 	sub	r2,r3,r2
 4001164:	10bfffc4 	addi	r2,r2,-1
 4001168:	e0bffd15 	stw	r2,-12(fp)
         LCD_WR_CMD(lcddev.setxcmd);
 400116c:	00810374 	movhi	r2,1037
 4001170:	10906504 	addi	r2,r2,16788
 4001174:	10800517 	ldw	r2,20(r2)
 4001178:	1009883a 	mov	r4,r2
 400117c:	40002380 	call	4000238 <LCD_WR_CMD>
         LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 4001180:	e0bffd17 	ldw	r2,-12(fp)
 4001184:	1004d23a 	srli	r2,r2,8
 4001188:	1009883a 	mov	r4,r2
 400118c:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4001190:	e0bffd17 	ldw	r2,-12(fp)
 4001194:	10803fcc 	andi	r2,r2,255
 4001198:	1009883a 	mov	r4,r2
 400119c:	40002a00 	call	40002a0 <LCD_WR_DATA>
         LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 40011a0:	e0bffd17 	ldw	r2,-12(fp)
 40011a4:	1004d23a 	srli	r2,r2,8
 40011a8:	1009883a 	mov	r4,r2
 40011ac:	40002a00 	call	40002a0 <LCD_WR_DATA>
 40011b0:	e0bffd17 	ldw	r2,-12(fp)
 40011b4:	10803fcc 	andi	r2,r2,255
 40011b8:	1009883a 	mov	r4,r2
 40011bc:	40002a00 	call	40002a0 <LCD_WR_DATA>
         LCD_WR_CMD(lcddev.setycmd);
 40011c0:	00810374 	movhi	r2,1037
 40011c4:	10906504 	addi	r2,r2,16788
 40011c8:	10800617 	ldw	r2,24(r2)
 40011cc:	1009883a 	mov	r4,r2
 40011d0:	40002380 	call	4000238 <LCD_WR_CMD>
         LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 40011d4:	e0bffe17 	ldw	r2,-8(fp)
 40011d8:	1004d23a 	srli	r2,r2,8
 40011dc:	1009883a 	mov	r4,r2
 40011e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
 40011e4:	e0bffe17 	ldw	r2,-8(fp)
 40011e8:	10803fcc 	andi	r2,r2,255
 40011ec:	1009883a 	mov	r4,r2
 40011f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
         LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 40011f4:	e0bffe17 	ldw	r2,-8(fp)
 40011f8:	1004d23a 	srli	r2,r2,8
 40011fc:	1009883a 	mov	r4,r2
 4001200:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4001204:	e0bffe17 	ldw	r2,-8(fp)
 4001208:	10803fcc 	andi	r2,r2,255
 400120c:	1009883a 	mov	r4,r2
 4001210:	40002a00 	call	40002a0 <LCD_WR_DATA>
    }
    LCD_WR_CMD(lcddev.wramcmd);
 4001214:	00810374 	movhi	r2,1037
 4001218:	10906504 	addi	r2,r2,16788
 400121c:	10800417 	ldw	r2,16(r2)
 4001220:	1009883a 	mov	r4,r2
 4001224:	40002380 	call	4000238 <LCD_WR_CMD>
    LCD_WR_DATA(color);
 4001228:	e13fff17 	ldw	r4,-4(fp)
 400122c:	40002a00 	call	40002a0 <LCD_WR_DATA>
}
 4001230:	e037883a 	mov	sp,fp
 4001234:	dfc00117 	ldw	ra,4(sp)
 4001238:	df000017 	ldw	fp,0(sp)
 400123c:	dec00204 	addi	sp,sp,8
 4001240:	f800283a 	ret

04001244 <LCD_SSD_BackLightSet>:

//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
 4001244:	defffd04 	addi	sp,sp,-12
 4001248:	dfc00215 	stw	ra,8(sp)
 400124c:	df000115 	stw	fp,4(sp)
 4001250:	df000104 	addi	fp,sp,4
 4001254:	2005883a 	mov	r2,r4
 4001258:	e0bfff05 	stb	r2,-4(fp)
    LCD_WR_CMD(0xBE);  //配置PWM输出
 400125c:	01002f84 	movi	r4,190
 4001260:	40002380 	call	4000238 <LCD_WR_CMD>
    LCD_WR_DATA(0x05); //1设置PWM频率
 4001264:	01000144 	movi	r4,5
 4001268:	40002a00 	call	40002a0 <LCD_WR_DATA>
    LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 400126c:	e0bfff03 	ldbu	r2,-4(fp)
 4001270:	1009883a 	mov	r4,r2
 4001274:	4005ee00 	call	4005ee0 <__floatsidf>
 4001278:	100b883a 	mov	r5,r2
 400127c:	180d883a 	mov	r6,r3
 4001280:	2809883a 	mov	r4,r5
 4001284:	300b883a 	mov	r5,r6
 4001288:	019999b4 	movhi	r6,26214
 400128c:	31999984 	addi	r6,r6,26214
 4001290:	01d00134 	movhi	r7,16388
 4001294:	39d99984 	addi	r7,r7,26214
 4001298:	4005b980 	call	4005b98 <__muldf3>
 400129c:	1009883a 	mov	r4,r2
 40012a0:	180b883a 	mov	r5,r3
 40012a4:	2005883a 	mov	r2,r4
 40012a8:	2807883a 	mov	r3,r5
 40012ac:	1009883a 	mov	r4,r2
 40012b0:	180b883a 	mov	r5,r3
 40012b4:	400570c0 	call	400570c <__fixunsdfsi>
 40012b8:	1009883a 	mov	r4,r2
 40012bc:	40002a00 	call	40002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x01); //3设置C
 40012c0:	01000044 	movi	r4,1
 40012c4:	40002a00 	call	40002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0xFF); //4设置D
 40012c8:	01003fc4 	movi	r4,255
 40012cc:	40002a00 	call	40002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00); //5设置E
 40012d0:	0009883a 	mov	r4,zero
 40012d4:	40002a00 	call	40002a0 <LCD_WR_DATA>
    LCD_WR_DATA(0x00); //6设置F
 40012d8:	0009883a 	mov	r4,zero
 40012dc:	40002a00 	call	40002a0 <LCD_WR_DATA>
}
 40012e0:	e037883a 	mov	sp,fp
 40012e4:	dfc00117 	ldw	ra,4(sp)
 40012e8:	df000017 	ldw	fp,0(sp)
 40012ec:	dec00204 	addi	sp,sp,8
 40012f0:	f800283a 	ret

040012f4 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 dir)
{
 40012f4:	defffd04 	addi	sp,sp,-12
 40012f8:	dfc00215 	stw	ra,8(sp)
 40012fc:	df000115 	stw	fp,4(sp)
 4001300:	df000104 	addi	fp,sp,4
 4001304:	2005883a 	mov	r2,r4
 4001308:	e0bfff05 	stb	r2,-4(fp)
    lcddev.dir=dir;        //横屏/竖屏
 400130c:	00810374 	movhi	r2,1037
 4001310:	10906504 	addi	r2,r2,16788
 4001314:	e0ffff03 	ldbu	r3,-4(fp)
 4001318:	10c00305 	stb	r3,12(r2)
    if(dir==0) {           //竖屏
 400131c:	e0bfff03 	ldbu	r2,-4(fp)
 4001320:	1000611e 	bne	r2,zero,40014a8 <LCD_Display_Dir+0x1b4>
        lcddev.width=240;
 4001324:	00810374 	movhi	r2,1037
 4001328:	10906504 	addi	r2,r2,16788
 400132c:	00c03c04 	movi	r3,240
 4001330:	10c00015 	stw	r3,0(r2)
        lcddev.height=320;
 4001334:	00810374 	movhi	r2,1037
 4001338:	10906504 	addi	r2,r2,16788
 400133c:	00c05004 	movi	r3,320
 4001340:	10c00115 	stw	r3,4(r2)
        if(lcddev.id==0X9341||lcddev.id==0X5310) {
 4001344:	00810374 	movhi	r2,1037
 4001348:	10906504 	addi	r2,r2,16788
 400134c:	10c00217 	ldw	r3,8(r2)
 4001350:	00a4d054 	movui	r2,37697
 4001354:	18800526 	beq	r3,r2,400136c <LCD_Display_Dir+0x78>
 4001358:	00810374 	movhi	r2,1037
 400135c:	10906504 	addi	r2,r2,16788
 4001360:	10800217 	ldw	r2,8(r2)
 4001364:	1094c418 	cmpnei	r2,r2,21264
 4001368:	10001b1e 	bne	r2,zero,40013d8 <LCD_Display_Dir+0xe4>
             lcddev.wramcmd=0X2C;
 400136c:	00810374 	movhi	r2,1037
 4001370:	10906504 	addi	r2,r2,16788
 4001374:	00c00b04 	movi	r3,44
 4001378:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A;
 400137c:	00810374 	movhi	r2,1037
 4001380:	10906504 	addi	r2,r2,16788
 4001384:	00c00a84 	movi	r3,42
 4001388:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B;
 400138c:	00810374 	movhi	r2,1037
 4001390:	10906504 	addi	r2,r2,16788
 4001394:	00c00ac4 	movi	r3,43
 4001398:	10c00615 	stw	r3,24(r2)
             if(lcddev.id==0X5310) {
 400139c:	00810374 	movhi	r2,1037
 40013a0:	10906504 	addi	r2,r2,16788
 40013a4:	10800217 	ldw	r2,8(r2)
 40013a8:	1094c418 	cmpnei	r2,r2,21264
 40013ac:	10009f1e 	bne	r2,zero,400162c <LCD_Display_Dir+0x338>
                  lcddev.width=320;
 40013b0:	00810374 	movhi	r2,1037
 40013b4:	10906504 	addi	r2,r2,16788
 40013b8:	00c05004 	movi	r3,320
 40013bc:	10c00015 	stw	r3,0(r2)
                  lcddev.height=480;
 40013c0:	00810374 	movhi	r2,1037
 40013c4:	10906504 	addi	r2,r2,16788
 40013c8:	00c07804 	movi	r3,480
 40013cc:	10c00115 	stw	r3,4(r2)
        lcddev.height=320;
        if(lcddev.id==0X9341||lcddev.id==0X5310) {
             lcddev.wramcmd=0X2C;
             lcddev.setxcmd=0X2A;
             lcddev.setycmd=0X2B;
             if(lcddev.id==0X5310) {
 40013d0:	0001883a 	nop
 40013d4:	00009506 	br	400162c <LCD_Display_Dir+0x338>
                  lcddev.width=320;
                  lcddev.height=480;
             }
        }else if(lcddev.id==0x5510) {
 40013d8:	00810374 	movhi	r2,1037
 40013dc:	10906504 	addi	r2,r2,16788
 40013e0:	10800217 	ldw	r2,8(r2)
 40013e4:	10954418 	cmpnei	r2,r2,21776
 40013e8:	1000151e 	bne	r2,zero,4001440 <LCD_Display_Dir+0x14c>
             lcddev.wramcmd=0X2C00;
 40013ec:	00810374 	movhi	r2,1037
 40013f0:	10906504 	addi	r2,r2,16788
 40013f4:	00cb0004 	movi	r3,11264
 40013f8:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A00;
 40013fc:	00810374 	movhi	r2,1037
 4001400:	10906504 	addi	r2,r2,16788
 4001404:	00ca8004 	movi	r3,10752
 4001408:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B00;
 400140c:	00810374 	movhi	r2,1037
 4001410:	10906504 	addi	r2,r2,16788
 4001414:	00cac004 	movi	r3,11008
 4001418:	10c00615 	stw	r3,24(r2)
             lcddev.width=480;
 400141c:	00810374 	movhi	r2,1037
 4001420:	10906504 	addi	r2,r2,16788
 4001424:	00c07804 	movi	r3,480
 4001428:	10c00015 	stw	r3,0(r2)
             lcddev.height=800;
 400142c:	00810374 	movhi	r2,1037
 4001430:	10906504 	addi	r2,r2,16788
 4001434:	00c0c804 	movi	r3,800
 4001438:	10c00115 	stw	r3,4(r2)
        }else if(lcddev.id==0X1963) {
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
             lcddev.setxcmd=0X2B;     //设置写X坐标指令
             lcddev.setycmd=0X2A;     //设置写Y坐标指令
             lcddev.width=480;        //设置宽度480
             lcddev.height=800;       //设置高度800
 400143c:	00007a06 	br	4001628 <LCD_Display_Dir+0x334>
             lcddev.wramcmd=0X2C00;
             lcddev.setxcmd=0X2A00;
             lcddev.setycmd=0X2B00;
             lcddev.width=480;
             lcddev.height=800;
        }else if(lcddev.id==0X1963) {
 4001440:	00810374 	movhi	r2,1037
 4001444:	10906504 	addi	r2,r2,16788
 4001448:	10800217 	ldw	r2,8(r2)
 400144c:	108658d8 	cmpnei	r2,r2,6499
 4001450:	1000751e 	bne	r2,zero,4001628 <LCD_Display_Dir+0x334>
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
 4001454:	00810374 	movhi	r2,1037
 4001458:	10906504 	addi	r2,r2,16788
 400145c:	00c00b04 	movi	r3,44
 4001460:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2B;     //设置写X坐标指令
 4001464:	00810374 	movhi	r2,1037
 4001468:	10906504 	addi	r2,r2,16788
 400146c:	00c00ac4 	movi	r3,43
 4001470:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2A;     //设置写Y坐标指令
 4001474:	00810374 	movhi	r2,1037
 4001478:	10906504 	addi	r2,r2,16788
 400147c:	00c00a84 	movi	r3,42
 4001480:	10c00615 	stw	r3,24(r2)
             lcddev.width=480;        //设置宽度480
 4001484:	00810374 	movhi	r2,1037
 4001488:	10906504 	addi	r2,r2,16788
 400148c:	00c07804 	movi	r3,480
 4001490:	10c00015 	stw	r3,0(r2)
             lcddev.height=800;       //设置高度800
 4001494:	00810374 	movhi	r2,1037
 4001498:	10906504 	addi	r2,r2,16788
 400149c:	00c0c804 	movi	r3,800
 40014a0:	10c00115 	stw	r3,4(r2)
 40014a4:	00006006 	br	4001628 <LCD_Display_Dir+0x334>
        }
    }else {                //横屏
        lcddev.width=320;
 40014a8:	00810374 	movhi	r2,1037
 40014ac:	10906504 	addi	r2,r2,16788
 40014b0:	00c05004 	movi	r3,320
 40014b4:	10c00015 	stw	r3,0(r2)
        lcddev.height=240;
 40014b8:	00810374 	movhi	r2,1037
 40014bc:	10906504 	addi	r2,r2,16788
 40014c0:	00c03c04 	movi	r3,240
 40014c4:	10c00115 	stw	r3,4(r2)
        if(lcddev.id==0X9341||lcddev.id==0X5310)
 40014c8:	00810374 	movhi	r2,1037
 40014cc:	10906504 	addi	r2,r2,16788
 40014d0:	10c00217 	ldw	r3,8(r2)
 40014d4:	00a4d054 	movui	r2,37697
 40014d8:	18800526 	beq	r3,r2,40014f0 <LCD_Display_Dir+0x1fc>
 40014dc:	00810374 	movhi	r2,1037
 40014e0:	10906504 	addi	r2,r2,16788
 40014e4:	10800217 	ldw	r2,8(r2)
 40014e8:	1094c418 	cmpnei	r2,r2,21264
 40014ec:	10000d1e 	bne	r2,zero,4001524 <LCD_Display_Dir+0x230>
        {
             lcddev.wramcmd=0X2C;
 40014f0:	00810374 	movhi	r2,1037
 40014f4:	10906504 	addi	r2,r2,16788
 40014f8:	00c00b04 	movi	r3,44
 40014fc:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A;
 4001500:	00810374 	movhi	r2,1037
 4001504:	10906504 	addi	r2,r2,16788
 4001508:	00c00a84 	movi	r3,42
 400150c:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B;
 4001510:	00810374 	movhi	r2,1037
 4001514:	10906504 	addi	r2,r2,16788
 4001518:	00c00ac4 	movi	r3,43
 400151c:	10c00615 	stw	r3,24(r2)
 4001520:	00003306 	br	40015f0 <LCD_Display_Dir+0x2fc>
        }else if(lcddev.id==0x5510)
 4001524:	00810374 	movhi	r2,1037
 4001528:	10906504 	addi	r2,r2,16788
 400152c:	10800217 	ldw	r2,8(r2)
 4001530:	10954418 	cmpnei	r2,r2,21776
 4001534:	1000151e 	bne	r2,zero,400158c <LCD_Display_Dir+0x298>
        {
             lcddev.wramcmd=0X2C00;
 4001538:	00810374 	movhi	r2,1037
 400153c:	10906504 	addi	r2,r2,16788
 4001540:	00cb0004 	movi	r3,11264
 4001544:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A00;
 4001548:	00810374 	movhi	r2,1037
 400154c:	10906504 	addi	r2,r2,16788
 4001550:	00ca8004 	movi	r3,10752
 4001554:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B00;
 4001558:	00810374 	movhi	r2,1037
 400155c:	10906504 	addi	r2,r2,16788
 4001560:	00cac004 	movi	r3,11008
 4001564:	10c00615 	stw	r3,24(r2)
             lcddev.width=800;
 4001568:	00810374 	movhi	r2,1037
 400156c:	10906504 	addi	r2,r2,16788
 4001570:	00c0c804 	movi	r3,800
 4001574:	10c00015 	stw	r3,0(r2)
             lcddev.height=480;
 4001578:	00810374 	movhi	r2,1037
 400157c:	10906504 	addi	r2,r2,16788
 4001580:	00c07804 	movi	r3,480
 4001584:	10c00115 	stw	r3,4(r2)
 4001588:	00001906 	br	40015f0 <LCD_Display_Dir+0x2fc>
        }else if(lcddev.id==0X1963)
 400158c:	00810374 	movhi	r2,1037
 4001590:	10906504 	addi	r2,r2,16788
 4001594:	10800217 	ldw	r2,8(r2)
 4001598:	108658d8 	cmpnei	r2,r2,6499
 400159c:	1000141e 	bne	r2,zero,40015f0 <LCD_Display_Dir+0x2fc>
        {
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
 40015a0:	00810374 	movhi	r2,1037
 40015a4:	10906504 	addi	r2,r2,16788
 40015a8:	00c00b04 	movi	r3,44
 40015ac:	10c00415 	stw	r3,16(r2)
             lcddev.setxcmd=0X2A;     //设置写X坐标指令
 40015b0:	00810374 	movhi	r2,1037
 40015b4:	10906504 	addi	r2,r2,16788
 40015b8:	00c00a84 	movi	r3,42
 40015bc:	10c00515 	stw	r3,20(r2)
             lcddev.setycmd=0X2B;     //设置写Y坐标指令
 40015c0:	00810374 	movhi	r2,1037
 40015c4:	10906504 	addi	r2,r2,16788
 40015c8:	00c00ac4 	movi	r3,43
 40015cc:	10c00615 	stw	r3,24(r2)
             lcddev.width=800;        //设置宽度800
 40015d0:	00810374 	movhi	r2,1037
 40015d4:	10906504 	addi	r2,r2,16788
 40015d8:	00c0c804 	movi	r3,800
 40015dc:	10c00015 	stw	r3,0(r2)
             lcddev.height=480;       //设置高度480
 40015e0:	00810374 	movhi	r2,1037
 40015e4:	10906504 	addi	r2,r2,16788
 40015e8:	00c07804 	movi	r3,480
 40015ec:	10c00115 	stw	r3,4(r2)
        }
        if(lcddev.id==0X5310)
 40015f0:	00810374 	movhi	r2,1037
 40015f4:	10906504 	addi	r2,r2,16788
 40015f8:	10800217 	ldw	r2,8(r2)
 40015fc:	1094c418 	cmpnei	r2,r2,21264
 4001600:	10000a1e 	bne	r2,zero,400162c <LCD_Display_Dir+0x338>
        {
             lcddev.width=480;
 4001604:	00810374 	movhi	r2,1037
 4001608:	10906504 	addi	r2,r2,16788
 400160c:	00c07804 	movi	r3,480
 4001610:	10c00015 	stw	r3,0(r2)
             lcddev.height=320;
 4001614:	00810374 	movhi	r2,1037
 4001618:	10906504 	addi	r2,r2,16788
 400161c:	00c05004 	movi	r3,320
 4001620:	10c00115 	stw	r3,4(r2)
 4001624:	00000106 	br	400162c <LCD_Display_Dir+0x338>
        }else if(lcddev.id==0X1963) {
             lcddev.wramcmd=0X2C;     //设置写入GRAM的指令
             lcddev.setxcmd=0X2B;     //设置写X坐标指令
             lcddev.setycmd=0X2A;     //设置写Y坐标指令
             lcddev.width=480;        //设置宽度480
             lcddev.height=800;       //设置高度800
 4001628:	0001883a 	nop
        {
             lcddev.width=480;
             lcddev.height=320;
        }
    }
    LCD_Scan_Dir(DFT_SCAN_DIR);    //默认扫描方向
 400162c:	0009883a 	mov	r4,zero
 4001630:	40009e80 	call	40009e8 <LCD_Scan_Dir>
}
 4001634:	e037883a 	mov	sp,fp
 4001638:	dfc00117 	ldw	ra,4(sp)
 400163c:	df000017 	ldw	fp,0(sp)
 4001640:	dec00204 	addi	sp,sp,8
 4001644:	f800283a 	ret

04001648 <LCD_Set_Window>:
//设置窗口(对RGB屏无效),并自动设置画点坐标到窗口左上角(sx,sy).
//sx,sy:窗口起始坐标(左上角)
//width,height:窗口宽度和高度,必须大于0!!
//窗体大小:width*height.
void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height)
{
 4001648:	defff804 	addi	sp,sp,-32
 400164c:	dfc00715 	stw	ra,28(sp)
 4001650:	df000615 	stw	fp,24(sp)
 4001654:	df000604 	addi	fp,sp,24
 4001658:	e13ffc15 	stw	r4,-16(fp)
 400165c:	e17ffd15 	stw	r5,-12(fp)
 4001660:	e1bffe15 	stw	r6,-8(fp)
 4001664:	e1ffff15 	stw	r7,-4(fp)
    u16 twidth,theight;
    twidth=sx+width-1;
 4001668:	e0fffc17 	ldw	r3,-16(fp)
 400166c:	e0bffe17 	ldw	r2,-8(fp)
 4001670:	1885883a 	add	r2,r3,r2
 4001674:	10bfffc4 	addi	r2,r2,-1
 4001678:	e0bffa15 	stw	r2,-24(fp)
    theight=sy+height-1;
 400167c:	e0fffd17 	ldw	r3,-12(fp)
 4001680:	e0bfff17 	ldw	r2,-4(fp)
 4001684:	1885883a 	add	r2,r3,r2
 4001688:	10bfffc4 	addi	r2,r2,-1
 400168c:	e0bffb15 	stw	r2,-20(fp)
    if(lcddev.id==0X9341||lcddev.id==0X5310||(lcddev.dir==1&&lcddev.id==0X1963)) {
 4001690:	00810374 	movhi	r2,1037
 4001694:	10906504 	addi	r2,r2,16788
 4001698:	10c00217 	ldw	r3,8(r2)
 400169c:	00a4d054 	movui	r2,37697
 40016a0:	18801026 	beq	r3,r2,40016e4 <LCD_Set_Window+0x9c>
 40016a4:	00810374 	movhi	r2,1037
 40016a8:	10906504 	addi	r2,r2,16788
 40016ac:	10800217 	ldw	r2,8(r2)
 40016b0:	1094c420 	cmpeqi	r2,r2,21264
 40016b4:	10000b1e 	bne	r2,zero,40016e4 <LCD_Set_Window+0x9c>
 40016b8:	00810374 	movhi	r2,1037
 40016bc:	10906504 	addi	r2,r2,16788
 40016c0:	10800303 	ldbu	r2,12(r2)
 40016c4:	10803fcc 	andi	r2,r2,255
 40016c8:	10800058 	cmpnei	r2,r2,1
 40016cc:	1000301e 	bne	r2,zero,4001790 <LCD_Set_Window+0x148>
 40016d0:	00810374 	movhi	r2,1037
 40016d4:	10906504 	addi	r2,r2,16788
 40016d8:	10800217 	ldw	r2,8(r2)
 40016dc:	108658d8 	cmpnei	r2,r2,6499
 40016e0:	10002b1e 	bne	r2,zero,4001790 <LCD_Set_Window+0x148>
        LCD_WR_CMD(lcddev.setxcmd);
 40016e4:	00810374 	movhi	r2,1037
 40016e8:	10906504 	addi	r2,r2,16788
 40016ec:	10800517 	ldw	r2,20(r2)
 40016f0:	1009883a 	mov	r4,r2
 40016f4:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(sx>>8);
 40016f8:	e0bffc17 	ldw	r2,-16(fp)
 40016fc:	1004d23a 	srli	r2,r2,8
 4001700:	1009883a 	mov	r4,r2
 4001704:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(sx&0XFF);
 4001708:	e0bffc17 	ldw	r2,-16(fp)
 400170c:	10803fcc 	andi	r2,r2,255
 4001710:	1009883a 	mov	r4,r2
 4001714:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(twidth>>8);
 4001718:	e0bffa17 	ldw	r2,-24(fp)
 400171c:	1004d23a 	srli	r2,r2,8
 4001720:	1009883a 	mov	r4,r2
 4001724:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(twidth&0XFF);
 4001728:	e0bffa17 	ldw	r2,-24(fp)
 400172c:	10803fcc 	andi	r2,r2,255
 4001730:	1009883a 	mov	r4,r2
 4001734:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd);
 4001738:	00810374 	movhi	r2,1037
 400173c:	10906504 	addi	r2,r2,16788
 4001740:	10800617 	ldw	r2,24(r2)
 4001744:	1009883a 	mov	r4,r2
 4001748:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(sy>>8);
 400174c:	e0bffd17 	ldw	r2,-12(fp)
 4001750:	1004d23a 	srli	r2,r2,8
 4001754:	1009883a 	mov	r4,r2
 4001758:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(sy&0XFF);
 400175c:	e0bffd17 	ldw	r2,-12(fp)
 4001760:	10803fcc 	andi	r2,r2,255
 4001764:	1009883a 	mov	r4,r2
 4001768:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(theight>>8);
 400176c:	e0bffb17 	ldw	r2,-20(fp)
 4001770:	1004d23a 	srli	r2,r2,8
 4001774:	1009883a 	mov	r4,r2
 4001778:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(theight&0XFF);
 400177c:	e0bffb17 	ldw	r2,-20(fp)
 4001780:	10803fcc 	andi	r2,r2,255
 4001784:	1009883a 	mov	r4,r2
 4001788:	40002a00 	call	40002a0 <LCD_WR_DATA>
 400178c:	00009606 	br	40019e8 <LCD_Set_Window+0x3a0>
    }else if(lcddev.id==0X1963)//1963竖屏特殊处理
 4001790:	00810374 	movhi	r2,1037
 4001794:	10906504 	addi	r2,r2,16788
 4001798:	10800217 	ldw	r2,8(r2)
 400179c:	108658d8 	cmpnei	r2,r2,6499
 40017a0:	10003e1e 	bne	r2,zero,400189c <LCD_Set_Window+0x254>
    {
        sx=lcddev.width-width-sx;
 40017a4:	00810374 	movhi	r2,1037
 40017a8:	10906504 	addi	r2,r2,16788
 40017ac:	10c00017 	ldw	r3,0(r2)
 40017b0:	e0bffe17 	ldw	r2,-8(fp)
 40017b4:	1887c83a 	sub	r3,r3,r2
 40017b8:	e0bffc17 	ldw	r2,-16(fp)
 40017bc:	1885c83a 	sub	r2,r3,r2
 40017c0:	e0bffc15 	stw	r2,-16(fp)
        height=sy+height-1;
 40017c4:	e0fffd17 	ldw	r3,-12(fp)
 40017c8:	e0bfff17 	ldw	r2,-4(fp)
 40017cc:	1885883a 	add	r2,r3,r2
 40017d0:	10bfffc4 	addi	r2,r2,-1
 40017d4:	e0bfff15 	stw	r2,-4(fp)
        LCD_WR_CMD(lcddev.setxcmd);
 40017d8:	00810374 	movhi	r2,1037
 40017dc:	10906504 	addi	r2,r2,16788
 40017e0:	10800517 	ldw	r2,20(r2)
 40017e4:	1009883a 	mov	r4,r2
 40017e8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(sx>>8);
 40017ec:	e0bffc17 	ldw	r2,-16(fp)
 40017f0:	1004d23a 	srli	r2,r2,8
 40017f4:	1009883a 	mov	r4,r2
 40017f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(sx&0XFF);
 40017fc:	e0bffc17 	ldw	r2,-16(fp)
 4001800:	10803fcc 	andi	r2,r2,255
 4001804:	1009883a 	mov	r4,r2
 4001808:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA((sx+width-1)>>8);
 400180c:	e0fffc17 	ldw	r3,-16(fp)
 4001810:	e0bffe17 	ldw	r2,-8(fp)
 4001814:	1885883a 	add	r2,r3,r2
 4001818:	10bfffc4 	addi	r2,r2,-1
 400181c:	1004d23a 	srli	r2,r2,8
 4001820:	1009883a 	mov	r4,r2
 4001824:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA((sx+width-1)&0XFF);
 4001828:	e0fffc17 	ldw	r3,-16(fp)
 400182c:	e0bffe17 	ldw	r2,-8(fp)
 4001830:	1885883a 	add	r2,r3,r2
 4001834:	10bfffc4 	addi	r2,r2,-1
 4001838:	10803fcc 	andi	r2,r2,255
 400183c:	1009883a 	mov	r4,r2
 4001840:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd);
 4001844:	00810374 	movhi	r2,1037
 4001848:	10906504 	addi	r2,r2,16788
 400184c:	10800617 	ldw	r2,24(r2)
 4001850:	1009883a 	mov	r4,r2
 4001854:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(sy>>8);
 4001858:	e0bffd17 	ldw	r2,-12(fp)
 400185c:	1004d23a 	srli	r2,r2,8
 4001860:	1009883a 	mov	r4,r2
 4001864:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(sy&0XFF);
 4001868:	e0bffd17 	ldw	r2,-12(fp)
 400186c:	10803fcc 	andi	r2,r2,255
 4001870:	1009883a 	mov	r4,r2
 4001874:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(height>>8);
 4001878:	e0bfff17 	ldw	r2,-4(fp)
 400187c:	1004d23a 	srli	r2,r2,8
 4001880:	1009883a 	mov	r4,r2
 4001884:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(height&0XFF);
 4001888:	e0bfff17 	ldw	r2,-4(fp)
 400188c:	10803fcc 	andi	r2,r2,255
 4001890:	1009883a 	mov	r4,r2
 4001894:	40002a00 	call	40002a0 <LCD_WR_DATA>
 4001898:	00005306 	br	40019e8 <LCD_Set_Window+0x3a0>
    }else if(lcddev.id==0X5510)
 400189c:	00810374 	movhi	r2,1037
 40018a0:	10906504 	addi	r2,r2,16788
 40018a4:	10800217 	ldw	r2,8(r2)
 40018a8:	10954418 	cmpnei	r2,r2,21776
 40018ac:	10004e1e 	bne	r2,zero,40019e8 <LCD_Set_Window+0x3a0>
    {
        LCD_WR_CMD(lcddev.setxcmd);LCD_WR_DATA(sx>>8);
 40018b0:	00810374 	movhi	r2,1037
 40018b4:	10906504 	addi	r2,r2,16788
 40018b8:	10800517 	ldw	r2,20(r2)
 40018bc:	1009883a 	mov	r4,r2
 40018c0:	40002380 	call	4000238 <LCD_WR_CMD>
 40018c4:	e0bffc17 	ldw	r2,-16(fp)
 40018c8:	1004d23a 	srli	r2,r2,8
 40018cc:	1009883a 	mov	r4,r2
 40018d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setxcmd+1);LCD_WR_DATA(sx&0XFF);
 40018d4:	00810374 	movhi	r2,1037
 40018d8:	10906504 	addi	r2,r2,16788
 40018dc:	10800517 	ldw	r2,20(r2)
 40018e0:	10800044 	addi	r2,r2,1
 40018e4:	1009883a 	mov	r4,r2
 40018e8:	40002380 	call	4000238 <LCD_WR_CMD>
 40018ec:	e0bffc17 	ldw	r2,-16(fp)
 40018f0:	10803fcc 	andi	r2,r2,255
 40018f4:	1009883a 	mov	r4,r2
 40018f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setxcmd+2);LCD_WR_DATA(twidth>>8);
 40018fc:	00810374 	movhi	r2,1037
 4001900:	10906504 	addi	r2,r2,16788
 4001904:	10800517 	ldw	r2,20(r2)
 4001908:	10800084 	addi	r2,r2,2
 400190c:	1009883a 	mov	r4,r2
 4001910:	40002380 	call	4000238 <LCD_WR_CMD>
 4001914:	e0bffa17 	ldw	r2,-24(fp)
 4001918:	1004d23a 	srli	r2,r2,8
 400191c:	1009883a 	mov	r4,r2
 4001920:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setxcmd+3);LCD_WR_DATA(twidth&0XFF);
 4001924:	00810374 	movhi	r2,1037
 4001928:	10906504 	addi	r2,r2,16788
 400192c:	10800517 	ldw	r2,20(r2)
 4001930:	108000c4 	addi	r2,r2,3
 4001934:	1009883a 	mov	r4,r2
 4001938:	40002380 	call	4000238 <LCD_WR_CMD>
 400193c:	e0bffa17 	ldw	r2,-24(fp)
 4001940:	10803fcc 	andi	r2,r2,255
 4001944:	1009883a 	mov	r4,r2
 4001948:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd);LCD_WR_DATA(sy>>8);
 400194c:	00810374 	movhi	r2,1037
 4001950:	10906504 	addi	r2,r2,16788
 4001954:	10800617 	ldw	r2,24(r2)
 4001958:	1009883a 	mov	r4,r2
 400195c:	40002380 	call	4000238 <LCD_WR_CMD>
 4001960:	e0bffd17 	ldw	r2,-12(fp)
 4001964:	1004d23a 	srli	r2,r2,8
 4001968:	1009883a 	mov	r4,r2
 400196c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd+1);LCD_WR_DATA(sy&0XFF);
 4001970:	00810374 	movhi	r2,1037
 4001974:	10906504 	addi	r2,r2,16788
 4001978:	10800617 	ldw	r2,24(r2)
 400197c:	10800044 	addi	r2,r2,1
 4001980:	1009883a 	mov	r4,r2
 4001984:	40002380 	call	4000238 <LCD_WR_CMD>
 4001988:	e0bffd17 	ldw	r2,-12(fp)
 400198c:	10803fcc 	andi	r2,r2,255
 4001990:	1009883a 	mov	r4,r2
 4001994:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd+2);LCD_WR_DATA(theight>>8);
 4001998:	00810374 	movhi	r2,1037
 400199c:	10906504 	addi	r2,r2,16788
 40019a0:	10800617 	ldw	r2,24(r2)
 40019a4:	10800084 	addi	r2,r2,2
 40019a8:	1009883a 	mov	r4,r2
 40019ac:	40002380 	call	4000238 <LCD_WR_CMD>
 40019b0:	e0bffb17 	ldw	r2,-20(fp)
 40019b4:	1004d23a 	srli	r2,r2,8
 40019b8:	1009883a 	mov	r4,r2
 40019bc:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(lcddev.setycmd+3);LCD_WR_DATA(theight&0XFF);
 40019c0:	00810374 	movhi	r2,1037
 40019c4:	10906504 	addi	r2,r2,16788
 40019c8:	10800617 	ldw	r2,24(r2)
 40019cc:	108000c4 	addi	r2,r2,3
 40019d0:	1009883a 	mov	r4,r2
 40019d4:	40002380 	call	4000238 <LCD_WR_CMD>
 40019d8:	e0bffb17 	ldw	r2,-20(fp)
 40019dc:	10803fcc 	andi	r2,r2,255
 40019e0:	1009883a 	mov	r4,r2
 40019e4:	40002a00 	call	40002a0 <LCD_WR_DATA>
    }
}
 40019e8:	e037883a 	mov	sp,fp
 40019ec:	dfc00117 	ldw	ra,4(sp)
 40019f0:	df000017 	ldw	fp,0(sp)
 40019f4:	dec00204 	addi	sp,sp,8
 40019f8:	f800283a 	ret

040019fc <MCULCD_Init>:

//TFTLCD初始化
void MCULCD_Init(void)
{
 40019fc:	defffd04 	addi	sp,sp,-12
 4001a00:	dfc00215 	stw	ra,8(sp)
 4001a04:	df000115 	stw	fp,4(sp)
 4001a08:	dc000015 	stw	r16,0(sp)
 4001a0c:	d839883a 	mov	fp,sp
    //TFTLCD 复位
    IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RST_N_BASE,0);
 4001a10:	0007883a 	mov	r3,zero
 4001a14:	00860804 	movi	r2,6176
 4001a18:	10c00035 	stwio	r3,0(r2)
    delay_ms(100);
 4001a1c:	01001904 	movi	r4,100
 4001a20:	40002000 	call	4000200 <delay_ms>
    IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RST_N_BASE,1);
 4001a24:	00c00044 	movi	r3,1
 4001a28:	00860804 	movi	r2,6176
 4001a2c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(MLCD_CS_N_BASE,1);
 4001a30:	00c00044 	movi	r3,1
 4001a34:	00861404 	movi	r2,6224
 4001a38:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(MLCD_RD_N_BASE,1);
 4001a3c:	00c00044 	movi	r3,1
 4001a40:	00860c04 	movi	r2,6192
 4001a44:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(MLCD_WR_N_BASE,1);
 4001a48:	00c00044 	movi	r3,1
 4001a4c:	00861004 	movi	r2,6208
 4001a50:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(MLCD_CS_N_BASE,0);
 4001a54:	0007883a 	mov	r3,zero
 4001a58:	00861404 	movi	r2,6224
 4001a5c:	10c00035 	stwio	r3,0(r2)
    delay_ms(50);
 4001a60:	01000c84 	movi	r4,50
 4001a64:	40002000 	call	4000200 <delay_ms>

    //尝试9341 ID的读取
    LCD_WR_CMD(0XD3);
 4001a68:	010034c4 	movi	r4,211
 4001a6c:	40002380 	call	4000238 <LCD_WR_CMD>
    lcddev.id=LCD_RD_DATA();            //dummy read
 4001a70:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001a74:	00c10374 	movhi	r3,1037
 4001a78:	18d06504 	addi	r3,r3,16788
 4001a7c:	18800215 	stw	r2,8(r3)
    lcddev.id=LCD_RD_DATA();            //读到0X00
 4001a80:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001a84:	00c10374 	movhi	r3,1037
 4001a88:	18d06504 	addi	r3,r3,16788
 4001a8c:	18800215 	stw	r2,8(r3)
    lcddev.id=LCD_RD_DATA();            //读取93
 4001a90:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001a94:	00c10374 	movhi	r3,1037
 4001a98:	18d06504 	addi	r3,r3,16788
 4001a9c:	18800215 	stw	r2,8(r3)
    lcddev.id<<=8;                      
 4001aa0:	00810374 	movhi	r2,1037
 4001aa4:	10906504 	addi	r2,r2,16788
 4001aa8:	10800217 	ldw	r2,8(r2)
 4001aac:	1006923a 	slli	r3,r2,8
 4001ab0:	00810374 	movhi	r2,1037
 4001ab4:	10906504 	addi	r2,r2,16788
 4001ab8:	10c00215 	stw	r3,8(r2)
    lcddev.id|=LCD_RD_DATA();           //读取41
 4001abc:	00810374 	movhi	r2,1037
 4001ac0:	10906504 	addi	r2,r2,16788
 4001ac4:	14000217 	ldw	r16,8(r2)
 4001ac8:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001acc:	8086b03a 	or	r3,r16,r2
 4001ad0:	00810374 	movhi	r2,1037
 4001ad4:	10906504 	addi	r2,r2,16788
 4001ad8:	10c00215 	stw	r3,8(r2)
    if(lcddev.id!=0X9341)               //非9341,尝试看看是不是NT35310
 4001adc:	00810374 	movhi	r2,1037
 4001ae0:	10906504 	addi	r2,r2,16788
 4001ae4:	10c00217 	ldw	r3,8(r2)
 4001ae8:	00a4d054 	movui	r2,37697
 4001aec:	18806f26 	beq	r3,r2,4001cac <MCULCD_Init+0x2b0>
    {                                   
        LCD_WR_CMD(0XD4);              
 4001af0:	01003504 	movi	r4,212
 4001af4:	40002380 	call	4000238 <LCD_WR_CMD>
        lcddev.id=LCD_RD_DATA();       //dummy read
 4001af8:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001afc:	00c10374 	movhi	r3,1037
 4001b00:	18d06504 	addi	r3,r3,16788
 4001b04:	18800215 	stw	r2,8(r3)
        lcddev.id=LCD_RD_DATA();       //读回0X01
 4001b08:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001b0c:	00c10374 	movhi	r3,1037
 4001b10:	18d06504 	addi	r3,r3,16788
 4001b14:	18800215 	stw	r2,8(r3)
        lcddev.id=LCD_RD_DATA();       //读回0X53
 4001b18:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001b1c:	00c10374 	movhi	r3,1037
 4001b20:	18d06504 	addi	r3,r3,16788
 4001b24:	18800215 	stw	r2,8(r3)
        lcddev.id<<=8;                 
 4001b28:	00810374 	movhi	r2,1037
 4001b2c:	10906504 	addi	r2,r2,16788
 4001b30:	10800217 	ldw	r2,8(r2)
 4001b34:	1006923a 	slli	r3,r2,8
 4001b38:	00810374 	movhi	r2,1037
 4001b3c:	10906504 	addi	r2,r2,16788
 4001b40:	10c00215 	stw	r3,8(r2)
        lcddev.id|=LCD_RD_DATA();      //这里读回0X10
 4001b44:	00810374 	movhi	r2,1037
 4001b48:	10906504 	addi	r2,r2,16788
 4001b4c:	14000217 	ldw	r16,8(r2)
 4001b50:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001b54:	8086b03a 	or	r3,r16,r2
 4001b58:	00810374 	movhi	r2,1037
 4001b5c:	10906504 	addi	r2,r2,16788
 4001b60:	10c00215 	stw	r3,8(r2)
        if(lcddev.id!=0X5310)          //也不是NT35310,尝试看看是不是NT35510
 4001b64:	00810374 	movhi	r2,1037
 4001b68:	10906504 	addi	r2,r2,16788
 4001b6c:	10800217 	ldw	r2,8(r2)
 4001b70:	1094c420 	cmpeqi	r2,r2,21264
 4001b74:	10004d1e 	bne	r2,zero,4001cac <MCULCD_Init+0x2b0>
        {
            LCD_WR_CMD(0XDA00);
 4001b78:	01368014 	movui	r4,55808
 4001b7c:	40002380 	call	4000238 <LCD_WR_CMD>
            lcddev.id=LCD_RD_DATA();  //读回0X00
 4001b80:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001b84:	00c10374 	movhi	r3,1037
 4001b88:	18d06504 	addi	r3,r3,16788
 4001b8c:	18800215 	stw	r2,8(r3)
            LCD_WR_CMD(0XDB00);
 4001b90:	0136c014 	movui	r4,56064
 4001b94:	40002380 	call	4000238 <LCD_WR_CMD>
            lcddev.id=LCD_RD_DATA();  //读回0X80
 4001b98:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001b9c:	00c10374 	movhi	r3,1037
 4001ba0:	18d06504 	addi	r3,r3,16788
 4001ba4:	18800215 	stw	r2,8(r3)
            lcddev.id<<=8;
 4001ba8:	00810374 	movhi	r2,1037
 4001bac:	10906504 	addi	r2,r2,16788
 4001bb0:	10800217 	ldw	r2,8(r2)
 4001bb4:	1006923a 	slli	r3,r2,8
 4001bb8:	00810374 	movhi	r2,1037
 4001bbc:	10906504 	addi	r2,r2,16788
 4001bc0:	10c00215 	stw	r3,8(r2)
            LCD_WR_CMD(0XDC00);
 4001bc4:	01370014 	movui	r4,56320
 4001bc8:	40002380 	call	4000238 <LCD_WR_CMD>
            lcddev.id|=LCD_RD_DATA(); //读回0X00
 4001bcc:	00810374 	movhi	r2,1037
 4001bd0:	10906504 	addi	r2,r2,16788
 4001bd4:	14000217 	ldw	r16,8(r2)
 4001bd8:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001bdc:	8086b03a 	or	r3,r16,r2
 4001be0:	00810374 	movhi	r2,1037
 4001be4:	10906504 	addi	r2,r2,16788
 4001be8:	10c00215 	stw	r3,8(r2)
            if(lcddev.id==0x8000)
 4001bec:	00810374 	movhi	r2,1037
 4001bf0:	10906504 	addi	r2,r2,16788
 4001bf4:	10c00217 	ldw	r3,8(r2)
 4001bf8:	00a00014 	movui	r2,32768
 4001bfc:	1880041e 	bne	r3,r2,4001c10 <MCULCD_Init+0x214>
                lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 4001c00:	00810374 	movhi	r2,1037
 4001c04:	10906504 	addi	r2,r2,16788
 4001c08:	00d54404 	movi	r3,21776
 4001c0c:	10c00215 	stw	r3,8(r2)
            if(lcddev.id!=0X5510)     //也不是NT5510,尝试看看是不是SSD1963
 4001c10:	00810374 	movhi	r2,1037
 4001c14:	10906504 	addi	r2,r2,16788
 4001c18:	10800217 	ldw	r2,8(r2)
 4001c1c:	10954420 	cmpeqi	r2,r2,21776
 4001c20:	1000221e 	bne	r2,zero,4001cac <MCULCD_Init+0x2b0>
            {
                LCD_WR_CMD(0XA1);
 4001c24:	01002844 	movi	r4,161
 4001c28:	40002380 	call	4000238 <LCD_WR_CMD>
                lcddev.id=LCD_RD_DATA();
 4001c2c:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001c30:	00c10374 	movhi	r3,1037
 4001c34:	18d06504 	addi	r3,r3,16788
 4001c38:	18800215 	stw	r2,8(r3)
                lcddev.id=LCD_RD_DATA();    //读回0X57
 4001c3c:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001c40:	00c10374 	movhi	r3,1037
 4001c44:	18d06504 	addi	r3,r3,16788
 4001c48:	18800215 	stw	r2,8(r3)
                lcddev.id<<=8;
 4001c4c:	00810374 	movhi	r2,1037
 4001c50:	10906504 	addi	r2,r2,16788
 4001c54:	10800217 	ldw	r2,8(r2)
 4001c58:	1006923a 	slli	r3,r2,8
 4001c5c:	00810374 	movhi	r2,1037
 4001c60:	10906504 	addi	r2,r2,16788
 4001c64:	10c00215 	stw	r3,8(r2)
                lcddev.id|=LCD_RD_DATA();   //读回0X61
 4001c68:	00810374 	movhi	r2,1037
 4001c6c:	10906504 	addi	r2,r2,16788
 4001c70:	14000217 	ldw	r16,8(r2)
 4001c74:	40002fc0 	call	40002fc <LCD_RD_DATA>
 4001c78:	8086b03a 	or	r3,r16,r2
 4001c7c:	00810374 	movhi	r2,1037
 4001c80:	10906504 	addi	r2,r2,16788
 4001c84:	10c00215 	stw	r3,8(r2)
                if(lcddev.id==0X5761)
 4001c88:	00810374 	movhi	r2,1037
 4001c8c:	10906504 	addi	r2,r2,16788
 4001c90:	10800217 	ldw	r2,8(r2)
 4001c94:	1095d858 	cmpnei	r2,r2,22369
 4001c98:	1000041e 	bne	r2,zero,4001cac <MCULCD_Init+0x2b0>
                    lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 4001c9c:	00810374 	movhi	r2,1037
 4001ca0:	10906504 	addi	r2,r2,16788
 4001ca4:	00c658c4 	movi	r3,6499
 4001ca8:	10c00215 	stw	r3,8(r2)
            }
        }
    }
    printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 4001cac:	00810374 	movhi	r2,1037
 4001cb0:	10906504 	addi	r2,r2,16788
 4001cb4:	10800217 	ldw	r2,8(r2)
 4001cb8:	01010074 	movhi	r4,1025
 4001cbc:	211a9804 	addi	r4,r4,27232
 4001cc0:	100b883a 	mov	r5,r2
 4001cc4:	40066400 	call	4006640 <printf>
    if(lcddev.id==0X9341) {             //9341初始化
 4001cc8:	00810374 	movhi	r2,1037
 4001ccc:	10906504 	addi	r2,r2,16788
 4001cd0:	10c00217 	ldw	r3,8(r2)
 4001cd4:	00a4d054 	movui	r2,37697
 4001cd8:	1880b91e 	bne	r3,r2,4001fc0 <MCULCD_Init+0x5c4>
        LCD_WR_CMD(0xCF);
 4001cdc:	010033c4 	movi	r4,207
 4001ce0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4001ce4:	0009883a 	mov	r4,zero
 4001ce8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC1);
 4001cec:	01003044 	movi	r4,193
 4001cf0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0X30);
 4001cf4:	01000c04 	movi	r4,48
 4001cf8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xED);
 4001cfc:	01003b44 	movi	r4,237
 4001d00:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x64);
 4001d04:	01001904 	movi	r4,100
 4001d08:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 4001d0c:	010000c4 	movi	r4,3
 4001d10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0X12);
 4001d14:	01000484 	movi	r4,18
 4001d18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0X81);
 4001d1c:	01002044 	movi	r4,129
 4001d20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xE8);
 4001d24:	01003a04 	movi	r4,232
 4001d28:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x85);
 4001d2c:	01002144 	movi	r4,133
 4001d30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 4001d34:	01000404 	movi	r4,16
 4001d38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 4001d3c:	01001e84 	movi	r4,122
 4001d40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xCB);
 4001d44:	010032c4 	movi	r4,203
 4001d48:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x39);
 4001d4c:	01000e44 	movi	r4,57
 4001d50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 4001d54:	01000b04 	movi	r4,44
 4001d58:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001d5c:	0009883a 	mov	r4,zero
 4001d60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 4001d64:	01000d04 	movi	r4,52
 4001d68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 4001d6c:	01000084 	movi	r4,2
 4001d70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xF7);
 4001d74:	01003dc4 	movi	r4,247
 4001d78:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);
 4001d7c:	01000804 	movi	r4,32
 4001d80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xEA);
 4001d84:	01003a84 	movi	r4,234
 4001d88:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4001d8c:	0009883a 	mov	r4,zero
 4001d90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001d94:	0009883a 	mov	r4,zero
 4001d98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xC0);    //Power control
 4001d9c:	01003004 	movi	r4,192
 4001da0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x1B);   //VRH[5:0]
 4001da4:	010006c4 	movi	r4,27
 4001da8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xC1);    //Power control
 4001dac:	01003044 	movi	r4,193
 4001db0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 4001db4:	01000044 	movi	r4,1
 4001db8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xC5);    //VCM control
 4001dbc:	01003144 	movi	r4,197
 4001dc0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x30);   //3F
 4001dc4:	01000c04 	movi	r4,48
 4001dc8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x30);   //3C
 4001dcc:	01000c04 	movi	r4,48
 4001dd0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xC7);    //VCM control2
 4001dd4:	010031c4 	movi	r4,199
 4001dd8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0XB7);
 4001ddc:	01002dc4 	movi	r4,183
 4001de0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x36);    // Memory Access Control
 4001de4:	01000d84 	movi	r4,54
 4001de8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x48);
 4001dec:	01001204 	movi	r4,72
 4001df0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x3A);
 4001df4:	01000e84 	movi	r4,58
 4001df8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x55);
 4001dfc:	01001544 	movi	r4,85
 4001e00:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xB1);
 4001e04:	01002c44 	movi	r4,177
 4001e08:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4001e0c:	0009883a 	mov	r4,zero
 4001e10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1A);
 4001e14:	01000684 	movi	r4,26
 4001e18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xB6);    // Display Function Control
 4001e1c:	01002d84 	movi	r4,182
 4001e20:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0A);
 4001e24:	01000284 	movi	r4,10
 4001e28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 4001e2c:	01002884 	movi	r4,162
 4001e30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xF2);    // 3Gamma Function Disable
 4001e34:	01003c84 	movi	r4,242
 4001e38:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4001e3c:	0009883a 	mov	r4,zero
 4001e40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x26);    //Gamma curve selected
 4001e44:	01000984 	movi	r4,38
 4001e48:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 4001e4c:	01000044 	movi	r4,1
 4001e50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xE0);    //Set Gamma
 4001e54:	01003804 	movi	r4,224
 4001e58:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0F);
 4001e5c:	010003c4 	movi	r4,15
 4001e60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 4001e64:	01000a84 	movi	r4,42
 4001e68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x28);
 4001e6c:	01000a04 	movi	r4,40
 4001e70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 4001e74:	01000204 	movi	r4,8
 4001e78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0E);
 4001e7c:	01000384 	movi	r4,14
 4001e80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x08);
 4001e84:	01000204 	movi	r4,8
 4001e88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 4001e8c:	01001504 	movi	r4,84
 4001e90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0XA9);
 4001e94:	01002a44 	movi	r4,169
 4001e98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 4001e9c:	010010c4 	movi	r4,67
 4001ea0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0A);
 4001ea4:	01000284 	movi	r4,10
 4001ea8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 4001eac:	010003c4 	movi	r4,15
 4001eb0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001eb4:	0009883a 	mov	r4,zero
 4001eb8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001ebc:	0009883a 	mov	r4,zero
 4001ec0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001ec4:	0009883a 	mov	r4,zero
 4001ec8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001ecc:	0009883a 	mov	r4,zero
 4001ed0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0XE1);    //Set Gamma
 4001ed4:	01003844 	movi	r4,225
 4001ed8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4001edc:	0009883a 	mov	r4,zero
 4001ee0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x15);
 4001ee4:	01000544 	movi	r4,21
 4001ee8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 4001eec:	010005c4 	movi	r4,23
 4001ef0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x07);
 4001ef4:	010001c4 	movi	r4,7
 4001ef8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 4001efc:	01000444 	movi	r4,17
 4001f00:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x06);
 4001f04:	01000184 	movi	r4,6
 4001f08:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2B);
 4001f0c:	01000ac4 	movi	r4,43
 4001f10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 4001f14:	01001584 	movi	r4,86
 4001f18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 4001f1c:	01000f04 	movi	r4,60
 4001f20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 4001f24:	01000144 	movi	r4,5
 4001f28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 4001f2c:	01000404 	movi	r4,16
 4001f30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 4001f34:	010003c4 	movi	r4,15
 4001f38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 4001f3c:	01000fc4 	movi	r4,63
 4001f40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 4001f44:	01000fc4 	movi	r4,63
 4001f48:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0F);
 4001f4c:	010003c4 	movi	r4,15
 4001f50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x2B);
 4001f54:	01000ac4 	movi	r4,43
 4001f58:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4001f5c:	0009883a 	mov	r4,zero
 4001f60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001f64:	0009883a 	mov	r4,zero
 4001f68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 4001f6c:	01000044 	movi	r4,1
 4001f70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3f);
 4001f74:	01000fc4 	movi	r4,63
 4001f78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x2A);
 4001f7c:	01000a84 	movi	r4,42
 4001f80:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4001f84:	0009883a 	mov	r4,zero
 4001f88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001f8c:	0009883a 	mov	r4,zero
 4001f90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4001f94:	0009883a 	mov	r4,zero
 4001f98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xef);
 4001f9c:	01003bc4 	movi	r4,239
 4001fa0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x11); //Exit Sleep
 4001fa4:	01000444 	movi	r4,17
 4001fa8:	40002380 	call	4000238 <LCD_WR_CMD>
        delay_ms(120);
 4001fac:	01001e04 	movi	r4,120
 4001fb0:	40002000 	call	4000200 <delay_ms>
        LCD_WR_CMD(0x29); //display on
 4001fb4:	01000a44 	movi	r4,41
 4001fb8:	40002380 	call	4000238 <LCD_WR_CMD>
 4001fbc:	000a0006 	br	40047c0 <MCULCD_Init+0x2dc4>
    }else if(lcddev.id==0x5310) {
 4001fc0:	00810374 	movhi	r2,1037
 4001fc4:	10906504 	addi	r2,r2,16788
 4001fc8:	10800217 	ldw	r2,8(r2)
 4001fcc:	1094c418 	cmpnei	r2,r2,21264
 4001fd0:	1004fb1e 	bne	r2,zero,40033c0 <MCULCD_Init+0x19c4>
        LCD_WR_CMD(0xED);
 4001fd4:	01003b44 	movi	r4,237
 4001fd8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 4001fdc:	01000044 	movi	r4,1
 4001fe0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);
 4001fe4:	01003f84 	movi	r4,254
 4001fe8:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xEE);
 4001fec:	01003b84 	movi	r4,238
 4001ff0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xDE);
 4001ff4:	01003784 	movi	r4,222
 4001ff8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 4001ffc:	01000844 	movi	r4,33
 4002000:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xF1);
 4002004:	01003c44 	movi	r4,241
 4002008:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 400200c:	01000044 	movi	r4,1
 4002010:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xDF);
 4002014:	010037c4 	movi	r4,223
 4002018:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x10);
 400201c:	01000404 	movi	r4,16
 4002020:	40002a00 	call	40002a0 <LCD_WR_DATA>

        //VCOMvoltage//
        LCD_WR_CMD(0xC4);
 4002024:	01003104 	movi	r4,196
 4002028:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x8F);      //5f
 400202c:	010023c4 	movi	r4,143
 4002030:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC6);
 4002034:	01003184 	movi	r4,198
 4002038:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 400203c:	0009883a 	mov	r4,zero
 4002040:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 4002044:	01003884 	movi	r4,226
 4002048:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 400204c:	01003884 	movi	r4,226
 4002050:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE2);
 4002054:	01003884 	movi	r4,226
 4002058:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xBF);
 400205c:	01002fc4 	movi	r4,191
 4002060:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xAA);
 4002064:	01002a84 	movi	r4,170
 4002068:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB0);
 400206c:	01002c04 	movi	r4,176
 4002070:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0D);
 4002074:	01000344 	movi	r4,13
 4002078:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400207c:	0009883a 	mov	r4,zero
 4002080:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0D);
 4002084:	01000344 	movi	r4,13
 4002088:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400208c:	0009883a 	mov	r4,zero
 4002090:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x11);
 4002094:	01000444 	movi	r4,17
 4002098:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400209c:	0009883a 	mov	r4,zero
 40020a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x19);
 40020a4:	01000644 	movi	r4,25
 40020a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40020ac:	0009883a 	mov	r4,zero
 40020b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 40020b4:	01000844 	movi	r4,33
 40020b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40020bc:	0009883a 	mov	r4,zero
 40020c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2D);
 40020c4:	01000b44 	movi	r4,45
 40020c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40020cc:	0009883a 	mov	r4,zero
 40020d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3D);
 40020d4:	01000f44 	movi	r4,61
 40020d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40020dc:	0009883a 	mov	r4,zero
 40020e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 40020e4:	01001744 	movi	r4,93
 40020e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40020ec:	0009883a 	mov	r4,zero
 40020f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 40020f4:	01001744 	movi	r4,93
 40020f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40020fc:	0009883a 	mov	r4,zero
 4002100:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB1);
 4002104:	01002c44 	movi	r4,177
 4002108:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x80);
 400210c:	01002004 	movi	r4,128
 4002110:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002114:	0009883a 	mov	r4,zero
 4002118:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 400211c:	010022c4 	movi	r4,139
 4002120:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002124:	0009883a 	mov	r4,zero
 4002128:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 400212c:	01002584 	movi	r4,150
 4002130:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002134:	0009883a 	mov	r4,zero
 4002138:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB2);
 400213c:	01002c84 	movi	r4,178
 4002140:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4002144:	0009883a 	mov	r4,zero
 4002148:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400214c:	0009883a 	mov	r4,zero
 4002150:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 4002154:	01000084 	movi	r4,2
 4002158:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400215c:	0009883a 	mov	r4,zero
 4002160:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 4002164:	010000c4 	movi	r4,3
 4002168:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400216c:	0009883a 	mov	r4,zero
 4002170:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB3);
 4002174:	01002cc4 	movi	r4,179
 4002178:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 400217c:	0009883a 	mov	r4,zero
 4002180:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002184:	0009883a 	mov	r4,zero
 4002188:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400218c:	0009883a 	mov	r4,zero
 4002190:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002194:	0009883a 	mov	r4,zero
 4002198:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400219c:	0009883a 	mov	r4,zero
 40021a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021a4:	0009883a 	mov	r4,zero
 40021a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021ac:	0009883a 	mov	r4,zero
 40021b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021b4:	0009883a 	mov	r4,zero
 40021b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021bc:	0009883a 	mov	r4,zero
 40021c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021c4:	0009883a 	mov	r4,zero
 40021c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021cc:	0009883a 	mov	r4,zero
 40021d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021d4:	0009883a 	mov	r4,zero
 40021d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021dc:	0009883a 	mov	r4,zero
 40021e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021e4:	0009883a 	mov	r4,zero
 40021e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021ec:	0009883a 	mov	r4,zero
 40021f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021f4:	0009883a 	mov	r4,zero
 40021f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40021fc:	0009883a 	mov	r4,zero
 4002200:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002204:	0009883a 	mov	r4,zero
 4002208:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400220c:	0009883a 	mov	r4,zero
 4002210:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002214:	0009883a 	mov	r4,zero
 4002218:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400221c:	0009883a 	mov	r4,zero
 4002220:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002224:	0009883a 	mov	r4,zero
 4002228:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400222c:	0009883a 	mov	r4,zero
 4002230:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002234:	0009883a 	mov	r4,zero
 4002238:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB4);
 400223c:	01002d04 	movi	r4,180
 4002240:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x8B);
 4002244:	010022c4 	movi	r4,139
 4002248:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400224c:	0009883a 	mov	r4,zero
 4002250:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x96);
 4002254:	01002584 	movi	r4,150
 4002258:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400225c:	0009883a 	mov	r4,zero
 4002260:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA1);
 4002264:	01002844 	movi	r4,161
 4002268:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400226c:	0009883a 	mov	r4,zero
 4002270:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB5);
 4002274:	01002d44 	movi	r4,181
 4002278:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x02);
 400227c:	01000084 	movi	r4,2
 4002280:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002284:	0009883a 	mov	r4,zero
 4002288:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x03);
 400228c:	010000c4 	movi	r4,3
 4002290:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002294:	0009883a 	mov	r4,zero
 4002298:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 400229c:	01000104 	movi	r4,4
 40022a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40022a4:	0009883a 	mov	r4,zero
 40022a8:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB6);
 40022ac:	01002d84 	movi	r4,182
 40022b0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 40022b4:	0009883a 	mov	r4,zero
 40022b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40022bc:	0009883a 	mov	r4,zero
 40022c0:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB7);
 40022c4:	01002dc4 	movi	r4,183
 40022c8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 40022cc:	0009883a 	mov	r4,zero
 40022d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40022d4:	0009883a 	mov	r4,zero
 40022d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3F);
 40022dc:	01000fc4 	movi	r4,63
 40022e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40022e4:	0009883a 	mov	r4,zero
 40022e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5E);
 40022ec:	01001784 	movi	r4,94
 40022f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40022f4:	0009883a 	mov	r4,zero
 40022f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 40022fc:	01001904 	movi	r4,100
 4002300:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002304:	0009883a 	mov	r4,zero
 4002308:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8C);
 400230c:	01002304 	movi	r4,140
 4002310:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002314:	0009883a 	mov	r4,zero
 4002318:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xAC);
 400231c:	01002b04 	movi	r4,172
 4002320:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002324:	0009883a 	mov	r4,zero
 4002328:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 400232c:	01003704 	movi	r4,220
 4002330:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002334:	0009883a 	mov	r4,zero
 4002338:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x70);
 400233c:	01001c04 	movi	r4,112
 4002340:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002344:	0009883a 	mov	r4,zero
 4002348:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x90);
 400234c:	01002404 	movi	r4,144
 4002350:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002354:	0009883a 	mov	r4,zero
 4002358:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xEB);
 400235c:	01003ac4 	movi	r4,235
 4002360:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002364:	0009883a 	mov	r4,zero
 4002368:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 400236c:	01003704 	movi	r4,220
 4002370:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002374:	0009883a 	mov	r4,zero
 4002378:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB8);
 400237c:	01002e04 	movi	r4,184
 4002380:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4002384:	0009883a 	mov	r4,zero
 4002388:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400238c:	0009883a 	mov	r4,zero
 4002390:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002394:	0009883a 	mov	r4,zero
 4002398:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400239c:	0009883a 	mov	r4,zero
 40023a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023a4:	0009883a 	mov	r4,zero
 40023a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023ac:	0009883a 	mov	r4,zero
 40023b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023b4:	0009883a 	mov	r4,zero
 40023b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023bc:	0009883a 	mov	r4,zero
 40023c0:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xBA);
 40023c4:	01002e84 	movi	r4,186
 40023c8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x24);
 40023cc:	01000904 	movi	r4,36
 40023d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023d4:	0009883a 	mov	r4,zero
 40023d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023dc:	0009883a 	mov	r4,zero
 40023e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023e4:	0009883a 	mov	r4,zero
 40023e8:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC1);
 40023ec:	01003044 	movi	r4,193
 40023f0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);
 40023f4:	01000804 	movi	r4,32
 40023f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40023fc:	0009883a 	mov	r4,zero
 4002400:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x54);
 4002404:	01001504 	movi	r4,84
 4002408:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400240c:	0009883a 	mov	r4,zero
 4002410:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 4002414:	01003fc4 	movi	r4,255
 4002418:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400241c:	0009883a 	mov	r4,zero
 4002420:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC2);
 4002424:	01003084 	movi	r4,194
 4002428:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x0A);
 400242c:	01000284 	movi	r4,10
 4002430:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002434:	0009883a 	mov	r4,zero
 4002438:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);
 400243c:	01000104 	movi	r4,4
 4002440:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002444:	0009883a 	mov	r4,zero
 4002448:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC3);
 400244c:	010030c4 	movi	r4,195
 4002450:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x3C);
 4002454:	01000f04 	movi	r4,60
 4002458:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400245c:	0009883a 	mov	r4,zero
 4002460:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3A);
 4002464:	01000e84 	movi	r4,58
 4002468:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400246c:	0009883a 	mov	r4,zero
 4002470:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x39);
 4002474:	01000e44 	movi	r4,57
 4002478:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400247c:	0009883a 	mov	r4,zero
 4002480:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x37);
 4002484:	01000dc4 	movi	r4,55
 4002488:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400248c:	0009883a 	mov	r4,zero
 4002490:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 4002494:	01000f04 	movi	r4,60
 4002498:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400249c:	0009883a 	mov	r4,zero
 40024a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 40024a4:	01000d84 	movi	r4,54
 40024a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40024ac:	0009883a 	mov	r4,zero
 40024b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 40024b4:	01000c84 	movi	r4,50
 40024b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40024bc:	0009883a 	mov	r4,zero
 40024c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 40024c4:	01000bc4 	movi	r4,47
 40024c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40024cc:	0009883a 	mov	r4,zero
 40024d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 40024d4:	01000b04 	movi	r4,44
 40024d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40024dc:	0009883a 	mov	r4,zero
 40024e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 40024e4:	01000a44 	movi	r4,41
 40024e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40024ec:	0009883a 	mov	r4,zero
 40024f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 40024f4:	01000984 	movi	r4,38
 40024f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40024fc:	0009883a 	mov	r4,zero
 4002500:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 4002504:	01000904 	movi	r4,36
 4002508:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400250c:	0009883a 	mov	r4,zero
 4002510:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 4002514:	01000904 	movi	r4,36
 4002518:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400251c:	0009883a 	mov	r4,zero
 4002520:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 4002524:	010008c4 	movi	r4,35
 4002528:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400252c:	0009883a 	mov	r4,zero
 4002530:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 4002534:	01000f04 	movi	r4,60
 4002538:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400253c:	0009883a 	mov	r4,zero
 4002540:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 4002544:	01000d84 	movi	r4,54
 4002548:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400254c:	0009883a 	mov	r4,zero
 4002550:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x32);
 4002554:	01000c84 	movi	r4,50
 4002558:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400255c:	0009883a 	mov	r4,zero
 4002560:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2F);
 4002564:	01000bc4 	movi	r4,47
 4002568:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400256c:	0009883a 	mov	r4,zero
 4002570:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2C);
 4002574:	01000b04 	movi	r4,44
 4002578:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400257c:	0009883a 	mov	r4,zero
 4002580:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 4002584:	01000a44 	movi	r4,41
 4002588:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400258c:	0009883a 	mov	r4,zero
 4002590:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x26);
 4002594:	01000984 	movi	r4,38
 4002598:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400259c:	0009883a 	mov	r4,zero
 40025a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 40025a4:	01000904 	movi	r4,36
 40025a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40025ac:	0009883a 	mov	r4,zero
 40025b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x24);
 40025b4:	01000904 	movi	r4,36
 40025b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40025bc:	0009883a 	mov	r4,zero
 40025c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 40025c4:	010008c4 	movi	r4,35
 40025c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40025cc:	0009883a 	mov	r4,zero
 40025d0:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC4);
 40025d4:	01003104 	movi	r4,196
 40025d8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x62);
 40025dc:	01001884 	movi	r4,98
 40025e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40025e4:	0009883a 	mov	r4,zero
 40025e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x05);
 40025ec:	01000144 	movi	r4,5
 40025f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40025f4:	0009883a 	mov	r4,zero
 40025f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 40025fc:	01002104 	movi	r4,132
 4002600:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002604:	0009883a 	mov	r4,zero
 4002608:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF0);
 400260c:	01003c04 	movi	r4,240
 4002610:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002614:	0009883a 	mov	r4,zero
 4002618:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 400261c:	01000604 	movi	r4,24
 4002620:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002624:	0009883a 	mov	r4,zero
 4002628:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA4);
 400262c:	01002904 	movi	r4,164
 4002630:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002634:	0009883a 	mov	r4,zero
 4002638:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x18);
 400263c:	01000604 	movi	r4,24
 4002640:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002644:	0009883a 	mov	r4,zero
 4002648:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 400264c:	01001404 	movi	r4,80
 4002650:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002654:	0009883a 	mov	r4,zero
 4002658:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0C);
 400265c:	01000304 	movi	r4,12
 4002660:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002664:	0009883a 	mov	r4,zero
 4002668:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 400266c:	010005c4 	movi	r4,23
 4002670:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002674:	0009883a 	mov	r4,zero
 4002678:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x95);
 400267c:	01002544 	movi	r4,149
 4002680:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002684:	0009883a 	mov	r4,zero
 4002688:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 400268c:	01003cc4 	movi	r4,243
 4002690:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002694:	0009883a 	mov	r4,zero
 4002698:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE6);
 400269c:	01003984 	movi	r4,230
 40026a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40026a4:	0009883a 	mov	r4,zero
 40026a8:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC5);
 40026ac:	01003144 	movi	r4,197
 40026b0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x32);
 40026b4:	01000c84 	movi	r4,50
 40026b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40026bc:	0009883a 	mov	r4,zero
 40026c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 40026c4:	01001104 	movi	r4,68
 40026c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40026cc:	0009883a 	mov	r4,zero
 40026d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x65);
 40026d4:	01001944 	movi	r4,101
 40026d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40026dc:	0009883a 	mov	r4,zero
 40026e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 40026e4:	01001d84 	movi	r4,118
 40026e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40026ec:	0009883a 	mov	r4,zero
 40026f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 40026f4:	01002204 	movi	r4,136
 40026f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40026fc:	0009883a 	mov	r4,zero
 4002700:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC6);
 4002704:	01003184 	movi	r4,198
 4002708:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);
 400270c:	01000804 	movi	r4,32
 4002710:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002714:	0009883a 	mov	r4,zero
 4002718:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x17);
 400271c:	010005c4 	movi	r4,23
 4002720:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002724:	0009883a 	mov	r4,zero
 4002728:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 400272c:	01000044 	movi	r4,1
 4002730:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002734:	0009883a 	mov	r4,zero
 4002738:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC7);
 400273c:	010031c4 	movi	r4,199
 4002740:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4002744:	0009883a 	mov	r4,zero
 4002748:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400274c:	0009883a 	mov	r4,zero
 4002750:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002754:	0009883a 	mov	r4,zero
 4002758:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400275c:	0009883a 	mov	r4,zero
 4002760:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC8);
 4002764:	01003204 	movi	r4,200
 4002768:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 400276c:	0009883a 	mov	r4,zero
 4002770:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002774:	0009883a 	mov	r4,zero
 4002778:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400277c:	0009883a 	mov	r4,zero
 4002780:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002784:	0009883a 	mov	r4,zero
 4002788:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xC9);
 400278c:	01003244 	movi	r4,201
 4002790:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4002794:	0009883a 	mov	r4,zero
 4002798:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400279c:	0009883a 	mov	r4,zero
 40027a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027a4:	0009883a 	mov	r4,zero
 40027a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027ac:	0009883a 	mov	r4,zero
 40027b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027b4:	0009883a 	mov	r4,zero
 40027b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027bc:	0009883a 	mov	r4,zero
 40027c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027c4:	0009883a 	mov	r4,zero
 40027c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027cc:	0009883a 	mov	r4,zero
 40027d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027d4:	0009883a 	mov	r4,zero
 40027d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027dc:	0009883a 	mov	r4,zero
 40027e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027e4:	0009883a 	mov	r4,zero
 40027e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027ec:	0009883a 	mov	r4,zero
 40027f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027f4:	0009883a 	mov	r4,zero
 40027f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40027fc:	0009883a 	mov	r4,zero
 4002800:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002804:	0009883a 	mov	r4,zero
 4002808:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400280c:	0009883a 	mov	r4,zero
 4002810:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE0);
 4002814:	01003804 	movi	r4,224
 4002818:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x16);
 400281c:	01000584 	movi	r4,22
 4002820:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002824:	0009883a 	mov	r4,zero
 4002828:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 400282c:	01000704 	movi	r4,28
 4002830:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002834:	0009883a 	mov	r4,zero
 4002838:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x21);
 400283c:	01000844 	movi	r4,33
 4002840:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002844:	0009883a 	mov	r4,zero
 4002848:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 400284c:	01000d84 	movi	r4,54
 4002850:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002854:	0009883a 	mov	r4,zero
 4002858:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x46);
 400285c:	01001184 	movi	r4,70
 4002860:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002864:	0009883a 	mov	r4,zero
 4002868:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 400286c:	01001484 	movi	r4,82
 4002870:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002874:	0009883a 	mov	r4,zero
 4002878:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 400287c:	01001904 	movi	r4,100
 4002880:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002884:	0009883a 	mov	r4,zero
 4002888:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 400288c:	01001e84 	movi	r4,122
 4002890:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002894:	0009883a 	mov	r4,zero
 4002898:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 400289c:	010022c4 	movi	r4,139
 40028a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40028a4:	0009883a 	mov	r4,zero
 40028a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 40028ac:	01002644 	movi	r4,153
 40028b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40028b4:	0009883a 	mov	r4,zero
 40028b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 40028bc:	01002a04 	movi	r4,168
 40028c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40028c4:	0009883a 	mov	r4,zero
 40028c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 40028cc:	01002e44 	movi	r4,185
 40028d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40028d4:	0009883a 	mov	r4,zero
 40028d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 40028dc:	01003104 	movi	r4,196
 40028e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40028e4:	0009883a 	mov	r4,zero
 40028e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 40028ec:	01003284 	movi	r4,202
 40028f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40028f4:	0009883a 	mov	r4,zero
 40028f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 40028fc:	01003484 	movi	r4,210
 4002900:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002904:	0009883a 	mov	r4,zero
 4002908:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD9);
 400290c:	01003644 	movi	r4,217
 4002910:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002914:	0009883a 	mov	r4,zero
 4002918:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 400291c:	01003804 	movi	r4,224
 4002920:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002924:	0009883a 	mov	r4,zero
 4002928:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 400292c:	01003cc4 	movi	r4,243
 4002930:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002934:	0009883a 	mov	r4,zero
 4002938:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE1);
 400293c:	01003844 	movi	r4,225
 4002940:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x16);
 4002944:	01000584 	movi	r4,22
 4002948:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400294c:	0009883a 	mov	r4,zero
 4002950:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 4002954:	01000704 	movi	r4,28
 4002958:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400295c:	0009883a 	mov	r4,zero
 4002960:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x22);
 4002964:	01000884 	movi	r4,34
 4002968:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400296c:	0009883a 	mov	r4,zero
 4002970:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x36);
 4002974:	01000d84 	movi	r4,54
 4002978:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400297c:	0009883a 	mov	r4,zero
 4002980:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 4002984:	01001144 	movi	r4,69
 4002988:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400298c:	0009883a 	mov	r4,zero
 4002990:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x52);
 4002994:	01001484 	movi	r4,82
 4002998:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400299c:	0009883a 	mov	r4,zero
 40029a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x64);
 40029a4:	01001904 	movi	r4,100
 40029a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40029ac:	0009883a 	mov	r4,zero
 40029b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x7A);
 40029b4:	01001e84 	movi	r4,122
 40029b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40029bc:	0009883a 	mov	r4,zero
 40029c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x8B);
 40029c4:	010022c4 	movi	r4,139
 40029c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40029cc:	0009883a 	mov	r4,zero
 40029d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 40029d4:	01002644 	movi	r4,153
 40029d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40029dc:	0009883a 	mov	r4,zero
 40029e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA8);
 40029e4:	01002a04 	movi	r4,168
 40029e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40029ec:	0009883a 	mov	r4,zero
 40029f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB9);
 40029f4:	01002e44 	movi	r4,185
 40029f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40029fc:	0009883a 	mov	r4,zero
 4002a00:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 4002a04:	01003104 	movi	r4,196
 4002a08:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a0c:	0009883a 	mov	r4,zero
 4002a10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCA);
 4002a14:	01003284 	movi	r4,202
 4002a18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a1c:	0009883a 	mov	r4,zero
 4002a20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD2);
 4002a24:	01003484 	movi	r4,210
 4002a28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a2c:	0009883a 	mov	r4,zero
 4002a30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD8);
 4002a34:	01003604 	movi	r4,216
 4002a38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a3c:	0009883a 	mov	r4,zero
 4002a40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xE0);
 4002a44:	01003804 	movi	r4,224
 4002a48:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a4c:	0009883a 	mov	r4,zero
 4002a50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 4002a54:	01003cc4 	movi	r4,243
 4002a58:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a5c:	0009883a 	mov	r4,zero
 4002a60:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE2);
 4002a64:	01003884 	movi	r4,226
 4002a68:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x05);
 4002a6c:	01000144 	movi	r4,5
 4002a70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a74:	0009883a 	mov	r4,zero
 4002a78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x0B);
 4002a7c:	010002c4 	movi	r4,11
 4002a80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a84:	0009883a 	mov	r4,zero
 4002a88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1B);
 4002a8c:	010006c4 	movi	r4,27
 4002a90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002a94:	0009883a 	mov	r4,zero
 4002a98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 4002a9c:	01000d04 	movi	r4,52
 4002aa0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002aa4:	0009883a 	mov	r4,zero
 4002aa8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 4002aac:	01001104 	movi	r4,68
 4002ab0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ab4:	0009883a 	mov	r4,zero
 4002ab8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4F);
 4002abc:	010013c4 	movi	r4,79
 4002ac0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ac4:	0009883a 	mov	r4,zero
 4002ac8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x61);
 4002acc:	01001844 	movi	r4,97
 4002ad0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ad4:	0009883a 	mov	r4,zero
 4002ad8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x79);
 4002adc:	01001e44 	movi	r4,121
 4002ae0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ae4:	0009883a 	mov	r4,zero
 4002ae8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 4002aec:	01002204 	movi	r4,136
 4002af0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002af4:	0009883a 	mov	r4,zero
 4002af8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 4002afc:	010025c4 	movi	r4,151
 4002b00:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b04:	0009883a 	mov	r4,zero
 4002b08:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 4002b0c:	01002984 	movi	r4,166
 4002b10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b14:	0009883a 	mov	r4,zero
 4002b18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 4002b1c:	01002dc4 	movi	r4,183
 4002b20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b24:	0009883a 	mov	r4,zero
 4002b28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 4002b2c:	01003084 	movi	r4,194
 4002b30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b34:	0009883a 	mov	r4,zero
 4002b38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 4002b3c:	010031c4 	movi	r4,199
 4002b40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b44:	0009883a 	mov	r4,zero
 4002b48:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 4002b4c:	01003444 	movi	r4,209
 4002b50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b54:	0009883a 	mov	r4,zero
 4002b58:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD6);
 4002b5c:	01003584 	movi	r4,214
 4002b60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b64:	0009883a 	mov	r4,zero
 4002b68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 4002b6c:	01003744 	movi	r4,221
 4002b70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b74:	0009883a 	mov	r4,zero
 4002b78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 4002b7c:	01003cc4 	movi	r4,243
 4002b80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b84:	0009883a 	mov	r4,zero
 4002b88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xE3);
 4002b8c:	010038c4 	movi	r4,227
 4002b90:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x05);
 4002b94:	01000144 	movi	r4,5
 4002b98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002b9c:	0009883a 	mov	r4,zero
 4002ba0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA);
 4002ba4:	01000284 	movi	r4,10
 4002ba8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002bac:	0009883a 	mov	r4,zero
 4002bb0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x1C);
 4002bb4:	01000704 	movi	r4,28
 4002bb8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002bbc:	0009883a 	mov	r4,zero
 4002bc0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 4002bc4:	01000cc4 	movi	r4,51
 4002bc8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002bcc:	0009883a 	mov	r4,zero
 4002bd0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 4002bd4:	01001104 	movi	r4,68
 4002bd8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002bdc:	0009883a 	mov	r4,zero
 4002be0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 4002be4:	01001404 	movi	r4,80
 4002be8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002bec:	0009883a 	mov	r4,zero
 4002bf0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x62);
 4002bf4:	01001884 	movi	r4,98
 4002bf8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002bfc:	0009883a 	mov	r4,zero
 4002c00:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x78);
 4002c04:	01001e04 	movi	r4,120
 4002c08:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c0c:	0009883a 	mov	r4,zero
 4002c10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 4002c14:	01002204 	movi	r4,136
 4002c18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c1c:	0009883a 	mov	r4,zero
 4002c20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x97);
 4002c24:	010025c4 	movi	r4,151
 4002c28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c2c:	0009883a 	mov	r4,zero
 4002c30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA6);
 4002c34:	01002984 	movi	r4,166
 4002c38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c3c:	0009883a 	mov	r4,zero
 4002c40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB7);
 4002c44:	01002dc4 	movi	r4,183
 4002c48:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c4c:	0009883a 	mov	r4,zero
 4002c50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC2);
 4002c54:	01003084 	movi	r4,194
 4002c58:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c5c:	0009883a 	mov	r4,zero
 4002c60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC7);
 4002c64:	010031c4 	movi	r4,199
 4002c68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c6c:	0009883a 	mov	r4,zero
 4002c70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD1);
 4002c74:	01003444 	movi	r4,209
 4002c78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c7c:	0009883a 	mov	r4,zero
 4002c80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD5);
 4002c84:	01003544 	movi	r4,213
 4002c88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c8c:	0009883a 	mov	r4,zero
 4002c90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 4002c94:	01003744 	movi	r4,221
 4002c98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002c9c:	0009883a 	mov	r4,zero
 4002ca0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 4002ca4:	01003cc4 	movi	r4,243
 4002ca8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002cac:	0009883a 	mov	r4,zero
 4002cb0:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE4);
 4002cb4:	01003904 	movi	r4,228
 4002cb8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);
 4002cbc:	01000044 	movi	r4,1
 4002cc0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002cc4:	0009883a 	mov	r4,zero
 4002cc8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);
 4002ccc:	01000044 	movi	r4,1
 4002cd0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002cd4:	0009883a 	mov	r4,zero
 4002cd8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 4002cdc:	01000084 	movi	r4,2
 4002ce0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ce4:	0009883a 	mov	r4,zero
 4002ce8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x2A);
 4002cec:	01000a84 	movi	r4,42
 4002cf0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002cf4:	0009883a 	mov	r4,zero
 4002cf8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 4002cfc:	01000f04 	movi	r4,60
 4002d00:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d04:	0009883a 	mov	r4,zero
 4002d08:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 4002d0c:	010012c4 	movi	r4,75
 4002d10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d14:	0009883a 	mov	r4,zero
 4002d18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 4002d1c:	01001744 	movi	r4,93
 4002d20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d24:	0009883a 	mov	r4,zero
 4002d28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 4002d2c:	01001d04 	movi	r4,116
 4002d30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d34:	0009883a 	mov	r4,zero
 4002d38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 4002d3c:	01002104 	movi	r4,132
 4002d40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d44:	0009883a 	mov	r4,zero
 4002d48:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 4002d4c:	010024c4 	movi	r4,147
 4002d50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d54:	0009883a 	mov	r4,zero
 4002d58:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 4002d5c:	01002884 	movi	r4,162
 4002d60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d64:	0009883a 	mov	r4,zero
 4002d68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 4002d6c:	01002cc4 	movi	r4,179
 4002d70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d74:	0009883a 	mov	r4,zero
 4002d78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 4002d7c:	01002f84 	movi	r4,190
 4002d80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d84:	0009883a 	mov	r4,zero
 4002d88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 4002d8c:	01003104 	movi	r4,196
 4002d90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002d94:	0009883a 	mov	r4,zero
 4002d98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 4002d9c:	01003344 	movi	r4,205
 4002da0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002da4:	0009883a 	mov	r4,zero
 4002da8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 4002dac:	010034c4 	movi	r4,211
 4002db0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002db4:	0009883a 	mov	r4,zero
 4002db8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDD);
 4002dbc:	01003744 	movi	r4,221
 4002dc0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002dc4:	0009883a 	mov	r4,zero
 4002dc8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 4002dcc:	01003cc4 	movi	r4,243
 4002dd0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002dd4:	0009883a 	mov	r4,zero
 4002dd8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xE5);
 4002ddc:	01003944 	movi	r4,229
 4002de0:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 4002de4:	0009883a 	mov	r4,zero
 4002de8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002dec:	0009883a 	mov	r4,zero
 4002df0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002df4:	0009883a 	mov	r4,zero
 4002df8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002dfc:	0009883a 	mov	r4,zero
 4002e00:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);
 4002e04:	01000084 	movi	r4,2
 4002e08:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e0c:	0009883a 	mov	r4,zero
 4002e10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 4002e14:	01000a44 	movi	r4,41
 4002e18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e1c:	0009883a 	mov	r4,zero
 4002e20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x3C);
 4002e24:	01000f04 	movi	r4,60
 4002e28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e2c:	0009883a 	mov	r4,zero
 4002e30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x4B);
 4002e34:	010012c4 	movi	r4,75
 4002e38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e3c:	0009883a 	mov	r4,zero
 4002e40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x5D);
 4002e44:	01001744 	movi	r4,93
 4002e48:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e4c:	0009883a 	mov	r4,zero
 4002e50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x74);
 4002e54:	01001d04 	movi	r4,116
 4002e58:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e5c:	0009883a 	mov	r4,zero
 4002e60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x84);
 4002e64:	01002104 	movi	r4,132
 4002e68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e6c:	0009883a 	mov	r4,zero
 4002e70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x93);
 4002e74:	010024c4 	movi	r4,147
 4002e78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e7c:	0009883a 	mov	r4,zero
 4002e80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xA2);
 4002e84:	01002884 	movi	r4,162
 4002e88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e8c:	0009883a 	mov	r4,zero
 4002e90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xB3);
 4002e94:	01002cc4 	movi	r4,179
 4002e98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002e9c:	0009883a 	mov	r4,zero
 4002ea0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBE);
 4002ea4:	01002f84 	movi	r4,190
 4002ea8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002eac:	0009883a 	mov	r4,zero
 4002eb0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xC4);
 4002eb4:	01003104 	movi	r4,196
 4002eb8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ebc:	0009883a 	mov	r4,zero
 4002ec0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xCD);
 4002ec4:	01003344 	movi	r4,205
 4002ec8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ecc:	0009883a 	mov	r4,zero
 4002ed0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xD3);
 4002ed4:	010034c4 	movi	r4,211
 4002ed8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002edc:	0009883a 	mov	r4,zero
 4002ee0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xDC);
 4002ee4:	01003704 	movi	r4,220
 4002ee8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002eec:	0009883a 	mov	r4,zero
 4002ef0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xF3);
 4002ef4:	01003cc4 	movi	r4,243
 4002ef8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002efc:	0009883a 	mov	r4,zero
 4002f00:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE6);
 4002f04:	01003984 	movi	r4,230
 4002f08:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x11);
 4002f0c:	01000444 	movi	r4,17
 4002f10:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f14:	0009883a 	mov	r4,zero
 4002f18:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x34);
 4002f1c:	01000d04 	movi	r4,52
 4002f20:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f24:	0009883a 	mov	r4,zero
 4002f28:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 4002f2c:	01001584 	movi	r4,86
 4002f30:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f34:	0009883a 	mov	r4,zero
 4002f38:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 4002f3c:	01001d84 	movi	r4,118
 4002f40:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f44:	0009883a 	mov	r4,zero
 4002f48:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 4002f4c:	01001dc4 	movi	r4,119
 4002f50:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f54:	0009883a 	mov	r4,zero
 4002f58:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 4002f5c:	01001984 	movi	r4,102
 4002f60:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f64:	0009883a 	mov	r4,zero
 4002f68:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 4002f6c:	01002204 	movi	r4,136
 4002f70:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f74:	0009883a 	mov	r4,zero
 4002f78:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 4002f7c:	01002644 	movi	r4,153
 4002f80:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f84:	0009883a 	mov	r4,zero
 4002f88:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 4002f8c:	01002ec4 	movi	r4,187
 4002f90:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002f94:	0009883a 	mov	r4,zero
 4002f98:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 4002f9c:	01002644 	movi	r4,153
 4002fa0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002fa4:	0009883a 	mov	r4,zero
 4002fa8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 4002fac:	01001984 	movi	r4,102
 4002fb0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002fb4:	0009883a 	mov	r4,zero
 4002fb8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 4002fbc:	01001544 	movi	r4,85
 4002fc0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002fc4:	0009883a 	mov	r4,zero
 4002fc8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 4002fcc:	01001544 	movi	r4,85
 4002fd0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002fd4:	0009883a 	mov	r4,zero
 4002fd8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 4002fdc:	01001144 	movi	r4,69
 4002fe0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002fe4:	0009883a 	mov	r4,zero
 4002fe8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x43);
 4002fec:	010010c4 	movi	r4,67
 4002ff0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4002ff4:	0009883a 	mov	r4,zero
 4002ff8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 4002ffc:	01001104 	movi	r4,68
 4003000:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003004:	0009883a 	mov	r4,zero
 4003008:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE7);
 400300c:	010039c4 	movi	r4,231
 4003010:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x32);
 4003014:	01000c84 	movi	r4,50
 4003018:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400301c:	0009883a 	mov	r4,zero
 4003020:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 4003024:	01001544 	movi	r4,85
 4003028:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400302c:	0009883a 	mov	r4,zero
 4003030:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x76);
 4003034:	01001d84 	movi	r4,118
 4003038:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400303c:	0009883a 	mov	r4,zero
 4003040:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 4003044:	01001984 	movi	r4,102
 4003048:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400304c:	0009883a 	mov	r4,zero
 4003050:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 4003054:	010019c4 	movi	r4,103
 4003058:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400305c:	0009883a 	mov	r4,zero
 4003060:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x67);
 4003064:	010019c4 	movi	r4,103
 4003068:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400306c:	0009883a 	mov	r4,zero
 4003070:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 4003074:	010021c4 	movi	r4,135
 4003078:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400307c:	0009883a 	mov	r4,zero
 4003080:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 4003084:	01002644 	movi	r4,153
 4003088:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400308c:	0009883a 	mov	r4,zero
 4003090:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 4003094:	01002ec4 	movi	r4,187
 4003098:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400309c:	0009883a 	mov	r4,zero
 40030a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 40030a4:	01002644 	movi	r4,153
 40030a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40030ac:	0009883a 	mov	r4,zero
 40030b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 40030b4:	01001dc4 	movi	r4,119
 40030b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40030bc:	0009883a 	mov	r4,zero
 40030c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 40030c4:	01001104 	movi	r4,68
 40030c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40030cc:	0009883a 	mov	r4,zero
 40030d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x56);
 40030d4:	01001584 	movi	r4,86
 40030d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40030dc:	0009883a 	mov	r4,zero
 40030e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x23);
 40030e4:	010008c4 	movi	r4,35
 40030e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40030ec:	0009883a 	mov	r4,zero
 40030f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x33);
 40030f4:	01000cc4 	movi	r4,51
 40030f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40030fc:	0009883a 	mov	r4,zero
 4003100:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x45);
 4003104:	01001144 	movi	r4,69
 4003108:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400310c:	0009883a 	mov	r4,zero
 4003110:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE8);
 4003114:	01003a04 	movi	r4,232
 4003118:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 400311c:	0009883a 	mov	r4,zero
 4003120:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003124:	0009883a 	mov	r4,zero
 4003128:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 400312c:	01002644 	movi	r4,153
 4003130:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003134:	0009883a 	mov	r4,zero
 4003138:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x87);
 400313c:	010021c4 	movi	r4,135
 4003140:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003144:	0009883a 	mov	r4,zero
 4003148:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 400314c:	01002204 	movi	r4,136
 4003150:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003154:	0009883a 	mov	r4,zero
 4003158:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x77);
 400315c:	01001dc4 	movi	r4,119
 4003160:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003164:	0009883a 	mov	r4,zero
 4003168:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 400316c:	01001984 	movi	r4,102
 4003170:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003174:	0009883a 	mov	r4,zero
 4003178:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x88);
 400317c:	01002204 	movi	r4,136
 4003180:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003184:	0009883a 	mov	r4,zero
 4003188:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xAA);
 400318c:	01002a84 	movi	r4,170
 4003190:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003194:	0009883a 	mov	r4,zero
 4003198:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xBB);
 400319c:	01002ec4 	movi	r4,187
 40031a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40031a4:	0009883a 	mov	r4,zero
 40031a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x99);
 40031ac:	01002644 	movi	r4,153
 40031b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40031b4:	0009883a 	mov	r4,zero
 40031b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x66);
 40031bc:	01001984 	movi	r4,102
 40031c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40031c4:	0009883a 	mov	r4,zero
 40031c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 40031cc:	01001544 	movi	r4,85
 40031d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40031d4:	0009883a 	mov	r4,zero
 40031d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 40031dc:	01001544 	movi	r4,85
 40031e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40031e4:	0009883a 	mov	r4,zero
 40031e8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 40031ec:	01001104 	movi	r4,68
 40031f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40031f4:	0009883a 	mov	r4,zero
 40031f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x44);
 40031fc:	01001104 	movi	r4,68
 4003200:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003204:	0009883a 	mov	r4,zero
 4003208:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x55);
 400320c:	01001544 	movi	r4,85
 4003210:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003214:	0009883a 	mov	r4,zero
 4003218:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xE9);
 400321c:	01003a44 	movi	r4,233
 4003220:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xAA);
 4003224:	01002a84 	movi	r4,170
 4003228:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400322c:	0009883a 	mov	r4,zero
 4003230:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003234:	0009883a 	mov	r4,zero
 4003238:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400323c:	0009883a 	mov	r4,zero
 4003240:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0x00);
 4003244:	0009883a 	mov	r4,zero
 4003248:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xAA);
 400324c:	01002a84 	movi	r4,170
 4003250:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xCF);
 4003254:	010033c4 	movi	r4,207
 4003258:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 400325c:	0009883a 	mov	r4,zero
 4003260:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003264:	0009883a 	mov	r4,zero
 4003268:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400326c:	0009883a 	mov	r4,zero
 4003270:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003274:	0009883a 	mov	r4,zero
 4003278:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400327c:	0009883a 	mov	r4,zero
 4003280:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003284:	0009883a 	mov	r4,zero
 4003288:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400328c:	0009883a 	mov	r4,zero
 4003290:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003294:	0009883a 	mov	r4,zero
 4003298:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400329c:	0009883a 	mov	r4,zero
 40032a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032a4:	0009883a 	mov	r4,zero
 40032a8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032ac:	0009883a 	mov	r4,zero
 40032b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032b4:	0009883a 	mov	r4,zero
 40032b8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032bc:	0009883a 	mov	r4,zero
 40032c0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032c4:	0009883a 	mov	r4,zero
 40032c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032cc:	0009883a 	mov	r4,zero
 40032d0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032d4:	0009883a 	mov	r4,zero
 40032d8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032dc:	0009883a 	mov	r4,zero
 40032e0:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xF0);
 40032e4:	01003c04 	movi	r4,240
 40032e8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 40032ec:	0009883a 	mov	r4,zero
 40032f0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x50);
 40032f4:	01001404 	movi	r4,80
 40032f8:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40032fc:	0009883a 	mov	r4,zero
 4003300:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003304:	0009883a 	mov	r4,zero
 4003308:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 400330c:	0009883a 	mov	r4,zero
 4003310:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xF3);
 4003314:	01003cc4 	movi	r4,243
 4003318:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 400331c:	0009883a 	mov	r4,zero
 4003320:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xF9);
 4003324:	01003e44 	movi	r4,249
 4003328:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x06);
 400332c:	01000184 	movi	r4,6
 4003330:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x10);
 4003334:	01000404 	movi	r4,16
 4003338:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x29);
 400333c:	01000a44 	movi	r4,41
 4003340:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4003344:	0009883a 	mov	r4,zero
 4003348:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0x3A);
 400334c:	01000e84 	movi	r4,58
 4003350:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x55);    //66
 4003354:	01001544 	movi	r4,85
 4003358:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0x11);
 400335c:	01000444 	movi	r4,17
 4003360:	40002380 	call	4000238 <LCD_WR_CMD>
        delay_ms(100);
 4003364:	01001904 	movi	r4,100
 4003368:	40002000 	call	4000200 <delay_ms>
        LCD_WR_CMD(0x29);
 400336c:	01000a44 	movi	r4,41
 4003370:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_CMD(0x35);
 4003374:	01000d44 	movi	r4,53
 4003378:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);
 400337c:	0009883a 	mov	r4,zero
 4003380:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0x51);
 4003384:	01001444 	movi	r4,81
 4003388:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0xFF);
 400338c:	01003fc4 	movi	r4,255
 4003390:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x53);
 4003394:	010014c4 	movi	r4,83
 4003398:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x2C);
 400339c:	01000b04 	movi	r4,44
 40033a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x55);
 40033a4:	01001544 	movi	r4,85
 40033a8:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x82);
 40033ac:	01002084 	movi	r4,130
 40033b0:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0x2c);
 40033b4:	01000b04 	movi	r4,44
 40033b8:	40002380 	call	4000238 <LCD_WR_CMD>
 40033bc:	00050006 	br	40047c0 <MCULCD_Init+0x2dc4>
    }else if(lcddev.id==0x5510) {
 40033c0:	00810374 	movhi	r2,1037
 40033c4:	10906504 	addi	r2,r2,16788
 40033c8:	10800217 	ldw	r2,8(r2)
 40033cc:	10954418 	cmpnei	r2,r2,21776
 40033d0:	10047e1e 	bne	r2,zero,40045cc <MCULCD_Init+0x2bd0>
        // LV2 Page1 enable
        LCD_WriteReg(0xF000,0x55);
 40033d4:	013c0014 	movui	r4,61440
 40033d8:	01401544 	movi	r5,85
 40033dc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF001,0xAA);
 40033e0:	013c0054 	movui	r4,61441
 40033e4:	01402a84 	movi	r5,170
 40033e8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF002,0x52);
 40033ec:	013c0094 	movui	r4,61442
 40033f0:	01401484 	movi	r5,82
 40033f4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF003,0x08);
 40033f8:	013c00d4 	movui	r4,61443
 40033fc:	01400204 	movi	r5,8
 4003400:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF004,0x01);
 4003404:	013c0114 	movui	r4,61444
 4003408:	01400044 	movi	r5,1
 400340c:	40003680 	call	4000368 <LCD_WriteReg>
        //AVDD Set AVDD 5.2V
        LCD_WriteReg(0xB000,0x0D);
 4003410:	012c0014 	movui	r4,45056
 4003414:	01400344 	movi	r5,13
 4003418:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB001,0x0D);
 400341c:	012c0054 	movui	r4,45057
 4003420:	01400344 	movi	r5,13
 4003424:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB002,0x0D);
 4003428:	012c0094 	movui	r4,45058
 400342c:	01400344 	movi	r5,13
 4003430:	40003680 	call	4000368 <LCD_WriteReg>
        //AVDD ratio
        LCD_WriteReg(0xB600,0x34);
 4003434:	012d8014 	movui	r4,46592
 4003438:	01400d04 	movi	r5,52
 400343c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB601,0x34);
 4003440:	012d8054 	movui	r4,46593
 4003444:	01400d04 	movi	r5,52
 4003448:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB602,0x34);
 400344c:	012d8094 	movui	r4,46594
 4003450:	01400d04 	movi	r5,52
 4003454:	40003680 	call	4000368 <LCD_WriteReg>
        //AVEE -5.2V
        LCD_WriteReg(0xB100,0x0D);
 4003458:	012c4014 	movui	r4,45312
 400345c:	01400344 	movi	r5,13
 4003460:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB101,0x0D);
 4003464:	012c4054 	movui	r4,45313
 4003468:	01400344 	movi	r5,13
 400346c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB102,0x0D);
 4003470:	012c4094 	movui	r4,45314
 4003474:	01400344 	movi	r5,13
 4003478:	40003680 	call	4000368 <LCD_WriteReg>
        //AVEE ratio
        LCD_WriteReg(0xB700,0x34);
 400347c:	012dc014 	movui	r4,46848
 4003480:	01400d04 	movi	r5,52
 4003484:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB701,0x34);
 4003488:	012dc054 	movui	r4,46849
 400348c:	01400d04 	movi	r5,52
 4003490:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB702,0x34);
 4003494:	012dc094 	movui	r4,46850
 4003498:	01400d04 	movi	r5,52
 400349c:	40003680 	call	4000368 <LCD_WriteReg>
        //VCL -2.5V
        LCD_WriteReg(0xB200,0x00);
 40034a0:	012c8014 	movui	r4,45568
 40034a4:	000b883a 	mov	r5,zero
 40034a8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB201,0x00);
 40034ac:	012c8054 	movui	r4,45569
 40034b0:	000b883a 	mov	r5,zero
 40034b4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB202,0x00);
 40034b8:	012c8094 	movui	r4,45570
 40034bc:	000b883a 	mov	r5,zero
 40034c0:	40003680 	call	4000368 <LCD_WriteReg>
        //VCL ratio
        LCD_WriteReg(0xB800,0x24);
 40034c4:	012e0014 	movui	r4,47104
 40034c8:	01400904 	movi	r5,36
 40034cc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB801,0x24);
 40034d0:	012e0054 	movui	r4,47105
 40034d4:	01400904 	movi	r5,36
 40034d8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB802,0x24);
 40034dc:	012e0094 	movui	r4,47106
 40034e0:	01400904 	movi	r5,36
 40034e4:	40003680 	call	4000368 <LCD_WriteReg>
        //VGH 15V (Free pump)
        LCD_WriteReg(0xBF00,0x01);
 40034e8:	012fc014 	movui	r4,48896
 40034ec:	01400044 	movi	r5,1
 40034f0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB300,0x0F);
 40034f4:	012cc014 	movui	r4,45824
 40034f8:	014003c4 	movi	r5,15
 40034fc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB301,0x0F);
 4003500:	012cc054 	movui	r4,45825
 4003504:	014003c4 	movi	r5,15
 4003508:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB302,0x0F);
 400350c:	012cc094 	movui	r4,45826
 4003510:	014003c4 	movi	r5,15
 4003514:	40003680 	call	4000368 <LCD_WriteReg>
        //VGH ratio
        LCD_WriteReg(0xB900,0x34);
 4003518:	012e4014 	movui	r4,47360
 400351c:	01400d04 	movi	r5,52
 4003520:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB901,0x34);
 4003524:	012e4054 	movui	r4,47361
 4003528:	01400d04 	movi	r5,52
 400352c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB902,0x34);
 4003530:	012e4094 	movui	r4,47362
 4003534:	01400d04 	movi	r5,52
 4003538:	40003680 	call	4000368 <LCD_WriteReg>
        //VGL_REG -10V
        LCD_WriteReg(0xB500,0x08);
 400353c:	012d4014 	movui	r4,46336
 4003540:	01400204 	movi	r5,8
 4003544:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB501,0x08);
 4003548:	012d4054 	movui	r4,46337
 400354c:	01400204 	movi	r5,8
 4003550:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB502,0x08);
 4003554:	012d4094 	movui	r4,46338
 4003558:	01400204 	movi	r5,8
 400355c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xC200,0x03);
 4003560:	01308014 	movui	r4,49664
 4003564:	014000c4 	movi	r5,3
 4003568:	40003680 	call	4000368 <LCD_WriteReg>
        //VGLX ratio
        LCD_WriteReg(0xBA00,0x24);
 400356c:	012e8014 	movui	r4,47616
 4003570:	01400904 	movi	r5,36
 4003574:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBA01,0x24);
 4003578:	012e8054 	movui	r4,47617
 400357c:	01400904 	movi	r5,36
 4003580:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBA02,0x24);
 4003584:	012e8094 	movui	r4,47618
 4003588:	01400904 	movi	r5,36
 400358c:	40003680 	call	4000368 <LCD_WriteReg>
        //VGMP/VGSP 4.5V/0V
        LCD_WriteReg(0xBC00,0x00);
 4003590:	012f0014 	movui	r4,48128
 4003594:	000b883a 	mov	r5,zero
 4003598:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBC01,0x78);
 400359c:	012f0054 	movui	r4,48129
 40035a0:	01401e04 	movi	r5,120
 40035a4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBC02,0x00);
 40035a8:	012f0094 	movui	r4,48130
 40035ac:	000b883a 	mov	r5,zero
 40035b0:	40003680 	call	4000368 <LCD_WriteReg>
        //VGMN/VGSN -4.5V/0V
        LCD_WriteReg(0xBD00,0x00);
 40035b4:	012f4014 	movui	r4,48384
 40035b8:	000b883a 	mov	r5,zero
 40035bc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBD01,0x78);
 40035c0:	012f4054 	movui	r4,48385
 40035c4:	01401e04 	movi	r5,120
 40035c8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBD02,0x00);
 40035cc:	012f4094 	movui	r4,48386
 40035d0:	000b883a 	mov	r5,zero
 40035d4:	40003680 	call	4000368 <LCD_WriteReg>
        //VCOM -2.0375V
        LCD_WriteReg(0xBE00,0x00);
 40035d8:	012f8014 	movui	r4,48640
 40035dc:	000b883a 	mov	r5,zero
 40035e0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBE01,0x64);
 40035e4:	012f8054 	movui	r4,48641
 40035e8:	01401904 	movi	r5,100
 40035ec:	40003680 	call	4000368 <LCD_WriteReg>
        //Gamma Setting
        LCD_WriteReg(0xD100,0x00);
 40035f0:	01344014 	movui	r4,53504
 40035f4:	000b883a 	mov	r5,zero
 40035f8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD101,0x33);
 40035fc:	01344054 	movui	r4,53505
 4003600:	01400cc4 	movi	r5,51
 4003604:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD102,0x00);
 4003608:	01344094 	movui	r4,53506
 400360c:	000b883a 	mov	r5,zero
 4003610:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD103,0x34);
 4003614:	013440d4 	movui	r4,53507
 4003618:	01400d04 	movi	r5,52
 400361c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD104,0x00);
 4003620:	01344114 	movui	r4,53508
 4003624:	000b883a 	mov	r5,zero
 4003628:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD105,0x3A);
 400362c:	01344154 	movui	r4,53509
 4003630:	01400e84 	movi	r5,58
 4003634:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD106,0x00);
 4003638:	01344194 	movui	r4,53510
 400363c:	000b883a 	mov	r5,zero
 4003640:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD107,0x4A);
 4003644:	013441d4 	movui	r4,53511
 4003648:	01401284 	movi	r5,74
 400364c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD108,0x00);
 4003650:	01344214 	movui	r4,53512
 4003654:	000b883a 	mov	r5,zero
 4003658:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD109,0x5C);
 400365c:	01344254 	movui	r4,53513
 4003660:	01401704 	movi	r5,92
 4003664:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD10A,0x00);
 4003668:	01344294 	movui	r4,53514
 400366c:	000b883a 	mov	r5,zero
 4003670:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD10B,0x81);
 4003674:	013442d4 	movui	r4,53515
 4003678:	01402044 	movi	r5,129
 400367c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD10C,0x00);
 4003680:	01344314 	movui	r4,53516
 4003684:	000b883a 	mov	r5,zero
 4003688:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD10D,0xA6);
 400368c:	01344354 	movui	r4,53517
 4003690:	01402984 	movi	r5,166
 4003694:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD10E,0x00);
 4003698:	01344394 	movui	r4,53518
 400369c:	000b883a 	mov	r5,zero
 40036a0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD10F,0xE5);
 40036a4:	013443d4 	movui	r4,53519
 40036a8:	01403944 	movi	r5,229
 40036ac:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD110,0x01);
 40036b0:	01344414 	movui	r4,53520
 40036b4:	01400044 	movi	r5,1
 40036b8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD111,0x13);
 40036bc:	01344454 	movui	r4,53521
 40036c0:	014004c4 	movi	r5,19
 40036c4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD112,0x01);
 40036c8:	01344494 	movui	r4,53522
 40036cc:	01400044 	movi	r5,1
 40036d0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD113,0x54);
 40036d4:	013444d4 	movui	r4,53523
 40036d8:	01401504 	movi	r5,84
 40036dc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD114,0x01);
 40036e0:	01344514 	movui	r4,53524
 40036e4:	01400044 	movi	r5,1
 40036e8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD115,0x82);
 40036ec:	01344554 	movui	r4,53525
 40036f0:	01402084 	movi	r5,130
 40036f4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD116,0x01);
 40036f8:	01344594 	movui	r4,53526
 40036fc:	01400044 	movi	r5,1
 4003700:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD117,0xCA);
 4003704:	013445d4 	movui	r4,53527
 4003708:	01403284 	movi	r5,202
 400370c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD118,0x02);
 4003710:	01344614 	movui	r4,53528
 4003714:	01400084 	movi	r5,2
 4003718:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD119,0x00);
 400371c:	01344654 	movui	r4,53529
 4003720:	000b883a 	mov	r5,zero
 4003724:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD11A,0x02);
 4003728:	01344694 	movui	r4,53530
 400372c:	01400084 	movi	r5,2
 4003730:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD11B,0x01);
 4003734:	013446d4 	movui	r4,53531
 4003738:	01400044 	movi	r5,1
 400373c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD11C,0x02);
 4003740:	01344714 	movui	r4,53532
 4003744:	01400084 	movi	r5,2
 4003748:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD11D,0x34);
 400374c:	01344754 	movui	r4,53533
 4003750:	01400d04 	movi	r5,52
 4003754:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD11E,0x02);
 4003758:	01344794 	movui	r4,53534
 400375c:	01400084 	movi	r5,2
 4003760:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD11F,0x67);
 4003764:	013447d4 	movui	r4,53535
 4003768:	014019c4 	movi	r5,103
 400376c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD120,0x02);
 4003770:	01344814 	movui	r4,53536
 4003774:	01400084 	movi	r5,2
 4003778:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD121,0x84);
 400377c:	01344854 	movui	r4,53537
 4003780:	01402104 	movi	r5,132
 4003784:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD122,0x02);
 4003788:	01344894 	movui	r4,53538
 400378c:	01400084 	movi	r5,2
 4003790:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD123,0xA4);
 4003794:	013448d4 	movui	r4,53539
 4003798:	01402904 	movi	r5,164
 400379c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD124,0x02);
 40037a0:	01344914 	movui	r4,53540
 40037a4:	01400084 	movi	r5,2
 40037a8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD125,0xB7);
 40037ac:	01344954 	movui	r4,53541
 40037b0:	01402dc4 	movi	r5,183
 40037b4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD126,0x02);
 40037b8:	01344994 	movui	r4,53542
 40037bc:	01400084 	movi	r5,2
 40037c0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD127,0xCF);
 40037c4:	013449d4 	movui	r4,53543
 40037c8:	014033c4 	movi	r5,207
 40037cc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD128,0x02);
 40037d0:	01344a14 	movui	r4,53544
 40037d4:	01400084 	movi	r5,2
 40037d8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD129,0xDE);
 40037dc:	01344a54 	movui	r4,53545
 40037e0:	01403784 	movi	r5,222
 40037e4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD12A,0x02);
 40037e8:	01344a94 	movui	r4,53546
 40037ec:	01400084 	movi	r5,2
 40037f0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD12B,0xF2);
 40037f4:	01344ad4 	movui	r4,53547
 40037f8:	01403c84 	movi	r5,242
 40037fc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD12C,0x02);
 4003800:	01344b14 	movui	r4,53548
 4003804:	01400084 	movi	r5,2
 4003808:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD12D,0xFE);
 400380c:	01344b54 	movui	r4,53549
 4003810:	01403f84 	movi	r5,254
 4003814:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD12E,0x03);
 4003818:	01344b94 	movui	r4,53550
 400381c:	014000c4 	movi	r5,3
 4003820:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD12F,0x10);
 4003824:	01344bd4 	movui	r4,53551
 4003828:	01400404 	movi	r5,16
 400382c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD130,0x03);
 4003830:	01344c14 	movui	r4,53552
 4003834:	014000c4 	movi	r5,3
 4003838:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD131,0x33);
 400383c:	01344c54 	movui	r4,53553
 4003840:	01400cc4 	movi	r5,51
 4003844:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD132,0x03);
 4003848:	01344c94 	movui	r4,53554
 400384c:	014000c4 	movi	r5,3
 4003850:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD133,0x6D);
 4003854:	01344cd4 	movui	r4,53555
 4003858:	01401b44 	movi	r5,109
 400385c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD200,0x00);
 4003860:	01348014 	movui	r4,53760
 4003864:	000b883a 	mov	r5,zero
 4003868:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD201,0x33);
 400386c:	01348054 	movui	r4,53761
 4003870:	01400cc4 	movi	r5,51
 4003874:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD202,0x00);
 4003878:	01348094 	movui	r4,53762
 400387c:	000b883a 	mov	r5,zero
 4003880:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD203,0x34);
 4003884:	013480d4 	movui	r4,53763
 4003888:	01400d04 	movi	r5,52
 400388c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD204,0x00);
 4003890:	01348114 	movui	r4,53764
 4003894:	000b883a 	mov	r5,zero
 4003898:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD205,0x3A);
 400389c:	01348154 	movui	r4,53765
 40038a0:	01400e84 	movi	r5,58
 40038a4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD206,0x00);
 40038a8:	01348194 	movui	r4,53766
 40038ac:	000b883a 	mov	r5,zero
 40038b0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD207,0x4A);
 40038b4:	013481d4 	movui	r4,53767
 40038b8:	01401284 	movi	r5,74
 40038bc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD208,0x00);
 40038c0:	01348214 	movui	r4,53768
 40038c4:	000b883a 	mov	r5,zero
 40038c8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD209,0x5C);
 40038cc:	01348254 	movui	r4,53769
 40038d0:	01401704 	movi	r5,92
 40038d4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD20A,0x00);
 40038d8:	01348294 	movui	r4,53770
 40038dc:	000b883a 	mov	r5,zero
 40038e0:	40003680 	call	4000368 <LCD_WriteReg>

        LCD_WriteReg(0xD20B,0x81);
 40038e4:	013482d4 	movui	r4,53771
 40038e8:	01402044 	movi	r5,129
 40038ec:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD20C,0x00);
 40038f0:	01348314 	movui	r4,53772
 40038f4:	000b883a 	mov	r5,zero
 40038f8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD20D,0xA6);
 40038fc:	01348354 	movui	r4,53773
 4003900:	01402984 	movi	r5,166
 4003904:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD20E,0x00);
 4003908:	01348394 	movui	r4,53774
 400390c:	000b883a 	mov	r5,zero
 4003910:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD20F,0xE5);
 4003914:	013483d4 	movui	r4,53775
 4003918:	01403944 	movi	r5,229
 400391c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD210,0x01);
 4003920:	01348414 	movui	r4,53776
 4003924:	01400044 	movi	r5,1
 4003928:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD211,0x13);
 400392c:	01348454 	movui	r4,53777
 4003930:	014004c4 	movi	r5,19
 4003934:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD212,0x01);
 4003938:	01348494 	movui	r4,53778
 400393c:	01400044 	movi	r5,1
 4003940:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD213,0x54);
 4003944:	013484d4 	movui	r4,53779
 4003948:	01401504 	movi	r5,84
 400394c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD214,0x01);
 4003950:	01348514 	movui	r4,53780
 4003954:	01400044 	movi	r5,1
 4003958:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD215,0x82);
 400395c:	01348554 	movui	r4,53781
 4003960:	01402084 	movi	r5,130
 4003964:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD216,0x01);
 4003968:	01348594 	movui	r4,53782
 400396c:	01400044 	movi	r5,1
 4003970:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD217,0xCA);
 4003974:	013485d4 	movui	r4,53783
 4003978:	01403284 	movi	r5,202
 400397c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD218,0x02);
 4003980:	01348614 	movui	r4,53784
 4003984:	01400084 	movi	r5,2
 4003988:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD219,0x00);
 400398c:	01348654 	movui	r4,53785
 4003990:	000b883a 	mov	r5,zero
 4003994:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD21A,0x02);
 4003998:	01348694 	movui	r4,53786
 400399c:	01400084 	movi	r5,2
 40039a0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD21B,0x01);
 40039a4:	013486d4 	movui	r4,53787
 40039a8:	01400044 	movi	r5,1
 40039ac:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD21C,0x02);
 40039b0:	01348714 	movui	r4,53788
 40039b4:	01400084 	movi	r5,2
 40039b8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD21D,0x34);
 40039bc:	01348754 	movui	r4,53789
 40039c0:	01400d04 	movi	r5,52
 40039c4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD21E,0x02);
 40039c8:	01348794 	movui	r4,53790
 40039cc:	01400084 	movi	r5,2
 40039d0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD21F,0x67);
 40039d4:	013487d4 	movui	r4,53791
 40039d8:	014019c4 	movi	r5,103
 40039dc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD220,0x02);
 40039e0:	01348814 	movui	r4,53792
 40039e4:	01400084 	movi	r5,2
 40039e8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD221,0x84);
 40039ec:	01348854 	movui	r4,53793
 40039f0:	01402104 	movi	r5,132
 40039f4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD222,0x02);
 40039f8:	01348894 	movui	r4,53794
 40039fc:	01400084 	movi	r5,2
 4003a00:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD223,0xA4);
 4003a04:	013488d4 	movui	r4,53795
 4003a08:	01402904 	movi	r5,164
 4003a0c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD224,0x02);
 4003a10:	01348914 	movui	r4,53796
 4003a14:	01400084 	movi	r5,2
 4003a18:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD225,0xB7);
 4003a1c:	01348954 	movui	r4,53797
 4003a20:	01402dc4 	movi	r5,183
 4003a24:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD226,0x02);
 4003a28:	01348994 	movui	r4,53798
 4003a2c:	01400084 	movi	r5,2
 4003a30:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD227,0xCF);
 4003a34:	013489d4 	movui	r4,53799
 4003a38:	014033c4 	movi	r5,207
 4003a3c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD228,0x02);
 4003a40:	01348a14 	movui	r4,53800
 4003a44:	01400084 	movi	r5,2
 4003a48:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD229,0xDE);
 4003a4c:	01348a54 	movui	r4,53801
 4003a50:	01403784 	movi	r5,222
 4003a54:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD22A,0x02);
 4003a58:	01348a94 	movui	r4,53802
 4003a5c:	01400084 	movi	r5,2
 4003a60:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD22B,0xF2);
 4003a64:	01348ad4 	movui	r4,53803
 4003a68:	01403c84 	movi	r5,242
 4003a6c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD22C,0x02);
 4003a70:	01348b14 	movui	r4,53804
 4003a74:	01400084 	movi	r5,2
 4003a78:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD22D,0xFE);
 4003a7c:	01348b54 	movui	r4,53805
 4003a80:	01403f84 	movi	r5,254
 4003a84:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD22E,0x03);
 4003a88:	01348b94 	movui	r4,53806
 4003a8c:	014000c4 	movi	r5,3
 4003a90:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD22F,0x10);
 4003a94:	01348bd4 	movui	r4,53807
 4003a98:	01400404 	movi	r5,16
 4003a9c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD230,0x03);
 4003aa0:	01348c14 	movui	r4,53808
 4003aa4:	014000c4 	movi	r5,3
 4003aa8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD231,0x33);
 4003aac:	01348c54 	movui	r4,53809
 4003ab0:	01400cc4 	movi	r5,51
 4003ab4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD232,0x03);
 4003ab8:	01348c94 	movui	r4,53810
 4003abc:	014000c4 	movi	r5,3
 4003ac0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD233,0x6D);
 4003ac4:	01348cd4 	movui	r4,53811
 4003ac8:	01401b44 	movi	r5,109
 4003acc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD300,0x00);
 4003ad0:	0134c014 	movui	r4,54016
 4003ad4:	000b883a 	mov	r5,zero
 4003ad8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD301,0x33);
 4003adc:	0134c054 	movui	r4,54017
 4003ae0:	01400cc4 	movi	r5,51
 4003ae4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD302,0x00);
 4003ae8:	0134c094 	movui	r4,54018
 4003aec:	000b883a 	mov	r5,zero
 4003af0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD303,0x34);
 4003af4:	0134c0d4 	movui	r4,54019
 4003af8:	01400d04 	movi	r5,52
 4003afc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD304,0x00);
 4003b00:	0134c114 	movui	r4,54020
 4003b04:	000b883a 	mov	r5,zero
 4003b08:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD305,0x3A);
 4003b0c:	0134c154 	movui	r4,54021
 4003b10:	01400e84 	movi	r5,58
 4003b14:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD306,0x00);
 4003b18:	0134c194 	movui	r4,54022
 4003b1c:	000b883a 	mov	r5,zero
 4003b20:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD307,0x4A);
 4003b24:	0134c1d4 	movui	r4,54023
 4003b28:	01401284 	movi	r5,74
 4003b2c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD308,0x00);
 4003b30:	0134c214 	movui	r4,54024
 4003b34:	000b883a 	mov	r5,zero
 4003b38:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD309,0x5C);
 4003b3c:	0134c254 	movui	r4,54025
 4003b40:	01401704 	movi	r5,92
 4003b44:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD30A,0x00);
 4003b48:	0134c294 	movui	r4,54026
 4003b4c:	000b883a 	mov	r5,zero
 4003b50:	40003680 	call	4000368 <LCD_WriteReg>

        LCD_WriteReg(0xD30B,0x81);
 4003b54:	0134c2d4 	movui	r4,54027
 4003b58:	01402044 	movi	r5,129
 4003b5c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD30C,0x00);
 4003b60:	0134c314 	movui	r4,54028
 4003b64:	000b883a 	mov	r5,zero
 4003b68:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD30D,0xA6);
 4003b6c:	0134c354 	movui	r4,54029
 4003b70:	01402984 	movi	r5,166
 4003b74:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD30E,0x00);
 4003b78:	0134c394 	movui	r4,54030
 4003b7c:	000b883a 	mov	r5,zero
 4003b80:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD30F,0xE5);
 4003b84:	0134c3d4 	movui	r4,54031
 4003b88:	01403944 	movi	r5,229
 4003b8c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD310,0x01);
 4003b90:	0134c414 	movui	r4,54032
 4003b94:	01400044 	movi	r5,1
 4003b98:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD311,0x13);
 4003b9c:	0134c454 	movui	r4,54033
 4003ba0:	014004c4 	movi	r5,19
 4003ba4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD312,0x01);
 4003ba8:	0134c494 	movui	r4,54034
 4003bac:	01400044 	movi	r5,1
 4003bb0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD313,0x54);
 4003bb4:	0134c4d4 	movui	r4,54035
 4003bb8:	01401504 	movi	r5,84
 4003bbc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD314,0x01);
 4003bc0:	0134c514 	movui	r4,54036
 4003bc4:	01400044 	movi	r5,1
 4003bc8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD315,0x82);
 4003bcc:	0134c554 	movui	r4,54037
 4003bd0:	01402084 	movi	r5,130
 4003bd4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD316,0x01);
 4003bd8:	0134c594 	movui	r4,54038
 4003bdc:	01400044 	movi	r5,1
 4003be0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD317,0xCA);
 4003be4:	0134c5d4 	movui	r4,54039
 4003be8:	01403284 	movi	r5,202
 4003bec:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD318,0x02);
 4003bf0:	0134c614 	movui	r4,54040
 4003bf4:	01400084 	movi	r5,2
 4003bf8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD319,0x00);
 4003bfc:	0134c654 	movui	r4,54041
 4003c00:	000b883a 	mov	r5,zero
 4003c04:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD31A,0x02);
 4003c08:	0134c694 	movui	r4,54042
 4003c0c:	01400084 	movi	r5,2
 4003c10:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD31B,0x01);
 4003c14:	0134c6d4 	movui	r4,54043
 4003c18:	01400044 	movi	r5,1
 4003c1c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD31C,0x02);
 4003c20:	0134c714 	movui	r4,54044
 4003c24:	01400084 	movi	r5,2
 4003c28:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD31D,0x34);
 4003c2c:	0134c754 	movui	r4,54045
 4003c30:	01400d04 	movi	r5,52
 4003c34:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD31E,0x02);
 4003c38:	0134c794 	movui	r4,54046
 4003c3c:	01400084 	movi	r5,2
 4003c40:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD31F,0x67);
 4003c44:	0134c7d4 	movui	r4,54047
 4003c48:	014019c4 	movi	r5,103
 4003c4c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD320,0x02);
 4003c50:	0134c814 	movui	r4,54048
 4003c54:	01400084 	movi	r5,2
 4003c58:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD321,0x84);
 4003c5c:	0134c854 	movui	r4,54049
 4003c60:	01402104 	movi	r5,132
 4003c64:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD322,0x02);
 4003c68:	0134c894 	movui	r4,54050
 4003c6c:	01400084 	movi	r5,2
 4003c70:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD323,0xA4);
 4003c74:	0134c8d4 	movui	r4,54051
 4003c78:	01402904 	movi	r5,164
 4003c7c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD324,0x02);
 4003c80:	0134c914 	movui	r4,54052
 4003c84:	01400084 	movi	r5,2
 4003c88:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD325,0xB7);
 4003c8c:	0134c954 	movui	r4,54053
 4003c90:	01402dc4 	movi	r5,183
 4003c94:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD326,0x02);
 4003c98:	0134c994 	movui	r4,54054
 4003c9c:	01400084 	movi	r5,2
 4003ca0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD327,0xCF);
 4003ca4:	0134c9d4 	movui	r4,54055
 4003ca8:	014033c4 	movi	r5,207
 4003cac:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD328,0x02);
 4003cb0:	0134ca14 	movui	r4,54056
 4003cb4:	01400084 	movi	r5,2
 4003cb8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD329,0xDE);
 4003cbc:	0134ca54 	movui	r4,54057
 4003cc0:	01403784 	movi	r5,222
 4003cc4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD32A,0x02);
 4003cc8:	0134ca94 	movui	r4,54058
 4003ccc:	01400084 	movi	r5,2
 4003cd0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD32B,0xF2);
 4003cd4:	0134cad4 	movui	r4,54059
 4003cd8:	01403c84 	movi	r5,242
 4003cdc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD32C,0x02);
 4003ce0:	0134cb14 	movui	r4,54060
 4003ce4:	01400084 	movi	r5,2
 4003ce8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD32D,0xFE);
 4003cec:	0134cb54 	movui	r4,54061
 4003cf0:	01403f84 	movi	r5,254
 4003cf4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD32E,0x03);
 4003cf8:	0134cb94 	movui	r4,54062
 4003cfc:	014000c4 	movi	r5,3
 4003d00:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD32F,0x10);
 4003d04:	0134cbd4 	movui	r4,54063
 4003d08:	01400404 	movi	r5,16
 4003d0c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD330,0x03);
 4003d10:	0134cc14 	movui	r4,54064
 4003d14:	014000c4 	movi	r5,3
 4003d18:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD331,0x33);
 4003d1c:	0134cc54 	movui	r4,54065
 4003d20:	01400cc4 	movi	r5,51
 4003d24:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD332,0x03);
 4003d28:	0134cc94 	movui	r4,54066
 4003d2c:	014000c4 	movi	r5,3
 4003d30:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD333,0x6D);
 4003d34:	0134ccd4 	movui	r4,54067
 4003d38:	01401b44 	movi	r5,109
 4003d3c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD400,0x00);
 4003d40:	01350014 	movui	r4,54272
 4003d44:	000b883a 	mov	r5,zero
 4003d48:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD401,0x33);
 4003d4c:	01350054 	movui	r4,54273
 4003d50:	01400cc4 	movi	r5,51
 4003d54:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD402,0x00);
 4003d58:	01350094 	movui	r4,54274
 4003d5c:	000b883a 	mov	r5,zero
 4003d60:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD403,0x34);
 4003d64:	013500d4 	movui	r4,54275
 4003d68:	01400d04 	movi	r5,52
 4003d6c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD404,0x00);
 4003d70:	01350114 	movui	r4,54276
 4003d74:	000b883a 	mov	r5,zero
 4003d78:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD405,0x3A);
 4003d7c:	01350154 	movui	r4,54277
 4003d80:	01400e84 	movi	r5,58
 4003d84:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD406,0x00);
 4003d88:	01350194 	movui	r4,54278
 4003d8c:	000b883a 	mov	r5,zero
 4003d90:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD407,0x4A);
 4003d94:	013501d4 	movui	r4,54279
 4003d98:	01401284 	movi	r5,74
 4003d9c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD408,0x00);
 4003da0:	01350214 	movui	r4,54280
 4003da4:	000b883a 	mov	r5,zero
 4003da8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD409,0x5C);
 4003dac:	01350254 	movui	r4,54281
 4003db0:	01401704 	movi	r5,92
 4003db4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD40A,0x00);
 4003db8:	01350294 	movui	r4,54282
 4003dbc:	000b883a 	mov	r5,zero
 4003dc0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD40B,0x81);
 4003dc4:	013502d4 	movui	r4,54283
 4003dc8:	01402044 	movi	r5,129
 4003dcc:	40003680 	call	4000368 <LCD_WriteReg>

        LCD_WriteReg(0xD40C,0x00);
 4003dd0:	01350314 	movui	r4,54284
 4003dd4:	000b883a 	mov	r5,zero
 4003dd8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD40D,0xA6);
 4003ddc:	01350354 	movui	r4,54285
 4003de0:	01402984 	movi	r5,166
 4003de4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD40E,0x00);
 4003de8:	01350394 	movui	r4,54286
 4003dec:	000b883a 	mov	r5,zero
 4003df0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD40F,0xE5);
 4003df4:	013503d4 	movui	r4,54287
 4003df8:	01403944 	movi	r5,229
 4003dfc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD410,0x01);
 4003e00:	01350414 	movui	r4,54288
 4003e04:	01400044 	movi	r5,1
 4003e08:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD411,0x13);
 4003e0c:	01350454 	movui	r4,54289
 4003e10:	014004c4 	movi	r5,19
 4003e14:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD412,0x01);
 4003e18:	01350494 	movui	r4,54290
 4003e1c:	01400044 	movi	r5,1
 4003e20:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD413,0x54);
 4003e24:	013504d4 	movui	r4,54291
 4003e28:	01401504 	movi	r5,84
 4003e2c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD414,0x01);
 4003e30:	01350514 	movui	r4,54292
 4003e34:	01400044 	movi	r5,1
 4003e38:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD415,0x82);
 4003e3c:	01350554 	movui	r4,54293
 4003e40:	01402084 	movi	r5,130
 4003e44:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD416,0x01);
 4003e48:	01350594 	movui	r4,54294
 4003e4c:	01400044 	movi	r5,1
 4003e50:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD417,0xCA);
 4003e54:	013505d4 	movui	r4,54295
 4003e58:	01403284 	movi	r5,202
 4003e5c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD418,0x02);
 4003e60:	01350614 	movui	r4,54296
 4003e64:	01400084 	movi	r5,2
 4003e68:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD419,0x00);
 4003e6c:	01350654 	movui	r4,54297
 4003e70:	000b883a 	mov	r5,zero
 4003e74:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD41A,0x02);
 4003e78:	01350694 	movui	r4,54298
 4003e7c:	01400084 	movi	r5,2
 4003e80:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD41B,0x01);
 4003e84:	013506d4 	movui	r4,54299
 4003e88:	01400044 	movi	r5,1
 4003e8c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD41C,0x02);
 4003e90:	01350714 	movui	r4,54300
 4003e94:	01400084 	movi	r5,2
 4003e98:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD41D,0x34);
 4003e9c:	01350754 	movui	r4,54301
 4003ea0:	01400d04 	movi	r5,52
 4003ea4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD41E,0x02);
 4003ea8:	01350794 	movui	r4,54302
 4003eac:	01400084 	movi	r5,2
 4003eb0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD41F,0x67);
 4003eb4:	013507d4 	movui	r4,54303
 4003eb8:	014019c4 	movi	r5,103
 4003ebc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD420,0x02);
 4003ec0:	01350814 	movui	r4,54304
 4003ec4:	01400084 	movi	r5,2
 4003ec8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD421,0x84);
 4003ecc:	01350854 	movui	r4,54305
 4003ed0:	01402104 	movi	r5,132
 4003ed4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD422,0x02);
 4003ed8:	01350894 	movui	r4,54306
 4003edc:	01400084 	movi	r5,2
 4003ee0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD423,0xA4);
 4003ee4:	013508d4 	movui	r4,54307
 4003ee8:	01402904 	movi	r5,164
 4003eec:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD424,0x02);
 4003ef0:	01350914 	movui	r4,54308
 4003ef4:	01400084 	movi	r5,2
 4003ef8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD425,0xB7);
 4003efc:	01350954 	movui	r4,54309
 4003f00:	01402dc4 	movi	r5,183
 4003f04:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD426,0x02);
 4003f08:	01350994 	movui	r4,54310
 4003f0c:	01400084 	movi	r5,2
 4003f10:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD427,0xCF);
 4003f14:	013509d4 	movui	r4,54311
 4003f18:	014033c4 	movi	r5,207
 4003f1c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD428,0x02);
 4003f20:	01350a14 	movui	r4,54312
 4003f24:	01400084 	movi	r5,2
 4003f28:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD429,0xDE);
 4003f2c:	01350a54 	movui	r4,54313
 4003f30:	01403784 	movi	r5,222
 4003f34:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD42A,0x02);
 4003f38:	01350a94 	movui	r4,54314
 4003f3c:	01400084 	movi	r5,2
 4003f40:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD42B,0xF2);
 4003f44:	01350ad4 	movui	r4,54315
 4003f48:	01403c84 	movi	r5,242
 4003f4c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD42C,0x02);
 4003f50:	01350b14 	movui	r4,54316
 4003f54:	01400084 	movi	r5,2
 4003f58:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD42D,0xFE);
 4003f5c:	01350b54 	movui	r4,54317
 4003f60:	01403f84 	movi	r5,254
 4003f64:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD42E,0x03);
 4003f68:	01350b94 	movui	r4,54318
 4003f6c:	014000c4 	movi	r5,3
 4003f70:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD42F,0x10);
 4003f74:	01350bd4 	movui	r4,54319
 4003f78:	01400404 	movi	r5,16
 4003f7c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD430,0x03);
 4003f80:	01350c14 	movui	r4,54320
 4003f84:	014000c4 	movi	r5,3
 4003f88:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD431,0x33);
 4003f8c:	01350c54 	movui	r4,54321
 4003f90:	01400cc4 	movi	r5,51
 4003f94:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD432,0x03);
 4003f98:	01350c94 	movui	r4,54322
 4003f9c:	014000c4 	movi	r5,3
 4003fa0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD433,0x6D);    /* VU */
 4003fa4:	01350cd4 	movui	r4,54323
 4003fa8:	01401b44 	movi	r5,109
 4003fac:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD500,0x00);
 4003fb0:	01354014 	movui	r4,54528
 4003fb4:	000b883a 	mov	r5,zero
 4003fb8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD501,0x33);
 4003fbc:	01354054 	movui	r4,54529
 4003fc0:	01400cc4 	movi	r5,51
 4003fc4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD502,0x00);
 4003fc8:	01354094 	movui	r4,54530
 4003fcc:	000b883a 	mov	r5,zero
 4003fd0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD503,0x34);
 4003fd4:	013540d4 	movui	r4,54531
 4003fd8:	01400d04 	movi	r5,52
 4003fdc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD504,0x00);
 4003fe0:	01354114 	movui	r4,54532
 4003fe4:	000b883a 	mov	r5,zero
 4003fe8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD505,0x3A);
 4003fec:	01354154 	movui	r4,54533
 4003ff0:	01400e84 	movi	r5,58
 4003ff4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD506,0x00);
 4003ff8:	01354194 	movui	r4,54534
 4003ffc:	000b883a 	mov	r5,zero
 4004000:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD507,0x4A);
 4004004:	013541d4 	movui	r4,54535
 4004008:	01401284 	movi	r5,74
 400400c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD508,0x00);
 4004010:	01354214 	movui	r4,54536
 4004014:	000b883a 	mov	r5,zero
 4004018:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD509,0x5C);
 400401c:	01354254 	movui	r4,54537
 4004020:	01401704 	movi	r5,92
 4004024:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD50A,0x00);
 4004028:	01354294 	movui	r4,54538
 400402c:	000b883a 	mov	r5,zero
 4004030:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD50B,0x81);
 4004034:	013542d4 	movui	r4,54539
 4004038:	01402044 	movi	r5,129
 400403c:	40003680 	call	4000368 <LCD_WriteReg>

        LCD_WriteReg(0xD50C,0x00);
 4004040:	01354314 	movui	r4,54540
 4004044:	000b883a 	mov	r5,zero
 4004048:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD50D,0xA6);
 400404c:	01354354 	movui	r4,54541
 4004050:	01402984 	movi	r5,166
 4004054:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD50E,0x00);
 4004058:	01354394 	movui	r4,54542
 400405c:	000b883a 	mov	r5,zero
 4004060:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD50F,0xE5);
 4004064:	013543d4 	movui	r4,54543
 4004068:	01403944 	movi	r5,229
 400406c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD510,0x01);
 4004070:	01354414 	movui	r4,54544
 4004074:	01400044 	movi	r5,1
 4004078:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD511,0x13);
 400407c:	01354454 	movui	r4,54545
 4004080:	014004c4 	movi	r5,19
 4004084:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD512,0x01);
 4004088:	01354494 	movui	r4,54546
 400408c:	01400044 	movi	r5,1
 4004090:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD513,0x54);
 4004094:	013544d4 	movui	r4,54547
 4004098:	01401504 	movi	r5,84
 400409c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD514,0x01);
 40040a0:	01354514 	movui	r4,54548
 40040a4:	01400044 	movi	r5,1
 40040a8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD515,0x82);
 40040ac:	01354554 	movui	r4,54549
 40040b0:	01402084 	movi	r5,130
 40040b4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD516,0x01);
 40040b8:	01354594 	movui	r4,54550
 40040bc:	01400044 	movi	r5,1
 40040c0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD517,0xCA);
 40040c4:	013545d4 	movui	r4,54551
 40040c8:	01403284 	movi	r5,202
 40040cc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD518,0x02);
 40040d0:	01354614 	movui	r4,54552
 40040d4:	01400084 	movi	r5,2
 40040d8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD519,0x00);
 40040dc:	01354654 	movui	r4,54553
 40040e0:	000b883a 	mov	r5,zero
 40040e4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD51A,0x02);
 40040e8:	01354694 	movui	r4,54554
 40040ec:	01400084 	movi	r5,2
 40040f0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD51B,0x01);
 40040f4:	013546d4 	movui	r4,54555
 40040f8:	01400044 	movi	r5,1
 40040fc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD51C,0x02);
 4004100:	01354714 	movui	r4,54556
 4004104:	01400084 	movi	r5,2
 4004108:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD51D,0x34);
 400410c:	01354754 	movui	r4,54557
 4004110:	01400d04 	movi	r5,52
 4004114:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD51E,0x02);
 4004118:	01354794 	movui	r4,54558
 400411c:	01400084 	movi	r5,2
 4004120:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD51F,0x67);
 4004124:	013547d4 	movui	r4,54559
 4004128:	014019c4 	movi	r5,103
 400412c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD520,0x02);
 4004130:	01354814 	movui	r4,54560
 4004134:	01400084 	movi	r5,2
 4004138:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD521,0x84);
 400413c:	01354854 	movui	r4,54561
 4004140:	01402104 	movi	r5,132
 4004144:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD522,0x02);
 4004148:	01354894 	movui	r4,54562
 400414c:	01400084 	movi	r5,2
 4004150:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD523,0xA4);
 4004154:	013548d4 	movui	r4,54563
 4004158:	01402904 	movi	r5,164
 400415c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD524,0x02);
 4004160:	01354914 	movui	r4,54564
 4004164:	01400084 	movi	r5,2
 4004168:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD525,0xB7);
 400416c:	01354954 	movui	r4,54565
 4004170:	01402dc4 	movi	r5,183
 4004174:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD526,0x02);
 4004178:	01354994 	movui	r4,54566
 400417c:	01400084 	movi	r5,2
 4004180:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD527,0xCF);
 4004184:	013549d4 	movui	r4,54567
 4004188:	014033c4 	movi	r5,207
 400418c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD528,0x02);
 4004190:	01354a14 	movui	r4,54568
 4004194:	01400084 	movi	r5,2
 4004198:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD529,0xDE);
 400419c:	01354a54 	movui	r4,54569
 40041a0:	01403784 	movi	r5,222
 40041a4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD52A,0x02);
 40041a8:	01354a94 	movui	r4,54570
 40041ac:	01400084 	movi	r5,2
 40041b0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD52B,0xF2);
 40041b4:	01354ad4 	movui	r4,54571
 40041b8:	01403c84 	movi	r5,242
 40041bc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD52C,0x02);
 40041c0:	01354b14 	movui	r4,54572
 40041c4:	01400084 	movi	r5,2
 40041c8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD52D,0xFE);
 40041cc:	01354b54 	movui	r4,54573
 40041d0:	01403f84 	movi	r5,254
 40041d4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD52E,0x03);
 40041d8:	01354b94 	movui	r4,54574
 40041dc:	014000c4 	movi	r5,3
 40041e0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD52F,0x10);
 40041e4:	01354bd4 	movui	r4,54575
 40041e8:	01400404 	movi	r5,16
 40041ec:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD530,0x03);
 40041f0:	01354c14 	movui	r4,54576
 40041f4:	014000c4 	movi	r5,3
 40041f8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD531,0x33);
 40041fc:	01354c54 	movui	r4,54577
 4004200:	01400cc4 	movi	r5,51
 4004204:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD532,0x03);
 4004208:	01354c94 	movui	r4,54578
 400420c:	014000c4 	movi	r5,3
 4004210:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD533,0x6D);
 4004214:	01354cd4 	movui	r4,54579
 4004218:	01401b44 	movi	r5,109
 400421c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD600,0x00);
 4004220:	01358014 	movui	r4,54784
 4004224:	000b883a 	mov	r5,zero
 4004228:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD601,0x33);
 400422c:	01358054 	movui	r4,54785
 4004230:	01400cc4 	movi	r5,51
 4004234:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD602,0x00);
 4004238:	01358094 	movui	r4,54786
 400423c:	000b883a 	mov	r5,zero
 4004240:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD603,0x34);
 4004244:	013580d4 	movui	r4,54787
 4004248:	01400d04 	movi	r5,52
 400424c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD604,0x00);
 4004250:	01358114 	movui	r4,54788
 4004254:	000b883a 	mov	r5,zero
 4004258:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD605,0x3A);
 400425c:	01358154 	movui	r4,54789
 4004260:	01400e84 	movi	r5,58
 4004264:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD606,0x00);
 4004268:	01358194 	movui	r4,54790
 400426c:	000b883a 	mov	r5,zero
 4004270:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD607,0x4A);
 4004274:	013581d4 	movui	r4,54791
 4004278:	01401284 	movi	r5,74
 400427c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD608,0x00);
 4004280:	01358214 	movui	r4,54792
 4004284:	000b883a 	mov	r5,zero
 4004288:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD609,0x5C);
 400428c:	01358254 	movui	r4,54793
 4004290:	01401704 	movi	r5,92
 4004294:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD60A,0x00);
 4004298:	01358294 	movui	r4,54794
 400429c:	000b883a 	mov	r5,zero
 40042a0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD60B,0x81);
 40042a4:	013582d4 	movui	r4,54795
 40042a8:	01402044 	movi	r5,129
 40042ac:	40003680 	call	4000368 <LCD_WriteReg>

        LCD_WriteReg(0xD60C,0x00);
 40042b0:	01358314 	movui	r4,54796
 40042b4:	000b883a 	mov	r5,zero
 40042b8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD60D,0xA6);
 40042bc:	01358354 	movui	r4,54797
 40042c0:	01402984 	movi	r5,166
 40042c4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD60E,0x00);
 40042c8:	01358394 	movui	r4,54798
 40042cc:	000b883a 	mov	r5,zero
 40042d0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD60F,0xE5);
 40042d4:	013583d4 	movui	r4,54799
 40042d8:	01403944 	movi	r5,229
 40042dc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD610,0x01);
 40042e0:	01358414 	movui	r4,54800
 40042e4:	01400044 	movi	r5,1
 40042e8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD611,0x13);
 40042ec:	01358454 	movui	r4,54801
 40042f0:	014004c4 	movi	r5,19
 40042f4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD612,0x01);
 40042f8:	01358494 	movui	r4,54802
 40042fc:	01400044 	movi	r5,1
 4004300:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD613,0x54);
 4004304:	013584d4 	movui	r4,54803
 4004308:	01401504 	movi	r5,84
 400430c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD614,0x01);
 4004310:	01358514 	movui	r4,54804
 4004314:	01400044 	movi	r5,1
 4004318:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD615,0x82);
 400431c:	01358554 	movui	r4,54805
 4004320:	01402084 	movi	r5,130
 4004324:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD616,0x01);
 4004328:	01358594 	movui	r4,54806
 400432c:	01400044 	movi	r5,1
 4004330:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD617,0xCA);
 4004334:	013585d4 	movui	r4,54807
 4004338:	01403284 	movi	r5,202
 400433c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD618,0x02);
 4004340:	01358614 	movui	r4,54808
 4004344:	01400084 	movi	r5,2
 4004348:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD619,0x00);
 400434c:	01358654 	movui	r4,54809
 4004350:	000b883a 	mov	r5,zero
 4004354:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD61A,0x02);
 4004358:	01358694 	movui	r4,54810
 400435c:	01400084 	movi	r5,2
 4004360:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD61B,0x01);
 4004364:	013586d4 	movui	r4,54811
 4004368:	01400044 	movi	r5,1
 400436c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD61C,0x02);
 4004370:	01358714 	movui	r4,54812
 4004374:	01400084 	movi	r5,2
 4004378:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD61D,0x34);
 400437c:	01358754 	movui	r4,54813
 4004380:	01400d04 	movi	r5,52
 4004384:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD61E,0x02);
 4004388:	01358794 	movui	r4,54814
 400438c:	01400084 	movi	r5,2
 4004390:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD61F,0x67);
 4004394:	013587d4 	movui	r4,54815
 4004398:	014019c4 	movi	r5,103
 400439c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD620,0x02);
 40043a0:	01358814 	movui	r4,54816
 40043a4:	01400084 	movi	r5,2
 40043a8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD621,0x84);
 40043ac:	01358854 	movui	r4,54817
 40043b0:	01402104 	movi	r5,132
 40043b4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD622,0x02);
 40043b8:	01358894 	movui	r4,54818
 40043bc:	01400084 	movi	r5,2
 40043c0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD623,0xA4);
 40043c4:	013588d4 	movui	r4,54819
 40043c8:	01402904 	movi	r5,164
 40043cc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD624,0x02);
 40043d0:	01358914 	movui	r4,54820
 40043d4:	01400084 	movi	r5,2
 40043d8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD625,0xB7);
 40043dc:	01358954 	movui	r4,54821
 40043e0:	01402dc4 	movi	r5,183
 40043e4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD626,0x02);
 40043e8:	01358994 	movui	r4,54822
 40043ec:	01400084 	movi	r5,2
 40043f0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD627,0xCF);
 40043f4:	013589d4 	movui	r4,54823
 40043f8:	014033c4 	movi	r5,207
 40043fc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD628,0x02);
 4004400:	01358a14 	movui	r4,54824
 4004404:	01400084 	movi	r5,2
 4004408:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD629,0xDE);
 400440c:	01358a54 	movui	r4,54825
 4004410:	01403784 	movi	r5,222
 4004414:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD62A,0x02);
 4004418:	01358a94 	movui	r4,54826
 400441c:	01400084 	movi	r5,2
 4004420:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD62B,0xF2);
 4004424:	01358ad4 	movui	r4,54827
 4004428:	01403c84 	movi	r5,242
 400442c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD62C,0x02);
 4004430:	01358b14 	movui	r4,54828
 4004434:	01400084 	movi	r5,2
 4004438:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD62D,0xFE);
 400443c:	01358b54 	movui	r4,54829
 4004440:	01403f84 	movi	r5,254
 4004444:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD62E,0x03);
 4004448:	01358b94 	movui	r4,54830
 400444c:	014000c4 	movi	r5,3
 4004450:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD62F,0x10);
 4004454:	01358bd4 	movui	r4,54831
 4004458:	01400404 	movi	r5,16
 400445c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD630,0x03);
 4004460:	01358c14 	movui	r4,54832
 4004464:	014000c4 	movi	r5,3
 4004468:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD631,0x33);
 400446c:	01358c54 	movui	r4,54833
 4004470:	01400cc4 	movi	r5,51
 4004474:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD632,0x03);
 4004478:	01358c94 	movui	r4,54834
 400447c:	014000c4 	movi	r5,3
 4004480:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xD633,0x6D);
 4004484:	01358cd4 	movui	r4,54835
 4004488:	01401b44 	movi	r5,109
 400448c:	40003680 	call	4000368 <LCD_WriteReg>
        //LV2 Page 0 enable
        LCD_WriteReg(0xF000,0x55);
 4004490:	013c0014 	movui	r4,61440
 4004494:	01401544 	movi	r5,85
 4004498:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF001,0xAA);
 400449c:	013c0054 	movui	r4,61441
 40044a0:	01402a84 	movi	r5,170
 40044a4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF002,0x52);
 40044a8:	013c0094 	movui	r4,61442
 40044ac:	01401484 	movi	r5,82
 40044b0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF003,0x08);
 40044b4:	013c00d4 	movui	r4,61443
 40044b8:	01400204 	movi	r5,8
 40044bc:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xF004,0x00);
 40044c0:	013c0114 	movui	r4,61444
 40044c4:	000b883a 	mov	r5,zero
 40044c8:	40003680 	call	4000368 <LCD_WriteReg>
        //Display control
        LCD_WriteReg(0xB100, 0xCC);
 40044cc:	012c4014 	movui	r4,45312
 40044d0:	01403304 	movi	r5,204
 40044d4:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB101, 0x00);
 40044d8:	012c4054 	movui	r4,45313
 40044dc:	000b883a 	mov	r5,zero
 40044e0:	40003680 	call	4000368 <LCD_WriteReg>
        //Source hold time
        LCD_WriteReg(0xB600,0x05);
 40044e4:	012d8014 	movui	r4,46592
 40044e8:	01400144 	movi	r5,5
 40044ec:	40003680 	call	4000368 <LCD_WriteReg>
        //Gate EQ control
        LCD_WriteReg(0xB700,0x70);
 40044f0:	012dc014 	movui	r4,46848
 40044f4:	01401c04 	movi	r5,112
 40044f8:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB701,0x70);
 40044fc:	012dc054 	movui	r4,46849
 4004500:	01401c04 	movi	r5,112
 4004504:	40003680 	call	4000368 <LCD_WriteReg>
        //Source EQ control (Mode 2)
        LCD_WriteReg(0xB800,0x01);
 4004508:	012e0014 	movui	r4,47104
 400450c:	01400044 	movi	r5,1
 4004510:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB801,0x03);
 4004514:	012e0054 	movui	r4,47105
 4004518:	014000c4 	movi	r5,3
 400451c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB802,0x03);
 4004520:	012e0094 	movui	r4,47106
 4004524:	014000c4 	movi	r5,3
 4004528:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xB803,0x03);
 400452c:	012e00d4 	movui	r4,47107
 4004530:	014000c4 	movi	r5,3
 4004534:	40003680 	call	4000368 <LCD_WriteReg>
        //Inversion mode (2-dot)
        LCD_WriteReg(0xBC00,0x02);
 4004538:	012f0014 	movui	r4,48128
 400453c:	01400084 	movi	r5,2
 4004540:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBC01,0x00);
 4004544:	012f0054 	movui	r4,48129
 4004548:	000b883a 	mov	r5,zero
 400454c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xBC02,0x00);
 4004550:	012f0094 	movui	r4,48130
 4004554:	000b883a 	mov	r5,zero
 4004558:	40003680 	call	4000368 <LCD_WriteReg>
        //Timing control 4H w/ 4-delay
        LCD_WriteReg(0xC900,0xD0);
 400455c:	01324014 	movui	r4,51456
 4004560:	01403404 	movi	r5,208
 4004564:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xC901,0x02);
 4004568:	01324054 	movui	r4,51457
 400456c:	01400084 	movi	r5,2
 4004570:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xC902,0x50);
 4004574:	01324094 	movui	r4,51458
 4004578:	01401404 	movi	r5,80
 400457c:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xC903,0x50);
 4004580:	013240d4 	movui	r4,51459
 4004584:	01401404 	movi	r5,80
 4004588:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0xC904,0x50);
 400458c:	01324114 	movui	r4,51460
 4004590:	01401404 	movi	r5,80
 4004594:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0x3500,0x00);
 4004598:	010d4004 	movi	r4,13568
 400459c:	000b883a 	mov	r5,zero
 40045a0:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 40045a4:	010e8004 	movi	r4,14848
 40045a8:	01401544 	movi	r5,85
 40045ac:	40003680 	call	4000368 <LCD_WriteReg>
        LCD_WR_CMD(0x1100);
 40045b0:	01044004 	movi	r4,4352
 40045b4:	40002380 	call	4000238 <LCD_WR_CMD>
        usleep(120);
 40045b8:	01001e04 	movi	r4,120
 40045bc:	400f1b80 	call	400f1b8 <usleep>
        LCD_WR_CMD(0x2900);
 40045c0:	010a4004 	movi	r4,10496
 40045c4:	40002380 	call	4000238 <LCD_WR_CMD>
 40045c8:	00007d06 	br	40047c0 <MCULCD_Init+0x2dc4>
    }else if(lcddev.id==0X1963) {
 40045cc:	00810374 	movhi	r2,1037
 40045d0:	10906504 	addi	r2,r2,16788
 40045d4:	10800217 	ldw	r2,8(r2)
 40045d8:	108658d8 	cmpnei	r2,r2,6499
 40045dc:	1000781e 	bne	r2,zero,40047c0 <MCULCD_Init+0x2dc4>
        LCD_WR_CMD(0xE2);     //Set PLL with OSC = 10MHz (hardware),  Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 40045e0:	01003884 	movi	r4,226
 40045e4:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x1D);    //参数1
 40045e8:	01000744 	movi	r4,29
 40045ec:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x02);    //参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 40045f0:	01000084 	movi	r4,2
 40045f4:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x04);    //参数3 Validate M and N values
 40045f8:	01000104 	movi	r4,4
 40045fc:	40002a00 	call	40002a0 <LCD_WR_DATA>
        usleep(100);
 4004600:	01001904 	movi	r4,100
 4004604:	400f1b80 	call	400f1b8 <usleep>
        LCD_WR_CMD(0xE0);     // Start PLL command
 4004608:	01003804 	movi	r4,224
 400460c:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x01);    // enable PLL
 4004610:	01000044 	movi	r4,1
 4004614:	40002a00 	call	40002a0 <LCD_WR_DATA>
        delay_ms(10);
 4004618:	01000284 	movi	r4,10
 400461c:	40002000 	call	4000200 <delay_ms>
        LCD_WR_CMD(0xE0);     // Start PLL command again
 4004620:	01003804 	movi	r4,224
 4004624:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x03);    // now, use PLL output as system clock
 4004628:	010000c4 	movi	r4,3
 400462c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        delay_ms(12);
 4004630:	01000304 	movi	r4,12
 4004634:	40002000 	call	4000200 <delay_ms>
        LCD_WR_CMD(0x01);     //软复位
 4004638:	01000044 	movi	r4,1
 400463c:	40002380 	call	4000238 <LCD_WR_CMD>
        delay_ms(10);
 4004640:	01000284 	movi	r4,10
 4004644:	40002000 	call	4000200 <delay_ms>

        LCD_WR_CMD(0xE6);     //设置像素频率,33Mhz
 4004648:	01003984 	movi	r4,230
 400464c:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x2F);
 4004650:	01000bc4 	movi	r4,47
 4004654:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 4004658:	01003fc4 	movi	r4,255
 400465c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFF);
 4004660:	01003fc4 	movi	r4,255
 4004664:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB0);     //设置LCD模式
 4004668:	01002c04 	movi	r4,176
 400466c:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x20);    //24位模式
 4004670:	01000804 	movi	r4,32
 4004674:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);    //TFT 模式
 4004678:	0009883a 	mov	r4,zero
 400467c:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 4004680:	010000c4 	movi	r4,3
 4004684:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 4004688:	0100c7c4 	movi	r4,799
 400468c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 4004690:	01000044 	movi	r4,1
 4004694:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 4004698:	010077c4 	movi	r4,479
 400469c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);    //RGB序列
 40046a0:	0009883a 	mov	r4,zero
 40046a4:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB4);     //Set horizontal period
 40046a8:	01002d04 	movi	r4,180
 40046ac:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA((SSD_HT-1)>>8);
 40046b0:	01000104 	movi	r4,4
 40046b4:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HT-1);
 40046b8:	010107c4 	movi	r4,1055
 40046bc:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS>>8);
 40046c0:	0009883a 	mov	r4,zero
 40046c4:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HPS);
 40046c8:	01000b84 	movi	r4,46
 40046cc:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 40046d0:	0009883a 	mov	r4,zero
 40046d4:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40046d8:	0009883a 	mov	r4,zero
 40046dc:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40046e0:	0009883a 	mov	r4,zero
 40046e4:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 40046e8:	0009883a 	mov	r4,zero
 40046ec:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xB6);     //Set vertical period
 40046f0:	01002d84 	movi	r4,182
 40046f4:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA((SSD_VT-1)>>8);
 40046f8:	01000084 	movi	r4,2
 40046fc:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VT-1);
 4004700:	01008304 	movi	r4,524
 4004704:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS>>8);
 4004708:	0009883a 	mov	r4,zero
 400470c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VPS);
 4004710:	010005c4 	movi	r4,23
 4004714:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 4004718:	01000544 	movi	r4,21
 400471c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4004720:	0009883a 	mov	r4,zero
 4004724:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);
 4004728:	0009883a 	mov	r4,zero
 400472c:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xF0);    //设置SSD1963与CPU接口为16bit
 4004730:	01003c04 	movi	r4,240
 4004734:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x03);   //16-bit(565 format) data for 16bpp
 4004738:	010000c4 	movi	r4,3
 400473c:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0x29);    //开启显示
 4004740:	01000a44 	movi	r4,41
 4004744:	40002380 	call	4000238 <LCD_WR_CMD>
        //设置PWM输出  背光通过占空比可调
        LCD_WR_CMD(0xD0);    //设置自动白平衡DBC
 4004748:	01003404 	movi	r4,208
 400474c:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x00);   //disable
 4004750:	0009883a 	mov	r4,zero
 4004754:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xBE);    //配置PWM输出
 4004758:	01002f84 	movi	r4,190
 400475c:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x05);   //1设置PWM频率
 4004760:	01000144 	movi	r4,5
 4004764:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0xFE);   //2设置PWM占空比
 4004768:	01003f84 	movi	r4,254
 400476c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);   //3设置C
 4004770:	01000044 	movi	r4,1
 4004774:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);   //4设置D
 4004778:	0009883a 	mov	r4,zero
 400477c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);   //5设置E
 4004780:	0009883a 	mov	r4,zero
 4004784:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x00);   //6设置F
 4004788:	0009883a 	mov	r4,zero
 400478c:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_WR_CMD(0xB8);    //设置GPIO配置
 4004790:	01002e04 	movi	r4,184
 4004794:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0x03);   //2个IO口设置成输出
 4004798:	010000c4 	movi	r4,3
 400479c:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_DATA(0x01);   //GPIO使用正常的IO功能
 40047a0:	01000044 	movi	r4,1
 40047a4:	40002a00 	call	40002a0 <LCD_WR_DATA>
        LCD_WR_CMD(0xBA);
 40047a8:	01002e84 	movi	r4,186
 40047ac:	40002380 	call	4000238 <LCD_WR_CMD>
        LCD_WR_DATA(0X01);   //GPIO[1:0]=01,控制LCD方向
 40047b0:	01000044 	movi	r4,1
 40047b4:	40002a00 	call	40002a0 <LCD_WR_DATA>

        LCD_SSD_BackLightSet(100);//背光设置为最亮
 40047b8:	01001904 	movi	r4,100
 40047bc:	40012440 	call	4001244 <LCD_SSD_BackLightSet>
    }
    LCD_Display_Dir(0);        //默认为竖屏
 40047c0:	0009883a 	mov	r4,zero
 40047c4:	40012f40 	call	40012f4 <LCD_Display_Dir>
    IOWR_ALTERA_AVALON_PIO_DATA(MLCD_BL_BASE,1);    //点亮背光
 40047c8:	00c00044 	movi	r3,1
 40047cc:	00860004 	movi	r2,6144
 40047d0:	10c00035 	stwio	r3,0(r2)
    LCD_Clear(MLCD_WHITE);
 40047d4:	013fffd4 	movui	r4,65535
 40047d8:	40047f40 	call	40047f4 <LCD_Clear>
}
 40047dc:	e037883a 	mov	sp,fp
 40047e0:	dfc00217 	ldw	ra,8(sp)
 40047e4:	df000117 	ldw	fp,4(sp)
 40047e8:	dc000017 	ldw	r16,0(sp)
 40047ec:	dec00304 	addi	sp,sp,12
 40047f0:	f800283a 	ret

040047f4 <LCD_Clear>:

//清屏函数
//color:要清屏的填充色
void LCD_Clear(u32 color)
{
 40047f4:	defffb04 	addi	sp,sp,-20
 40047f8:	dfc00415 	stw	ra,16(sp)
 40047fc:	df000315 	stw	fp,12(sp)
 4004800:	df000304 	addi	fp,sp,12
 4004804:	e13fff15 	stw	r4,-4(fp)
    u32 index=0;
 4004808:	e03ffd15 	stw	zero,-12(fp)
    u32 totalpoint=lcddev.width;
 400480c:	00810374 	movhi	r2,1037
 4004810:	10906504 	addi	r2,r2,16788
 4004814:	10800017 	ldw	r2,0(r2)
 4004818:	e0bffe15 	stw	r2,-8(fp)
    totalpoint*=lcddev.height;     //得到总点数
 400481c:	00810374 	movhi	r2,1037
 4004820:	10906504 	addi	r2,r2,16788
 4004824:	10800117 	ldw	r2,4(r2)
 4004828:	e0fffe17 	ldw	r3,-8(fp)
 400482c:	1885383a 	mul	r2,r3,r2
 4004830:	e0bffe15 	stw	r2,-8(fp)
    LCD_SetCursor(0x00,0x0000);    //设置光标位置
 4004834:	0009883a 	mov	r4,zero
 4004838:	000b883a 	mov	r5,zero
 400483c:	40007140 	call	4000714 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();        //开始写入GRAM
 4004840:	40003e00 	call	40003e0 <LCD_WriteRAM_Prepare>
    for(index=0;index<totalpoint;index++) {
 4004844:	e03ffd15 	stw	zero,-12(fp)
 4004848:	00000506 	br	4004860 <LCD_Clear+0x6c>
        LCD_WR_DATA(color);
 400484c:	e13fff17 	ldw	r4,-4(fp)
 4004850:	40002a00 	call	40002a0 <LCD_WR_DATA>
    u32 index=0;
    u32 totalpoint=lcddev.width;
    totalpoint*=lcddev.height;     //得到总点数
    LCD_SetCursor(0x00,0x0000);    //设置光标位置
    LCD_WriteRAM_Prepare();        //开始写入GRAM
    for(index=0;index<totalpoint;index++) {
 4004854:	e0bffd17 	ldw	r2,-12(fp)
 4004858:	10800044 	addi	r2,r2,1
 400485c:	e0bffd15 	stw	r2,-12(fp)
 4004860:	e0fffd17 	ldw	r3,-12(fp)
 4004864:	e0bffe17 	ldw	r2,-8(fp)
 4004868:	18bff836 	bltu	r3,r2,400484c <LCD_Clear+0x58>
        LCD_WR_DATA(color);
    }
}
 400486c:	e037883a 	mov	sp,fp
 4004870:	dfc00117 	ldw	ra,4(sp)
 4004874:	df000017 	ldw	fp,0(sp)
 4004878:	dec00204 	addi	sp,sp,8
 400487c:	f800283a 	ret

04004880 <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u32 color)
{
 4004880:	defff704 	addi	sp,sp,-36
 4004884:	dfc00815 	stw	ra,32(sp)
 4004888:	df000715 	stw	fp,28(sp)
 400488c:	df000704 	addi	fp,sp,28
 4004890:	e13ffc15 	stw	r4,-16(fp)
 4004894:	e17ffd15 	stw	r5,-12(fp)
 4004898:	e1bffe15 	stw	r6,-8(fp)
 400489c:	e1ffff15 	stw	r7,-4(fp)
    u16 i,j;
    u16 xlen=0;
 40048a0:	e03ffb15 	stw	zero,-20(fp)
    xlen=ex-sx+1;
 40048a4:	e0fffe17 	ldw	r3,-8(fp)
 40048a8:	e0bffc17 	ldw	r2,-16(fp)
 40048ac:	1885c83a 	sub	r2,r3,r2
 40048b0:	10800044 	addi	r2,r2,1
 40048b4:	e0bffb15 	stw	r2,-20(fp)
    for(i=sy;i<=ey;i++)
 40048b8:	e0bffd17 	ldw	r2,-12(fp)
 40048bc:	e0bff915 	stw	r2,-28(fp)
 40048c0:	00001106 	br	4004908 <LCD_Fill+0x88>
    {
        LCD_SetCursor(sx,i);                    //设置光标位置
 40048c4:	e13ffc17 	ldw	r4,-16(fp)
 40048c8:	e17ff917 	ldw	r5,-28(fp)
 40048cc:	40007140 	call	4000714 <LCD_SetCursor>
        LCD_WriteRAM_Prepare();                 //开始写入GRAM
 40048d0:	40003e00 	call	40003e0 <LCD_WriteRAM_Prepare>
        for(j=0;j<xlen;j++)LCD_WR_DATA(color);  //显示颜色
 40048d4:	e03ffa15 	stw	zero,-24(fp)
 40048d8:	00000506 	br	40048f0 <LCD_Fill+0x70>
 40048dc:	e1000217 	ldw	r4,8(fp)
 40048e0:	40002a00 	call	40002a0 <LCD_WR_DATA>
 40048e4:	e0bffa17 	ldw	r2,-24(fp)
 40048e8:	10800044 	addi	r2,r2,1
 40048ec:	e0bffa15 	stw	r2,-24(fp)
 40048f0:	e0fffa17 	ldw	r3,-24(fp)
 40048f4:	e0bffb17 	ldw	r2,-20(fp)
 40048f8:	18bff836 	bltu	r3,r2,40048dc <LCD_Fill+0x5c>
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u32 color)
{
    u16 i,j;
    u16 xlen=0;
    xlen=ex-sx+1;
    for(i=sy;i<=ey;i++)
 40048fc:	e0bff917 	ldw	r2,-28(fp)
 4004900:	10800044 	addi	r2,r2,1
 4004904:	e0bff915 	stw	r2,-28(fp)
 4004908:	e0bff917 	ldw	r2,-28(fp)
 400490c:	e0ffff17 	ldw	r3,-4(fp)
 4004910:	18bfec2e 	bgeu	r3,r2,40048c4 <LCD_Fill+0x44>
    {
        LCD_SetCursor(sx,i);                    //设置光标位置
        LCD_WriteRAM_Prepare();                 //开始写入GRAM
        for(j=0;j<xlen;j++)LCD_WR_DATA(color);  //显示颜色
    }
}
 4004914:	e037883a 	mov	sp,fp
 4004918:	dfc00117 	ldw	ra,4(sp)
 400491c:	df000017 	ldw	fp,0(sp)
 4004920:	dec00204 	addi	sp,sp,8
 4004924:	f800283a 	ret

04004928 <LCD_Color_Fill>:
//在指定区域内填充指定颜色块
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
{
 4004928:	defff604 	addi	sp,sp,-40
 400492c:	dfc00915 	stw	ra,36(sp)
 4004930:	df000815 	stw	fp,32(sp)
 4004934:	df000804 	addi	fp,sp,32
 4004938:	e13ffc15 	stw	r4,-16(fp)
 400493c:	e17ffd15 	stw	r5,-12(fp)
 4004940:	e1bffe15 	stw	r6,-8(fp)
 4004944:	e1ffff15 	stw	r7,-4(fp)
    u16 height,width;
    u16 i,j;
    width=ex-sx+1;         //得到填充的宽度
 4004948:	e0fffe17 	ldw	r3,-8(fp)
 400494c:	e0bffc17 	ldw	r2,-16(fp)
 4004950:	1885c83a 	sub	r2,r3,r2
 4004954:	10800044 	addi	r2,r2,1
 4004958:	e0bffa15 	stw	r2,-24(fp)
    height=ey-sy+1;        //高度
 400495c:	e0ffff17 	ldw	r3,-4(fp)
 4004960:	e0bffd17 	ldw	r2,-12(fp)
 4004964:	1885c83a 	sub	r2,r3,r2
 4004968:	10800044 	addi	r2,r2,1
 400496c:	e0bffb15 	stw	r2,-20(fp)
    for(i=0;i<height;i++)
 4004970:	e03ff815 	stw	zero,-32(fp)
 4004974:	00001e06 	br	40049f0 <LCD_Color_Fill+0xc8>
    {
        LCD_SetCursor(sx,sy+i);     //设置光标位置
 4004978:	e0fffd17 	ldw	r3,-12(fp)
 400497c:	e0bff817 	ldw	r2,-32(fp)
 4004980:	1885883a 	add	r2,r3,r2
 4004984:	e13ffc17 	ldw	r4,-16(fp)
 4004988:	100b883a 	mov	r5,r2
 400498c:	40007140 	call	4000714 <LCD_SetCursor>
        LCD_WriteRAM_Prepare();     //开始写入GRAM
 4004990:	40003e00 	call	40003e0 <LCD_WriteRAM_Prepare>
        for(j=0;j<width;j++)
 4004994:	e03ff915 	stw	zero,-28(fp)
 4004998:	00000f06 	br	40049d8 <LCD_Color_Fill+0xb0>
             LCD_WR_DATA(color[i*width+j]);//写入数据
 400499c:	e0fff817 	ldw	r3,-32(fp)
 40049a0:	e0bffa17 	ldw	r2,-24(fp)
 40049a4:	1887383a 	mul	r3,r3,r2
 40049a8:	e0bff917 	ldw	r2,-28(fp)
 40049ac:	1885883a 	add	r2,r3,r2
 40049b0:	1085883a 	add	r2,r2,r2
 40049b4:	1085883a 	add	r2,r2,r2
 40049b8:	e0c00217 	ldw	r3,8(fp)
 40049bc:	1885883a 	add	r2,r3,r2
 40049c0:	10800017 	ldw	r2,0(r2)
 40049c4:	1009883a 	mov	r4,r2
 40049c8:	40002a00 	call	40002a0 <LCD_WR_DATA>
    height=ey-sy+1;        //高度
    for(i=0;i<height;i++)
    {
        LCD_SetCursor(sx,sy+i);     //设置光标位置
        LCD_WriteRAM_Prepare();     //开始写入GRAM
        for(j=0;j<width;j++)
 40049cc:	e0bff917 	ldw	r2,-28(fp)
 40049d0:	10800044 	addi	r2,r2,1
 40049d4:	e0bff915 	stw	r2,-28(fp)
 40049d8:	e0fff917 	ldw	r3,-28(fp)
 40049dc:	e0bffa17 	ldw	r2,-24(fp)
 40049e0:	18bfee36 	bltu	r3,r2,400499c <LCD_Color_Fill+0x74>
{
    u16 height,width;
    u16 i,j;
    width=ex-sx+1;         //得到填充的宽度
    height=ey-sy+1;        //高度
    for(i=0;i<height;i++)
 40049e4:	e0bff817 	ldw	r2,-32(fp)
 40049e8:	10800044 	addi	r2,r2,1
 40049ec:	e0bff815 	stw	r2,-32(fp)
 40049f0:	e0fff817 	ldw	r3,-32(fp)
 40049f4:	e0bffb17 	ldw	r2,-20(fp)
 40049f8:	18bfdf36 	bltu	r3,r2,4004978 <LCD_Color_Fill+0x50>
        LCD_SetCursor(sx,sy+i);     //设置光标位置
        LCD_WriteRAM_Prepare();     //开始写入GRAM
        for(j=0;j<width;j++)
             LCD_WR_DATA(color[i*width+j]);//写入数据
    }
}
 40049fc:	e037883a 	mov	sp,fp
 4004a00:	dfc00117 	ldw	ra,4(sp)
 4004a04:	df000017 	ldw	fp,0(sp)
 4004a08:	dec00204 	addi	sp,sp,8
 4004a0c:	f800283a 	ret

04004a10 <LCD_DrawLine>:

//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 4004a10:	defff004 	addi	sp,sp,-64
 4004a14:	dfc00f15 	stw	ra,60(sp)
 4004a18:	df000e15 	stw	fp,56(sp)
 4004a1c:	df000e04 	addi	fp,sp,56
 4004a20:	e13ffc15 	stw	r4,-16(fp)
 4004a24:	e17ffd15 	stw	r5,-12(fp)
 4004a28:	e1bffe15 	stw	r6,-8(fp)
 4004a2c:	e1ffff15 	stw	r7,-4(fp)
     u16 t;
     int xerr=0,yerr=0,delta_x,delta_y,distance;
 4004a30:	e03ff315 	stw	zero,-52(fp)
 4004a34:	e03ff415 	stw	zero,-48(fp)
     int incx,incy,uRow,uCol;
     delta_x=x2-x1; //计算坐标增量
 4004a38:	e0fffe17 	ldw	r3,-8(fp)
 4004a3c:	e0bffc17 	ldw	r2,-16(fp)
 4004a40:	1885c83a 	sub	r2,r3,r2
 4004a44:	e0bff515 	stw	r2,-44(fp)
     delta_y=y2-y1;
 4004a48:	e0ffff17 	ldw	r3,-4(fp)
 4004a4c:	e0bffd17 	ldw	r2,-12(fp)
 4004a50:	1885c83a 	sub	r2,r3,r2
 4004a54:	e0bff615 	stw	r2,-40(fp)
     uRow=x1;
 4004a58:	e0bffc17 	ldw	r2,-16(fp)
 4004a5c:	e0bffa15 	stw	r2,-24(fp)
     uCol=y1;
 4004a60:	e0bffd17 	ldw	r2,-12(fp)
 4004a64:	e0bffb15 	stw	r2,-20(fp)
     if(delta_x>0)
 4004a68:	e0bff517 	ldw	r2,-44(fp)
 4004a6c:	0080030e 	bge	zero,r2,4004a7c <LCD_DrawLine+0x6c>
          incx=1;  //设置单步方向
 4004a70:	00800044 	movi	r2,1
 4004a74:	e0bff815 	stw	r2,-32(fp)
 4004a78:	00000906 	br	4004aa0 <LCD_DrawLine+0x90>
     else if(delta_x==0)
 4004a7c:	e0bff517 	ldw	r2,-44(fp)
 4004a80:	1000021e 	bne	r2,zero,4004a8c <LCD_DrawLine+0x7c>
          incx=0;  //垂直线
 4004a84:	e03ff815 	stw	zero,-32(fp)
 4004a88:	00000506 	br	4004aa0 <LCD_DrawLine+0x90>
     else {incx=-1;delta_x=-delta_x;}
 4004a8c:	00bfffc4 	movi	r2,-1
 4004a90:	e0bff815 	stw	r2,-32(fp)
 4004a94:	e0bff517 	ldw	r2,-44(fp)
 4004a98:	0085c83a 	sub	r2,zero,r2
 4004a9c:	e0bff515 	stw	r2,-44(fp)
     if(delta_y>0)
 4004aa0:	e0bff617 	ldw	r2,-40(fp)
 4004aa4:	0080030e 	bge	zero,r2,4004ab4 <LCD_DrawLine+0xa4>
          incy=1;
 4004aa8:	00800044 	movi	r2,1
 4004aac:	e0bff915 	stw	r2,-28(fp)
 4004ab0:	00000906 	br	4004ad8 <LCD_DrawLine+0xc8>
     else if(delta_y==0)
 4004ab4:	e0bff617 	ldw	r2,-40(fp)
 4004ab8:	1000021e 	bne	r2,zero,4004ac4 <LCD_DrawLine+0xb4>
          incy=0;  //水平线
 4004abc:	e03ff915 	stw	zero,-28(fp)
 4004ac0:	00000506 	br	4004ad8 <LCD_DrawLine+0xc8>
     else {incy=-1;delta_y=-delta_y;}
 4004ac4:	00bfffc4 	movi	r2,-1
 4004ac8:	e0bff915 	stw	r2,-28(fp)
 4004acc:	e0bff617 	ldw	r2,-40(fp)
 4004ad0:	0085c83a 	sub	r2,zero,r2
 4004ad4:	e0bff615 	stw	r2,-40(fp)
     if(delta_x>delta_y)
 4004ad8:	e0bff517 	ldw	r2,-44(fp)
 4004adc:	e0fff617 	ldw	r3,-40(fp)
 4004ae0:	1880030e 	bge	r3,r2,4004af0 <LCD_DrawLine+0xe0>
          distance=delta_x;         //选取基本增量坐标轴
 4004ae4:	e0bff517 	ldw	r2,-44(fp)
 4004ae8:	e0bff715 	stw	r2,-36(fp)
 4004aec:	00000206 	br	4004af8 <LCD_DrawLine+0xe8>
     else distance=delta_y; 
 4004af0:	e0bff617 	ldw	r2,-40(fp)
 4004af4:	e0bff715 	stw	r2,-36(fp)
     for(t=0;t<=distance+1;t++ )    //画线输出
 4004af8:	e03ff215 	stw	zero,-56(fp)
 4004afc:	00002606 	br	4004b98 <LCD_DrawLine+0x188>
     {
          LCD_DrawPoint(uRow,uCol); //画点
 4004b00:	e0fffa17 	ldw	r3,-24(fp)
 4004b04:	e0bffb17 	ldw	r2,-20(fp)
 4004b08:	1809883a 	mov	r4,r3
 4004b0c:	100b883a 	mov	r5,r2
 4004b10:	4000f800 	call	4000f80 <LCD_DrawPoint>
          xerr+=delta_x ;
 4004b14:	e0fff317 	ldw	r3,-52(fp)
 4004b18:	e0bff517 	ldw	r2,-44(fp)
 4004b1c:	1885883a 	add	r2,r3,r2
 4004b20:	e0bff315 	stw	r2,-52(fp)
          yerr+=delta_y ;
 4004b24:	e0fff417 	ldw	r3,-48(fp)
 4004b28:	e0bff617 	ldw	r2,-40(fp)
 4004b2c:	1885883a 	add	r2,r3,r2
 4004b30:	e0bff415 	stw	r2,-48(fp)
          if(xerr>distance)
 4004b34:	e0bff317 	ldw	r2,-52(fp)
 4004b38:	e0fff717 	ldw	r3,-36(fp)
 4004b3c:	1880080e 	bge	r3,r2,4004b60 <LCD_DrawLine+0x150>
          {
               xerr-=distance;
 4004b40:	e0fff317 	ldw	r3,-52(fp)
 4004b44:	e0bff717 	ldw	r2,-36(fp)
 4004b48:	1885c83a 	sub	r2,r3,r2
 4004b4c:	e0bff315 	stw	r2,-52(fp)
               uRow+=incx;
 4004b50:	e0fffa17 	ldw	r3,-24(fp)
 4004b54:	e0bff817 	ldw	r2,-32(fp)
 4004b58:	1885883a 	add	r2,r3,r2
 4004b5c:	e0bffa15 	stw	r2,-24(fp)
          }
          if(yerr>distance)
 4004b60:	e0bff417 	ldw	r2,-48(fp)
 4004b64:	e0fff717 	ldw	r3,-36(fp)
 4004b68:	1880080e 	bge	r3,r2,4004b8c <LCD_DrawLine+0x17c>
          {
               yerr-=distance;
 4004b6c:	e0fff417 	ldw	r3,-48(fp)
 4004b70:	e0bff717 	ldw	r2,-36(fp)
 4004b74:	1885c83a 	sub	r2,r3,r2
 4004b78:	e0bff415 	stw	r2,-48(fp)
               uCol+=incy;
 4004b7c:	e0fffb17 	ldw	r3,-20(fp)
 4004b80:	e0bff917 	ldw	r2,-28(fp)
 4004b84:	1885883a 	add	r2,r3,r2
 4004b88:	e0bffb15 	stw	r2,-20(fp)
          incy=0;  //水平线
     else {incy=-1;delta_y=-delta_y;}
     if(delta_x>delta_y)
          distance=delta_x;         //选取基本增量坐标轴
     else distance=delta_y; 
     for(t=0;t<=distance+1;t++ )    //画线输出
 4004b8c:	e0bff217 	ldw	r2,-56(fp)
 4004b90:	10800044 	addi	r2,r2,1
 4004b94:	e0bff215 	stw	r2,-56(fp)
 4004b98:	e0bff717 	ldw	r2,-36(fp)
 4004b9c:	10800044 	addi	r2,r2,1
 4004ba0:	1007883a 	mov	r3,r2
 4004ba4:	e0bff217 	ldw	r2,-56(fp)
 4004ba8:	18bfd52e 	bgeu	r3,r2,4004b00 <LCD_DrawLine+0xf0>
          {
               yerr-=distance;
               uCol+=incy;
          }
     }
}
 4004bac:	e037883a 	mov	sp,fp
 4004bb0:	dfc00117 	ldw	ra,4(sp)
 4004bb4:	df000017 	ldw	fp,0(sp)
 4004bb8:	dec00204 	addi	sp,sp,8
 4004bbc:	f800283a 	ret

04004bc0 <LCD_DrawRectangle>:

//画矩形
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 4004bc0:	defffa04 	addi	sp,sp,-24
 4004bc4:	dfc00515 	stw	ra,20(sp)
 4004bc8:	df000415 	stw	fp,16(sp)
 4004bcc:	df000404 	addi	fp,sp,16
 4004bd0:	e13ffc15 	stw	r4,-16(fp)
 4004bd4:	e17ffd15 	stw	r5,-12(fp)
 4004bd8:	e1bffe15 	stw	r6,-8(fp)
 4004bdc:	e1ffff15 	stw	r7,-4(fp)
    LCD_DrawLine(x1,y1,x2,y1);
 4004be0:	e13ffc17 	ldw	r4,-16(fp)
 4004be4:	e17ffd17 	ldw	r5,-12(fp)
 4004be8:	e1bffe17 	ldw	r6,-8(fp)
 4004bec:	e1fffd17 	ldw	r7,-12(fp)
 4004bf0:	4004a100 	call	4004a10 <LCD_DrawLine>
    LCD_DrawLine(x1,y1,x1,y2);
 4004bf4:	e13ffc17 	ldw	r4,-16(fp)
 4004bf8:	e17ffd17 	ldw	r5,-12(fp)
 4004bfc:	e1bffc17 	ldw	r6,-16(fp)
 4004c00:	e1ffff17 	ldw	r7,-4(fp)
 4004c04:	4004a100 	call	4004a10 <LCD_DrawLine>
    LCD_DrawLine(x1,y2,x2,y2);
 4004c08:	e13ffc17 	ldw	r4,-16(fp)
 4004c0c:	e17fff17 	ldw	r5,-4(fp)
 4004c10:	e1bffe17 	ldw	r6,-8(fp)
 4004c14:	e1ffff17 	ldw	r7,-4(fp)
 4004c18:	4004a100 	call	4004a10 <LCD_DrawLine>
    LCD_DrawLine(x2,y1,x2,y2);
 4004c1c:	e13ffe17 	ldw	r4,-8(fp)
 4004c20:	e17ffd17 	ldw	r5,-12(fp)
 4004c24:	e1bffe17 	ldw	r6,-8(fp)
 4004c28:	e1ffff17 	ldw	r7,-4(fp)
 4004c2c:	4004a100 	call	4004a10 <LCD_DrawLine>
}
 4004c30:	e037883a 	mov	sp,fp
 4004c34:	dfc00117 	ldw	ra,4(sp)
 4004c38:	df000017 	ldw	fp,0(sp)
 4004c3c:	dec00204 	addi	sp,sp,8
 4004c40:	f800283a 	ret

04004c44 <LCD_Draw_Circle>:

//在指定位置画一个指定大小的圆
//(x,y):中心点
//r    :半径
void LCD_Draw_Circle(u16 x0,u16 y0,u8 r)
{
 4004c44:	defff804 	addi	sp,sp,-32
 4004c48:	dfc00715 	stw	ra,28(sp)
 4004c4c:	df000615 	stw	fp,24(sp)
 4004c50:	df000604 	addi	fp,sp,24
 4004c54:	e13ffd15 	stw	r4,-12(fp)
 4004c58:	e17ffe15 	stw	r5,-8(fp)
 4004c5c:	3005883a 	mov	r2,r6
 4004c60:	e0bfff05 	stb	r2,-4(fp)
    int a,b;
    int di;
    a=0;b=r;
 4004c64:	e03ffa15 	stw	zero,-24(fp)
 4004c68:	e0bfff03 	ldbu	r2,-4(fp)
 4004c6c:	e0bffb15 	stw	r2,-20(fp)
    di=3-(r<<1);             //判断下个点位置的标志
 4004c70:	e0bfff03 	ldbu	r2,-4(fp)
 4004c74:	1085883a 	add	r2,r2,r2
 4004c78:	00c000c4 	movi	r3,3
 4004c7c:	1885c83a 	sub	r2,r3,r2
 4004c80:	e0bffc15 	stw	r2,-16(fp)
    while(a<=b) {
 4004c84:	00006106 	br	4004e0c <LCD_Draw_Circle+0x1c8>
        LCD_DrawPoint(x0+a,y0-b);             //5
 4004c88:	e0fffa17 	ldw	r3,-24(fp)
 4004c8c:	e0bffd17 	ldw	r2,-12(fp)
 4004c90:	1887883a 	add	r3,r3,r2
 4004c94:	e0bffb17 	ldw	r2,-20(fp)
 4004c98:	e13ffe17 	ldw	r4,-8(fp)
 4004c9c:	2085c83a 	sub	r2,r4,r2
 4004ca0:	1809883a 	mov	r4,r3
 4004ca4:	100b883a 	mov	r5,r2
 4004ca8:	4000f800 	call	4000f80 <LCD_DrawPoint>
        LCD_DrawPoint(x0+b,y0-a);             //0
 4004cac:	e0fffb17 	ldw	r3,-20(fp)
 4004cb0:	e0bffd17 	ldw	r2,-12(fp)
 4004cb4:	1887883a 	add	r3,r3,r2
 4004cb8:	e0bffa17 	ldw	r2,-24(fp)
 4004cbc:	e13ffe17 	ldw	r4,-8(fp)
 4004cc0:	2085c83a 	sub	r2,r4,r2
 4004cc4:	1809883a 	mov	r4,r3
 4004cc8:	100b883a 	mov	r5,r2
 4004ccc:	4000f800 	call	4000f80 <LCD_DrawPoint>
        LCD_DrawPoint(x0+b,y0+a);             //4
 4004cd0:	e0fffb17 	ldw	r3,-20(fp)
 4004cd4:	e0bffd17 	ldw	r2,-12(fp)
 4004cd8:	1887883a 	add	r3,r3,r2
 4004cdc:	e13ffa17 	ldw	r4,-24(fp)
 4004ce0:	e0bffe17 	ldw	r2,-8(fp)
 4004ce4:	2085883a 	add	r2,r4,r2
 4004ce8:	1809883a 	mov	r4,r3
 4004cec:	100b883a 	mov	r5,r2
 4004cf0:	4000f800 	call	4000f80 <LCD_DrawPoint>
        LCD_DrawPoint(x0+a,y0+b);             //6
 4004cf4:	e0fffa17 	ldw	r3,-24(fp)
 4004cf8:	e0bffd17 	ldw	r2,-12(fp)
 4004cfc:	1887883a 	add	r3,r3,r2
 4004d00:	e13ffb17 	ldw	r4,-20(fp)
 4004d04:	e0bffe17 	ldw	r2,-8(fp)
 4004d08:	2085883a 	add	r2,r4,r2
 4004d0c:	1809883a 	mov	r4,r3
 4004d10:	100b883a 	mov	r5,r2
 4004d14:	4000f800 	call	4000f80 <LCD_DrawPoint>
        LCD_DrawPoint(x0-a,y0+b);             //1
 4004d18:	e0bffa17 	ldw	r2,-24(fp)
 4004d1c:	e0fffd17 	ldw	r3,-12(fp)
 4004d20:	1887c83a 	sub	r3,r3,r2
 4004d24:	e13ffb17 	ldw	r4,-20(fp)
 4004d28:	e0bffe17 	ldw	r2,-8(fp)
 4004d2c:	2085883a 	add	r2,r4,r2
 4004d30:	1809883a 	mov	r4,r3
 4004d34:	100b883a 	mov	r5,r2
 4004d38:	4000f800 	call	4000f80 <LCD_DrawPoint>
        LCD_DrawPoint(x0-b,y0+a);
 4004d3c:	e0bffb17 	ldw	r2,-20(fp)
 4004d40:	e0fffd17 	ldw	r3,-12(fp)
 4004d44:	1887c83a 	sub	r3,r3,r2
 4004d48:	e13ffa17 	ldw	r4,-24(fp)
 4004d4c:	e0bffe17 	ldw	r2,-8(fp)
 4004d50:	2085883a 	add	r2,r4,r2
 4004d54:	1809883a 	mov	r4,r3
 4004d58:	100b883a 	mov	r5,r2
 4004d5c:	4000f800 	call	4000f80 <LCD_DrawPoint>
        LCD_DrawPoint(x0-a,y0-b);             //2
 4004d60:	e0bffa17 	ldw	r2,-24(fp)
 4004d64:	e0fffd17 	ldw	r3,-12(fp)
 4004d68:	1887c83a 	sub	r3,r3,r2
 4004d6c:	e0bffb17 	ldw	r2,-20(fp)
 4004d70:	e13ffe17 	ldw	r4,-8(fp)
 4004d74:	2085c83a 	sub	r2,r4,r2
 4004d78:	1809883a 	mov	r4,r3
 4004d7c:	100b883a 	mov	r5,r2
 4004d80:	4000f800 	call	4000f80 <LCD_DrawPoint>
        LCD_DrawPoint(x0-b,y0-a);             //7
 4004d84:	e0bffb17 	ldw	r2,-20(fp)
 4004d88:	e0fffd17 	ldw	r3,-12(fp)
 4004d8c:	1887c83a 	sub	r3,r3,r2
 4004d90:	e0bffa17 	ldw	r2,-24(fp)
 4004d94:	e13ffe17 	ldw	r4,-8(fp)
 4004d98:	2085c83a 	sub	r2,r4,r2
 4004d9c:	1809883a 	mov	r4,r3
 4004da0:	100b883a 	mov	r5,r2
 4004da4:	4000f800 	call	4000f80 <LCD_DrawPoint>
        a++;
 4004da8:	e0bffa17 	ldw	r2,-24(fp)
 4004dac:	10800044 	addi	r2,r2,1
 4004db0:	e0bffa15 	stw	r2,-24(fp)
        //使用Bresenham算法画圆
        if(di<0)di +=4*a+6;
 4004db4:	e0bffc17 	ldw	r2,-16(fp)
 4004db8:	1000080e 	bge	r2,zero,4004ddc <LCD_Draw_Circle+0x198>
 4004dbc:	e0bffa17 	ldw	r2,-24(fp)
 4004dc0:	1085883a 	add	r2,r2,r2
 4004dc4:	1085883a 	add	r2,r2,r2
 4004dc8:	10800184 	addi	r2,r2,6
 4004dcc:	e0fffc17 	ldw	r3,-16(fp)
 4004dd0:	1885883a 	add	r2,r3,r2
 4004dd4:	e0bffc15 	stw	r2,-16(fp)
 4004dd8:	00000c06 	br	4004e0c <LCD_Draw_Circle+0x1c8>
        else {
            di+=10+4*(a-b);
 4004ddc:	e0fffa17 	ldw	r3,-24(fp)
 4004de0:	e0bffb17 	ldw	r2,-20(fp)
 4004de4:	1885c83a 	sub	r2,r3,r2
 4004de8:	1085883a 	add	r2,r2,r2
 4004dec:	1085883a 	add	r2,r2,r2
 4004df0:	10800284 	addi	r2,r2,10
 4004df4:	e0fffc17 	ldw	r3,-16(fp)
 4004df8:	1885883a 	add	r2,r3,r2
 4004dfc:	e0bffc15 	stw	r2,-16(fp)
            b--;
 4004e00:	e0bffb17 	ldw	r2,-20(fp)
 4004e04:	10bfffc4 	addi	r2,r2,-1
 4004e08:	e0bffb15 	stw	r2,-20(fp)
{
    int a,b;
    int di;
    a=0;b=r;
    di=3-(r<<1);             //判断下个点位置的标志
    while(a<=b) {
 4004e0c:	e0bffa17 	ldw	r2,-24(fp)
 4004e10:	e0fffb17 	ldw	r3,-20(fp)
 4004e14:	18bf9c0e 	bge	r3,r2,4004c88 <LCD_Draw_Circle+0x44>
        else {
            di+=10+4*(a-b);
            b--;
        }
    }
}
 4004e18:	e037883a 	mov	sp,fp
 4004e1c:	dfc00117 	ldw	ra,4(sp)
 4004e20:	df000017 	ldw	fp,0(sp)
 4004e24:	dec00204 	addi	sp,sp,8
 4004e28:	f800283a 	ret

04004e2c <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
{
 4004e2c:	defff604 	addi	sp,sp,-40
 4004e30:	dfc00915 	stw	ra,36(sp)
 4004e34:	df000815 	stw	fp,32(sp)
 4004e38:	df000804 	addi	fp,sp,32
 4004e3c:	e13ffb15 	stw	r4,-20(fp)
 4004e40:	e17ffc15 	stw	r5,-16(fp)
 4004e44:	3007883a 	mov	r3,r6
 4004e48:	3805883a 	mov	r2,r7
 4004e4c:	e1000217 	ldw	r4,8(fp)
 4004e50:	e0fffd05 	stb	r3,-12(fp)
 4004e54:	e0bffe05 	stb	r2,-8(fp)
 4004e58:	e13fff05 	stb	r4,-4(fp)
    u8 temp,t1,t;
    u16 y0=y;
 4004e5c:	e0bffc17 	ldw	r2,-16(fp)
 4004e60:	e0bff915 	stw	r2,-28(fp)
    u8 csize=(size/8+((size%8)?1:0))*(size/2);   //得到字体一个字符对应点阵集所占的字节数
 4004e64:	e0bffe03 	ldbu	r2,-8(fp)
 4004e68:	1004d0fa 	srli	r2,r2,3
 4004e6c:	10c03fcc 	andi	r3,r2,255
 4004e70:	e0bffe03 	ldbu	r2,-8(fp)
 4004e74:	108001cc 	andi	r2,r2,7
 4004e78:	10803fcc 	andi	r2,r2,255
 4004e7c:	1004c03a 	cmpne	r2,r2,zero
 4004e80:	10803fcc 	andi	r2,r2,255
 4004e84:	1885883a 	add	r2,r3,r2
 4004e88:	1007883a 	mov	r3,r2
 4004e8c:	e0bffe03 	ldbu	r2,-8(fp)
 4004e90:	1004d07a 	srli	r2,r2,1
 4004e94:	1885383a 	mul	r2,r3,r2
 4004e98:	e0bffa05 	stb	r2,-24(fp)
    num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 4004e9c:	e0bffd03 	ldbu	r2,-12(fp)
 4004ea0:	10bff804 	addi	r2,r2,-32
 4004ea4:	e0bffd05 	stb	r2,-12(fp)
    for(t=0;t<csize;t++) {
 4004ea8:	e03ff885 	stb	zero,-30(fp)
 4004eac:	00006d06 	br	4005064 <LCD_ShowChar+0x238>
        if(size==12)
 4004eb0:	e0bffe03 	ldbu	r2,-8(fp)
 4004eb4:	10800318 	cmpnei	r2,r2,12
 4004eb8:	10000a1e 	bne	r2,zero,4004ee4 <LCD_ShowChar+0xb8>
            temp=asc2_1206[num][t];  //调用1206字体
 4004ebc:	e13ffd03 	ldbu	r4,-12(fp)
 4004ec0:	e0bff883 	ldbu	r2,-30(fp)
 4004ec4:	00c10074 	movhi	r3,1025
 4004ec8:	18c8c804 	addi	r3,r3,8992
 4004ecc:	21000324 	muli	r4,r4,12
 4004ed0:	2085883a 	add	r2,r4,r2
 4004ed4:	1885883a 	add	r2,r3,r2
 4004ed8:	10800003 	ldbu	r2,0(r2)
 4004edc:	e0bff805 	stb	r2,-32(fp)
 4004ee0:	00002606 	br	4004f7c <LCD_ShowChar+0x150>
        else if(size==16)
 4004ee4:	e0bffe03 	ldbu	r2,-8(fp)
 4004ee8:	10800418 	cmpnei	r2,r2,16
 4004eec:	10000a1e 	bne	r2,zero,4004f18 <LCD_ShowChar+0xec>
            temp=asc2_1608[num][t];  //调用1608字体
 4004ef0:	e13ffd03 	ldbu	r4,-12(fp)
 4004ef4:	e0bff883 	ldbu	r2,-30(fp)
 4004ef8:	00c10074 	movhi	r3,1025
 4004efc:	18c9e504 	addi	r3,r3,10132
 4004f00:	2008913a 	slli	r4,r4,4
 4004f04:	2085883a 	add	r2,r4,r2
 4004f08:	1885883a 	add	r2,r3,r2
 4004f0c:	10800003 	ldbu	r2,0(r2)
 4004f10:	e0bff805 	stb	r2,-32(fp)
 4004f14:	00001906 	br	4004f7c <LCD_ShowChar+0x150>
        else if(size==24)
 4004f18:	e0bffe03 	ldbu	r2,-8(fp)
 4004f1c:	10800618 	cmpnei	r2,r2,24
 4004f20:	10000a1e 	bne	r2,zero,4004f4c <LCD_ShowChar+0x120>
            temp=asc2_2412[num][t];  //调用2412字体
 4004f24:	e13ffd03 	ldbu	r4,-12(fp)
 4004f28:	e0bff883 	ldbu	r2,-30(fp)
 4004f2c:	00c10074 	movhi	r3,1025
 4004f30:	18cb6104 	addi	r3,r3,11652
 4004f34:	21000924 	muli	r4,r4,36
 4004f38:	2085883a 	add	r2,r4,r2
 4004f3c:	1885883a 	add	r2,r3,r2
 4004f40:	10800003 	ldbu	r2,0(r2)
 4004f44:	e0bff805 	stb	r2,-32(fp)
 4004f48:	00000c06 	br	4004f7c <LCD_ShowChar+0x150>
        else if(size==32)
 4004f4c:	e0bffe03 	ldbu	r2,-8(fp)
 4004f50:	10800818 	cmpnei	r2,r2,32
 4004f54:	1000471e 	bne	r2,zero,4005074 <LCD_ShowChar+0x248>
            temp=asc2_3216[num][t];  //调用3216字体
 4004f58:	e13ffd03 	ldbu	r4,-12(fp)
 4004f5c:	e0bff883 	ldbu	r2,-30(fp)
 4004f60:	00c10074 	movhi	r3,1025
 4004f64:	18ceb804 	addi	r3,r3,15072
 4004f68:	200891fa 	slli	r4,r4,7
 4004f6c:	2085883a 	add	r2,r4,r2
 4004f70:	1885883a 	add	r2,r3,r2
 4004f74:	10800003 	ldbu	r2,0(r2)
 4004f78:	e0bff805 	stb	r2,-32(fp)
        else return;                 //没有的字库
        for(t1=0;t1<8;t1++) {
 4004f7c:	e03ff845 	stb	zero,-31(fp)
 4004f80:	00003006 	br	4005044 <LCD_ShowChar+0x218>
            if(temp&0x80)
 4004f84:	e0bff803 	ldbu	r2,-32(fp)
 4004f88:	10803fcc 	andi	r2,r2,255
 4004f8c:	1080201c 	xori	r2,r2,128
 4004f90:	10bfe004 	addi	r2,r2,-128
 4004f94:	1000060e 	bge	r2,zero,4004fb0 <LCD_ShowChar+0x184>
                LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 4004f98:	d0a00017 	ldw	r2,-32768(gp)
 4004f9c:	e13ffb17 	ldw	r4,-20(fp)
 4004fa0:	e17ffc17 	ldw	r5,-16(fp)
 4004fa4:	100d883a 	mov	r6,r2
 4004fa8:	4000fc80 	call	4000fc8 <LCD_Fast_DrawPoint>
 4004fac:	00000706 	br	4004fcc <LCD_ShowChar+0x1a0>
            else if(mode==0)
 4004fb0:	e0bfff03 	ldbu	r2,-4(fp)
 4004fb4:	1000051e 	bne	r2,zero,4004fcc <LCD_ShowChar+0x1a0>
                LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 4004fb8:	d0a00117 	ldw	r2,-32764(gp)
 4004fbc:	e13ffb17 	ldw	r4,-20(fp)
 4004fc0:	e17ffc17 	ldw	r5,-16(fp)
 4004fc4:	100d883a 	mov	r6,r2
 4004fc8:	4000fc80 	call	4000fc8 <LCD_Fast_DrawPoint>
            temp<<=1;
 4004fcc:	e0bff803 	ldbu	r2,-32(fp)
 4004fd0:	1085883a 	add	r2,r2,r2
 4004fd4:	e0bff805 	stb	r2,-32(fp)
            y++;
 4004fd8:	e0bffc17 	ldw	r2,-16(fp)
 4004fdc:	10800044 	addi	r2,r2,1
 4004fe0:	e0bffc15 	stw	r2,-16(fp)
            if(y>=lcddev.height)
 4004fe4:	00810374 	movhi	r2,1037
 4004fe8:	10906504 	addi	r2,r2,16788
 4004fec:	10800117 	ldw	r2,4(r2)
 4004ff0:	e0fffc17 	ldw	r3,-16(fp)
 4004ff4:	1880212e 	bgeu	r3,r2,400507c <LCD_ShowChar+0x250>
                return;     //超区域了
            if((y-y0)==size) {
 4004ff8:	e0fffc17 	ldw	r3,-16(fp)
 4004ffc:	e0bff917 	ldw	r2,-28(fp)
 4005000:	1887c83a 	sub	r3,r3,r2
 4005004:	e0bffe03 	ldbu	r2,-8(fp)
 4005008:	18800b1e 	bne	r3,r2,4005038 <LCD_ShowChar+0x20c>
                y=y0;
 400500c:	e0bff917 	ldw	r2,-28(fp)
 4005010:	e0bffc15 	stw	r2,-16(fp)
                x++;
 4005014:	e0bffb17 	ldw	r2,-20(fp)
 4005018:	10800044 	addi	r2,r2,1
 400501c:	e0bffb15 	stw	r2,-20(fp)
                if(x>=lcddev.width)
 4005020:	00810374 	movhi	r2,1037
 4005024:	10906504 	addi	r2,r2,16788
 4005028:	10800017 	ldw	r2,0(r2)
 400502c:	e0fffb17 	ldw	r3,-20(fp)
 4005030:	18800836 	bltu	r3,r2,4005054 <LCD_ShowChar+0x228>
                    return;  //超区域了
 4005034:	00001206 	br	4005080 <LCD_ShowChar+0x254>
        else if(size==24)
            temp=asc2_2412[num][t];  //调用2412字体
        else if(size==32)
            temp=asc2_3216[num][t];  //调用3216字体
        else return;                 //没有的字库
        for(t1=0;t1<8;t1++) {
 4005038:	e0bff843 	ldbu	r2,-31(fp)
 400503c:	10800044 	addi	r2,r2,1
 4005040:	e0bff845 	stb	r2,-31(fp)
 4005044:	e0bff843 	ldbu	r2,-31(fp)
 4005048:	10800230 	cmpltui	r2,r2,8
 400504c:	103fcd1e 	bne	r2,zero,4004f84 <LCD_ShowChar+0x158>
 4005050:	00000106 	br	4005058 <LCD_ShowChar+0x22c>
            if((y-y0)==size) {
                y=y0;
                x++;
                if(x>=lcddev.width)
                    return;  //超区域了
                break;
 4005054:	0001883a 	nop
{
    u8 temp,t1,t;
    u16 y0=y;
    u8 csize=(size/8+((size%8)?1:0))*(size/2);   //得到字体一个字符对应点阵集所占的字节数
    num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
    for(t=0;t<csize;t++) {
 4005058:	e0bff883 	ldbu	r2,-30(fp)
 400505c:	10800044 	addi	r2,r2,1
 4005060:	e0bff885 	stb	r2,-30(fp)
 4005064:	e0fff883 	ldbu	r3,-30(fp)
 4005068:	e0bffa03 	ldbu	r2,-24(fp)
 400506c:	18bf9036 	bltu	r3,r2,4004eb0 <LCD_ShowChar+0x84>
 4005070:	00000306 	br	4005080 <LCD_ShowChar+0x254>
            temp=asc2_1608[num][t];  //调用1608字体
        else if(size==24)
            temp=asc2_2412[num][t];  //调用2412字体
        else if(size==32)
            temp=asc2_3216[num][t];  //调用3216字体
        else return;                 //没有的字库
 4005074:	0001883a 	nop
 4005078:	00000106 	br	4005080 <LCD_ShowChar+0x254>
            else if(mode==0)
                LCD_Fast_DrawPoint(x,y,BACK_COLOR);
            temp<<=1;
            y++;
            if(y>=lcddev.height)
                return;     //超区域了
 400507c:	0001883a 	nop
                    return;  //超区域了
                break;
            }
        }
    }
}
 4005080:	e037883a 	mov	sp,fp
 4005084:	dfc00117 	ldw	ra,4(sp)
 4005088:	df000017 	ldw	fp,0(sp)
 400508c:	dec00204 	addi	sp,sp,8
 4005090:	f800283a 	ret

04005094 <LCD_Pow>:

//m^n函数
//返回值:m^n次方.
u32 LCD_Pow(u8 m,u8 n)
{
 4005094:	defffc04 	addi	sp,sp,-16
 4005098:	df000315 	stw	fp,12(sp)
 400509c:	df000304 	addi	fp,sp,12
 40050a0:	2007883a 	mov	r3,r4
 40050a4:	2805883a 	mov	r2,r5
 40050a8:	e0fffe05 	stb	r3,-8(fp)
 40050ac:	e0bfff05 	stb	r2,-4(fp)
    u32 result=1;
 40050b0:	00800044 	movi	r2,1
 40050b4:	e0bffd15 	stw	r2,-12(fp)
    while(n--)
 40050b8:	00000406 	br	40050cc <LCD_Pow+0x38>
        result*=m;
 40050bc:	e0bffe03 	ldbu	r2,-8(fp)
 40050c0:	e0fffd17 	ldw	r3,-12(fp)
 40050c4:	1885383a 	mul	r2,r3,r2
 40050c8:	e0bffd15 	stw	r2,-12(fp)
//m^n函数
//返回值:m^n次方.
u32 LCD_Pow(u8 m,u8 n)
{
    u32 result=1;
    while(n--)
 40050cc:	e0bfff03 	ldbu	r2,-4(fp)
 40050d0:	1004c03a 	cmpne	r2,r2,zero
 40050d4:	e0ffff03 	ldbu	r3,-4(fp)
 40050d8:	18ffffc4 	addi	r3,r3,-1
 40050dc:	e0ffff05 	stb	r3,-4(fp)
 40050e0:	10803fcc 	andi	r2,r2,255
 40050e4:	103ff51e 	bne	r2,zero,40050bc <LCD_Pow+0x28>
        result*=m;
    return result;
 40050e8:	e0bffd17 	ldw	r2,-12(fp)
}
 40050ec:	e037883a 	mov	sp,fp
 40050f0:	df000017 	ldw	fp,0(sp)
 40050f4:	dec00104 	addi	sp,sp,4
 40050f8:	f800283a 	ret

040050fc <LCD_ShowNum>:
//len :数字的位数
//size:字体大小
//color:颜色
//num:数值(0~4294967295);
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
{
 40050fc:	defff704 	addi	sp,sp,-36
 4005100:	dfc00815 	stw	ra,32(sp)
 4005104:	df000715 	stw	fp,28(sp)
 4005108:	df000704 	addi	fp,sp,28
 400510c:	e13ffb15 	stw	r4,-20(fp)
 4005110:	e17ffc15 	stw	r5,-16(fp)
 4005114:	e1bffd15 	stw	r6,-12(fp)
 4005118:	3805883a 	mov	r2,r7
 400511c:	e0c00217 	ldw	r3,8(fp)
 4005120:	e0bffe05 	stb	r2,-8(fp)
 4005124:	e0ffff05 	stb	r3,-4(fp)
    u8 t,temp;
    u8 enshow=0;
 4005128:	e03ffa45 	stb	zero,-23(fp)
    for(t=0;t<len;t++) {
 400512c:	e03ffa05 	stb	zero,-24(fp)
 4005130:	00003d06 	br	4005228 <LCD_ShowNum+0x12c>
       temp=(num/LCD_Pow(10,len-t-1))%10;
 4005134:	e0fffe03 	ldbu	r3,-8(fp)
 4005138:	e0bffa03 	ldbu	r2,-24(fp)
 400513c:	1885c83a 	sub	r2,r3,r2
 4005140:	10bfffc4 	addi	r2,r2,-1
 4005144:	10803fcc 	andi	r2,r2,255
 4005148:	01000284 	movi	r4,10
 400514c:	100b883a 	mov	r5,r2
 4005150:	40050940 	call	4005094 <LCD_Pow>
 4005154:	e0fffd17 	ldw	r3,-12(fp)
 4005158:	1885203a 	divu	r2,r3,r2
 400515c:	00c00284 	movi	r3,10
 4005160:	10c7203a 	divu	r3,r2,r3
 4005164:	18c002a4 	muli	r3,r3,10
 4005168:	10c5c83a 	sub	r2,r2,r3
 400516c:	e0bffa85 	stb	r2,-22(fp)
       if(enshow==0&&t<(len-1))
 4005170:	e0bffa43 	ldbu	r2,-23(fp)
 4005174:	1000181e 	bne	r2,zero,40051d8 <LCD_ShowNum+0xdc>
 4005178:	e0fffa03 	ldbu	r3,-24(fp)
 400517c:	e0bffe03 	ldbu	r2,-8(fp)
 4005180:	10bfffc4 	addi	r2,r2,-1
 4005184:	1880140e 	bge	r3,r2,40051d8 <LCD_ShowNum+0xdc>
       {
            if(temp==0)
 4005188:	e0bffa83 	ldbu	r2,-22(fp)
 400518c:	1000101e 	bne	r2,zero,40051d0 <LCD_ShowNum+0xd4>
            {
                LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
 4005190:	e0bfff03 	ldbu	r2,-4(fp)
 4005194:	1004d07a 	srli	r2,r2,1
 4005198:	10c03fcc 	andi	r3,r2,255
 400519c:	e0bffa03 	ldbu	r2,-24(fp)
 40051a0:	1885383a 	mul	r2,r3,r2
 40051a4:	1007883a 	mov	r3,r2
 40051a8:	e0bffb17 	ldw	r2,-20(fp)
 40051ac:	1887883a 	add	r3,r3,r2
 40051b0:	e0bfff03 	ldbu	r2,-4(fp)
 40051b4:	d8000015 	stw	zero,0(sp)
 40051b8:	1809883a 	mov	r4,r3
 40051bc:	e17ffc17 	ldw	r5,-16(fp)
 40051c0:	01800804 	movi	r6,32
 40051c4:	100f883a 	mov	r7,r2
 40051c8:	4004e2c0 	call	4004e2c <LCD_ShowChar>
                continue;
 40051cc:	00001306 	br	400521c <LCD_ShowNum+0x120>
            }else enshow=1;
 40051d0:	00800044 	movi	r2,1
 40051d4:	e0bffa45 	stb	r2,-23(fp)
       }
       LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0);
 40051d8:	e0bfff03 	ldbu	r2,-4(fp)
 40051dc:	1004d07a 	srli	r2,r2,1
 40051e0:	10c03fcc 	andi	r3,r2,255
 40051e4:	e0bffa03 	ldbu	r2,-24(fp)
 40051e8:	1885383a 	mul	r2,r3,r2
 40051ec:	1007883a 	mov	r3,r2
 40051f0:	e0bffb17 	ldw	r2,-20(fp)
 40051f4:	1889883a 	add	r4,r3,r2
 40051f8:	e0bffa83 	ldbu	r2,-22(fp)
 40051fc:	10800c04 	addi	r2,r2,48
 4005200:	10c03fcc 	andi	r3,r2,255
 4005204:	e0bfff03 	ldbu	r2,-4(fp)
 4005208:	d8000015 	stw	zero,0(sp)
 400520c:	e17ffc17 	ldw	r5,-16(fp)
 4005210:	180d883a 	mov	r6,r3
 4005214:	100f883a 	mov	r7,r2
 4005218:	4004e2c0 	call	4004e2c <LCD_ShowChar>
//num:数值(0~4294967295);
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
{
    u8 t,temp;
    u8 enshow=0;
    for(t=0;t<len;t++) {
 400521c:	e0bffa03 	ldbu	r2,-24(fp)
 4005220:	10800044 	addi	r2,r2,1
 4005224:	e0bffa05 	stb	r2,-24(fp)
 4005228:	e0fffa03 	ldbu	r3,-24(fp)
 400522c:	e0bffe03 	ldbu	r2,-8(fp)
 4005230:	18bfc036 	bltu	r3,r2,4005134 <LCD_ShowNum+0x38>
                continue;
            }else enshow=1;
       }
       LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0);
    }
}
 4005234:	e037883a 	mov	sp,fp
 4005238:	dfc00117 	ldw	ra,4(sp)
 400523c:	df000017 	ldw	fp,0(sp)
 4005240:	dec00204 	addi	sp,sp,8
 4005244:	f800283a 	ret

04005248 <LCD_ShowxNum>:
//mode:
//[7]:0,不填充;1,填充0.
//[6:1]:保留
//[0]:0,非叠加显示;1,叠加显示.
void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)
{
 4005248:	defff604 	addi	sp,sp,-40
 400524c:	dfc00915 	stw	ra,36(sp)
 4005250:	df000815 	stw	fp,32(sp)
 4005254:	df000804 	addi	fp,sp,32
 4005258:	e13ffa15 	stw	r4,-24(fp)
 400525c:	e17ffb15 	stw	r5,-20(fp)
 4005260:	e1bffc15 	stw	r6,-16(fp)
 4005264:	3805883a 	mov	r2,r7
 4005268:	e1000217 	ldw	r4,8(fp)
 400526c:	e0c00317 	ldw	r3,12(fp)
 4005270:	e0bffd05 	stb	r2,-12(fp)
 4005274:	e13ffe05 	stb	r4,-8(fp)
 4005278:	e0ffff05 	stb	r3,-4(fp)
    u8 t,temp;
    u8 enshow=0;
 400527c:	e03ff945 	stb	zero,-27(fp)
    for(t=0;t<len;t++) {
 4005280:	e03ff905 	stb	zero,-28(fp)
 4005284:	00005806 	br	40053e8 <LCD_ShowxNum+0x1a0>
       temp=(num/LCD_Pow(10,len-t-1))%10;
 4005288:	e0fffd03 	ldbu	r3,-12(fp)
 400528c:	e0bff903 	ldbu	r2,-28(fp)
 4005290:	1885c83a 	sub	r2,r3,r2
 4005294:	10bfffc4 	addi	r2,r2,-1
 4005298:	10803fcc 	andi	r2,r2,255
 400529c:	01000284 	movi	r4,10
 40052a0:	100b883a 	mov	r5,r2
 40052a4:	40050940 	call	4005094 <LCD_Pow>
 40052a8:	e0fffc17 	ldw	r3,-16(fp)
 40052ac:	1885203a 	divu	r2,r3,r2
 40052b0:	00c00284 	movi	r3,10
 40052b4:	10c7203a 	divu	r3,r2,r3
 40052b8:	18c002a4 	muli	r3,r3,10
 40052bc:	10c5c83a 	sub	r2,r2,r3
 40052c0:	e0bff985 	stb	r2,-26(fp)
       if(enshow==0&&t<(len-1)) {
 40052c4:	e0bff943 	ldbu	r2,-27(fp)
 40052c8:	1000311e 	bne	r2,zero,4005390 <LCD_ShowxNum+0x148>
 40052cc:	e0fff903 	ldbu	r3,-28(fp)
 40052d0:	e0bffd03 	ldbu	r2,-12(fp)
 40052d4:	10bfffc4 	addi	r2,r2,-1
 40052d8:	18802d0e 	bge	r3,r2,4005390 <LCD_ShowxNum+0x148>
            if(temp==0) {
 40052dc:	e0bff983 	ldbu	r2,-26(fp)
 40052e0:	1000291e 	bne	r2,zero,4005388 <LCD_ShowxNum+0x140>
                 if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);
 40052e4:	e0bfff03 	ldbu	r2,-4(fp)
 40052e8:	10803fcc 	andi	r2,r2,255
 40052ec:	1080201c 	xori	r2,r2,128
 40052f0:	10bfe004 	addi	r2,r2,-128
 40052f4:	1000120e 	bge	r2,zero,4005340 <LCD_ShowxNum+0xf8>
 40052f8:	e0bffe03 	ldbu	r2,-8(fp)
 40052fc:	1004d07a 	srli	r2,r2,1
 4005300:	10c03fcc 	andi	r3,r2,255
 4005304:	e0bff903 	ldbu	r2,-28(fp)
 4005308:	1885383a 	mul	r2,r3,r2
 400530c:	1007883a 	mov	r3,r2
 4005310:	e0bffa17 	ldw	r2,-24(fp)
 4005314:	1887883a 	add	r3,r3,r2
 4005318:	e0bffe03 	ldbu	r2,-8(fp)
 400531c:	e13fff03 	ldbu	r4,-4(fp)
 4005320:	2100004c 	andi	r4,r4,1
 4005324:	d9000015 	stw	r4,0(sp)
 4005328:	1809883a 	mov	r4,r3
 400532c:	e17ffb17 	ldw	r5,-20(fp)
 4005330:	01800c04 	movi	r6,48
 4005334:	100f883a 	mov	r7,r2
 4005338:	4004e2c0 	call	4004e2c <LCD_ShowChar>
                 else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);
                 continue;
 400533c:	00002706 	br	40053dc <LCD_ShowxNum+0x194>
    for(t=0;t<len;t++) {
       temp=(num/LCD_Pow(10,len-t-1))%10;
       if(enshow==0&&t<(len-1)) {
            if(temp==0) {
                 if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);
                 else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);
 4005340:	e0bffe03 	ldbu	r2,-8(fp)
 4005344:	1004d07a 	srli	r2,r2,1
 4005348:	10c03fcc 	andi	r3,r2,255
 400534c:	e0bff903 	ldbu	r2,-28(fp)
 4005350:	1885383a 	mul	r2,r3,r2
 4005354:	1007883a 	mov	r3,r2
 4005358:	e0bffa17 	ldw	r2,-24(fp)
 400535c:	1887883a 	add	r3,r3,r2
 4005360:	e0bffe03 	ldbu	r2,-8(fp)
 4005364:	e13fff03 	ldbu	r4,-4(fp)
 4005368:	2100004c 	andi	r4,r4,1
 400536c:	d9000015 	stw	r4,0(sp)
 4005370:	1809883a 	mov	r4,r3
 4005374:	e17ffb17 	ldw	r5,-20(fp)
 4005378:	01800804 	movi	r6,32
 400537c:	100f883a 	mov	r7,r2
 4005380:	4004e2c0 	call	4004e2c <LCD_ShowChar>
                 continue;
 4005384:	00001506 	br	40053dc <LCD_ShowxNum+0x194>
            }else enshow=1;
 4005388:	00800044 	movi	r2,1
 400538c:	e0bff945 	stb	r2,-27(fp)
       }
       LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01);
 4005390:	e0bffe03 	ldbu	r2,-8(fp)
 4005394:	1004d07a 	srli	r2,r2,1
 4005398:	10c03fcc 	andi	r3,r2,255
 400539c:	e0bff903 	ldbu	r2,-28(fp)
 40053a0:	1885383a 	mul	r2,r3,r2
 40053a4:	1007883a 	mov	r3,r2
 40053a8:	e0bffa17 	ldw	r2,-24(fp)
 40053ac:	1889883a 	add	r4,r3,r2
 40053b0:	e0bff983 	ldbu	r2,-26(fp)
 40053b4:	10800c04 	addi	r2,r2,48
 40053b8:	10c03fcc 	andi	r3,r2,255
 40053bc:	e0bffe03 	ldbu	r2,-8(fp)
 40053c0:	e17fff03 	ldbu	r5,-4(fp)
 40053c4:	2940004c 	andi	r5,r5,1
 40053c8:	d9400015 	stw	r5,0(sp)
 40053cc:	e17ffb17 	ldw	r5,-20(fp)
 40053d0:	180d883a 	mov	r6,r3
 40053d4:	100f883a 	mov	r7,r2
 40053d8:	4004e2c0 	call	4004e2c <LCD_ShowChar>
//[0]:0,非叠加显示;1,叠加显示.
void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)
{
    u8 t,temp;
    u8 enshow=0;
    for(t=0;t<len;t++) {
 40053dc:	e0bff903 	ldbu	r2,-28(fp)
 40053e0:	10800044 	addi	r2,r2,1
 40053e4:	e0bff905 	stb	r2,-28(fp)
 40053e8:	e0fff903 	ldbu	r3,-28(fp)
 40053ec:	e0bffd03 	ldbu	r2,-12(fp)
 40053f0:	18bfa536 	bltu	r3,r2,4005288 <LCD_ShowxNum+0x40>
                 continue;
            }else enshow=1;
       }
       LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01);
    }
}
 40053f4:	e037883a 	mov	sp,fp
 40053f8:	dfc00117 	ldw	ra,4(sp)
 40053fc:	df000017 	ldw	fp,0(sp)
 4005400:	dec00204 	addi	sp,sp,8
 4005404:	f800283a 	ret

04005408 <LCD_ShowString>:
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 mode,u8 *p)
{
 4005408:	defff604 	addi	sp,sp,-40
 400540c:	dfc00915 	stw	ra,36(sp)
 4005410:	df000815 	stw	fp,32(sp)
 4005414:	df000804 	addi	fp,sp,32
 4005418:	e13ffa15 	stw	r4,-24(fp)
 400541c:	e17ffb15 	stw	r5,-20(fp)
 4005420:	e1bffc15 	stw	r6,-16(fp)
 4005424:	e1fffd15 	stw	r7,-12(fp)
 4005428:	e0c00217 	ldw	r3,8(fp)
 400542c:	e0800317 	ldw	r2,12(fp)
 4005430:	e0fffe05 	stb	r3,-8(fp)
 4005434:	e0bfff05 	stb	r2,-4(fp)
    u8 x0=x;
 4005438:	e0bffa17 	ldw	r2,-24(fp)
 400543c:	e0bff905 	stb	r2,-28(fp)
    width+=x;
 4005440:	e0fffc17 	ldw	r3,-16(fp)
 4005444:	e0bffa17 	ldw	r2,-24(fp)
 4005448:	1885883a 	add	r2,r3,r2
 400544c:	e0bffc15 	stw	r2,-16(fp)
    height+=y;
 4005450:	e0fffd17 	ldw	r3,-12(fp)
 4005454:	e0bffb17 	ldw	r2,-20(fp)
 4005458:	1885883a 	add	r2,r3,r2
 400545c:	e0bffd15 	stw	r2,-12(fp)
    while((*p<='~')&&(*p>=' ')) {	//判断是不是非法字符!
 4005460:	00002006 	br	40054e4 <LCD_ShowString+0xdc>
        if(x>=width) {
 4005464:	e0fffa17 	ldw	r3,-24(fp)
 4005468:	e0bffc17 	ldw	r2,-16(fp)
 400546c:	18800636 	bltu	r3,r2,4005488 <LCD_ShowString+0x80>
            x=x0;
 4005470:	e0bff903 	ldbu	r2,-28(fp)
 4005474:	e0bffa15 	stw	r2,-24(fp)
            y+=size;
 4005478:	e0bffe03 	ldbu	r2,-8(fp)
 400547c:	e0fffb17 	ldw	r3,-20(fp)
 4005480:	1885883a 	add	r2,r3,r2
 4005484:	e0bffb15 	stw	r2,-20(fp)
        }
        if(y>=height)
 4005488:	e0fffb17 	ldw	r3,-20(fp)
 400548c:	e0bffd17 	ldw	r2,-12(fp)
 4005490:	18801f2e 	bgeu	r3,r2,4005510 <LCD_ShowString+0x108>
            break;//退出
        LCD_ShowChar(x,y,*p,size,mode);
 4005494:	e0800417 	ldw	r2,16(fp)
 4005498:	10800003 	ldbu	r2,0(r2)
 400549c:	10c03fcc 	andi	r3,r2,255
 40054a0:	e0bffe03 	ldbu	r2,-8(fp)
 40054a4:	e13fff03 	ldbu	r4,-4(fp)
 40054a8:	d9000015 	stw	r4,0(sp)
 40054ac:	e13ffa17 	ldw	r4,-24(fp)
 40054b0:	e17ffb17 	ldw	r5,-20(fp)
 40054b4:	180d883a 	mov	r6,r3
 40054b8:	100f883a 	mov	r7,r2
 40054bc:	4004e2c0 	call	4004e2c <LCD_ShowChar>
        x+=size/2;
 40054c0:	e0bffe03 	ldbu	r2,-8(fp)
 40054c4:	1004d07a 	srli	r2,r2,1
 40054c8:	10803fcc 	andi	r2,r2,255
 40054cc:	e0fffa17 	ldw	r3,-24(fp)
 40054d0:	1885883a 	add	r2,r3,r2
 40054d4:	e0bffa15 	stw	r2,-24(fp)
        p++;
 40054d8:	e0800417 	ldw	r2,16(fp)
 40054dc:	10800044 	addi	r2,r2,1
 40054e0:	e0800415 	stw	r2,16(fp)
void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 mode,u8 *p)
{
    u8 x0=x;
    width+=x;
    height+=y;
    while((*p<='~')&&(*p>=' ')) {	//判断是不是非法字符!
 40054e4:	e0800417 	ldw	r2,16(fp)
 40054e8:	10800003 	ldbu	r2,0(r2)
 40054ec:	10803fcc 	andi	r2,r2,255
 40054f0:	10801fe8 	cmpgeui	r2,r2,127
 40054f4:	1000071e 	bne	r2,zero,4005514 <LCD_ShowString+0x10c>
 40054f8:	e0800417 	ldw	r2,16(fp)
 40054fc:	10800003 	ldbu	r2,0(r2)
 4005500:	10803fcc 	andi	r2,r2,255
 4005504:	10800828 	cmpgeui	r2,r2,32
 4005508:	103fd61e 	bne	r2,zero,4005464 <LCD_ShowString+0x5c>
 400550c:	00000106 	br	4005514 <LCD_ShowString+0x10c>
        if(x>=width) {
            x=x0;
            y+=size;
        }
        if(y>=height)
            break;//退出
 4005510:	0001883a 	nop
        LCD_ShowChar(x,y,*p,size,mode);
        x+=size/2;
        p++;
    }
}
 4005514:	e037883a 	mov	sp,fp
 4005518:	dfc00117 	ldw	ra,4(sp)
 400551c:	df000017 	ldw	fp,0(sp)
 4005520:	dec00204 	addi	sp,sp,8
 4005524:	f800283a 	ret

04005528 <LCD_DisplayPic>:

//x,y:起点坐标
//size:图片大小
//LCD显示图片
void LCD_DisplayPic(u16 x,u16 y,u32 size,const u8 *pic)
{
 4005528:	defff904 	addi	sp,sp,-28
 400552c:	dfc00615 	stw	ra,24(sp)
 4005530:	df000515 	stw	fp,20(sp)
 4005534:	df000504 	addi	fp,sp,20
 4005538:	e13ffc15 	stw	r4,-16(fp)
 400553c:	e17ffd15 	stw	r5,-12(fp)
 4005540:	e1bffe15 	stw	r6,-8(fp)
 4005544:	e1ffff15 	stw	r7,-4(fp)
    u32 i;
    LCD_SetCursor(x, y);
 4005548:	e13ffc17 	ldw	r4,-16(fp)
 400554c:	e17ffd17 	ldw	r5,-12(fp)
 4005550:	40007140 	call	4000714 <LCD_SetCursor>
    LCD_WriteRAM_Prepare();     //开始写入GRAM
 4005554:	40003e00 	call	40003e0 <LCD_WriteRAM_Prepare>
    for(i=0; i < size; i++)
 4005558:	e03ffb15 	stw	zero,-20(fp)
 400555c:	00001406 	br	40055b0 <LCD_DisplayPic+0x88>
       LCD_WR_DATA(pic[i*2]<<8 | pic[i*2+1]);
 4005560:	e0bffb17 	ldw	r2,-20(fp)
 4005564:	1085883a 	add	r2,r2,r2
 4005568:	e0ffff17 	ldw	r3,-4(fp)
 400556c:	1885883a 	add	r2,r3,r2
 4005570:	10800003 	ldbu	r2,0(r2)
 4005574:	10803fcc 	andi	r2,r2,255
 4005578:	1006923a 	slli	r3,r2,8
 400557c:	e0bffb17 	ldw	r2,-20(fp)
 4005580:	1085883a 	add	r2,r2,r2
 4005584:	10800044 	addi	r2,r2,1
 4005588:	e13fff17 	ldw	r4,-4(fp)
 400558c:	2085883a 	add	r2,r4,r2
 4005590:	10800003 	ldbu	r2,0(r2)
 4005594:	10803fcc 	andi	r2,r2,255
 4005598:	1884b03a 	or	r2,r3,r2
 400559c:	1009883a 	mov	r4,r2
 40055a0:	40002a00 	call	40002a0 <LCD_WR_DATA>
void LCD_DisplayPic(u16 x,u16 y,u32 size,const u8 *pic)
{
    u32 i;
    LCD_SetCursor(x, y);
    LCD_WriteRAM_Prepare();     //开始写入GRAM
    for(i=0; i < size; i++)
 40055a4:	e0bffb17 	ldw	r2,-20(fp)
 40055a8:	10800044 	addi	r2,r2,1
 40055ac:	e0bffb15 	stw	r2,-20(fp)
 40055b0:	e0fffb17 	ldw	r3,-20(fp)
 40055b4:	e0bffe17 	ldw	r2,-8(fp)
 40055b8:	18bfe936 	bltu	r3,r2,4005560 <LCD_DisplayPic+0x38>
       LCD_WR_DATA(pic[i*2]<<8 | pic[i*2+1]);
}
 40055bc:	e037883a 	mov	sp,fp
 40055c0:	dfc00117 	ldw	ra,4(sp)
 40055c4:	df000017 	ldw	fp,0(sp)
 40055c8:	dec00204 	addi	sp,sp,8
 40055cc:	f800283a 	ret

040055d0 <main>:
#include <unistd.h>
#include "./drive/mculcd.h"
#include "pic01.h"          //显示的图片

int main()
{
 40055d0:	defffb04 	addi	sp,sp,-20
 40055d4:	dfc00415 	stw	ra,16(sp)
 40055d8:	df000315 	stw	fp,12(sp)
 40055dc:	df000304 	addi	fp,sp,12
	printf("Hello from Nios II!\n");
 40055e0:	01010374 	movhi	r4,1037
 40055e4:	21089c04 	addi	r4,r4,8816
 40055e8:	40067000 	call	4006700 <puts>
	MCULCD_Init();
 40055ec:	40019fc0 	call	40019fc <MCULCD_Init>
    POINT_COLOR=MLCD_RED;
 40055f0:	00810374 	movhi	r2,1037
 40055f4:	10903b04 	addi	r2,r2,16620
 40055f8:	00fe0014 	movui	r3,63488
 40055fc:	10c00015 	stw	r3,0(r2)

    LCD_DisplayPic(0,0,lcddev.width * lcddev.height,gImage_pic01);
 4005600:	00810374 	movhi	r2,1037
 4005604:	10906504 	addi	r2,r2,16788
 4005608:	10c00017 	ldw	r3,0(r2)
 400560c:	00810374 	movhi	r2,1037
 4005610:	10906504 	addi	r2,r2,16788
 4005614:	10800117 	ldw	r2,4(r2)
 4005618:	1885383a 	mul	r2,r3,r2
 400561c:	0009883a 	mov	r4,zero
 4005620:	000b883a 	mov	r5,zero
 4005624:	100d883a 	mov	r6,r2
 4005628:	01c10074 	movhi	r7,1025
 400562c:	39da9c04 	addi	r7,r7,27248
 4005630:	40055280 	call	4005528 <LCD_DisplayPic>

    LCD_ShowString(30,50,300,30,24,1,"Welcome to PIONEER FPGA");
 4005634:	00800604 	movi	r2,24
 4005638:	d8800015 	stw	r2,0(sp)
 400563c:	00800044 	movi	r2,1
 4005640:	d8800115 	stw	r2,4(sp)
 4005644:	00810374 	movhi	r2,1037
 4005648:	1088a104 	addi	r2,r2,8836
 400564c:	d8800215 	stw	r2,8(sp)
 4005650:	01000784 	movi	r4,30
 4005654:	01400c84 	movi	r5,50
 4005658:	01804b04 	movi	r6,300
 400565c:	01c00784 	movi	r7,30
 4005660:	40054080 	call	4005408 <LCD_ShowString>
    LCD_ShowString(30,80,400,30,24,1,"This is a TFT LCD test application");
 4005664:	00800604 	movi	r2,24
 4005668:	d8800015 	stw	r2,0(sp)
 400566c:	00800044 	movi	r2,1
 4005670:	d8800115 	stw	r2,4(sp)
 4005674:	00810374 	movhi	r2,1037
 4005678:	1088a704 	addi	r2,r2,8860
 400567c:	d8800215 	stw	r2,8(sp)
 4005680:	01000784 	movi	r4,30
 4005684:	01401404 	movi	r5,80
 4005688:	01806404 	movi	r6,400
 400568c:	01c00784 	movi	r7,30
 4005690:	40054080 	call	4005408 <LCD_ShowString>
    LCD_ShowString(30,110,200,30,24,1,"ATOM@ALIENTEK");
 4005694:	00800604 	movi	r2,24
 4005698:	d8800015 	stw	r2,0(sp)
 400569c:	00800044 	movi	r2,1
 40056a0:	d8800115 	stw	r2,4(sp)
 40056a4:	00810374 	movhi	r2,1037
 40056a8:	1088b004 	addi	r2,r2,8896
 40056ac:	d8800215 	stw	r2,8(sp)
 40056b0:	01000784 	movi	r4,30
 40056b4:	01401b84 	movi	r5,110
 40056b8:	01803204 	movi	r6,200
 40056bc:	01c00784 	movi	r7,30
 40056c0:	40054080 	call	4005408 <LCD_ShowString>
    LCD_ShowString(30,140,200,30,24,1,"2018/10/10");
 40056c4:	00800604 	movi	r2,24
 40056c8:	d8800015 	stw	r2,0(sp)
 40056cc:	00800044 	movi	r2,1
 40056d0:	d8800115 	stw	r2,4(sp)
 40056d4:	00810374 	movhi	r2,1037
 40056d8:	1088b404 	addi	r2,r2,8912
 40056dc:	d8800215 	stw	r2,8(sp)
 40056e0:	01000784 	movi	r4,30
 40056e4:	01402304 	movi	r5,140
 40056e8:	01803204 	movi	r6,200
 40056ec:	01c00784 	movi	r7,30
 40056f0:	40054080 	call	4005408 <LCD_ShowString>

    return 0;
 40056f4:	0005883a 	mov	r2,zero
}
 40056f8:	e037883a 	mov	sp,fp
 40056fc:	dfc00117 	ldw	ra,4(sp)
 4005700:	df000017 	ldw	fp,0(sp)
 4005704:	dec00204 	addi	sp,sp,8
 4005708:	f800283a 	ret

0400570c <__fixunsdfsi>:
 400570c:	defffd04 	addi	sp,sp,-12
 4005710:	000d883a 	mov	r6,zero
 4005714:	01d07834 	movhi	r7,16864
 4005718:	dc400115 	stw	r17,4(sp)
 400571c:	dc000015 	stw	r16,0(sp)
 4005720:	dfc00215 	stw	ra,8(sp)
 4005724:	2023883a 	mov	r17,r4
 4005728:	2821883a 	mov	r16,r5
 400572c:	4005e7c0 	call	4005e7c <__gedf2>
 4005730:	1000080e 	bge	r2,zero,4005754 <__fixunsdfsi+0x48>
 4005734:	8809883a 	mov	r4,r17
 4005738:	800b883a 	mov	r5,r16
 400573c:	4005fb40 	call	4005fb4 <__fixdfsi>
 4005740:	dfc00217 	ldw	ra,8(sp)
 4005744:	dc400117 	ldw	r17,4(sp)
 4005748:	dc000017 	ldw	r16,0(sp)
 400574c:	dec00304 	addi	sp,sp,12
 4005750:	f800283a 	ret
 4005754:	000d883a 	mov	r6,zero
 4005758:	01d07834 	movhi	r7,16864
 400575c:	8809883a 	mov	r4,r17
 4005760:	800b883a 	mov	r5,r16
 4005764:	4005b380 	call	4005b38 <__subdf3>
 4005768:	180b883a 	mov	r5,r3
 400576c:	1009883a 	mov	r4,r2
 4005770:	4005fb40 	call	4005fb4 <__fixdfsi>
 4005774:	00e00034 	movhi	r3,32768
 4005778:	10c5883a 	add	r2,r2,r3
 400577c:	dfc00217 	ldw	ra,8(sp)
 4005780:	dc400117 	ldw	r17,4(sp)
 4005784:	dc000017 	ldw	r16,0(sp)
 4005788:	dec00304 	addi	sp,sp,12
 400578c:	f800283a 	ret

04005790 <_fpadd_parts>:
 4005790:	2005883a 	mov	r2,r4
 4005794:	21000017 	ldw	r4,0(r4)
 4005798:	01c00044 	movi	r7,1
 400579c:	3900622e 	bgeu	r7,r4,4005928 <_fpadd_parts+0x198>
 40057a0:	28c00017 	ldw	r3,0(r5)
 40057a4:	38c05f2e 	bgeu	r7,r3,4005924 <_fpadd_parts+0x194>
 40057a8:	01c00104 	movi	r7,4
 40057ac:	21c0c626 	beq	r4,r7,4005ac8 <_fpadd_parts+0x338>
 40057b0:	19c05c26 	beq	r3,r7,4005924 <_fpadd_parts+0x194>
 40057b4:	01c00084 	movi	r7,2
 40057b8:	19c06b26 	beq	r3,r7,4005968 <_fpadd_parts+0x1d8>
 40057bc:	21c05926 	beq	r4,r7,4005924 <_fpadd_parts+0x194>
 40057c0:	11c00217 	ldw	r7,8(r2)
 40057c4:	2ac00217 	ldw	r11,8(r5)
 40057c8:	13000317 	ldw	r12,12(r2)
 40057cc:	13400417 	ldw	r13,16(r2)
 40057d0:	3ac9c83a 	sub	r4,r7,r11
 40057d4:	2a000317 	ldw	r8,12(r5)
 40057d8:	2a400417 	ldw	r9,16(r5)
 40057dc:	2015883a 	mov	r10,r4
 40057e0:	20007516 	blt	r4,zero,40059b8 <_fpadd_parts+0x228>
 40057e4:	00c00fc4 	movi	r3,63
 40057e8:	1a805016 	blt	r3,r10,400592c <_fpadd_parts+0x19c>
 40057ec:	0100870e 	bge	zero,r4,4005a0c <_fpadd_parts+0x27c>
 40057f0:	50fff804 	addi	r3,r10,-32
 40057f4:	18009916 	blt	r3,zero,4005a5c <_fpadd_parts+0x2cc>
 40057f8:	48d6d83a 	srl	r11,r9,r3
 40057fc:	001d883a 	mov	r14,zero
 4005800:	18009e16 	blt	r3,zero,4005a7c <_fpadd_parts+0x2ec>
 4005804:	01000044 	movi	r4,1
 4005808:	20c6983a 	sll	r3,r4,r3
 400580c:	0015883a 	mov	r10,zero
 4005810:	513fffc4 	addi	r4,r10,-1
 4005814:	2295403a 	cmpgeu	r10,r4,r10
 4005818:	1a87c83a 	sub	r3,r3,r10
 400581c:	1a52703a 	and	r9,r3,r9
 4005820:	2210703a 	and	r8,r4,r8
 4005824:	4250b03a 	or	r8,r8,r9
 4005828:	4010c03a 	cmpne	r8,r8,zero
 400582c:	42d0b03a 	or	r8,r8,r11
 4005830:	7013883a 	mov	r9,r14
 4005834:	11000117 	ldw	r4,4(r2)
 4005838:	28800117 	ldw	r2,4(r5)
 400583c:	20804126 	beq	r4,r2,4005944 <_fpadd_parts+0x1b4>
 4005840:	20006326 	beq	r4,zero,40059d0 <_fpadd_parts+0x240>
 4005844:	4305c83a 	sub	r2,r8,r12
 4005848:	4091803a 	cmpltu	r8,r8,r2
 400584c:	4b47c83a 	sub	r3,r9,r13
 4005850:	1a07c83a 	sub	r3,r3,r8
 4005854:	18006316 	blt	r3,zero,40059e4 <_fpadd_parts+0x254>
 4005858:	30000115 	stw	zero,4(r6)
 400585c:	31c00215 	stw	r7,8(r6)
 4005860:	30800315 	stw	r2,12(r6)
 4005864:	30c00415 	stw	r3,16(r6)
 4005868:	11ffffc4 	addi	r7,r2,-1
 400586c:	388b403a 	cmpgeu	r5,r7,r2
 4005870:	194bc83a 	sub	r5,r3,r5
 4005874:	01040034 	movhi	r4,4096
 4005878:	213fffc4 	addi	r4,r4,-1
 400587c:	21401736 	bltu	r4,r5,40058dc <_fpadd_parts+0x14c>
 4005880:	29008226 	beq	r5,r4,4005a8c <_fpadd_parts+0x2fc>
 4005884:	31400217 	ldw	r5,8(r6)
 4005888:	02840034 	movhi	r10,4096
 400588c:	52bfffc4 	addi	r10,r10,-1
 4005890:	033fff84 	movi	r12,-2
 4005894:	297fffc4 	addi	r5,r5,-1
 4005898:	00000106 	br	40058a0 <_fpadd_parts+0x110>
 400589c:	3a804a26 	beq	r7,r10,40059c8 <_fpadd_parts+0x238>
 40058a0:	1089883a 	add	r4,r2,r2
 40058a4:	2091803a 	cmpltu	r8,r4,r2
 40058a8:	18c7883a 	add	r3,r3,r3
 40058ac:	227fffc4 	addi	r9,r4,-1
 40058b0:	40d1883a 	add	r8,r8,r3
 40058b4:	490f403a 	cmpgeu	r7,r9,r4
 40058b8:	41cfc83a 	sub	r7,r8,r7
 40058bc:	2817883a 	mov	r11,r5
 40058c0:	2005883a 	mov	r2,r4
 40058c4:	4007883a 	mov	r3,r8
 40058c8:	297fffc4 	addi	r5,r5,-1
 40058cc:	51fff32e 	bgeu	r10,r7,400589c <_fpadd_parts+0x10c>
 40058d0:	31000315 	stw	r4,12(r6)
 40058d4:	32000415 	stw	r8,16(r6)
 40058d8:	32c00215 	stw	r11,8(r6)
 40058dc:	010000c4 	movi	r4,3
 40058e0:	31000015 	stw	r4,0(r6)
 40058e4:	01080034 	movhi	r4,8192
 40058e8:	213fffc4 	addi	r4,r4,-1
 40058ec:	20c00b2e 	bgeu	r4,r3,400591c <_fpadd_parts+0x18c>
 40058f0:	180e97fa 	slli	r7,r3,31
 40058f4:	1008d07a 	srli	r4,r2,1
 40058f8:	31400217 	ldw	r5,8(r6)
 40058fc:	1806d07a 	srli	r3,r3,1
 4005900:	1080004c 	andi	r2,r2,1
 4005904:	3908b03a 	or	r4,r7,r4
 4005908:	1108b03a 	or	r4,r2,r4
 400590c:	29400044 	addi	r5,r5,1
 4005910:	31000315 	stw	r4,12(r6)
 4005914:	30c00415 	stw	r3,16(r6)
 4005918:	31400215 	stw	r5,8(r6)
 400591c:	3005883a 	mov	r2,r6
 4005920:	f800283a 	ret
 4005924:	2805883a 	mov	r2,r5
 4005928:	f800283a 	ret
 400592c:	59c01e0e 	bge	r11,r7,40059a8 <_fpadd_parts+0x218>
 4005930:	11000117 	ldw	r4,4(r2)
 4005934:	28800117 	ldw	r2,4(r5)
 4005938:	0011883a 	mov	r8,zero
 400593c:	0013883a 	mov	r9,zero
 4005940:	20bfbf1e 	bne	r4,r2,4005840 <_fpadd_parts+0xb0>
 4005944:	4305883a 	add	r2,r8,r12
 4005948:	1207803a 	cmpltu	r3,r2,r8
 400594c:	4b53883a 	add	r9,r9,r13
 4005950:	1a47883a 	add	r3,r3,r9
 4005954:	31000115 	stw	r4,4(r6)
 4005958:	31c00215 	stw	r7,8(r6)
 400595c:	30800315 	stw	r2,12(r6)
 4005960:	30c00415 	stw	r3,16(r6)
 4005964:	003fdd06 	br	40058dc <_fpadd_parts+0x14c>
 4005968:	20ffef1e 	bne	r4,r3,4005928 <_fpadd_parts+0x198>
 400596c:	31000015 	stw	r4,0(r6)
 4005970:	10c00117 	ldw	r3,4(r2)
 4005974:	30c00115 	stw	r3,4(r6)
 4005978:	10c00217 	ldw	r3,8(r2)
 400597c:	11000117 	ldw	r4,4(r2)
 4005980:	29400117 	ldw	r5,4(r5)
 4005984:	30c00215 	stw	r3,8(r6)
 4005988:	10c00317 	ldw	r3,12(r2)
 400598c:	2908703a 	and	r4,r5,r4
 4005990:	30c00315 	stw	r3,12(r6)
 4005994:	10c00417 	ldw	r3,16(r2)
 4005998:	31000115 	stw	r4,4(r6)
 400599c:	3005883a 	mov	r2,r6
 40059a0:	30c00415 	stw	r3,16(r6)
 40059a4:	f800283a 	ret
 40059a8:	580f883a 	mov	r7,r11
 40059ac:	0019883a 	mov	r12,zero
 40059b0:	001b883a 	mov	r13,zero
 40059b4:	003f9f06 	br	4005834 <_fpadd_parts+0xa4>
 40059b8:	0115c83a 	sub	r10,zero,r4
 40059bc:	00c00fc4 	movi	r3,63
 40059c0:	1abfda16 	blt	r3,r10,400592c <_fpadd_parts+0x19c>
 40059c4:	003f8906 	br	40057ec <_fpadd_parts+0x5c>
 40059c8:	627fb52e 	bgeu	r12,r9,40058a0 <_fpadd_parts+0x110>
 40059cc:	003fc006 	br	40058d0 <_fpadd_parts+0x140>
 40059d0:	6205c83a 	sub	r2,r12,r8
 40059d4:	6099803a 	cmpltu	r12,r12,r2
 40059d8:	6a47c83a 	sub	r3,r13,r9
 40059dc:	1b07c83a 	sub	r3,r3,r12
 40059e0:	183f9d0e 	bge	r3,zero,4005858 <_fpadd_parts+0xc8>
 40059e4:	0085c83a 	sub	r2,zero,r2
 40059e8:	1008c03a 	cmpne	r4,r2,zero
 40059ec:	00c7c83a 	sub	r3,zero,r3
 40059f0:	1907c83a 	sub	r3,r3,r4
 40059f4:	01000044 	movi	r4,1
 40059f8:	31000115 	stw	r4,4(r6)
 40059fc:	31c00215 	stw	r7,8(r6)
 4005a00:	30800315 	stw	r2,12(r6)
 4005a04:	30c00415 	stw	r3,16(r6)
 4005a08:	003f9706 	br	4005868 <_fpadd_parts+0xd8>
 4005a0c:	203f8926 	beq	r4,zero,4005834 <_fpadd_parts+0xa4>
 4005a10:	50fff804 	addi	r3,r10,-32
 4005a14:	3a8f883a 	add	r7,r7,r10
 4005a18:	18002316 	blt	r3,zero,4005aa8 <_fpadd_parts+0x318>
 4005a1c:	68d6d83a 	srl	r11,r13,r3
 4005a20:	001d883a 	mov	r14,zero
 4005a24:	18001c16 	blt	r3,zero,4005a98 <_fpadd_parts+0x308>
 4005a28:	01000044 	movi	r4,1
 4005a2c:	20c6983a 	sll	r3,r4,r3
 4005a30:	0015883a 	mov	r10,zero
 4005a34:	513fffc4 	addi	r4,r10,-1
 4005a38:	2295403a 	cmpgeu	r10,r4,r10
 4005a3c:	1a87c83a 	sub	r3,r3,r10
 4005a40:	1b5a703a 	and	r13,r3,r13
 4005a44:	2318703a 	and	r12,r4,r12
 4005a48:	6358b03a 	or	r12,r12,r13
 4005a4c:	6018c03a 	cmpne	r12,r12,zero
 4005a50:	62d8b03a 	or	r12,r12,r11
 4005a54:	701b883a 	mov	r13,r14
 4005a58:	003f7606 	br	4005834 <_fpadd_parts+0xa4>
 4005a5c:	4808907a 	slli	r4,r9,1
 4005a60:	02c007c4 	movi	r11,31
 4005a64:	5a97c83a 	sub	r11,r11,r10
 4005a68:	22c8983a 	sll	r4,r4,r11
 4005a6c:	4296d83a 	srl	r11,r8,r10
 4005a70:	4a9cd83a 	srl	r14,r9,r10
 4005a74:	22d6b03a 	or	r11,r4,r11
 4005a78:	003f6106 	br	4005800 <_fpadd_parts+0x70>
 4005a7c:	00c00044 	movi	r3,1
 4005a80:	1a94983a 	sll	r10,r3,r10
 4005a84:	0007883a 	mov	r3,zero
 4005a88:	003f6106 	br	4005810 <_fpadd_parts+0x80>
 4005a8c:	013fff84 	movi	r4,-2
 4005a90:	21ff7c2e 	bgeu	r4,r7,4005884 <_fpadd_parts+0xf4>
 4005a94:	003f9106 	br	40058dc <_fpadd_parts+0x14c>
 4005a98:	00c00044 	movi	r3,1
 4005a9c:	1a94983a 	sll	r10,r3,r10
 4005aa0:	0007883a 	mov	r3,zero
 4005aa4:	003fe306 	br	4005a34 <_fpadd_parts+0x2a4>
 4005aa8:	6816907a 	slli	r11,r13,1
 4005aac:	010007c4 	movi	r4,31
 4005ab0:	2289c83a 	sub	r4,r4,r10
 4005ab4:	5908983a 	sll	r4,r11,r4
 4005ab8:	6296d83a 	srl	r11,r12,r10
 4005abc:	6a9cd83a 	srl	r14,r13,r10
 4005ac0:	22d6b03a 	or	r11,r4,r11
 4005ac4:	003fd706 	br	4005a24 <_fpadd_parts+0x294>
 4005ac8:	193f971e 	bne	r3,r4,4005928 <_fpadd_parts+0x198>
 4005acc:	11000117 	ldw	r4,4(r2)
 4005ad0:	28c00117 	ldw	r3,4(r5)
 4005ad4:	20ff9426 	beq	r4,r3,4005928 <_fpadd_parts+0x198>
 4005ad8:	00810374 	movhi	r2,1037
 4005adc:	1088b704 	addi	r2,r2,8924
 4005ae0:	f800283a 	ret

04005ae4 <__adddf3>:
 4005ae4:	deffec04 	addi	sp,sp,-80
 4005ae8:	d9001115 	stw	r4,68(sp)
 4005aec:	d9401215 	stw	r5,72(sp)
 4005af0:	d9001104 	addi	r4,sp,68
 4005af4:	d9400a04 	addi	r5,sp,40
 4005af8:	dfc01315 	stw	ra,76(sp)
 4005afc:	d9c01015 	stw	r7,64(sp)
 4005b00:	d9800f15 	stw	r6,60(sp)
 4005b04:	40063b80 	call	40063b8 <__unpack_d>
 4005b08:	d9000f04 	addi	r4,sp,60
 4005b0c:	d9400504 	addi	r5,sp,20
 4005b10:	40063b80 	call	40063b8 <__unpack_d>
 4005b14:	d9000a04 	addi	r4,sp,40
 4005b18:	d9400504 	addi	r5,sp,20
 4005b1c:	d80d883a 	mov	r6,sp
 4005b20:	40057900 	call	4005790 <_fpadd_parts>
 4005b24:	1009883a 	mov	r4,r2
 4005b28:	40061940 	call	4006194 <__pack_d>
 4005b2c:	dfc01317 	ldw	ra,76(sp)
 4005b30:	dec01404 	addi	sp,sp,80
 4005b34:	f800283a 	ret

04005b38 <__subdf3>:
 4005b38:	deffec04 	addi	sp,sp,-80
 4005b3c:	d9001115 	stw	r4,68(sp)
 4005b40:	d9401215 	stw	r5,72(sp)
 4005b44:	d9001104 	addi	r4,sp,68
 4005b48:	d9400a04 	addi	r5,sp,40
 4005b4c:	dfc01315 	stw	ra,76(sp)
 4005b50:	d9c01015 	stw	r7,64(sp)
 4005b54:	d9800f15 	stw	r6,60(sp)
 4005b58:	40063b80 	call	40063b8 <__unpack_d>
 4005b5c:	d9000f04 	addi	r4,sp,60
 4005b60:	d9400504 	addi	r5,sp,20
 4005b64:	40063b80 	call	40063b8 <__unpack_d>
 4005b68:	d8800617 	ldw	r2,24(sp)
 4005b6c:	d9000a04 	addi	r4,sp,40
 4005b70:	d9400504 	addi	r5,sp,20
 4005b74:	d80d883a 	mov	r6,sp
 4005b78:	1080005c 	xori	r2,r2,1
 4005b7c:	d8800615 	stw	r2,24(sp)
 4005b80:	40057900 	call	4005790 <_fpadd_parts>
 4005b84:	1009883a 	mov	r4,r2
 4005b88:	40061940 	call	4006194 <__pack_d>
 4005b8c:	dfc01317 	ldw	ra,76(sp)
 4005b90:	dec01404 	addi	sp,sp,80
 4005b94:	f800283a 	ret

04005b98 <__muldf3>:
 4005b98:	deffe404 	addi	sp,sp,-112
 4005b9c:	d9001115 	stw	r4,68(sp)
 4005ba0:	d9401215 	stw	r5,72(sp)
 4005ba4:	d9001104 	addi	r4,sp,68
 4005ba8:	d9400a04 	addi	r5,sp,40
 4005bac:	dfc01b15 	stw	ra,108(sp)
 4005bb0:	d9800f15 	stw	r6,60(sp)
 4005bb4:	d9c01015 	stw	r7,64(sp)
 4005bb8:	ddc01a15 	stw	r23,104(sp)
 4005bbc:	dd801915 	stw	r22,100(sp)
 4005bc0:	dd401815 	stw	r21,96(sp)
 4005bc4:	dd001715 	stw	r20,92(sp)
 4005bc8:	dcc01615 	stw	r19,88(sp)
 4005bcc:	dc801515 	stw	r18,84(sp)
 4005bd0:	dc401415 	stw	r17,80(sp)
 4005bd4:	dc001315 	stw	r16,76(sp)
 4005bd8:	40063b80 	call	40063b8 <__unpack_d>
 4005bdc:	d9000f04 	addi	r4,sp,60
 4005be0:	d9400504 	addi	r5,sp,20
 4005be4:	40063b80 	call	40063b8 <__unpack_d>
 4005be8:	d8c00a17 	ldw	r3,40(sp)
 4005bec:	00800044 	movi	r2,1
 4005bf0:	10c01136 	bltu	r2,r3,4005c38 <__muldf3+0xa0>
 4005bf4:	d8c00b17 	ldw	r3,44(sp)
 4005bf8:	d8800617 	ldw	r2,24(sp)
 4005bfc:	d9000a04 	addi	r4,sp,40
 4005c00:	1884c03a 	cmpne	r2,r3,r2
 4005c04:	d8800b15 	stw	r2,44(sp)
 4005c08:	40061940 	call	4006194 <__pack_d>
 4005c0c:	dfc01b17 	ldw	ra,108(sp)
 4005c10:	ddc01a17 	ldw	r23,104(sp)
 4005c14:	dd801917 	ldw	r22,100(sp)
 4005c18:	dd401817 	ldw	r21,96(sp)
 4005c1c:	dd001717 	ldw	r20,92(sp)
 4005c20:	dcc01617 	ldw	r19,88(sp)
 4005c24:	dc801517 	ldw	r18,84(sp)
 4005c28:	dc401417 	ldw	r17,80(sp)
 4005c2c:	dc001317 	ldw	r16,76(sp)
 4005c30:	dec01c04 	addi	sp,sp,112
 4005c34:	f800283a 	ret
 4005c38:	d9000517 	ldw	r4,20(sp)
 4005c3c:	11000636 	bltu	r2,r4,4005c58 <__muldf3+0xc0>
 4005c40:	d8800617 	ldw	r2,24(sp)
 4005c44:	d8c00b17 	ldw	r3,44(sp)
 4005c48:	d9000504 	addi	r4,sp,20
 4005c4c:	1884c03a 	cmpne	r2,r3,r2
 4005c50:	d8800615 	stw	r2,24(sp)
 4005c54:	003fec06 	br	4005c08 <__muldf3+0x70>
 4005c58:	00800104 	movi	r2,4
 4005c5c:	1880051e 	bne	r3,r2,4005c74 <__muldf3+0xdc>
 4005c60:	00800084 	movi	r2,2
 4005c64:	20bfe31e 	bne	r4,r2,4005bf4 <__muldf3+0x5c>
 4005c68:	01010374 	movhi	r4,1037
 4005c6c:	2108b704 	addi	r4,r4,8924
 4005c70:	003fe506 	br	4005c08 <__muldf3+0x70>
 4005c74:	2080031e 	bne	r4,r2,4005c84 <__muldf3+0xec>
 4005c78:	00800084 	movi	r2,2
 4005c7c:	18bffa26 	beq	r3,r2,4005c68 <__muldf3+0xd0>
 4005c80:	003fef06 	br	4005c40 <__muldf3+0xa8>
 4005c84:	00800084 	movi	r2,2
 4005c88:	18bfda26 	beq	r3,r2,4005bf4 <__muldf3+0x5c>
 4005c8c:	20bfec26 	beq	r4,r2,4005c40 <__muldf3+0xa8>
 4005c90:	dc000d17 	ldw	r16,52(sp)
 4005c94:	dd000817 	ldw	r20,32(sp)
 4005c98:	dc800917 	ldw	r18,36(sp)
 4005c9c:	8009883a 	mov	r4,r16
 4005ca0:	000b883a 	mov	r5,zero
 4005ca4:	a00d883a 	mov	r6,r20
 4005ca8:	000f883a 	mov	r7,zero
 4005cac:	40060880 	call	4006088 <__muldi3>
 4005cb0:	dc400e17 	ldw	r17,56(sp)
 4005cb4:	9009883a 	mov	r4,r18
 4005cb8:	800d883a 	mov	r6,r16
 4005cbc:	000b883a 	mov	r5,zero
 4005cc0:	000f883a 	mov	r7,zero
 4005cc4:	102f883a 	mov	r23,r2
 4005cc8:	1827883a 	mov	r19,r3
 4005ccc:	40060880 	call	4006088 <__muldi3>
 4005cd0:	900d883a 	mov	r6,r18
 4005cd4:	8809883a 	mov	r4,r17
 4005cd8:	000b883a 	mov	r5,zero
 4005cdc:	000f883a 	mov	r7,zero
 4005ce0:	102b883a 	mov	r21,r2
 4005ce4:	1821883a 	mov	r16,r3
 4005ce8:	40060880 	call	4006088 <__muldi3>
 4005cec:	8809883a 	mov	r4,r17
 4005cf0:	000b883a 	mov	r5,zero
 4005cf4:	a00d883a 	mov	r6,r20
 4005cf8:	000f883a 	mov	r7,zero
 4005cfc:	102d883a 	mov	r22,r2
 4005d00:	1825883a 	mov	r18,r3
 4005d04:	40060880 	call	4006088 <__muldi3>
 4005d08:	154b883a 	add	r5,r2,r21
 4005d0c:	2889803a 	cmpltu	r4,r5,r2
 4005d10:	1c07883a 	add	r3,r3,r16
 4005d14:	20c9883a 	add	r4,r4,r3
 4005d18:	24004b36 	bltu	r4,r16,4005e48 <__muldf3+0x2b0>
 4005d1c:	8100011e 	bne	r16,r4,4005d24 <__muldf3+0x18c>
 4005d20:	2d404936 	bltu	r5,r21,4005e48 <__muldf3+0x2b0>
 4005d24:	0011883a 	mov	r8,zero
 4005d28:	0007883a 	mov	r3,zero
 4005d2c:	2ccb883a 	add	r5,r5,r19
 4005d30:	b80d883a 	mov	r6,r23
 4005d34:	2cc0012e 	bgeu	r5,r19,4005d3c <__muldf3+0x1a4>
 4005d38:	02000044 	movi	r8,1
 4005d3c:	258f883a 	add	r7,r4,r22
 4005d40:	3909803a 	cmpltu	r4,r7,r4
 4005d44:	da400c17 	ldw	r9,48(sp)
 4005d48:	2489883a 	add	r4,r4,r18
 4005d4c:	d8800717 	ldw	r2,28(sp)
 4005d50:	20c9883a 	add	r4,r4,r3
 4005d54:	da800b17 	ldw	r10,44(sp)
 4005d58:	d8c00617 	ldw	r3,24(sp)
 4005d5c:	3a11883a 	add	r8,r7,r8
 4005d60:	4885883a 	add	r2,r9,r2
 4005d64:	50c6c03a 	cmpne	r3,r10,r3
 4005d68:	41cf803a 	cmpltu	r7,r8,r7
 4005d6c:	12400104 	addi	r9,r2,4
 4005d70:	d8c00115 	stw	r3,4(sp)
 4005d74:	3909883a 	add	r4,r7,r4
 4005d78:	da400215 	stw	r9,8(sp)
 4005d7c:	03480034 	movhi	r13,8192
 4005d80:	6b7fffc4 	addi	r13,r13,-1
 4005d84:	4007883a 	mov	r3,r8
 4005d88:	6900102e 	bgeu	r13,r4,4005dcc <__muldf3+0x234>
 4005d8c:	10800144 	addi	r2,r2,5
 4005d90:	180ed07a 	srli	r7,r3,1
 4005d94:	18c0004c 	andi	r3,r3,1
 4005d98:	201097fa 	slli	r8,r4,31
 4005d9c:	281697fa 	slli	r11,r5,31
 4005da0:	2008d07a 	srli	r4,r4,1
 4005da4:	3014d07a 	srli	r10,r6,1
 4005da8:	2812d07a 	srli	r9,r5,1
 4005dac:	1019883a 	mov	r12,r2
 4005db0:	18000226 	beq	r3,zero,4005dbc <__muldf3+0x224>
 4005db4:	5a8cb03a 	or	r6,r11,r10
 4005db8:	49600034 	orhi	r5,r9,32768
 4005dbc:	41c6b03a 	or	r3,r8,r7
 4005dc0:	10800044 	addi	r2,r2,1
 4005dc4:	693ff236 	bltu	r13,r4,4005d90 <__muldf3+0x1f8>
 4005dc8:	db000215 	stw	r12,8(sp)
 4005dcc:	03440034 	movhi	r13,4096
 4005dd0:	6b7fffc4 	addi	r13,r13,-1
 4005dd4:	69001336 	bltu	r13,r4,4005e24 <__muldf3+0x28c>
 4005dd8:	d8800217 	ldw	r2,8(sp)
 4005ddc:	10bfffc4 	addi	r2,r2,-1
 4005de0:	18d3883a 	add	r9,r3,r3
 4005de4:	48c7803a 	cmpltu	r3,r9,r3
 4005de8:	2109883a 	add	r4,r4,r4
 4005dec:	190f883a 	add	r7,r3,r4
 4005df0:	3191883a 	add	r8,r6,r6
 4005df4:	4197803a 	cmpltu	r11,r8,r6
 4005df8:	2955883a 	add	r10,r5,r5
 4005dfc:	1019883a 	mov	r12,r2
 4005e00:	4807883a 	mov	r3,r9
 4005e04:	3809883a 	mov	r4,r7
 4005e08:	2800010e 	bge	r5,zero,4005e10 <__muldf3+0x278>
 4005e0c:	48c00054 	ori	r3,r9,1
 4005e10:	400d883a 	mov	r6,r8
 4005e14:	5a8b883a 	add	r5,r11,r10
 4005e18:	10bfffc4 	addi	r2,r2,-1
 4005e1c:	69fff02e 	bgeu	r13,r7,4005de0 <__muldf3+0x248>
 4005e20:	db000215 	stw	r12,8(sp)
 4005e24:	18803fcc 	andi	r2,r3,255
 4005e28:	01c02004 	movi	r7,128
 4005e2c:	11c00926 	beq	r2,r7,4005e54 <__muldf3+0x2bc>
 4005e30:	008000c4 	movi	r2,3
 4005e34:	d9000415 	stw	r4,16(sp)
 4005e38:	d8c00315 	stw	r3,12(sp)
 4005e3c:	d8800015 	stw	r2,0(sp)
 4005e40:	d809883a 	mov	r4,sp
 4005e44:	003f7006 	br	4005c08 <__muldf3+0x70>
 4005e48:	0011883a 	mov	r8,zero
 4005e4c:	00c00044 	movi	r3,1
 4005e50:	003fb606 	br	4005d2c <__muldf3+0x194>
 4005e54:	19c0400c 	andi	r7,r3,256
 4005e58:	383ff51e 	bne	r7,zero,4005e30 <__muldf3+0x298>
 4005e5c:	314ab03a 	or	r5,r6,r5
 4005e60:	283ff326 	beq	r5,zero,4005e30 <__muldf3+0x298>
 4005e64:	1885883a 	add	r2,r3,r2
 4005e68:	10cb803a 	cmpltu	r5,r2,r3
 4005e6c:	00ffc004 	movi	r3,-256
 4005e70:	10c6703a 	and	r3,r2,r3
 4005e74:	2909883a 	add	r4,r5,r4
 4005e78:	003fed06 	br	4005e30 <__muldf3+0x298>

04005e7c <__gedf2>:
 4005e7c:	defff104 	addi	sp,sp,-60
 4005e80:	d9000c15 	stw	r4,48(sp)
 4005e84:	d9400d15 	stw	r5,52(sp)
 4005e88:	d9000c04 	addi	r4,sp,48
 4005e8c:	d9400504 	addi	r5,sp,20
 4005e90:	dfc00e15 	stw	ra,56(sp)
 4005e94:	d9800a15 	stw	r6,40(sp)
 4005e98:	d9c00b15 	stw	r7,44(sp)
 4005e9c:	40063b80 	call	40063b8 <__unpack_d>
 4005ea0:	d9000a04 	addi	r4,sp,40
 4005ea4:	d80b883a 	mov	r5,sp
 4005ea8:	40063b80 	call	40063b8 <__unpack_d>
 4005eac:	d8c00517 	ldw	r3,20(sp)
 4005eb0:	00800044 	movi	r2,1
 4005eb4:	10c0082e 	bgeu	r2,r3,4005ed8 <__gedf2+0x5c>
 4005eb8:	d8c00017 	ldw	r3,0(sp)
 4005ebc:	10c0062e 	bgeu	r2,r3,4005ed8 <__gedf2+0x5c>
 4005ec0:	d9000504 	addi	r4,sp,20
 4005ec4:	d80b883a 	mov	r5,sp
 4005ec8:	40064bc0 	call	40064bc <__fpcmp_parts_d>
 4005ecc:	dfc00e17 	ldw	ra,56(sp)
 4005ed0:	dec00f04 	addi	sp,sp,60
 4005ed4:	f800283a 	ret
 4005ed8:	00bfffc4 	movi	r2,-1
 4005edc:	003ffb06 	br	4005ecc <__gedf2+0x50>

04005ee0 <__floatsidf>:
 4005ee0:	2004d7fa 	srli	r2,r4,31
 4005ee4:	defff904 	addi	sp,sp,-28
 4005ee8:	00c000c4 	movi	r3,3
 4005eec:	dfc00615 	stw	ra,24(sp)
 4005ef0:	dc000515 	stw	r16,20(sp)
 4005ef4:	d8c00015 	stw	r3,0(sp)
 4005ef8:	d8800115 	stw	r2,4(sp)
 4005efc:	2000081e 	bne	r4,zero,4005f20 <__floatsidf+0x40>
 4005f00:	00800084 	movi	r2,2
 4005f04:	d8800015 	stw	r2,0(sp)
 4005f08:	d809883a 	mov	r4,sp
 4005f0c:	40061940 	call	4006194 <__pack_d>
 4005f10:	dfc00617 	ldw	ra,24(sp)
 4005f14:	dc000517 	ldw	r16,20(sp)
 4005f18:	dec00704 	addi	sp,sp,28
 4005f1c:	f800283a 	ret
 4005f20:	00c00f04 	movi	r3,60
 4005f24:	d8c00215 	stw	r3,8(sp)
 4005f28:	10000f1e 	bne	r2,zero,4005f68 <__floatsidf+0x88>
 4005f2c:	2021883a 	mov	r16,r4
 4005f30:	8009883a 	mov	r4,r16
 4005f34:	40060e80 	call	40060e8 <__clzsi2>
 4005f38:	11000744 	addi	r4,r2,29
 4005f3c:	0100110e 	bge	zero,r4,4005f84 <__floatsidf+0xa4>
 4005f40:	10ffff44 	addi	r3,r2,-3
 4005f44:	18001216 	blt	r3,zero,4005f90 <__floatsidf+0xb0>
 4005f48:	80c6983a 	sll	r3,r16,r3
 4005f4c:	0009883a 	mov	r4,zero
 4005f50:	014007c4 	movi	r5,31
 4005f54:	2885c83a 	sub	r2,r5,r2
 4005f58:	d9000315 	stw	r4,12(sp)
 4005f5c:	d8c00415 	stw	r3,16(sp)
 4005f60:	d8800215 	stw	r2,8(sp)
 4005f64:	003fe806 	br	4005f08 <__floatsidf+0x28>
 4005f68:	00a00034 	movhi	r2,32768
 4005f6c:	20800e26 	beq	r4,r2,4005fa8 <__floatsidf+0xc8>
 4005f70:	0121c83a 	sub	r16,zero,r4
 4005f74:	8009883a 	mov	r4,r16
 4005f78:	40060e80 	call	40060e8 <__clzsi2>
 4005f7c:	11000744 	addi	r4,r2,29
 4005f80:	013fef16 	blt	zero,r4,4005f40 <__floatsidf+0x60>
 4005f84:	dc000315 	stw	r16,12(sp)
 4005f88:	d8000415 	stw	zero,16(sp)
 4005f8c:	003fde06 	br	4005f08 <__floatsidf+0x28>
 4005f90:	800ad07a 	srli	r5,r16,1
 4005f94:	00c007c4 	movi	r3,31
 4005f98:	1907c83a 	sub	r3,r3,r4
 4005f9c:	28c6d83a 	srl	r3,r5,r3
 4005fa0:	8108983a 	sll	r4,r16,r4
 4005fa4:	003fea06 	br	4005f50 <__floatsidf+0x70>
 4005fa8:	0005883a 	mov	r2,zero
 4005fac:	00f07834 	movhi	r3,49632
 4005fb0:	003fd706 	br	4005f10 <__floatsidf+0x30>

04005fb4 <__fixdfsi>:
 4005fb4:	defff804 	addi	sp,sp,-32
 4005fb8:	d9000515 	stw	r4,20(sp)
 4005fbc:	d9400615 	stw	r5,24(sp)
 4005fc0:	d9000504 	addi	r4,sp,20
 4005fc4:	d80b883a 	mov	r5,sp
 4005fc8:	dfc00715 	stw	ra,28(sp)
 4005fcc:	40063b80 	call	40063b8 <__unpack_d>
 4005fd0:	d8800017 	ldw	r2,0(sp)
 4005fd4:	00c00084 	movi	r3,2
 4005fd8:	10c01c26 	beq	r2,r3,400604c <__fixdfsi+0x98>
 4005fdc:	00c00044 	movi	r3,1
 4005fe0:	18801a2e 	bgeu	r3,r2,400604c <__fixdfsi+0x98>
 4005fe4:	00c00104 	movi	r3,4
 4005fe8:	10c01126 	beq	r2,r3,4006030 <__fixdfsi+0x7c>
 4005fec:	d8800217 	ldw	r2,8(sp)
 4005ff0:	10001616 	blt	r2,zero,400604c <__fixdfsi+0x98>
 4005ff4:	00c00784 	movi	r3,30
 4005ff8:	18800d16 	blt	r3,r2,4006030 <__fixdfsi+0x7c>
 4005ffc:	00c00f04 	movi	r3,60
 4006000:	1885c83a 	sub	r2,r3,r2
 4006004:	10fff804 	addi	r3,r2,-32
 4006008:	d9400317 	ldw	r5,12(sp)
 400600c:	d9000417 	ldw	r4,16(sp)
 4006010:	18001616 	blt	r3,zero,400606c <__fixdfsi+0xb8>
 4006014:	20c4d83a 	srl	r2,r4,r3
 4006018:	d8c00117 	ldw	r3,4(sp)
 400601c:	18000126 	beq	r3,zero,4006024 <__fixdfsi+0x70>
 4006020:	0085c83a 	sub	r2,zero,r2
 4006024:	dfc00717 	ldw	ra,28(sp)
 4006028:	dec00804 	addi	sp,sp,32
 400602c:	f800283a 	ret
 4006030:	d8800117 	ldw	r2,4(sp)
 4006034:	1000091e 	bne	r2,zero,400605c <__fixdfsi+0xa8>
 4006038:	00a00034 	movhi	r2,32768
 400603c:	10bfffc4 	addi	r2,r2,-1
 4006040:	dfc00717 	ldw	ra,28(sp)
 4006044:	dec00804 	addi	sp,sp,32
 4006048:	f800283a 	ret
 400604c:	0005883a 	mov	r2,zero
 4006050:	dfc00717 	ldw	ra,28(sp)
 4006054:	dec00804 	addi	sp,sp,32
 4006058:	f800283a 	ret
 400605c:	00a00034 	movhi	r2,32768
 4006060:	dfc00717 	ldw	ra,28(sp)
 4006064:	dec00804 	addi	sp,sp,32
 4006068:	f800283a 	ret
 400606c:	2008907a 	slli	r4,r4,1
 4006070:	018007c4 	movi	r6,31
 4006074:	308dc83a 	sub	r6,r6,r2
 4006078:	2188983a 	sll	r4,r4,r6
 400607c:	2884d83a 	srl	r2,r5,r2
 4006080:	2084b03a 	or	r2,r4,r2
 4006084:	003fe406 	br	4006018 <__fixdfsi+0x64>

04006088 <__muldi3>:
 4006088:	20bfffcc 	andi	r2,r4,65535
 400608c:	2010d43a 	srli	r8,r4,16
 4006090:	30ffffcc 	andi	r3,r6,65535
 4006094:	3014d43a 	srli	r10,r6,16
 4006098:	1893383a 	mul	r9,r3,r2
 400609c:	1a07383a 	mul	r3,r3,r8
 40060a0:	5085383a 	mul	r2,r10,r2
 40060a4:	4816d43a 	srli	r11,r9,16
 40060a8:	5211383a 	mul	r8,r10,r8
 40060ac:	1885883a 	add	r2,r3,r2
 40060b0:	12c5883a 	add	r2,r2,r11
 40060b4:	10c0022e 	bgeu	r2,r3,40060c0 <__muldi3+0x38>
 40060b8:	00c00074 	movhi	r3,1
 40060bc:	40d1883a 	add	r8,r8,r3
 40060c0:	1014d43a 	srli	r10,r2,16
 40060c4:	21c9383a 	mul	r4,r4,r7
 40060c8:	314d383a 	mul	r6,r6,r5
 40060cc:	1004943a 	slli	r2,r2,16
 40060d0:	4291883a 	add	r8,r8,r10
 40060d4:	4a7fffcc 	andi	r9,r9,65535
 40060d8:	2187883a 	add	r3,r4,r6
 40060dc:	1245883a 	add	r2,r2,r9
 40060e0:	1a07883a 	add	r3,r3,r8
 40060e4:	f800283a 	ret

040060e8 <__clzsi2>:
 40060e8:	00bfffd4 	movui	r2,65535
 40060ec:	11000b36 	bltu	r2,r4,400611c <__clzsi2+0x34>
 40060f0:	00803fc4 	movi	r2,255
 40060f4:	11001e2e 	bgeu	r2,r4,4006170 <__clzsi2+0x88>
 40060f8:	00c00204 	movi	r3,8
 40060fc:	20c8d83a 	srl	r4,r4,r3
 4006100:	00c10374 	movhi	r3,1037
 4006104:	18c8bc04 	addi	r3,r3,8944
 4006108:	00800604 	movi	r2,24
 400610c:	1909883a 	add	r4,r3,r4
 4006110:	20c00003 	ldbu	r3,0(r4)
 4006114:	10c5c83a 	sub	r2,r2,r3
 4006118:	f800283a 	ret
 400611c:	00804034 	movhi	r2,256
 4006120:	10bfffc4 	addi	r2,r2,-1
 4006124:	11000936 	bltu	r2,r4,400614c <__clzsi2+0x64>
 4006128:	00800404 	movi	r2,16
 400612c:	1007883a 	mov	r3,r2
 4006130:	20c8d83a 	srl	r4,r4,r3
 4006134:	00c10374 	movhi	r3,1037
 4006138:	18c8bc04 	addi	r3,r3,8944
 400613c:	1909883a 	add	r4,r3,r4
 4006140:	20c00003 	ldbu	r3,0(r4)
 4006144:	10c5c83a 	sub	r2,r2,r3
 4006148:	f800283a 	ret
 400614c:	00c00604 	movi	r3,24
 4006150:	20c8d83a 	srl	r4,r4,r3
 4006154:	00c10374 	movhi	r3,1037
 4006158:	18c8bc04 	addi	r3,r3,8944
 400615c:	00800204 	movi	r2,8
 4006160:	1909883a 	add	r4,r3,r4
 4006164:	20c00003 	ldbu	r3,0(r4)
 4006168:	10c5c83a 	sub	r2,r2,r3
 400616c:	f800283a 	ret
 4006170:	0007883a 	mov	r3,zero
 4006174:	20c8d83a 	srl	r4,r4,r3
 4006178:	00c10374 	movhi	r3,1037
 400617c:	18c8bc04 	addi	r3,r3,8944
 4006180:	00800804 	movi	r2,32
 4006184:	1909883a 	add	r4,r3,r4
 4006188:	20c00003 	ldbu	r3,0(r4)
 400618c:	10c5c83a 	sub	r2,r2,r3
 4006190:	f800283a 	ret

04006194 <__pack_d>:
 4006194:	20800017 	ldw	r2,0(r4)
 4006198:	defff804 	addi	sp,sp,-32
 400619c:	dcc00315 	stw	r19,12(sp)
 40061a0:	dc800215 	stw	r18,8(sp)
 40061a4:	dfc00715 	stw	ra,28(sp)
 40061a8:	dd800615 	stw	r22,24(sp)
 40061ac:	dd400515 	stw	r21,20(sp)
 40061b0:	dd000415 	stw	r20,16(sp)
 40061b4:	dc400115 	stw	r17,4(sp)
 40061b8:	dc000015 	stw	r16,0(sp)
 40061bc:	04800044 	movi	r18,1
 40061c0:	24400317 	ldw	r17,12(r4)
 40061c4:	24000417 	ldw	r16,16(r4)
 40061c8:	24c00117 	ldw	r19,4(r4)
 40061cc:	9080422e 	bgeu	r18,r2,40062d8 <__pack_d+0x144>
 40061d0:	00c00104 	movi	r3,4
 40061d4:	10c03c26 	beq	r2,r3,40062c8 <__pack_d+0x134>
 40061d8:	00c00084 	movi	r3,2
 40061dc:	10c01926 	beq	r2,r3,4006244 <__pack_d+0xb0>
 40061e0:	8c04b03a 	or	r2,r17,r16
 40061e4:	10001726 	beq	r2,zero,4006244 <__pack_d+0xb0>
 40061e8:	21000217 	ldw	r4,8(r4)
 40061ec:	00bf0084 	movi	r2,-1022
 40061f0:	20804016 	blt	r4,r2,40062f4 <__pack_d+0x160>
 40061f4:	0080ffc4 	movi	r2,1023
 40061f8:	11003316 	blt	r2,r4,40062c8 <__pack_d+0x134>
 40061fc:	88803fcc 	andi	r2,r17,255
 4006200:	00c02004 	movi	r3,128
 4006204:	10c02926 	beq	r2,r3,40062ac <__pack_d+0x118>
 4006208:	88801fc4 	addi	r2,r17,127
 400620c:	1463803a 	cmpltu	r17,r2,r17
 4006210:	8c21883a 	add	r16,r17,r16
 4006214:	1023883a 	mov	r17,r2
 4006218:	00880034 	movhi	r2,8192
 400621c:	10bfffc4 	addi	r2,r2,-1
 4006220:	14001c36 	bltu	r2,r16,4006294 <__pack_d+0x100>
 4006224:	2100ffc4 	addi	r4,r4,1023
 4006228:	8006963a 	slli	r3,r16,24
 400622c:	8804d23a 	srli	r2,r17,8
 4006230:	8020913a 	slli	r16,r16,4
 4006234:	2101ffcc 	andi	r4,r4,2047
 4006238:	1884b03a 	or	r2,r3,r2
 400623c:	8020d33a 	srli	r16,r16,12
 4006240:	00000306 	br	4006250 <__pack_d+0xbc>
 4006244:	0009883a 	mov	r4,zero
 4006248:	0005883a 	mov	r2,zero
 400624c:	0021883a 	mov	r16,zero
 4006250:	2008953a 	slli	r4,r4,20
 4006254:	982697fa 	slli	r19,r19,31
 4006258:	00c00434 	movhi	r3,16
 400625c:	18ffffc4 	addi	r3,r3,-1
 4006260:	80e0703a 	and	r16,r16,r3
 4006264:	8106b03a 	or	r3,r16,r4
 4006268:	1cc6b03a 	or	r3,r3,r19
 400626c:	dfc00717 	ldw	ra,28(sp)
 4006270:	dd800617 	ldw	r22,24(sp)
 4006274:	dd400517 	ldw	r21,20(sp)
 4006278:	dd000417 	ldw	r20,16(sp)
 400627c:	dcc00317 	ldw	r19,12(sp)
 4006280:	dc800217 	ldw	r18,8(sp)
 4006284:	dc400117 	ldw	r17,4(sp)
 4006288:	dc000017 	ldw	r16,0(sp)
 400628c:	dec00804 	addi	sp,sp,32
 4006290:	f800283a 	ret
 4006294:	800697fa 	slli	r3,r16,31
 4006298:	8804d07a 	srli	r2,r17,1
 400629c:	21010004 	addi	r4,r4,1024
 40062a0:	8020d07a 	srli	r16,r16,1
 40062a4:	18a2b03a 	or	r17,r3,r2
 40062a8:	003fdf06 	br	4006228 <__pack_d+0x94>
 40062ac:	88c0400c 	andi	r3,r17,256
 40062b0:	183fd926 	beq	r3,zero,4006218 <__pack_d+0x84>
 40062b4:	8885883a 	add	r2,r17,r2
 40062b8:	1463803a 	cmpltu	r17,r2,r17
 40062bc:	8c21883a 	add	r16,r17,r16
 40062c0:	1023883a 	mov	r17,r2
 40062c4:	003fd406 	br	4006218 <__pack_d+0x84>
 40062c8:	0101ffc4 	movi	r4,2047
 40062cc:	0005883a 	mov	r2,zero
 40062d0:	0021883a 	mov	r16,zero
 40062d4:	003fde06 	br	4006250 <__pack_d+0xbc>
 40062d8:	84000234 	orhi	r16,r16,8
 40062dc:	00c00434 	movhi	r3,16
 40062e0:	18ffffc4 	addi	r3,r3,-1
 40062e4:	8805883a 	mov	r2,r17
 40062e8:	80e0703a 	and	r16,r16,r3
 40062ec:	0101ffc4 	movi	r4,2047
 40062f0:	003fd706 	br	4006250 <__pack_d+0xbc>
 40062f4:	1129c83a 	sub	r20,r2,r4
 40062f8:	00800e04 	movi	r2,56
 40062fc:	15002716 	blt	r2,r20,400639c <__pack_d+0x208>
 4006300:	800b883a 	mov	r5,r16
 4006304:	a00d883a 	mov	r6,r20
 4006308:	8809883a 	mov	r4,r17
 400630c:	400658c0 	call	400658c <__lshrdi3>
 4006310:	9009883a 	mov	r4,r18
 4006314:	000b883a 	mov	r5,zero
 4006318:	a00d883a 	mov	r6,r20
 400631c:	102d883a 	mov	r22,r2
 4006320:	182b883a 	mov	r21,r3
 4006324:	40065d00 	call	40065d0 <__ashldi3>
 4006328:	1009003a 	cmpeq	r4,r2,zero
 400632c:	1907c83a 	sub	r3,r3,r4
 4006330:	10bfffc4 	addi	r2,r2,-1
 4006334:	1c20703a 	and	r16,r3,r16
 4006338:	1444703a 	and	r2,r2,r17
 400633c:	1404b03a 	or	r2,r2,r16
 4006340:	1004c03a 	cmpne	r2,r2,zero
 4006344:	1584b03a 	or	r2,r2,r22
 4006348:	11003fcc 	andi	r4,r2,255
 400634c:	01402004 	movi	r5,128
 4006350:	a807883a 	mov	r3,r21
 4006354:	2140131e 	bne	r4,r5,40063a4 <__pack_d+0x210>
 4006358:	1140400c 	andi	r5,r2,256
 400635c:	28000426 	beq	r5,zero,4006370 <__pack_d+0x1dc>
 4006360:	1109883a 	add	r4,r2,r4
 4006364:	2085803a 	cmpltu	r2,r4,r2
 4006368:	1547883a 	add	r3,r2,r21
 400636c:	2005883a 	mov	r2,r4
 4006370:	1808963a 	slli	r4,r3,24
 4006374:	1004d23a 	srli	r2,r2,8
 4006378:	1820913a 	slli	r16,r3,4
 400637c:	01440034 	movhi	r5,4096
 4006380:	297fffc4 	addi	r5,r5,-1
 4006384:	2084b03a 	or	r2,r4,r2
 4006388:	8020d33a 	srli	r16,r16,12
 400638c:	01000044 	movi	r4,1
 4006390:	28ffaf36 	bltu	r5,r3,4006250 <__pack_d+0xbc>
 4006394:	0009883a 	mov	r4,zero
 4006398:	003fad06 	br	4006250 <__pack_d+0xbc>
 400639c:	0005883a 	mov	r2,zero
 40063a0:	0007883a 	mov	r3,zero
 40063a4:	11001fc4 	addi	r4,r2,127
 40063a8:	2085803a 	cmpltu	r2,r4,r2
 40063ac:	10c7883a 	add	r3,r2,r3
 40063b0:	2005883a 	mov	r2,r4
 40063b4:	003fee06 	br	4006370 <__pack_d+0x1dc>

040063b8 <__unpack_d>:
 40063b8:	21800117 	ldw	r6,4(r4)
 40063bc:	20c00017 	ldw	r3,0(r4)
 40063c0:	3004d7fa 	srli	r2,r6,31
 40063c4:	3008d53a 	srli	r4,r6,20
 40063c8:	28800115 	stw	r2,4(r5)
 40063cc:	2101ffcc 	andi	r4,r4,2047
 40063d0:	00800434 	movhi	r2,16
 40063d4:	10bfffc4 	addi	r2,r2,-1
 40063d8:	3084703a 	and	r2,r6,r2
 40063dc:	20001a1e 	bne	r4,zero,4006448 <__unpack_d+0x90>
 40063e0:	1888b03a 	or	r4,r3,r2
 40063e4:	20002626 	beq	r4,zero,4006480 <__unpack_d+0xc8>
 40063e8:	1808d63a 	srli	r4,r3,24
 40063ec:	1004923a 	slli	r2,r2,8
 40063f0:	01bf0084 	movi	r6,-1022
 40063f4:	29800215 	stw	r6,8(r5)
 40063f8:	2084b03a 	or	r2,r4,r2
 40063fc:	010000c4 	movi	r4,3
 4006400:	29000015 	stw	r4,0(r5)
 4006404:	02040034 	movhi	r8,4096
 4006408:	423fffc4 	addi	r8,r8,-1
 400640c:	1806923a 	slli	r3,r3,8
 4006410:	40801836 	bltu	r8,r2,4006474 <__unpack_d+0xbc>
 4006414:	013f0044 	movi	r4,-1023
 4006418:	18cd883a 	add	r6,r3,r3
 400641c:	30c7803a 	cmpltu	r3,r6,r3
 4006420:	1085883a 	add	r2,r2,r2
 4006424:	1885883a 	add	r2,r3,r2
 4006428:	200f883a 	mov	r7,r4
 400642c:	3007883a 	mov	r3,r6
 4006430:	213fffc4 	addi	r4,r4,-1
 4006434:	40bff82e 	bgeu	r8,r2,4006418 <__unpack_d+0x60>
 4006438:	29c00215 	stw	r7,8(r5)
 400643c:	28c00315 	stw	r3,12(r5)
 4006440:	28800415 	stw	r2,16(r5)
 4006444:	f800283a 	ret
 4006448:	01c1ffc4 	movi	r7,2047
 400644c:	21c00f26 	beq	r4,r7,400648c <__unpack_d+0xd4>
 4006450:	180cd63a 	srli	r6,r3,24
 4006454:	1004923a 	slli	r2,r2,8
 4006458:	213f0044 	addi	r4,r4,-1023
 400645c:	1806923a 	slli	r3,r3,8
 4006460:	3084b03a 	or	r2,r6,r2
 4006464:	29000215 	stw	r4,8(r5)
 4006468:	010000c4 	movi	r4,3
 400646c:	10840034 	orhi	r2,r2,4096
 4006470:	29000015 	stw	r4,0(r5)
 4006474:	28c00315 	stw	r3,12(r5)
 4006478:	28800415 	stw	r2,16(r5)
 400647c:	f800283a 	ret
 4006480:	00800084 	movi	r2,2
 4006484:	28800015 	stw	r2,0(r5)
 4006488:	f800283a 	ret
 400648c:	1888b03a 	or	r4,r3,r2
 4006490:	20000526 	beq	r4,zero,40064a8 <__unpack_d+0xf0>
 4006494:	3180022c 	andhi	r6,r6,8
 4006498:	30000626 	beq	r6,zero,40064b4 <__unpack_d+0xfc>
 400649c:	01000044 	movi	r4,1
 40064a0:	29000015 	stw	r4,0(r5)
 40064a4:	003ff306 	br	4006474 <__unpack_d+0xbc>
 40064a8:	00800104 	movi	r2,4
 40064ac:	28800015 	stw	r2,0(r5)
 40064b0:	f800283a 	ret
 40064b4:	28000015 	stw	zero,0(r5)
 40064b8:	003fee06 	br	4006474 <__unpack_d+0xbc>

040064bc <__fpcmp_parts_d>:
 40064bc:	20c00017 	ldw	r3,0(r4)
 40064c0:	00800044 	movi	r2,1
 40064c4:	10c0142e 	bgeu	r2,r3,4006518 <__fpcmp_parts_d+0x5c>
 40064c8:	29800017 	ldw	r6,0(r5)
 40064cc:	1180122e 	bgeu	r2,r6,4006518 <__fpcmp_parts_d+0x5c>
 40064d0:	01c00104 	movi	r7,4
 40064d4:	19c02826 	beq	r3,r7,4006578 <__fpcmp_parts_d+0xbc>
 40064d8:	31c00926 	beq	r6,r7,4006500 <__fpcmp_parts_d+0x44>
 40064dc:	01c00084 	movi	r7,2
 40064e0:	19c00626 	beq	r3,r7,40064fc <__fpcmp_parts_d+0x40>
 40064e4:	31c00a26 	beq	r6,r7,4006510 <__fpcmp_parts_d+0x54>
 40064e8:	20c00117 	ldw	r3,4(r4)
 40064ec:	29800117 	ldw	r6,4(r5)
 40064f0:	19800b26 	beq	r3,r6,4006520 <__fpcmp_parts_d+0x64>
 40064f4:	1800041e 	bne	r3,zero,4006508 <__fpcmp_parts_d+0x4c>
 40064f8:	f800283a 	ret
 40064fc:	30c01a26 	beq	r6,r3,4006568 <__fpcmp_parts_d+0xac>
 4006500:	28800117 	ldw	r2,4(r5)
 4006504:	1000041e 	bne	r2,zero,4006518 <__fpcmp_parts_d+0x5c>
 4006508:	00bfffc4 	movi	r2,-1
 400650c:	f800283a 	ret
 4006510:	20800117 	ldw	r2,4(r4)
 4006514:	103ffc1e 	bne	r2,zero,4006508 <__fpcmp_parts_d+0x4c>
 4006518:	00800044 	movi	r2,1
 400651c:	f800283a 	ret
 4006520:	21c00217 	ldw	r7,8(r4)
 4006524:	29800217 	ldw	r6,8(r5)
 4006528:	31c0020e 	bge	r6,r7,4006534 <__fpcmp_parts_d+0x78>
 400652c:	183ff61e 	bne	r3,zero,4006508 <__fpcmp_parts_d+0x4c>
 4006530:	f800283a 	ret
 4006534:	39800a16 	blt	r7,r6,4006560 <__fpcmp_parts_d+0xa4>
 4006538:	20800417 	ldw	r2,16(r4)
 400653c:	29800417 	ldw	r6,16(r5)
 4006540:	21c00317 	ldw	r7,12(r4)
 4006544:	29000317 	ldw	r4,12(r5)
 4006548:	30800936 	bltu	r6,r2,4006570 <__fpcmp_parts_d+0xb4>
 400654c:	1180011e 	bne	r2,r6,4006554 <__fpcmp_parts_d+0x98>
 4006550:	21c00736 	bltu	r4,r7,4006570 <__fpcmp_parts_d+0xb4>
 4006554:	11800236 	bltu	r2,r6,4006560 <__fpcmp_parts_d+0xa4>
 4006558:	3080031e 	bne	r6,r2,4006568 <__fpcmp_parts_d+0xac>
 400655c:	3900022e 	bgeu	r7,r4,4006568 <__fpcmp_parts_d+0xac>
 4006560:	183fe926 	beq	r3,zero,4006508 <__fpcmp_parts_d+0x4c>
 4006564:	003fec06 	br	4006518 <__fpcmp_parts_d+0x5c>
 4006568:	0005883a 	mov	r2,zero
 400656c:	f800283a 	ret
 4006570:	183fe926 	beq	r3,zero,4006518 <__fpcmp_parts_d+0x5c>
 4006574:	003fe406 	br	4006508 <__fpcmp_parts_d+0x4c>
 4006578:	30ffe51e 	bne	r6,r3,4006510 <__fpcmp_parts_d+0x54>
 400657c:	28c00117 	ldw	r3,4(r5)
 4006580:	20800117 	ldw	r2,4(r4)
 4006584:	1885c83a 	sub	r2,r3,r2
 4006588:	f800283a 	ret

0400658c <__lshrdi3>:
 400658c:	2005883a 	mov	r2,r4
 4006590:	2807883a 	mov	r3,r5
 4006594:	30000826 	beq	r6,zero,40065b8 <__lshrdi3+0x2c>
 4006598:	01000804 	movi	r4,32
 400659c:	2189c83a 	sub	r4,r4,r6
 40065a0:	0100060e 	bge	zero,r4,40065bc <__lshrdi3+0x30>
 40065a4:	1184d83a 	srl	r2,r2,r6
 40065a8:	2908983a 	sll	r4,r5,r4
 40065ac:	298cd83a 	srl	r6,r5,r6
 40065b0:	2084b03a 	or	r2,r4,r2
 40065b4:	3007883a 	mov	r3,r6
 40065b8:	f800283a 	ret
 40065bc:	0105c83a 	sub	r2,zero,r4
 40065c0:	000d883a 	mov	r6,zero
 40065c4:	2884d83a 	srl	r2,r5,r2
 40065c8:	3007883a 	mov	r3,r6
 40065cc:	003ffa06 	br	40065b8 <__lshrdi3+0x2c>

040065d0 <__ashldi3>:
 40065d0:	2005883a 	mov	r2,r4
 40065d4:	2807883a 	mov	r3,r5
 40065d8:	30000826 	beq	r6,zero,40065fc <__ashldi3+0x2c>
 40065dc:	01000804 	movi	r4,32
 40065e0:	2189c83a 	sub	r4,r4,r6
 40065e4:	0100060e 	bge	zero,r4,4006600 <__ashldi3+0x30>
 40065e8:	1108d83a 	srl	r4,r2,r4
 40065ec:	2986983a 	sll	r3,r5,r6
 40065f0:	118c983a 	sll	r6,r2,r6
 40065f4:	20c6b03a 	or	r3,r4,r3
 40065f8:	3005883a 	mov	r2,r6
 40065fc:	f800283a 	ret
 4006600:	0107c83a 	sub	r3,zero,r4
 4006604:	000d883a 	mov	r6,zero
 4006608:	10c6983a 	sll	r3,r2,r3
 400660c:	3005883a 	mov	r2,r6
 4006610:	003ffa06 	br	40065fc <__ashldi3+0x2c>

04006614 <_printf_r>:
 4006614:	defffd04 	addi	sp,sp,-12
 4006618:	dfc00015 	stw	ra,0(sp)
 400661c:	d9800115 	stw	r6,4(sp)
 4006620:	d9c00215 	stw	r7,8(sp)
 4006624:	280d883a 	mov	r6,r5
 4006628:	21400217 	ldw	r5,8(r4)
 400662c:	d9c00104 	addi	r7,sp,4
 4006630:	40067d40 	call	40067d4 <___vfprintf_internal_r>
 4006634:	dfc00017 	ldw	ra,0(sp)
 4006638:	dec00304 	addi	sp,sp,12
 400663c:	f800283a 	ret

04006640 <printf>:
 4006640:	defffc04 	addi	sp,sp,-16
 4006644:	dfc00015 	stw	ra,0(sp)
 4006648:	d9400115 	stw	r5,4(sp)
 400664c:	d9800215 	stw	r6,8(sp)
 4006650:	d9c00315 	stw	r7,12(sp)
 4006654:	00810374 	movhi	r2,1037
 4006658:	10903e04 	addi	r2,r2,16632
 400665c:	10800017 	ldw	r2,0(r2)
 4006660:	200b883a 	mov	r5,r4
 4006664:	d9800104 	addi	r6,sp,4
 4006668:	11000217 	ldw	r4,8(r2)
 400666c:	40085cc0 	call	40085cc <__vfprintf_internal>
 4006670:	dfc00017 	ldw	ra,0(sp)
 4006674:	dec00404 	addi	sp,sp,16
 4006678:	f800283a 	ret

0400667c <_puts_r>:
 400667c:	defff604 	addi	sp,sp,-40
 4006680:	dc400815 	stw	r17,32(sp)
 4006684:	2023883a 	mov	r17,r4
 4006688:	2809883a 	mov	r4,r5
 400668c:	dc000715 	stw	r16,28(sp)
 4006690:	dfc00915 	stw	ra,36(sp)
 4006694:	2821883a 	mov	r16,r5
 4006698:	40067140 	call	4006714 <strlen>
 400669c:	10c00044 	addi	r3,r2,1
 40066a0:	d8800115 	stw	r2,4(sp)
 40066a4:	89400217 	ldw	r5,8(r17)
 40066a8:	00810374 	movhi	r2,1037
 40066ac:	1088fc04 	addi	r2,r2,9200
 40066b0:	d8800215 	stw	r2,8(sp)
 40066b4:	00800044 	movi	r2,1
 40066b8:	d8800315 	stw	r2,12(sp)
 40066bc:	8809883a 	mov	r4,r17
 40066c0:	00800084 	movi	r2,2
 40066c4:	d9800404 	addi	r6,sp,16
 40066c8:	dc000015 	stw	r16,0(sp)
 40066cc:	d8c00615 	stw	r3,24(sp)
 40066d0:	dec00415 	stw	sp,16(sp)
 40066d4:	d8800515 	stw	r2,20(sp)
 40066d8:	400a8840 	call	400a884 <__sfvwrite_r>
 40066dc:	1000061e 	bne	r2,zero,40066f8 <_puts_r+0x7c>
 40066e0:	00800284 	movi	r2,10
 40066e4:	dfc00917 	ldw	ra,36(sp)
 40066e8:	dc400817 	ldw	r17,32(sp)
 40066ec:	dc000717 	ldw	r16,28(sp)
 40066f0:	dec00a04 	addi	sp,sp,40
 40066f4:	f800283a 	ret
 40066f8:	00bfffc4 	movi	r2,-1
 40066fc:	003ff906 	br	40066e4 <_puts_r+0x68>

04006700 <puts>:
 4006700:	00810374 	movhi	r2,1037
 4006704:	10903e04 	addi	r2,r2,16632
 4006708:	200b883a 	mov	r5,r4
 400670c:	11000017 	ldw	r4,0(r2)
 4006710:	400667c1 	jmpi	400667c <_puts_r>

04006714 <strlen>:
 4006714:	208000cc 	andi	r2,r4,3
 4006718:	10001f1e 	bne	r2,zero,4006798 <strlen+0x84>
 400671c:	20800017 	ldw	r2,0(r4)
 4006720:	01ffbff4 	movhi	r7,65279
 4006724:	39ffbfc4 	addi	r7,r7,-257
 4006728:	01a02074 	movhi	r6,32897
 400672c:	31a02004 	addi	r6,r6,-32640
 4006730:	11c7883a 	add	r3,r2,r7
 4006734:	0084303a 	nor	r2,zero,r2
 4006738:	1886703a 	and	r3,r3,r2
 400673c:	1986703a 	and	r3,r3,r6
 4006740:	2005883a 	mov	r2,r4
 4006744:	1800101e 	bne	r3,zero,4006788 <strlen+0x74>
 4006748:	10800104 	addi	r2,r2,4
 400674c:	10c00017 	ldw	r3,0(r2)
 4006750:	19cb883a 	add	r5,r3,r7
 4006754:	00c6303a 	nor	r3,zero,r3
 4006758:	28c6703a 	and	r3,r5,r3
 400675c:	1986703a 	and	r3,r3,r6
 4006760:	1800091e 	bne	r3,zero,4006788 <strlen+0x74>
 4006764:	10800104 	addi	r2,r2,4
 4006768:	10c00017 	ldw	r3,0(r2)
 400676c:	19cb883a 	add	r5,r3,r7
 4006770:	00c6303a 	nor	r3,zero,r3
 4006774:	28c6703a 	and	r3,r5,r3
 4006778:	1986703a 	and	r3,r3,r6
 400677c:	183ff226 	beq	r3,zero,4006748 <strlen+0x34>
 4006780:	00000106 	br	4006788 <strlen+0x74>
 4006784:	10800044 	addi	r2,r2,1
 4006788:	10c00007 	ldb	r3,0(r2)
 400678c:	183ffd1e 	bne	r3,zero,4006784 <strlen+0x70>
 4006790:	1105c83a 	sub	r2,r2,r4
 4006794:	f800283a 	ret
 4006798:	2005883a 	mov	r2,r4
 400679c:	003ffa06 	br	4006788 <strlen+0x74>

040067a0 <__sprint_r>:
 40067a0:	30800217 	ldw	r2,8(r6)
 40067a4:	defffe04 	addi	sp,sp,-8
 40067a8:	dc000015 	stw	r16,0(sp)
 40067ac:	dfc00115 	stw	ra,4(sp)
 40067b0:	3021883a 	mov	r16,r6
 40067b4:	10000226 	beq	r2,zero,40067c0 <__sprint_r+0x20>
 40067b8:	400a8840 	call	400a884 <__sfvwrite_r>
 40067bc:	80000215 	stw	zero,8(r16)
 40067c0:	80000115 	stw	zero,4(r16)
 40067c4:	dfc00117 	ldw	ra,4(sp)
 40067c8:	dc000017 	ldw	r16,0(sp)
 40067cc:	dec00204 	addi	sp,sp,8
 40067d0:	f800283a 	ret

040067d4 <___vfprintf_internal_r>:
 40067d4:	defeb904 	addi	sp,sp,-1308
 40067d8:	dc013d15 	stw	r16,1268(sp)
 40067dc:	d9013015 	stw	r4,1216(sp)
 40067e0:	dfc14615 	stw	ra,1304(sp)
 40067e4:	df014515 	stw	fp,1300(sp)
 40067e8:	ddc14415 	stw	r23,1296(sp)
 40067ec:	dd814315 	stw	r22,1292(sp)
 40067f0:	dd414215 	stw	r21,1288(sp)
 40067f4:	dd014115 	stw	r20,1284(sp)
 40067f8:	dcc14015 	stw	r19,1280(sp)
 40067fc:	dc813f15 	stw	r18,1276(sp)
 4006800:	dc413e15 	stw	r17,1272(sp)
 4006804:	d9412915 	stw	r5,1188(sp)
 4006808:	3021883a 	mov	r16,r6
 400680c:	d9c12d15 	stw	r7,1204(sp)
 4006810:	400af700 	call	400af70 <_localeconv_r>
 4006814:	10800017 	ldw	r2,0(r2)
 4006818:	d9013017 	ldw	r4,1216(sp)
 400681c:	d8013315 	stw	zero,1228(sp)
 4006820:	d8813715 	stw	r2,1244(sp)
 4006824:	d8013415 	stw	zero,1232(sp)
 4006828:	20000226 	beq	r4,zero,4006834 <___vfprintf_internal_r+0x60>
 400682c:	20800e17 	ldw	r2,56(r4)
 4006830:	10019826 	beq	r2,zero,4006e94 <___vfprintf_internal_r+0x6c0>
 4006834:	da012917 	ldw	r8,1188(sp)
 4006838:	4080030b 	ldhu	r2,12(r8)
 400683c:	10c0020c 	andi	r3,r2,8
 4006840:	18ffffcc 	andi	r3,r3,65535
 4006844:	18e0001c 	xori	r3,r3,32768
 4006848:	18e00004 	addi	r3,r3,-32768
 400684c:	18013a26 	beq	r3,zero,4006d38 <___vfprintf_internal_r+0x564>
 4006850:	40c00417 	ldw	r3,16(r8)
 4006854:	18013826 	beq	r3,zero,4006d38 <___vfprintf_internal_r+0x564>
 4006858:	1100068c 	andi	r4,r2,26
 400685c:	00c00284 	movi	r3,10
 4006860:	20c13e26 	beq	r4,r3,4006d5c <___vfprintf_internal_r+0x588>
 4006864:	da010dc4 	addi	r8,sp,1079
 4006868:	d8800404 	addi	r2,sp,16
 400686c:	da012615 	stw	r8,1176(sp)
 4006870:	d8811b15 	stw	r2,1132(sp)
 4006874:	1013883a 	mov	r9,r2
 4006878:	d8812617 	ldw	r2,1176(sp)
 400687c:	da010e04 	addi	r8,sp,1080
 4006880:	dc413017 	ldw	r17,1216(sp)
 4006884:	da012715 	stw	r8,1180(sp)
 4006888:	4091c83a 	sub	r8,r8,r2
 400688c:	d8011d15 	stw	zero,1140(sp)
 4006890:	d8011c15 	stw	zero,1136(sp)
 4006894:	802b883a 	mov	r21,r16
 4006898:	d8013215 	stw	zero,1224(sp)
 400689c:	d8013615 	stw	zero,1240(sp)
 40068a0:	d8013515 	stw	zero,1236(sp)
 40068a4:	d8012c15 	stw	zero,1200(sp)
 40068a8:	da013915 	stw	r8,1252(sp)
 40068ac:	a8800007 	ldb	r2,0(r21)
 40068b0:	1002ec26 	beq	r2,zero,4007464 <___vfprintf_internal_r+0xc90>
 40068b4:	00c00944 	movi	r3,37
 40068b8:	a825883a 	mov	r18,r21
 40068bc:	10c0021e 	bne	r2,r3,40068c8 <___vfprintf_internal_r+0xf4>
 40068c0:	00001406 	br	4006914 <___vfprintf_internal_r+0x140>
 40068c4:	10c00326 	beq	r2,r3,40068d4 <___vfprintf_internal_r+0x100>
 40068c8:	94800044 	addi	r18,r18,1
 40068cc:	90800007 	ldb	r2,0(r18)
 40068d0:	103ffc1e 	bne	r2,zero,40068c4 <___vfprintf_internal_r+0xf0>
 40068d4:	9561c83a 	sub	r16,r18,r21
 40068d8:	80000e26 	beq	r16,zero,4006914 <___vfprintf_internal_r+0x140>
 40068dc:	da011d17 	ldw	r8,1140(sp)
 40068e0:	d8c11c17 	ldw	r3,1136(sp)
 40068e4:	4d400015 	stw	r21,0(r9)
 40068e8:	4c000115 	stw	r16,4(r9)
 40068ec:	4411883a 	add	r8,r8,r16
 40068f0:	18c00044 	addi	r3,r3,1
 40068f4:	da011d15 	stw	r8,1140(sp)
 40068f8:	d8c11c15 	stw	r3,1136(sp)
 40068fc:	008001c4 	movi	r2,7
 4006900:	10c15d16 	blt	r2,r3,4006e78 <___vfprintf_internal_r+0x6a4>
 4006904:	4a400204 	addi	r9,r9,8
 4006908:	d8812c17 	ldw	r2,1200(sp)
 400690c:	1405883a 	add	r2,r2,r16
 4006910:	d8812c15 	stw	r2,1200(sp)
 4006914:	90800007 	ldb	r2,0(r18)
 4006918:	10013b26 	beq	r2,zero,4006e08 <___vfprintf_internal_r+0x634>
 400691c:	95400044 	addi	r21,r18,1
 4006920:	94800047 	ldb	r18,1(r18)
 4006924:	d8012585 	stb	zero,1174(sp)
 4006928:	073fffc4 	movi	fp,-1
 400692c:	d8012e15 	stw	zero,1208(sp)
 4006930:	0021883a 	mov	r16,zero
 4006934:	00c01604 	movi	r3,88
 4006938:	01400244 	movi	r5,9
 400693c:	02800a84 	movi	r10,42
 4006940:	01c01b04 	movi	r7,108
 4006944:	01800ac4 	movi	r6,43
 4006948:	02c00804 	movi	r11,32
 400694c:	ad400044 	addi	r21,r21,1
 4006950:	90bff804 	addi	r2,r18,-32
 4006954:	1880092e 	bgeu	r3,r2,400697c <___vfprintf_internal_r+0x1a8>
 4006958:	90012b26 	beq	r18,zero,4006e08 <___vfprintf_internal_r+0x634>
 400695c:	00c00044 	movi	r3,1
 4006960:	d8c12815 	stw	r3,1184(sp)
 4006964:	dc810405 	stb	r18,1040(sp)
 4006968:	d8012585 	stb	zero,1174(sp)
 400696c:	d8c12b15 	stw	r3,1196(sp)
 4006970:	dcc10404 	addi	r19,sp,1040
 4006974:	d8013115 	stw	zero,1220(sp)
 4006978:	00008806 	br	4006b9c <___vfprintf_internal_r+0x3c8>
 400697c:	1085883a 	add	r2,r2,r2
 4006980:	1085883a 	add	r2,r2,r2
 4006984:	01010034 	movhi	r4,1024
 4006988:	211a6604 	addi	r4,r4,27032
 400698c:	1105883a 	add	r2,r2,r4
 4006990:	10800017 	ldw	r2,0(r2)
 4006994:	1000683a 	jmp	r2
 4006998:	04006f4c 	andi	r16,zero,445
 400699c:	04006958 	cmpnei	r16,zero,421
 40069a0:	04006958 	cmpnei	r16,zero,421
 40069a4:	04006f60 	cmpeqi	r16,zero,445
 40069a8:	04006958 	cmpnei	r16,zero,421
 40069ac:	04006958 	cmpnei	r16,zero,421
 40069b0:	04006958 	cmpnei	r16,zero,421
 40069b4:	04006958 	cmpnei	r16,zero,421
 40069b8:	04006958 	cmpnei	r16,zero,421
 40069bc:	04006958 	cmpnei	r16,zero,421
 40069c0:	04007048 	cmpgei	r16,zero,449
 40069c4:	04006f04 	movi	r16,444
 40069c8:	04006958 	cmpnei	r16,zero,421
 40069cc:	04006d2c 	andhi	r16,zero,436
 40069d0:	04006f10 	cmplti	r16,zero,444
 40069d4:	04006958 	cmpnei	r16,zero,421
 40069d8:	04006f6c 	andhi	r16,zero,445
 40069dc:	0400706c 	andhi	r16,zero,449
 40069e0:	0400706c 	andhi	r16,zero,449
 40069e4:	0400706c 	andhi	r16,zero,449
 40069e8:	0400706c 	andhi	r16,zero,449
 40069ec:	0400706c 	andhi	r16,zero,449
 40069f0:	0400706c 	andhi	r16,zero,449
 40069f4:	0400706c 	andhi	r16,zero,449
 40069f8:	0400706c 	andhi	r16,zero,449
 40069fc:	0400706c 	andhi	r16,zero,449
 4006a00:	04006958 	cmpnei	r16,zero,421
 4006a04:	04006958 	cmpnei	r16,zero,421
 4006a08:	04006958 	cmpnei	r16,zero,421
 4006a0c:	04006958 	cmpnei	r16,zero,421
 4006a10:	04006958 	cmpnei	r16,zero,421
 4006a14:	04006958 	cmpnei	r16,zero,421
 4006a18:	04006958 	cmpnei	r16,zero,421
 4006a1c:	04006958 	cmpnei	r16,zero,421
 4006a20:	04006958 	cmpnei	r16,zero,421
 4006a24:	04006958 	cmpnei	r16,zero,421
 4006a28:	04006cc8 	cmpgei	r16,zero,435
 4006a2c:	04007094 	movui	r16,450
 4006a30:	04006958 	cmpnei	r16,zero,421
 4006a34:	04007094 	movui	r16,450
 4006a38:	04006958 	cmpnei	r16,zero,421
 4006a3c:	04006958 	cmpnei	r16,zero,421
 4006a40:	04006958 	cmpnei	r16,zero,421
 4006a44:	04006958 	cmpnei	r16,zero,421
 4006a48:	04007204 	movi	r16,456
 4006a4c:	04006958 	cmpnei	r16,zero,421
 4006a50:	04006958 	cmpnei	r16,zero,421
 4006a54:	04006c90 	cmplti	r16,zero,434
 4006a58:	04006958 	cmpnei	r16,zero,421
 4006a5c:	04006958 	cmpnei	r16,zero,421
 4006a60:	04006958 	cmpnei	r16,zero,421
 4006a64:	04006958 	cmpnei	r16,zero,421
 4006a68:	04006958 	cmpnei	r16,zero,421
 4006a6c:	04006afc 	xorhi	r16,zero,427
 4006a70:	04006958 	cmpnei	r16,zero,421
 4006a74:	04006958 	cmpnei	r16,zero,421
 4006a78:	04006f78 	rdprs	r16,zero,445
 4006a7c:	04006958 	cmpnei	r16,zero,421
 4006a80:	04006958 	cmpnei	r16,zero,421
 4006a84:	04006958 	cmpnei	r16,zero,421
 4006a88:	04006958 	cmpnei	r16,zero,421
 4006a8c:	04006958 	cmpnei	r16,zero,421
 4006a90:	04006958 	cmpnei	r16,zero,421
 4006a94:	04006958 	cmpnei	r16,zero,421
 4006a98:	04006958 	cmpnei	r16,zero,421
 4006a9c:	04006958 	cmpnei	r16,zero,421
 4006aa0:	04006958 	cmpnei	r16,zero,421
 4006aa4:	04006fec 	andhi	r16,zero,447
 4006aa8:	04006ccc 	andi	r16,zero,435
 4006aac:	04007094 	movui	r16,450
 4006ab0:	04007094 	movui	r16,450
 4006ab4:	04007094 	movui	r16,450
 4006ab8:	04006fcc 	andi	r16,zero,447
 4006abc:	04006ccc 	andi	r16,zero,435
 4006ac0:	04006958 	cmpnei	r16,zero,421
 4006ac4:	04006958 	cmpnei	r16,zero,421
 4006ac8:	04006fd8 	cmpnei	r16,zero,447
 4006acc:	04006958 	cmpnei	r16,zero,421
 4006ad0:	0400701c 	xori	r16,zero,448
 4006ad4:	04006c94 	movui	r16,434
 4006ad8:	0400711c 	xori	r16,zero,452
 4006adc:	04007168 	cmpgeui	r16,zero,453
 4006ae0:	04006958 	cmpnei	r16,zero,421
 4006ae4:	04007174 	movhi	r16,453
 4006ae8:	04006958 	cmpnei	r16,zero,421
 4006aec:	04006b00 	call	4006b0 <__reset+0x4006b0>
 4006af0:	04006958 	cmpnei	r16,zero,421
 4006af4:	04006958 	cmpnei	r16,zero,421
 4006af8:	040071d0 	cmplti	r16,zero,455
 4006afc:	84000414 	ori	r16,r16,16
 4006b00:	8080080c 	andi	r2,r16,32
 4006b04:	1000f51e 	bne	r2,zero,4006edc <___vfprintf_internal_r+0x708>
 4006b08:	8080040c 	andi	r2,r16,16
 4006b0c:	10042c26 	beq	r2,zero,4007bc0 <___vfprintf_internal_r+0x13ec>
 4006b10:	da012d17 	ldw	r8,1204(sp)
 4006b14:	002d883a 	mov	r22,zero
 4006b18:	00c00044 	movi	r3,1
 4006b1c:	45c00017 	ldw	r23,0(r8)
 4006b20:	42000104 	addi	r8,r8,4
 4006b24:	da012d15 	stw	r8,1204(sp)
 4006b28:	b805883a 	mov	r2,r23
 4006b2c:	d8012585 	stb	zero,1174(sp)
 4006b30:	e0000216 	blt	fp,zero,4006b3c <___vfprintf_internal_r+0x368>
 4006b34:	013fdfc4 	movi	r4,-129
 4006b38:	8120703a 	and	r16,r16,r4
 4006b3c:	1002671e 	bne	r2,zero,40074dc <___vfprintf_internal_r+0xd08>
 4006b40:	e002661e 	bne	fp,zero,40074dc <___vfprintf_internal_r+0xd08>
 4006b44:	18c03fcc 	andi	r3,r3,255
 4006b48:	1803561e 	bne	r3,zero,40078a4 <___vfprintf_internal_r+0x10d0>
 4006b4c:	8080004c 	andi	r2,r16,1
 4006b50:	10035426 	beq	r2,zero,40078a4 <___vfprintf_internal_r+0x10d0>
 4006b54:	da013917 	ldw	r8,1252(sp)
 4006b58:	00800c04 	movi	r2,48
 4006b5c:	d8810dc5 	stb	r2,1079(sp)
 4006b60:	da012b15 	stw	r8,1196(sp)
 4006b64:	dcc10dc4 	addi	r19,sp,1079
 4006b68:	d8812b17 	ldw	r2,1196(sp)
 4006b6c:	d8812815 	stw	r2,1184(sp)
 4006b70:	1700010e 	bge	r2,fp,4006b78 <___vfprintf_internal_r+0x3a4>
 4006b74:	df012815 	stw	fp,1184(sp)
 4006b78:	d8812583 	ldbu	r2,1174(sp)
 4006b7c:	df013115 	stw	fp,1220(sp)
 4006b80:	10803fcc 	andi	r2,r2,255
 4006b84:	1080201c 	xori	r2,r2,128
 4006b88:	10bfe004 	addi	r2,r2,-128
 4006b8c:	10000326 	beq	r2,zero,4006b9c <___vfprintf_internal_r+0x3c8>
 4006b90:	da012817 	ldw	r8,1184(sp)
 4006b94:	42000044 	addi	r8,r8,1
 4006b98:	da012815 	stw	r8,1184(sp)
 4006b9c:	80c0008c 	andi	r3,r16,2
 4006ba0:	d8c12a15 	stw	r3,1192(sp)
 4006ba4:	18000326 	beq	r3,zero,4006bb4 <___vfprintf_internal_r+0x3e0>
 4006ba8:	da012817 	ldw	r8,1184(sp)
 4006bac:	42000084 	addi	r8,r8,2
 4006bb0:	da012815 	stw	r8,1184(sp)
 4006bb4:	80c0210c 	andi	r3,r16,132
 4006bb8:	d8c12f15 	stw	r3,1212(sp)
 4006bbc:	1801941e 	bne	r3,zero,4007210 <___vfprintf_internal_r+0xa3c>
 4006bc0:	da012e17 	ldw	r8,1208(sp)
 4006bc4:	d8c12817 	ldw	r3,1184(sp)
 4006bc8:	40edc83a 	sub	r22,r8,r3
 4006bcc:	0581900e 	bge	zero,r22,4007210 <___vfprintf_internal_r+0xa3c>
 4006bd0:	02800404 	movi	r10,16
 4006bd4:	da011d17 	ldw	r8,1140(sp)
 4006bd8:	d8c11c17 	ldw	r3,1136(sp)
 4006bdc:	05c10374 	movhi	r23,1037
 4006be0:	bdc90d84 	addi	r23,r23,9270
 4006be4:	5580200e 	bge	r10,r22,4006c68 <___vfprintf_internal_r+0x494>
 4006be8:	dc813815 	stw	r18,1248(sp)
 4006bec:	5039883a 	mov	fp,r10
 4006bf0:	b825883a 	mov	r18,r23
 4006bf4:	050001c4 	movi	r20,7
 4006bf8:	b02f883a 	mov	r23,r22
 4006bfc:	802d883a 	mov	r22,r16
 4006c00:	dc012917 	ldw	r16,1188(sp)
 4006c04:	00000306 	br	4006c14 <___vfprintf_internal_r+0x440>
 4006c08:	bdfffc04 	addi	r23,r23,-16
 4006c0c:	4a400204 	addi	r9,r9,8
 4006c10:	e5c0110e 	bge	fp,r23,4006c58 <___vfprintf_internal_r+0x484>
 4006c14:	4c800015 	stw	r18,0(r9)
 4006c18:	4f000115 	stw	fp,4(r9)
 4006c1c:	42000404 	addi	r8,r8,16
 4006c20:	18c00044 	addi	r3,r3,1
 4006c24:	da011d15 	stw	r8,1140(sp)
 4006c28:	d8c11c15 	stw	r3,1136(sp)
 4006c2c:	a0fff60e 	bge	r20,r3,4006c08 <___vfprintf_internal_r+0x434>
 4006c30:	8809883a 	mov	r4,r17
 4006c34:	800b883a 	mov	r5,r16
 4006c38:	d9811b04 	addi	r6,sp,1132
 4006c3c:	40067a00 	call	40067a0 <__sprint_r>
 4006c40:	1000771e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4006c44:	bdfffc04 	addi	r23,r23,-16
 4006c48:	da011d17 	ldw	r8,1140(sp)
 4006c4c:	d8c11c17 	ldw	r3,1136(sp)
 4006c50:	da400404 	addi	r9,sp,16
 4006c54:	e5ffef16 	blt	fp,r23,4006c14 <___vfprintf_internal_r+0x440>
 4006c58:	b021883a 	mov	r16,r22
 4006c5c:	b82d883a 	mov	r22,r23
 4006c60:	902f883a 	mov	r23,r18
 4006c64:	dc813817 	ldw	r18,1248(sp)
 4006c68:	4dc00015 	stw	r23,0(r9)
 4006c6c:	4d800115 	stw	r22,4(r9)
 4006c70:	4591883a 	add	r8,r8,r22
 4006c74:	18c00044 	addi	r3,r3,1
 4006c78:	da011d15 	stw	r8,1140(sp)
 4006c7c:	d8c11c15 	stw	r3,1136(sp)
 4006c80:	008001c4 	movi	r2,7
 4006c84:	10c36d16 	blt	r2,r3,4007a3c <___vfprintf_internal_r+0x1268>
 4006c88:	4a400204 	addi	r9,r9,8
 4006c8c:	00016206 	br	4007218 <___vfprintf_internal_r+0xa44>
 4006c90:	84000414 	ori	r16,r16,16
 4006c94:	8080080c 	andi	r2,r16,32
 4006c98:	1000801e 	bne	r2,zero,4006e9c <___vfprintf_internal_r+0x6c8>
 4006c9c:	8080040c 	andi	r2,r16,16
 4006ca0:	1003da26 	beq	r2,zero,4007c0c <___vfprintf_internal_r+0x1438>
 4006ca4:	d8c12d17 	ldw	r3,1204(sp)
 4006ca8:	002d883a 	mov	r22,zero
 4006cac:	1dc00017 	ldw	r23,0(r3)
 4006cb0:	18c00104 	addi	r3,r3,4
 4006cb4:	d8c12d15 	stw	r3,1204(sp)
 4006cb8:	b805883a 	mov	r2,r23
 4006cbc:	0007883a 	mov	r3,zero
 4006cc0:	d8012585 	stb	zero,1174(sp)
 4006cc4:	003f9a06 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4006cc8:	84000414 	ori	r16,r16,16
 4006ccc:	8080080c 	andi	r2,r16,32
 4006cd0:	10007b1e 	bne	r2,zero,4006ec0 <___vfprintf_internal_r+0x6ec>
 4006cd4:	8080040c 	andi	r2,r16,16
 4006cd8:	1003ed26 	beq	r2,zero,4007c90 <___vfprintf_internal_r+0x14bc>
 4006cdc:	d9012d17 	ldw	r4,1204(sp)
 4006ce0:	25c00017 	ldw	r23,0(r4)
 4006ce4:	21000104 	addi	r4,r4,4
 4006ce8:	d9012d15 	stw	r4,1204(sp)
 4006cec:	b82dd7fa 	srai	r22,r23,31
 4006cf0:	b005883a 	mov	r2,r22
 4006cf4:	1003230e 	bge	r2,zero,4007984 <___vfprintf_internal_r+0x11b0>
 4006cf8:	05efc83a 	sub	r23,zero,r23
 4006cfc:	b804c03a 	cmpne	r2,r23,zero
 4006d00:	05adc83a 	sub	r22,zero,r22
 4006d04:	b0adc83a 	sub	r22,r22,r2
 4006d08:	00800b44 	movi	r2,45
 4006d0c:	d8812585 	stb	r2,1174(sp)
 4006d10:	00c00044 	movi	r3,1
 4006d14:	bd84b03a 	or	r2,r23,r22
 4006d18:	003f8506 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4006d1c:	da012e17 	ldw	r8,1208(sp)
 4006d20:	d8812d15 	stw	r2,1204(sp)
 4006d24:	0211c83a 	sub	r8,zero,r8
 4006d28:	da012e15 	stw	r8,1208(sp)
 4006d2c:	84000114 	ori	r16,r16,4
 4006d30:	ac800007 	ldb	r18,0(r21)
 4006d34:	003f0506 	br	400694c <___vfprintf_internal_r+0x178>
 4006d38:	d9013017 	ldw	r4,1216(sp)
 4006d3c:	d9412917 	ldw	r5,1188(sp)
 4006d40:	40085f00 	call	40085f0 <__swsetup_r>
 4006d44:	10003d1e 	bne	r2,zero,4006e3c <___vfprintf_internal_r+0x668>
 4006d48:	d8c12917 	ldw	r3,1188(sp)
 4006d4c:	1880030b 	ldhu	r2,12(r3)
 4006d50:	00c00284 	movi	r3,10
 4006d54:	1100068c 	andi	r4,r2,26
 4006d58:	20fec21e 	bne	r4,r3,4006864 <___vfprintf_internal_r+0x90>
 4006d5c:	d9012917 	ldw	r4,1188(sp)
 4006d60:	20c0038b 	ldhu	r3,14(r4)
 4006d64:	193fffcc 	andi	r4,r3,65535
 4006d68:	2120001c 	xori	r4,r4,32768
 4006d6c:	21200004 	addi	r4,r4,-32768
 4006d70:	203ebc16 	blt	r4,zero,4006864 <___vfprintf_internal_r+0x90>
 4006d74:	da012917 	ldw	r8,1188(sp)
 4006d78:	d9013017 	ldw	r4,1216(sp)
 4006d7c:	d9c12d17 	ldw	r7,1204(sp)
 4006d80:	42800717 	ldw	r10,28(r8)
 4006d84:	42400917 	ldw	r9,36(r8)
 4006d88:	10bfff4c 	andi	r2,r2,65533
 4006d8c:	02010004 	movi	r8,1024
 4006d90:	d881070d 	sth	r2,1052(sp)
 4006d94:	d9410404 	addi	r5,sp,1040
 4006d98:	d8800404 	addi	r2,sp,16
 4006d9c:	800d883a 	mov	r6,r16
 4006da0:	d8c1078d 	sth	r3,1054(sp)
 4006da4:	da810b15 	stw	r10,1068(sp)
 4006da8:	da410d15 	stw	r9,1076(sp)
 4006dac:	d8810415 	stw	r2,1040(sp)
 4006db0:	d8810815 	stw	r2,1056(sp)
 4006db4:	da010615 	stw	r8,1048(sp)
 4006db8:	da010915 	stw	r8,1060(sp)
 4006dbc:	d8010a15 	stw	zero,1064(sp)
 4006dc0:	40067d40 	call	40067d4 <___vfprintf_internal_r>
 4006dc4:	d8812c15 	stw	r2,1200(sp)
 4006dc8:	10000416 	blt	r2,zero,4006ddc <___vfprintf_internal_r+0x608>
 4006dcc:	d9013017 	ldw	r4,1216(sp)
 4006dd0:	d9410404 	addi	r5,sp,1040
 4006dd4:	4009f880 	call	4009f88 <_fflush_r>
 4006dd8:	1005d81e 	bne	r2,zero,400853c <___vfprintf_internal_r+0x1d68>
 4006ddc:	d881070b 	ldhu	r2,1052(sp)
 4006de0:	1080100c 	andi	r2,r2,64
 4006de4:	10bfffcc 	andi	r2,r2,65535
 4006de8:	10a0001c 	xori	r2,r2,32768
 4006dec:	10a00004 	addi	r2,r2,-32768
 4006df0:	10001426 	beq	r2,zero,4006e44 <___vfprintf_internal_r+0x670>
 4006df4:	d8c12917 	ldw	r3,1188(sp)
 4006df8:	1880030b 	ldhu	r2,12(r3)
 4006dfc:	10801014 	ori	r2,r2,64
 4006e00:	1880030d 	sth	r2,12(r3)
 4006e04:	00000f06 	br	4006e44 <___vfprintf_internal_r+0x670>
 4006e08:	d8811d17 	ldw	r2,1140(sp)
 4006e0c:	10000426 	beq	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4006e10:	d9013017 	ldw	r4,1216(sp)
 4006e14:	d9412917 	ldw	r5,1188(sp)
 4006e18:	d9811b04 	addi	r6,sp,1132
 4006e1c:	40067a00 	call	40067a0 <__sprint_r>
 4006e20:	d8c12917 	ldw	r3,1188(sp)
 4006e24:	1880030b 	ldhu	r2,12(r3)
 4006e28:	1080100c 	andi	r2,r2,64
 4006e2c:	10bfffcc 	andi	r2,r2,65535
 4006e30:	10a0001c 	xori	r2,r2,32768
 4006e34:	10a00004 	addi	r2,r2,-32768
 4006e38:	10000226 	beq	r2,zero,4006e44 <___vfprintf_internal_r+0x670>
 4006e3c:	00bfffc4 	movi	r2,-1
 4006e40:	d8812c15 	stw	r2,1200(sp)
 4006e44:	d8812c17 	ldw	r2,1200(sp)
 4006e48:	dfc14617 	ldw	ra,1304(sp)
 4006e4c:	df014517 	ldw	fp,1300(sp)
 4006e50:	ddc14417 	ldw	r23,1296(sp)
 4006e54:	dd814317 	ldw	r22,1292(sp)
 4006e58:	dd414217 	ldw	r21,1288(sp)
 4006e5c:	dd014117 	ldw	r20,1284(sp)
 4006e60:	dcc14017 	ldw	r19,1280(sp)
 4006e64:	dc813f17 	ldw	r18,1276(sp)
 4006e68:	dc413e17 	ldw	r17,1272(sp)
 4006e6c:	dc013d17 	ldw	r16,1268(sp)
 4006e70:	dec14704 	addi	sp,sp,1308
 4006e74:	f800283a 	ret
 4006e78:	d9412917 	ldw	r5,1188(sp)
 4006e7c:	8809883a 	mov	r4,r17
 4006e80:	d9811b04 	addi	r6,sp,1132
 4006e84:	40067a00 	call	40067a0 <__sprint_r>
 4006e88:	103fe51e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4006e8c:	da400404 	addi	r9,sp,16
 4006e90:	003e9d06 	br	4006908 <___vfprintf_internal_r+0x134>
 4006e94:	400a2300 	call	400a230 <__sinit>
 4006e98:	003e6606 	br	4006834 <___vfprintf_internal_r+0x60>
 4006e9c:	d8812d17 	ldw	r2,1204(sp)
 4006ea0:	0007883a 	mov	r3,zero
 4006ea4:	15c00017 	ldw	r23,0(r2)
 4006ea8:	15800117 	ldw	r22,4(r2)
 4006eac:	10800204 	addi	r2,r2,8
 4006eb0:	d8812d15 	stw	r2,1204(sp)
 4006eb4:	d8012585 	stb	zero,1174(sp)
 4006eb8:	bd84b03a 	or	r2,r23,r22
 4006ebc:	003f1c06 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4006ec0:	d8c12d17 	ldw	r3,1204(sp)
 4006ec4:	18800117 	ldw	r2,4(r3)
 4006ec8:	1dc00017 	ldw	r23,0(r3)
 4006ecc:	18c00204 	addi	r3,r3,8
 4006ed0:	d8c12d15 	stw	r3,1204(sp)
 4006ed4:	102d883a 	mov	r22,r2
 4006ed8:	003f8606 	br	4006cf4 <___vfprintf_internal_r+0x520>
 4006edc:	d8c12d17 	ldw	r3,1204(sp)
 4006ee0:	d9012d17 	ldw	r4,1204(sp)
 4006ee4:	1dc00017 	ldw	r23,0(r3)
 4006ee8:	1d800117 	ldw	r22,4(r3)
 4006eec:	21000204 	addi	r4,r4,8
 4006ef0:	00c00044 	movi	r3,1
 4006ef4:	d9012d15 	stw	r4,1204(sp)
 4006ef8:	bd84b03a 	or	r2,r23,r22
 4006efc:	d8012585 	stb	zero,1174(sp)
 4006f00:	003f0b06 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4006f04:	d9812585 	stb	r6,1174(sp)
 4006f08:	ac800007 	ldb	r18,0(r21)
 4006f0c:	003e8f06 	br	400694c <___vfprintf_internal_r+0x178>
 4006f10:	ac800007 	ldb	r18,0(r21)
 4006f14:	a9000044 	addi	r4,r21,1
 4006f18:	92857d26 	beq	r18,r10,4008510 <___vfprintf_internal_r+0x1d3c>
 4006f1c:	90bff404 	addi	r2,r18,-48
 4006f20:	0039883a 	mov	fp,zero
 4006f24:	28800736 	bltu	r5,r2,4006f44 <___vfprintf_internal_r+0x770>
 4006f28:	24800007 	ldb	r18,0(r4)
 4006f2c:	e70002a4 	muli	fp,fp,10
 4006f30:	21000044 	addi	r4,r4,1
 4006f34:	1739883a 	add	fp,r2,fp
 4006f38:	90bff404 	addi	r2,r18,-48
 4006f3c:	28bffa2e 	bgeu	r5,r2,4006f28 <___vfprintf_internal_r+0x754>
 4006f40:	e0044216 	blt	fp,zero,400804c <___vfprintf_internal_r+0x1878>
 4006f44:	202b883a 	mov	r21,r4
 4006f48:	003e8106 	br	4006950 <___vfprintf_internal_r+0x17c>
 4006f4c:	d8812587 	ldb	r2,1174(sp)
 4006f50:	1003581e 	bne	r2,zero,4007cb4 <___vfprintf_internal_r+0x14e0>
 4006f54:	dac12585 	stb	r11,1174(sp)
 4006f58:	ac800007 	ldb	r18,0(r21)
 4006f5c:	003e7b06 	br	400694c <___vfprintf_internal_r+0x178>
 4006f60:	84000054 	ori	r16,r16,1
 4006f64:	ac800007 	ldb	r18,0(r21)
 4006f68:	003e7806 	br	400694c <___vfprintf_internal_r+0x178>
 4006f6c:	84002014 	ori	r16,r16,128
 4006f70:	ac800007 	ldb	r18,0(r21)
 4006f74:	003e7506 	br	400694c <___vfprintf_internal_r+0x178>
 4006f78:	02010374 	movhi	r8,1037
 4006f7c:	42090104 	addi	r8,r8,9220
 4006f80:	da013615 	stw	r8,1240(sp)
 4006f84:	8080080c 	andi	r2,r16,32
 4006f88:	10009626 	beq	r2,zero,40071e4 <___vfprintf_internal_r+0xa10>
 4006f8c:	d8812d17 	ldw	r2,1204(sp)
 4006f90:	15c00017 	ldw	r23,0(r2)
 4006f94:	15800117 	ldw	r22,4(r2)
 4006f98:	10800204 	addi	r2,r2,8
 4006f9c:	d8812d15 	stw	r2,1204(sp)
 4006fa0:	8080004c 	andi	r2,r16,1
 4006fa4:	1002ae26 	beq	r2,zero,4007a60 <___vfprintf_internal_r+0x128c>
 4006fa8:	bd84b03a 	or	r2,r23,r22
 4006fac:	10032a26 	beq	r2,zero,4007c58 <___vfprintf_internal_r+0x1484>
 4006fb0:	00c00c04 	movi	r3,48
 4006fb4:	d8c12505 	stb	r3,1172(sp)
 4006fb8:	dc812545 	stb	r18,1173(sp)
 4006fbc:	84000094 	ori	r16,r16,2
 4006fc0:	00c00084 	movi	r3,2
 4006fc4:	d8012585 	stb	zero,1174(sp)
 4006fc8:	003ed906 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4006fcc:	84001014 	ori	r16,r16,64
 4006fd0:	ac800007 	ldb	r18,0(r21)
 4006fd4:	003e5d06 	br	400694c <___vfprintf_internal_r+0x178>
 4006fd8:	ac800007 	ldb	r18,0(r21)
 4006fdc:	a805883a 	mov	r2,r21
 4006fe0:	91c43226 	beq	r18,r7,40080ac <___vfprintf_internal_r+0x18d8>
 4006fe4:	84000414 	ori	r16,r16,16
 4006fe8:	003e5806 	br	400694c <___vfprintf_internal_r+0x178>
 4006fec:	d8c12d17 	ldw	r3,1204(sp)
 4006ff0:	02000044 	movi	r8,1
 4006ff4:	da012815 	stw	r8,1184(sp)
 4006ff8:	18800017 	ldw	r2,0(r3)
 4006ffc:	18c00104 	addi	r3,r3,4
 4007000:	d8012585 	stb	zero,1174(sp)
 4007004:	d8810405 	stb	r2,1040(sp)
 4007008:	d8c12d15 	stw	r3,1204(sp)
 400700c:	da012b15 	stw	r8,1196(sp)
 4007010:	dcc10404 	addi	r19,sp,1040
 4007014:	d8013115 	stw	zero,1220(sp)
 4007018:	003ee006 	br	4006b9c <___vfprintf_internal_r+0x3c8>
 400701c:	8080080c 	andi	r2,r16,32
 4007020:	10031026 	beq	r2,zero,4007c64 <___vfprintf_internal_r+0x1490>
 4007024:	d9012d17 	ldw	r4,1204(sp)
 4007028:	da012c17 	ldw	r8,1200(sp)
 400702c:	20800017 	ldw	r2,0(r4)
 4007030:	4007d7fa 	srai	r3,r8,31
 4007034:	21000104 	addi	r4,r4,4
 4007038:	d9012d15 	stw	r4,1204(sp)
 400703c:	12000015 	stw	r8,0(r2)
 4007040:	10c00115 	stw	r3,4(r2)
 4007044:	003e1906 	br	40068ac <___vfprintf_internal_r+0xd8>
 4007048:	da012d17 	ldw	r8,1204(sp)
 400704c:	d9012d17 	ldw	r4,1204(sp)
 4007050:	42000017 	ldw	r8,0(r8)
 4007054:	20800104 	addi	r2,r4,4
 4007058:	da012e15 	stw	r8,1208(sp)
 400705c:	403f2f16 	blt	r8,zero,4006d1c <___vfprintf_internal_r+0x548>
 4007060:	d8812d15 	stw	r2,1204(sp)
 4007064:	ac800007 	ldb	r18,0(r21)
 4007068:	003e3806 	br	400694c <___vfprintf_internal_r+0x178>
 400706c:	0009883a 	mov	r4,zero
 4007070:	90bff404 	addi	r2,r18,-48
 4007074:	ac800007 	ldb	r18,0(r21)
 4007078:	210002a4 	muli	r4,r4,10
 400707c:	ad400044 	addi	r21,r21,1
 4007080:	2089883a 	add	r4,r4,r2
 4007084:	90bff404 	addi	r2,r18,-48
 4007088:	28bffa2e 	bgeu	r5,r2,4007074 <___vfprintf_internal_r+0x8a0>
 400708c:	d9012e15 	stw	r4,1208(sp)
 4007090:	003e2f06 	br	4006950 <___vfprintf_internal_r+0x17c>
 4007094:	8080020c 	andi	r2,r16,8
 4007098:	1002d426 	beq	r2,zero,4007bec <___vfprintf_internal_r+0x1418>
 400709c:	d8c12d17 	ldw	r3,1204(sp)
 40070a0:	1d800017 	ldw	r22,0(r3)
 40070a4:	1d000117 	ldw	r20,4(r3)
 40070a8:	18c00204 	addi	r3,r3,8
 40070ac:	d8c12d15 	stw	r3,1204(sp)
 40070b0:	dd813315 	stw	r22,1228(sp)
 40070b4:	dd013415 	stw	r20,1232(sp)
 40070b8:	b009883a 	mov	r4,r22
 40070bc:	a00b883a 	mov	r5,r20
 40070c0:	da413c15 	stw	r9,1264(sp)
 40070c4:	400d2680 	call	400d268 <__isinfd>
 40070c8:	da413c17 	ldw	r9,1264(sp)
 40070cc:	b009883a 	mov	r4,r22
 40070d0:	a00b883a 	mov	r5,r20
 40070d4:	10035726 	beq	r2,zero,4007e34 <___vfprintf_internal_r+0x1660>
 40070d8:	000d883a 	mov	r6,zero
 40070dc:	000f883a 	mov	r7,zero
 40070e0:	400e7b80 	call	400e7b8 <__ltdf2>
 40070e4:	da413c17 	ldw	r9,1264(sp)
 40070e8:	10041b16 	blt	r2,zero,4008158 <___vfprintf_internal_r+0x1984>
 40070ec:	d8812583 	ldbu	r2,1174(sp)
 40070f0:	00c011c4 	movi	r3,71
 40070f4:	1c830b16 	blt	r3,r18,4007d24 <___vfprintf_internal_r+0x1550>
 40070f8:	04c10374 	movhi	r19,1037
 40070fc:	9cc8fd04 	addi	r19,r19,9204
 4007100:	020000c4 	movi	r8,3
 4007104:	00ffdfc4 	movi	r3,-129
 4007108:	da012815 	stw	r8,1184(sp)
 400710c:	80e0703a 	and	r16,r16,r3
 4007110:	da012b15 	stw	r8,1196(sp)
 4007114:	d8013115 	stw	zero,1220(sp)
 4007118:	003e9906 	br	4006b80 <___vfprintf_internal_r+0x3ac>
 400711c:	d8812d17 	ldw	r2,1204(sp)
 4007120:	d8c12d17 	ldw	r3,1204(sp)
 4007124:	02010374 	movhi	r8,1037
 4007128:	42090604 	addi	r8,r8,9240
 400712c:	15c00017 	ldw	r23,0(r2)
 4007130:	00800c04 	movi	r2,48
 4007134:	18c00104 	addi	r3,r3,4
 4007138:	d8812505 	stb	r2,1172(sp)
 400713c:	00801e04 	movi	r2,120
 4007140:	d8812545 	stb	r2,1173(sp)
 4007144:	d8c12d15 	stw	r3,1204(sp)
 4007148:	002d883a 	mov	r22,zero
 400714c:	84000094 	ori	r16,r16,2
 4007150:	da013615 	stw	r8,1240(sp)
 4007154:	00c00084 	movi	r3,2
 4007158:	04801e04 	movi	r18,120
 400715c:	b805883a 	mov	r2,r23
 4007160:	d8012585 	stb	zero,1174(sp)
 4007164:	003e7206 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4007168:	84000814 	ori	r16,r16,32
 400716c:	ac800007 	ldb	r18,0(r21)
 4007170:	003df606 	br	400694c <___vfprintf_internal_r+0x178>
 4007174:	d8812d17 	ldw	r2,1204(sp)
 4007178:	d8012585 	stb	zero,1174(sp)
 400717c:	14c00017 	ldw	r19,0(r2)
 4007180:	15c00104 	addi	r23,r2,4
 4007184:	98040126 	beq	r19,zero,400818c <___vfprintf_internal_r+0x19b8>
 4007188:	9809883a 	mov	r4,r19
 400718c:	e003dd16 	blt	fp,zero,4008104 <___vfprintf_internal_r+0x1930>
 4007190:	000b883a 	mov	r5,zero
 4007194:	e00d883a 	mov	r6,fp
 4007198:	da413c15 	stw	r9,1264(sp)
 400719c:	400b8d00 	call	400b8d0 <memchr>
 40071a0:	da413c17 	ldw	r9,1264(sp)
 40071a4:	10042e26 	beq	r2,zero,4008260 <___vfprintf_internal_r+0x1a8c>
 40071a8:	14c5c83a 	sub	r2,r2,r19
 40071ac:	d8812b15 	stw	r2,1196(sp)
 40071b0:	e083790e 	bge	fp,r2,4007f98 <___vfprintf_internal_r+0x17c4>
 40071b4:	df012815 	stw	fp,1184(sp)
 40071b8:	e0049516 	blt	fp,zero,4008410 <___vfprintf_internal_r+0x1c3c>
 40071bc:	d8812583 	ldbu	r2,1174(sp)
 40071c0:	df012b15 	stw	fp,1196(sp)
 40071c4:	ddc12d15 	stw	r23,1204(sp)
 40071c8:	d8013115 	stw	zero,1220(sp)
 40071cc:	003e6c06 	br	4006b80 <___vfprintf_internal_r+0x3ac>
 40071d0:	02010374 	movhi	r8,1037
 40071d4:	42090604 	addi	r8,r8,9240
 40071d8:	da013615 	stw	r8,1240(sp)
 40071dc:	8080080c 	andi	r2,r16,32
 40071e0:	103f6a1e 	bne	r2,zero,4006f8c <___vfprintf_internal_r+0x7b8>
 40071e4:	8080040c 	andi	r2,r16,16
 40071e8:	10029326 	beq	r2,zero,4007c38 <___vfprintf_internal_r+0x1464>
 40071ec:	d8c12d17 	ldw	r3,1204(sp)
 40071f0:	002d883a 	mov	r22,zero
 40071f4:	1dc00017 	ldw	r23,0(r3)
 40071f8:	18c00104 	addi	r3,r3,4
 40071fc:	d8c12d15 	stw	r3,1204(sp)
 4007200:	003f6706 	br	4006fa0 <___vfprintf_internal_r+0x7cc>
 4007204:	84000214 	ori	r16,r16,8
 4007208:	ac800007 	ldb	r18,0(r21)
 400720c:	003dcf06 	br	400694c <___vfprintf_internal_r+0x178>
 4007210:	da011d17 	ldw	r8,1140(sp)
 4007214:	d8c11c17 	ldw	r3,1136(sp)
 4007218:	d8812587 	ldb	r2,1174(sp)
 400721c:	10000b26 	beq	r2,zero,400724c <___vfprintf_internal_r+0xa78>
 4007220:	d8812584 	addi	r2,sp,1174
 4007224:	48800015 	stw	r2,0(r9)
 4007228:	00800044 	movi	r2,1
 400722c:	48800115 	stw	r2,4(r9)
 4007230:	4091883a 	add	r8,r8,r2
 4007234:	1887883a 	add	r3,r3,r2
 4007238:	da011d15 	stw	r8,1140(sp)
 400723c:	d8c11c15 	stw	r3,1136(sp)
 4007240:	008001c4 	movi	r2,7
 4007244:	10c18516 	blt	r2,r3,400785c <___vfprintf_internal_r+0x1088>
 4007248:	4a400204 	addi	r9,r9,8
 400724c:	d9012a17 	ldw	r4,1192(sp)
 4007250:	20000b26 	beq	r4,zero,4007280 <___vfprintf_internal_r+0xaac>
 4007254:	d8812504 	addi	r2,sp,1172
 4007258:	48800015 	stw	r2,0(r9)
 400725c:	00800084 	movi	r2,2
 4007260:	48800115 	stw	r2,4(r9)
 4007264:	4091883a 	add	r8,r8,r2
 4007268:	18c00044 	addi	r3,r3,1
 400726c:	da011d15 	stw	r8,1140(sp)
 4007270:	d8c11c15 	stw	r3,1136(sp)
 4007274:	008001c4 	movi	r2,7
 4007278:	10c18116 	blt	r2,r3,4007880 <___vfprintf_internal_r+0x10ac>
 400727c:	4a400204 	addi	r9,r9,8
 4007280:	d9012f17 	ldw	r4,1212(sp)
 4007284:	00802004 	movi	r2,128
 4007288:	2080fc26 	beq	r4,r2,400767c <___vfprintf_internal_r+0xea8>
 400728c:	d8813117 	ldw	r2,1220(sp)
 4007290:	d9012b17 	ldw	r4,1196(sp)
 4007294:	112fc83a 	sub	r23,r2,r4
 4007298:	05c02a0e 	bge	zero,r23,4007344 <___vfprintf_internal_r+0xb70>
 400729c:	07000404 	movi	fp,16
 40072a0:	05010374 	movhi	r20,1037
 40072a4:	a5091184 	addi	r20,r20,9286
 40072a8:	e5c01d0e 	bge	fp,r23,4007320 <___vfprintf_internal_r+0xb4c>
 40072ac:	dc812a15 	stw	r18,1192(sp)
 40072b0:	058001c4 	movi	r22,7
 40072b4:	a025883a 	mov	r18,r20
 40072b8:	8029883a 	mov	r20,r16
 40072bc:	dc012917 	ldw	r16,1188(sp)
 40072c0:	00000306 	br	40072d0 <___vfprintf_internal_r+0xafc>
 40072c4:	bdfffc04 	addi	r23,r23,-16
 40072c8:	4a400204 	addi	r9,r9,8
 40072cc:	e5c0110e 	bge	fp,r23,4007314 <___vfprintf_internal_r+0xb40>
 40072d0:	4c800015 	stw	r18,0(r9)
 40072d4:	4f000115 	stw	fp,4(r9)
 40072d8:	42000404 	addi	r8,r8,16
 40072dc:	18c00044 	addi	r3,r3,1
 40072e0:	da011d15 	stw	r8,1140(sp)
 40072e4:	d8c11c15 	stw	r3,1136(sp)
 40072e8:	b0fff60e 	bge	r22,r3,40072c4 <___vfprintf_internal_r+0xaf0>
 40072ec:	8809883a 	mov	r4,r17
 40072f0:	800b883a 	mov	r5,r16
 40072f4:	d9811b04 	addi	r6,sp,1132
 40072f8:	40067a00 	call	40067a0 <__sprint_r>
 40072fc:	103ec81e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007300:	bdfffc04 	addi	r23,r23,-16
 4007304:	da011d17 	ldw	r8,1140(sp)
 4007308:	d8c11c17 	ldw	r3,1136(sp)
 400730c:	da400404 	addi	r9,sp,16
 4007310:	e5ffef16 	blt	fp,r23,40072d0 <___vfprintf_internal_r+0xafc>
 4007314:	a021883a 	mov	r16,r20
 4007318:	9029883a 	mov	r20,r18
 400731c:	dc812a17 	ldw	r18,1192(sp)
 4007320:	4d000015 	stw	r20,0(r9)
 4007324:	4dc00115 	stw	r23,4(r9)
 4007328:	45d1883a 	add	r8,r8,r23
 400732c:	18c00044 	addi	r3,r3,1
 4007330:	da011d15 	stw	r8,1140(sp)
 4007334:	d8c11c15 	stw	r3,1136(sp)
 4007338:	008001c4 	movi	r2,7
 400733c:	10c13e16 	blt	r2,r3,4007838 <___vfprintf_internal_r+0x1064>
 4007340:	4a400204 	addi	r9,r9,8
 4007344:	8080400c 	andi	r2,r16,256
 4007348:	1000831e 	bne	r2,zero,4007558 <___vfprintf_internal_r+0xd84>
 400734c:	d8812b17 	ldw	r2,1196(sp)
 4007350:	4cc00015 	stw	r19,0(r9)
 4007354:	48800115 	stw	r2,4(r9)
 4007358:	4091883a 	add	r8,r8,r2
 400735c:	18c00044 	addi	r3,r3,1
 4007360:	da011d15 	stw	r8,1140(sp)
 4007364:	d8c11c15 	stw	r3,1136(sp)
 4007368:	008001c4 	movi	r2,7
 400736c:	10c05316 	blt	r2,r3,40074bc <___vfprintf_internal_r+0xce8>
 4007370:	4a400204 	addi	r9,r9,8
 4007374:	8400010c 	andi	r16,r16,4
 4007378:	80002e26 	beq	r16,zero,4007434 <___vfprintf_internal_r+0xc60>
 400737c:	d8812e17 	ldw	r2,1208(sp)
 4007380:	d8c12817 	ldw	r3,1184(sp)
 4007384:	10e1c83a 	sub	r16,r2,r3
 4007388:	04002a0e 	bge	zero,r16,4007434 <___vfprintf_internal_r+0xc60>
 400738c:	04800404 	movi	r18,16
 4007390:	d8c11c17 	ldw	r3,1136(sp)
 4007394:	05c10374 	movhi	r23,1037
 4007398:	bdc90d84 	addi	r23,r23,9270
 400739c:	9400170e 	bge	r18,r16,40073fc <___vfprintf_internal_r+0xc28>
 40073a0:	04c001c4 	movi	r19,7
 40073a4:	dd012917 	ldw	r20,1188(sp)
 40073a8:	00000306 	br	40073b8 <___vfprintf_internal_r+0xbe4>
 40073ac:	843ffc04 	addi	r16,r16,-16
 40073b0:	4a400204 	addi	r9,r9,8
 40073b4:	9400110e 	bge	r18,r16,40073fc <___vfprintf_internal_r+0xc28>
 40073b8:	4dc00015 	stw	r23,0(r9)
 40073bc:	4c800115 	stw	r18,4(r9)
 40073c0:	42000404 	addi	r8,r8,16
 40073c4:	18c00044 	addi	r3,r3,1
 40073c8:	da011d15 	stw	r8,1140(sp)
 40073cc:	d8c11c15 	stw	r3,1136(sp)
 40073d0:	98fff60e 	bge	r19,r3,40073ac <___vfprintf_internal_r+0xbd8>
 40073d4:	8809883a 	mov	r4,r17
 40073d8:	a00b883a 	mov	r5,r20
 40073dc:	d9811b04 	addi	r6,sp,1132
 40073e0:	40067a00 	call	40067a0 <__sprint_r>
 40073e4:	103e8e1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 40073e8:	843ffc04 	addi	r16,r16,-16
 40073ec:	da011d17 	ldw	r8,1140(sp)
 40073f0:	d8c11c17 	ldw	r3,1136(sp)
 40073f4:	da400404 	addi	r9,sp,16
 40073f8:	943fef16 	blt	r18,r16,40073b8 <___vfprintf_internal_r+0xbe4>
 40073fc:	4dc00015 	stw	r23,0(r9)
 4007400:	4c000115 	stw	r16,4(r9)
 4007404:	8211883a 	add	r8,r16,r8
 4007408:	18c00044 	addi	r3,r3,1
 400740c:	da011d15 	stw	r8,1140(sp)
 4007410:	d8c11c15 	stw	r3,1136(sp)
 4007414:	008001c4 	movi	r2,7
 4007418:	10c0060e 	bge	r2,r3,4007434 <___vfprintf_internal_r+0xc60>
 400741c:	d9412917 	ldw	r5,1188(sp)
 4007420:	8809883a 	mov	r4,r17
 4007424:	d9811b04 	addi	r6,sp,1132
 4007428:	40067a00 	call	40067a0 <__sprint_r>
 400742c:	103e7c1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007430:	da011d17 	ldw	r8,1140(sp)
 4007434:	dd012817 	ldw	r20,1184(sp)
 4007438:	d9012e17 	ldw	r4,1208(sp)
 400743c:	a100010e 	bge	r20,r4,4007444 <___vfprintf_internal_r+0xc70>
 4007440:	2029883a 	mov	r20,r4
 4007444:	d8812c17 	ldw	r2,1200(sp)
 4007448:	1505883a 	add	r2,r2,r20
 400744c:	d8812c15 	stw	r2,1200(sp)
 4007450:	4000b91e 	bne	r8,zero,4007738 <___vfprintf_internal_r+0xf64>
 4007454:	d8011c15 	stw	zero,1136(sp)
 4007458:	a8800007 	ldb	r2,0(r21)
 400745c:	da400404 	addi	r9,sp,16
 4007460:	103d141e 	bne	r2,zero,40068b4 <___vfprintf_internal_r+0xe0>
 4007464:	a825883a 	mov	r18,r21
 4007468:	003d2a06 	br	4006914 <___vfprintf_internal_r+0x140>
 400746c:	d9412917 	ldw	r5,1188(sp)
 4007470:	8809883a 	mov	r4,r17
 4007474:	d9811b04 	addi	r6,sp,1132
 4007478:	40067a00 	call	40067a0 <__sprint_r>
 400747c:	103e681e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007480:	da011d17 	ldw	r8,1140(sp)
 4007484:	da400404 	addi	r9,sp,16
 4007488:	8080004c 	andi	r2,r16,1
 400748c:	103fb926 	beq	r2,zero,4007374 <___vfprintf_internal_r+0xba0>
 4007490:	d8c11c17 	ldw	r3,1136(sp)
 4007494:	d9013717 	ldw	r4,1244(sp)
 4007498:	00800044 	movi	r2,1
 400749c:	48800115 	stw	r2,4(r9)
 40074a0:	49000015 	stw	r4,0(r9)
 40074a4:	4091883a 	add	r8,r8,r2
 40074a8:	1887883a 	add	r3,r3,r2
 40074ac:	da011d15 	stw	r8,1140(sp)
 40074b0:	d8c11c15 	stw	r3,1136(sp)
 40074b4:	008001c4 	movi	r2,7
 40074b8:	10ffad0e 	bge	r2,r3,4007370 <___vfprintf_internal_r+0xb9c>
 40074bc:	d9412917 	ldw	r5,1188(sp)
 40074c0:	8809883a 	mov	r4,r17
 40074c4:	d9811b04 	addi	r6,sp,1132
 40074c8:	40067a00 	call	40067a0 <__sprint_r>
 40074cc:	103e541e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 40074d0:	da400404 	addi	r9,sp,16
 40074d4:	da011d17 	ldw	r8,1140(sp)
 40074d8:	003fa606 	br	4007374 <___vfprintf_internal_r+0xba0>
 40074dc:	18803fcc 	andi	r2,r3,255
 40074e0:	00c00044 	movi	r3,1
 40074e4:	10c10126 	beq	r2,r3,40078ec <___vfprintf_internal_r+0x1118>
 40074e8:	00c00084 	movi	r3,2
 40074ec:	10c0f026 	beq	r2,r3,40078b0 <___vfprintf_internal_r+0x10dc>
 40074f0:	d8c10dc4 	addi	r3,sp,1079
 40074f4:	b808d0fa 	srli	r4,r23,3
 40074f8:	b00a977a 	slli	r5,r22,29
 40074fc:	b02cd0fa 	srli	r22,r22,3
 4007500:	bdc001cc 	andi	r23,r23,7
 4007504:	b8800c04 	addi	r2,r23,48
 4007508:	292eb03a 	or	r23,r5,r4
 400750c:	18800005 	stb	r2,0(r3)
 4007510:	bd88b03a 	or	r4,r23,r22
 4007514:	1827883a 	mov	r19,r3
 4007518:	18ffffc4 	addi	r3,r3,-1
 400751c:	203ff51e 	bne	r4,zero,40074f4 <___vfprintf_internal_r+0xd20>
 4007520:	8100004c 	andi	r4,r16,1
 4007524:	980b883a 	mov	r5,r19
 4007528:	20000726 	beq	r4,zero,4007548 <___vfprintf_internal_r+0xd74>
 400752c:	10803fcc 	andi	r2,r2,255
 4007530:	1080201c 	xori	r2,r2,128
 4007534:	10bfe004 	addi	r2,r2,-128
 4007538:	01000c04 	movi	r4,48
 400753c:	11000226 	beq	r2,r4,4007548 <___vfprintf_internal_r+0xd74>
 4007540:	1827883a 	mov	r19,r3
 4007544:	293fffc5 	stb	r4,-1(r5)
 4007548:	d8812717 	ldw	r2,1180(sp)
 400754c:	14c5c83a 	sub	r2,r2,r19
 4007550:	d8812b15 	stw	r2,1196(sp)
 4007554:	003d8406 	br	4006b68 <___vfprintf_internal_r+0x394>
 4007558:	00801944 	movi	r2,101
 400755c:	14807c0e 	bge	r2,r18,4007750 <___vfprintf_internal_r+0xf7c>
 4007560:	d9013317 	ldw	r4,1228(sp)
 4007564:	d9413417 	ldw	r5,1232(sp)
 4007568:	000d883a 	mov	r6,zero
 400756c:	000f883a 	mov	r7,zero
 4007570:	d8c13b15 	stw	r3,1260(sp)
 4007574:	da013a15 	stw	r8,1256(sp)
 4007578:	da413c15 	stw	r9,1264(sp)
 400757c:	400e69c0 	call	400e69c <__eqdf2>
 4007580:	d8c13b17 	ldw	r3,1260(sp)
 4007584:	da013a17 	ldw	r8,1256(sp)
 4007588:	da413c17 	ldw	r9,1264(sp)
 400758c:	1001001e 	bne	r2,zero,4007990 <___vfprintf_internal_r+0x11bc>
 4007590:	00810374 	movhi	r2,1037
 4007594:	10890d04 	addi	r2,r2,9268
 4007598:	48800015 	stw	r2,0(r9)
 400759c:	00800044 	movi	r2,1
 40075a0:	48800115 	stw	r2,4(r9)
 40075a4:	4091883a 	add	r8,r8,r2
 40075a8:	1887883a 	add	r3,r3,r2
 40075ac:	da011d15 	stw	r8,1140(sp)
 40075b0:	d8c11c15 	stw	r3,1136(sp)
 40075b4:	008001c4 	movi	r2,7
 40075b8:	10c1dd16 	blt	r2,r3,4007d30 <___vfprintf_internal_r+0x155c>
 40075bc:	4a400204 	addi	r9,r9,8
 40075c0:	d8812417 	ldw	r2,1168(sp)
 40075c4:	d8c13217 	ldw	r3,1224(sp)
 40075c8:	10c00216 	blt	r2,r3,40075d4 <___vfprintf_internal_r+0xe00>
 40075cc:	8080004c 	andi	r2,r16,1
 40075d0:	103f6826 	beq	r2,zero,4007374 <___vfprintf_internal_r+0xba0>
 40075d4:	d8c11c17 	ldw	r3,1136(sp)
 40075d8:	d9013717 	ldw	r4,1244(sp)
 40075dc:	00800044 	movi	r2,1
 40075e0:	48800115 	stw	r2,4(r9)
 40075e4:	49000015 	stw	r4,0(r9)
 40075e8:	4091883a 	add	r8,r8,r2
 40075ec:	1887883a 	add	r3,r3,r2
 40075f0:	da011d15 	stw	r8,1140(sp)
 40075f4:	d8c11c15 	stw	r3,1136(sp)
 40075f8:	008001c4 	movi	r2,7
 40075fc:	10c2af16 	blt	r2,r3,40080bc <___vfprintf_internal_r+0x18e8>
 4007600:	4a400204 	addi	r9,r9,8
 4007604:	d8813217 	ldw	r2,1224(sp)
 4007608:	14bfffc4 	addi	r18,r2,-1
 400760c:	04bf590e 	bge	zero,r18,4007374 <___vfprintf_internal_r+0xba0>
 4007610:	04c00404 	movi	r19,16
 4007614:	d8c11c17 	ldw	r3,1136(sp)
 4007618:	05010374 	movhi	r20,1037
 400761c:	a5091184 	addi	r20,r20,9286
 4007620:	9c81630e 	bge	r19,r18,4007bb0 <___vfprintf_internal_r+0x13dc>
 4007624:	058001c4 	movi	r22,7
 4007628:	ddc12917 	ldw	r23,1188(sp)
 400762c:	00000306 	br	400763c <___vfprintf_internal_r+0xe68>
 4007630:	4a400204 	addi	r9,r9,8
 4007634:	94bffc04 	addi	r18,r18,-16
 4007638:	9c815d0e 	bge	r19,r18,4007bb0 <___vfprintf_internal_r+0x13dc>
 400763c:	4d000015 	stw	r20,0(r9)
 4007640:	4cc00115 	stw	r19,4(r9)
 4007644:	42000404 	addi	r8,r8,16
 4007648:	18c00044 	addi	r3,r3,1
 400764c:	da011d15 	stw	r8,1140(sp)
 4007650:	d8c11c15 	stw	r3,1136(sp)
 4007654:	b0fff60e 	bge	r22,r3,4007630 <___vfprintf_internal_r+0xe5c>
 4007658:	8809883a 	mov	r4,r17
 400765c:	b80b883a 	mov	r5,r23
 4007660:	d9811b04 	addi	r6,sp,1132
 4007664:	40067a00 	call	40067a0 <__sprint_r>
 4007668:	103ded1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 400766c:	da011d17 	ldw	r8,1140(sp)
 4007670:	d8c11c17 	ldw	r3,1136(sp)
 4007674:	da400404 	addi	r9,sp,16
 4007678:	003fee06 	br	4007634 <___vfprintf_internal_r+0xe60>
 400767c:	d8812e17 	ldw	r2,1208(sp)
 4007680:	d9012817 	ldw	r4,1184(sp)
 4007684:	112fc83a 	sub	r23,r2,r4
 4007688:	05ff000e 	bge	zero,r23,400728c <___vfprintf_internal_r+0xab8>
 400768c:	07000404 	movi	fp,16
 4007690:	05010374 	movhi	r20,1037
 4007694:	a5091184 	addi	r20,r20,9286
 4007698:	e5c01d0e 	bge	fp,r23,4007710 <___vfprintf_internal_r+0xf3c>
 400769c:	dc812a15 	stw	r18,1192(sp)
 40076a0:	058001c4 	movi	r22,7
 40076a4:	a025883a 	mov	r18,r20
 40076a8:	8029883a 	mov	r20,r16
 40076ac:	dc012917 	ldw	r16,1188(sp)
 40076b0:	00000306 	br	40076c0 <___vfprintf_internal_r+0xeec>
 40076b4:	bdfffc04 	addi	r23,r23,-16
 40076b8:	4a400204 	addi	r9,r9,8
 40076bc:	e5c0110e 	bge	fp,r23,4007704 <___vfprintf_internal_r+0xf30>
 40076c0:	4c800015 	stw	r18,0(r9)
 40076c4:	4f000115 	stw	fp,4(r9)
 40076c8:	42000404 	addi	r8,r8,16
 40076cc:	18c00044 	addi	r3,r3,1
 40076d0:	da011d15 	stw	r8,1140(sp)
 40076d4:	d8c11c15 	stw	r3,1136(sp)
 40076d8:	b0fff60e 	bge	r22,r3,40076b4 <___vfprintf_internal_r+0xee0>
 40076dc:	8809883a 	mov	r4,r17
 40076e0:	800b883a 	mov	r5,r16
 40076e4:	d9811b04 	addi	r6,sp,1132
 40076e8:	40067a00 	call	40067a0 <__sprint_r>
 40076ec:	103dcc1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 40076f0:	bdfffc04 	addi	r23,r23,-16
 40076f4:	da011d17 	ldw	r8,1140(sp)
 40076f8:	d8c11c17 	ldw	r3,1136(sp)
 40076fc:	da400404 	addi	r9,sp,16
 4007700:	e5ffef16 	blt	fp,r23,40076c0 <___vfprintf_internal_r+0xeec>
 4007704:	a021883a 	mov	r16,r20
 4007708:	9029883a 	mov	r20,r18
 400770c:	dc812a17 	ldw	r18,1192(sp)
 4007710:	4d000015 	stw	r20,0(r9)
 4007714:	4dc00115 	stw	r23,4(r9)
 4007718:	45d1883a 	add	r8,r8,r23
 400771c:	18c00044 	addi	r3,r3,1
 4007720:	da011d15 	stw	r8,1140(sp)
 4007724:	d8c11c15 	stw	r3,1136(sp)
 4007728:	008001c4 	movi	r2,7
 400772c:	10c11716 	blt	r2,r3,4007b8c <___vfprintf_internal_r+0x13b8>
 4007730:	4a400204 	addi	r9,r9,8
 4007734:	003ed506 	br	400728c <___vfprintf_internal_r+0xab8>
 4007738:	d9412917 	ldw	r5,1188(sp)
 400773c:	8809883a 	mov	r4,r17
 4007740:	d9811b04 	addi	r6,sp,1132
 4007744:	40067a00 	call	40067a0 <__sprint_r>
 4007748:	103f4226 	beq	r2,zero,4007454 <___vfprintf_internal_r+0xc80>
 400774c:	003db406 	br	4006e20 <___vfprintf_internal_r+0x64c>
 4007750:	d9013217 	ldw	r4,1224(sp)
 4007754:	00800044 	movi	r2,1
 4007758:	4cc00015 	stw	r19,0(r9)
 400775c:	1100e10e 	bge	r2,r4,4007ae4 <___vfprintf_internal_r+0x1310>
 4007760:	00800044 	movi	r2,1
 4007764:	48800115 	stw	r2,4(r9)
 4007768:	4091883a 	add	r8,r8,r2
 400776c:	1887883a 	add	r3,r3,r2
 4007770:	da011d15 	stw	r8,1140(sp)
 4007774:	d8c11c15 	stw	r3,1136(sp)
 4007778:	008001c4 	movi	r2,7
 400777c:	10c0ed16 	blt	r2,r3,4007b34 <___vfprintf_internal_r+0x1360>
 4007780:	4a400204 	addi	r9,r9,8
 4007784:	d8813717 	ldw	r2,1244(sp)
 4007788:	48800015 	stw	r2,0(r9)
 400778c:	00800044 	movi	r2,1
 4007790:	48800115 	stw	r2,4(r9)
 4007794:	4091883a 	add	r8,r8,r2
 4007798:	1887883a 	add	r3,r3,r2
 400779c:	da011d15 	stw	r8,1140(sp)
 40077a0:	d8c11c15 	stw	r3,1136(sp)
 40077a4:	008001c4 	movi	r2,7
 40077a8:	10c0eb16 	blt	r2,r3,4007b58 <___vfprintf_internal_r+0x1384>
 40077ac:	4c800204 	addi	r18,r9,8
 40077b0:	d9013317 	ldw	r4,1228(sp)
 40077b4:	d9413417 	ldw	r5,1232(sp)
 40077b8:	000d883a 	mov	r6,zero
 40077bc:	000f883a 	mov	r7,zero
 40077c0:	d8c13b15 	stw	r3,1260(sp)
 40077c4:	da013a15 	stw	r8,1256(sp)
 40077c8:	400e6f80 	call	400e6f8 <__nedf2>
 40077cc:	d8c13b17 	ldw	r3,1260(sp)
 40077d0:	da013a17 	ldw	r8,1256(sp)
 40077d4:	1000a626 	beq	r2,zero,4007a70 <___vfprintf_internal_r+0x129c>
 40077d8:	d9013217 	ldw	r4,1224(sp)
 40077dc:	9cc00044 	addi	r19,r19,1
 40077e0:	94c00015 	stw	r19,0(r18)
 40077e4:	20bfffc4 	addi	r2,r4,-1
 40077e8:	90800115 	stw	r2,4(r18)
 40077ec:	4091883a 	add	r8,r8,r2
 40077f0:	18c00044 	addi	r3,r3,1
 40077f4:	da011d15 	stw	r8,1140(sp)
 40077f8:	d8c11c15 	stw	r3,1136(sp)
 40077fc:	008001c4 	movi	r2,7
 4007800:	10c0c316 	blt	r2,r3,4007b10 <___vfprintf_internal_r+0x133c>
 4007804:	94800204 	addi	r18,r18,8
 4007808:	d9013517 	ldw	r4,1236(sp)
 400780c:	d8811fc4 	addi	r2,sp,1151
 4007810:	90800015 	stw	r2,0(r18)
 4007814:	91000115 	stw	r4,4(r18)
 4007818:	4111883a 	add	r8,r8,r4
 400781c:	18c00044 	addi	r3,r3,1
 4007820:	da011d15 	stw	r8,1140(sp)
 4007824:	d8c11c15 	stw	r3,1136(sp)
 4007828:	008001c4 	movi	r2,7
 400782c:	10ff2316 	blt	r2,r3,40074bc <___vfprintf_internal_r+0xce8>
 4007830:	92400204 	addi	r9,r18,8
 4007834:	003ecf06 	br	4007374 <___vfprintf_internal_r+0xba0>
 4007838:	d9412917 	ldw	r5,1188(sp)
 400783c:	8809883a 	mov	r4,r17
 4007840:	d9811b04 	addi	r6,sp,1132
 4007844:	40067a00 	call	40067a0 <__sprint_r>
 4007848:	103d751e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 400784c:	da011d17 	ldw	r8,1140(sp)
 4007850:	d8c11c17 	ldw	r3,1136(sp)
 4007854:	da400404 	addi	r9,sp,16
 4007858:	003eba06 	br	4007344 <___vfprintf_internal_r+0xb70>
 400785c:	d9412917 	ldw	r5,1188(sp)
 4007860:	8809883a 	mov	r4,r17
 4007864:	d9811b04 	addi	r6,sp,1132
 4007868:	40067a00 	call	40067a0 <__sprint_r>
 400786c:	103d6c1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007870:	da011d17 	ldw	r8,1140(sp)
 4007874:	d8c11c17 	ldw	r3,1136(sp)
 4007878:	da400404 	addi	r9,sp,16
 400787c:	003e7306 	br	400724c <___vfprintf_internal_r+0xa78>
 4007880:	d9412917 	ldw	r5,1188(sp)
 4007884:	8809883a 	mov	r4,r17
 4007888:	d9811b04 	addi	r6,sp,1132
 400788c:	40067a00 	call	40067a0 <__sprint_r>
 4007890:	103d631e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007894:	da011d17 	ldw	r8,1140(sp)
 4007898:	d8c11c17 	ldw	r3,1136(sp)
 400789c:	da400404 	addi	r9,sp,16
 40078a0:	003e7706 	br	4007280 <___vfprintf_internal_r+0xaac>
 40078a4:	d8012b15 	stw	zero,1196(sp)
 40078a8:	dcc10e04 	addi	r19,sp,1080
 40078ac:	003cae06 	br	4006b68 <___vfprintf_internal_r+0x394>
 40078b0:	d9413617 	ldw	r5,1240(sp)
 40078b4:	d8810dc4 	addi	r2,sp,1079
 40078b8:	b8c003cc 	andi	r3,r23,15
 40078bc:	b008973a 	slli	r4,r22,28
 40078c0:	28c7883a 	add	r3,r5,r3
 40078c4:	b82ed13a 	srli	r23,r23,4
 40078c8:	18c00003 	ldbu	r3,0(r3)
 40078cc:	b02cd13a 	srli	r22,r22,4
 40078d0:	25eeb03a 	or	r23,r4,r23
 40078d4:	10c00005 	stb	r3,0(r2)
 40078d8:	bd86b03a 	or	r3,r23,r22
 40078dc:	1027883a 	mov	r19,r2
 40078e0:	10bfffc4 	addi	r2,r2,-1
 40078e4:	183ff41e 	bne	r3,zero,40078b8 <___vfprintf_internal_r+0x10e4>
 40078e8:	003f1706 	br	4007548 <___vfprintf_internal_r+0xd74>
 40078ec:	b0025826 	beq	r22,zero,4008250 <___vfprintf_internal_r+0x1a7c>
 40078f0:	b807883a 	mov	r3,r23
 40078f4:	d8810dc4 	addi	r2,sp,1079
 40078f8:	882f883a 	mov	r23,r17
 40078fc:	04c00244 	movi	r19,9
 4007900:	8023883a 	mov	r17,r16
 4007904:	da412815 	stw	r9,1184(sp)
 4007908:	1821883a 	mov	r16,r3
 400790c:	8009883a 	mov	r4,r16
 4007910:	b00b883a 	mov	r5,r22
 4007914:	01800284 	movi	r6,10
 4007918:	000f883a 	mov	r7,zero
 400791c:	1029883a 	mov	r20,r2
 4007920:	400df5c0 	call	400df5c <__umoddi3>
 4007924:	10800c04 	addi	r2,r2,48
 4007928:	8009883a 	mov	r4,r16
 400792c:	b00b883a 	mov	r5,r22
 4007930:	a0800005 	stb	r2,0(r20)
 4007934:	01800284 	movi	r6,10
 4007938:	000f883a 	mov	r7,zero
 400793c:	400d9940 	call	400d994 <__udivdi3>
 4007940:	1021883a 	mov	r16,r2
 4007944:	182d883a 	mov	r22,r3
 4007948:	a0bfffc4 	addi	r2,r20,-1
 400794c:	183fef1e 	bne	r3,zero,400790c <___vfprintf_internal_r+0x1138>
 4007950:	9c3fee36 	bltu	r19,r16,400790c <___vfprintf_internal_r+0x1138>
 4007954:	da412817 	ldw	r9,1184(sp)
 4007958:	8005883a 	mov	r2,r16
 400795c:	8821883a 	mov	r16,r17
 4007960:	b823883a 	mov	r17,r23
 4007964:	102f883a 	mov	r23,r2
 4007968:	d8812717 	ldw	r2,1180(sp)
 400796c:	a4ffffc4 	addi	r19,r20,-1
 4007970:	bdc00c04 	addi	r23,r23,48
 4007974:	14c5c83a 	sub	r2,r2,r19
 4007978:	a5ffffc5 	stb	r23,-1(r20)
 400797c:	d8812b15 	stw	r2,1196(sp)
 4007980:	003c7906 	br	4006b68 <___vfprintf_internal_r+0x394>
 4007984:	00c00044 	movi	r3,1
 4007988:	bd84b03a 	or	r2,r23,r22
 400798c:	003c6806 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4007990:	dc812417 	ldw	r18,1168(sp)
 4007994:	0480ee0e 	bge	zero,r18,4007d50 <___vfprintf_internal_r+0x157c>
 4007998:	d9013217 	ldw	r4,1224(sp)
 400799c:	4cc00015 	stw	r19,0(r9)
 40079a0:	9100c616 	blt	r18,r4,4007cbc <___vfprintf_internal_r+0x14e8>
 40079a4:	49000115 	stw	r4,4(r9)
 40079a8:	4111883a 	add	r8,r8,r4
 40079ac:	18c00044 	addi	r3,r3,1
 40079b0:	da011d15 	stw	r8,1140(sp)
 40079b4:	d8c11c15 	stw	r3,1136(sp)
 40079b8:	008001c4 	movi	r2,7
 40079bc:	10c20916 	blt	r2,r3,40081e4 <___vfprintf_internal_r+0x1a10>
 40079c0:	4a400204 	addi	r9,r9,8
 40079c4:	d8813217 	ldw	r2,1224(sp)
 40079c8:	90a5c83a 	sub	r18,r18,r2
 40079cc:	04beae0e 	bge	zero,r18,4007488 <___vfprintf_internal_r+0xcb4>
 40079d0:	04c00404 	movi	r19,16
 40079d4:	d8c11c17 	ldw	r3,1136(sp)
 40079d8:	05010374 	movhi	r20,1037
 40079dc:	a5091184 	addi	r20,r20,9286
 40079e0:	9c81be0e 	bge	r19,r18,40080dc <___vfprintf_internal_r+0x1908>
 40079e4:	058001c4 	movi	r22,7
 40079e8:	ddc12917 	ldw	r23,1188(sp)
 40079ec:	00000306 	br	40079fc <___vfprintf_internal_r+0x1228>
 40079f0:	4a400204 	addi	r9,r9,8
 40079f4:	94bffc04 	addi	r18,r18,-16
 40079f8:	9c81b80e 	bge	r19,r18,40080dc <___vfprintf_internal_r+0x1908>
 40079fc:	4d000015 	stw	r20,0(r9)
 4007a00:	4cc00115 	stw	r19,4(r9)
 4007a04:	42000404 	addi	r8,r8,16
 4007a08:	18c00044 	addi	r3,r3,1
 4007a0c:	da011d15 	stw	r8,1140(sp)
 4007a10:	d8c11c15 	stw	r3,1136(sp)
 4007a14:	b0fff60e 	bge	r22,r3,40079f0 <___vfprintf_internal_r+0x121c>
 4007a18:	8809883a 	mov	r4,r17
 4007a1c:	b80b883a 	mov	r5,r23
 4007a20:	d9811b04 	addi	r6,sp,1132
 4007a24:	40067a00 	call	40067a0 <__sprint_r>
 4007a28:	103cfd1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007a2c:	da011d17 	ldw	r8,1140(sp)
 4007a30:	d8c11c17 	ldw	r3,1136(sp)
 4007a34:	da400404 	addi	r9,sp,16
 4007a38:	003fee06 	br	40079f4 <___vfprintf_internal_r+0x1220>
 4007a3c:	d9412917 	ldw	r5,1188(sp)
 4007a40:	8809883a 	mov	r4,r17
 4007a44:	d9811b04 	addi	r6,sp,1132
 4007a48:	40067a00 	call	40067a0 <__sprint_r>
 4007a4c:	103cf41e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007a50:	da011d17 	ldw	r8,1140(sp)
 4007a54:	d8c11c17 	ldw	r3,1136(sp)
 4007a58:	da400404 	addi	r9,sp,16
 4007a5c:	003dee06 	br	4007218 <___vfprintf_internal_r+0xa44>
 4007a60:	00c00084 	movi	r3,2
 4007a64:	bd84b03a 	or	r2,r23,r22
 4007a68:	d8012585 	stb	zero,1174(sp)
 4007a6c:	003c3006 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4007a70:	d8813217 	ldw	r2,1224(sp)
 4007a74:	14ffffc4 	addi	r19,r2,-1
 4007a78:	04ff630e 	bge	zero,r19,4007808 <___vfprintf_internal_r+0x1034>
 4007a7c:	05800404 	movi	r22,16
 4007a80:	05010374 	movhi	r20,1037
 4007a84:	a5091184 	addi	r20,r20,9286
 4007a88:	b4c03c0e 	bge	r22,r19,4007b7c <___vfprintf_internal_r+0x13a8>
 4007a8c:	05c001c4 	movi	r23,7
 4007a90:	df012917 	ldw	fp,1188(sp)
 4007a94:	00000306 	br	4007aa4 <___vfprintf_internal_r+0x12d0>
 4007a98:	94800204 	addi	r18,r18,8
 4007a9c:	9cfffc04 	addi	r19,r19,-16
 4007aa0:	b4c0360e 	bge	r22,r19,4007b7c <___vfprintf_internal_r+0x13a8>
 4007aa4:	95000015 	stw	r20,0(r18)
 4007aa8:	95800115 	stw	r22,4(r18)
 4007aac:	42000404 	addi	r8,r8,16
 4007ab0:	18c00044 	addi	r3,r3,1
 4007ab4:	da011d15 	stw	r8,1140(sp)
 4007ab8:	d8c11c15 	stw	r3,1136(sp)
 4007abc:	b8fff60e 	bge	r23,r3,4007a98 <___vfprintf_internal_r+0x12c4>
 4007ac0:	8809883a 	mov	r4,r17
 4007ac4:	e00b883a 	mov	r5,fp
 4007ac8:	d9811b04 	addi	r6,sp,1132
 4007acc:	40067a00 	call	40067a0 <__sprint_r>
 4007ad0:	103cd31e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007ad4:	da011d17 	ldw	r8,1140(sp)
 4007ad8:	d8c11c17 	ldw	r3,1136(sp)
 4007adc:	dc800404 	addi	r18,sp,16
 4007ae0:	003fee06 	br	4007a9c <___vfprintf_internal_r+0x12c8>
 4007ae4:	8088703a 	and	r4,r16,r2
 4007ae8:	203f1d1e 	bne	r4,zero,4007760 <___vfprintf_internal_r+0xf8c>
 4007aec:	48800115 	stw	r2,4(r9)
 4007af0:	42000044 	addi	r8,r8,1
 4007af4:	18c00044 	addi	r3,r3,1
 4007af8:	da011d15 	stw	r8,1140(sp)
 4007afc:	d8c11c15 	stw	r3,1136(sp)
 4007b00:	008001c4 	movi	r2,7
 4007b04:	10c00216 	blt	r2,r3,4007b10 <___vfprintf_internal_r+0x133c>
 4007b08:	4c800204 	addi	r18,r9,8
 4007b0c:	003f3e06 	br	4007808 <___vfprintf_internal_r+0x1034>
 4007b10:	d9412917 	ldw	r5,1188(sp)
 4007b14:	8809883a 	mov	r4,r17
 4007b18:	d9811b04 	addi	r6,sp,1132
 4007b1c:	40067a00 	call	40067a0 <__sprint_r>
 4007b20:	103cbf1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007b24:	dc800404 	addi	r18,sp,16
 4007b28:	da011d17 	ldw	r8,1140(sp)
 4007b2c:	d8c11c17 	ldw	r3,1136(sp)
 4007b30:	003f3506 	br	4007808 <___vfprintf_internal_r+0x1034>
 4007b34:	d9412917 	ldw	r5,1188(sp)
 4007b38:	8809883a 	mov	r4,r17
 4007b3c:	d9811b04 	addi	r6,sp,1132
 4007b40:	40067a00 	call	40067a0 <__sprint_r>
 4007b44:	103cb61e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007b48:	da011d17 	ldw	r8,1140(sp)
 4007b4c:	d8c11c17 	ldw	r3,1136(sp)
 4007b50:	da400404 	addi	r9,sp,16
 4007b54:	003f0b06 	br	4007784 <___vfprintf_internal_r+0xfb0>
 4007b58:	d9412917 	ldw	r5,1188(sp)
 4007b5c:	8809883a 	mov	r4,r17
 4007b60:	d9811b04 	addi	r6,sp,1132
 4007b64:	40067a00 	call	40067a0 <__sprint_r>
 4007b68:	103cad1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007b6c:	da011d17 	ldw	r8,1140(sp)
 4007b70:	d8c11c17 	ldw	r3,1136(sp)
 4007b74:	dc800404 	addi	r18,sp,16
 4007b78:	003f0d06 	br	40077b0 <___vfprintf_internal_r+0xfdc>
 4007b7c:	95000015 	stw	r20,0(r18)
 4007b80:	94c00115 	stw	r19,4(r18)
 4007b84:	44d1883a 	add	r8,r8,r19
 4007b88:	003f1906 	br	40077f0 <___vfprintf_internal_r+0x101c>
 4007b8c:	d9412917 	ldw	r5,1188(sp)
 4007b90:	8809883a 	mov	r4,r17
 4007b94:	d9811b04 	addi	r6,sp,1132
 4007b98:	40067a00 	call	40067a0 <__sprint_r>
 4007b9c:	103ca01e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007ba0:	da011d17 	ldw	r8,1140(sp)
 4007ba4:	d8c11c17 	ldw	r3,1136(sp)
 4007ba8:	da400404 	addi	r9,sp,16
 4007bac:	003db706 	br	400728c <___vfprintf_internal_r+0xab8>
 4007bb0:	4d000015 	stw	r20,0(r9)
 4007bb4:	4c800115 	stw	r18,4(r9)
 4007bb8:	4491883a 	add	r8,r8,r18
 4007bbc:	003de706 	br	400735c <___vfprintf_internal_r+0xb88>
 4007bc0:	8080100c 	andi	r2,r16,64
 4007bc4:	10010226 	beq	r2,zero,4007fd0 <___vfprintf_internal_r+0x17fc>
 4007bc8:	d8812d17 	ldw	r2,1204(sp)
 4007bcc:	002d883a 	mov	r22,zero
 4007bd0:	00c00044 	movi	r3,1
 4007bd4:	15c0000b 	ldhu	r23,0(r2)
 4007bd8:	10800104 	addi	r2,r2,4
 4007bdc:	d8812d15 	stw	r2,1204(sp)
 4007be0:	d8012585 	stb	zero,1174(sp)
 4007be4:	b805883a 	mov	r2,r23
 4007be8:	003bd106 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4007bec:	d9012d17 	ldw	r4,1204(sp)
 4007bf0:	25800017 	ldw	r22,0(r4)
 4007bf4:	25000117 	ldw	r20,4(r4)
 4007bf8:	21000204 	addi	r4,r4,8
 4007bfc:	d9012d15 	stw	r4,1204(sp)
 4007c00:	dd813315 	stw	r22,1228(sp)
 4007c04:	dd013415 	stw	r20,1232(sp)
 4007c08:	003d2b06 	br	40070b8 <___vfprintf_internal_r+0x8e4>
 4007c0c:	8080100c 	andi	r2,r16,64
 4007c10:	1000fe26 	beq	r2,zero,400800c <___vfprintf_internal_r+0x1838>
 4007c14:	d9012d17 	ldw	r4,1204(sp)
 4007c18:	002d883a 	mov	r22,zero
 4007c1c:	0007883a 	mov	r3,zero
 4007c20:	25c0000b 	ldhu	r23,0(r4)
 4007c24:	21000104 	addi	r4,r4,4
 4007c28:	d9012d15 	stw	r4,1204(sp)
 4007c2c:	b805883a 	mov	r2,r23
 4007c30:	d8012585 	stb	zero,1174(sp)
 4007c34:	003bbe06 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4007c38:	8080100c 	andi	r2,r16,64
 4007c3c:	1000ed26 	beq	r2,zero,4007ff4 <___vfprintf_internal_r+0x1820>
 4007c40:	d9012d17 	ldw	r4,1204(sp)
 4007c44:	002d883a 	mov	r22,zero
 4007c48:	25c0000b 	ldhu	r23,0(r4)
 4007c4c:	21000104 	addi	r4,r4,4
 4007c50:	d9012d15 	stw	r4,1204(sp)
 4007c54:	003cd206 	br	4006fa0 <___vfprintf_internal_r+0x7cc>
 4007c58:	00c00084 	movi	r3,2
 4007c5c:	d8012585 	stb	zero,1174(sp)
 4007c60:	003bb306 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4007c64:	8080040c 	andi	r2,r16,16
 4007c68:	1000f11e 	bne	r2,zero,4008030 <___vfprintf_internal_r+0x185c>
 4007c6c:	8400100c 	andi	r16,r16,64
 4007c70:	80015526 	beq	r16,zero,40081c8 <___vfprintf_internal_r+0x19f4>
 4007c74:	da012d17 	ldw	r8,1204(sp)
 4007c78:	d8c12c17 	ldw	r3,1200(sp)
 4007c7c:	40800017 	ldw	r2,0(r8)
 4007c80:	42000104 	addi	r8,r8,4
 4007c84:	da012d15 	stw	r8,1204(sp)
 4007c88:	10c0000d 	sth	r3,0(r2)
 4007c8c:	003b0706 	br	40068ac <___vfprintf_internal_r+0xd8>
 4007c90:	8080100c 	andi	r2,r16,64
 4007c94:	1000c726 	beq	r2,zero,4007fb4 <___vfprintf_internal_r+0x17e0>
 4007c98:	da012d17 	ldw	r8,1204(sp)
 4007c9c:	45c0000f 	ldh	r23,0(r8)
 4007ca0:	42000104 	addi	r8,r8,4
 4007ca4:	da012d15 	stw	r8,1204(sp)
 4007ca8:	b82dd7fa 	srai	r22,r23,31
 4007cac:	b005883a 	mov	r2,r22
 4007cb0:	003c1006 	br	4006cf4 <___vfprintf_internal_r+0x520>
 4007cb4:	ac800007 	ldb	r18,0(r21)
 4007cb8:	003b2406 	br	400694c <___vfprintf_internal_r+0x178>
 4007cbc:	4c800115 	stw	r18,4(r9)
 4007cc0:	9211883a 	add	r8,r18,r8
 4007cc4:	18c00044 	addi	r3,r3,1
 4007cc8:	da011d15 	stw	r8,1140(sp)
 4007ccc:	d8c11c15 	stw	r3,1136(sp)
 4007cd0:	008001c4 	movi	r2,7
 4007cd4:	10c15416 	blt	r2,r3,4008228 <___vfprintf_internal_r+0x1a54>
 4007cd8:	4a400204 	addi	r9,r9,8
 4007cdc:	d8813717 	ldw	r2,1244(sp)
 4007ce0:	9ca7883a 	add	r19,r19,r18
 4007ce4:	48800015 	stw	r2,0(r9)
 4007ce8:	00800044 	movi	r2,1
 4007cec:	48800115 	stw	r2,4(r9)
 4007cf0:	4091883a 	add	r8,r8,r2
 4007cf4:	1887883a 	add	r3,r3,r2
 4007cf8:	da011d15 	stw	r8,1140(sp)
 4007cfc:	d8c11c15 	stw	r3,1136(sp)
 4007d00:	008001c4 	movi	r2,7
 4007d04:	10c14016 	blt	r2,r3,4008208 <___vfprintf_internal_r+0x1a34>
 4007d08:	4a400204 	addi	r9,r9,8
 4007d0c:	d9013217 	ldw	r4,1224(sp)
 4007d10:	da011d17 	ldw	r8,1140(sp)
 4007d14:	d8c11c17 	ldw	r3,1136(sp)
 4007d18:	24a5c83a 	sub	r18,r4,r18
 4007d1c:	4cc00015 	stw	r19,0(r9)
 4007d20:	003fa406 	br	4007bb4 <___vfprintf_internal_r+0x13e0>
 4007d24:	04c10374 	movhi	r19,1037
 4007d28:	9cc8fe04 	addi	r19,r19,9208
 4007d2c:	003cf406 	br	4007100 <___vfprintf_internal_r+0x92c>
 4007d30:	d9412917 	ldw	r5,1188(sp)
 4007d34:	8809883a 	mov	r4,r17
 4007d38:	d9811b04 	addi	r6,sp,1132
 4007d3c:	40067a00 	call	40067a0 <__sprint_r>
 4007d40:	103c371e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007d44:	da011d17 	ldw	r8,1140(sp)
 4007d48:	da400404 	addi	r9,sp,16
 4007d4c:	003e1c06 	br	40075c0 <___vfprintf_internal_r+0xdec>
 4007d50:	00810374 	movhi	r2,1037
 4007d54:	10890d04 	addi	r2,r2,9268
 4007d58:	48800015 	stw	r2,0(r9)
 4007d5c:	00800044 	movi	r2,1
 4007d60:	48800115 	stw	r2,4(r9)
 4007d64:	4091883a 	add	r8,r8,r2
 4007d68:	1887883a 	add	r3,r3,r2
 4007d6c:	da011d15 	stw	r8,1140(sp)
 4007d70:	d8c11c15 	stw	r3,1136(sp)
 4007d74:	008001c4 	movi	r2,7
 4007d78:	10c0c316 	blt	r2,r3,4008088 <___vfprintf_internal_r+0x18b4>
 4007d7c:	4a400204 	addi	r9,r9,8
 4007d80:	9000041e 	bne	r18,zero,4007d94 <___vfprintf_internal_r+0x15c0>
 4007d84:	d8c13217 	ldw	r3,1224(sp)
 4007d88:	1800021e 	bne	r3,zero,4007d94 <___vfprintf_internal_r+0x15c0>
 4007d8c:	8080004c 	andi	r2,r16,1
 4007d90:	103d7826 	beq	r2,zero,4007374 <___vfprintf_internal_r+0xba0>
 4007d94:	d8c11c17 	ldw	r3,1136(sp)
 4007d98:	d9013717 	ldw	r4,1244(sp)
 4007d9c:	00800044 	movi	r2,1
 4007da0:	48800115 	stw	r2,4(r9)
 4007da4:	49000015 	stw	r4,0(r9)
 4007da8:	4091883a 	add	r8,r8,r2
 4007dac:	1887883a 	add	r3,r3,r2
 4007db0:	da011d15 	stw	r8,1140(sp)
 4007db4:	d8c11c15 	stw	r3,1136(sp)
 4007db8:	008001c4 	movi	r2,7
 4007dbc:	10c12e16 	blt	r2,r3,4008278 <___vfprintf_internal_r+0x1aa4>
 4007dc0:	4a400204 	addi	r9,r9,8
 4007dc4:	04a5c83a 	sub	r18,zero,r18
 4007dc8:	0480de0e 	bge	zero,r18,4008144 <___vfprintf_internal_r+0x1970>
 4007dcc:	05800404 	movi	r22,16
 4007dd0:	05010374 	movhi	r20,1037
 4007dd4:	a5091184 	addi	r20,r20,9286
 4007dd8:	b480e20e 	bge	r22,r18,4008164 <___vfprintf_internal_r+0x1990>
 4007ddc:	05c001c4 	movi	r23,7
 4007de0:	df012917 	ldw	fp,1188(sp)
 4007de4:	00000306 	br	4007df4 <___vfprintf_internal_r+0x1620>
 4007de8:	4a400204 	addi	r9,r9,8
 4007dec:	94bffc04 	addi	r18,r18,-16
 4007df0:	b480dc0e 	bge	r22,r18,4008164 <___vfprintf_internal_r+0x1990>
 4007df4:	4d000015 	stw	r20,0(r9)
 4007df8:	4d800115 	stw	r22,4(r9)
 4007dfc:	42000404 	addi	r8,r8,16
 4007e00:	18c00044 	addi	r3,r3,1
 4007e04:	da011d15 	stw	r8,1140(sp)
 4007e08:	d8c11c15 	stw	r3,1136(sp)
 4007e0c:	b8fff60e 	bge	r23,r3,4007de8 <___vfprintf_internal_r+0x1614>
 4007e10:	8809883a 	mov	r4,r17
 4007e14:	e00b883a 	mov	r5,fp
 4007e18:	d9811b04 	addi	r6,sp,1132
 4007e1c:	40067a00 	call	40067a0 <__sprint_r>
 4007e20:	103bff1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4007e24:	da011d17 	ldw	r8,1140(sp)
 4007e28:	d8c11c17 	ldw	r3,1136(sp)
 4007e2c:	da400404 	addi	r9,sp,16
 4007e30:	003fee06 	br	4007dec <___vfprintf_internal_r+0x1618>
 4007e34:	da413c15 	stw	r9,1264(sp)
 4007e38:	400d2a00 	call	400d2a0 <__isnand>
 4007e3c:	da413c17 	ldw	r9,1264(sp)
 4007e40:	1000851e 	bne	r2,zero,4008058 <___vfprintf_internal_r+0x1884>
 4007e44:	00bfffc4 	movi	r2,-1
 4007e48:	e0817626 	beq	fp,r2,4008424 <___vfprintf_internal_r+0x1c50>
 4007e4c:	008019c4 	movi	r2,103
 4007e50:	90817126 	beq	r18,r2,4008418 <___vfprintf_internal_r+0x1c44>
 4007e54:	008011c4 	movi	r2,71
 4007e58:	90816f26 	beq	r18,r2,4008418 <___vfprintf_internal_r+0x1c44>
 4007e5c:	82004014 	ori	r8,r16,256
 4007e60:	da012a15 	stw	r8,1192(sp)
 4007e64:	a0017116 	blt	r20,zero,400842c <___vfprintf_internal_r+0x1c58>
 4007e68:	d8012f05 	stb	zero,1212(sp)
 4007e6c:	00801984 	movi	r2,102
 4007e70:	90811226 	beq	r18,r2,40082bc <___vfprintf_internal_r+0x1ae8>
 4007e74:	00801184 	movi	r2,70
 4007e78:	90811026 	beq	r18,r2,40082bc <___vfprintf_internal_r+0x1ae8>
 4007e7c:	00801944 	movi	r2,101
 4007e80:	90819b26 	beq	r18,r2,40084f0 <___vfprintf_internal_r+0x1d1c>
 4007e84:	00801144 	movi	r2,69
 4007e88:	90819926 	beq	r18,r2,40084f0 <___vfprintf_internal_r+0x1d1c>
 4007e8c:	e02f883a 	mov	r23,fp
 4007e90:	d8812404 	addi	r2,sp,1168
 4007e94:	d8800115 	stw	r2,4(sp)
 4007e98:	d8812304 	addi	r2,sp,1164
 4007e9c:	d8800215 	stw	r2,8(sp)
 4007ea0:	d8812204 	addi	r2,sp,1160
 4007ea4:	ddc00015 	stw	r23,0(sp)
 4007ea8:	d8800315 	stw	r2,12(sp)
 4007eac:	8809883a 	mov	r4,r17
 4007eb0:	b00b883a 	mov	r5,r22
 4007eb4:	a00d883a 	mov	r6,r20
 4007eb8:	01c00084 	movi	r7,2
 4007ebc:	da413c15 	stw	r9,1264(sp)
 4007ec0:	400896c0 	call	400896c <_dtoa_r>
 4007ec4:	1027883a 	mov	r19,r2
 4007ec8:	008019c4 	movi	r2,103
 4007ecc:	da413c17 	ldw	r9,1264(sp)
 4007ed0:	90818c1e 	bne	r18,r2,4008504 <___vfprintf_internal_r+0x1d30>
 4007ed4:	8080004c 	andi	r2,r16,1
 4007ed8:	10017926 	beq	r2,zero,40084c0 <___vfprintf_internal_r+0x1cec>
 4007edc:	00801184 	movi	r2,70
 4007ee0:	9dc7883a 	add	r3,r19,r23
 4007ee4:	90810626 	beq	r18,r2,4008300 <___vfprintf_internal_r+0x1b2c>
 4007ee8:	b009883a 	mov	r4,r22
 4007eec:	a00b883a 	mov	r5,r20
 4007ef0:	000d883a 	mov	r6,zero
 4007ef4:	000f883a 	mov	r7,zero
 4007ef8:	d8c13b15 	stw	r3,1260(sp)
 4007efc:	da413c15 	stw	r9,1264(sp)
 4007f00:	400e69c0 	call	400e69c <__eqdf2>
 4007f04:	d8c13b17 	ldw	r3,1260(sp)
 4007f08:	da413c17 	ldw	r9,1264(sp)
 4007f0c:	10000726 	beq	r2,zero,4007f2c <___vfprintf_internal_r+0x1758>
 4007f10:	d8812217 	ldw	r2,1160(sp)
 4007f14:	10c1962e 	bgeu	r2,r3,4008570 <___vfprintf_internal_r+0x1d9c>
 4007f18:	01000c04 	movi	r4,48
 4007f1c:	11000005 	stb	r4,0(r2)
 4007f20:	10800044 	addi	r2,r2,1
 4007f24:	d8812215 	stw	r2,1160(sp)
 4007f28:	10fffc1e 	bne	r2,r3,4007f1c <___vfprintf_internal_r+0x1748>
 4007f2c:	1cc7c83a 	sub	r3,r3,r19
 4007f30:	d8c13215 	stw	r3,1224(sp)
 4007f34:	008019c4 	movi	r2,103
 4007f38:	90810626 	beq	r18,r2,4008354 <___vfprintf_internal_r+0x1b80>
 4007f3c:	008011c4 	movi	r2,71
 4007f40:	90810426 	beq	r18,r2,4008354 <___vfprintf_internal_r+0x1b80>
 4007f44:	00801984 	movi	r2,102
 4007f48:	90819a1e 	bne	r18,r2,40085b4 <___vfprintf_internal_r+0x1de0>
 4007f4c:	d8812417 	ldw	r2,1168(sp)
 4007f50:	d8812b15 	stw	r2,1196(sp)
 4007f54:	0081880e 	bge	zero,r2,4008578 <___vfprintf_internal_r+0x1da4>
 4007f58:	e000021e 	bne	fp,zero,4007f64 <___vfprintf_internal_r+0x1790>
 4007f5c:	8400004c 	andi	r16,r16,1
 4007f60:	80000426 	beq	r16,zero,4007f74 <___vfprintf_internal_r+0x17a0>
 4007f64:	d8812b17 	ldw	r2,1196(sp)
 4007f68:	e2000044 	addi	r8,fp,1
 4007f6c:	1205883a 	add	r2,r2,r8
 4007f70:	d8812b15 	stw	r2,1196(sp)
 4007f74:	d8812815 	stw	r2,1184(sp)
 4007f78:	10011716 	blt	r2,zero,40083d8 <___vfprintf_internal_r+0x1c04>
 4007f7c:	ddc12f07 	ldb	r23,1212(sp)
 4007f80:	b800ca26 	beq	r23,zero,40082ac <___vfprintf_internal_r+0x1ad8>
 4007f84:	00800b44 	movi	r2,45
 4007f88:	d8812585 	stb	r2,1174(sp)
 4007f8c:	dc012a17 	ldw	r16,1192(sp)
 4007f90:	d8013115 	stw	zero,1220(sp)
 4007f94:	003afe06 	br	4006b90 <___vfprintf_internal_r+0x3bc>
 4007f98:	d8812b17 	ldw	r2,1196(sp)
 4007f9c:	d8812815 	stw	r2,1184(sp)
 4007fa0:	10005e16 	blt	r2,zero,400811c <___vfprintf_internal_r+0x1948>
 4007fa4:	d8812583 	ldbu	r2,1174(sp)
 4007fa8:	ddc12d15 	stw	r23,1204(sp)
 4007fac:	d8013115 	stw	zero,1220(sp)
 4007fb0:	003af306 	br	4006b80 <___vfprintf_internal_r+0x3ac>
 4007fb4:	d8812d17 	ldw	r2,1204(sp)
 4007fb8:	15c00017 	ldw	r23,0(r2)
 4007fbc:	10800104 	addi	r2,r2,4
 4007fc0:	d8812d15 	stw	r2,1204(sp)
 4007fc4:	b82dd7fa 	srai	r22,r23,31
 4007fc8:	b005883a 	mov	r2,r22
 4007fcc:	003b4906 	br	4006cf4 <___vfprintf_internal_r+0x520>
 4007fd0:	d8c12d17 	ldw	r3,1204(sp)
 4007fd4:	002d883a 	mov	r22,zero
 4007fd8:	1dc00017 	ldw	r23,0(r3)
 4007fdc:	18c00104 	addi	r3,r3,4
 4007fe0:	d8c12d15 	stw	r3,1204(sp)
 4007fe4:	b805883a 	mov	r2,r23
 4007fe8:	00c00044 	movi	r3,1
 4007fec:	d8012585 	stb	zero,1174(sp)
 4007ff0:	003acf06 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4007ff4:	da012d17 	ldw	r8,1204(sp)
 4007ff8:	002d883a 	mov	r22,zero
 4007ffc:	45c00017 	ldw	r23,0(r8)
 4008000:	42000104 	addi	r8,r8,4
 4008004:	da012d15 	stw	r8,1204(sp)
 4008008:	003be506 	br	4006fa0 <___vfprintf_internal_r+0x7cc>
 400800c:	da012d17 	ldw	r8,1204(sp)
 4008010:	002d883a 	mov	r22,zero
 4008014:	0007883a 	mov	r3,zero
 4008018:	45c00017 	ldw	r23,0(r8)
 400801c:	42000104 	addi	r8,r8,4
 4008020:	da012d15 	stw	r8,1204(sp)
 4008024:	b805883a 	mov	r2,r23
 4008028:	d8012585 	stb	zero,1174(sp)
 400802c:	003ac006 	br	4006b30 <___vfprintf_internal_r+0x35c>
 4008030:	d8c12d17 	ldw	r3,1204(sp)
 4008034:	d9012c17 	ldw	r4,1200(sp)
 4008038:	18800017 	ldw	r2,0(r3)
 400803c:	18c00104 	addi	r3,r3,4
 4008040:	d8c12d15 	stw	r3,1204(sp)
 4008044:	11000015 	stw	r4,0(r2)
 4008048:	003a1806 	br	40068ac <___vfprintf_internal_r+0xd8>
 400804c:	073fffc4 	movi	fp,-1
 4008050:	202b883a 	mov	r21,r4
 4008054:	003a3e06 	br	4006950 <___vfprintf_internal_r+0x17c>
 4008058:	008011c4 	movi	r2,71
 400805c:	14809016 	blt	r2,r18,40082a0 <___vfprintf_internal_r+0x1acc>
 4008060:	04c10374 	movhi	r19,1037
 4008064:	9cc8ff04 	addi	r19,r19,9212
 4008068:	00c000c4 	movi	r3,3
 400806c:	00bfdfc4 	movi	r2,-129
 4008070:	80a0703a 	and	r16,r16,r2
 4008074:	d8c12815 	stw	r3,1184(sp)
 4008078:	d8812583 	ldbu	r2,1174(sp)
 400807c:	d8c12b15 	stw	r3,1196(sp)
 4008080:	d8013115 	stw	zero,1220(sp)
 4008084:	003abe06 	br	4006b80 <___vfprintf_internal_r+0x3ac>
 4008088:	d9412917 	ldw	r5,1188(sp)
 400808c:	8809883a 	mov	r4,r17
 4008090:	d9811b04 	addi	r6,sp,1132
 4008094:	40067a00 	call	40067a0 <__sprint_r>
 4008098:	103b611e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 400809c:	dc812417 	ldw	r18,1168(sp)
 40080a0:	da011d17 	ldw	r8,1140(sp)
 40080a4:	da400404 	addi	r9,sp,16
 40080a8:	003f3506 	br	4007d80 <___vfprintf_internal_r+0x15ac>
 40080ac:	ad400044 	addi	r21,r21,1
 40080b0:	84000814 	ori	r16,r16,32
 40080b4:	14800047 	ldb	r18,1(r2)
 40080b8:	003a2406 	br	400694c <___vfprintf_internal_r+0x178>
 40080bc:	d9412917 	ldw	r5,1188(sp)
 40080c0:	8809883a 	mov	r4,r17
 40080c4:	d9811b04 	addi	r6,sp,1132
 40080c8:	40067a00 	call	40067a0 <__sprint_r>
 40080cc:	103b541e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 40080d0:	da011d17 	ldw	r8,1140(sp)
 40080d4:	da400404 	addi	r9,sp,16
 40080d8:	003d4a06 	br	4007604 <___vfprintf_internal_r+0xe30>
 40080dc:	4d000015 	stw	r20,0(r9)
 40080e0:	4c800115 	stw	r18,4(r9)
 40080e4:	4491883a 	add	r8,r8,r18
 40080e8:	18c00044 	addi	r3,r3,1
 40080ec:	da011d15 	stw	r8,1140(sp)
 40080f0:	d8c11c15 	stw	r3,1136(sp)
 40080f4:	008001c4 	movi	r2,7
 40080f8:	10fcdc16 	blt	r2,r3,400746c <___vfprintf_internal_r+0xc98>
 40080fc:	4a400204 	addi	r9,r9,8
 4008100:	003ce106 	br	4007488 <___vfprintf_internal_r+0xcb4>
 4008104:	da413c15 	stw	r9,1264(sp)
 4008108:	40067140 	call	4006714 <strlen>
 400810c:	d8812b15 	stw	r2,1196(sp)
 4008110:	d8812815 	stw	r2,1184(sp)
 4008114:	da413c17 	ldw	r9,1264(sp)
 4008118:	103fa20e 	bge	r2,zero,4007fa4 <___vfprintf_internal_r+0x17d0>
 400811c:	d8012815 	stw	zero,1184(sp)
 4008120:	003fa006 	br	4007fa4 <___vfprintf_internal_r+0x17d0>
 4008124:	d9412917 	ldw	r5,1188(sp)
 4008128:	8809883a 	mov	r4,r17
 400812c:	d9811b04 	addi	r6,sp,1132
 4008130:	40067a00 	call	40067a0 <__sprint_r>
 4008134:	103b3a1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 4008138:	da011d17 	ldw	r8,1140(sp)
 400813c:	d8c11c17 	ldw	r3,1136(sp)
 4008140:	da400404 	addi	r9,sp,16
 4008144:	d8813217 	ldw	r2,1224(sp)
 4008148:	4cc00015 	stw	r19,0(r9)
 400814c:	48800115 	stw	r2,4(r9)
 4008150:	4091883a 	add	r8,r8,r2
 4008154:	003c8106 	br	400735c <___vfprintf_internal_r+0xb88>
 4008158:	00800b44 	movi	r2,45
 400815c:	d8812585 	stb	r2,1174(sp)
 4008160:	003be306 	br	40070f0 <___vfprintf_internal_r+0x91c>
 4008164:	4d000015 	stw	r20,0(r9)
 4008168:	4c800115 	stw	r18,4(r9)
 400816c:	4491883a 	add	r8,r8,r18
 4008170:	18c00044 	addi	r3,r3,1
 4008174:	da011d15 	stw	r8,1140(sp)
 4008178:	d8c11c15 	stw	r3,1136(sp)
 400817c:	008001c4 	movi	r2,7
 4008180:	10ffe816 	blt	r2,r3,4008124 <___vfprintf_internal_r+0x1950>
 4008184:	4a400204 	addi	r9,r9,8
 4008188:	003fee06 	br	4008144 <___vfprintf_internal_r+0x1970>
 400818c:	df012b15 	stw	fp,1196(sp)
 4008190:	00800184 	movi	r2,6
 4008194:	1700072e 	bgeu	r2,fp,40081b4 <___vfprintf_internal_r+0x19e0>
 4008198:	d8812b15 	stw	r2,1196(sp)
 400819c:	d8812815 	stw	r2,1184(sp)
 40081a0:	ddc12d15 	stw	r23,1204(sp)
 40081a4:	04c10374 	movhi	r19,1037
 40081a8:	9cc90b04 	addi	r19,r19,9260
 40081ac:	d8013115 	stw	zero,1220(sp)
 40081b0:	003a7a06 	br	4006b9c <___vfprintf_internal_r+0x3c8>
 40081b4:	d8812b17 	ldw	r2,1196(sp)
 40081b8:	d8812815 	stw	r2,1184(sp)
 40081bc:	103ff80e 	bge	r2,zero,40081a0 <___vfprintf_internal_r+0x19cc>
 40081c0:	d8012815 	stw	zero,1184(sp)
 40081c4:	003ff606 	br	40081a0 <___vfprintf_internal_r+0x19cc>
 40081c8:	d9012d17 	ldw	r4,1204(sp)
 40081cc:	da012c17 	ldw	r8,1200(sp)
 40081d0:	20800017 	ldw	r2,0(r4)
 40081d4:	21000104 	addi	r4,r4,4
 40081d8:	d9012d15 	stw	r4,1204(sp)
 40081dc:	12000015 	stw	r8,0(r2)
 40081e0:	0039b206 	br	40068ac <___vfprintf_internal_r+0xd8>
 40081e4:	d9412917 	ldw	r5,1188(sp)
 40081e8:	8809883a 	mov	r4,r17
 40081ec:	d9811b04 	addi	r6,sp,1132
 40081f0:	40067a00 	call	40067a0 <__sprint_r>
 40081f4:	103b0a1e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 40081f8:	dc812417 	ldw	r18,1168(sp)
 40081fc:	da011d17 	ldw	r8,1140(sp)
 4008200:	da400404 	addi	r9,sp,16
 4008204:	003def06 	br	40079c4 <___vfprintf_internal_r+0x11f0>
 4008208:	d9412917 	ldw	r5,1188(sp)
 400820c:	8809883a 	mov	r4,r17
 4008210:	d9811b04 	addi	r6,sp,1132
 4008214:	40067a00 	call	40067a0 <__sprint_r>
 4008218:	103b011e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 400821c:	dc812417 	ldw	r18,1168(sp)
 4008220:	da400404 	addi	r9,sp,16
 4008224:	003eb906 	br	4007d0c <___vfprintf_internal_r+0x1538>
 4008228:	d9412917 	ldw	r5,1188(sp)
 400822c:	8809883a 	mov	r4,r17
 4008230:	d9811b04 	addi	r6,sp,1132
 4008234:	40067a00 	call	40067a0 <__sprint_r>
 4008238:	103af91e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 400823c:	dc812417 	ldw	r18,1168(sp)
 4008240:	da011d17 	ldw	r8,1140(sp)
 4008244:	d8c11c17 	ldw	r3,1136(sp)
 4008248:	da400404 	addi	r9,sp,16
 400824c:	003ea306 	br	4007cdc <___vfprintf_internal_r+0x1508>
 4008250:	00800244 	movi	r2,9
 4008254:	15fda636 	bltu	r2,r23,40078f0 <___vfprintf_internal_r+0x111c>
 4008258:	dd010e04 	addi	r20,sp,1080
 400825c:	003dc206 	br	4007968 <___vfprintf_internal_r+0x1194>
 4008260:	df012815 	stw	fp,1184(sp)
 4008264:	d8812583 	ldbu	r2,1174(sp)
 4008268:	df012b15 	stw	fp,1196(sp)
 400826c:	ddc12d15 	stw	r23,1204(sp)
 4008270:	d8013115 	stw	zero,1220(sp)
 4008274:	003a4206 	br	4006b80 <___vfprintf_internal_r+0x3ac>
 4008278:	d9412917 	ldw	r5,1188(sp)
 400827c:	8809883a 	mov	r4,r17
 4008280:	d9811b04 	addi	r6,sp,1132
 4008284:	40067a00 	call	40067a0 <__sprint_r>
 4008288:	103ae51e 	bne	r2,zero,4006e20 <___vfprintf_internal_r+0x64c>
 400828c:	dc812417 	ldw	r18,1168(sp)
 4008290:	da011d17 	ldw	r8,1140(sp)
 4008294:	d8c11c17 	ldw	r3,1136(sp)
 4008298:	da400404 	addi	r9,sp,16
 400829c:	003ec906 	br	4007dc4 <___vfprintf_internal_r+0x15f0>
 40082a0:	04c10374 	movhi	r19,1037
 40082a4:	9cc90004 	addi	r19,r19,9216
 40082a8:	003f6f06 	br	4008068 <___vfprintf_internal_r+0x1894>
 40082ac:	d8812583 	ldbu	r2,1174(sp)
 40082b0:	dc012a17 	ldw	r16,1192(sp)
 40082b4:	d8013115 	stw	zero,1220(sp)
 40082b8:	003a3106 	br	4006b80 <___vfprintf_internal_r+0x3ac>
 40082bc:	d8812404 	addi	r2,sp,1168
 40082c0:	d8800115 	stw	r2,4(sp)
 40082c4:	d8812304 	addi	r2,sp,1164
 40082c8:	d8800215 	stw	r2,8(sp)
 40082cc:	d8812204 	addi	r2,sp,1160
 40082d0:	df000015 	stw	fp,0(sp)
 40082d4:	d8800315 	stw	r2,12(sp)
 40082d8:	8809883a 	mov	r4,r17
 40082dc:	b00b883a 	mov	r5,r22
 40082e0:	a00d883a 	mov	r6,r20
 40082e4:	01c000c4 	movi	r7,3
 40082e8:	da413c15 	stw	r9,1264(sp)
 40082ec:	400896c0 	call	400896c <_dtoa_r>
 40082f0:	da413c17 	ldw	r9,1264(sp)
 40082f4:	1027883a 	mov	r19,r2
 40082f8:	1707883a 	add	r3,r2,fp
 40082fc:	e02f883a 	mov	r23,fp
 4008300:	99000007 	ldb	r4,0(r19)
 4008304:	00800c04 	movi	r2,48
 4008308:	20800326 	beq	r4,r2,4008318 <___vfprintf_internal_r+0x1b44>
 400830c:	da812417 	ldw	r10,1168(sp)
 4008310:	1a87883a 	add	r3,r3,r10
 4008314:	003ef406 	br	4007ee8 <___vfprintf_internal_r+0x1714>
 4008318:	b009883a 	mov	r4,r22
 400831c:	a00b883a 	mov	r5,r20
 4008320:	000d883a 	mov	r6,zero
 4008324:	000f883a 	mov	r7,zero
 4008328:	d8c13b15 	stw	r3,1260(sp)
 400832c:	da413c15 	stw	r9,1264(sp)
 4008330:	400e6f80 	call	400e6f8 <__nedf2>
 4008334:	d8c13b17 	ldw	r3,1260(sp)
 4008338:	da413c17 	ldw	r9,1264(sp)
 400833c:	103ff326 	beq	r2,zero,400830c <___vfprintf_internal_r+0x1b38>
 4008340:	00800044 	movi	r2,1
 4008344:	15d5c83a 	sub	r10,r2,r23
 4008348:	da812415 	stw	r10,1168(sp)
 400834c:	1a87883a 	add	r3,r3,r10
 4008350:	003ee506 	br	4007ee8 <___vfprintf_internal_r+0x1714>
 4008354:	d8812417 	ldw	r2,1168(sp)
 4008358:	d8812b15 	stw	r2,1196(sp)
 400835c:	1029883a 	mov	r20,r2
 4008360:	00bfff44 	movi	r2,-3
 4008364:	a0800116 	blt	r20,r2,400836c <___vfprintf_internal_r+0x1b98>
 4008368:	e5001d0e 	bge	fp,r20,40083e0 <___vfprintf_internal_r+0x1c0c>
 400836c:	94bfff84 	addi	r18,r18,-2
 4008370:	a53fffc4 	addi	r20,r20,-1
 4008374:	dd012415 	stw	r20,1168(sp)
 4008378:	dc811fc5 	stb	r18,1151(sp)
 400837c:	a0007816 	blt	r20,zero,4008560 <___vfprintf_internal_r+0x1d8c>
 4008380:	00800ac4 	movi	r2,43
 4008384:	d8812005 	stb	r2,1152(sp)
 4008388:	00800244 	movi	r2,9
 400838c:	15002b16 	blt	r2,r20,400843c <___vfprintf_internal_r+0x1c68>
 4008390:	00800c04 	movi	r2,48
 4008394:	a5000c04 	addi	r20,r20,48
 4008398:	d8812045 	stb	r2,1153(sp)
 400839c:	dd012085 	stb	r20,1154(sp)
 40083a0:	d8c120c4 	addi	r3,sp,1155
 40083a4:	d8811fc4 	addi	r2,sp,1151
 40083a8:	da013217 	ldw	r8,1224(sp)
 40083ac:	1885c83a 	sub	r2,r3,r2
 40083b0:	d8813515 	stw	r2,1236(sp)
 40083b4:	4085883a 	add	r2,r8,r2
 40083b8:	d8812b15 	stw	r2,1196(sp)
 40083bc:	00800044 	movi	r2,1
 40083c0:	1200610e 	bge	r2,r8,4008548 <___vfprintf_internal_r+0x1d74>
 40083c4:	d8812b17 	ldw	r2,1196(sp)
 40083c8:	10800044 	addi	r2,r2,1
 40083cc:	d8812b15 	stw	r2,1196(sp)
 40083d0:	d8812815 	stw	r2,1184(sp)
 40083d4:	103ee90e 	bge	r2,zero,4007f7c <___vfprintf_internal_r+0x17a8>
 40083d8:	d8012815 	stw	zero,1184(sp)
 40083dc:	003ee706 	br	4007f7c <___vfprintf_internal_r+0x17a8>
 40083e0:	d8812b17 	ldw	r2,1196(sp)
 40083e4:	da013217 	ldw	r8,1224(sp)
 40083e8:	12003716 	blt	r2,r8,40084c8 <___vfprintf_internal_r+0x1cf4>
 40083ec:	8400004c 	andi	r16,r16,1
 40083f0:	80000326 	beq	r16,zero,4008400 <___vfprintf_internal_r+0x1c2c>
 40083f4:	d8812b17 	ldw	r2,1196(sp)
 40083f8:	10800044 	addi	r2,r2,1
 40083fc:	d8812b15 	stw	r2,1196(sp)
 4008400:	d8812815 	stw	r2,1184(sp)
 4008404:	10003716 	blt	r2,zero,40084e4 <___vfprintf_internal_r+0x1d10>
 4008408:	048019c4 	movi	r18,103
 400840c:	003edb06 	br	4007f7c <___vfprintf_internal_r+0x17a8>
 4008410:	d8012815 	stw	zero,1184(sp)
 4008414:	003b6906 	br	40071bc <___vfprintf_internal_r+0x9e8>
 4008418:	e03e901e 	bne	fp,zero,4007e5c <___vfprintf_internal_r+0x1688>
 400841c:	07000044 	movi	fp,1
 4008420:	003e8e06 	br	4007e5c <___vfprintf_internal_r+0x1688>
 4008424:	07000184 	movi	fp,6
 4008428:	003e8c06 	br	4007e5c <___vfprintf_internal_r+0x1688>
 400842c:	00c00b44 	movi	r3,45
 4008430:	a520003c 	xorhi	r20,r20,32768
 4008434:	d8c12f05 	stb	r3,1212(sp)
 4008438:	003e8c06 	br	4007e6c <___vfprintf_internal_r+0x1698>
 400843c:	d8c11f84 	addi	r3,sp,1150
 4008440:	102f883a 	mov	r23,r2
 4008444:	4839883a 	mov	fp,r9
 4008448:	a009883a 	mov	r4,r20
 400844c:	01400284 	movi	r5,10
 4008450:	182d883a 	mov	r22,r3
 4008454:	400e9f40 	call	400e9f4 <__modsi3>
 4008458:	10800c04 	addi	r2,r2,48
 400845c:	a009883a 	mov	r4,r20
 4008460:	b0800005 	stb	r2,0(r22)
 4008464:	01400284 	movi	r5,10
 4008468:	400e9a40 	call	400e9a4 <__divsi3>
 400846c:	1029883a 	mov	r20,r2
 4008470:	b0ffffc4 	addi	r3,r22,-1
 4008474:	b8bff416 	blt	r23,r2,4008448 <___vfprintf_internal_r+0x1c74>
 4008478:	11400c04 	addi	r5,r2,48
 400847c:	b17fffc5 	stb	r5,-1(r22)
 4008480:	d8811fc4 	addi	r2,sp,1151
 4008484:	e013883a 	mov	r9,fp
 4008488:	1880482e 	bgeu	r3,r2,40085ac <___vfprintf_internal_r+0x1dd8>
 400848c:	b007883a 	mov	r3,r22
 4008490:	d9012044 	addi	r4,sp,1153
 4008494:	00000206 	br	40084a0 <___vfprintf_internal_r+0x1ccc>
 4008498:	19400003 	ldbu	r5,0(r3)
 400849c:	18c00044 	addi	r3,r3,1
 40084a0:	21400005 	stb	r5,0(r4)
 40084a4:	21000044 	addi	r4,r4,1
 40084a8:	10fffb1e 	bne	r2,r3,4008498 <___vfprintf_internal_r+0x1cc4>
 40084ac:	d8c12004 	addi	r3,sp,1152
 40084b0:	1d87c83a 	sub	r3,r3,r22
 40084b4:	d9012044 	addi	r4,sp,1153
 40084b8:	20c7883a 	add	r3,r4,r3
 40084bc:	003fba06 	br	40083a8 <___vfprintf_internal_r+0x1bd4>
 40084c0:	d8c12217 	ldw	r3,1160(sp)
 40084c4:	003e9906 	br	4007f2c <___vfprintf_internal_r+0x1758>
 40084c8:	05000b0e 	bge	zero,r20,40084f8 <___vfprintf_internal_r+0x1d24>
 40084cc:	05000044 	movi	r20,1
 40084d0:	da013217 	ldw	r8,1224(sp)
 40084d4:	a229883a 	add	r20,r20,r8
 40084d8:	dd012b15 	stw	r20,1196(sp)
 40084dc:	dd012815 	stw	r20,1184(sp)
 40084e0:	a03fc90e 	bge	r20,zero,4008408 <___vfprintf_internal_r+0x1c34>
 40084e4:	d8012815 	stw	zero,1184(sp)
 40084e8:	048019c4 	movi	r18,103
 40084ec:	003ea306 	br	4007f7c <___vfprintf_internal_r+0x17a8>
 40084f0:	e5c00044 	addi	r23,fp,1
 40084f4:	003e6606 	br	4007e90 <___vfprintf_internal_r+0x16bc>
 40084f8:	00800084 	movi	r2,2
 40084fc:	1529c83a 	sub	r20,r2,r20
 4008500:	003ff306 	br	40084d0 <___vfprintf_internal_r+0x1cfc>
 4008504:	008011c4 	movi	r2,71
 4008508:	90be7226 	beq	r18,r2,4007ed4 <___vfprintf_internal_r+0x1700>
 400850c:	003e7306 	br	4007edc <___vfprintf_internal_r+0x1708>
 4008510:	d8812d17 	ldw	r2,1204(sp)
 4008514:	ac800043 	ldbu	r18,1(r21)
 4008518:	202b883a 	mov	r21,r4
 400851c:	17000017 	ldw	fp,0(r2)
 4008520:	10800104 	addi	r2,r2,4
 4008524:	d8812d15 	stw	r2,1204(sp)
 4008528:	e0001b16 	blt	fp,zero,4008598 <___vfprintf_internal_r+0x1dc4>
 400852c:	94803fcc 	andi	r18,r18,255
 4008530:	9480201c 	xori	r18,r18,128
 4008534:	94bfe004 	addi	r18,r18,-128
 4008538:	00390406 	br	400694c <___vfprintf_internal_r+0x178>
 400853c:	00bfffc4 	movi	r2,-1
 4008540:	d8812c15 	stw	r2,1200(sp)
 4008544:	003a2506 	br	4006ddc <___vfprintf_internal_r+0x608>
 4008548:	80a0703a 	and	r16,r16,r2
 400854c:	803f9d1e 	bne	r16,zero,40083c4 <___vfprintf_internal_r+0x1bf0>
 4008550:	d8812b17 	ldw	r2,1196(sp)
 4008554:	d8812815 	stw	r2,1184(sp)
 4008558:	103e880e 	bge	r2,zero,4007f7c <___vfprintf_internal_r+0x17a8>
 400855c:	003f9e06 	br	40083d8 <___vfprintf_internal_r+0x1c04>
 4008560:	00800b44 	movi	r2,45
 4008564:	0529c83a 	sub	r20,zero,r20
 4008568:	d8812005 	stb	r2,1152(sp)
 400856c:	003f8606 	br	4008388 <___vfprintf_internal_r+0x1bb4>
 4008570:	1007883a 	mov	r3,r2
 4008574:	003e6d06 	br	4007f2c <___vfprintf_internal_r+0x1758>
 4008578:	e000021e 	bne	fp,zero,4008584 <___vfprintf_internal_r+0x1db0>
 400857c:	8400004c 	andi	r16,r16,1
 4008580:	80000e26 	beq	r16,zero,40085bc <___vfprintf_internal_r+0x1de8>
 4008584:	e7000084 	addi	fp,fp,2
 4008588:	df012b15 	stw	fp,1196(sp)
 400858c:	df012815 	stw	fp,1184(sp)
 4008590:	e03e7a0e 	bge	fp,zero,4007f7c <___vfprintf_internal_r+0x17a8>
 4008594:	003f9006 	br	40083d8 <___vfprintf_internal_r+0x1c04>
 4008598:	94803fcc 	andi	r18,r18,255
 400859c:	9480201c 	xori	r18,r18,128
 40085a0:	073fffc4 	movi	fp,-1
 40085a4:	94bfe004 	addi	r18,r18,-128
 40085a8:	0038e806 	br	400694c <___vfprintf_internal_r+0x178>
 40085ac:	d8c12044 	addi	r3,sp,1153
 40085b0:	003f7d06 	br	40083a8 <___vfprintf_internal_r+0x1bd4>
 40085b4:	dd012417 	ldw	r20,1168(sp)
 40085b8:	003f6d06 	br	4008370 <___vfprintf_internal_r+0x1b9c>
 40085bc:	00c00044 	movi	r3,1
 40085c0:	d8c12815 	stw	r3,1184(sp)
 40085c4:	d8c12b15 	stw	r3,1196(sp)
 40085c8:	003e6c06 	br	4007f7c <___vfprintf_internal_r+0x17a8>

040085cc <__vfprintf_internal>:
 40085cc:	00810374 	movhi	r2,1037
 40085d0:	10903e04 	addi	r2,r2,16632
 40085d4:	2007883a 	mov	r3,r4
 40085d8:	11000017 	ldw	r4,0(r2)
 40085dc:	2805883a 	mov	r2,r5
 40085e0:	300f883a 	mov	r7,r6
 40085e4:	180b883a 	mov	r5,r3
 40085e8:	100d883a 	mov	r6,r2
 40085ec:	40067d41 	jmpi	40067d4 <___vfprintf_internal_r>

040085f0 <__swsetup_r>:
 40085f0:	00810374 	movhi	r2,1037
 40085f4:	10903e04 	addi	r2,r2,16632
 40085f8:	10800017 	ldw	r2,0(r2)
 40085fc:	defffd04 	addi	sp,sp,-12
 4008600:	dc400115 	stw	r17,4(sp)
 4008604:	dc000015 	stw	r16,0(sp)
 4008608:	dfc00215 	stw	ra,8(sp)
 400860c:	2023883a 	mov	r17,r4
 4008610:	2821883a 	mov	r16,r5
 4008614:	10000226 	beq	r2,zero,4008620 <__swsetup_r+0x30>
 4008618:	10c00e17 	ldw	r3,56(r2)
 400861c:	18003d26 	beq	r3,zero,4008714 <__swsetup_r+0x124>
 4008620:	8080030b 	ldhu	r2,12(r16)
 4008624:	10c0020c 	andi	r3,r2,8
 4008628:	18ffffcc 	andi	r3,r3,65535
 400862c:	18e0001c 	xori	r3,r3,32768
 4008630:	18e00004 	addi	r3,r3,-32768
 4008634:	18001226 	beq	r3,zero,4008680 <__swsetup_r+0x90>
 4008638:	80c00417 	ldw	r3,16(r16)
 400863c:	18001f26 	beq	r3,zero,40086bc <__swsetup_r+0xcc>
 4008640:	1100004c 	andi	r4,r2,1
 4008644:	2000261e 	bne	r4,zero,40086e0 <__swsetup_r+0xf0>
 4008648:	1080008c 	andi	r2,r2,2
 400864c:	10bfffcc 	andi	r2,r2,65535
 4008650:	10a0001c 	xori	r2,r2,32768
 4008654:	10a00004 	addi	r2,r2,-32768
 4008658:	1000311e 	bne	r2,zero,4008720 <__swsetup_r+0x130>
 400865c:	80800517 	ldw	r2,20(r16)
 4008660:	80800215 	stw	r2,8(r16)
 4008664:	18002326 	beq	r3,zero,40086f4 <__swsetup_r+0x104>
 4008668:	0005883a 	mov	r2,zero
 400866c:	dfc00217 	ldw	ra,8(sp)
 4008670:	dc400117 	ldw	r17,4(sp)
 4008674:	dc000017 	ldw	r16,0(sp)
 4008678:	dec00304 	addi	sp,sp,12
 400867c:	f800283a 	ret
 4008680:	10c0040c 	andi	r3,r2,16
 4008684:	18ffffcc 	andi	r3,r3,65535
 4008688:	18e0001c 	xori	r3,r3,32768
 400868c:	18e00004 	addi	r3,r3,-32768
 4008690:	18001e26 	beq	r3,zero,400870c <__swsetup_r+0x11c>
 4008694:	10c0010c 	andi	r3,r2,4
 4008698:	18ffffcc 	andi	r3,r3,65535
 400869c:	18e0001c 	xori	r3,r3,32768
 40086a0:	18e00004 	addi	r3,r3,-32768
 40086a4:	1800211e 	bne	r3,zero,400872c <__swsetup_r+0x13c>
 40086a8:	80c00417 	ldw	r3,16(r16)
 40086ac:	11400214 	ori	r5,r2,8
 40086b0:	8140030d 	sth	r5,12(r16)
 40086b4:	2805883a 	mov	r2,r5
 40086b8:	183fe11e 	bne	r3,zero,4008640 <__swsetup_r+0x50>
 40086bc:	1140a00c 	andi	r5,r2,640
 40086c0:	01008004 	movi	r4,512
 40086c4:	293fde26 	beq	r5,r4,4008640 <__swsetup_r+0x50>
 40086c8:	8809883a 	mov	r4,r17
 40086cc:	800b883a 	mov	r5,r16
 40086d0:	400afa40 	call	400afa4 <__smakebuf_r>
 40086d4:	8080030b 	ldhu	r2,12(r16)
 40086d8:	80c00417 	ldw	r3,16(r16)
 40086dc:	003fd806 	br	4008640 <__swsetup_r+0x50>
 40086e0:	80800517 	ldw	r2,20(r16)
 40086e4:	80000215 	stw	zero,8(r16)
 40086e8:	0085c83a 	sub	r2,zero,r2
 40086ec:	80800615 	stw	r2,24(r16)
 40086f0:	183fdd1e 	bne	r3,zero,4008668 <__swsetup_r+0x78>
 40086f4:	8080030b 	ldhu	r2,12(r16)
 40086f8:	1080200c 	andi	r2,r2,128
 40086fc:	10bfffcc 	andi	r2,r2,65535
 4008700:	10a0001c 	xori	r2,r2,32768
 4008704:	10a00004 	addi	r2,r2,-32768
 4008708:	103fd826 	beq	r2,zero,400866c <__swsetup_r+0x7c>
 400870c:	00bfffc4 	movi	r2,-1
 4008710:	003fd606 	br	400866c <__swsetup_r+0x7c>
 4008714:	1009883a 	mov	r4,r2
 4008718:	400a2300 	call	400a230 <__sinit>
 400871c:	003fc006 	br	4008620 <__swsetup_r+0x30>
 4008720:	0005883a 	mov	r2,zero
 4008724:	80800215 	stw	r2,8(r16)
 4008728:	003fce06 	br	4008664 <__swsetup_r+0x74>
 400872c:	81400c17 	ldw	r5,48(r16)
 4008730:	28000626 	beq	r5,zero,400874c <__swsetup_r+0x15c>
 4008734:	80c01004 	addi	r3,r16,64
 4008738:	28c00326 	beq	r5,r3,4008748 <__swsetup_r+0x158>
 400873c:	8809883a 	mov	r4,r17
 4008740:	400a5b40 	call	400a5b4 <_free_r>
 4008744:	8080030b 	ldhu	r2,12(r16)
 4008748:	80000c15 	stw	zero,48(r16)
 400874c:	80c00417 	ldw	r3,16(r16)
 4008750:	013ff6c4 	movi	r4,-37
 4008754:	2084703a 	and	r2,r4,r2
 4008758:	80000115 	stw	zero,4(r16)
 400875c:	80c00015 	stw	r3,0(r16)
 4008760:	003fd206 	br	40086ac <__swsetup_r+0xbc>

04008764 <quorem>:
 4008764:	defff704 	addi	sp,sp,-36
 4008768:	dc400115 	stw	r17,4(sp)
 400876c:	20800417 	ldw	r2,16(r4)
 4008770:	2c400417 	ldw	r17,16(r5)
 4008774:	dd800615 	stw	r22,24(sp)
 4008778:	dd400515 	stw	r21,20(sp)
 400877c:	dfc00815 	stw	ra,32(sp)
 4008780:	ddc00715 	stw	r23,28(sp)
 4008784:	dd000415 	stw	r20,16(sp)
 4008788:	dcc00315 	stw	r19,12(sp)
 400878c:	dc800215 	stw	r18,8(sp)
 4008790:	dc000015 	stw	r16,0(sp)
 4008794:	202b883a 	mov	r21,r4
 4008798:	282d883a 	mov	r22,r5
 400879c:	14407116 	blt	r2,r17,4008964 <quorem+0x200>
 40087a0:	88800104 	addi	r2,r17,4
 40087a4:	1085883a 	add	r2,r2,r2
 40087a8:	1085883a 	add	r2,r2,r2
 40087ac:	28a7883a 	add	r19,r5,r2
 40087b0:	2085883a 	add	r2,r4,r2
 40087b4:	15c00017 	ldw	r23,0(r2)
 40087b8:	99400017 	ldw	r5,0(r19)
 40087bc:	8c7fffc4 	addi	r17,r17,-1
 40087c0:	b809883a 	mov	r4,r23
 40087c4:	29400044 	addi	r5,r5,1
 40087c8:	400ea500 	call	400ea50 <__udivsi3>
 40087cc:	1025883a 	mov	r18,r2
 40087d0:	b4000504 	addi	r16,r22,20
 40087d4:	ad000504 	addi	r20,r21,20
 40087d8:	10002d26 	beq	r2,zero,4008890 <quorem+0x12c>
 40087dc:	800d883a 	mov	r6,r16
 40087e0:	a007883a 	mov	r3,r20
 40087e4:	000f883a 	mov	r7,zero
 40087e8:	0005883a 	mov	r2,zero
 40087ec:	32c00017 	ldw	r11,0(r6)
 40087f0:	1a400017 	ldw	r9,0(r3)
 40087f4:	31800104 	addi	r6,r6,4
 40087f8:	5abfffcc 	andi	r10,r11,65535
 40087fc:	5495383a 	mul	r10,r10,r18
 4008800:	5816d43a 	srli	r11,r11,16
 4008804:	4a3fffcc 	andi	r8,r9,65535
 4008808:	3a95883a 	add	r10,r7,r10
 400880c:	500ed43a 	srli	r7,r10,16
 4008810:	5c97383a 	mul	r11,r11,r18
 4008814:	4085883a 	add	r2,r8,r2
 4008818:	52bfffcc 	andi	r10,r10,65535
 400881c:	1291c83a 	sub	r8,r2,r10
 4008820:	4804d43a 	srli	r2,r9,16
 4008824:	3acf883a 	add	r7,r7,r11
 4008828:	4015d43a 	srai	r10,r8,16
 400882c:	393fffcc 	andi	r4,r7,65535
 4008830:	1105c83a 	sub	r2,r2,r4
 4008834:	1285883a 	add	r2,r2,r10
 4008838:	1880008d 	sth	r2,2(r3)
 400883c:	1a00000d 	sth	r8,0(r3)
 4008840:	380ed43a 	srli	r7,r7,16
 4008844:	1005d43a 	srai	r2,r2,16
 4008848:	18c00104 	addi	r3,r3,4
 400884c:	99bfe72e 	bgeu	r19,r6,40087ec <quorem+0x88>
 4008850:	b8000f1e 	bne	r23,zero,4008890 <quorem+0x12c>
 4008854:	88800144 	addi	r2,r17,5
 4008858:	1085883a 	add	r2,r2,r2
 400885c:	1085883a 	add	r2,r2,r2
 4008860:	a887883a 	add	r3,r21,r2
 4008864:	18bfff04 	addi	r2,r3,-4
 4008868:	a080082e 	bgeu	r20,r2,400888c <quorem+0x128>
 400886c:	18ffff17 	ldw	r3,-4(r3)
 4008870:	18000326 	beq	r3,zero,4008880 <quorem+0x11c>
 4008874:	00000506 	br	400888c <quorem+0x128>
 4008878:	10c00017 	ldw	r3,0(r2)
 400887c:	1800031e 	bne	r3,zero,400888c <quorem+0x128>
 4008880:	10bfff04 	addi	r2,r2,-4
 4008884:	8c7fffc4 	addi	r17,r17,-1
 4008888:	a0bffb36 	bltu	r20,r2,4008878 <quorem+0x114>
 400888c:	ac400415 	stw	r17,16(r21)
 4008890:	a809883a 	mov	r4,r21
 4008894:	b00b883a 	mov	r5,r22
 4008898:	400c5680 	call	400c568 <__mcmp>
 400889c:	10002516 	blt	r2,zero,4008934 <quorem+0x1d0>
 40088a0:	94800044 	addi	r18,r18,1
 40088a4:	a007883a 	mov	r3,r20
 40088a8:	000b883a 	mov	r5,zero
 40088ac:	1a000017 	ldw	r8,0(r3)
 40088b0:	81c00017 	ldw	r7,0(r16)
 40088b4:	84000104 	addi	r16,r16,4
 40088b8:	41bfffcc 	andi	r6,r8,65535
 40088bc:	38bfffcc 	andi	r2,r7,65535
 40088c0:	314b883a 	add	r5,r6,r5
 40088c4:	288dc83a 	sub	r6,r5,r2
 40088c8:	380ed43a 	srli	r7,r7,16
 40088cc:	400ad43a 	srli	r5,r8,16
 40088d0:	3005d43a 	srai	r2,r6,16
 40088d4:	1980000d 	sth	r6,0(r3)
 40088d8:	29cbc83a 	sub	r5,r5,r7
 40088dc:	288b883a 	add	r5,r5,r2
 40088e0:	1940008d 	sth	r5,2(r3)
 40088e4:	280bd43a 	srai	r5,r5,16
 40088e8:	18c00104 	addi	r3,r3,4
 40088ec:	9c3fef2e 	bgeu	r19,r16,40088ac <quorem+0x148>
 40088f0:	88800144 	addi	r2,r17,5
 40088f4:	1085883a 	add	r2,r2,r2
 40088f8:	1085883a 	add	r2,r2,r2
 40088fc:	a885883a 	add	r2,r21,r2
 4008900:	10c00017 	ldw	r3,0(r2)
 4008904:	18000b1e 	bne	r3,zero,4008934 <quorem+0x1d0>
 4008908:	10ffff04 	addi	r3,r2,-4
 400890c:	a0c0082e 	bgeu	r20,r3,4008930 <quorem+0x1cc>
 4008910:	10bfff17 	ldw	r2,-4(r2)
 4008914:	10000326 	beq	r2,zero,4008924 <quorem+0x1c0>
 4008918:	00000506 	br	4008930 <quorem+0x1cc>
 400891c:	18800017 	ldw	r2,0(r3)
 4008920:	1000031e 	bne	r2,zero,4008930 <quorem+0x1cc>
 4008924:	18ffff04 	addi	r3,r3,-4
 4008928:	8c7fffc4 	addi	r17,r17,-1
 400892c:	a0fffb36 	bltu	r20,r3,400891c <quorem+0x1b8>
 4008930:	ac400415 	stw	r17,16(r21)
 4008934:	9005883a 	mov	r2,r18
 4008938:	dfc00817 	ldw	ra,32(sp)
 400893c:	ddc00717 	ldw	r23,28(sp)
 4008940:	dd800617 	ldw	r22,24(sp)
 4008944:	dd400517 	ldw	r21,20(sp)
 4008948:	dd000417 	ldw	r20,16(sp)
 400894c:	dcc00317 	ldw	r19,12(sp)
 4008950:	dc800217 	ldw	r18,8(sp)
 4008954:	dc400117 	ldw	r17,4(sp)
 4008958:	dc000017 	ldw	r16,0(sp)
 400895c:	dec00904 	addi	sp,sp,36
 4008960:	f800283a 	ret
 4008964:	0005883a 	mov	r2,zero
 4008968:	003ff306 	br	4008938 <quorem+0x1d4>

0400896c <_dtoa_r>:
 400896c:	20801017 	ldw	r2,64(r4)
 4008970:	deffdf04 	addi	sp,sp,-132
 4008974:	dcc01a15 	stw	r19,104(sp)
 4008978:	dc801915 	stw	r18,100(sp)
 400897c:	dc401815 	stw	r17,96(sp)
 4008980:	dc001715 	stw	r16,92(sp)
 4008984:	dfc02015 	stw	ra,128(sp)
 4008988:	df001f15 	stw	fp,124(sp)
 400898c:	ddc01e15 	stw	r23,120(sp)
 4008990:	dd801d15 	stw	r22,116(sp)
 4008994:	dd401c15 	stw	r21,112(sp)
 4008998:	dd001b15 	stw	r20,108(sp)
 400899c:	d9400315 	stw	r5,12(sp)
 40089a0:	d9c00415 	stw	r7,16(sp)
 40089a4:	2021883a 	mov	r16,r4
 40089a8:	3025883a 	mov	r18,r6
 40089ac:	dcc02317 	ldw	r19,140(sp)
 40089b0:	3023883a 	mov	r17,r6
 40089b4:	10000826 	beq	r2,zero,40089d8 <_dtoa_r+0x6c>
 40089b8:	20c01117 	ldw	r3,68(r4)
 40089bc:	01800044 	movi	r6,1
 40089c0:	100b883a 	mov	r5,r2
 40089c4:	30cc983a 	sll	r6,r6,r3
 40089c8:	10c00115 	stw	r3,4(r2)
 40089cc:	11800215 	stw	r6,8(r2)
 40089d0:	400bd6c0 	call	400bd6c <_Bfree>
 40089d4:	80001015 	stw	zero,64(r16)
 40089d8:	90002f16 	blt	r18,zero,4008a98 <_dtoa_r+0x12c>
 40089dc:	98000015 	stw	zero,0(r19)
 40089e0:	90dffc2c 	andhi	r3,r18,32752
 40089e4:	009ffc34 	movhi	r2,32752
 40089e8:	18801c26 	beq	r3,r2,4008a5c <_dtoa_r+0xf0>
 40089ec:	d9000317 	ldw	r4,12(sp)
 40089f0:	880b883a 	mov	r5,r17
 40089f4:	000d883a 	mov	r6,zero
 40089f8:	000f883a 	mov	r7,zero
 40089fc:	400e69c0 	call	400e69c <__eqdf2>
 4008a00:	10002c1e 	bne	r2,zero,4008ab4 <_dtoa_r+0x148>
 4008a04:	d9002217 	ldw	r4,136(sp)
 4008a08:	d9c02417 	ldw	r7,144(sp)
 4008a0c:	00800044 	movi	r2,1
 4008a10:	20800015 	stw	r2,0(r4)
 4008a14:	38019426 	beq	r7,zero,4009068 <_dtoa_r+0x6fc>
 4008a18:	00810374 	movhi	r2,1037
 4008a1c:	10890d44 	addi	r2,r2,9269
 4008a20:	38800015 	stw	r2,0(r7)
 4008a24:	15ffffc4 	addi	r23,r2,-1
 4008a28:	b805883a 	mov	r2,r23
 4008a2c:	dfc02017 	ldw	ra,128(sp)
 4008a30:	df001f17 	ldw	fp,124(sp)
 4008a34:	ddc01e17 	ldw	r23,120(sp)
 4008a38:	dd801d17 	ldw	r22,116(sp)
 4008a3c:	dd401c17 	ldw	r21,112(sp)
 4008a40:	dd001b17 	ldw	r20,108(sp)
 4008a44:	dcc01a17 	ldw	r19,104(sp)
 4008a48:	dc801917 	ldw	r18,100(sp)
 4008a4c:	dc401817 	ldw	r17,96(sp)
 4008a50:	dc001717 	ldw	r16,92(sp)
 4008a54:	dec02104 	addi	sp,sp,132
 4008a58:	f800283a 	ret
 4008a5c:	d8c02217 	ldw	r3,136(sp)
 4008a60:	d9000317 	ldw	r4,12(sp)
 4008a64:	0089c3c4 	movi	r2,9999
 4008a68:	18800015 	stw	r2,0(r3)
 4008a6c:	20016c26 	beq	r4,zero,4009020 <_dtoa_r+0x6b4>
 4008a70:	05c10374 	movhi	r23,1037
 4008a74:	bdc91904 	addi	r23,r23,9316
 4008a78:	d9c02417 	ldw	r7,144(sp)
 4008a7c:	383fea26 	beq	r7,zero,4008a28 <_dtoa_r+0xbc>
 4008a80:	b88000c7 	ldb	r2,3(r23)
 4008a84:	10016d1e 	bne	r2,zero,400903c <_dtoa_r+0x6d0>
 4008a88:	b88000c4 	addi	r2,r23,3
 4008a8c:	d8c02417 	ldw	r3,144(sp)
 4008a90:	18800015 	stw	r2,0(r3)
 4008a94:	003fe406 	br	4008a28 <_dtoa_r+0xbc>
 4008a98:	04600034 	movhi	r17,32768
 4008a9c:	8c7fffc4 	addi	r17,r17,-1
 4008aa0:	9462703a 	and	r17,r18,r17
 4008aa4:	00800044 	movi	r2,1
 4008aa8:	98800015 	stw	r2,0(r19)
 4008aac:	8825883a 	mov	r18,r17
 4008ab0:	003fcb06 	br	40089e0 <_dtoa_r+0x74>
 4008ab4:	d9400317 	ldw	r5,12(sp)
 4008ab8:	9028d53a 	srli	r20,r18,20
 4008abc:	d8800204 	addi	r2,sp,8
 4008ac0:	d8800015 	stw	r2,0(sp)
 4008ac4:	8009883a 	mov	r4,r16
 4008ac8:	880d883a 	mov	r6,r17
 4008acc:	d9c00104 	addi	r7,sp,4
 4008ad0:	400c9100 	call	400c910 <__d2b>
 4008ad4:	a501ffcc 	andi	r20,r20,2047
 4008ad8:	1039883a 	mov	fp,r2
 4008adc:	a001591e 	bne	r20,zero,4009044 <_dtoa_r+0x6d8>
 4008ae0:	dd400217 	ldw	r21,8(sp)
 4008ae4:	dd000117 	ldw	r20,4(sp)
 4008ae8:	00befbc4 	movi	r2,-1041
 4008aec:	ad29883a 	add	r20,r21,r20
 4008af0:	a082d216 	blt	r20,r2,400963c <_dtoa_r+0xcd0>
 4008af4:	d8c00317 	ldw	r3,12(sp)
 4008af8:	013f0384 	movi	r4,-1010
 4008afc:	2509c83a 	sub	r4,r4,r20
 4008b00:	a0810484 	addi	r2,r20,1042
 4008b04:	9124983a 	sll	r18,r18,r4
 4008b08:	1884d83a 	srl	r2,r3,r2
 4008b0c:	9088b03a 	or	r4,r18,r2
 4008b10:	400e8140 	call	400e814 <__floatunsidf>
 4008b14:	1009883a 	mov	r4,r2
 4008b18:	017f8434 	movhi	r5,65040
 4008b1c:	00800044 	movi	r2,1
 4008b20:	194b883a 	add	r5,r3,r5
 4008b24:	a53fffc4 	addi	r20,r20,-1
 4008b28:	d8800f15 	stw	r2,60(sp)
 4008b2c:	000d883a 	mov	r6,zero
 4008b30:	01cffe34 	movhi	r7,16376
 4008b34:	4005b380 	call	4005b38 <__subdf3>
 4008b38:	1009883a 	mov	r4,r2
 4008b3c:	180b883a 	mov	r5,r3
 4008b40:	0198dbf4 	movhi	r6,25455
 4008b44:	3190d844 	addi	r6,r6,17249
 4008b48:	01cff4f4 	movhi	r7,16339
 4008b4c:	39e1e9c4 	addi	r7,r7,-30809
 4008b50:	4005b980 	call	4005b98 <__muldf3>
 4008b54:	180b883a 	mov	r5,r3
 4008b58:	01a2d874 	movhi	r6,35681
 4008b5c:	31b22cc4 	addi	r6,r6,-14157
 4008b60:	01cff1f4 	movhi	r7,16327
 4008b64:	39e28a04 	addi	r7,r7,-30168
 4008b68:	1009883a 	mov	r4,r2
 4008b6c:	4005ae40 	call	4005ae4 <__adddf3>
 4008b70:	a009883a 	mov	r4,r20
 4008b74:	1027883a 	mov	r19,r2
 4008b78:	1825883a 	mov	r18,r3
 4008b7c:	4005ee00 	call	4005ee0 <__floatsidf>
 4008b80:	1009883a 	mov	r4,r2
 4008b84:	180b883a 	mov	r5,r3
 4008b88:	019427f4 	movhi	r6,20639
 4008b8c:	319e7ec4 	addi	r6,r6,31227
 4008b90:	01cff4f4 	movhi	r7,16339
 4008b94:	39d104c4 	addi	r7,r7,17427
 4008b98:	4005b980 	call	4005b98 <__muldf3>
 4008b9c:	9809883a 	mov	r4,r19
 4008ba0:	900b883a 	mov	r5,r18
 4008ba4:	100d883a 	mov	r6,r2
 4008ba8:	180f883a 	mov	r7,r3
 4008bac:	4005ae40 	call	4005ae4 <__adddf3>
 4008bb0:	1009883a 	mov	r4,r2
 4008bb4:	180b883a 	mov	r5,r3
 4008bb8:	1027883a 	mov	r19,r2
 4008bbc:	1825883a 	mov	r18,r3
 4008bc0:	4005fb40 	call	4005fb4 <__fixdfsi>
 4008bc4:	9809883a 	mov	r4,r19
 4008bc8:	900b883a 	mov	r5,r18
 4008bcc:	000d883a 	mov	r6,zero
 4008bd0:	000f883a 	mov	r7,zero
 4008bd4:	d8800615 	stw	r2,24(sp)
 4008bd8:	400e7b80 	call	400e7b8 <__ltdf2>
 4008bdc:	10027e16 	blt	r2,zero,40095d8 <_dtoa_r+0xc6c>
 4008be0:	d8c00617 	ldw	r3,24(sp)
 4008be4:	00800584 	movi	r2,22
 4008be8:	10c26c36 	bltu	r2,r3,400959c <_dtoa_r+0xc30>
 4008bec:	180490fa 	slli	r2,r3,3
 4008bf0:	00c10374 	movhi	r3,1037
 4008bf4:	18c93f04 	addi	r3,r3,9468
 4008bf8:	d9800317 	ldw	r6,12(sp)
 4008bfc:	1885883a 	add	r2,r3,r2
 4008c00:	11000017 	ldw	r4,0(r2)
 4008c04:	11400117 	ldw	r5,4(r2)
 4008c08:	880f883a 	mov	r7,r17
 4008c0c:	400e7540 	call	400e754 <__gtdf2>
 4008c10:	00828f0e 	bge	zero,r2,4009650 <_dtoa_r+0xce4>
 4008c14:	d8800617 	ldw	r2,24(sp)
 4008c18:	d8000d15 	stw	zero,52(sp)
 4008c1c:	10bfffc4 	addi	r2,r2,-1
 4008c20:	d8800615 	stw	r2,24(sp)
 4008c24:	ad29c83a 	sub	r20,r21,r20
 4008c28:	a53fffc4 	addi	r20,r20,-1
 4008c2c:	a0026616 	blt	r20,zero,40095c8 <_dtoa_r+0xc5c>
 4008c30:	dd000715 	stw	r20,28(sp)
 4008c34:	d8000815 	stw	zero,32(sp)
 4008c38:	d8800617 	ldw	r2,24(sp)
 4008c3c:	10025a16 	blt	r2,zero,40095a8 <_dtoa_r+0xc3c>
 4008c40:	d8c00717 	ldw	r3,28(sp)
 4008c44:	d8800b15 	stw	r2,44(sp)
 4008c48:	d8000a15 	stw	zero,40(sp)
 4008c4c:	1887883a 	add	r3,r3,r2
 4008c50:	d8c00715 	stw	r3,28(sp)
 4008c54:	d9c00417 	ldw	r7,16(sp)
 4008c58:	00800244 	movi	r2,9
 4008c5c:	11c10536 	bltu	r2,r7,4009074 <_dtoa_r+0x708>
 4008c60:	00800144 	movi	r2,5
 4008c64:	11c4c60e 	bge	r2,r7,4009f80 <_dtoa_r+0x1614>
 4008c68:	39ffff04 	addi	r7,r7,-4
 4008c6c:	d9c00415 	stw	r7,16(sp)
 4008c70:	0027883a 	mov	r19,zero
 4008c74:	d9c00417 	ldw	r7,16(sp)
 4008c78:	008000c4 	movi	r2,3
 4008c7c:	3883a226 	beq	r7,r2,4009b08 <_dtoa_r+0x119c>
 4008c80:	11c2bc16 	blt	r2,r7,4009774 <_dtoa_r+0xe08>
 4008c84:	00800084 	movi	r2,2
 4008c88:	3880fb1e 	bne	r7,r2,4009078 <_dtoa_r+0x70c>
 4008c8c:	d8000c15 	stw	zero,48(sp)
 4008c90:	d9002117 	ldw	r4,132(sp)
 4008c94:	0103ae0e 	bge	zero,r4,4009b50 <_dtoa_r+0x11e4>
 4008c98:	2025883a 	mov	r18,r4
 4008c9c:	d9000e15 	stw	r4,56(sp)
 4008ca0:	d9000915 	stw	r4,36(sp)
 4008ca4:	80001115 	stw	zero,68(r16)
 4008ca8:	008005c4 	movi	r2,23
 4008cac:	1484b22e 	bgeu	r2,r18,4009f78 <_dtoa_r+0x160c>
 4008cb0:	00c00044 	movi	r3,1
 4008cb4:	00800104 	movi	r2,4
 4008cb8:	1085883a 	add	r2,r2,r2
 4008cbc:	11000504 	addi	r4,r2,20
 4008cc0:	180b883a 	mov	r5,r3
 4008cc4:	18c00044 	addi	r3,r3,1
 4008cc8:	913ffb2e 	bgeu	r18,r4,4008cb8 <_dtoa_r+0x34c>
 4008ccc:	81401115 	stw	r5,68(r16)
 4008cd0:	8009883a 	mov	r4,r16
 4008cd4:	400bcc40 	call	400bcc4 <_Balloc>
 4008cd8:	102f883a 	mov	r23,r2
 4008cdc:	80801015 	stw	r2,64(r16)
 4008ce0:	00800384 	movi	r2,14
 4008ce4:	1480f036 	bltu	r2,r18,40090a8 <_dtoa_r+0x73c>
 4008ce8:	9800ef26 	beq	r19,zero,40090a8 <_dtoa_r+0x73c>
 4008cec:	d8800617 	ldw	r2,24(sp)
 4008cf0:	00839c0e 	bge	zero,r2,4009b64 <_dtoa_r+0x11f8>
 4008cf4:	d8c00617 	ldw	r3,24(sp)
 4008cf8:	108003cc 	andi	r2,r2,15
 4008cfc:	100490fa 	slli	r2,r2,3
 4008d00:	182bd13a 	srai	r21,r3,4
 4008d04:	00c10374 	movhi	r3,1037
 4008d08:	18c93f04 	addi	r3,r3,9468
 4008d0c:	1885883a 	add	r2,r3,r2
 4008d10:	a8c0040c 	andi	r3,r21,16
 4008d14:	12800017 	ldw	r10,0(r2)
 4008d18:	15800117 	ldw	r22,4(r2)
 4008d1c:	18038726 	beq	r3,zero,4009b3c <_dtoa_r+0x11d0>
 4008d20:	00810374 	movhi	r2,1037
 4008d24:	10893504 	addi	r2,r2,9428
 4008d28:	11800817 	ldw	r6,32(r2)
 4008d2c:	11c00917 	ldw	r7,36(r2)
 4008d30:	d9000317 	ldw	r4,12(sp)
 4008d34:	880b883a 	mov	r5,r17
 4008d38:	da801515 	stw	r10,84(sp)
 4008d3c:	400e4e80 	call	400e4e8 <__divdf3>
 4008d40:	da801517 	ldw	r10,84(sp)
 4008d44:	d8801015 	stw	r2,64(sp)
 4008d48:	1829883a 	mov	r20,r3
 4008d4c:	ad4003cc 	andi	r21,r21,15
 4008d50:	048000c4 	movi	r18,3
 4008d54:	a8001126 	beq	r21,zero,4008d9c <_dtoa_r+0x430>
 4008d58:	04c10374 	movhi	r19,1037
 4008d5c:	9cc93504 	addi	r19,r19,9428
 4008d60:	5005883a 	mov	r2,r10
 4008d64:	b007883a 	mov	r3,r22
 4008d68:	a980004c 	andi	r6,r21,1
 4008d6c:	1009883a 	mov	r4,r2
 4008d70:	a82bd07a 	srai	r21,r21,1
 4008d74:	180b883a 	mov	r5,r3
 4008d78:	30000426 	beq	r6,zero,4008d8c <_dtoa_r+0x420>
 4008d7c:	99800017 	ldw	r6,0(r19)
 4008d80:	99c00117 	ldw	r7,4(r19)
 4008d84:	94800044 	addi	r18,r18,1
 4008d88:	4005b980 	call	4005b98 <__muldf3>
 4008d8c:	9cc00204 	addi	r19,r19,8
 4008d90:	a83ff51e 	bne	r21,zero,4008d68 <_dtoa_r+0x3fc>
 4008d94:	1015883a 	mov	r10,r2
 4008d98:	182d883a 	mov	r22,r3
 4008d9c:	d9001017 	ldw	r4,64(sp)
 4008da0:	a00b883a 	mov	r5,r20
 4008da4:	500d883a 	mov	r6,r10
 4008da8:	b00f883a 	mov	r7,r22
 4008dac:	400e4e80 	call	400e4e8 <__divdf3>
 4008db0:	1027883a 	mov	r19,r2
 4008db4:	1829883a 	mov	r20,r3
 4008db8:	d8c00d17 	ldw	r3,52(sp)
 4008dbc:	18000626 	beq	r3,zero,4008dd8 <_dtoa_r+0x46c>
 4008dc0:	9809883a 	mov	r4,r19
 4008dc4:	a00b883a 	mov	r5,r20
 4008dc8:	000d883a 	mov	r6,zero
 4008dcc:	01cffc34 	movhi	r7,16368
 4008dd0:	400e7b80 	call	400e7b8 <__ltdf2>
 4008dd4:	10040e16 	blt	r2,zero,4009e10 <_dtoa_r+0x14a4>
 4008dd8:	9009883a 	mov	r4,r18
 4008ddc:	4005ee00 	call	4005ee0 <__floatsidf>
 4008de0:	1009883a 	mov	r4,r2
 4008de4:	180b883a 	mov	r5,r3
 4008de8:	980d883a 	mov	r6,r19
 4008dec:	a00f883a 	mov	r7,r20
 4008df0:	4005b980 	call	4005b98 <__muldf3>
 4008df4:	1009883a 	mov	r4,r2
 4008df8:	180b883a 	mov	r5,r3
 4008dfc:	000d883a 	mov	r6,zero
 4008e00:	01d00734 	movhi	r7,16412
 4008e04:	4005ae40 	call	4005ae4 <__adddf3>
 4008e08:	057f3034 	movhi	r21,64704
 4008e0c:	1d6b883a 	add	r21,r3,r21
 4008e10:	d8c00917 	ldw	r3,36(sp)
 4008e14:	1025883a 	mov	r18,r2
 4008e18:	18031f26 	beq	r3,zero,4009a98 <_dtoa_r+0x112c>
 4008e1c:	d8800617 	ldw	r2,24(sp)
 4008e20:	dac00917 	ldw	r11,36(sp)
 4008e24:	d8801315 	stw	r2,76(sp)
 4008e28:	d8c00c17 	ldw	r3,48(sp)
 4008e2c:	18039026 	beq	r3,zero,4009c70 <_dtoa_r+0x1304>
 4008e30:	58bfffc4 	addi	r2,r11,-1
 4008e34:	100490fa 	slli	r2,r2,3
 4008e38:	00c10374 	movhi	r3,1037
 4008e3c:	18c93f04 	addi	r3,r3,9468
 4008e40:	0009883a 	mov	r4,zero
 4008e44:	1885883a 	add	r2,r3,r2
 4008e48:	11800017 	ldw	r6,0(r2)
 4008e4c:	11c00117 	ldw	r7,4(r2)
 4008e50:	014ff834 	movhi	r5,16352
 4008e54:	dac01615 	stw	r11,88(sp)
 4008e58:	400e4e80 	call	400e4e8 <__divdf3>
 4008e5c:	900d883a 	mov	r6,r18
 4008e60:	a80f883a 	mov	r7,r21
 4008e64:	1009883a 	mov	r4,r2
 4008e68:	180b883a 	mov	r5,r3
 4008e6c:	4005b380 	call	4005b38 <__subdf3>
 4008e70:	a00b883a 	mov	r5,r20
 4008e74:	9809883a 	mov	r4,r19
 4008e78:	182b883a 	mov	r21,r3
 4008e7c:	d8801015 	stw	r2,64(sp)
 4008e80:	4005fb40 	call	4005fb4 <__fixdfsi>
 4008e84:	1009883a 	mov	r4,r2
 4008e88:	d8801515 	stw	r2,84(sp)
 4008e8c:	4005ee00 	call	4005ee0 <__floatsidf>
 4008e90:	9809883a 	mov	r4,r19
 4008e94:	a00b883a 	mov	r5,r20
 4008e98:	100d883a 	mov	r6,r2
 4008e9c:	180f883a 	mov	r7,r3
 4008ea0:	4005b380 	call	4005b38 <__subdf3>
 4008ea4:	da401517 	ldw	r9,84(sp)
 4008ea8:	d9001017 	ldw	r4,64(sp)
 4008eac:	a80b883a 	mov	r5,r21
 4008eb0:	4d000c04 	addi	r20,r9,48
 4008eb4:	bd000005 	stb	r20,0(r23)
 4008eb8:	100d883a 	mov	r6,r2
 4008ebc:	180f883a 	mov	r7,r3
 4008ec0:	bd800044 	addi	r22,r23,1
 4008ec4:	1025883a 	mov	r18,r2
 4008ec8:	1827883a 	mov	r19,r3
 4008ecc:	400e7540 	call	400e754 <__gtdf2>
 4008ed0:	00842216 	blt	zero,r2,4009f5c <_dtoa_r+0x15f0>
 4008ed4:	0009883a 	mov	r4,zero
 4008ed8:	014ffc34 	movhi	r5,16368
 4008edc:	900d883a 	mov	r6,r18
 4008ee0:	980f883a 	mov	r7,r19
 4008ee4:	4005b380 	call	4005b38 <__subdf3>
 4008ee8:	d9001017 	ldw	r4,64(sp)
 4008eec:	a80b883a 	mov	r5,r21
 4008ef0:	100d883a 	mov	r6,r2
 4008ef4:	180f883a 	mov	r7,r3
 4008ef8:	400e7540 	call	400e754 <__gtdf2>
 4008efc:	dac01617 	ldw	r11,88(sp)
 4008f00:	00841316 	blt	zero,r2,4009f50 <_dtoa_r+0x15e4>
 4008f04:	00800044 	movi	r2,1
 4008f08:	12c0670e 	bge	r2,r11,40090a8 <_dtoa_r+0x73c>
 4008f0c:	bad7883a 	add	r11,r23,r11
 4008f10:	df001115 	stw	fp,68(sp)
 4008f14:	dc401215 	stw	r17,72(sp)
 4008f18:	5839883a 	mov	fp,r11
 4008f1c:	dc401017 	ldw	r17,64(sp)
 4008f20:	00000806 	br	4008f44 <_dtoa_r+0x5d8>
 4008f24:	4005b380 	call	4005b38 <__subdf3>
 4008f28:	1009883a 	mov	r4,r2
 4008f2c:	180b883a 	mov	r5,r3
 4008f30:	880d883a 	mov	r6,r17
 4008f34:	a80f883a 	mov	r7,r21
 4008f38:	400e7b80 	call	400e7b8 <__ltdf2>
 4008f3c:	1003ee16 	blt	r2,zero,4009ef8 <_dtoa_r+0x158c>
 4008f40:	b703f126 	beq	r22,fp,4009f08 <_dtoa_r+0x159c>
 4008f44:	8809883a 	mov	r4,r17
 4008f48:	a80b883a 	mov	r5,r21
 4008f4c:	000d883a 	mov	r6,zero
 4008f50:	01d00934 	movhi	r7,16420
 4008f54:	4005b980 	call	4005b98 <__muldf3>
 4008f58:	000d883a 	mov	r6,zero
 4008f5c:	01d00934 	movhi	r7,16420
 4008f60:	9009883a 	mov	r4,r18
 4008f64:	980b883a 	mov	r5,r19
 4008f68:	1023883a 	mov	r17,r2
 4008f6c:	182b883a 	mov	r21,r3
 4008f70:	4005b980 	call	4005b98 <__muldf3>
 4008f74:	180b883a 	mov	r5,r3
 4008f78:	1009883a 	mov	r4,r2
 4008f7c:	1825883a 	mov	r18,r3
 4008f80:	1027883a 	mov	r19,r2
 4008f84:	4005fb40 	call	4005fb4 <__fixdfsi>
 4008f88:	1009883a 	mov	r4,r2
 4008f8c:	1029883a 	mov	r20,r2
 4008f90:	4005ee00 	call	4005ee0 <__floatsidf>
 4008f94:	9809883a 	mov	r4,r19
 4008f98:	900b883a 	mov	r5,r18
 4008f9c:	100d883a 	mov	r6,r2
 4008fa0:	180f883a 	mov	r7,r3
 4008fa4:	4005b380 	call	4005b38 <__subdf3>
 4008fa8:	a5000c04 	addi	r20,r20,48
 4008fac:	b5000005 	stb	r20,0(r22)
 4008fb0:	1009883a 	mov	r4,r2
 4008fb4:	180b883a 	mov	r5,r3
 4008fb8:	880d883a 	mov	r6,r17
 4008fbc:	a80f883a 	mov	r7,r21
 4008fc0:	1025883a 	mov	r18,r2
 4008fc4:	1827883a 	mov	r19,r3
 4008fc8:	400e7b80 	call	400e7b8 <__ltdf2>
 4008fcc:	b5800044 	addi	r22,r22,1
 4008fd0:	0009883a 	mov	r4,zero
 4008fd4:	014ffc34 	movhi	r5,16368
 4008fd8:	900d883a 	mov	r6,r18
 4008fdc:	980f883a 	mov	r7,r19
 4008fe0:	103fd00e 	bge	r2,zero,4008f24 <_dtoa_r+0x5b8>
 4008fe4:	d9001317 	ldw	r4,76(sp)
 4008fe8:	df001117 	ldw	fp,68(sp)
 4008fec:	d9000615 	stw	r4,24(sp)
 4008ff0:	8009883a 	mov	r4,r16
 4008ff4:	e00b883a 	mov	r5,fp
 4008ff8:	400bd6c0 	call	400bd6c <_Bfree>
 4008ffc:	d9c00617 	ldw	r7,24(sp)
 4009000:	d8c02217 	ldw	r3,136(sp)
 4009004:	d9002417 	ldw	r4,144(sp)
 4009008:	b0000005 	stb	zero,0(r22)
 400900c:	38800044 	addi	r2,r7,1
 4009010:	18800015 	stw	r2,0(r3)
 4009014:	203e8426 	beq	r4,zero,4008a28 <_dtoa_r+0xbc>
 4009018:	25800015 	stw	r22,0(r4)
 400901c:	003e8206 	br	4008a28 <_dtoa_r+0xbc>
 4009020:	00800434 	movhi	r2,16
 4009024:	10bfffc4 	addi	r2,r2,-1
 4009028:	90a4703a 	and	r18,r18,r2
 400902c:	903e901e 	bne	r18,zero,4008a70 <_dtoa_r+0x104>
 4009030:	05c10374 	movhi	r23,1037
 4009034:	bdc91604 	addi	r23,r23,9304
 4009038:	003e8f06 	br	4008a78 <_dtoa_r+0x10c>
 400903c:	b8800204 	addi	r2,r23,8
 4009040:	003e9206 	br	4008a8c <_dtoa_r+0x120>
 4009044:	01400434 	movhi	r5,16
 4009048:	297fffc4 	addi	r5,r5,-1
 400904c:	894a703a 	and	r5,r17,r5
 4009050:	d9000317 	ldw	r4,12(sp)
 4009054:	294ffc34 	orhi	r5,r5,16368
 4009058:	a53f0044 	addi	r20,r20,-1023
 400905c:	dd400217 	ldw	r21,8(sp)
 4009060:	d8000f15 	stw	zero,60(sp)
 4009064:	003eb106 	br	4008b2c <_dtoa_r+0x1c0>
 4009068:	05c10374 	movhi	r23,1037
 400906c:	bdc90d04 	addi	r23,r23,9268
 4009070:	003e6d06 	br	4008a28 <_dtoa_r+0xbc>
 4009074:	d8000415 	stw	zero,16(sp)
 4009078:	80001115 	stw	zero,68(r16)
 400907c:	8009883a 	mov	r4,r16
 4009080:	000b883a 	mov	r5,zero
 4009084:	400bcc40 	call	400bcc4 <_Balloc>
 4009088:	01ffffc4 	movi	r7,-1
 400908c:	102f883a 	mov	r23,r2
 4009090:	80801015 	stw	r2,64(r16)
 4009094:	00800044 	movi	r2,1
 4009098:	d9c00915 	stw	r7,36(sp)
 400909c:	d8002115 	stw	zero,132(sp)
 40090a0:	d9c00e15 	stw	r7,56(sp)
 40090a4:	d8800c15 	stw	r2,48(sp)
 40090a8:	d8800117 	ldw	r2,4(sp)
 40090ac:	10008b16 	blt	r2,zero,40092dc <_dtoa_r+0x970>
 40090b0:	d9000617 	ldw	r4,24(sp)
 40090b4:	00c00384 	movi	r3,14
 40090b8:	19008816 	blt	r3,r4,40092dc <_dtoa_r+0x970>
 40090bc:	200490fa 	slli	r2,r4,3
 40090c0:	d9c02117 	ldw	r7,132(sp)
 40090c4:	00c10374 	movhi	r3,1037
 40090c8:	18c93f04 	addi	r3,r3,9468
 40090cc:	1885883a 	add	r2,r3,r2
 40090d0:	14800017 	ldw	r18,0(r2)
 40090d4:	14c00117 	ldw	r19,4(r2)
 40090d8:	3801c916 	blt	r7,zero,4009800 <_dtoa_r+0xe94>
 40090dc:	d9000317 	ldw	r4,12(sp)
 40090e0:	900d883a 	mov	r6,r18
 40090e4:	980f883a 	mov	r7,r19
 40090e8:	880b883a 	mov	r5,r17
 40090ec:	400e4e80 	call	400e4e8 <__divdf3>
 40090f0:	180b883a 	mov	r5,r3
 40090f4:	1009883a 	mov	r4,r2
 40090f8:	4005fb40 	call	4005fb4 <__fixdfsi>
 40090fc:	1009883a 	mov	r4,r2
 4009100:	102b883a 	mov	r21,r2
 4009104:	4005ee00 	call	4005ee0 <__floatsidf>
 4009108:	1009883a 	mov	r4,r2
 400910c:	180b883a 	mov	r5,r3
 4009110:	900d883a 	mov	r6,r18
 4009114:	980f883a 	mov	r7,r19
 4009118:	4005b980 	call	4005b98 <__muldf3>
 400911c:	d9000317 	ldw	r4,12(sp)
 4009120:	880b883a 	mov	r5,r17
 4009124:	100d883a 	mov	r6,r2
 4009128:	180f883a 	mov	r7,r3
 400912c:	4005b380 	call	4005b38 <__subdf3>
 4009130:	d9c00917 	ldw	r7,36(sp)
 4009134:	1009883a 	mov	r4,r2
 4009138:	a8800c04 	addi	r2,r21,48
 400913c:	b8800005 	stb	r2,0(r23)
 4009140:	01800044 	movi	r6,1
 4009144:	180b883a 	mov	r5,r3
 4009148:	2005883a 	mov	r2,r4
 400914c:	bd800044 	addi	r22,r23,1
 4009150:	39803726 	beq	r7,r6,4009230 <_dtoa_r+0x8c4>
 4009154:	000d883a 	mov	r6,zero
 4009158:	01d00934 	movhi	r7,16420
 400915c:	4005b980 	call	4005b98 <__muldf3>
 4009160:	1009883a 	mov	r4,r2
 4009164:	180b883a 	mov	r5,r3
 4009168:	000d883a 	mov	r6,zero
 400916c:	000f883a 	mov	r7,zero
 4009170:	1029883a 	mov	r20,r2
 4009174:	1823883a 	mov	r17,r3
 4009178:	400e69c0 	call	400e69c <__eqdf2>
 400917c:	103f9c26 	beq	r2,zero,4008ff0 <_dtoa_r+0x684>
 4009180:	dd400917 	ldw	r21,36(sp)
 4009184:	dc000415 	stw	r16,16(sp)
 4009188:	00000906 	br	40091b0 <_dtoa_r+0x844>
 400918c:	4005b980 	call	4005b98 <__muldf3>
 4009190:	1009883a 	mov	r4,r2
 4009194:	180b883a 	mov	r5,r3
 4009198:	000d883a 	mov	r6,zero
 400919c:	000f883a 	mov	r7,zero
 40091a0:	1029883a 	mov	r20,r2
 40091a4:	1823883a 	mov	r17,r3
 40091a8:	400e69c0 	call	400e69c <__eqdf2>
 40091ac:	10022926 	beq	r2,zero,4009a54 <_dtoa_r+0x10e8>
 40091b0:	900d883a 	mov	r6,r18
 40091b4:	980f883a 	mov	r7,r19
 40091b8:	a009883a 	mov	r4,r20
 40091bc:	880b883a 	mov	r5,r17
 40091c0:	400e4e80 	call	400e4e8 <__divdf3>
 40091c4:	180b883a 	mov	r5,r3
 40091c8:	1009883a 	mov	r4,r2
 40091cc:	4005fb40 	call	4005fb4 <__fixdfsi>
 40091d0:	1009883a 	mov	r4,r2
 40091d4:	1021883a 	mov	r16,r2
 40091d8:	4005ee00 	call	4005ee0 <__floatsidf>
 40091dc:	1009883a 	mov	r4,r2
 40091e0:	180b883a 	mov	r5,r3
 40091e4:	900d883a 	mov	r6,r18
 40091e8:	980f883a 	mov	r7,r19
 40091ec:	4005b980 	call	4005b98 <__muldf3>
 40091f0:	a009883a 	mov	r4,r20
 40091f4:	880b883a 	mov	r5,r17
 40091f8:	100d883a 	mov	r6,r2
 40091fc:	180f883a 	mov	r7,r3
 4009200:	4005b380 	call	4005b38 <__subdf3>
 4009204:	82400c04 	addi	r9,r16,48
 4009208:	b2400005 	stb	r9,0(r22)
 400920c:	b5800044 	addi	r22,r22,1
 4009210:	b5d3c83a 	sub	r9,r22,r23
 4009214:	000d883a 	mov	r6,zero
 4009218:	01d00934 	movhi	r7,16420
 400921c:	1009883a 	mov	r4,r2
 4009220:	180b883a 	mov	r5,r3
 4009224:	aa7fd91e 	bne	r21,r9,400918c <_dtoa_r+0x820>
 4009228:	802b883a 	mov	r21,r16
 400922c:	dc000417 	ldw	r16,16(sp)
 4009230:	1009883a 	mov	r4,r2
 4009234:	180b883a 	mov	r5,r3
 4009238:	100d883a 	mov	r6,r2
 400923c:	180f883a 	mov	r7,r3
 4009240:	4005ae40 	call	4005ae4 <__adddf3>
 4009244:	9009883a 	mov	r4,r18
 4009248:	980b883a 	mov	r5,r19
 400924c:	100d883a 	mov	r6,r2
 4009250:	180f883a 	mov	r7,r3
 4009254:	1023883a 	mov	r17,r2
 4009258:	1829883a 	mov	r20,r3
 400925c:	400e7b80 	call	400e7b8 <__ltdf2>
 4009260:	10000816 	blt	r2,zero,4009284 <_dtoa_r+0x918>
 4009264:	9009883a 	mov	r4,r18
 4009268:	980b883a 	mov	r5,r19
 400926c:	880d883a 	mov	r6,r17
 4009270:	a00f883a 	mov	r7,r20
 4009274:	400e69c0 	call	400e69c <__eqdf2>
 4009278:	103f5d1e 	bne	r2,zero,4008ff0 <_dtoa_r+0x684>
 400927c:	ad40004c 	andi	r21,r21,1
 4009280:	a83f5b26 	beq	r21,zero,4008ff0 <_dtoa_r+0x684>
 4009284:	b53fffc3 	ldbu	r20,-1(r22)
 4009288:	b0ffff84 	addi	r3,r22,-2
 400928c:	01400e44 	movi	r5,57
 4009290:	00000306 	br	40092a0 <_dtoa_r+0x934>
 4009294:	1d000003 	ldbu	r20,0(r3)
 4009298:	102d883a 	mov	r22,r2
 400929c:	18ffffc4 	addi	r3,r3,-1
 40092a0:	a1003fcc 	andi	r4,r20,255
 40092a4:	2100201c 	xori	r4,r4,128
 40092a8:	213fe004 	addi	r4,r4,-128
 40092ac:	b0bfffc4 	addi	r2,r22,-1
 40092b0:	2142ca1e 	bne	r4,r5,4009ddc <_dtoa_r+0x1470>
 40092b4:	b8bff71e 	bne	r23,r2,4009294 <_dtoa_r+0x928>
 40092b8:	d8800617 	ldw	r2,24(sp)
 40092bc:	05000c44 	movi	r20,49
 40092c0:	10800044 	addi	r2,r2,1
 40092c4:	d8800615 	stw	r2,24(sp)
 40092c8:	00800c04 	movi	r2,48
 40092cc:	b8800005 	stb	r2,0(r23)
 40092d0:	b805883a 	mov	r2,r23
 40092d4:	15000005 	stb	r20,0(r2)
 40092d8:	003f4506 	br	4008ff0 <_dtoa_r+0x684>
 40092dc:	d9c00c17 	ldw	r7,48(sp)
 40092e0:	3800c926 	beq	r7,zero,4009608 <_dtoa_r+0xc9c>
 40092e4:	d9c00417 	ldw	r7,16(sp)
 40092e8:	00c00044 	movi	r3,1
 40092ec:	19c16c0e 	bge	r3,r7,40098a0 <_dtoa_r+0xf34>
 40092f0:	d9000917 	ldw	r4,36(sp)
 40092f4:	d9c00a17 	ldw	r7,40(sp)
 40092f8:	24ffffc4 	addi	r19,r4,-1
 40092fc:	3cc20716 	blt	r7,r19,4009b1c <_dtoa_r+0x11b0>
 4009300:	3ce7c83a 	sub	r19,r7,r19
 4009304:	d9c00917 	ldw	r7,36(sp)
 4009308:	3802ae16 	blt	r7,zero,4009dc4 <_dtoa_r+0x1458>
 400930c:	dc800817 	ldw	r18,32(sp)
 4009310:	d8800917 	ldw	r2,36(sp)
 4009314:	d8c00817 	ldw	r3,32(sp)
 4009318:	d9c00717 	ldw	r7,28(sp)
 400931c:	8009883a 	mov	r4,r16
 4009320:	1887883a 	add	r3,r3,r2
 4009324:	388f883a 	add	r7,r7,r2
 4009328:	01400044 	movi	r5,1
 400932c:	d8c00815 	stw	r3,32(sp)
 4009330:	d9c00715 	stw	r7,28(sp)
 4009334:	400c0c40 	call	400c0c4 <__i2b>
 4009338:	102b883a 	mov	r21,r2
 400933c:	90000a26 	beq	r18,zero,4009368 <_dtoa_r+0x9fc>
 4009340:	d8800717 	ldw	r2,28(sp)
 4009344:	0080080e 	bge	zero,r2,4009368 <_dtoa_r+0x9fc>
 4009348:	90812b16 	blt	r18,r2,40097f8 <_dtoa_r+0xe8c>
 400934c:	d8c00817 	ldw	r3,32(sp)
 4009350:	d9000717 	ldw	r4,28(sp)
 4009354:	90a5c83a 	sub	r18,r18,r2
 4009358:	1887c83a 	sub	r3,r3,r2
 400935c:	2089c83a 	sub	r4,r4,r2
 4009360:	d8c00815 	stw	r3,32(sp)
 4009364:	d9000715 	stw	r4,28(sp)
 4009368:	d9c00a17 	ldw	r7,40(sp)
 400936c:	01c0140e 	bge	zero,r7,40093c0 <_dtoa_r+0xa54>
 4009370:	d8800c17 	ldw	r2,48(sp)
 4009374:	1001de26 	beq	r2,zero,4009af0 <_dtoa_r+0x1184>
 4009378:	04c00e0e 	bge	zero,r19,40093b4 <_dtoa_r+0xa48>
 400937c:	a80b883a 	mov	r5,r21
 4009380:	8009883a 	mov	r4,r16
 4009384:	980d883a 	mov	r6,r19
 4009388:	400c2e00 	call	400c2e0 <__pow5mult>
 400938c:	e00d883a 	mov	r6,fp
 4009390:	8009883a 	mov	r4,r16
 4009394:	100b883a 	mov	r5,r2
 4009398:	102b883a 	mov	r21,r2
 400939c:	400c1000 	call	400c100 <__multiply>
 40093a0:	1029883a 	mov	r20,r2
 40093a4:	e00b883a 	mov	r5,fp
 40093a8:	8009883a 	mov	r4,r16
 40093ac:	400bd6c0 	call	400bd6c <_Bfree>
 40093b0:	a039883a 	mov	fp,r20
 40093b4:	d8c00a17 	ldw	r3,40(sp)
 40093b8:	1ccdc83a 	sub	r6,r3,r19
 40093bc:	3001291e 	bne	r6,zero,4009864 <_dtoa_r+0xef8>
 40093c0:	8009883a 	mov	r4,r16
 40093c4:	01400044 	movi	r5,1
 40093c8:	400c0c40 	call	400c0c4 <__i2b>
 40093cc:	d9000b17 	ldw	r4,44(sp)
 40093d0:	1029883a 	mov	r20,r2
 40093d4:	0100050e 	bge	zero,r4,40093ec <_dtoa_r+0xa80>
 40093d8:	d9800b17 	ldw	r6,44(sp)
 40093dc:	8009883a 	mov	r4,r16
 40093e0:	100b883a 	mov	r5,r2
 40093e4:	400c2e00 	call	400c2e0 <__pow5mult>
 40093e8:	1029883a 	mov	r20,r2
 40093ec:	d9c00417 	ldw	r7,16(sp)
 40093f0:	00800044 	movi	r2,1
 40093f4:	11c0f00e 	bge	r2,r7,40097b8 <_dtoa_r+0xe4c>
 40093f8:	0023883a 	mov	r17,zero
 40093fc:	d8800b17 	ldw	r2,44(sp)
 4009400:	1001741e 	bne	r2,zero,40099d4 <_dtoa_r+0x1068>
 4009404:	00800044 	movi	r2,1
 4009408:	d8c00717 	ldw	r3,28(sp)
 400940c:	10c5883a 	add	r2,r2,r3
 4009410:	108007cc 	andi	r2,r2,31
 4009414:	10008026 	beq	r2,zero,4009618 <_dtoa_r+0xcac>
 4009418:	01000804 	movi	r4,32
 400941c:	2089c83a 	sub	r4,r4,r2
 4009420:	00c00104 	movi	r3,4
 4009424:	1902d00e 	bge	r3,r4,4009f68 <_dtoa_r+0x15fc>
 4009428:	d9000817 	ldw	r4,32(sp)
 400942c:	d9c00717 	ldw	r7,28(sp)
 4009430:	00c00704 	movi	r3,28
 4009434:	1885c83a 	sub	r2,r3,r2
 4009438:	2089883a 	add	r4,r4,r2
 400943c:	388f883a 	add	r7,r7,r2
 4009440:	d9000815 	stw	r4,32(sp)
 4009444:	90a5883a 	add	r18,r18,r2
 4009448:	d9c00715 	stw	r7,28(sp)
 400944c:	d9c00817 	ldw	r7,32(sp)
 4009450:	01c0050e 	bge	zero,r7,4009468 <_dtoa_r+0xafc>
 4009454:	e00b883a 	mov	r5,fp
 4009458:	8009883a 	mov	r4,r16
 400945c:	380d883a 	mov	r6,r7
 4009460:	400c40c0 	call	400c40c <__lshift>
 4009464:	1039883a 	mov	fp,r2
 4009468:	d8800717 	ldw	r2,28(sp)
 400946c:	0080050e 	bge	zero,r2,4009484 <_dtoa_r+0xb18>
 4009470:	a00b883a 	mov	r5,r20
 4009474:	8009883a 	mov	r4,r16
 4009478:	100d883a 	mov	r6,r2
 400947c:	400c40c0 	call	400c40c <__lshift>
 4009480:	1029883a 	mov	r20,r2
 4009484:	d8c00d17 	ldw	r3,52(sp)
 4009488:	1801401e 	bne	r3,zero,400998c <_dtoa_r+0x1020>
 400948c:	d8800917 	ldw	r2,36(sp)
 4009490:	00815a0e 	bge	zero,r2,40099fc <_dtoa_r+0x1090>
 4009494:	d8c00c17 	ldw	r3,48(sp)
 4009498:	18006f1e 	bne	r3,zero,4009658 <_dtoa_r+0xcec>
 400949c:	b823883a 	mov	r17,r23
 40094a0:	dc800917 	ldw	r18,36(sp)
 40094a4:	00000206 	br	40094b0 <_dtoa_r+0xb44>
 40094a8:	400bd940 	call	400bd94 <__multadd>
 40094ac:	1039883a 	mov	fp,r2
 40094b0:	e009883a 	mov	r4,fp
 40094b4:	a00b883a 	mov	r5,r20
 40094b8:	40087640 	call	4008764 <quorem>
 40094bc:	10800c04 	addi	r2,r2,48
 40094c0:	88800005 	stb	r2,0(r17)
 40094c4:	8c400044 	addi	r17,r17,1
 40094c8:	8dc7c83a 	sub	r3,r17,r23
 40094cc:	8009883a 	mov	r4,r16
 40094d0:	e00b883a 	mov	r5,fp
 40094d4:	01800284 	movi	r6,10
 40094d8:	000f883a 	mov	r7,zero
 40094dc:	1cbff216 	blt	r3,r18,40094a8 <_dtoa_r+0xb3c>
 40094e0:	dd800917 	ldw	r22,36(sp)
 40094e4:	1007883a 	mov	r3,r2
 40094e8:	05823a0e 	bge	zero,r22,4009dd4 <_dtoa_r+0x1468>
 40094ec:	bdad883a 	add	r22,r23,r22
 40094f0:	0023883a 	mov	r17,zero
 40094f4:	e00b883a 	mov	r5,fp
 40094f8:	01800044 	movi	r6,1
 40094fc:	8009883a 	mov	r4,r16
 4009500:	d8c01515 	stw	r3,84(sp)
 4009504:	400c40c0 	call	400c40c <__lshift>
 4009508:	1009883a 	mov	r4,r2
 400950c:	a00b883a 	mov	r5,r20
 4009510:	1039883a 	mov	fp,r2
 4009514:	400c5680 	call	400c568 <__mcmp>
 4009518:	d8c01517 	ldw	r3,84(sp)
 400951c:	0080d60e 	bge	zero,r2,4009878 <_dtoa_r+0xf0c>
 4009520:	b13fffc3 	ldbu	r4,-1(r22)
 4009524:	b0ffff84 	addi	r3,r22,-2
 4009528:	01800e44 	movi	r6,57
 400952c:	00000306 	br	400953c <_dtoa_r+0xbd0>
 4009530:	19000003 	ldbu	r4,0(r3)
 4009534:	102d883a 	mov	r22,r2
 4009538:	18ffffc4 	addi	r3,r3,-1
 400953c:	21403fcc 	andi	r5,r4,255
 4009540:	2940201c 	xori	r5,r5,128
 4009544:	297fe004 	addi	r5,r5,-128
 4009548:	b0bfffc4 	addi	r2,r22,-1
 400954c:	2981a71e 	bne	r5,r6,4009bec <_dtoa_r+0x1280>
 4009550:	b8bff71e 	bne	r23,r2,4009530 <_dtoa_r+0xbc4>
 4009554:	d8800617 	ldw	r2,24(sp)
 4009558:	10800044 	addi	r2,r2,1
 400955c:	d8800615 	stw	r2,24(sp)
 4009560:	00800c44 	movi	r2,49
 4009564:	b8800005 	stb	r2,0(r23)
 4009568:	8009883a 	mov	r4,r16
 400956c:	a00b883a 	mov	r5,r20
 4009570:	400bd6c0 	call	400bd6c <_Bfree>
 4009574:	a83e9e26 	beq	r21,zero,4008ff0 <_dtoa_r+0x684>
 4009578:	88000426 	beq	r17,zero,400958c <_dtoa_r+0xc20>
 400957c:	8d400326 	beq	r17,r21,400958c <_dtoa_r+0xc20>
 4009580:	8009883a 	mov	r4,r16
 4009584:	880b883a 	mov	r5,r17
 4009588:	400bd6c0 	call	400bd6c <_Bfree>
 400958c:	8009883a 	mov	r4,r16
 4009590:	a80b883a 	mov	r5,r21
 4009594:	400bd6c0 	call	400bd6c <_Bfree>
 4009598:	003e9506 	br	4008ff0 <_dtoa_r+0x684>
 400959c:	00c00044 	movi	r3,1
 40095a0:	d8c00d15 	stw	r3,52(sp)
 40095a4:	003d9f06 	br	4008c24 <_dtoa_r+0x2b8>
 40095a8:	d9000817 	ldw	r4,32(sp)
 40095ac:	d8800617 	ldw	r2,24(sp)
 40095b0:	d8000b15 	stw	zero,44(sp)
 40095b4:	2089c83a 	sub	r4,r4,r2
 40095b8:	0087c83a 	sub	r3,zero,r2
 40095bc:	d9000815 	stw	r4,32(sp)
 40095c0:	d8c00a15 	stw	r3,40(sp)
 40095c4:	003da306 	br	4008c54 <_dtoa_r+0x2e8>
 40095c8:	0529c83a 	sub	r20,zero,r20
 40095cc:	dd000815 	stw	r20,32(sp)
 40095d0:	d8000715 	stw	zero,28(sp)
 40095d4:	003d9806 	br	4008c38 <_dtoa_r+0x2cc>
 40095d8:	d9000617 	ldw	r4,24(sp)
 40095dc:	4005ee00 	call	4005ee0 <__floatsidf>
 40095e0:	1009883a 	mov	r4,r2
 40095e4:	180b883a 	mov	r5,r3
 40095e8:	980d883a 	mov	r6,r19
 40095ec:	900f883a 	mov	r7,r18
 40095f0:	400e6f80 	call	400e6f8 <__nedf2>
 40095f4:	103d7a26 	beq	r2,zero,4008be0 <_dtoa_r+0x274>
 40095f8:	d8800617 	ldw	r2,24(sp)
 40095fc:	10bfffc4 	addi	r2,r2,-1
 4009600:	d8800615 	stw	r2,24(sp)
 4009604:	003d7606 	br	4008be0 <_dtoa_r+0x274>
 4009608:	dcc00a17 	ldw	r19,40(sp)
 400960c:	dc800817 	ldw	r18,32(sp)
 4009610:	002b883a 	mov	r21,zero
 4009614:	003f4906 	br	400933c <_dtoa_r+0x9d0>
 4009618:	00800704 	movi	r2,28
 400961c:	d8c00817 	ldw	r3,32(sp)
 4009620:	d9000717 	ldw	r4,28(sp)
 4009624:	90a5883a 	add	r18,r18,r2
 4009628:	1887883a 	add	r3,r3,r2
 400962c:	2089883a 	add	r4,r4,r2
 4009630:	d8c00815 	stw	r3,32(sp)
 4009634:	d9000715 	stw	r4,28(sp)
 4009638:	003f8406 	br	400944c <_dtoa_r+0xae0>
 400963c:	d9c00317 	ldw	r7,12(sp)
 4009640:	013efb84 	movi	r4,-1042
 4009644:	2509c83a 	sub	r4,r4,r20
 4009648:	3908983a 	sll	r4,r7,r4
 400964c:	003d3006 	br	4008b10 <_dtoa_r+0x1a4>
 4009650:	d8000d15 	stw	zero,52(sp)
 4009654:	003d7306 	br	4008c24 <_dtoa_r+0x2b8>
 4009658:	0480050e 	bge	zero,r18,4009670 <_dtoa_r+0xd04>
 400965c:	a80b883a 	mov	r5,r21
 4009660:	8009883a 	mov	r4,r16
 4009664:	900d883a 	mov	r6,r18
 4009668:	400c40c0 	call	400c40c <__lshift>
 400966c:	102b883a 	mov	r21,r2
 4009670:	8801611e 	bne	r17,zero,4009bf8 <_dtoa_r+0x128c>
 4009674:	a827883a 	mov	r19,r21
 4009678:	d8c00317 	ldw	r3,12(sp)
 400967c:	d9000917 	ldw	r4,36(sp)
 4009680:	b8bfffc4 	addi	r2,r23,-1
 4009684:	18c0004c 	andi	r3,r3,1
 4009688:	1105883a 	add	r2,r2,r4
 400968c:	b825883a 	mov	r18,r23
 4009690:	d8800515 	stw	r2,20(sp)
 4009694:	a823883a 	mov	r17,r21
 4009698:	d8c00315 	stw	r3,12(sp)
 400969c:	ddc00715 	stw	r23,28(sp)
 40096a0:	e009883a 	mov	r4,fp
 40096a4:	a00b883a 	mov	r5,r20
 40096a8:	40087640 	call	4008764 <quorem>
 40096ac:	e009883a 	mov	r4,fp
 40096b0:	880b883a 	mov	r5,r17
 40096b4:	102d883a 	mov	r22,r2
 40096b8:	400c5680 	call	400c568 <__mcmp>
 40096bc:	980d883a 	mov	r6,r19
 40096c0:	8009883a 	mov	r4,r16
 40096c4:	a00b883a 	mov	r5,r20
 40096c8:	102b883a 	mov	r21,r2
 40096cc:	400c5c00 	call	400c5c0 <__mdiff>
 40096d0:	100d883a 	mov	r6,r2
 40096d4:	10800317 	ldw	r2,12(r2)
 40096d8:	b5c00c04 	addi	r23,r22,48
 40096dc:	10008c26 	beq	r2,zero,4009910 <_dtoa_r+0xfa4>
 40096e0:	8009883a 	mov	r4,r16
 40096e4:	300b883a 	mov	r5,r6
 40096e8:	400bd6c0 	call	400bd6c <_Bfree>
 40096ec:	00800044 	movi	r2,1
 40096f0:	a8007116 	blt	r21,zero,40098b8 <_dtoa_r+0xf4c>
 40096f4:	a800041e 	bne	r21,zero,4009708 <_dtoa_r+0xd9c>
 40096f8:	d9c00417 	ldw	r7,16(sp)
 40096fc:	3800021e 	bne	r7,zero,4009708 <_dtoa_r+0xd9c>
 4009700:	d8c00317 	ldw	r3,12(sp)
 4009704:	18006c26 	beq	r3,zero,40098b8 <_dtoa_r+0xf4c>
 4009708:	00814c16 	blt	zero,r2,4009c3c <_dtoa_r+0x12d0>
 400970c:	d8c00517 	ldw	r3,20(sp)
 4009710:	95400044 	addi	r21,r18,1
 4009714:	95c00005 	stb	r23,0(r18)
 4009718:	a82d883a 	mov	r22,r21
 400971c:	90c14d26 	beq	r18,r3,4009c54 <_dtoa_r+0x12e8>
 4009720:	e00b883a 	mov	r5,fp
 4009724:	8009883a 	mov	r4,r16
 4009728:	01800284 	movi	r6,10
 400972c:	000f883a 	mov	r7,zero
 4009730:	400bd940 	call	400bd94 <__multadd>
 4009734:	1039883a 	mov	fp,r2
 4009738:	8cc08b26 	beq	r17,r19,4009968 <_dtoa_r+0xffc>
 400973c:	880b883a 	mov	r5,r17
 4009740:	01800284 	movi	r6,10
 4009744:	000f883a 	mov	r7,zero
 4009748:	8009883a 	mov	r4,r16
 400974c:	400bd940 	call	400bd94 <__multadd>
 4009750:	980b883a 	mov	r5,r19
 4009754:	8009883a 	mov	r4,r16
 4009758:	01800284 	movi	r6,10
 400975c:	000f883a 	mov	r7,zero
 4009760:	1023883a 	mov	r17,r2
 4009764:	400bd940 	call	400bd94 <__multadd>
 4009768:	1027883a 	mov	r19,r2
 400976c:	a825883a 	mov	r18,r21
 4009770:	003fcb06 	br	40096a0 <_dtoa_r+0xd34>
 4009774:	d9c00417 	ldw	r7,16(sp)
 4009778:	00800104 	movi	r2,4
 400977c:	3880e426 	beq	r7,r2,4009b10 <_dtoa_r+0x11a4>
 4009780:	00800144 	movi	r2,5
 4009784:	38be3c1e 	bne	r7,r2,4009078 <_dtoa_r+0x70c>
 4009788:	00c00044 	movi	r3,1
 400978c:	d8c00c15 	stw	r3,48(sp)
 4009790:	d9c02117 	ldw	r7,132(sp)
 4009794:	d8800617 	ldw	r2,24(sp)
 4009798:	388f883a 	add	r7,r7,r2
 400979c:	3c800044 	addi	r18,r7,1
 40097a0:	d9c00e15 	stw	r7,56(sp)
 40097a4:	dc800915 	stw	r18,36(sp)
 40097a8:	04bd3e16 	blt	zero,r18,4008ca4 <_dtoa_r+0x338>
 40097ac:	80001115 	stw	zero,68(r16)
 40097b0:	000b883a 	mov	r5,zero
 40097b4:	003d4606 	br	4008cd0 <_dtoa_r+0x364>
 40097b8:	d8c00317 	ldw	r3,12(sp)
 40097bc:	183f0e1e 	bne	r3,zero,40093f8 <_dtoa_r+0xa8c>
 40097c0:	00c00434 	movhi	r3,16
 40097c4:	18ffffc4 	addi	r3,r3,-1
 40097c8:	88c6703a 	and	r3,r17,r3
 40097cc:	183f0a1e 	bne	r3,zero,40093f8 <_dtoa_r+0xa8c>
 40097d0:	8c5ffc2c 	andhi	r17,r17,32752
 40097d4:	883f0826 	beq	r17,zero,40093f8 <_dtoa_r+0xa8c>
 40097d8:	d9000817 	ldw	r4,32(sp)
 40097dc:	d9c00717 	ldw	r7,28(sp)
 40097e0:	1023883a 	mov	r17,r2
 40097e4:	2089883a 	add	r4,r4,r2
 40097e8:	388f883a 	add	r7,r7,r2
 40097ec:	d9000815 	stw	r4,32(sp)
 40097f0:	d9c00715 	stw	r7,28(sp)
 40097f4:	003f0106 	br	40093fc <_dtoa_r+0xa90>
 40097f8:	9005883a 	mov	r2,r18
 40097fc:	003ed306 	br	400934c <_dtoa_r+0x9e0>
 4009800:	d8800917 	ldw	r2,36(sp)
 4009804:	00be3516 	blt	zero,r2,40090dc <_dtoa_r+0x770>
 4009808:	1000b61e 	bne	r2,zero,4009ae4 <_dtoa_r+0x1178>
 400980c:	9009883a 	mov	r4,r18
 4009810:	980b883a 	mov	r5,r19
 4009814:	000d883a 	mov	r6,zero
 4009818:	01d00534 	movhi	r7,16404
 400981c:	4005b980 	call	4005b98 <__muldf3>
 4009820:	d9800317 	ldw	r6,12(sp)
 4009824:	1009883a 	mov	r4,r2
 4009828:	180b883a 	mov	r5,r3
 400982c:	880f883a 	mov	r7,r17
 4009830:	4005e7c0 	call	4005e7c <__gedf2>
 4009834:	0029883a 	mov	r20,zero
 4009838:	002b883a 	mov	r21,zero
 400983c:	10007e16 	blt	r2,zero,4009a38 <_dtoa_r+0x10cc>
 4009840:	d8802117 	ldw	r2,132(sp)
 4009844:	b82d883a 	mov	r22,r23
 4009848:	0084303a 	nor	r2,zero,r2
 400984c:	d8800615 	stw	r2,24(sp)
 4009850:	8009883a 	mov	r4,r16
 4009854:	a00b883a 	mov	r5,r20
 4009858:	400bd6c0 	call	400bd6c <_Bfree>
 400985c:	a83f4b1e 	bne	r21,zero,400958c <_dtoa_r+0xc20>
 4009860:	003de306 	br	4008ff0 <_dtoa_r+0x684>
 4009864:	e00b883a 	mov	r5,fp
 4009868:	8009883a 	mov	r4,r16
 400986c:	400c2e00 	call	400c2e0 <__pow5mult>
 4009870:	1039883a 	mov	fp,r2
 4009874:	003ed206 	br	40093c0 <_dtoa_r+0xa54>
 4009878:	1000021e 	bne	r2,zero,4009884 <_dtoa_r+0xf18>
 400987c:	18c0004c 	andi	r3,r3,1
 4009880:	183f271e 	bne	r3,zero,4009520 <_dtoa_r+0xbb4>
 4009884:	01000c04 	movi	r4,48
 4009888:	00000106 	br	4009890 <_dtoa_r+0xf24>
 400988c:	102d883a 	mov	r22,r2
 4009890:	b0bfffc4 	addi	r2,r22,-1
 4009894:	10c00007 	ldb	r3,0(r2)
 4009898:	193ffc26 	beq	r3,r4,400988c <_dtoa_r+0xf20>
 400989c:	003f3206 	br	4009568 <_dtoa_r+0xbfc>
 40098a0:	d8c00f17 	ldw	r3,60(sp)
 40098a4:	18015026 	beq	r3,zero,4009de8 <_dtoa_r+0x147c>
 40098a8:	10810cc4 	addi	r2,r2,1075
 40098ac:	dcc00a17 	ldw	r19,40(sp)
 40098b0:	dc800817 	ldw	r18,32(sp)
 40098b4:	003e9706 	br	4009314 <_dtoa_r+0x9a8>
 40098b8:	b807883a 	mov	r3,r23
 40098bc:	182b883a 	mov	r21,r3
 40098c0:	ddc00717 	ldw	r23,28(sp)
 40098c4:	00800e0e 	bge	zero,r2,4009900 <_dtoa_r+0xf94>
 40098c8:	e00b883a 	mov	r5,fp
 40098cc:	01800044 	movi	r6,1
 40098d0:	8009883a 	mov	r4,r16
 40098d4:	d8c01515 	stw	r3,84(sp)
 40098d8:	400c40c0 	call	400c40c <__lshift>
 40098dc:	1009883a 	mov	r4,r2
 40098e0:	a00b883a 	mov	r5,r20
 40098e4:	1039883a 	mov	fp,r2
 40098e8:	400c5680 	call	400c568 <__mcmp>
 40098ec:	d8c01517 	ldw	r3,84(sp)
 40098f0:	0081880e 	bge	zero,r2,4009f14 <_dtoa_r+0x15a8>
 40098f4:	00800e44 	movi	r2,57
 40098f8:	b0c00c44 	addi	r3,r22,49
 40098fc:	a8816326 	beq	r21,r2,4009e8c <_dtoa_r+0x1520>
 4009900:	90c00005 	stb	r3,0(r18)
 4009904:	95800044 	addi	r22,r18,1
 4009908:	982b883a 	mov	r21,r19
 400990c:	003f1606 	br	4009568 <_dtoa_r+0xbfc>
 4009910:	300b883a 	mov	r5,r6
 4009914:	e009883a 	mov	r4,fp
 4009918:	d9801515 	stw	r6,84(sp)
 400991c:	400c5680 	call	400c568 <__mcmp>
 4009920:	d9801517 	ldw	r6,84(sp)
 4009924:	8009883a 	mov	r4,r16
 4009928:	d8801515 	stw	r2,84(sp)
 400992c:	300b883a 	mov	r5,r6
 4009930:	400bd6c0 	call	400bd6c <_Bfree>
 4009934:	d8801517 	ldw	r2,84(sp)
 4009938:	103f6d1e 	bne	r2,zero,40096f0 <_dtoa_r+0xd84>
 400993c:	d9c00417 	ldw	r7,16(sp)
 4009940:	383f6b1e 	bne	r7,zero,40096f0 <_dtoa_r+0xd84>
 4009944:	d8c00317 	ldw	r3,12(sp)
 4009948:	183f691e 	bne	r3,zero,40096f0 <_dtoa_r+0xd84>
 400994c:	b807883a 	mov	r3,r23
 4009950:	00800e44 	movi	r2,57
 4009954:	ddc00717 	ldw	r23,28(sp)
 4009958:	18814c26 	beq	r3,r2,4009e8c <_dtoa_r+0x1520>
 400995c:	057fe80e 	bge	zero,r21,4009900 <_dtoa_r+0xf94>
 4009960:	b0c00c44 	addi	r3,r22,49
 4009964:	003fe606 	br	4009900 <_dtoa_r+0xf94>
 4009968:	880b883a 	mov	r5,r17
 400996c:	8009883a 	mov	r4,r16
 4009970:	01800284 	movi	r6,10
 4009974:	000f883a 	mov	r7,zero
 4009978:	400bd940 	call	400bd94 <__multadd>
 400997c:	1023883a 	mov	r17,r2
 4009980:	1027883a 	mov	r19,r2
 4009984:	a825883a 	mov	r18,r21
 4009988:	003f4506 	br	40096a0 <_dtoa_r+0xd34>
 400998c:	e009883a 	mov	r4,fp
 4009990:	a00b883a 	mov	r5,r20
 4009994:	400c5680 	call	400c568 <__mcmp>
 4009998:	103ebc0e 	bge	r2,zero,400948c <_dtoa_r+0xb20>
 400999c:	e00b883a 	mov	r5,fp
 40099a0:	8009883a 	mov	r4,r16
 40099a4:	01800284 	movi	r6,10
 40099a8:	000f883a 	mov	r7,zero
 40099ac:	400bd940 	call	400bd94 <__multadd>
 40099b0:	1039883a 	mov	fp,r2
 40099b4:	d8800617 	ldw	r2,24(sp)
 40099b8:	d8c00c17 	ldw	r3,48(sp)
 40099bc:	10bfffc4 	addi	r2,r2,-1
 40099c0:	d8800615 	stw	r2,24(sp)
 40099c4:	1801571e 	bne	r3,zero,4009f24 <_dtoa_r+0x15b8>
 40099c8:	d9c00e17 	ldw	r7,56(sp)
 40099cc:	d9c00915 	stw	r7,36(sp)
 40099d0:	003eae06 	br	400948c <_dtoa_r+0xb20>
 40099d4:	a0800417 	ldw	r2,16(r20)
 40099d8:	10800104 	addi	r2,r2,4
 40099dc:	1085883a 	add	r2,r2,r2
 40099e0:	1085883a 	add	r2,r2,r2
 40099e4:	a085883a 	add	r2,r20,r2
 40099e8:	11000017 	ldw	r4,0(r2)
 40099ec:	400bfac0 	call	400bfac <__hi0bits>
 40099f0:	00c00804 	movi	r3,32
 40099f4:	1885c83a 	sub	r2,r3,r2
 40099f8:	003e8306 	br	4009408 <_dtoa_r+0xa9c>
 40099fc:	d9c00417 	ldw	r7,16(sp)
 4009a00:	00800084 	movi	r2,2
 4009a04:	11fea30e 	bge	r2,r7,4009494 <_dtoa_r+0xb28>
 4009a08:	d8800917 	ldw	r2,36(sp)
 4009a0c:	103f8c1e 	bne	r2,zero,4009840 <_dtoa_r+0xed4>
 4009a10:	a00b883a 	mov	r5,r20
 4009a14:	8009883a 	mov	r4,r16
 4009a18:	01800144 	movi	r6,5
 4009a1c:	000f883a 	mov	r7,zero
 4009a20:	400bd940 	call	400bd94 <__multadd>
 4009a24:	e009883a 	mov	r4,fp
 4009a28:	100b883a 	mov	r5,r2
 4009a2c:	1029883a 	mov	r20,r2
 4009a30:	400c5680 	call	400c568 <__mcmp>
 4009a34:	00bf820e 	bge	zero,r2,4009840 <_dtoa_r+0xed4>
 4009a38:	00800c44 	movi	r2,49
 4009a3c:	b8800005 	stb	r2,0(r23)
 4009a40:	d8800617 	ldw	r2,24(sp)
 4009a44:	bd800044 	addi	r22,r23,1
 4009a48:	10800044 	addi	r2,r2,1
 4009a4c:	d8800615 	stw	r2,24(sp)
 4009a50:	003f7f06 	br	4009850 <_dtoa_r+0xee4>
 4009a54:	dc000417 	ldw	r16,16(sp)
 4009a58:	003d6506 	br	4008ff0 <_dtoa_r+0x684>
 4009a5c:	9009883a 	mov	r4,r18
 4009a60:	4005ee00 	call	4005ee0 <__floatsidf>
 4009a64:	1009883a 	mov	r4,r2
 4009a68:	180b883a 	mov	r5,r3
 4009a6c:	980d883a 	mov	r6,r19
 4009a70:	a00f883a 	mov	r7,r20
 4009a74:	4005b980 	call	4005b98 <__muldf3>
 4009a78:	1009883a 	mov	r4,r2
 4009a7c:	180b883a 	mov	r5,r3
 4009a80:	000d883a 	mov	r6,zero
 4009a84:	01d00734 	movhi	r7,16412
 4009a88:	4005ae40 	call	4005ae4 <__adddf3>
 4009a8c:	057f3034 	movhi	r21,64704
 4009a90:	1025883a 	mov	r18,r2
 4009a94:	1d6b883a 	add	r21,r3,r21
 4009a98:	9809883a 	mov	r4,r19
 4009a9c:	a00b883a 	mov	r5,r20
 4009aa0:	000d883a 	mov	r6,zero
 4009aa4:	01d00534 	movhi	r7,16404
 4009aa8:	4005b380 	call	4005b38 <__subdf3>
 4009aac:	1009883a 	mov	r4,r2
 4009ab0:	180b883a 	mov	r5,r3
 4009ab4:	900d883a 	mov	r6,r18
 4009ab8:	a80f883a 	mov	r7,r21
 4009abc:	1027883a 	mov	r19,r2
 4009ac0:	1829883a 	mov	r20,r3
 4009ac4:	400e7540 	call	400e754 <__gtdf2>
 4009ac8:	00806616 	blt	zero,r2,4009c64 <_dtoa_r+0x12f8>
 4009acc:	a9e0003c 	xorhi	r7,r21,32768
 4009ad0:	9809883a 	mov	r4,r19
 4009ad4:	a00b883a 	mov	r5,r20
 4009ad8:	900d883a 	mov	r6,r18
 4009adc:	400e7b80 	call	400e7b8 <__ltdf2>
 4009ae0:	103d710e 	bge	r2,zero,40090a8 <_dtoa_r+0x73c>
 4009ae4:	0029883a 	mov	r20,zero
 4009ae8:	002b883a 	mov	r21,zero
 4009aec:	003f5406 	br	4009840 <_dtoa_r+0xed4>
 4009af0:	d9800a17 	ldw	r6,40(sp)
 4009af4:	e00b883a 	mov	r5,fp
 4009af8:	8009883a 	mov	r4,r16
 4009afc:	400c2e00 	call	400c2e0 <__pow5mult>
 4009b00:	1039883a 	mov	fp,r2
 4009b04:	003e2e06 	br	40093c0 <_dtoa_r+0xa54>
 4009b08:	d8000c15 	stw	zero,48(sp)
 4009b0c:	003f2006 	br	4009790 <_dtoa_r+0xe24>
 4009b10:	00800044 	movi	r2,1
 4009b14:	d8800c15 	stw	r2,48(sp)
 4009b18:	003c5d06 	br	4008c90 <_dtoa_r+0x324>
 4009b1c:	d8c00a17 	ldw	r3,40(sp)
 4009b20:	d9000b17 	ldw	r4,44(sp)
 4009b24:	dcc00a15 	stw	r19,40(sp)
 4009b28:	98c5c83a 	sub	r2,r19,r3
 4009b2c:	2089883a 	add	r4,r4,r2
 4009b30:	d9000b15 	stw	r4,44(sp)
 4009b34:	0027883a 	mov	r19,zero
 4009b38:	003df206 	br	4009304 <_dtoa_r+0x998>
 4009b3c:	d9000317 	ldw	r4,12(sp)
 4009b40:	8829883a 	mov	r20,r17
 4009b44:	04800084 	movi	r18,2
 4009b48:	d9001015 	stw	r4,64(sp)
 4009b4c:	003c8106 	br	4008d54 <_dtoa_r+0x3e8>
 4009b50:	04800044 	movi	r18,1
 4009b54:	dc800e15 	stw	r18,56(sp)
 4009b58:	dc800915 	stw	r18,36(sp)
 4009b5c:	dc802115 	stw	r18,132(sp)
 4009b60:	003f1206 	br	40097ac <_dtoa_r+0xe40>
 4009b64:	d8800617 	ldw	r2,24(sp)
 4009b68:	00abc83a 	sub	r21,zero,r2
 4009b6c:	a800a426 	beq	r21,zero,4009e00 <_dtoa_r+0x1494>
 4009b70:	a88003cc 	andi	r2,r21,15
 4009b74:	100490fa 	slli	r2,r2,3
 4009b78:	00c10374 	movhi	r3,1037
 4009b7c:	18c93f04 	addi	r3,r3,9468
 4009b80:	d9000317 	ldw	r4,12(sp)
 4009b84:	1885883a 	add	r2,r3,r2
 4009b88:	11800017 	ldw	r6,0(r2)
 4009b8c:	11c00117 	ldw	r7,4(r2)
 4009b90:	a82bd13a 	srai	r21,r21,4
 4009b94:	880b883a 	mov	r5,r17
 4009b98:	4005b980 	call	4005b98 <__muldf3>
 4009b9c:	1027883a 	mov	r19,r2
 4009ba0:	1829883a 	mov	r20,r3
 4009ba4:	a800e826 	beq	r21,zero,4009f48 <_dtoa_r+0x15dc>
 4009ba8:	05810374 	movhi	r22,1037
 4009bac:	b5893504 	addi	r22,r22,9428
 4009bb0:	04800084 	movi	r18,2
 4009bb4:	a980004c 	andi	r6,r21,1
 4009bb8:	1009883a 	mov	r4,r2
 4009bbc:	a82bd07a 	srai	r21,r21,1
 4009bc0:	180b883a 	mov	r5,r3
 4009bc4:	30000426 	beq	r6,zero,4009bd8 <_dtoa_r+0x126c>
 4009bc8:	b1800017 	ldw	r6,0(r22)
 4009bcc:	b1c00117 	ldw	r7,4(r22)
 4009bd0:	94800044 	addi	r18,r18,1
 4009bd4:	4005b980 	call	4005b98 <__muldf3>
 4009bd8:	b5800204 	addi	r22,r22,8
 4009bdc:	a83ff51e 	bne	r21,zero,4009bb4 <_dtoa_r+0x1248>
 4009be0:	1027883a 	mov	r19,r2
 4009be4:	1829883a 	mov	r20,r3
 4009be8:	003c7306 	br	4008db8 <_dtoa_r+0x44c>
 4009bec:	21000044 	addi	r4,r4,1
 4009bf0:	11000005 	stb	r4,0(r2)
 4009bf4:	003e5c06 	br	4009568 <_dtoa_r+0xbfc>
 4009bf8:	a9400117 	ldw	r5,4(r21)
 4009bfc:	8009883a 	mov	r4,r16
 4009c00:	400bcc40 	call	400bcc4 <_Balloc>
 4009c04:	a9800417 	ldw	r6,16(r21)
 4009c08:	11000304 	addi	r4,r2,12
 4009c0c:	a9400304 	addi	r5,r21,12
 4009c10:	31800084 	addi	r6,r6,2
 4009c14:	318d883a 	add	r6,r6,r6
 4009c18:	318d883a 	add	r6,r6,r6
 4009c1c:	1023883a 	mov	r17,r2
 4009c20:	400b9c80 	call	400b9c8 <memcpy>
 4009c24:	8009883a 	mov	r4,r16
 4009c28:	880b883a 	mov	r5,r17
 4009c2c:	01800044 	movi	r6,1
 4009c30:	400c40c0 	call	400c40c <__lshift>
 4009c34:	1027883a 	mov	r19,r2
 4009c38:	003e8f06 	br	4009678 <_dtoa_r+0xd0c>
 4009c3c:	b807883a 	mov	r3,r23
 4009c40:	00800e44 	movi	r2,57
 4009c44:	ddc00717 	ldw	r23,28(sp)
 4009c48:	18809026 	beq	r3,r2,4009e8c <_dtoa_r+0x1520>
 4009c4c:	18c00044 	addi	r3,r3,1
 4009c50:	003f2b06 	br	4009900 <_dtoa_r+0xf94>
 4009c54:	b807883a 	mov	r3,r23
 4009c58:	982b883a 	mov	r21,r19
 4009c5c:	ddc00717 	ldw	r23,28(sp)
 4009c60:	003e2406 	br	40094f4 <_dtoa_r+0xb88>
 4009c64:	0029883a 	mov	r20,zero
 4009c68:	002b883a 	mov	r21,zero
 4009c6c:	003f7206 	br	4009a38 <_dtoa_r+0x10cc>
 4009c70:	593fffc4 	addi	r4,r11,-1
 4009c74:	200490fa 	slli	r2,r4,3
 4009c78:	00c10374 	movhi	r3,1037
 4009c7c:	18c93f04 	addi	r3,r3,9468
 4009c80:	d9001015 	stw	r4,64(sp)
 4009c84:	1885883a 	add	r2,r3,r2
 4009c88:	11000017 	ldw	r4,0(r2)
 4009c8c:	11400117 	ldw	r5,4(r2)
 4009c90:	900d883a 	mov	r6,r18
 4009c94:	a80f883a 	mov	r7,r21
 4009c98:	dac01615 	stw	r11,88(sp)
 4009c9c:	4005b980 	call	4005b98 <__muldf3>
 4009ca0:	a00b883a 	mov	r5,r20
 4009ca4:	9809883a 	mov	r4,r19
 4009ca8:	d8c01215 	stw	r3,72(sp)
 4009cac:	d8801115 	stw	r2,68(sp)
 4009cb0:	4005fb40 	call	4005fb4 <__fixdfsi>
 4009cb4:	1009883a 	mov	r4,r2
 4009cb8:	1025883a 	mov	r18,r2
 4009cbc:	4005ee00 	call	4005ee0 <__floatsidf>
 4009cc0:	9809883a 	mov	r4,r19
 4009cc4:	a00b883a 	mov	r5,r20
 4009cc8:	100d883a 	mov	r6,r2
 4009ccc:	180f883a 	mov	r7,r3
 4009cd0:	94800c04 	addi	r18,r18,48
 4009cd4:	4005b380 	call	4005b38 <__subdf3>
 4009cd8:	bc800005 	stb	r18,0(r23)
 4009cdc:	dac01617 	ldw	r11,88(sp)
 4009ce0:	102b883a 	mov	r21,r2
 4009ce4:	00800044 	movi	r2,1
 4009ce8:	bd800044 	addi	r22,r23,1
 4009cec:	1815883a 	mov	r10,r3
 4009cf0:	58802226 	beq	r11,r2,4009d7c <_dtoa_r+0x1410>
 4009cf4:	bad7883a 	add	r11,r23,r11
 4009cf8:	dc001415 	stw	r16,80(sp)
 4009cfc:	a805883a 	mov	r2,r21
 4009d00:	b027883a 	mov	r19,r22
 4009d04:	5821883a 	mov	r16,r11
 4009d08:	882b883a 	mov	r21,r17
 4009d0c:	000d883a 	mov	r6,zero
 4009d10:	01d00934 	movhi	r7,16420
 4009d14:	1009883a 	mov	r4,r2
 4009d18:	180b883a 	mov	r5,r3
 4009d1c:	4005b980 	call	4005b98 <__muldf3>
 4009d20:	180b883a 	mov	r5,r3
 4009d24:	1009883a 	mov	r4,r2
 4009d28:	1829883a 	mov	r20,r3
 4009d2c:	1023883a 	mov	r17,r2
 4009d30:	4005fb40 	call	4005fb4 <__fixdfsi>
 4009d34:	1009883a 	mov	r4,r2
 4009d38:	1025883a 	mov	r18,r2
 4009d3c:	4005ee00 	call	4005ee0 <__floatsidf>
 4009d40:	8809883a 	mov	r4,r17
 4009d44:	a00b883a 	mov	r5,r20
 4009d48:	100d883a 	mov	r6,r2
 4009d4c:	180f883a 	mov	r7,r3
 4009d50:	94800c04 	addi	r18,r18,48
 4009d54:	4005b380 	call	4005b38 <__subdf3>
 4009d58:	9cc00044 	addi	r19,r19,1
 4009d5c:	9cbfffc5 	stb	r18,-1(r19)
 4009d60:	9c3fea1e 	bne	r19,r16,4009d0c <_dtoa_r+0x13a0>
 4009d64:	1815883a 	mov	r10,r3
 4009d68:	d8c01017 	ldw	r3,64(sp)
 4009d6c:	dc001417 	ldw	r16,80(sp)
 4009d70:	a823883a 	mov	r17,r21
 4009d74:	b0ed883a 	add	r22,r22,r3
 4009d78:	102b883a 	mov	r21,r2
 4009d7c:	d9001117 	ldw	r4,68(sp)
 4009d80:	d9401217 	ldw	r5,72(sp)
 4009d84:	000d883a 	mov	r6,zero
 4009d88:	01cff834 	movhi	r7,16352
 4009d8c:	da801515 	stw	r10,84(sp)
 4009d90:	4005ae40 	call	4005ae4 <__adddf3>
 4009d94:	da801517 	ldw	r10,84(sp)
 4009d98:	1009883a 	mov	r4,r2
 4009d9c:	180b883a 	mov	r5,r3
 4009da0:	500f883a 	mov	r7,r10
 4009da4:	a80d883a 	mov	r6,r21
 4009da8:	400e7b80 	call	400e7b8 <__ltdf2>
 4009dac:	da801517 	ldw	r10,84(sp)
 4009db0:	10003b0e 	bge	r2,zero,4009ea0 <_dtoa_r+0x1534>
 4009db4:	d9c01317 	ldw	r7,76(sp)
 4009db8:	b53fffc3 	ldbu	r20,-1(r22)
 4009dbc:	d9c00615 	stw	r7,24(sp)
 4009dc0:	003d3106 	br	4009288 <_dtoa_r+0x91c>
 4009dc4:	d8800817 	ldw	r2,32(sp)
 4009dc8:	11e5c83a 	sub	r18,r2,r7
 4009dcc:	0005883a 	mov	r2,zero
 4009dd0:	003d5006 	br	4009314 <_dtoa_r+0x9a8>
 4009dd4:	05800044 	movi	r22,1
 4009dd8:	003dc406 	br	40094ec <_dtoa_r+0xb80>
 4009ddc:	a5000044 	addi	r20,r20,1
 4009de0:	15000005 	stb	r20,0(r2)
 4009de4:	003c8206 	br	4008ff0 <_dtoa_r+0x684>
 4009de8:	d8800217 	ldw	r2,8(sp)
 4009dec:	00c00d84 	movi	r3,54
 4009df0:	dcc00a17 	ldw	r19,40(sp)
 4009df4:	1885c83a 	sub	r2,r3,r2
 4009df8:	dc800817 	ldw	r18,32(sp)
 4009dfc:	003d4506 	br	4009314 <_dtoa_r+0x9a8>
 4009e00:	dcc00317 	ldw	r19,12(sp)
 4009e04:	8829883a 	mov	r20,r17
 4009e08:	04800084 	movi	r18,2
 4009e0c:	003bea06 	br	4008db8 <_dtoa_r+0x44c>
 4009e10:	d9000917 	ldw	r4,36(sp)
 4009e14:	203f1126 	beq	r4,zero,4009a5c <_dtoa_r+0x10f0>
 4009e18:	d9c00e17 	ldw	r7,56(sp)
 4009e1c:	01fca20e 	bge	zero,r7,40090a8 <_dtoa_r+0x73c>
 4009e20:	a00b883a 	mov	r5,r20
 4009e24:	9809883a 	mov	r4,r19
 4009e28:	000d883a 	mov	r6,zero
 4009e2c:	01d00934 	movhi	r7,16420
 4009e30:	4005b980 	call	4005b98 <__muldf3>
 4009e34:	91000044 	addi	r4,r18,1
 4009e38:	1027883a 	mov	r19,r2
 4009e3c:	1829883a 	mov	r20,r3
 4009e40:	4005ee00 	call	4005ee0 <__floatsidf>
 4009e44:	9809883a 	mov	r4,r19
 4009e48:	a00b883a 	mov	r5,r20
 4009e4c:	100d883a 	mov	r6,r2
 4009e50:	180f883a 	mov	r7,r3
 4009e54:	4005b980 	call	4005b98 <__muldf3>
 4009e58:	1009883a 	mov	r4,r2
 4009e5c:	180b883a 	mov	r5,r3
 4009e60:	000d883a 	mov	r6,zero
 4009e64:	01d00734 	movhi	r7,16412
 4009e68:	4005ae40 	call	4005ae4 <__adddf3>
 4009e6c:	1025883a 	mov	r18,r2
 4009e70:	d8800617 	ldw	r2,24(sp)
 4009e74:	057f3034 	movhi	r21,64704
 4009e78:	1d6b883a 	add	r21,r3,r21
 4009e7c:	10bfffc4 	addi	r2,r2,-1
 4009e80:	d8801315 	stw	r2,76(sp)
 4009e84:	dac00e17 	ldw	r11,56(sp)
 4009e88:	003be706 	br	4008e28 <_dtoa_r+0x4bc>
 4009e8c:	01000e44 	movi	r4,57
 4009e90:	91000005 	stb	r4,0(r18)
 4009e94:	95800044 	addi	r22,r18,1
 4009e98:	982b883a 	mov	r21,r19
 4009e9c:	003da106 	br	4009524 <_dtoa_r+0xbb8>
 4009ea0:	d9801117 	ldw	r6,68(sp)
 4009ea4:	d9c01217 	ldw	r7,72(sp)
 4009ea8:	0009883a 	mov	r4,zero
 4009eac:	014ff834 	movhi	r5,16352
 4009eb0:	da801515 	stw	r10,84(sp)
 4009eb4:	4005b380 	call	4005b38 <__subdf3>
 4009eb8:	da801517 	ldw	r10,84(sp)
 4009ebc:	1009883a 	mov	r4,r2
 4009ec0:	180b883a 	mov	r5,r3
 4009ec4:	a80d883a 	mov	r6,r21
 4009ec8:	500f883a 	mov	r7,r10
 4009ecc:	400e7540 	call	400e754 <__gtdf2>
 4009ed0:	00bc750e 	bge	zero,r2,40090a8 <_dtoa_r+0x73c>
 4009ed4:	01000c04 	movi	r4,48
 4009ed8:	00000106 	br	4009ee0 <_dtoa_r+0x1574>
 4009edc:	102d883a 	mov	r22,r2
 4009ee0:	b0bfffc4 	addi	r2,r22,-1
 4009ee4:	10c00007 	ldb	r3,0(r2)
 4009ee8:	193ffc26 	beq	r3,r4,4009edc <_dtoa_r+0x1570>
 4009eec:	d8801317 	ldw	r2,76(sp)
 4009ef0:	d8800615 	stw	r2,24(sp)
 4009ef4:	003c3e06 	br	4008ff0 <_dtoa_r+0x684>
 4009ef8:	d9001317 	ldw	r4,76(sp)
 4009efc:	df001117 	ldw	fp,68(sp)
 4009f00:	d9000615 	stw	r4,24(sp)
 4009f04:	003ce006 	br	4009288 <_dtoa_r+0x91c>
 4009f08:	df001117 	ldw	fp,68(sp)
 4009f0c:	dc401217 	ldw	r17,72(sp)
 4009f10:	003c6506 	br	40090a8 <_dtoa_r+0x73c>
 4009f14:	103e7a1e 	bne	r2,zero,4009900 <_dtoa_r+0xf94>
 4009f18:	1880004c 	andi	r2,r3,1
 4009f1c:	103e7826 	beq	r2,zero,4009900 <_dtoa_r+0xf94>
 4009f20:	003e7406 	br	40098f4 <_dtoa_r+0xf88>
 4009f24:	8009883a 	mov	r4,r16
 4009f28:	a80b883a 	mov	r5,r21
 4009f2c:	01800284 	movi	r6,10
 4009f30:	000f883a 	mov	r7,zero
 4009f34:	400bd940 	call	400bd94 <__multadd>
 4009f38:	d9000e17 	ldw	r4,56(sp)
 4009f3c:	102b883a 	mov	r21,r2
 4009f40:	d9000915 	stw	r4,36(sp)
 4009f44:	003d5106 	br	400948c <_dtoa_r+0xb20>
 4009f48:	04800084 	movi	r18,2
 4009f4c:	003b9a06 	br	4008db8 <_dtoa_r+0x44c>
 4009f50:	d8c01317 	ldw	r3,76(sp)
 4009f54:	d8c00615 	stw	r3,24(sp)
 4009f58:	003ccb06 	br	4009288 <_dtoa_r+0x91c>
 4009f5c:	d8c01317 	ldw	r3,76(sp)
 4009f60:	d8c00615 	stw	r3,24(sp)
 4009f64:	003c2206 	br	4008ff0 <_dtoa_r+0x684>
 4009f68:	20fd3826 	beq	r4,r3,400944c <_dtoa_r+0xae0>
 4009f6c:	00c00f04 	movi	r3,60
 4009f70:	1885c83a 	sub	r2,r3,r2
 4009f74:	003da906 	br	400961c <_dtoa_r+0xcb0>
 4009f78:	000b883a 	mov	r5,zero
 4009f7c:	003b5406 	br	4008cd0 <_dtoa_r+0x364>
 4009f80:	04c00044 	movi	r19,1
 4009f84:	003b3b06 	br	4008c74 <_dtoa_r+0x308>

04009f88 <_fflush_r>:
 4009f88:	defffb04 	addi	sp,sp,-20
 4009f8c:	dcc00315 	stw	r19,12(sp)
 4009f90:	dc400115 	stw	r17,4(sp)
 4009f94:	dfc00415 	stw	ra,16(sp)
 4009f98:	dc800215 	stw	r18,8(sp)
 4009f9c:	dc000015 	stw	r16,0(sp)
 4009fa0:	2027883a 	mov	r19,r4
 4009fa4:	2823883a 	mov	r17,r5
 4009fa8:	20000226 	beq	r4,zero,4009fb4 <_fflush_r+0x2c>
 4009fac:	20800e17 	ldw	r2,56(r4)
 4009fb0:	10005726 	beq	r2,zero,400a110 <_fflush_r+0x188>
 4009fb4:	8880030b 	ldhu	r2,12(r17)
 4009fb8:	10c0020c 	andi	r3,r2,8
 4009fbc:	18ffffcc 	andi	r3,r3,65535
 4009fc0:	18e0001c 	xori	r3,r3,32768
 4009fc4:	18e00004 	addi	r3,r3,-32768
 4009fc8:	1800311e 	bne	r3,zero,400a090 <_fflush_r+0x108>
 4009fcc:	89000117 	ldw	r4,4(r17)
 4009fd0:	10c20014 	ori	r3,r2,2048
 4009fd4:	88c0030d 	sth	r3,12(r17)
 4009fd8:	180b883a 	mov	r5,r3
 4009fdc:	0100520e 	bge	zero,r4,400a128 <_fflush_r+0x1a0>
 4009fe0:	88c00a17 	ldw	r3,40(r17)
 4009fe4:	18002226 	beq	r3,zero,400a070 <_fflush_r+0xe8>
 4009fe8:	1084000c 	andi	r2,r2,4096
 4009fec:	10bfffcc 	andi	r2,r2,65535
 4009ff0:	10a0001c 	xori	r2,r2,32768
 4009ff4:	10a00004 	addi	r2,r2,-32768
 4009ff8:	10004e26 	beq	r2,zero,400a134 <_fflush_r+0x1ac>
 4009ffc:	8c001417 	ldw	r16,80(r17)
 400a000:	2940010c 	andi	r5,r5,4
 400a004:	297fffcc 	andi	r5,r5,65535
 400a008:	2960001c 	xori	r5,r5,32768
 400a00c:	29600004 	addi	r5,r5,-32768
 400a010:	28000626 	beq	r5,zero,400a02c <_fflush_r+0xa4>
 400a014:	89000117 	ldw	r4,4(r17)
 400a018:	88800c17 	ldw	r2,48(r17)
 400a01c:	8121c83a 	sub	r16,r16,r4
 400a020:	10000226 	beq	r2,zero,400a02c <_fflush_r+0xa4>
 400a024:	88800f17 	ldw	r2,60(r17)
 400a028:	80a1c83a 	sub	r16,r16,r2
 400a02c:	89400717 	ldw	r5,28(r17)
 400a030:	9809883a 	mov	r4,r19
 400a034:	800d883a 	mov	r6,r16
 400a038:	000f883a 	mov	r7,zero
 400a03c:	183ee83a 	callr	r3
 400a040:	8080281e 	bne	r16,r2,400a0e4 <_fflush_r+0x15c>
 400a044:	8880030b 	ldhu	r2,12(r17)
 400a048:	88c00417 	ldw	r3,16(r17)
 400a04c:	88000115 	stw	zero,4(r17)
 400a050:	113dffcc 	andi	r4,r2,63487
 400a054:	1084000c 	andi	r2,r2,4096
 400a058:	10bfffcc 	andi	r2,r2,65535
 400a05c:	10a0001c 	xori	r2,r2,32768
 400a060:	8900030d 	sth	r4,12(r17)
 400a064:	88c00015 	stw	r3,0(r17)
 400a068:	10a00004 	addi	r2,r2,-32768
 400a06c:	10002c1e 	bne	r2,zero,400a120 <_fflush_r+0x198>
 400a070:	0005883a 	mov	r2,zero
 400a074:	dfc00417 	ldw	ra,16(sp)
 400a078:	dcc00317 	ldw	r19,12(sp)
 400a07c:	dc800217 	ldw	r18,8(sp)
 400a080:	dc400117 	ldw	r17,4(sp)
 400a084:	dc000017 	ldw	r16,0(sp)
 400a088:	dec00504 	addi	sp,sp,20
 400a08c:	f800283a 	ret
 400a090:	8c800417 	ldw	r18,16(r17)
 400a094:	903ff626 	beq	r18,zero,400a070 <_fflush_r+0xe8>
 400a098:	8c000017 	ldw	r16,0(r17)
 400a09c:	108000cc 	andi	r2,r2,3
 400a0a0:	8c800015 	stw	r18,0(r17)
 400a0a4:	84a1c83a 	sub	r16,r16,r18
 400a0a8:	10001b1e 	bne	r2,zero,400a118 <_fflush_r+0x190>
 400a0ac:	88800517 	ldw	r2,20(r17)
 400a0b0:	88800215 	stw	r2,8(r17)
 400a0b4:	04000316 	blt	zero,r16,400a0c4 <_fflush_r+0x13c>
 400a0b8:	003fed06 	br	400a070 <_fflush_r+0xe8>
 400a0bc:	90a5883a 	add	r18,r18,r2
 400a0c0:	043feb0e 	bge	zero,r16,400a070 <_fflush_r+0xe8>
 400a0c4:	88800917 	ldw	r2,36(r17)
 400a0c8:	89400717 	ldw	r5,28(r17)
 400a0cc:	800f883a 	mov	r7,r16
 400a0d0:	900d883a 	mov	r6,r18
 400a0d4:	9809883a 	mov	r4,r19
 400a0d8:	103ee83a 	callr	r2
 400a0dc:	80a1c83a 	sub	r16,r16,r2
 400a0e0:	00bff616 	blt	zero,r2,400a0bc <_fflush_r+0x134>
 400a0e4:	88c0030b 	ldhu	r3,12(r17)
 400a0e8:	00bfffc4 	movi	r2,-1
 400a0ec:	18c01014 	ori	r3,r3,64
 400a0f0:	88c0030d 	sth	r3,12(r17)
 400a0f4:	dfc00417 	ldw	ra,16(sp)
 400a0f8:	dcc00317 	ldw	r19,12(sp)
 400a0fc:	dc800217 	ldw	r18,8(sp)
 400a100:	dc400117 	ldw	r17,4(sp)
 400a104:	dc000017 	ldw	r16,0(sp)
 400a108:	dec00504 	addi	sp,sp,20
 400a10c:	f800283a 	ret
 400a110:	400a2300 	call	400a230 <__sinit>
 400a114:	003fa706 	br	4009fb4 <_fflush_r+0x2c>
 400a118:	0005883a 	mov	r2,zero
 400a11c:	003fe406 	br	400a0b0 <_fflush_r+0x128>
 400a120:	8c001415 	stw	r16,80(r17)
 400a124:	003fd206 	br	400a070 <_fflush_r+0xe8>
 400a128:	88c00f17 	ldw	r3,60(r17)
 400a12c:	00ffac16 	blt	zero,r3,4009fe0 <_fflush_r+0x58>
 400a130:	003fcf06 	br	400a070 <_fflush_r+0xe8>
 400a134:	89400717 	ldw	r5,28(r17)
 400a138:	9809883a 	mov	r4,r19
 400a13c:	000d883a 	mov	r6,zero
 400a140:	01c00044 	movi	r7,1
 400a144:	183ee83a 	callr	r3
 400a148:	1021883a 	mov	r16,r2
 400a14c:	00bfffc4 	movi	r2,-1
 400a150:	80800326 	beq	r16,r2,400a160 <_fflush_r+0x1d8>
 400a154:	8940030b 	ldhu	r5,12(r17)
 400a158:	88c00a17 	ldw	r3,40(r17)
 400a15c:	003fa806 	br	400a000 <_fflush_r+0x78>
 400a160:	98c00017 	ldw	r3,0(r19)
 400a164:	00800744 	movi	r2,29
 400a168:	18bfde1e 	bne	r3,r2,400a0e4 <_fflush_r+0x15c>
 400a16c:	003fc006 	br	400a070 <_fflush_r+0xe8>

0400a170 <fflush>:
 400a170:	200b883a 	mov	r5,r4
 400a174:	20000426 	beq	r4,zero,400a188 <fflush+0x18>
 400a178:	00810374 	movhi	r2,1037
 400a17c:	10903e04 	addi	r2,r2,16632
 400a180:	11000017 	ldw	r4,0(r2)
 400a184:	4009f881 	jmpi	4009f88 <_fflush_r>
 400a188:	00810374 	movhi	r2,1037
 400a18c:	10903d04 	addi	r2,r2,16628
 400a190:	11000017 	ldw	r4,0(r2)
 400a194:	01410074 	movhi	r5,1025
 400a198:	2967e204 	addi	r5,r5,-24696
 400a19c:	400ae101 	jmpi	400ae10 <_fwalk_reent>

0400a1a0 <__fp_lock>:
 400a1a0:	0005883a 	mov	r2,zero
 400a1a4:	f800283a 	ret

0400a1a8 <__fp_unlock>:
 400a1a8:	0005883a 	mov	r2,zero
 400a1ac:	f800283a 	ret

0400a1b0 <_cleanup_r>:
 400a1b0:	01410074 	movhi	r5,1025
 400a1b4:	2975f704 	addi	r5,r5,-10276
 400a1b8:	400ad681 	jmpi	400ad68 <_fwalk>

0400a1bc <__sfmoreglue>:
 400a1bc:	defffc04 	addi	sp,sp,-16
 400a1c0:	dc400115 	stw	r17,4(sp)
 400a1c4:	2c401724 	muli	r17,r5,92
 400a1c8:	dc800215 	stw	r18,8(sp)
 400a1cc:	2825883a 	mov	r18,r5
 400a1d0:	89400304 	addi	r5,r17,12
 400a1d4:	dc000015 	stw	r16,0(sp)
 400a1d8:	dfc00315 	stw	ra,12(sp)
 400a1dc:	400b14c0 	call	400b14c <_malloc_r>
 400a1e0:	1021883a 	mov	r16,r2
 400a1e4:	10000726 	beq	r2,zero,400a204 <__sfmoreglue+0x48>
 400a1e8:	11000304 	addi	r4,r2,12
 400a1ec:	10000015 	stw	zero,0(r2)
 400a1f0:	14800115 	stw	r18,4(r2)
 400a1f4:	11000215 	stw	r4,8(r2)
 400a1f8:	000b883a 	mov	r5,zero
 400a1fc:	880d883a 	mov	r6,r17
 400a200:	400bbe80 	call	400bbe8 <memset>
 400a204:	8005883a 	mov	r2,r16
 400a208:	dfc00317 	ldw	ra,12(sp)
 400a20c:	dc800217 	ldw	r18,8(sp)
 400a210:	dc400117 	ldw	r17,4(sp)
 400a214:	dc000017 	ldw	r16,0(sp)
 400a218:	dec00404 	addi	sp,sp,16
 400a21c:	f800283a 	ret

0400a220 <_cleanup>:
 400a220:	00810374 	movhi	r2,1037
 400a224:	10903d04 	addi	r2,r2,16628
 400a228:	11000017 	ldw	r4,0(r2)
 400a22c:	400a1b01 	jmpi	400a1b0 <_cleanup_r>

0400a230 <__sinit>:
 400a230:	20800e17 	ldw	r2,56(r4)
 400a234:	1000401e 	bne	r2,zero,400a338 <__sinit+0x108>
 400a238:	21400117 	ldw	r5,4(r4)
 400a23c:	01810074 	movhi	r6,1025
 400a240:	31a86c04 	addi	r6,r6,-24144
 400a244:	20c00217 	ldw	r3,8(r4)
 400a248:	21800f15 	stw	r6,60(r4)
 400a24c:	2080bb04 	addi	r2,r4,748
 400a250:	02400044 	movi	r9,1
 400a254:	018000c4 	movi	r6,3
 400a258:	2180b915 	stw	r6,740(r4)
 400a25c:	2080ba15 	stw	r2,744(r4)
 400a260:	22400e15 	stw	r9,56(r4)
 400a264:	20800317 	ldw	r2,12(r4)
 400a268:	2000b815 	stw	zero,736(r4)
 400a26c:	02010074 	movhi	r8,1025
 400a270:	4234cc04 	addi	r8,r8,-11472
 400a274:	01c10074 	movhi	r7,1025
 400a278:	39f4e104 	addi	r7,r7,-11388
 400a27c:	01810074 	movhi	r6,1025
 400a280:	31b50304 	addi	r6,r6,-11252
 400a284:	01010074 	movhi	r4,1025
 400a288:	21351a04 	addi	r4,r4,-11160
 400a28c:	02800104 	movi	r10,4
 400a290:	28000015 	stw	zero,0(r5)
 400a294:	28000115 	stw	zero,4(r5)
 400a298:	28000215 	stw	zero,8(r5)
 400a29c:	2a80030d 	sth	r10,12(r5)
 400a2a0:	2800038d 	sth	zero,14(r5)
 400a2a4:	28000415 	stw	zero,16(r5)
 400a2a8:	28000515 	stw	zero,20(r5)
 400a2ac:	28000615 	stw	zero,24(r5)
 400a2b0:	29400715 	stw	r5,28(r5)
 400a2b4:	2a000815 	stw	r8,32(r5)
 400a2b8:	29c00915 	stw	r7,36(r5)
 400a2bc:	29800a15 	stw	r6,40(r5)
 400a2c0:	29000b15 	stw	r4,44(r5)
 400a2c4:	01400284 	movi	r5,10
 400a2c8:	18000015 	stw	zero,0(r3)
 400a2cc:	18000115 	stw	zero,4(r3)
 400a2d0:	18000215 	stw	zero,8(r3)
 400a2d4:	1940030d 	sth	r5,12(r3)
 400a2d8:	1a40038d 	sth	r9,14(r3)
 400a2dc:	18000415 	stw	zero,16(r3)
 400a2e0:	18000515 	stw	zero,20(r3)
 400a2e4:	18000615 	stw	zero,24(r3)
 400a2e8:	18c00715 	stw	r3,28(r3)
 400a2ec:	1a000815 	stw	r8,32(r3)
 400a2f0:	19c00915 	stw	r7,36(r3)
 400a2f4:	19800a15 	stw	r6,40(r3)
 400a2f8:	19000b15 	stw	r4,44(r3)
 400a2fc:	00c00484 	movi	r3,18
 400a300:	10c0030d 	sth	r3,12(r2)
 400a304:	00c00084 	movi	r3,2
 400a308:	10000015 	stw	zero,0(r2)
 400a30c:	10000115 	stw	zero,4(r2)
 400a310:	10000215 	stw	zero,8(r2)
 400a314:	10c0038d 	sth	r3,14(r2)
 400a318:	10000415 	stw	zero,16(r2)
 400a31c:	10000515 	stw	zero,20(r2)
 400a320:	10000615 	stw	zero,24(r2)
 400a324:	10800715 	stw	r2,28(r2)
 400a328:	12000815 	stw	r8,32(r2)
 400a32c:	11c00915 	stw	r7,36(r2)
 400a330:	11800a15 	stw	r6,40(r2)
 400a334:	11000b15 	stw	r4,44(r2)
 400a338:	f800283a 	ret

0400a33c <__sfp>:
 400a33c:	defffc04 	addi	sp,sp,-16
 400a340:	00810374 	movhi	r2,1037
 400a344:	10903d04 	addi	r2,r2,16628
 400a348:	dc400115 	stw	r17,4(sp)
 400a34c:	14400017 	ldw	r17,0(r2)
 400a350:	dc800215 	stw	r18,8(sp)
 400a354:	dfc00315 	stw	ra,12(sp)
 400a358:	88800e17 	ldw	r2,56(r17)
 400a35c:	dc000015 	stw	r16,0(sp)
 400a360:	2025883a 	mov	r18,r4
 400a364:	10002826 	beq	r2,zero,400a408 <__sfp+0xcc>
 400a368:	8c40b804 	addi	r17,r17,736
 400a36c:	043fffc4 	movi	r16,-1
 400a370:	89400117 	ldw	r5,4(r17)
 400a374:	88800217 	ldw	r2,8(r17)
 400a378:	297fffc4 	addi	r5,r5,-1
 400a37c:	28000a16 	blt	r5,zero,400a3a8 <__sfp+0x6c>
 400a380:	10c0030f 	ldh	r3,12(r2)
 400a384:	18000c26 	beq	r3,zero,400a3b8 <__sfp+0x7c>
 400a388:	10c01a04 	addi	r3,r2,104
 400a38c:	00000206 	br	400a398 <__sfp+0x5c>
 400a390:	19bfe90f 	ldh	r6,-92(r3)
 400a394:	30000826 	beq	r6,zero,400a3b8 <__sfp+0x7c>
 400a398:	297fffc4 	addi	r5,r5,-1
 400a39c:	18bffd04 	addi	r2,r3,-12
 400a3a0:	18c01704 	addi	r3,r3,92
 400a3a4:	2c3ffa1e 	bne	r5,r16,400a390 <__sfp+0x54>
 400a3a8:	88800017 	ldw	r2,0(r17)
 400a3ac:	10001926 	beq	r2,zero,400a414 <__sfp+0xd8>
 400a3b0:	1023883a 	mov	r17,r2
 400a3b4:	003fee06 	br	400a370 <__sfp+0x34>
 400a3b8:	00ffffc4 	movi	r3,-1
 400a3bc:	10c0038d 	sth	r3,14(r2)
 400a3c0:	00c00044 	movi	r3,1
 400a3c4:	10c0030d 	sth	r3,12(r2)
 400a3c8:	10000015 	stw	zero,0(r2)
 400a3cc:	10000215 	stw	zero,8(r2)
 400a3d0:	10000115 	stw	zero,4(r2)
 400a3d4:	10000415 	stw	zero,16(r2)
 400a3d8:	10000515 	stw	zero,20(r2)
 400a3dc:	10000615 	stw	zero,24(r2)
 400a3e0:	10000c15 	stw	zero,48(r2)
 400a3e4:	10000d15 	stw	zero,52(r2)
 400a3e8:	10001115 	stw	zero,68(r2)
 400a3ec:	10001215 	stw	zero,72(r2)
 400a3f0:	dfc00317 	ldw	ra,12(sp)
 400a3f4:	dc800217 	ldw	r18,8(sp)
 400a3f8:	dc400117 	ldw	r17,4(sp)
 400a3fc:	dc000017 	ldw	r16,0(sp)
 400a400:	dec00404 	addi	sp,sp,16
 400a404:	f800283a 	ret
 400a408:	8809883a 	mov	r4,r17
 400a40c:	400a2300 	call	400a230 <__sinit>
 400a410:	003fd506 	br	400a368 <__sfp+0x2c>
 400a414:	9009883a 	mov	r4,r18
 400a418:	01400104 	movi	r5,4
 400a41c:	400a1bc0 	call	400a1bc <__sfmoreglue>
 400a420:	88800015 	stw	r2,0(r17)
 400a424:	103fe21e 	bne	r2,zero,400a3b0 <__sfp+0x74>
 400a428:	00800304 	movi	r2,12
 400a42c:	90800015 	stw	r2,0(r18)
 400a430:	0005883a 	mov	r2,zero
 400a434:	003fee06 	br	400a3f0 <__sfp+0xb4>

0400a438 <__sfp_lock_acquire>:
 400a438:	f800283a 	ret

0400a43c <__sfp_lock_release>:
 400a43c:	f800283a 	ret

0400a440 <__sinit_lock_acquire>:
 400a440:	f800283a 	ret

0400a444 <__sinit_lock_release>:
 400a444:	f800283a 	ret

0400a448 <__fp_lock_all>:
 400a448:	00810374 	movhi	r2,1037
 400a44c:	10903e04 	addi	r2,r2,16632
 400a450:	11000017 	ldw	r4,0(r2)
 400a454:	01410074 	movhi	r5,1025
 400a458:	29686804 	addi	r5,r5,-24160
 400a45c:	400ad681 	jmpi	400ad68 <_fwalk>

0400a460 <__fp_unlock_all>:
 400a460:	00810374 	movhi	r2,1037
 400a464:	10903e04 	addi	r2,r2,16632
 400a468:	11000017 	ldw	r4,0(r2)
 400a46c:	01410074 	movhi	r5,1025
 400a470:	29686a04 	addi	r5,r5,-24152
 400a474:	400ad681 	jmpi	400ad68 <_fwalk>

0400a478 <_malloc_trim_r>:
 400a478:	defffb04 	addi	sp,sp,-20
 400a47c:	dcc00315 	stw	r19,12(sp)
 400a480:	dc800215 	stw	r18,8(sp)
 400a484:	dc400115 	stw	r17,4(sp)
 400a488:	dc000015 	stw	r16,0(sp)
 400a48c:	2827883a 	mov	r19,r5
 400a490:	dfc00415 	stw	ra,16(sp)
 400a494:	04410374 	movhi	r17,1037
 400a498:	8c4a8504 	addi	r17,r17,10772
 400a49c:	2021883a 	mov	r16,r4
 400a4a0:	400ef280 	call	400ef28 <__malloc_lock>
 400a4a4:	88800217 	ldw	r2,8(r17)
 400a4a8:	14800117 	ldw	r18,4(r2)
 400a4ac:	00bfff04 	movi	r2,-4
 400a4b0:	90a4703a 	and	r18,r18,r2
 400a4b4:	9083fbc4 	addi	r2,r18,4079
 400a4b8:	14e7c83a 	sub	r19,r2,r19
 400a4bc:	9826d33a 	srli	r19,r19,12
 400a4c0:	0083ffc4 	movi	r2,4095
 400a4c4:	9cffffc4 	addi	r19,r19,-1
 400a4c8:	9826933a 	slli	r19,r19,12
 400a4cc:	14c0060e 	bge	r2,r19,400a4e8 <_malloc_trim_r+0x70>
 400a4d0:	8009883a 	mov	r4,r16
 400a4d4:	000b883a 	mov	r5,zero
 400a4d8:	400d2cc0 	call	400d2cc <_sbrk_r>
 400a4dc:	88c00217 	ldw	r3,8(r17)
 400a4e0:	1c87883a 	add	r3,r3,r18
 400a4e4:	10c00a26 	beq	r2,r3,400a510 <_malloc_trim_r+0x98>
 400a4e8:	8009883a 	mov	r4,r16
 400a4ec:	400ef480 	call	400ef48 <__malloc_unlock>
 400a4f0:	0005883a 	mov	r2,zero
 400a4f4:	dfc00417 	ldw	ra,16(sp)
 400a4f8:	dcc00317 	ldw	r19,12(sp)
 400a4fc:	dc800217 	ldw	r18,8(sp)
 400a500:	dc400117 	ldw	r17,4(sp)
 400a504:	dc000017 	ldw	r16,0(sp)
 400a508:	dec00504 	addi	sp,sp,20
 400a50c:	f800283a 	ret
 400a510:	8009883a 	mov	r4,r16
 400a514:	04cbc83a 	sub	r5,zero,r19
 400a518:	400d2cc0 	call	400d2cc <_sbrk_r>
 400a51c:	00ffffc4 	movi	r3,-1
 400a520:	10c01326 	beq	r2,r3,400a570 <_malloc_trim_r+0xf8>
 400a524:	00810374 	movhi	r2,1037
 400a528:	10905b04 	addi	r2,r2,16748
 400a52c:	11000017 	ldw	r4,0(r2)
 400a530:	88c00217 	ldw	r3,8(r17)
 400a534:	94e5c83a 	sub	r18,r18,r19
 400a538:	94800054 	ori	r18,r18,1
 400a53c:	24e7c83a 	sub	r19,r4,r19
 400a540:	1c800115 	stw	r18,4(r3)
 400a544:	8009883a 	mov	r4,r16
 400a548:	14c00015 	stw	r19,0(r2)
 400a54c:	400ef480 	call	400ef48 <__malloc_unlock>
 400a550:	00800044 	movi	r2,1
 400a554:	dfc00417 	ldw	ra,16(sp)
 400a558:	dcc00317 	ldw	r19,12(sp)
 400a55c:	dc800217 	ldw	r18,8(sp)
 400a560:	dc400117 	ldw	r17,4(sp)
 400a564:	dc000017 	ldw	r16,0(sp)
 400a568:	dec00504 	addi	sp,sp,20
 400a56c:	f800283a 	ret
 400a570:	8009883a 	mov	r4,r16
 400a574:	000b883a 	mov	r5,zero
 400a578:	400d2cc0 	call	400d2cc <_sbrk_r>
 400a57c:	88c00217 	ldw	r3,8(r17)
 400a580:	014003c4 	movi	r5,15
 400a584:	10c9c83a 	sub	r4,r2,r3
 400a588:	293fd70e 	bge	r5,r4,400a4e8 <_malloc_trim_r+0x70>
 400a58c:	01410374 	movhi	r5,1037
 400a590:	29504004 	addi	r5,r5,16640
 400a594:	29400017 	ldw	r5,0(r5)
 400a598:	21000054 	ori	r4,r4,1
 400a59c:	19000115 	stw	r4,4(r3)
 400a5a0:	1145c83a 	sub	r2,r2,r5
 400a5a4:	01410374 	movhi	r5,1037
 400a5a8:	29505b04 	addi	r5,r5,16748
 400a5ac:	28800015 	stw	r2,0(r5)
 400a5b0:	003fcd06 	br	400a4e8 <_malloc_trim_r+0x70>

0400a5b4 <_free_r>:
 400a5b4:	defffd04 	addi	sp,sp,-12
 400a5b8:	dc400115 	stw	r17,4(sp)
 400a5bc:	dc000015 	stw	r16,0(sp)
 400a5c0:	dfc00215 	stw	ra,8(sp)
 400a5c4:	2821883a 	mov	r16,r5
 400a5c8:	2023883a 	mov	r17,r4
 400a5cc:	28004b26 	beq	r5,zero,400a6fc <_free_r+0x148>
 400a5d0:	400ef280 	call	400ef28 <__malloc_lock>
 400a5d4:	823fff17 	ldw	r8,-4(r16)
 400a5d8:	00bfff84 	movi	r2,-2
 400a5dc:	81bffe04 	addi	r6,r16,-8
 400a5e0:	4084703a 	and	r2,r8,r2
 400a5e4:	3087883a 	add	r3,r6,r2
 400a5e8:	01410374 	movhi	r5,1037
 400a5ec:	294a8504 	addi	r5,r5,10772
 400a5f0:	1a400117 	ldw	r9,4(r3)
 400a5f4:	29000217 	ldw	r4,8(r5)
 400a5f8:	01ffff04 	movi	r7,-4
 400a5fc:	49ce703a 	and	r7,r9,r7
 400a600:	20c06526 	beq	r4,r3,400a798 <_free_r+0x1e4>
 400a604:	19c00115 	stw	r7,4(r3)
 400a608:	4200004c 	andi	r8,r8,1
 400a60c:	40003026 	beq	r8,zero,400a6d0 <_free_r+0x11c>
 400a610:	0009883a 	mov	r4,zero
 400a614:	19d1883a 	add	r8,r3,r7
 400a618:	42000117 	ldw	r8,4(r8)
 400a61c:	4200004c 	andi	r8,r8,1
 400a620:	4000061e 	bne	r8,zero,400a63c <_free_r+0x88>
 400a624:	11c5883a 	add	r2,r2,r7
 400a628:	19c00217 	ldw	r7,8(r3)
 400a62c:	20004e26 	beq	r4,zero,400a768 <_free_r+0x1b4>
 400a630:	18c00317 	ldw	r3,12(r3)
 400a634:	38c00315 	stw	r3,12(r7)
 400a638:	19c00215 	stw	r7,8(r3)
 400a63c:	11c00054 	ori	r7,r2,1
 400a640:	3087883a 	add	r3,r6,r2
 400a644:	31c00115 	stw	r7,4(r6)
 400a648:	18800015 	stw	r2,0(r3)
 400a64c:	20001a1e 	bne	r4,zero,400a6b8 <_free_r+0x104>
 400a650:	00c07fc4 	movi	r3,511
 400a654:	18802e2e 	bgeu	r3,r2,400a710 <_free_r+0x15c>
 400a658:	1006d27a 	srli	r3,r2,9
 400a65c:	01000104 	movi	r4,4
 400a660:	20c06636 	bltu	r4,r3,400a7fc <_free_r+0x248>
 400a664:	1008d1ba 	srli	r4,r2,6
 400a668:	21000e04 	addi	r4,r4,56
 400a66c:	210f883a 	add	r7,r4,r4
 400a670:	39cf883a 	add	r7,r7,r7
 400a674:	39cf883a 	add	r7,r7,r7
 400a678:	29cf883a 	add	r7,r5,r7
 400a67c:	38c00217 	ldw	r3,8(r7)
 400a680:	01410374 	movhi	r5,1037
 400a684:	294a8504 	addi	r5,r5,10772
 400a688:	19c06126 	beq	r3,r7,400a810 <_free_r+0x25c>
 400a68c:	013fff04 	movi	r4,-4
 400a690:	19400117 	ldw	r5,4(r3)
 400a694:	290a703a 	and	r5,r5,r4
 400a698:	1140022e 	bgeu	r2,r5,400a6a4 <_free_r+0xf0>
 400a69c:	18c00217 	ldw	r3,8(r3)
 400a6a0:	38fffb1e 	bne	r7,r3,400a690 <_free_r+0xdc>
 400a6a4:	18800317 	ldw	r2,12(r3)
 400a6a8:	30800315 	stw	r2,12(r6)
 400a6ac:	30c00215 	stw	r3,8(r6)
 400a6b0:	11800215 	stw	r6,8(r2)
 400a6b4:	19800315 	stw	r6,12(r3)
 400a6b8:	8809883a 	mov	r4,r17
 400a6bc:	dfc00217 	ldw	ra,8(sp)
 400a6c0:	dc400117 	ldw	r17,4(sp)
 400a6c4:	dc000017 	ldw	r16,0(sp)
 400a6c8:	dec00304 	addi	sp,sp,12
 400a6cc:	400ef481 	jmpi	400ef48 <__malloc_unlock>
 400a6d0:	813ffe17 	ldw	r4,-8(r16)
 400a6d4:	2a400204 	addi	r9,r5,8
 400a6d8:	310dc83a 	sub	r6,r6,r4
 400a6dc:	32000217 	ldw	r8,8(r6)
 400a6e0:	1105883a 	add	r2,r2,r4
 400a6e4:	42404326 	beq	r8,r9,400a7f4 <_free_r+0x240>
 400a6e8:	32400317 	ldw	r9,12(r6)
 400a6ec:	0009883a 	mov	r4,zero
 400a6f0:	42400315 	stw	r9,12(r8)
 400a6f4:	4a000215 	stw	r8,8(r9)
 400a6f8:	003fc606 	br	400a614 <_free_r+0x60>
 400a6fc:	dfc00217 	ldw	ra,8(sp)
 400a700:	dc400117 	ldw	r17,4(sp)
 400a704:	dc000017 	ldw	r16,0(sp)
 400a708:	dec00304 	addi	sp,sp,12
 400a70c:	f800283a 	ret
 400a710:	1004d0fa 	srli	r2,r2,3
 400a714:	02000044 	movi	r8,1
 400a718:	29c00117 	ldw	r7,4(r5)
 400a71c:	1087883a 	add	r3,r2,r2
 400a720:	18c7883a 	add	r3,r3,r3
 400a724:	1005d0ba 	srai	r2,r2,2
 400a728:	18c7883a 	add	r3,r3,r3
 400a72c:	28c7883a 	add	r3,r5,r3
 400a730:	19000217 	ldw	r4,8(r3)
 400a734:	4084983a 	sll	r2,r8,r2
 400a738:	30c00315 	stw	r3,12(r6)
 400a73c:	31000215 	stw	r4,8(r6)
 400a740:	11c4b03a 	or	r2,r2,r7
 400a744:	21800315 	stw	r6,12(r4)
 400a748:	8809883a 	mov	r4,r17
 400a74c:	28800115 	stw	r2,4(r5)
 400a750:	19800215 	stw	r6,8(r3)
 400a754:	dfc00217 	ldw	ra,8(sp)
 400a758:	dc400117 	ldw	r17,4(sp)
 400a75c:	dc000017 	ldw	r16,0(sp)
 400a760:	dec00304 	addi	sp,sp,12
 400a764:	400ef481 	jmpi	400ef48 <__malloc_unlock>
 400a768:	02010374 	movhi	r8,1037
 400a76c:	420a8704 	addi	r8,r8,10780
 400a770:	3a3faf1e 	bne	r7,r8,400a630 <_free_r+0x7c>
 400a774:	29800515 	stw	r6,20(r5)
 400a778:	29800415 	stw	r6,16(r5)
 400a77c:	11000054 	ori	r4,r2,1
 400a780:	3087883a 	add	r3,r6,r2
 400a784:	31c00315 	stw	r7,12(r6)
 400a788:	31c00215 	stw	r7,8(r6)
 400a78c:	31000115 	stw	r4,4(r6)
 400a790:	18800015 	stw	r2,0(r3)
 400a794:	003fc806 	br	400a6b8 <_free_r+0x104>
 400a798:	4200004c 	andi	r8,r8,1
 400a79c:	3885883a 	add	r2,r7,r2
 400a7a0:	4000071e 	bne	r8,zero,400a7c0 <_free_r+0x20c>
 400a7a4:	81fffe17 	ldw	r7,-8(r16)
 400a7a8:	31cdc83a 	sub	r6,r6,r7
 400a7ac:	30c00317 	ldw	r3,12(r6)
 400a7b0:	31000217 	ldw	r4,8(r6)
 400a7b4:	11c5883a 	add	r2,r2,r7
 400a7b8:	20c00315 	stw	r3,12(r4)
 400a7bc:	19000215 	stw	r4,8(r3)
 400a7c0:	00c10374 	movhi	r3,1037
 400a7c4:	18d04104 	addi	r3,r3,16644
 400a7c8:	18c00017 	ldw	r3,0(r3)
 400a7cc:	11000054 	ori	r4,r2,1
 400a7d0:	31000115 	stw	r4,4(r6)
 400a7d4:	29800215 	stw	r6,8(r5)
 400a7d8:	10ffb736 	bltu	r2,r3,400a6b8 <_free_r+0x104>
 400a7dc:	00810374 	movhi	r2,1037
 400a7e0:	10905304 	addi	r2,r2,16716
 400a7e4:	11400017 	ldw	r5,0(r2)
 400a7e8:	8809883a 	mov	r4,r17
 400a7ec:	400a4780 	call	400a478 <_malloc_trim_r>
 400a7f0:	003fb106 	br	400a6b8 <_free_r+0x104>
 400a7f4:	01000044 	movi	r4,1
 400a7f8:	003f8606 	br	400a614 <_free_r+0x60>
 400a7fc:	01000504 	movi	r4,20
 400a800:	20c00b36 	bltu	r4,r3,400a830 <_free_r+0x27c>
 400a804:	190016c4 	addi	r4,r3,91
 400a808:	210f883a 	add	r7,r4,r4
 400a80c:	003f9806 	br	400a670 <_free_r+0xbc>
 400a810:	2009d0ba 	srai	r4,r4,2
 400a814:	00800044 	movi	r2,1
 400a818:	29c00117 	ldw	r7,4(r5)
 400a81c:	1108983a 	sll	r4,r2,r4
 400a820:	1805883a 	mov	r2,r3
 400a824:	21c8b03a 	or	r4,r4,r7
 400a828:	29000115 	stw	r4,4(r5)
 400a82c:	003f9e06 	br	400a6a8 <_free_r+0xf4>
 400a830:	01001504 	movi	r4,84
 400a834:	20c00436 	bltu	r4,r3,400a848 <_free_r+0x294>
 400a838:	1008d33a 	srli	r4,r2,12
 400a83c:	21001b84 	addi	r4,r4,110
 400a840:	210f883a 	add	r7,r4,r4
 400a844:	003f8a06 	br	400a670 <_free_r+0xbc>
 400a848:	01005504 	movi	r4,340
 400a84c:	20c00436 	bltu	r4,r3,400a860 <_free_r+0x2ac>
 400a850:	1008d3fa 	srli	r4,r2,15
 400a854:	21001dc4 	addi	r4,r4,119
 400a858:	210f883a 	add	r7,r4,r4
 400a85c:	003f8406 	br	400a670 <_free_r+0xbc>
 400a860:	01015504 	movi	r4,1364
 400a864:	20c00436 	bltu	r4,r3,400a878 <_free_r+0x2c4>
 400a868:	1008d4ba 	srli	r4,r2,18
 400a86c:	21001f04 	addi	r4,r4,124
 400a870:	210f883a 	add	r7,r4,r4
 400a874:	003f7e06 	br	400a670 <_free_r+0xbc>
 400a878:	01c03f04 	movi	r7,252
 400a87c:	01001f84 	movi	r4,126
 400a880:	003f7b06 	br	400a670 <_free_r+0xbc>

0400a884 <__sfvwrite_r>:
 400a884:	30800217 	ldw	r2,8(r6)
 400a888:	defff504 	addi	sp,sp,-44
 400a88c:	dd400615 	stw	r21,24(sp)
 400a890:	dd000515 	stw	r20,20(sp)
 400a894:	dc000115 	stw	r16,4(sp)
 400a898:	dfc00a15 	stw	ra,40(sp)
 400a89c:	df000915 	stw	fp,36(sp)
 400a8a0:	ddc00815 	stw	r23,32(sp)
 400a8a4:	dd800715 	stw	r22,28(sp)
 400a8a8:	dcc00415 	stw	r19,16(sp)
 400a8ac:	dc800315 	stw	r18,12(sp)
 400a8b0:	dc400215 	stw	r17,8(sp)
 400a8b4:	3029883a 	mov	r20,r6
 400a8b8:	202b883a 	mov	r21,r4
 400a8bc:	2821883a 	mov	r16,r5
 400a8c0:	10002126 	beq	r2,zero,400a948 <__sfvwrite_r+0xc4>
 400a8c4:	2880030b 	ldhu	r2,12(r5)
 400a8c8:	10c0020c 	andi	r3,r2,8
 400a8cc:	18ffffcc 	andi	r3,r3,65535
 400a8d0:	18e0001c 	xori	r3,r3,32768
 400a8d4:	18e00004 	addi	r3,r3,-32768
 400a8d8:	18002826 	beq	r3,zero,400a97c <__sfvwrite_r+0xf8>
 400a8dc:	28c00417 	ldw	r3,16(r5)
 400a8e0:	18002626 	beq	r3,zero,400a97c <__sfvwrite_r+0xf8>
 400a8e4:	10c0008c 	andi	r3,r2,2
 400a8e8:	18ffffcc 	andi	r3,r3,65535
 400a8ec:	18e0001c 	xori	r3,r3,32768
 400a8f0:	18e00004 	addi	r3,r3,-32768
 400a8f4:	a4400017 	ldw	r17,0(r20)
 400a8f8:	18002b26 	beq	r3,zero,400a9a8 <__sfvwrite_r+0x124>
 400a8fc:	0027883a 	mov	r19,zero
 400a900:	0025883a 	mov	r18,zero
 400a904:	05810004 	movi	r22,1024
 400a908:	980d883a 	mov	r6,r19
 400a90c:	a809883a 	mov	r4,r21
 400a910:	90004f26 	beq	r18,zero,400aa50 <__sfvwrite_r+0x1cc>
 400a914:	900f883a 	mov	r7,r18
 400a918:	81400717 	ldw	r5,28(r16)
 400a91c:	b480012e 	bgeu	r22,r18,400a924 <__sfvwrite_r+0xa0>
 400a920:	01c10004 	movi	r7,1024
 400a924:	80800917 	ldw	r2,36(r16)
 400a928:	103ee83a 	callr	r2
 400a92c:	0080540e 	bge	zero,r2,400aa80 <__sfvwrite_r+0x1fc>
 400a930:	a0c00217 	ldw	r3,8(r20)
 400a934:	98a7883a 	add	r19,r19,r2
 400a938:	90a5c83a 	sub	r18,r18,r2
 400a93c:	1885c83a 	sub	r2,r3,r2
 400a940:	a0800215 	stw	r2,8(r20)
 400a944:	103ff01e 	bne	r2,zero,400a908 <__sfvwrite_r+0x84>
 400a948:	0005883a 	mov	r2,zero
 400a94c:	dfc00a17 	ldw	ra,40(sp)
 400a950:	df000917 	ldw	fp,36(sp)
 400a954:	ddc00817 	ldw	r23,32(sp)
 400a958:	dd800717 	ldw	r22,28(sp)
 400a95c:	dd400617 	ldw	r21,24(sp)
 400a960:	dd000517 	ldw	r20,20(sp)
 400a964:	dcc00417 	ldw	r19,16(sp)
 400a968:	dc800317 	ldw	r18,12(sp)
 400a96c:	dc400217 	ldw	r17,8(sp)
 400a970:	dc000117 	ldw	r16,4(sp)
 400a974:	dec00b04 	addi	sp,sp,44
 400a978:	f800283a 	ret
 400a97c:	a809883a 	mov	r4,r21
 400a980:	800b883a 	mov	r5,r16
 400a984:	40085f00 	call	40085f0 <__swsetup_r>
 400a988:	1000f01e 	bne	r2,zero,400ad4c <__sfvwrite_r+0x4c8>
 400a98c:	8080030b 	ldhu	r2,12(r16)
 400a990:	a4400017 	ldw	r17,0(r20)
 400a994:	10c0008c 	andi	r3,r2,2
 400a998:	18ffffcc 	andi	r3,r3,65535
 400a99c:	18e0001c 	xori	r3,r3,32768
 400a9a0:	18e00004 	addi	r3,r3,-32768
 400a9a4:	183fd51e 	bne	r3,zero,400a8fc <__sfvwrite_r+0x78>
 400a9a8:	10c0004c 	andi	r3,r2,1
 400a9ac:	002d883a 	mov	r22,zero
 400a9b0:	1800381e 	bne	r3,zero,400aa94 <__sfvwrite_r+0x210>
 400a9b4:	0025883a 	mov	r18,zero
 400a9b8:	90002126 	beq	r18,zero,400aa40 <__sfvwrite_r+0x1bc>
 400a9bc:	10c0800c 	andi	r3,r2,512
 400a9c0:	18ffffcc 	andi	r3,r3,65535
 400a9c4:	18e0001c 	xori	r3,r3,32768
 400a9c8:	18e00004 	addi	r3,r3,-32768
 400a9cc:	84c00217 	ldw	r19,8(r16)
 400a9d0:	18006b26 	beq	r3,zero,400ab80 <__sfvwrite_r+0x2fc>
 400a9d4:	980f883a 	mov	r7,r19
 400a9d8:	94c08636 	bltu	r18,r19,400abf4 <__sfvwrite_r+0x370>
 400a9dc:	10c1200c 	andi	r3,r2,1152
 400a9e0:	18009f1e 	bne	r3,zero,400ac60 <__sfvwrite_r+0x3dc>
 400a9e4:	81000017 	ldw	r4,0(r16)
 400a9e8:	982f883a 	mov	r23,r19
 400a9ec:	9039883a 	mov	fp,r18
 400a9f0:	9027883a 	mov	r19,r18
 400a9f4:	380d883a 	mov	r6,r7
 400a9f8:	b00b883a 	mov	r5,r22
 400a9fc:	d9c00015 	stw	r7,0(sp)
 400aa00:	400bac00 	call	400bac0 <memmove>
 400aa04:	d9c00017 	ldw	r7,0(sp)
 400aa08:	81000217 	ldw	r4,8(r16)
 400aa0c:	80800017 	ldw	r2,0(r16)
 400aa10:	25efc83a 	sub	r23,r4,r23
 400aa14:	11cf883a 	add	r7,r2,r7
 400aa18:	85c00215 	stw	r23,8(r16)
 400aa1c:	81c00015 	stw	r7,0(r16)
 400aa20:	a0800217 	ldw	r2,8(r20)
 400aa24:	b72d883a 	add	r22,r22,fp
 400aa28:	9725c83a 	sub	r18,r18,fp
 400aa2c:	14e7c83a 	sub	r19,r2,r19
 400aa30:	a4c00215 	stw	r19,8(r20)
 400aa34:	983fc426 	beq	r19,zero,400a948 <__sfvwrite_r+0xc4>
 400aa38:	8080030b 	ldhu	r2,12(r16)
 400aa3c:	903fdf1e 	bne	r18,zero,400a9bc <__sfvwrite_r+0x138>
 400aa40:	8d800017 	ldw	r22,0(r17)
 400aa44:	8c800117 	ldw	r18,4(r17)
 400aa48:	8c400204 	addi	r17,r17,8
 400aa4c:	003fda06 	br	400a9b8 <__sfvwrite_r+0x134>
 400aa50:	8cc00017 	ldw	r19,0(r17)
 400aa54:	8c800117 	ldw	r18,4(r17)
 400aa58:	8c400204 	addi	r17,r17,8
 400aa5c:	003faa06 	br	400a908 <__sfvwrite_r+0x84>
 400aa60:	400cc6c0 	call	400cc6c <_realloc_r>
 400aa64:	102f883a 	mov	r23,r2
 400aa68:	10009f1e 	bne	r2,zero,400ace8 <__sfvwrite_r+0x464>
 400aa6c:	81400417 	ldw	r5,16(r16)
 400aa70:	a809883a 	mov	r4,r21
 400aa74:	400a5b40 	call	400a5b4 <_free_r>
 400aa78:	00800304 	movi	r2,12
 400aa7c:	a8800015 	stw	r2,0(r21)
 400aa80:	80c0030b 	ldhu	r3,12(r16)
 400aa84:	00bfffc4 	movi	r2,-1
 400aa88:	18c01014 	ori	r3,r3,64
 400aa8c:	80c0030d 	sth	r3,12(r16)
 400aa90:	003fae06 	br	400a94c <__sfvwrite_r+0xc8>
 400aa94:	0007883a 	mov	r3,zero
 400aa98:	0039883a 	mov	fp,zero
 400aa9c:	0025883a 	mov	r18,zero
 400aaa0:	90001e26 	beq	r18,zero,400ab1c <__sfvwrite_r+0x298>
 400aaa4:	18006526 	beq	r3,zero,400ac3c <__sfvwrite_r+0x3b8>
 400aaa8:	b02f883a 	mov	r23,r22
 400aaac:	9580012e 	bgeu	r18,r22,400aab4 <__sfvwrite_r+0x230>
 400aab0:	902f883a 	mov	r23,r18
 400aab4:	81000017 	ldw	r4,0(r16)
 400aab8:	80800417 	ldw	r2,16(r16)
 400aabc:	84c00217 	ldw	r19,8(r16)
 400aac0:	81c00517 	ldw	r7,20(r16)
 400aac4:	1100022e 	bgeu	r2,r4,400aad0 <__sfvwrite_r+0x24c>
 400aac8:	99e7883a 	add	r19,r19,r7
 400aacc:	9dc01816 	blt	r19,r23,400ab30 <__sfvwrite_r+0x2ac>
 400aad0:	b9c03b16 	blt	r23,r7,400abc0 <__sfvwrite_r+0x33c>
 400aad4:	80800917 	ldw	r2,36(r16)
 400aad8:	81400717 	ldw	r5,28(r16)
 400aadc:	a809883a 	mov	r4,r21
 400aae0:	d8c00015 	stw	r3,0(sp)
 400aae4:	e00d883a 	mov	r6,fp
 400aae8:	103ee83a 	callr	r2
 400aaec:	1027883a 	mov	r19,r2
 400aaf0:	d8c00017 	ldw	r3,0(sp)
 400aaf4:	00bfe20e 	bge	zero,r2,400aa80 <__sfvwrite_r+0x1fc>
 400aaf8:	b4edc83a 	sub	r22,r22,r19
 400aafc:	b0001a26 	beq	r22,zero,400ab68 <__sfvwrite_r+0x2e4>
 400ab00:	a0800217 	ldw	r2,8(r20)
 400ab04:	e4f9883a 	add	fp,fp,r19
 400ab08:	94e5c83a 	sub	r18,r18,r19
 400ab0c:	14e7c83a 	sub	r19,r2,r19
 400ab10:	a4c00215 	stw	r19,8(r20)
 400ab14:	983f8c26 	beq	r19,zero,400a948 <__sfvwrite_r+0xc4>
 400ab18:	903fe21e 	bne	r18,zero,400aaa4 <__sfvwrite_r+0x220>
 400ab1c:	8f000017 	ldw	fp,0(r17)
 400ab20:	8c800117 	ldw	r18,4(r17)
 400ab24:	0007883a 	mov	r3,zero
 400ab28:	8c400204 	addi	r17,r17,8
 400ab2c:	003fdc06 	br	400aaa0 <__sfvwrite_r+0x21c>
 400ab30:	e00b883a 	mov	r5,fp
 400ab34:	980d883a 	mov	r6,r19
 400ab38:	d8c00015 	stw	r3,0(sp)
 400ab3c:	400bac00 	call	400bac0 <memmove>
 400ab40:	80800017 	ldw	r2,0(r16)
 400ab44:	a809883a 	mov	r4,r21
 400ab48:	800b883a 	mov	r5,r16
 400ab4c:	14c5883a 	add	r2,r2,r19
 400ab50:	80800015 	stw	r2,0(r16)
 400ab54:	4009f880 	call	4009f88 <_fflush_r>
 400ab58:	d8c00017 	ldw	r3,0(sp)
 400ab5c:	103fc81e 	bne	r2,zero,400aa80 <__sfvwrite_r+0x1fc>
 400ab60:	b4edc83a 	sub	r22,r22,r19
 400ab64:	b03fe61e 	bne	r22,zero,400ab00 <__sfvwrite_r+0x27c>
 400ab68:	a809883a 	mov	r4,r21
 400ab6c:	800b883a 	mov	r5,r16
 400ab70:	4009f880 	call	4009f88 <_fflush_r>
 400ab74:	103fc21e 	bne	r2,zero,400aa80 <__sfvwrite_r+0x1fc>
 400ab78:	0007883a 	mov	r3,zero
 400ab7c:	003fe006 	br	400ab00 <__sfvwrite_r+0x27c>
 400ab80:	81000017 	ldw	r4,0(r16)
 400ab84:	80800417 	ldw	r2,16(r16)
 400ab88:	1100022e 	bgeu	r2,r4,400ab94 <__sfvwrite_r+0x310>
 400ab8c:	9839883a 	mov	fp,r19
 400ab90:	9c806036 	bltu	r19,r18,400ad14 <__sfvwrite_r+0x490>
 400ab94:	81c00517 	ldw	r7,20(r16)
 400ab98:	91c01c36 	bltu	r18,r7,400ac0c <__sfvwrite_r+0x388>
 400ab9c:	80800917 	ldw	r2,36(r16)
 400aba0:	81400717 	ldw	r5,28(r16)
 400aba4:	a809883a 	mov	r4,r21
 400aba8:	b00d883a 	mov	r6,r22
 400abac:	103ee83a 	callr	r2
 400abb0:	1027883a 	mov	r19,r2
 400abb4:	00bfb20e 	bge	zero,r2,400aa80 <__sfvwrite_r+0x1fc>
 400abb8:	1039883a 	mov	fp,r2
 400abbc:	003f9806 	br	400aa20 <__sfvwrite_r+0x19c>
 400abc0:	b80d883a 	mov	r6,r23
 400abc4:	e00b883a 	mov	r5,fp
 400abc8:	d8c00015 	stw	r3,0(sp)
 400abcc:	400bac00 	call	400bac0 <memmove>
 400abd0:	80800217 	ldw	r2,8(r16)
 400abd4:	81000017 	ldw	r4,0(r16)
 400abd8:	b827883a 	mov	r19,r23
 400abdc:	15c5c83a 	sub	r2,r2,r23
 400abe0:	25ef883a 	add	r23,r4,r23
 400abe4:	80800215 	stw	r2,8(r16)
 400abe8:	85c00015 	stw	r23,0(r16)
 400abec:	d8c00017 	ldw	r3,0(sp)
 400abf0:	003fc106 	br	400aaf8 <__sfvwrite_r+0x274>
 400abf4:	81000017 	ldw	r4,0(r16)
 400abf8:	902f883a 	mov	r23,r18
 400abfc:	9039883a 	mov	fp,r18
 400ac00:	9027883a 	mov	r19,r18
 400ac04:	900f883a 	mov	r7,r18
 400ac08:	003f7a06 	br	400a9f4 <__sfvwrite_r+0x170>
 400ac0c:	b00b883a 	mov	r5,r22
 400ac10:	900d883a 	mov	r6,r18
 400ac14:	400bac00 	call	400bac0 <memmove>
 400ac18:	80c00217 	ldw	r3,8(r16)
 400ac1c:	80800017 	ldw	r2,0(r16)
 400ac20:	9027883a 	mov	r19,r18
 400ac24:	1c87c83a 	sub	r3,r3,r18
 400ac28:	1485883a 	add	r2,r2,r18
 400ac2c:	80c00215 	stw	r3,8(r16)
 400ac30:	80800015 	stw	r2,0(r16)
 400ac34:	9039883a 	mov	fp,r18
 400ac38:	003f7906 	br	400aa20 <__sfvwrite_r+0x19c>
 400ac3c:	e009883a 	mov	r4,fp
 400ac40:	01400284 	movi	r5,10
 400ac44:	900d883a 	mov	r6,r18
 400ac48:	400b8d00 	call	400b8d0 <memchr>
 400ac4c:	10003c26 	beq	r2,zero,400ad40 <__sfvwrite_r+0x4bc>
 400ac50:	15800044 	addi	r22,r2,1
 400ac54:	b72dc83a 	sub	r22,r22,fp
 400ac58:	00c00044 	movi	r3,1
 400ac5c:	003f9206 	br	400aaa8 <__sfvwrite_r+0x224>
 400ac60:	81000517 	ldw	r4,20(r16)
 400ac64:	81400417 	ldw	r5,16(r16)
 400ac68:	80c00017 	ldw	r3,0(r16)
 400ac6c:	210d883a 	add	r6,r4,r4
 400ac70:	3109883a 	add	r4,r6,r4
 400ac74:	2026d7fa 	srli	r19,r4,31
 400ac78:	1979c83a 	sub	fp,r3,r5
 400ac7c:	e1800044 	addi	r6,fp,1
 400ac80:	9909883a 	add	r4,r19,r4
 400ac84:	2027d07a 	srai	r19,r4,1
 400ac88:	3489883a 	add	r4,r6,r18
 400ac8c:	980d883a 	mov	r6,r19
 400ac90:	9900022e 	bgeu	r19,r4,400ac9c <__sfvwrite_r+0x418>
 400ac94:	2027883a 	mov	r19,r4
 400ac98:	200d883a 	mov	r6,r4
 400ac9c:	1081000c 	andi	r2,r2,1024
 400aca0:	10bfffcc 	andi	r2,r2,65535
 400aca4:	10a0001c 	xori	r2,r2,32768
 400aca8:	10a00004 	addi	r2,r2,-32768
 400acac:	a809883a 	mov	r4,r21
 400acb0:	103f6b26 	beq	r2,zero,400aa60 <__sfvwrite_r+0x1dc>
 400acb4:	300b883a 	mov	r5,r6
 400acb8:	400b14c0 	call	400b14c <_malloc_r>
 400acbc:	102f883a 	mov	r23,r2
 400acc0:	103f6d26 	beq	r2,zero,400aa78 <__sfvwrite_r+0x1f4>
 400acc4:	81400417 	ldw	r5,16(r16)
 400acc8:	1009883a 	mov	r4,r2
 400accc:	e00d883a 	mov	r6,fp
 400acd0:	400b9c80 	call	400b9c8 <memcpy>
 400acd4:	8080030b 	ldhu	r2,12(r16)
 400acd8:	00fedfc4 	movi	r3,-1153
 400acdc:	10c4703a 	and	r2,r2,r3
 400ace0:	10802014 	ori	r2,r2,128
 400ace4:	8080030d 	sth	r2,12(r16)
 400ace8:	bf09883a 	add	r4,r23,fp
 400acec:	9f07c83a 	sub	r3,r19,fp
 400acf0:	85c00415 	stw	r23,16(r16)
 400acf4:	84c00515 	stw	r19,20(r16)
 400acf8:	81000015 	stw	r4,0(r16)
 400acfc:	902f883a 	mov	r23,r18
 400ad00:	80c00215 	stw	r3,8(r16)
 400ad04:	9039883a 	mov	fp,r18
 400ad08:	9027883a 	mov	r19,r18
 400ad0c:	900f883a 	mov	r7,r18
 400ad10:	003f3806 	br	400a9f4 <__sfvwrite_r+0x170>
 400ad14:	b00b883a 	mov	r5,r22
 400ad18:	980d883a 	mov	r6,r19
 400ad1c:	400bac00 	call	400bac0 <memmove>
 400ad20:	80800017 	ldw	r2,0(r16)
 400ad24:	a809883a 	mov	r4,r21
 400ad28:	800b883a 	mov	r5,r16
 400ad2c:	14c5883a 	add	r2,r2,r19
 400ad30:	80800015 	stw	r2,0(r16)
 400ad34:	4009f880 	call	4009f88 <_fflush_r>
 400ad38:	103f3926 	beq	r2,zero,400aa20 <__sfvwrite_r+0x19c>
 400ad3c:	003f5006 	br	400aa80 <__sfvwrite_r+0x1fc>
 400ad40:	95800044 	addi	r22,r18,1
 400ad44:	00c00044 	movi	r3,1
 400ad48:	003f5706 	br	400aaa8 <__sfvwrite_r+0x224>
 400ad4c:	80c0030b 	ldhu	r3,12(r16)
 400ad50:	00bfffc4 	movi	r2,-1
 400ad54:	18c01014 	ori	r3,r3,64
 400ad58:	80c0030d 	sth	r3,12(r16)
 400ad5c:	00c00244 	movi	r3,9
 400ad60:	a8c00015 	stw	r3,0(r21)
 400ad64:	003ef906 	br	400a94c <__sfvwrite_r+0xc8>

0400ad68 <_fwalk>:
 400ad68:	defff904 	addi	sp,sp,-28
 400ad6c:	dcc00315 	stw	r19,12(sp)
 400ad70:	24c0b804 	addi	r19,r4,736
 400ad74:	dd400515 	stw	r21,20(sp)
 400ad78:	dd000415 	stw	r20,16(sp)
 400ad7c:	dfc00615 	stw	ra,24(sp)
 400ad80:	dc800215 	stw	r18,8(sp)
 400ad84:	dc400115 	stw	r17,4(sp)
 400ad88:	dc000015 	stw	r16,0(sp)
 400ad8c:	282b883a 	mov	r21,r5
 400ad90:	0029883a 	mov	r20,zero
 400ad94:	400a4380 	call	400a438 <__sfp_lock_acquire>
 400ad98:	98001226 	beq	r19,zero,400ade4 <_fwalk+0x7c>
 400ad9c:	04bfffc4 	movi	r18,-1
 400ada0:	9c400117 	ldw	r17,4(r19)
 400ada4:	9c000217 	ldw	r16,8(r19)
 400ada8:	8c7fffc4 	addi	r17,r17,-1
 400adac:	88000b16 	blt	r17,zero,400addc <_fwalk+0x74>
 400adb0:	84000304 	addi	r16,r16,12
 400adb4:	80c0000f 	ldh	r3,0(r16)
 400adb8:	8c7fffc4 	addi	r17,r17,-1
 400adbc:	813ffd04 	addi	r4,r16,-12
 400adc0:	18000426 	beq	r3,zero,400add4 <_fwalk+0x6c>
 400adc4:	80c0008f 	ldh	r3,2(r16)
 400adc8:	1c800226 	beq	r3,r18,400add4 <_fwalk+0x6c>
 400adcc:	a83ee83a 	callr	r21
 400add0:	a0a8b03a 	or	r20,r20,r2
 400add4:	84001704 	addi	r16,r16,92
 400add8:	8cbff61e 	bne	r17,r18,400adb4 <_fwalk+0x4c>
 400addc:	9cc00017 	ldw	r19,0(r19)
 400ade0:	983fef1e 	bne	r19,zero,400ada0 <_fwalk+0x38>
 400ade4:	400a43c0 	call	400a43c <__sfp_lock_release>
 400ade8:	a005883a 	mov	r2,r20
 400adec:	dfc00617 	ldw	ra,24(sp)
 400adf0:	dd400517 	ldw	r21,20(sp)
 400adf4:	dd000417 	ldw	r20,16(sp)
 400adf8:	dcc00317 	ldw	r19,12(sp)
 400adfc:	dc800217 	ldw	r18,8(sp)
 400ae00:	dc400117 	ldw	r17,4(sp)
 400ae04:	dc000017 	ldw	r16,0(sp)
 400ae08:	dec00704 	addi	sp,sp,28
 400ae0c:	f800283a 	ret

0400ae10 <_fwalk_reent>:
 400ae10:	defff804 	addi	sp,sp,-32
 400ae14:	dcc00315 	stw	r19,12(sp)
 400ae18:	24c0b804 	addi	r19,r4,736
 400ae1c:	dd800615 	stw	r22,24(sp)
 400ae20:	dd400515 	stw	r21,20(sp)
 400ae24:	dd000415 	stw	r20,16(sp)
 400ae28:	dfc00715 	stw	ra,28(sp)
 400ae2c:	dc800215 	stw	r18,8(sp)
 400ae30:	dc400115 	stw	r17,4(sp)
 400ae34:	dc000015 	stw	r16,0(sp)
 400ae38:	2029883a 	mov	r20,r4
 400ae3c:	282b883a 	mov	r21,r5
 400ae40:	002d883a 	mov	r22,zero
 400ae44:	400a4380 	call	400a438 <__sfp_lock_acquire>
 400ae48:	98001326 	beq	r19,zero,400ae98 <_fwalk_reent+0x88>
 400ae4c:	04bfffc4 	movi	r18,-1
 400ae50:	9c400117 	ldw	r17,4(r19)
 400ae54:	9c000217 	ldw	r16,8(r19)
 400ae58:	8c7fffc4 	addi	r17,r17,-1
 400ae5c:	88000c16 	blt	r17,zero,400ae90 <_fwalk_reent+0x80>
 400ae60:	84000304 	addi	r16,r16,12
 400ae64:	80c0000f 	ldh	r3,0(r16)
 400ae68:	8c7fffc4 	addi	r17,r17,-1
 400ae6c:	817ffd04 	addi	r5,r16,-12
 400ae70:	18000526 	beq	r3,zero,400ae88 <_fwalk_reent+0x78>
 400ae74:	80c0008f 	ldh	r3,2(r16)
 400ae78:	a009883a 	mov	r4,r20
 400ae7c:	1c800226 	beq	r3,r18,400ae88 <_fwalk_reent+0x78>
 400ae80:	a83ee83a 	callr	r21
 400ae84:	b0acb03a 	or	r22,r22,r2
 400ae88:	84001704 	addi	r16,r16,92
 400ae8c:	8cbff51e 	bne	r17,r18,400ae64 <_fwalk_reent+0x54>
 400ae90:	9cc00017 	ldw	r19,0(r19)
 400ae94:	983fee1e 	bne	r19,zero,400ae50 <_fwalk_reent+0x40>
 400ae98:	400a43c0 	call	400a43c <__sfp_lock_release>
 400ae9c:	b005883a 	mov	r2,r22
 400aea0:	dfc00717 	ldw	ra,28(sp)
 400aea4:	dd800617 	ldw	r22,24(sp)
 400aea8:	dd400517 	ldw	r21,20(sp)
 400aeac:	dd000417 	ldw	r20,16(sp)
 400aeb0:	dcc00317 	ldw	r19,12(sp)
 400aeb4:	dc800217 	ldw	r18,8(sp)
 400aeb8:	dc400117 	ldw	r17,4(sp)
 400aebc:	dc000017 	ldw	r16,0(sp)
 400aec0:	dec00804 	addi	sp,sp,32
 400aec4:	f800283a 	ret

0400aec8 <_setlocale_r>:
 400aec8:	defffc04 	addi	sp,sp,-16
 400aecc:	dc800215 	stw	r18,8(sp)
 400aed0:	dc400115 	stw	r17,4(sp)
 400aed4:	dc000015 	stw	r16,0(sp)
 400aed8:	dfc00315 	stw	ra,12(sp)
 400aedc:	3021883a 	mov	r16,r6
 400aee0:	2023883a 	mov	r17,r4
 400aee4:	2825883a 	mov	r18,r5
 400aee8:	30001626 	beq	r6,zero,400af44 <_setlocale_r+0x7c>
 400aeec:	3009883a 	mov	r4,r6
 400aef0:	01410374 	movhi	r5,1037
 400aef4:	29491a04 	addi	r5,r5,9320
 400aef8:	400d4700 	call	400d470 <strcmp>
 400aefc:	10000a1e 	bne	r2,zero,400af28 <_setlocale_r+0x60>
 400af00:	8c800c15 	stw	r18,48(r17)
 400af04:	8c000d15 	stw	r16,52(r17)
 400af08:	00810374 	movhi	r2,1037
 400af0c:	10891a04 	addi	r2,r2,9320
 400af10:	dfc00317 	ldw	ra,12(sp)
 400af14:	dc800217 	ldw	r18,8(sp)
 400af18:	dc400117 	ldw	r17,4(sp)
 400af1c:	dc000017 	ldw	r16,0(sp)
 400af20:	dec00404 	addi	sp,sp,16
 400af24:	f800283a 	ret
 400af28:	8009883a 	mov	r4,r16
 400af2c:	01410374 	movhi	r5,1037
 400af30:	29490504 	addi	r5,r5,9236
 400af34:	400d4700 	call	400d470 <strcmp>
 400af38:	103ff126 	beq	r2,zero,400af00 <_setlocale_r+0x38>
 400af3c:	0005883a 	mov	r2,zero
 400af40:	003ff306 	br	400af10 <_setlocale_r+0x48>
 400af44:	00810374 	movhi	r2,1037
 400af48:	10891a04 	addi	r2,r2,9320
 400af4c:	dfc00317 	ldw	ra,12(sp)
 400af50:	dc800217 	ldw	r18,8(sp)
 400af54:	dc400117 	ldw	r17,4(sp)
 400af58:	dc000017 	ldw	r16,0(sp)
 400af5c:	dec00404 	addi	sp,sp,16
 400af60:	f800283a 	ret

0400af64 <__locale_charset>:
 400af64:	00810374 	movhi	r2,1037
 400af68:	10891b04 	addi	r2,r2,9324
 400af6c:	f800283a 	ret

0400af70 <_localeconv_r>:
 400af70:	00810374 	movhi	r2,1037
 400af74:	10891f04 	addi	r2,r2,9340
 400af78:	f800283a 	ret

0400af7c <setlocale>:
 400af7c:	00c10374 	movhi	r3,1037
 400af80:	18d03e04 	addi	r3,r3,16632
 400af84:	2005883a 	mov	r2,r4
 400af88:	19000017 	ldw	r4,0(r3)
 400af8c:	280d883a 	mov	r6,r5
 400af90:	100b883a 	mov	r5,r2
 400af94:	400aec81 	jmpi	400aec8 <_setlocale_r>

0400af98 <localeconv>:
 400af98:	00810374 	movhi	r2,1037
 400af9c:	10891f04 	addi	r2,r2,9340
 400afa0:	f800283a 	ret

0400afa4 <__smakebuf_r>:
 400afa4:	2880030b 	ldhu	r2,12(r5)
 400afa8:	deffed04 	addi	sp,sp,-76
 400afac:	dc401015 	stw	r17,64(sp)
 400afb0:	10c0008c 	andi	r3,r2,2
 400afb4:	18ffffcc 	andi	r3,r3,65535
 400afb8:	18e0001c 	xori	r3,r3,32768
 400afbc:	dc000f15 	stw	r16,60(sp)
 400afc0:	dfc01215 	stw	ra,72(sp)
 400afc4:	dc801115 	stw	r18,68(sp)
 400afc8:	18e00004 	addi	r3,r3,-32768
 400afcc:	2821883a 	mov	r16,r5
 400afd0:	2023883a 	mov	r17,r4
 400afd4:	1800381e 	bne	r3,zero,400b0b8 <__smakebuf_r+0x114>
 400afd8:	2940038f 	ldh	r5,14(r5)
 400afdc:	28002d16 	blt	r5,zero,400b094 <__smakebuf_r+0xf0>
 400afe0:	d80d883a 	mov	r6,sp
 400afe4:	400d7f00 	call	400d7f0 <_fstat_r>
 400afe8:	10002916 	blt	r2,zero,400b090 <__smakebuf_r+0xec>
 400afec:	d8800117 	ldw	r2,4(sp)
 400aff0:	00e00014 	movui	r3,32768
 400aff4:	10bc000c 	andi	r2,r2,61440
 400aff8:	10c03c26 	beq	r2,r3,400b0ec <__smakebuf_r+0x148>
 400affc:	80c0030b 	ldhu	r3,12(r16)
 400b000:	18c20014 	ori	r3,r3,2048
 400b004:	80c0030d 	sth	r3,12(r16)
 400b008:	00c80004 	movi	r3,8192
 400b00c:	10c00c1e 	bne	r2,r3,400b040 <__smakebuf_r+0x9c>
 400b010:	8140038f 	ldh	r5,14(r16)
 400b014:	8809883a 	mov	r4,r17
 400b018:	400d8580 	call	400d858 <_isatty_r>
 400b01c:	10000826 	beq	r2,zero,400b040 <__smakebuf_r+0x9c>
 400b020:	80c0030b 	ldhu	r3,12(r16)
 400b024:	808010c4 	addi	r2,r16,67
 400b028:	80800015 	stw	r2,0(r16)
 400b02c:	18c00054 	ori	r3,r3,1
 400b030:	80800415 	stw	r2,16(r16)
 400b034:	00800044 	movi	r2,1
 400b038:	80c0030d 	sth	r3,12(r16)
 400b03c:	80800515 	stw	r2,20(r16)
 400b040:	04810004 	movi	r18,1024
 400b044:	8809883a 	mov	r4,r17
 400b048:	900b883a 	mov	r5,r18
 400b04c:	400b14c0 	call	400b14c <_malloc_r>
 400b050:	10003026 	beq	r2,zero,400b114 <__smakebuf_r+0x170>
 400b054:	80c0030b 	ldhu	r3,12(r16)
 400b058:	01010074 	movhi	r4,1025
 400b05c:	21286c04 	addi	r4,r4,-24144
 400b060:	89000f15 	stw	r4,60(r17)
 400b064:	18c02014 	ori	r3,r3,128
 400b068:	80c0030d 	sth	r3,12(r16)
 400b06c:	80800015 	stw	r2,0(r16)
 400b070:	80800415 	stw	r2,16(r16)
 400b074:	84800515 	stw	r18,20(r16)
 400b078:	dfc01217 	ldw	ra,72(sp)
 400b07c:	dc801117 	ldw	r18,68(sp)
 400b080:	dc401017 	ldw	r17,64(sp)
 400b084:	dc000f17 	ldw	r16,60(sp)
 400b088:	dec01304 	addi	sp,sp,76
 400b08c:	f800283a 	ret
 400b090:	8080030b 	ldhu	r2,12(r16)
 400b094:	10c0200c 	andi	r3,r2,128
 400b098:	18ffffcc 	andi	r3,r3,65535
 400b09c:	18e0001c 	xori	r3,r3,32768
 400b0a0:	18e00004 	addi	r3,r3,-32768
 400b0a4:	18000f1e 	bne	r3,zero,400b0e4 <__smakebuf_r+0x140>
 400b0a8:	04810004 	movi	r18,1024
 400b0ac:	10820014 	ori	r2,r2,2048
 400b0b0:	8080030d 	sth	r2,12(r16)
 400b0b4:	003fe306 	br	400b044 <__smakebuf_r+0xa0>
 400b0b8:	288010c4 	addi	r2,r5,67
 400b0bc:	28800015 	stw	r2,0(r5)
 400b0c0:	28800415 	stw	r2,16(r5)
 400b0c4:	00800044 	movi	r2,1
 400b0c8:	28800515 	stw	r2,20(r5)
 400b0cc:	dfc01217 	ldw	ra,72(sp)
 400b0d0:	dc801117 	ldw	r18,68(sp)
 400b0d4:	dc401017 	ldw	r17,64(sp)
 400b0d8:	dc000f17 	ldw	r16,60(sp)
 400b0dc:	dec01304 	addi	sp,sp,76
 400b0e0:	f800283a 	ret
 400b0e4:	04801004 	movi	r18,64
 400b0e8:	003ff006 	br	400b0ac <__smakebuf_r+0x108>
 400b0ec:	81000a17 	ldw	r4,40(r16)
 400b0f0:	00c10074 	movhi	r3,1025
 400b0f4:	18f50304 	addi	r3,r3,-11252
 400b0f8:	20ffc01e 	bne	r4,r3,400affc <__smakebuf_r+0x58>
 400b0fc:	8080030b 	ldhu	r2,12(r16)
 400b100:	00c10004 	movi	r3,1024
 400b104:	80c01315 	stw	r3,76(r16)
 400b108:	10c4b03a 	or	r2,r2,r3
 400b10c:	8080030d 	sth	r2,12(r16)
 400b110:	003fcb06 	br	400b040 <__smakebuf_r+0x9c>
 400b114:	8080030b 	ldhu	r2,12(r16)
 400b118:	10c0800c 	andi	r3,r2,512
 400b11c:	18ffffcc 	andi	r3,r3,65535
 400b120:	18e0001c 	xori	r3,r3,32768
 400b124:	18e00004 	addi	r3,r3,-32768
 400b128:	183fd31e 	bne	r3,zero,400b078 <__smakebuf_r+0xd4>
 400b12c:	10800094 	ori	r2,r2,2
 400b130:	80c010c4 	addi	r3,r16,67
 400b134:	8080030d 	sth	r2,12(r16)
 400b138:	00800044 	movi	r2,1
 400b13c:	80c00015 	stw	r3,0(r16)
 400b140:	80c00415 	stw	r3,16(r16)
 400b144:	80800515 	stw	r2,20(r16)
 400b148:	003fcb06 	br	400b078 <__smakebuf_r+0xd4>

0400b14c <_malloc_r>:
 400b14c:	defff604 	addi	sp,sp,-40
 400b150:	dc800215 	stw	r18,8(sp)
 400b154:	dfc00915 	stw	ra,36(sp)
 400b158:	df000815 	stw	fp,32(sp)
 400b15c:	ddc00715 	stw	r23,28(sp)
 400b160:	dd800615 	stw	r22,24(sp)
 400b164:	dd400515 	stw	r21,20(sp)
 400b168:	dd000415 	stw	r20,16(sp)
 400b16c:	dcc00315 	stw	r19,12(sp)
 400b170:	dc400115 	stw	r17,4(sp)
 400b174:	dc000015 	stw	r16,0(sp)
 400b178:	288002c4 	addi	r2,r5,11
 400b17c:	00c00584 	movi	r3,22
 400b180:	2025883a 	mov	r18,r4
 400b184:	18802b2e 	bgeu	r3,r2,400b234 <_malloc_r+0xe8>
 400b188:	047ffe04 	movi	r17,-8
 400b18c:	1462703a 	and	r17,r2,r17
 400b190:	88002a16 	blt	r17,zero,400b23c <_malloc_r+0xf0>
 400b194:	89402936 	bltu	r17,r5,400b23c <_malloc_r+0xf0>
 400b198:	9009883a 	mov	r4,r18
 400b19c:	400ef280 	call	400ef28 <__malloc_lock>
 400b1a0:	00807dc4 	movi	r2,503
 400b1a4:	14402936 	bltu	r2,r17,400b24c <_malloc_r+0x100>
 400b1a8:	8808d0fa 	srli	r4,r17,3
 400b1ac:	04c10374 	movhi	r19,1037
 400b1b0:	9cca8504 	addi	r19,r19,10772
 400b1b4:	2105883a 	add	r2,r4,r4
 400b1b8:	1085883a 	add	r2,r2,r2
 400b1bc:	1085883a 	add	r2,r2,r2
 400b1c0:	9885883a 	add	r2,r19,r2
 400b1c4:	14000317 	ldw	r16,12(r2)
 400b1c8:	80815526 	beq	r16,r2,400b720 <_malloc_r+0x5d4>
 400b1cc:	81000117 	ldw	r4,4(r16)
 400b1d0:	00bfff04 	movi	r2,-4
 400b1d4:	80c00317 	ldw	r3,12(r16)
 400b1d8:	2084703a 	and	r2,r4,r2
 400b1dc:	8085883a 	add	r2,r16,r2
 400b1e0:	11800117 	ldw	r6,4(r2)
 400b1e4:	81400217 	ldw	r5,8(r16)
 400b1e8:	9009883a 	mov	r4,r18
 400b1ec:	31800054 	ori	r6,r6,1
 400b1f0:	11800115 	stw	r6,4(r2)
 400b1f4:	28c00315 	stw	r3,12(r5)
 400b1f8:	19400215 	stw	r5,8(r3)
 400b1fc:	400ef480 	call	400ef48 <__malloc_unlock>
 400b200:	80800204 	addi	r2,r16,8
 400b204:	dfc00917 	ldw	ra,36(sp)
 400b208:	df000817 	ldw	fp,32(sp)
 400b20c:	ddc00717 	ldw	r23,28(sp)
 400b210:	dd800617 	ldw	r22,24(sp)
 400b214:	dd400517 	ldw	r21,20(sp)
 400b218:	dd000417 	ldw	r20,16(sp)
 400b21c:	dcc00317 	ldw	r19,12(sp)
 400b220:	dc800217 	ldw	r18,8(sp)
 400b224:	dc400117 	ldw	r17,4(sp)
 400b228:	dc000017 	ldw	r16,0(sp)
 400b22c:	dec00a04 	addi	sp,sp,40
 400b230:	f800283a 	ret
 400b234:	04400404 	movi	r17,16
 400b238:	897fd72e 	bgeu	r17,r5,400b198 <_malloc_r+0x4c>
 400b23c:	00800304 	movi	r2,12
 400b240:	90800015 	stw	r2,0(r18)
 400b244:	0005883a 	mov	r2,zero
 400b248:	003fee06 	br	400b204 <_malloc_r+0xb8>
 400b24c:	8808d27a 	srli	r4,r17,9
 400b250:	20007126 	beq	r4,zero,400b418 <_malloc_r+0x2cc>
 400b254:	00800104 	movi	r2,4
 400b258:	1100eb36 	bltu	r2,r4,400b608 <_malloc_r+0x4bc>
 400b25c:	8808d1ba 	srli	r4,r17,6
 400b260:	21000e04 	addi	r4,r4,56
 400b264:	210b883a 	add	r5,r4,r4
 400b268:	294b883a 	add	r5,r5,r5
 400b26c:	294b883a 	add	r5,r5,r5
 400b270:	04c10374 	movhi	r19,1037
 400b274:	9cca8504 	addi	r19,r19,10772
 400b278:	994b883a 	add	r5,r19,r5
 400b27c:	2c000317 	ldw	r16,12(r5)
 400b280:	2c000e26 	beq	r5,r16,400b2bc <_malloc_r+0x170>
 400b284:	80c00117 	ldw	r3,4(r16)
 400b288:	01ffff04 	movi	r7,-4
 400b28c:	018003c4 	movi	r6,15
 400b290:	19c6703a 	and	r3,r3,r7
 400b294:	1c45c83a 	sub	r2,r3,r17
 400b298:	30800716 	blt	r6,r2,400b2b8 <_malloc_r+0x16c>
 400b29c:	1000610e 	bge	r2,zero,400b424 <_malloc_r+0x2d8>
 400b2a0:	84000317 	ldw	r16,12(r16)
 400b2a4:	2c000526 	beq	r5,r16,400b2bc <_malloc_r+0x170>
 400b2a8:	80c00117 	ldw	r3,4(r16)
 400b2ac:	19c6703a 	and	r3,r3,r7
 400b2b0:	1c45c83a 	sub	r2,r3,r17
 400b2b4:	30bff90e 	bge	r6,r2,400b29c <_malloc_r+0x150>
 400b2b8:	213fffc4 	addi	r4,r4,-1
 400b2bc:	21000044 	addi	r4,r4,1
 400b2c0:	9c000417 	ldw	r16,16(r19)
 400b2c4:	00c10374 	movhi	r3,1037
 400b2c8:	18ca8504 	addi	r3,r3,10772
 400b2cc:	1a400204 	addi	r9,r3,8
 400b2d0:	8240ff26 	beq	r16,r9,400b6d0 <_malloc_r+0x584>
 400b2d4:	81400117 	ldw	r5,4(r16)
 400b2d8:	00bfff04 	movi	r2,-4
 400b2dc:	018003c4 	movi	r6,15
 400b2e0:	2884703a 	and	r2,r5,r2
 400b2e4:	144bc83a 	sub	r5,r2,r17
 400b2e8:	3140ea16 	blt	r6,r5,400b694 <_malloc_r+0x548>
 400b2ec:	1a400515 	stw	r9,20(r3)
 400b2f0:	1a400415 	stw	r9,16(r3)
 400b2f4:	2800570e 	bge	r5,zero,400b454 <_malloc_r+0x308>
 400b2f8:	01407fc4 	movi	r5,511
 400b2fc:	2880ca36 	bltu	r5,r2,400b628 <_malloc_r+0x4dc>
 400b300:	1004d0fa 	srli	r2,r2,3
 400b304:	02000044 	movi	r8,1
 400b308:	19c00117 	ldw	r7,4(r3)
 400b30c:	108b883a 	add	r5,r2,r2
 400b310:	294b883a 	add	r5,r5,r5
 400b314:	1005d0ba 	srai	r2,r2,2
 400b318:	294b883a 	add	r5,r5,r5
 400b31c:	28cb883a 	add	r5,r5,r3
 400b320:	29800217 	ldw	r6,8(r5)
 400b324:	4084983a 	sll	r2,r8,r2
 400b328:	81400315 	stw	r5,12(r16)
 400b32c:	81800215 	stw	r6,8(r16)
 400b330:	11c4b03a 	or	r2,r2,r7
 400b334:	18800115 	stw	r2,4(r3)
 400b338:	2c000215 	stw	r16,8(r5)
 400b33c:	34000315 	stw	r16,12(r6)
 400b340:	200bd0ba 	srai	r5,r4,2
 400b344:	00c00044 	movi	r3,1
 400b348:	194a983a 	sll	r5,r3,r5
 400b34c:	11404936 	bltu	r2,r5,400b474 <_malloc_r+0x328>
 400b350:	1146703a 	and	r3,r2,r5
 400b354:	18000a1e 	bne	r3,zero,400b380 <_malloc_r+0x234>
 400b358:	00ffff04 	movi	r3,-4
 400b35c:	294b883a 	add	r5,r5,r5
 400b360:	20c8703a 	and	r4,r4,r3
 400b364:	1146703a 	and	r3,r2,r5
 400b368:	21000104 	addi	r4,r4,4
 400b36c:	1800041e 	bne	r3,zero,400b380 <_malloc_r+0x234>
 400b370:	294b883a 	add	r5,r5,r5
 400b374:	1146703a 	and	r3,r2,r5
 400b378:	21000104 	addi	r4,r4,4
 400b37c:	183ffc26 	beq	r3,zero,400b370 <_malloc_r+0x224>
 400b380:	023fff04 	movi	r8,-4
 400b384:	01c003c4 	movi	r7,15
 400b388:	2105883a 	add	r2,r4,r4
 400b38c:	1085883a 	add	r2,r2,r2
 400b390:	1085883a 	add	r2,r2,r2
 400b394:	9899883a 	add	r12,r19,r2
 400b398:	62800304 	addi	r10,r12,12
 400b39c:	2017883a 	mov	r11,r4
 400b3a0:	54000017 	ldw	r16,0(r10)
 400b3a4:	51bffd04 	addi	r6,r10,-12
 400b3a8:	8180041e 	bne	r16,r6,400b3bc <_malloc_r+0x270>
 400b3ac:	0000ca06 	br	400b6d8 <_malloc_r+0x58c>
 400b3b0:	10001c0e 	bge	r2,zero,400b424 <_malloc_r+0x2d8>
 400b3b4:	84000317 	ldw	r16,12(r16)
 400b3b8:	8180c726 	beq	r16,r6,400b6d8 <_malloc_r+0x58c>
 400b3bc:	80c00117 	ldw	r3,4(r16)
 400b3c0:	1a06703a 	and	r3,r3,r8
 400b3c4:	1c45c83a 	sub	r2,r3,r17
 400b3c8:	38bff90e 	bge	r7,r2,400b3b0 <_malloc_r+0x264>
 400b3cc:	81000317 	ldw	r4,12(r16)
 400b3d0:	81400217 	ldw	r5,8(r16)
 400b3d4:	8447883a 	add	r3,r16,r17
 400b3d8:	8c400054 	ori	r17,r17,1
 400b3dc:	29000315 	stw	r4,12(r5)
 400b3e0:	21400215 	stw	r5,8(r4)
 400b3e4:	84400115 	stw	r17,4(r16)
 400b3e8:	1889883a 	add	r4,r3,r2
 400b3ec:	11400054 	ori	r5,r2,1
 400b3f0:	98c00515 	stw	r3,20(r19)
 400b3f4:	98c00415 	stw	r3,16(r19)
 400b3f8:	20800015 	stw	r2,0(r4)
 400b3fc:	1a400315 	stw	r9,12(r3)
 400b400:	1a400215 	stw	r9,8(r3)
 400b404:	19400115 	stw	r5,4(r3)
 400b408:	9009883a 	mov	r4,r18
 400b40c:	400ef480 	call	400ef48 <__malloc_unlock>
 400b410:	80800204 	addi	r2,r16,8
 400b414:	003f7b06 	br	400b204 <_malloc_r+0xb8>
 400b418:	8808d0fa 	srli	r4,r17,3
 400b41c:	210b883a 	add	r5,r4,r4
 400b420:	003f9106 	br	400b268 <_malloc_r+0x11c>
 400b424:	80c7883a 	add	r3,r16,r3
 400b428:	19400117 	ldw	r5,4(r3)
 400b42c:	80800317 	ldw	r2,12(r16)
 400b430:	81000217 	ldw	r4,8(r16)
 400b434:	29400054 	ori	r5,r5,1
 400b438:	19400115 	stw	r5,4(r3)
 400b43c:	20800315 	stw	r2,12(r4)
 400b440:	11000215 	stw	r4,8(r2)
 400b444:	9009883a 	mov	r4,r18
 400b448:	400ef480 	call	400ef48 <__malloc_unlock>
 400b44c:	80800204 	addi	r2,r16,8
 400b450:	003f6c06 	br	400b204 <_malloc_r+0xb8>
 400b454:	8085883a 	add	r2,r16,r2
 400b458:	10c00117 	ldw	r3,4(r2)
 400b45c:	9009883a 	mov	r4,r18
 400b460:	18c00054 	ori	r3,r3,1
 400b464:	10c00115 	stw	r3,4(r2)
 400b468:	400ef480 	call	400ef48 <__malloc_unlock>
 400b46c:	80800204 	addi	r2,r16,8
 400b470:	003f6406 	br	400b204 <_malloc_r+0xb8>
 400b474:	9c000217 	ldw	r16,8(r19)
 400b478:	00bfff04 	movi	r2,-4
 400b47c:	85400117 	ldw	r21,4(r16)
 400b480:	a8aa703a 	and	r21,r21,r2
 400b484:	ac400336 	bltu	r21,r17,400b494 <_malloc_r+0x348>
 400b488:	ac45c83a 	sub	r2,r21,r17
 400b48c:	00c003c4 	movi	r3,15
 400b490:	18805316 	blt	r3,r2,400b5e0 <_malloc_r+0x494>
 400b494:	d5e01817 	ldw	r23,-32672(gp)
 400b498:	d0e00517 	ldw	r3,-32748(gp)
 400b49c:	00bfffc4 	movi	r2,-1
 400b4a0:	8579883a 	add	fp,r16,r21
 400b4a4:	8def883a 	add	r23,r17,r23
 400b4a8:	1880d226 	beq	r3,r2,400b7f4 <_malloc_r+0x6a8>
 400b4ac:	bdc403c4 	addi	r23,r23,4111
 400b4b0:	00bc0004 	movi	r2,-4096
 400b4b4:	b8ae703a 	and	r23,r23,r2
 400b4b8:	9009883a 	mov	r4,r18
 400b4bc:	b80b883a 	mov	r5,r23
 400b4c0:	400d2cc0 	call	400d2cc <_sbrk_r>
 400b4c4:	1029883a 	mov	r20,r2
 400b4c8:	00bfffc4 	movi	r2,-1
 400b4cc:	a080d126 	beq	r20,r2,400b814 <_malloc_r+0x6c8>
 400b4d0:	a7009f36 	bltu	r20,fp,400b750 <_malloc_r+0x604>
 400b4d4:	05810374 	movhi	r22,1037
 400b4d8:	b5905b04 	addi	r22,r22,16748
 400b4dc:	b0800017 	ldw	r2,0(r22)
 400b4e0:	b885883a 	add	r2,r23,r2
 400b4e4:	b0800015 	stw	r2,0(r22)
 400b4e8:	e500cf26 	beq	fp,r20,400b828 <_malloc_r+0x6dc>
 400b4ec:	d1200517 	ldw	r4,-32748(gp)
 400b4f0:	00ffffc4 	movi	r3,-1
 400b4f4:	20c0e026 	beq	r4,r3,400b878 <_malloc_r+0x72c>
 400b4f8:	a739c83a 	sub	fp,r20,fp
 400b4fc:	1705883a 	add	r2,r2,fp
 400b500:	b0800015 	stw	r2,0(r22)
 400b504:	a08001cc 	andi	r2,r20,7
 400b508:	1000a526 	beq	r2,zero,400b7a0 <_malloc_r+0x654>
 400b50c:	a0a9c83a 	sub	r20,r20,r2
 400b510:	00c40204 	movi	r3,4104
 400b514:	a5000204 	addi	r20,r20,8
 400b518:	1885c83a 	sub	r2,r3,r2
 400b51c:	a5c7883a 	add	r3,r20,r23
 400b520:	18c3ffcc 	andi	r3,r3,4095
 400b524:	10efc83a 	sub	r23,r2,r3
 400b528:	9009883a 	mov	r4,r18
 400b52c:	b80b883a 	mov	r5,r23
 400b530:	400d2cc0 	call	400d2cc <_sbrk_r>
 400b534:	00ffffc4 	movi	r3,-1
 400b538:	10c0cc26 	beq	r2,r3,400b86c <_malloc_r+0x720>
 400b53c:	1505c83a 	sub	r2,r2,r20
 400b540:	b887883a 	add	r3,r23,r2
 400b544:	18c00054 	ori	r3,r3,1
 400b548:	b0800017 	ldw	r2,0(r22)
 400b54c:	9d000215 	stw	r20,8(r19)
 400b550:	a0c00115 	stw	r3,4(r20)
 400b554:	b885883a 	add	r2,r23,r2
 400b558:	b0800015 	stw	r2,0(r22)
 400b55c:	84c00e26 	beq	r16,r19,400b598 <_malloc_r+0x44c>
 400b560:	00c003c4 	movi	r3,15
 400b564:	1d40902e 	bgeu	r3,r21,400b7a8 <_malloc_r+0x65c>
 400b568:	ad7ffd04 	addi	r21,r21,-12
 400b56c:	013ffe04 	movi	r4,-8
 400b570:	a908703a 	and	r4,r21,r4
 400b574:	810b883a 	add	r5,r16,r4
 400b578:	01800144 	movi	r6,5
 400b57c:	29800115 	stw	r6,4(r5)
 400b580:	29800215 	stw	r6,8(r5)
 400b584:	81400117 	ldw	r5,4(r16)
 400b588:	2940004c 	andi	r5,r5,1
 400b58c:	214ab03a 	or	r5,r4,r5
 400b590:	81400115 	stw	r5,4(r16)
 400b594:	1900ae36 	bltu	r3,r4,400b850 <_malloc_r+0x704>
 400b598:	d0e01717 	ldw	r3,-32676(gp)
 400b59c:	1880012e 	bgeu	r3,r2,400b5a4 <_malloc_r+0x458>
 400b5a0:	d0a01715 	stw	r2,-32676(gp)
 400b5a4:	d0e01617 	ldw	r3,-32680(gp)
 400b5a8:	9c000217 	ldw	r16,8(r19)
 400b5ac:	1880012e 	bgeu	r3,r2,400b5b4 <_malloc_r+0x468>
 400b5b0:	d0a01615 	stw	r2,-32680(gp)
 400b5b4:	80c00117 	ldw	r3,4(r16)
 400b5b8:	00bfff04 	movi	r2,-4
 400b5bc:	1886703a 	and	r3,r3,r2
 400b5c0:	1c45c83a 	sub	r2,r3,r17
 400b5c4:	1c400236 	bltu	r3,r17,400b5d0 <_malloc_r+0x484>
 400b5c8:	00c003c4 	movi	r3,15
 400b5cc:	18800416 	blt	r3,r2,400b5e0 <_malloc_r+0x494>
 400b5d0:	9009883a 	mov	r4,r18
 400b5d4:	400ef480 	call	400ef48 <__malloc_unlock>
 400b5d8:	0005883a 	mov	r2,zero
 400b5dc:	003f0906 	br	400b204 <_malloc_r+0xb8>
 400b5e0:	88c00054 	ori	r3,r17,1
 400b5e4:	10800054 	ori	r2,r2,1
 400b5e8:	80c00115 	stw	r3,4(r16)
 400b5ec:	8463883a 	add	r17,r16,r17
 400b5f0:	88800115 	stw	r2,4(r17)
 400b5f4:	9009883a 	mov	r4,r18
 400b5f8:	9c400215 	stw	r17,8(r19)
 400b5fc:	400ef480 	call	400ef48 <__malloc_unlock>
 400b600:	80800204 	addi	r2,r16,8
 400b604:	003eff06 	br	400b204 <_malloc_r+0xb8>
 400b608:	00800504 	movi	r2,20
 400b60c:	1100492e 	bgeu	r2,r4,400b734 <_malloc_r+0x5e8>
 400b610:	00801504 	movi	r2,84
 400b614:	11005c36 	bltu	r2,r4,400b788 <_malloc_r+0x63c>
 400b618:	8808d33a 	srli	r4,r17,12
 400b61c:	21001b84 	addi	r4,r4,110
 400b620:	210b883a 	add	r5,r4,r4
 400b624:	003f1006 	br	400b268 <_malloc_r+0x11c>
 400b628:	1006d27a 	srli	r3,r2,9
 400b62c:	01400104 	movi	r5,4
 400b630:	28c0432e 	bgeu	r5,r3,400b740 <_malloc_r+0x5f4>
 400b634:	01400504 	movi	r5,20
 400b638:	28c07036 	bltu	r5,r3,400b7fc <_malloc_r+0x6b0>
 400b63c:	194016c4 	addi	r5,r3,91
 400b640:	294d883a 	add	r6,r5,r5
 400b644:	318d883a 	add	r6,r6,r6
 400b648:	318d883a 	add	r6,r6,r6
 400b64c:	998d883a 	add	r6,r19,r6
 400b650:	30c00217 	ldw	r3,8(r6)
 400b654:	01c10374 	movhi	r7,1037
 400b658:	39ca8504 	addi	r7,r7,10772
 400b65c:	19805726 	beq	r3,r6,400b7bc <_malloc_r+0x670>
 400b660:	01ffff04 	movi	r7,-4
 400b664:	19400117 	ldw	r5,4(r3)
 400b668:	29ca703a 	and	r5,r5,r7
 400b66c:	1140022e 	bgeu	r2,r5,400b678 <_malloc_r+0x52c>
 400b670:	18c00217 	ldw	r3,8(r3)
 400b674:	30fffb1e 	bne	r6,r3,400b664 <_malloc_r+0x518>
 400b678:	19400317 	ldw	r5,12(r3)
 400b67c:	98800117 	ldw	r2,4(r19)
 400b680:	81400315 	stw	r5,12(r16)
 400b684:	80c00215 	stw	r3,8(r16)
 400b688:	2c000215 	stw	r16,8(r5)
 400b68c:	1c000315 	stw	r16,12(r3)
 400b690:	003f2b06 	br	400b340 <_malloc_r+0x1f4>
 400b694:	8445883a 	add	r2,r16,r17
 400b698:	8c400054 	ori	r17,r17,1
 400b69c:	18800515 	stw	r2,20(r3)
 400b6a0:	18800415 	stw	r2,16(r3)
 400b6a4:	29000054 	ori	r4,r5,1
 400b6a8:	1147883a 	add	r3,r2,r5
 400b6ac:	84400115 	stw	r17,4(r16)
 400b6b0:	11000115 	stw	r4,4(r2)
 400b6b4:	12400315 	stw	r9,12(r2)
 400b6b8:	12400215 	stw	r9,8(r2)
 400b6bc:	19400015 	stw	r5,0(r3)
 400b6c0:	9009883a 	mov	r4,r18
 400b6c4:	400ef480 	call	400ef48 <__malloc_unlock>
 400b6c8:	80800204 	addi	r2,r16,8
 400b6cc:	003ecd06 	br	400b204 <_malloc_r+0xb8>
 400b6d0:	18800117 	ldw	r2,4(r3)
 400b6d4:	003f1a06 	br	400b340 <_malloc_r+0x1f4>
 400b6d8:	5ac00044 	addi	r11,r11,1
 400b6dc:	588000cc 	andi	r2,r11,3
 400b6e0:	52800204 	addi	r10,r10,8
 400b6e4:	103f2e1e 	bne	r2,zero,400b3a0 <_malloc_r+0x254>
 400b6e8:	20c000cc 	andi	r3,r4,3
 400b6ec:	60bffe04 	addi	r2,r12,-8
 400b6f0:	18006f26 	beq	r3,zero,400b8b0 <_malloc_r+0x764>
 400b6f4:	63000017 	ldw	r12,0(r12)
 400b6f8:	213fffc4 	addi	r4,r4,-1
 400b6fc:	60bffa26 	beq	r12,r2,400b6e8 <_malloc_r+0x59c>
 400b700:	98800117 	ldw	r2,4(r19)
 400b704:	294b883a 	add	r5,r5,r5
 400b708:	117f5a36 	bltu	r2,r5,400b474 <_malloc_r+0x328>
 400b70c:	283f5926 	beq	r5,zero,400b474 <_malloc_r+0x328>
 400b710:	1146703a 	and	r3,r2,r5
 400b714:	18001626 	beq	r3,zero,400b770 <_malloc_r+0x624>
 400b718:	5809883a 	mov	r4,r11
 400b71c:	003f1a06 	br	400b388 <_malloc_r+0x23c>
 400b720:	80800204 	addi	r2,r16,8
 400b724:	84000517 	ldw	r16,20(r16)
 400b728:	143ea81e 	bne	r2,r16,400b1cc <_malloc_r+0x80>
 400b72c:	21000084 	addi	r4,r4,2
 400b730:	003ee306 	br	400b2c0 <_malloc_r+0x174>
 400b734:	210016c4 	addi	r4,r4,91
 400b738:	210b883a 	add	r5,r4,r4
 400b73c:	003eca06 	br	400b268 <_malloc_r+0x11c>
 400b740:	100ad1ba 	srli	r5,r2,6
 400b744:	29400e04 	addi	r5,r5,56
 400b748:	294d883a 	add	r6,r5,r5
 400b74c:	003fbd06 	br	400b644 <_malloc_r+0x4f8>
 400b750:	84ff6026 	beq	r16,r19,400b4d4 <_malloc_r+0x388>
 400b754:	00810374 	movhi	r2,1037
 400b758:	108a8504 	addi	r2,r2,10772
 400b75c:	14000217 	ldw	r16,8(r2)
 400b760:	00bfff04 	movi	r2,-4
 400b764:	80c00117 	ldw	r3,4(r16)
 400b768:	1886703a 	and	r3,r3,r2
 400b76c:	003f9406 	br	400b5c0 <_malloc_r+0x474>
 400b770:	294b883a 	add	r5,r5,r5
 400b774:	1146703a 	and	r3,r2,r5
 400b778:	5ac00104 	addi	r11,r11,4
 400b77c:	183ffc26 	beq	r3,zero,400b770 <_malloc_r+0x624>
 400b780:	5809883a 	mov	r4,r11
 400b784:	003f0006 	br	400b388 <_malloc_r+0x23c>
 400b788:	00805504 	movi	r2,340
 400b78c:	11001336 	bltu	r2,r4,400b7dc <_malloc_r+0x690>
 400b790:	8808d3fa 	srli	r4,r17,15
 400b794:	21001dc4 	addi	r4,r4,119
 400b798:	210b883a 	add	r5,r4,r4
 400b79c:	003eb206 	br	400b268 <_malloc_r+0x11c>
 400b7a0:	00840004 	movi	r2,4096
 400b7a4:	003f5d06 	br	400b51c <_malloc_r+0x3d0>
 400b7a8:	00800044 	movi	r2,1
 400b7ac:	a0800115 	stw	r2,4(r20)
 400b7b0:	a021883a 	mov	r16,r20
 400b7b4:	0007883a 	mov	r3,zero
 400b7b8:	003f8106 	br	400b5c0 <_malloc_r+0x474>
 400b7bc:	280bd0ba 	srai	r5,r5,2
 400b7c0:	01800044 	movi	r6,1
 400b7c4:	38800117 	ldw	r2,4(r7)
 400b7c8:	314c983a 	sll	r6,r6,r5
 400b7cc:	180b883a 	mov	r5,r3
 400b7d0:	3084b03a 	or	r2,r6,r2
 400b7d4:	38800115 	stw	r2,4(r7)
 400b7d8:	003fa906 	br	400b680 <_malloc_r+0x534>
 400b7dc:	00815504 	movi	r2,1364
 400b7e0:	11001836 	bltu	r2,r4,400b844 <_malloc_r+0x6f8>
 400b7e4:	8808d4ba 	srli	r4,r17,18
 400b7e8:	21001f04 	addi	r4,r4,124
 400b7ec:	210b883a 	add	r5,r4,r4
 400b7f0:	003e9d06 	br	400b268 <_malloc_r+0x11c>
 400b7f4:	bdc00404 	addi	r23,r23,16
 400b7f8:	003f2f06 	br	400b4b8 <_malloc_r+0x36c>
 400b7fc:	01401504 	movi	r5,84
 400b800:	28c01f36 	bltu	r5,r3,400b880 <_malloc_r+0x734>
 400b804:	100ad33a 	srli	r5,r2,12
 400b808:	29401b84 	addi	r5,r5,110
 400b80c:	294d883a 	add	r6,r5,r5
 400b810:	003f8c06 	br	400b644 <_malloc_r+0x4f8>
 400b814:	9c000217 	ldw	r16,8(r19)
 400b818:	00bfff04 	movi	r2,-4
 400b81c:	80c00117 	ldw	r3,4(r16)
 400b820:	1886703a 	and	r3,r3,r2
 400b824:	003f6606 	br	400b5c0 <_malloc_r+0x474>
 400b828:	e0c3ffcc 	andi	r3,fp,4095
 400b82c:	183f2f1e 	bne	r3,zero,400b4ec <_malloc_r+0x3a0>
 400b830:	98c00217 	ldw	r3,8(r19)
 400b834:	bd49883a 	add	r4,r23,r21
 400b838:	21000054 	ori	r4,r4,1
 400b83c:	19000115 	stw	r4,4(r3)
 400b840:	003f5506 	br	400b598 <_malloc_r+0x44c>
 400b844:	01403f04 	movi	r5,252
 400b848:	01001f84 	movi	r4,126
 400b84c:	003e8606 	br	400b268 <_malloc_r+0x11c>
 400b850:	9009883a 	mov	r4,r18
 400b854:	81400204 	addi	r5,r16,8
 400b858:	400a5b40 	call	400a5b4 <_free_r>
 400b85c:	00810374 	movhi	r2,1037
 400b860:	10905b04 	addi	r2,r2,16748
 400b864:	10800017 	ldw	r2,0(r2)
 400b868:	003f4b06 	br	400b598 <_malloc_r+0x44c>
 400b86c:	00c00044 	movi	r3,1
 400b870:	002f883a 	mov	r23,zero
 400b874:	003f3406 	br	400b548 <_malloc_r+0x3fc>
 400b878:	d5200515 	stw	r20,-32748(gp)
 400b87c:	003f2106 	br	400b504 <_malloc_r+0x3b8>
 400b880:	01405504 	movi	r5,340
 400b884:	28c00436 	bltu	r5,r3,400b898 <_malloc_r+0x74c>
 400b888:	100ad3fa 	srli	r5,r2,15
 400b88c:	29401dc4 	addi	r5,r5,119
 400b890:	294d883a 	add	r6,r5,r5
 400b894:	003f6b06 	br	400b644 <_malloc_r+0x4f8>
 400b898:	01415504 	movi	r5,1364
 400b89c:	28c00936 	bltu	r5,r3,400b8c4 <_malloc_r+0x778>
 400b8a0:	100ad4ba 	srli	r5,r2,18
 400b8a4:	29401f04 	addi	r5,r5,124
 400b8a8:	294d883a 	add	r6,r5,r5
 400b8ac:	003f6506 	br	400b644 <_malloc_r+0x4f8>
 400b8b0:	98800117 	ldw	r2,4(r19)
 400b8b4:	0146303a 	nor	r3,zero,r5
 400b8b8:	1884703a 	and	r2,r3,r2
 400b8bc:	98800115 	stw	r2,4(r19)
 400b8c0:	003f9006 	br	400b704 <_malloc_r+0x5b8>
 400b8c4:	01803f04 	movi	r6,252
 400b8c8:	01401f84 	movi	r5,126
 400b8cc:	003f5d06 	br	400b644 <_malloc_r+0x4f8>

0400b8d0 <memchr>:
 400b8d0:	008000c4 	movi	r2,3
 400b8d4:	29403fcc 	andi	r5,r5,255
 400b8d8:	1180282e 	bgeu	r2,r6,400b97c <memchr+0xac>
 400b8dc:	2086703a 	and	r3,r4,r2
 400b8e0:	1800351e 	bne	r3,zero,400b9b8 <memchr+0xe8>
 400b8e4:	2816923a 	slli	r11,r5,8
 400b8e8:	2093883a 	add	r9,r4,r2
 400b8ec:	22000084 	addi	r8,r4,2
 400b8f0:	5957883a 	add	r11,r11,r5
 400b8f4:	5816923a 	slli	r11,r11,8
 400b8f8:	20c00044 	addi	r3,r4,1
 400b8fc:	037fbff4 	movhi	r13,65279
 400b900:	6b7fbfc4 	addi	r13,r13,-257
 400b904:	5957883a 	add	r11,r11,r5
 400b908:	5816923a 	slli	r11,r11,8
 400b90c:	03202074 	movhi	r12,32897
 400b910:	63202004 	addi	r12,r12,-32640
 400b914:	101d883a 	mov	r14,r2
 400b918:	5957883a 	add	r11,r11,r5
 400b91c:	21c00017 	ldw	r7,0(r4)
 400b920:	31bfff04 	addi	r6,r6,-4
 400b924:	1805883a 	mov	r2,r3
 400b928:	3acef03a 	xor	r7,r7,r11
 400b92c:	3b55883a 	add	r10,r7,r13
 400b930:	01ce303a 	nor	r7,zero,r7
 400b934:	51ce703a 	and	r7,r10,r7
 400b938:	3b0e703a 	and	r7,r7,r12
 400b93c:	38000a26 	beq	r7,zero,400b968 <memchr+0x98>
 400b940:	21c00003 	ldbu	r7,0(r4)
 400b944:	39401e26 	beq	r7,r5,400b9c0 <memchr+0xf0>
 400b948:	19c00003 	ldbu	r7,0(r3)
 400b94c:	39401926 	beq	r7,r5,400b9b4 <memchr+0xe4>
 400b950:	41c00003 	ldbu	r7,0(r8)
 400b954:	4005883a 	mov	r2,r8
 400b958:	39401626 	beq	r7,r5,400b9b4 <memchr+0xe4>
 400b95c:	49c00003 	ldbu	r7,0(r9)
 400b960:	4805883a 	mov	r2,r9
 400b964:	39401326 	beq	r7,r5,400b9b4 <memchr+0xe4>
 400b968:	21000104 	addi	r4,r4,4
 400b96c:	4a400104 	addi	r9,r9,4
 400b970:	42000104 	addi	r8,r8,4
 400b974:	18c00104 	addi	r3,r3,4
 400b978:	71bfe836 	bltu	r14,r6,400b91c <memchr+0x4c>
 400b97c:	2005883a 	mov	r2,r4
 400b980:	30000a26 	beq	r6,zero,400b9ac <memchr+0xdc>
 400b984:	10c00003 	ldbu	r3,0(r2)
 400b988:	19400a26 	beq	r3,r5,400b9b4 <memchr+0xe4>
 400b98c:	10c00044 	addi	r3,r2,1
 400b990:	118d883a 	add	r6,r2,r6
 400b994:	00000306 	br	400b9a4 <memchr+0xd4>
 400b998:	11000003 	ldbu	r4,0(r2)
 400b99c:	18c00044 	addi	r3,r3,1
 400b9a0:	21400426 	beq	r4,r5,400b9b4 <memchr+0xe4>
 400b9a4:	1805883a 	mov	r2,r3
 400b9a8:	19bffb1e 	bne	r3,r6,400b998 <memchr+0xc8>
 400b9ac:	0005883a 	mov	r2,zero
 400b9b0:	f800283a 	ret
 400b9b4:	f800283a 	ret
 400b9b8:	2005883a 	mov	r2,r4
 400b9bc:	003ff106 	br	400b984 <memchr+0xb4>
 400b9c0:	2005883a 	mov	r2,r4
 400b9c4:	f800283a 	ret

0400b9c8 <memcpy>:
 400b9c8:	00c003c4 	movi	r3,15
 400b9cc:	2005883a 	mov	r2,r4
 400b9d0:	3009883a 	mov	r4,r6
 400b9d4:	1980032e 	bgeu	r3,r6,400b9e4 <memcpy+0x1c>
 400b9d8:	2886b03a 	or	r3,r5,r2
 400b9dc:	18c000cc 	andi	r3,r3,3
 400b9e0:	18000926 	beq	r3,zero,400ba08 <memcpy+0x40>
 400b9e4:	1007883a 	mov	r3,r2
 400b9e8:	290f883a 	add	r7,r5,r4
 400b9ec:	20000526 	beq	r4,zero,400ba04 <memcpy+0x3c>
 400b9f0:	29800003 	ldbu	r6,0(r5)
 400b9f4:	18c00044 	addi	r3,r3,1
 400b9f8:	29400044 	addi	r5,r5,1
 400b9fc:	19bfffc5 	stb	r6,-1(r3)
 400ba00:	29fffb1e 	bne	r5,r7,400b9f0 <memcpy+0x28>
 400ba04:	f800283a 	ret
 400ba08:	327ffc04 	addi	r9,r6,-16
 400ba0c:	4812d13a 	srli	r9,r9,4
 400ba10:	11000404 	addi	r4,r2,16
 400ba14:	1007883a 	mov	r3,r2
 400ba18:	4810913a 	slli	r8,r9,4
 400ba1c:	280f883a 	mov	r7,r5
 400ba20:	2209883a 	add	r4,r4,r8
 400ba24:	3a000017 	ldw	r8,0(r7)
 400ba28:	18c00404 	addi	r3,r3,16
 400ba2c:	39c00404 	addi	r7,r7,16
 400ba30:	1a3ffc15 	stw	r8,-16(r3)
 400ba34:	3a3ffd17 	ldw	r8,-12(r7)
 400ba38:	1a3ffd15 	stw	r8,-12(r3)
 400ba3c:	3a3ffe17 	ldw	r8,-8(r7)
 400ba40:	1a3ffe15 	stw	r8,-8(r3)
 400ba44:	3a3fff17 	ldw	r8,-4(r7)
 400ba48:	1a3fff15 	stw	r8,-4(r3)
 400ba4c:	193ff51e 	bne	r3,r4,400ba24 <memcpy+0x5c>
 400ba50:	49c00044 	addi	r7,r9,1
 400ba54:	380e913a 	slli	r7,r7,4
 400ba58:	310003cc 	andi	r4,r6,15
 400ba5c:	018000c4 	movi	r6,3
 400ba60:	11c7883a 	add	r3,r2,r7
 400ba64:	29cb883a 	add	r5,r5,r7
 400ba68:	313fdf2e 	bgeu	r6,r4,400b9e8 <memcpy+0x20>
 400ba6c:	213fff04 	addi	r4,r4,-4
 400ba70:	2014d0ba 	srli	r10,r4,2
 400ba74:	1a400104 	addi	r9,r3,4
 400ba78:	180d883a 	mov	r6,r3
 400ba7c:	528f883a 	add	r7,r10,r10
 400ba80:	39cf883a 	add	r7,r7,r7
 400ba84:	49d3883a 	add	r9,r9,r7
 400ba88:	280f883a 	mov	r7,r5
 400ba8c:	3a000017 	ldw	r8,0(r7)
 400ba90:	31800104 	addi	r6,r6,4
 400ba94:	39c00104 	addi	r7,r7,4
 400ba98:	323fff15 	stw	r8,-4(r6)
 400ba9c:	327ffb1e 	bne	r6,r9,400ba8c <memcpy+0xc4>
 400baa0:	51800044 	addi	r6,r10,1
 400baa4:	52bfff24 	muli	r10,r10,-4
 400baa8:	318d883a 	add	r6,r6,r6
 400baac:	318d883a 	add	r6,r6,r6
 400bab0:	5109883a 	add	r4,r10,r4
 400bab4:	298b883a 	add	r5,r5,r6
 400bab8:	1987883a 	add	r3,r3,r6
 400babc:	003fca06 	br	400b9e8 <memcpy+0x20>

0400bac0 <memmove>:
 400bac0:	2005883a 	mov	r2,r4
 400bac4:	300f883a 	mov	r7,r6
 400bac8:	29000b2e 	bgeu	r5,r4,400baf8 <memmove+0x38>
 400bacc:	2987883a 	add	r3,r5,r6
 400bad0:	20c0092e 	bgeu	r4,r3,400baf8 <memmove+0x38>
 400bad4:	218b883a 	add	r5,r4,r6
 400bad8:	198fc83a 	sub	r7,r3,r6
 400badc:	30003f26 	beq	r6,zero,400bbdc <memmove+0x11c>
 400bae0:	18ffffc4 	addi	r3,r3,-1
 400bae4:	19000003 	ldbu	r4,0(r3)
 400bae8:	297fffc4 	addi	r5,r5,-1
 400baec:	29000005 	stb	r4,0(r5)
 400baf0:	19fffb1e 	bne	r3,r7,400bae0 <memmove+0x20>
 400baf4:	f800283a 	ret
 400baf8:	00c003c4 	movi	r3,15
 400bafc:	1980382e 	bgeu	r3,r6,400bbe0 <memmove+0x120>
 400bb00:	2886b03a 	or	r3,r5,r2
 400bb04:	18c000cc 	andi	r3,r3,3
 400bb08:	1800351e 	bne	r3,zero,400bbe0 <memmove+0x120>
 400bb0c:	327ffc04 	addi	r9,r6,-16
 400bb10:	4812d13a 	srli	r9,r9,4
 400bb14:	12000404 	addi	r8,r2,16
 400bb18:	1007883a 	mov	r3,r2
 400bb1c:	4808913a 	slli	r4,r9,4
 400bb20:	280f883a 	mov	r7,r5
 400bb24:	4111883a 	add	r8,r8,r4
 400bb28:	39000017 	ldw	r4,0(r7)
 400bb2c:	18c00404 	addi	r3,r3,16
 400bb30:	39c00404 	addi	r7,r7,16
 400bb34:	193ffc15 	stw	r4,-16(r3)
 400bb38:	393ffd17 	ldw	r4,-12(r7)
 400bb3c:	193ffd15 	stw	r4,-12(r3)
 400bb40:	393ffe17 	ldw	r4,-8(r7)
 400bb44:	193ffe15 	stw	r4,-8(r3)
 400bb48:	393fff17 	ldw	r4,-4(r7)
 400bb4c:	193fff15 	stw	r4,-4(r3)
 400bb50:	1a3ff51e 	bne	r3,r8,400bb28 <memmove+0x68>
 400bb54:	49000044 	addi	r4,r9,1
 400bb58:	2008913a 	slli	r4,r4,4
 400bb5c:	31c003cc 	andi	r7,r6,15
 400bb60:	1107883a 	add	r3,r2,r4
 400bb64:	290b883a 	add	r5,r5,r4
 400bb68:	010000c4 	movi	r4,3
 400bb6c:	21c0142e 	bgeu	r4,r7,400bbc0 <memmove+0x100>
 400bb70:	39ffff04 	addi	r7,r7,-4
 400bb74:	3814d0ba 	srli	r10,r7,2
 400bb78:	1a400104 	addi	r9,r3,4
 400bb7c:	180d883a 	mov	r6,r3
 400bb80:	5289883a 	add	r4,r10,r10
 400bb84:	2109883a 	add	r4,r4,r4
 400bb88:	4913883a 	add	r9,r9,r4
 400bb8c:	2809883a 	mov	r4,r5
 400bb90:	22000017 	ldw	r8,0(r4)
 400bb94:	31800104 	addi	r6,r6,4
 400bb98:	21000104 	addi	r4,r4,4
 400bb9c:	323fff15 	stw	r8,-4(r6)
 400bba0:	327ffb1e 	bne	r6,r9,400bb90 <memmove+0xd0>
 400bba4:	51000044 	addi	r4,r10,1
 400bba8:	52bfff24 	muli	r10,r10,-4
 400bbac:	2109883a 	add	r4,r4,r4
 400bbb0:	2109883a 	add	r4,r4,r4
 400bbb4:	51cf883a 	add	r7,r10,r7
 400bbb8:	290b883a 	add	r5,r5,r4
 400bbbc:	1907883a 	add	r3,r3,r4
 400bbc0:	38000626 	beq	r7,zero,400bbdc <memmove+0x11c>
 400bbc4:	19cf883a 	add	r7,r3,r7
 400bbc8:	29800003 	ldbu	r6,0(r5)
 400bbcc:	18c00044 	addi	r3,r3,1
 400bbd0:	29400044 	addi	r5,r5,1
 400bbd4:	19bfffc5 	stb	r6,-1(r3)
 400bbd8:	19fffb1e 	bne	r3,r7,400bbc8 <memmove+0x108>
 400bbdc:	f800283a 	ret
 400bbe0:	1007883a 	mov	r3,r2
 400bbe4:	003ff606 	br	400bbc0 <memmove+0x100>

0400bbe8 <memset>:
 400bbe8:	00c000c4 	movi	r3,3
 400bbec:	2005883a 	mov	r2,r4
 400bbf0:	29403fcc 	andi	r5,r5,255
 400bbf4:	19802d2e 	bgeu	r3,r6,400bcac <memset+0xc4>
 400bbf8:	20c6703a 	and	r3,r4,r3
 400bbfc:	18002e1e 	bne	r3,zero,400bcb8 <memset+0xd0>
 400bc00:	2806923a 	slli	r3,r5,8
 400bc04:	010003c4 	movi	r4,15
 400bc08:	3011883a 	mov	r8,r6
 400bc0c:	1946b03a 	or	r3,r3,r5
 400bc10:	180e943a 	slli	r7,r3,16
 400bc14:	38ceb03a 	or	r7,r7,r3
 400bc18:	1007883a 	mov	r3,r2
 400bc1c:	21800f2e 	bgeu	r4,r6,400bc5c <memset+0x74>
 400bc20:	19c00015 	stw	r7,0(r3)
 400bc24:	19c00115 	stw	r7,4(r3)
 400bc28:	19c00215 	stw	r7,8(r3)
 400bc2c:	19c00315 	stw	r7,12(r3)
 400bc30:	423ffc04 	addi	r8,r8,-16
 400bc34:	18c00404 	addi	r3,r3,16
 400bc38:	223ff936 	bltu	r4,r8,400bc20 <memset+0x38>
 400bc3c:	30fffc04 	addi	r3,r6,-16
 400bc40:	1806d13a 	srli	r3,r3,4
 400bc44:	318003cc 	andi	r6,r6,15
 400bc48:	010000c4 	movi	r4,3
 400bc4c:	18c00044 	addi	r3,r3,1
 400bc50:	1806913a 	slli	r3,r3,4
 400bc54:	10c7883a 	add	r3,r2,r3
 400bc58:	21800e2e 	bgeu	r4,r6,400bc94 <memset+0xac>
 400bc5c:	1813883a 	mov	r9,r3
 400bc60:	3011883a 	mov	r8,r6
 400bc64:	010000c4 	movi	r4,3
 400bc68:	49c00015 	stw	r7,0(r9)
 400bc6c:	423fff04 	addi	r8,r8,-4
 400bc70:	4a400104 	addi	r9,r9,4
 400bc74:	223ffc36 	bltu	r4,r8,400bc68 <memset+0x80>
 400bc78:	313fff04 	addi	r4,r6,-4
 400bc7c:	2008d0ba 	srli	r4,r4,2
 400bc80:	318000cc 	andi	r6,r6,3
 400bc84:	21000044 	addi	r4,r4,1
 400bc88:	2109883a 	add	r4,r4,r4
 400bc8c:	2109883a 	add	r4,r4,r4
 400bc90:	1907883a 	add	r3,r3,r4
 400bc94:	30000a26 	beq	r6,zero,400bcc0 <memset+0xd8>
 400bc98:	198d883a 	add	r6,r3,r6
 400bc9c:	19400005 	stb	r5,0(r3)
 400bca0:	18c00044 	addi	r3,r3,1
 400bca4:	19bffd1e 	bne	r3,r6,400bc9c <memset+0xb4>
 400bca8:	f800283a 	ret
 400bcac:	2007883a 	mov	r3,r4
 400bcb0:	303ff91e 	bne	r6,zero,400bc98 <memset+0xb0>
 400bcb4:	00000206 	br	400bcc0 <memset+0xd8>
 400bcb8:	2007883a 	mov	r3,r4
 400bcbc:	003ff606 	br	400bc98 <memset+0xb0>
 400bcc0:	f800283a 	ret

0400bcc4 <_Balloc>:
 400bcc4:	20801317 	ldw	r2,76(r4)
 400bcc8:	defffc04 	addi	sp,sp,-16
 400bccc:	dc400115 	stw	r17,4(sp)
 400bcd0:	dc000015 	stw	r16,0(sp)
 400bcd4:	dfc00315 	stw	ra,12(sp)
 400bcd8:	dc800215 	stw	r18,8(sp)
 400bcdc:	2023883a 	mov	r17,r4
 400bce0:	2821883a 	mov	r16,r5
 400bce4:	10000f26 	beq	r2,zero,400bd24 <_Balloc+0x60>
 400bce8:	8407883a 	add	r3,r16,r16
 400bcec:	18c7883a 	add	r3,r3,r3
 400bcf0:	10c7883a 	add	r3,r2,r3
 400bcf4:	18800017 	ldw	r2,0(r3)
 400bcf8:	10001126 	beq	r2,zero,400bd40 <_Balloc+0x7c>
 400bcfc:	11000017 	ldw	r4,0(r2)
 400bd00:	19000015 	stw	r4,0(r3)
 400bd04:	10000415 	stw	zero,16(r2)
 400bd08:	10000315 	stw	zero,12(r2)
 400bd0c:	dfc00317 	ldw	ra,12(sp)
 400bd10:	dc800217 	ldw	r18,8(sp)
 400bd14:	dc400117 	ldw	r17,4(sp)
 400bd18:	dc000017 	ldw	r16,0(sp)
 400bd1c:	dec00404 	addi	sp,sp,16
 400bd20:	f800283a 	ret
 400bd24:	01400104 	movi	r5,4
 400bd28:	01800404 	movi	r6,16
 400bd2c:	400d5800 	call	400d580 <_calloc_r>
 400bd30:	88801315 	stw	r2,76(r17)
 400bd34:	103fec1e 	bne	r2,zero,400bce8 <_Balloc+0x24>
 400bd38:	0005883a 	mov	r2,zero
 400bd3c:	003ff306 	br	400bd0c <_Balloc+0x48>
 400bd40:	01400044 	movi	r5,1
 400bd44:	2c24983a 	sll	r18,r5,r16
 400bd48:	8809883a 	mov	r4,r17
 400bd4c:	91800144 	addi	r6,r18,5
 400bd50:	318d883a 	add	r6,r6,r6
 400bd54:	318d883a 	add	r6,r6,r6
 400bd58:	400d5800 	call	400d580 <_calloc_r>
 400bd5c:	103ff626 	beq	r2,zero,400bd38 <_Balloc+0x74>
 400bd60:	14000115 	stw	r16,4(r2)
 400bd64:	14800215 	stw	r18,8(r2)
 400bd68:	003fe606 	br	400bd04 <_Balloc+0x40>

0400bd6c <_Bfree>:
 400bd6c:	28000826 	beq	r5,zero,400bd90 <_Bfree+0x24>
 400bd70:	28c00117 	ldw	r3,4(r5)
 400bd74:	20801317 	ldw	r2,76(r4)
 400bd78:	18c7883a 	add	r3,r3,r3
 400bd7c:	18c7883a 	add	r3,r3,r3
 400bd80:	10c5883a 	add	r2,r2,r3
 400bd84:	10c00017 	ldw	r3,0(r2)
 400bd88:	28c00015 	stw	r3,0(r5)
 400bd8c:	11400015 	stw	r5,0(r2)
 400bd90:	f800283a 	ret

0400bd94 <__multadd>:
 400bd94:	defffa04 	addi	sp,sp,-24
 400bd98:	dc000115 	stw	r16,4(sp)
 400bd9c:	2c000417 	ldw	r16,16(r5)
 400bda0:	dc800315 	stw	r18,12(sp)
 400bda4:	dc400215 	stw	r17,8(sp)
 400bda8:	dfc00515 	stw	ra,20(sp)
 400bdac:	dcc00415 	stw	r19,16(sp)
 400bdb0:	2823883a 	mov	r17,r5
 400bdb4:	2025883a 	mov	r18,r4
 400bdb8:	28c00504 	addi	r3,r5,20
 400bdbc:	0011883a 	mov	r8,zero
 400bdc0:	1a800017 	ldw	r10,0(r3)
 400bdc4:	18c00104 	addi	r3,r3,4
 400bdc8:	42000044 	addi	r8,r8,1
 400bdcc:	527fffcc 	andi	r9,r10,65535
 400bdd0:	4993383a 	mul	r9,r9,r6
 400bdd4:	5014d43a 	srli	r10,r10,16
 400bdd8:	49d3883a 	add	r9,r9,r7
 400bddc:	480ed43a 	srli	r7,r9,16
 400bde0:	5195383a 	mul	r10,r10,r6
 400bde4:	4a7fffcc 	andi	r9,r9,65535
 400bde8:	3a8f883a 	add	r7,r7,r10
 400bdec:	3814943a 	slli	r10,r7,16
 400bdf0:	380ed43a 	srli	r7,r7,16
 400bdf4:	5253883a 	add	r9,r10,r9
 400bdf8:	1a7fff15 	stw	r9,-4(r3)
 400bdfc:	443ff016 	blt	r8,r16,400bdc0 <__multadd+0x2c>
 400be00:	38000926 	beq	r7,zero,400be28 <__multadd+0x94>
 400be04:	88800217 	ldw	r2,8(r17)
 400be08:	80800f0e 	bge	r16,r2,400be48 <__multadd+0xb4>
 400be0c:	80800144 	addi	r2,r16,5
 400be10:	1085883a 	add	r2,r2,r2
 400be14:	1085883a 	add	r2,r2,r2
 400be18:	8885883a 	add	r2,r17,r2
 400be1c:	84000044 	addi	r16,r16,1
 400be20:	11c00015 	stw	r7,0(r2)
 400be24:	8c000415 	stw	r16,16(r17)
 400be28:	8805883a 	mov	r2,r17
 400be2c:	dfc00517 	ldw	ra,20(sp)
 400be30:	dcc00417 	ldw	r19,16(sp)
 400be34:	dc800317 	ldw	r18,12(sp)
 400be38:	dc400217 	ldw	r17,8(sp)
 400be3c:	dc000117 	ldw	r16,4(sp)
 400be40:	dec00604 	addi	sp,sp,24
 400be44:	f800283a 	ret
 400be48:	89400117 	ldw	r5,4(r17)
 400be4c:	9009883a 	mov	r4,r18
 400be50:	d9c00015 	stw	r7,0(sp)
 400be54:	29400044 	addi	r5,r5,1
 400be58:	400bcc40 	call	400bcc4 <_Balloc>
 400be5c:	89800417 	ldw	r6,16(r17)
 400be60:	89400304 	addi	r5,r17,12
 400be64:	11000304 	addi	r4,r2,12
 400be68:	31800084 	addi	r6,r6,2
 400be6c:	318d883a 	add	r6,r6,r6
 400be70:	318d883a 	add	r6,r6,r6
 400be74:	1027883a 	mov	r19,r2
 400be78:	400b9c80 	call	400b9c8 <memcpy>
 400be7c:	88c00117 	ldw	r3,4(r17)
 400be80:	90801317 	ldw	r2,76(r18)
 400be84:	d9c00017 	ldw	r7,0(sp)
 400be88:	18c7883a 	add	r3,r3,r3
 400be8c:	18c7883a 	add	r3,r3,r3
 400be90:	10c5883a 	add	r2,r2,r3
 400be94:	10c00017 	ldw	r3,0(r2)
 400be98:	88c00015 	stw	r3,0(r17)
 400be9c:	14400015 	stw	r17,0(r2)
 400bea0:	9823883a 	mov	r17,r19
 400bea4:	003fd906 	br	400be0c <__multadd+0x78>

0400bea8 <__s2b>:
 400bea8:	defff904 	addi	sp,sp,-28
 400beac:	dd000415 	stw	r20,16(sp)
 400beb0:	dc400115 	stw	r17,4(sp)
 400beb4:	2829883a 	mov	r20,r5
 400beb8:	2023883a 	mov	r17,r4
 400bebc:	01400244 	movi	r5,9
 400bec0:	39000204 	addi	r4,r7,8
 400bec4:	dcc00315 	stw	r19,12(sp)
 400bec8:	dc800215 	stw	r18,8(sp)
 400becc:	dfc00615 	stw	ra,24(sp)
 400bed0:	dd400515 	stw	r21,20(sp)
 400bed4:	dc000015 	stw	r16,0(sp)
 400bed8:	3825883a 	mov	r18,r7
 400bedc:	3027883a 	mov	r19,r6
 400bee0:	400e9a40 	call	400e9a4 <__divsi3>
 400bee4:	00c00044 	movi	r3,1
 400bee8:	000b883a 	mov	r5,zero
 400beec:	1880030e 	bge	r3,r2,400befc <__s2b+0x54>
 400bef0:	18c7883a 	add	r3,r3,r3
 400bef4:	29400044 	addi	r5,r5,1
 400bef8:	18bffd16 	blt	r3,r2,400bef0 <__s2b+0x48>
 400befc:	8809883a 	mov	r4,r17
 400bf00:	400bcc40 	call	400bcc4 <_Balloc>
 400bf04:	d8c00717 	ldw	r3,28(sp)
 400bf08:	10c00515 	stw	r3,20(r2)
 400bf0c:	00c00044 	movi	r3,1
 400bf10:	10c00415 	stw	r3,16(r2)
 400bf14:	00c00244 	movi	r3,9
 400bf18:	1cc0210e 	bge	r3,r19,400bfa0 <__s2b+0xf8>
 400bf1c:	a0eb883a 	add	r21,r20,r3
 400bf20:	a821883a 	mov	r16,r21
 400bf24:	a4e9883a 	add	r20,r20,r19
 400bf28:	81c00007 	ldb	r7,0(r16)
 400bf2c:	8809883a 	mov	r4,r17
 400bf30:	84000044 	addi	r16,r16,1
 400bf34:	100b883a 	mov	r5,r2
 400bf38:	01800284 	movi	r6,10
 400bf3c:	39fff404 	addi	r7,r7,-48
 400bf40:	400bd940 	call	400bd94 <__multadd>
 400bf44:	853ff81e 	bne	r16,r20,400bf28 <__s2b+0x80>
 400bf48:	ace1883a 	add	r16,r21,r19
 400bf4c:	843ffe04 	addi	r16,r16,-8
 400bf50:	9c800a0e 	bge	r19,r18,400bf7c <__s2b+0xd4>
 400bf54:	94e5c83a 	sub	r18,r18,r19
 400bf58:	84a5883a 	add	r18,r16,r18
 400bf5c:	81c00007 	ldb	r7,0(r16)
 400bf60:	8809883a 	mov	r4,r17
 400bf64:	84000044 	addi	r16,r16,1
 400bf68:	100b883a 	mov	r5,r2
 400bf6c:	01800284 	movi	r6,10
 400bf70:	39fff404 	addi	r7,r7,-48
 400bf74:	400bd940 	call	400bd94 <__multadd>
 400bf78:	84bff81e 	bne	r16,r18,400bf5c <__s2b+0xb4>
 400bf7c:	dfc00617 	ldw	ra,24(sp)
 400bf80:	dd400517 	ldw	r21,20(sp)
 400bf84:	dd000417 	ldw	r20,16(sp)
 400bf88:	dcc00317 	ldw	r19,12(sp)
 400bf8c:	dc800217 	ldw	r18,8(sp)
 400bf90:	dc400117 	ldw	r17,4(sp)
 400bf94:	dc000017 	ldw	r16,0(sp)
 400bf98:	dec00704 	addi	sp,sp,28
 400bf9c:	f800283a 	ret
 400bfa0:	a4000284 	addi	r16,r20,10
 400bfa4:	1827883a 	mov	r19,r3
 400bfa8:	003fe906 	br	400bf50 <__s2b+0xa8>

0400bfac <__hi0bits>:
 400bfac:	20bfffec 	andhi	r2,r4,65535
 400bfb0:	1000141e 	bne	r2,zero,400c004 <__hi0bits+0x58>
 400bfb4:	2008943a 	slli	r4,r4,16
 400bfb8:	00800404 	movi	r2,16
 400bfbc:	20ffc02c 	andhi	r3,r4,65280
 400bfc0:	1800021e 	bne	r3,zero,400bfcc <__hi0bits+0x20>
 400bfc4:	2008923a 	slli	r4,r4,8
 400bfc8:	10800204 	addi	r2,r2,8
 400bfcc:	20fc002c 	andhi	r3,r4,61440
 400bfd0:	1800021e 	bne	r3,zero,400bfdc <__hi0bits+0x30>
 400bfd4:	2008913a 	slli	r4,r4,4
 400bfd8:	10800104 	addi	r2,r2,4
 400bfdc:	20f0002c 	andhi	r3,r4,49152
 400bfe0:	1800031e 	bne	r3,zero,400bff0 <__hi0bits+0x44>
 400bfe4:	2109883a 	add	r4,r4,r4
 400bfe8:	10800084 	addi	r2,r2,2
 400bfec:	2109883a 	add	r4,r4,r4
 400bff0:	20000316 	blt	r4,zero,400c000 <__hi0bits+0x54>
 400bff4:	2110002c 	andhi	r4,r4,16384
 400bff8:	2000041e 	bne	r4,zero,400c00c <__hi0bits+0x60>
 400bffc:	00800804 	movi	r2,32
 400c000:	f800283a 	ret
 400c004:	0005883a 	mov	r2,zero
 400c008:	003fec06 	br	400bfbc <__hi0bits+0x10>
 400c00c:	10800044 	addi	r2,r2,1
 400c010:	f800283a 	ret

0400c014 <__lo0bits>:
 400c014:	20c00017 	ldw	r3,0(r4)
 400c018:	188001cc 	andi	r2,r3,7
 400c01c:	10000826 	beq	r2,zero,400c040 <__lo0bits+0x2c>
 400c020:	1880004c 	andi	r2,r3,1
 400c024:	1000211e 	bne	r2,zero,400c0ac <__lo0bits+0x98>
 400c028:	1880008c 	andi	r2,r3,2
 400c02c:	1000211e 	bne	r2,zero,400c0b4 <__lo0bits+0xa0>
 400c030:	1806d0ba 	srli	r3,r3,2
 400c034:	00800084 	movi	r2,2
 400c038:	20c00015 	stw	r3,0(r4)
 400c03c:	f800283a 	ret
 400c040:	18bfffcc 	andi	r2,r3,65535
 400c044:	10001326 	beq	r2,zero,400c094 <__lo0bits+0x80>
 400c048:	0005883a 	mov	r2,zero
 400c04c:	19403fcc 	andi	r5,r3,255
 400c050:	2800021e 	bne	r5,zero,400c05c <__lo0bits+0x48>
 400c054:	1806d23a 	srli	r3,r3,8
 400c058:	10800204 	addi	r2,r2,8
 400c05c:	194003cc 	andi	r5,r3,15
 400c060:	2800021e 	bne	r5,zero,400c06c <__lo0bits+0x58>
 400c064:	1806d13a 	srli	r3,r3,4
 400c068:	10800104 	addi	r2,r2,4
 400c06c:	194000cc 	andi	r5,r3,3
 400c070:	2800021e 	bne	r5,zero,400c07c <__lo0bits+0x68>
 400c074:	1806d0ba 	srli	r3,r3,2
 400c078:	10800084 	addi	r2,r2,2
 400c07c:	1940004c 	andi	r5,r3,1
 400c080:	2800081e 	bne	r5,zero,400c0a4 <__lo0bits+0x90>
 400c084:	1806d07a 	srli	r3,r3,1
 400c088:	1800051e 	bne	r3,zero,400c0a0 <__lo0bits+0x8c>
 400c08c:	00800804 	movi	r2,32
 400c090:	f800283a 	ret
 400c094:	1806d43a 	srli	r3,r3,16
 400c098:	00800404 	movi	r2,16
 400c09c:	003feb06 	br	400c04c <__lo0bits+0x38>
 400c0a0:	10800044 	addi	r2,r2,1
 400c0a4:	20c00015 	stw	r3,0(r4)
 400c0a8:	f800283a 	ret
 400c0ac:	0005883a 	mov	r2,zero
 400c0b0:	f800283a 	ret
 400c0b4:	1806d07a 	srli	r3,r3,1
 400c0b8:	00800044 	movi	r2,1
 400c0bc:	20c00015 	stw	r3,0(r4)
 400c0c0:	f800283a 	ret

0400c0c4 <__i2b>:
 400c0c4:	defffd04 	addi	sp,sp,-12
 400c0c8:	dc000015 	stw	r16,0(sp)
 400c0cc:	04000044 	movi	r16,1
 400c0d0:	dc400115 	stw	r17,4(sp)
 400c0d4:	2823883a 	mov	r17,r5
 400c0d8:	800b883a 	mov	r5,r16
 400c0dc:	dfc00215 	stw	ra,8(sp)
 400c0e0:	400bcc40 	call	400bcc4 <_Balloc>
 400c0e4:	14400515 	stw	r17,20(r2)
 400c0e8:	14000415 	stw	r16,16(r2)
 400c0ec:	dfc00217 	ldw	ra,8(sp)
 400c0f0:	dc400117 	ldw	r17,4(sp)
 400c0f4:	dc000017 	ldw	r16,0(sp)
 400c0f8:	dec00304 	addi	sp,sp,12
 400c0fc:	f800283a 	ret

0400c100 <__multiply>:
 400c100:	defffa04 	addi	sp,sp,-24
 400c104:	dcc00315 	stw	r19,12(sp)
 400c108:	dc400115 	stw	r17,4(sp)
 400c10c:	34c00417 	ldw	r19,16(r6)
 400c110:	2c400417 	ldw	r17,16(r5)
 400c114:	dd000415 	stw	r20,16(sp)
 400c118:	dc800215 	stw	r18,8(sp)
 400c11c:	dfc00515 	stw	ra,20(sp)
 400c120:	dc000015 	stw	r16,0(sp)
 400c124:	2825883a 	mov	r18,r5
 400c128:	3029883a 	mov	r20,r6
 400c12c:	8cc0050e 	bge	r17,r19,400c144 <__multiply+0x44>
 400c130:	8807883a 	mov	r3,r17
 400c134:	3025883a 	mov	r18,r6
 400c138:	9823883a 	mov	r17,r19
 400c13c:	2829883a 	mov	r20,r5
 400c140:	1827883a 	mov	r19,r3
 400c144:	90800217 	ldw	r2,8(r18)
 400c148:	8ce1883a 	add	r16,r17,r19
 400c14c:	91400117 	ldw	r5,4(r18)
 400c150:	1400010e 	bge	r2,r16,400c158 <__multiply+0x58>
 400c154:	29400044 	addi	r5,r5,1
 400c158:	400bcc40 	call	400bcc4 <_Balloc>
 400c15c:	83c00144 	addi	r15,r16,5
 400c160:	7bdf883a 	add	r15,r15,r15
 400c164:	7bdf883a 	add	r15,r15,r15
 400c168:	13800504 	addi	r14,r2,20
 400c16c:	13df883a 	add	r15,r2,r15
 400c170:	7007883a 	mov	r3,r14
 400c174:	73c0032e 	bgeu	r14,r15,400c184 <__multiply+0x84>
 400c178:	18000015 	stw	zero,0(r3)
 400c17c:	18c00104 	addi	r3,r3,4
 400c180:	1bfffd36 	bltu	r3,r15,400c178 <__multiply+0x78>
 400c184:	99800144 	addi	r6,r19,5
 400c188:	8b000144 	addi	r12,r17,5
 400c18c:	318d883a 	add	r6,r6,r6
 400c190:	6319883a 	add	r12,r12,r12
 400c194:	318d883a 	add	r6,r6,r6
 400c198:	6319883a 	add	r12,r12,r12
 400c19c:	a3400504 	addi	r13,r20,20
 400c1a0:	a18d883a 	add	r6,r20,r6
 400c1a4:	94400504 	addi	r17,r18,20
 400c1a8:	9319883a 	add	r12,r18,r12
 400c1ac:	6980392e 	bgeu	r13,r6,400c294 <__multiply+0x194>
 400c1b0:	6a800017 	ldw	r10,0(r13)
 400c1b4:	52ffffcc 	andi	r11,r10,65535
 400c1b8:	58001826 	beq	r11,zero,400c21c <__multiply+0x11c>
 400c1bc:	7007883a 	mov	r3,r14
 400c1c0:	8809883a 	mov	r4,r17
 400c1c4:	000b883a 	mov	r5,zero
 400c1c8:	22400017 	ldw	r9,0(r4)
 400c1cc:	1a000017 	ldw	r8,0(r3)
 400c1d0:	21000104 	addi	r4,r4,4
 400c1d4:	49ffffcc 	andi	r7,r9,65535
 400c1d8:	3acf383a 	mul	r7,r7,r11
 400c1dc:	4812d43a 	srli	r9,r9,16
 400c1e0:	42bfffcc 	andi	r10,r8,65535
 400c1e4:	3a8f883a 	add	r7,r7,r10
 400c1e8:	394f883a 	add	r7,r7,r5
 400c1ec:	4010d43a 	srli	r8,r8,16
 400c1f0:	4acb383a 	mul	r5,r9,r11
 400c1f4:	3814d43a 	srli	r10,r7,16
 400c1f8:	19c0000d 	sth	r7,0(r3)
 400c1fc:	2a0b883a 	add	r5,r5,r8
 400c200:	2a8b883a 	add	r5,r5,r10
 400c204:	1940008d 	sth	r5,2(r3)
 400c208:	280ad43a 	srli	r5,r5,16
 400c20c:	18c00104 	addi	r3,r3,4
 400c210:	233fed36 	bltu	r4,r12,400c1c8 <__multiply+0xc8>
 400c214:	19400015 	stw	r5,0(r3)
 400c218:	6a800017 	ldw	r10,0(r13)
 400c21c:	5014d43a 	srli	r10,r10,16
 400c220:	50001926 	beq	r10,zero,400c288 <__multiply+0x188>
 400c224:	71400017 	ldw	r5,0(r14)
 400c228:	7007883a 	mov	r3,r14
 400c22c:	8809883a 	mov	r4,r17
 400c230:	280f883a 	mov	r7,r5
 400c234:	0017883a 	mov	r11,zero
 400c238:	22400017 	ldw	r9,0(r4)
 400c23c:	380ed43a 	srli	r7,r7,16
 400c240:	1940000d 	sth	r5,0(r3)
 400c244:	4a3fffcc 	andi	r8,r9,65535
 400c248:	4291383a 	mul	r8,r8,r10
 400c24c:	4812d43a 	srli	r9,r9,16
 400c250:	18c00104 	addi	r3,r3,4
 400c254:	41d1883a 	add	r8,r8,r7
 400c258:	19c00017 	ldw	r7,0(r3)
 400c25c:	42d1883a 	add	r8,r8,r11
 400c260:	4a93383a 	mul	r9,r9,r10
 400c264:	1a3fff8d 	sth	r8,-2(r3)
 400c268:	4010d43a 	srli	r8,r8,16
 400c26c:	397fffcc 	andi	r5,r7,65535
 400c270:	2a4b883a 	add	r5,r5,r9
 400c274:	2a0b883a 	add	r5,r5,r8
 400c278:	21000104 	addi	r4,r4,4
 400c27c:	2816d43a 	srli	r11,r5,16
 400c280:	233fed36 	bltu	r4,r12,400c238 <__multiply+0x138>
 400c284:	19400015 	stw	r5,0(r3)
 400c288:	6b400104 	addi	r13,r13,4
 400c28c:	73800104 	addi	r14,r14,4
 400c290:	69bfc736 	bltu	r13,r6,400c1b0 <__multiply+0xb0>
 400c294:	0400090e 	bge	zero,r16,400c2bc <__multiply+0x1bc>
 400c298:	78ffff17 	ldw	r3,-4(r15)
 400c29c:	7bffff04 	addi	r15,r15,-4
 400c2a0:	18000326 	beq	r3,zero,400c2b0 <__multiply+0x1b0>
 400c2a4:	00000506 	br	400c2bc <__multiply+0x1bc>
 400c2a8:	78c00017 	ldw	r3,0(r15)
 400c2ac:	1800031e 	bne	r3,zero,400c2bc <__multiply+0x1bc>
 400c2b0:	843fffc4 	addi	r16,r16,-1
 400c2b4:	7bffff04 	addi	r15,r15,-4
 400c2b8:	803ffb1e 	bne	r16,zero,400c2a8 <__multiply+0x1a8>
 400c2bc:	14000415 	stw	r16,16(r2)
 400c2c0:	dfc00517 	ldw	ra,20(sp)
 400c2c4:	dd000417 	ldw	r20,16(sp)
 400c2c8:	dcc00317 	ldw	r19,12(sp)
 400c2cc:	dc800217 	ldw	r18,8(sp)
 400c2d0:	dc400117 	ldw	r17,4(sp)
 400c2d4:	dc000017 	ldw	r16,0(sp)
 400c2d8:	dec00604 	addi	sp,sp,24
 400c2dc:	f800283a 	ret

0400c2e0 <__pow5mult>:
 400c2e0:	defffb04 	addi	sp,sp,-20
 400c2e4:	dcc00315 	stw	r19,12(sp)
 400c2e8:	dc800215 	stw	r18,8(sp)
 400c2ec:	dc000015 	stw	r16,0(sp)
 400c2f0:	dfc00415 	stw	ra,16(sp)
 400c2f4:	dc400115 	stw	r17,4(sp)
 400c2f8:	308000cc 	andi	r2,r6,3
 400c2fc:	3021883a 	mov	r16,r6
 400c300:	2027883a 	mov	r19,r4
 400c304:	2825883a 	mov	r18,r5
 400c308:	10002e1e 	bne	r2,zero,400c3c4 <__pow5mult+0xe4>
 400c30c:	8021d0ba 	srai	r16,r16,2
 400c310:	80001a26 	beq	r16,zero,400c37c <__pow5mult+0x9c>
 400c314:	9c401217 	ldw	r17,72(r19)
 400c318:	8800061e 	bne	r17,zero,400c334 <__pow5mult+0x54>
 400c31c:	00003406 	br	400c3f0 <__pow5mult+0x110>
 400c320:	8021d07a 	srai	r16,r16,1
 400c324:	80001526 	beq	r16,zero,400c37c <__pow5mult+0x9c>
 400c328:	88c00017 	ldw	r3,0(r17)
 400c32c:	18001b26 	beq	r3,zero,400c39c <__pow5mult+0xbc>
 400c330:	1823883a 	mov	r17,r3
 400c334:	80c0004c 	andi	r3,r16,1
 400c338:	183ff926 	beq	r3,zero,400c320 <__pow5mult+0x40>
 400c33c:	900b883a 	mov	r5,r18
 400c340:	880d883a 	mov	r6,r17
 400c344:	9809883a 	mov	r4,r19
 400c348:	400c1000 	call	400c100 <__multiply>
 400c34c:	90001b26 	beq	r18,zero,400c3bc <__pow5mult+0xdc>
 400c350:	91000117 	ldw	r4,4(r18)
 400c354:	98c01317 	ldw	r3,76(r19)
 400c358:	8021d07a 	srai	r16,r16,1
 400c35c:	2109883a 	add	r4,r4,r4
 400c360:	2109883a 	add	r4,r4,r4
 400c364:	1907883a 	add	r3,r3,r4
 400c368:	19000017 	ldw	r4,0(r3)
 400c36c:	91000015 	stw	r4,0(r18)
 400c370:	1c800015 	stw	r18,0(r3)
 400c374:	1025883a 	mov	r18,r2
 400c378:	803feb1e 	bne	r16,zero,400c328 <__pow5mult+0x48>
 400c37c:	9005883a 	mov	r2,r18
 400c380:	dfc00417 	ldw	ra,16(sp)
 400c384:	dcc00317 	ldw	r19,12(sp)
 400c388:	dc800217 	ldw	r18,8(sp)
 400c38c:	dc400117 	ldw	r17,4(sp)
 400c390:	dc000017 	ldw	r16,0(sp)
 400c394:	dec00504 	addi	sp,sp,20
 400c398:	f800283a 	ret
 400c39c:	880b883a 	mov	r5,r17
 400c3a0:	880d883a 	mov	r6,r17
 400c3a4:	9809883a 	mov	r4,r19
 400c3a8:	400c1000 	call	400c100 <__multiply>
 400c3ac:	88800015 	stw	r2,0(r17)
 400c3b0:	10000015 	stw	zero,0(r2)
 400c3b4:	1023883a 	mov	r17,r2
 400c3b8:	003fde06 	br	400c334 <__pow5mult+0x54>
 400c3bc:	1025883a 	mov	r18,r2
 400c3c0:	003fd706 	br	400c320 <__pow5mult+0x40>
 400c3c4:	10bfffc4 	addi	r2,r2,-1
 400c3c8:	1085883a 	add	r2,r2,r2
 400c3cc:	00c10374 	movhi	r3,1037
 400c3d0:	18c97104 	addi	r3,r3,9668
 400c3d4:	1085883a 	add	r2,r2,r2
 400c3d8:	1885883a 	add	r2,r3,r2
 400c3dc:	11800017 	ldw	r6,0(r2)
 400c3e0:	000f883a 	mov	r7,zero
 400c3e4:	400bd940 	call	400bd94 <__multadd>
 400c3e8:	1025883a 	mov	r18,r2
 400c3ec:	003fc706 	br	400c30c <__pow5mult+0x2c>
 400c3f0:	9809883a 	mov	r4,r19
 400c3f4:	01409c44 	movi	r5,625
 400c3f8:	400c0c40 	call	400c0c4 <__i2b>
 400c3fc:	98801215 	stw	r2,72(r19)
 400c400:	1023883a 	mov	r17,r2
 400c404:	10000015 	stw	zero,0(r2)
 400c408:	003fca06 	br	400c334 <__pow5mult+0x54>

0400c40c <__lshift>:
 400c40c:	defff904 	addi	sp,sp,-28
 400c410:	dd400515 	stw	r21,20(sp)
 400c414:	dc400115 	stw	r17,4(sp)
 400c418:	2d400417 	ldw	r21,16(r5)
 400c41c:	3023d17a 	srai	r17,r6,5
 400c420:	28800217 	ldw	r2,8(r5)
 400c424:	dd000415 	stw	r20,16(sp)
 400c428:	8d6b883a 	add	r21,r17,r21
 400c42c:	dcc00315 	stw	r19,12(sp)
 400c430:	dc800215 	stw	r18,8(sp)
 400c434:	dc000015 	stw	r16,0(sp)
 400c438:	dfc00615 	stw	ra,24(sp)
 400c43c:	ac000044 	addi	r16,r21,1
 400c440:	2825883a 	mov	r18,r5
 400c444:	3029883a 	mov	r20,r6
 400c448:	2027883a 	mov	r19,r4
 400c44c:	29400117 	ldw	r5,4(r5)
 400c450:	1400030e 	bge	r2,r16,400c460 <__lshift+0x54>
 400c454:	1085883a 	add	r2,r2,r2
 400c458:	29400044 	addi	r5,r5,1
 400c45c:	143ffd16 	blt	r2,r16,400c454 <__lshift+0x48>
 400c460:	9809883a 	mov	r4,r19
 400c464:	400bcc40 	call	400bcc4 <_Balloc>
 400c468:	10c00504 	addi	r3,r2,20
 400c46c:	0440090e 	bge	zero,r17,400c494 <__lshift+0x88>
 400c470:	000f883a 	mov	r7,zero
 400c474:	18000015 	stw	zero,0(r3)
 400c478:	39c00044 	addi	r7,r7,1
 400c47c:	18c00104 	addi	r3,r3,4
 400c480:	3c7ffc1e 	bne	r7,r17,400c474 <__lshift+0x68>
 400c484:	38c00144 	addi	r3,r7,5
 400c488:	18c7883a 	add	r3,r3,r3
 400c48c:	18c7883a 	add	r3,r3,r3
 400c490:	10c7883a 	add	r3,r2,r3
 400c494:	92000417 	ldw	r8,16(r18)
 400c498:	a18007cc 	andi	r6,r20,31
 400c49c:	91c00504 	addi	r7,r18,20
 400c4a0:	42000144 	addi	r8,r8,5
 400c4a4:	4211883a 	add	r8,r8,r8
 400c4a8:	4211883a 	add	r8,r8,r8
 400c4ac:	9211883a 	add	r8,r18,r8
 400c4b0:	30002226 	beq	r6,zero,400c53c <__lshift+0x130>
 400c4b4:	02800804 	movi	r10,32
 400c4b8:	5195c83a 	sub	r10,r10,r6
 400c4bc:	000b883a 	mov	r5,zero
 400c4c0:	3a400017 	ldw	r9,0(r7)
 400c4c4:	18c00104 	addi	r3,r3,4
 400c4c8:	39c00104 	addi	r7,r7,4
 400c4cc:	4992983a 	sll	r9,r9,r6
 400c4d0:	2a4ab03a 	or	r5,r5,r9
 400c4d4:	197fff15 	stw	r5,-4(r3)
 400c4d8:	397fff17 	ldw	r5,-4(r7)
 400c4dc:	2a8ad83a 	srl	r5,r5,r10
 400c4e0:	3a3ff736 	bltu	r7,r8,400c4c0 <__lshift+0xb4>
 400c4e4:	19400015 	stw	r5,0(r3)
 400c4e8:	28000126 	beq	r5,zero,400c4f0 <__lshift+0xe4>
 400c4ec:	ac000084 	addi	r16,r21,2
 400c4f0:	91000117 	ldw	r4,4(r18)
 400c4f4:	98c01317 	ldw	r3,76(r19)
 400c4f8:	843fffc4 	addi	r16,r16,-1
 400c4fc:	2109883a 	add	r4,r4,r4
 400c500:	2109883a 	add	r4,r4,r4
 400c504:	1907883a 	add	r3,r3,r4
 400c508:	19000017 	ldw	r4,0(r3)
 400c50c:	14000415 	stw	r16,16(r2)
 400c510:	91000015 	stw	r4,0(r18)
 400c514:	1c800015 	stw	r18,0(r3)
 400c518:	dfc00617 	ldw	ra,24(sp)
 400c51c:	dd400517 	ldw	r21,20(sp)
 400c520:	dd000417 	ldw	r20,16(sp)
 400c524:	dcc00317 	ldw	r19,12(sp)
 400c528:	dc800217 	ldw	r18,8(sp)
 400c52c:	dc400117 	ldw	r17,4(sp)
 400c530:	dc000017 	ldw	r16,0(sp)
 400c534:	dec00704 	addi	sp,sp,28
 400c538:	f800283a 	ret
 400c53c:	39400017 	ldw	r5,0(r7)
 400c540:	18c00104 	addi	r3,r3,4
 400c544:	39c00104 	addi	r7,r7,4
 400c548:	197fff15 	stw	r5,-4(r3)
 400c54c:	3a3fe82e 	bgeu	r7,r8,400c4f0 <__lshift+0xe4>
 400c550:	39400017 	ldw	r5,0(r7)
 400c554:	18c00104 	addi	r3,r3,4
 400c558:	39c00104 	addi	r7,r7,4
 400c55c:	197fff15 	stw	r5,-4(r3)
 400c560:	3a3ff636 	bltu	r7,r8,400c53c <__lshift+0x130>
 400c564:	003fe206 	br	400c4f0 <__lshift+0xe4>

0400c568 <__mcmp>:
 400c568:	20800417 	ldw	r2,16(r4)
 400c56c:	28c00417 	ldw	r3,16(r5)
 400c570:	10c5c83a 	sub	r2,r2,r3
 400c574:	10000f1e 	bne	r2,zero,400c5b4 <__mcmp+0x4c>
 400c578:	18c00144 	addi	r3,r3,5
 400c57c:	18c7883a 	add	r3,r3,r3
 400c580:	18c7883a 	add	r3,r3,r3
 400c584:	21c00504 	addi	r7,r4,20
 400c588:	28cb883a 	add	r5,r5,r3
 400c58c:	20c9883a 	add	r4,r4,r3
 400c590:	213fff04 	addi	r4,r4,-4
 400c594:	297fff04 	addi	r5,r5,-4
 400c598:	21800017 	ldw	r6,0(r4)
 400c59c:	28c00017 	ldw	r3,0(r5)
 400c5a0:	30c0021e 	bne	r6,r3,400c5ac <__mcmp+0x44>
 400c5a4:	393ffa36 	bltu	r7,r4,400c590 <__mcmp+0x28>
 400c5a8:	f800283a 	ret
 400c5ac:	30c00236 	bltu	r6,r3,400c5b8 <__mcmp+0x50>
 400c5b0:	00800044 	movi	r2,1
 400c5b4:	f800283a 	ret
 400c5b8:	00bfffc4 	movi	r2,-1
 400c5bc:	f800283a 	ret

0400c5c0 <__mdiff>:
 400c5c0:	defffb04 	addi	sp,sp,-20
 400c5c4:	dc000015 	stw	r16,0(sp)
 400c5c8:	2821883a 	mov	r16,r5
 400c5cc:	dc800215 	stw	r18,8(sp)
 400c5d0:	300b883a 	mov	r5,r6
 400c5d4:	2025883a 	mov	r18,r4
 400c5d8:	8009883a 	mov	r4,r16
 400c5dc:	dc400115 	stw	r17,4(sp)
 400c5e0:	dfc00415 	stw	ra,16(sp)
 400c5e4:	dcc00315 	stw	r19,12(sp)
 400c5e8:	3023883a 	mov	r17,r6
 400c5ec:	400c5680 	call	400c568 <__mcmp>
 400c5f0:	10005026 	beq	r2,zero,400c734 <__mdiff+0x174>
 400c5f4:	10004a16 	blt	r2,zero,400c720 <__mdiff+0x160>
 400c5f8:	0027883a 	mov	r19,zero
 400c5fc:	81400117 	ldw	r5,4(r16)
 400c600:	9009883a 	mov	r4,r18
 400c604:	400bcc40 	call	400bcc4 <_Balloc>
 400c608:	82400417 	ldw	r9,16(r16)
 400c60c:	89800417 	ldw	r6,16(r17)
 400c610:	14c00315 	stw	r19,12(r2)
 400c614:	4b800144 	addi	r14,r9,5
 400c618:	31800144 	addi	r6,r6,5
 400c61c:	739d883a 	add	r14,r14,r14
 400c620:	318d883a 	add	r6,r6,r6
 400c624:	739d883a 	add	r14,r14,r14
 400c628:	318d883a 	add	r6,r6,r6
 400c62c:	81c00504 	addi	r7,r16,20
 400c630:	839d883a 	add	r14,r16,r14
 400c634:	8a000504 	addi	r8,r17,20
 400c638:	898d883a 	add	r6,r17,r6
 400c63c:	10c00504 	addi	r3,r2,20
 400c640:	0009883a 	mov	r4,zero
 400c644:	3b000017 	ldw	r12,0(r7)
 400c648:	42c00017 	ldw	r11,0(r8)
 400c64c:	42000104 	addi	r8,r8,4
 400c650:	62bfffcc 	andi	r10,r12,65535
 400c654:	5b7fffcc 	andi	r13,r11,65535
 400c658:	5109883a 	add	r4,r10,r4
 400c65c:	2355c83a 	sub	r10,r4,r13
 400c660:	5816d43a 	srli	r11,r11,16
 400c664:	6008d43a 	srli	r4,r12,16
 400c668:	501bd43a 	srai	r13,r10,16
 400c66c:	1a80000d 	sth	r10,0(r3)
 400c670:	22c9c83a 	sub	r4,r4,r11
 400c674:	2349883a 	add	r4,r4,r13
 400c678:	1900008d 	sth	r4,2(r3)
 400c67c:	39c00104 	addi	r7,r7,4
 400c680:	2009d43a 	srai	r4,r4,16
 400c684:	18c00104 	addi	r3,r3,4
 400c688:	41bfee36 	bltu	r8,r6,400c644 <__mdiff+0x84>
 400c68c:	180b883a 	mov	r5,r3
 400c690:	3815883a 	mov	r10,r7
 400c694:	3b80132e 	bgeu	r7,r14,400c6e4 <__mdiff+0x124>
 400c698:	3a000017 	ldw	r8,0(r7)
 400c69c:	18c00104 	addi	r3,r3,4
 400c6a0:	39c00104 	addi	r7,r7,4
 400c6a4:	41bfffcc 	andi	r6,r8,65535
 400c6a8:	310d883a 	add	r6,r6,r4
 400c6ac:	3009d43a 	srai	r4,r6,16
 400c6b0:	4010d43a 	srli	r8,r8,16
 400c6b4:	19bfff0d 	sth	r6,-4(r3)
 400c6b8:	2209883a 	add	r4,r4,r8
 400c6bc:	193fff8d 	sth	r4,-2(r3)
 400c6c0:	2009d43a 	srai	r4,r4,16
 400c6c4:	3bbff436 	bltu	r7,r14,400c698 <__mdiff+0xd8>
 400c6c8:	0286303a 	nor	r3,zero,r10
 400c6cc:	1b87883a 	add	r3,r3,r14
 400c6d0:	1806d0ba 	srli	r3,r3,2
 400c6d4:	18c00044 	addi	r3,r3,1
 400c6d8:	18c7883a 	add	r3,r3,r3
 400c6dc:	18c7883a 	add	r3,r3,r3
 400c6e0:	28c7883a 	add	r3,r5,r3
 400c6e4:	193fff17 	ldw	r4,-4(r3)
 400c6e8:	18ffff04 	addi	r3,r3,-4
 400c6ec:	2000041e 	bne	r4,zero,400c700 <__mdiff+0x140>
 400c6f0:	18ffff04 	addi	r3,r3,-4
 400c6f4:	19000017 	ldw	r4,0(r3)
 400c6f8:	4a7fffc4 	addi	r9,r9,-1
 400c6fc:	203ffc26 	beq	r4,zero,400c6f0 <__mdiff+0x130>
 400c700:	12400415 	stw	r9,16(r2)
 400c704:	dfc00417 	ldw	ra,16(sp)
 400c708:	dcc00317 	ldw	r19,12(sp)
 400c70c:	dc800217 	ldw	r18,8(sp)
 400c710:	dc400117 	ldw	r17,4(sp)
 400c714:	dc000017 	ldw	r16,0(sp)
 400c718:	dec00504 	addi	sp,sp,20
 400c71c:	f800283a 	ret
 400c720:	8005883a 	mov	r2,r16
 400c724:	04c00044 	movi	r19,1
 400c728:	8821883a 	mov	r16,r17
 400c72c:	1023883a 	mov	r17,r2
 400c730:	003fb206 	br	400c5fc <__mdiff+0x3c>
 400c734:	9009883a 	mov	r4,r18
 400c738:	000b883a 	mov	r5,zero
 400c73c:	400bcc40 	call	400bcc4 <_Balloc>
 400c740:	00c00044 	movi	r3,1
 400c744:	10c00415 	stw	r3,16(r2)
 400c748:	10000515 	stw	zero,20(r2)
 400c74c:	dfc00417 	ldw	ra,16(sp)
 400c750:	dcc00317 	ldw	r19,12(sp)
 400c754:	dc800217 	ldw	r18,8(sp)
 400c758:	dc400117 	ldw	r17,4(sp)
 400c75c:	dc000017 	ldw	r16,0(sp)
 400c760:	dec00504 	addi	sp,sp,20
 400c764:	f800283a 	ret

0400c768 <__ulp>:
 400c768:	295ffc2c 	andhi	r5,r5,32752
 400c76c:	00bf3034 	movhi	r2,64704
 400c770:	2887883a 	add	r3,r5,r2
 400c774:	00c0020e 	bge	zero,r3,400c780 <__ulp+0x18>
 400c778:	0005883a 	mov	r2,zero
 400c77c:	f800283a 	ret
 400c780:	00c7c83a 	sub	r3,zero,r3
 400c784:	1805d53a 	srai	r2,r3,20
 400c788:	00c004c4 	movi	r3,19
 400c78c:	18800a0e 	bge	r3,r2,400c7b8 <__ulp+0x50>
 400c790:	01000c84 	movi	r4,50
 400c794:	0007883a 	mov	r3,zero
 400c798:	20800516 	blt	r4,r2,400c7b0 <__ulp+0x48>
 400c79c:	01000cc4 	movi	r4,51
 400c7a0:	2085c83a 	sub	r2,r4,r2
 400c7a4:	01000044 	movi	r4,1
 400c7a8:	2084983a 	sll	r2,r4,r2
 400c7ac:	f800283a 	ret
 400c7b0:	00800044 	movi	r2,1
 400c7b4:	f800283a 	ret
 400c7b8:	00c00234 	movhi	r3,8
 400c7bc:	1887d83a 	sra	r3,r3,r2
 400c7c0:	0005883a 	mov	r2,zero
 400c7c4:	f800283a 	ret

0400c7c8 <__b2d>:
 400c7c8:	defffa04 	addi	sp,sp,-24
 400c7cc:	dc000015 	stw	r16,0(sp)
 400c7d0:	24000417 	ldw	r16,16(r4)
 400c7d4:	dc400115 	stw	r17,4(sp)
 400c7d8:	dcc00315 	stw	r19,12(sp)
 400c7dc:	84000144 	addi	r16,r16,5
 400c7e0:	8421883a 	add	r16,r16,r16
 400c7e4:	8421883a 	add	r16,r16,r16
 400c7e8:	2421883a 	add	r16,r4,r16
 400c7ec:	847fff17 	ldw	r17,-4(r16)
 400c7f0:	24c00504 	addi	r19,r4,20
 400c7f4:	dd000415 	stw	r20,16(sp)
 400c7f8:	8809883a 	mov	r4,r17
 400c7fc:	dc800215 	stw	r18,8(sp)
 400c800:	2829883a 	mov	r20,r5
 400c804:	dfc00515 	stw	ra,20(sp)
 400c808:	400bfac0 	call	400bfac <__hi0bits>
 400c80c:	00c00804 	movi	r3,32
 400c810:	1887c83a 	sub	r3,r3,r2
 400c814:	a0c00015 	stw	r3,0(r20)
 400c818:	00c00284 	movi	r3,10
 400c81c:	84bfff04 	addi	r18,r16,-4
 400c820:	18801216 	blt	r3,r2,400c86c <__b2d+0xa4>
 400c824:	010002c4 	movi	r4,11
 400c828:	2089c83a 	sub	r4,r4,r2
 400c82c:	8906d83a 	srl	r3,r17,r4
 400c830:	18cffc34 	orhi	r3,r3,16368
 400c834:	9c80322e 	bgeu	r19,r18,400c900 <__b2d+0x138>
 400c838:	817ffe17 	ldw	r5,-8(r16)
 400c83c:	2908d83a 	srl	r4,r5,r4
 400c840:	10800544 	addi	r2,r2,21
 400c844:	88a2983a 	sll	r17,r17,r2
 400c848:	2444b03a 	or	r2,r4,r17
 400c84c:	dfc00517 	ldw	ra,20(sp)
 400c850:	dd000417 	ldw	r20,16(sp)
 400c854:	dcc00317 	ldw	r19,12(sp)
 400c858:	dc800217 	ldw	r18,8(sp)
 400c85c:	dc400117 	ldw	r17,4(sp)
 400c860:	dc000017 	ldw	r16,0(sp)
 400c864:	dec00604 	addi	sp,sp,24
 400c868:	f800283a 	ret
 400c86c:	9c801636 	bltu	r19,r18,400c8c8 <__b2d+0x100>
 400c870:	113ffd44 	addi	r4,r2,-11
 400c874:	000b883a 	mov	r5,zero
 400c878:	20001726 	beq	r4,zero,400c8d8 <__b2d+0x110>
 400c87c:	00c00ac4 	movi	r3,43
 400c880:	1885c83a 	sub	r2,r3,r2
 400c884:	8906983a 	sll	r3,r17,r4
 400c888:	288cd83a 	srl	r6,r5,r2
 400c88c:	18cffc34 	orhi	r3,r3,16368
 400c890:	1986b03a 	or	r3,r3,r6
 400c894:	9c801c2e 	bgeu	r19,r18,400c908 <__b2d+0x140>
 400c898:	91bfff17 	ldw	r6,-4(r18)
 400c89c:	3084d83a 	srl	r2,r6,r2
 400c8a0:	2908983a 	sll	r4,r5,r4
 400c8a4:	1104b03a 	or	r2,r2,r4
 400c8a8:	dfc00517 	ldw	ra,20(sp)
 400c8ac:	dd000417 	ldw	r20,16(sp)
 400c8b0:	dcc00317 	ldw	r19,12(sp)
 400c8b4:	dc800217 	ldw	r18,8(sp)
 400c8b8:	dc400117 	ldw	r17,4(sp)
 400c8bc:	dc000017 	ldw	r16,0(sp)
 400c8c0:	dec00604 	addi	sp,sp,24
 400c8c4:	f800283a 	ret
 400c8c8:	113ffd44 	addi	r4,r2,-11
 400c8cc:	84bffe04 	addi	r18,r16,-8
 400c8d0:	817ffe17 	ldw	r5,-8(r16)
 400c8d4:	203fe91e 	bne	r4,zero,400c87c <__b2d+0xb4>
 400c8d8:	88cffc34 	orhi	r3,r17,16368
 400c8dc:	2805883a 	mov	r2,r5
 400c8e0:	dfc00517 	ldw	ra,20(sp)
 400c8e4:	dd000417 	ldw	r20,16(sp)
 400c8e8:	dcc00317 	ldw	r19,12(sp)
 400c8ec:	dc800217 	ldw	r18,8(sp)
 400c8f0:	dc400117 	ldw	r17,4(sp)
 400c8f4:	dc000017 	ldw	r16,0(sp)
 400c8f8:	dec00604 	addi	sp,sp,24
 400c8fc:	f800283a 	ret
 400c900:	0009883a 	mov	r4,zero
 400c904:	003fce06 	br	400c840 <__b2d+0x78>
 400c908:	0005883a 	mov	r2,zero
 400c90c:	003fe406 	br	400c8a0 <__b2d+0xd8>

0400c910 <__d2b>:
 400c910:	defff804 	addi	sp,sp,-32
 400c914:	dc400315 	stw	r17,12(sp)
 400c918:	3023883a 	mov	r17,r6
 400c91c:	dc800415 	stw	r18,16(sp)
 400c920:	8824907a 	slli	r18,r17,1
 400c924:	dcc00515 	stw	r19,20(sp)
 400c928:	2827883a 	mov	r19,r5
 400c92c:	9024d57a 	srli	r18,r18,21
 400c930:	01400044 	movi	r5,1
 400c934:	dd000615 	stw	r20,24(sp)
 400c938:	dc000215 	stw	r16,8(sp)
 400c93c:	dfc00715 	stw	ra,28(sp)
 400c940:	3829883a 	mov	r20,r7
 400c944:	400bcc40 	call	400bcc4 <_Balloc>
 400c948:	1021883a 	mov	r16,r2
 400c94c:	00800434 	movhi	r2,16
 400c950:	10bfffc4 	addi	r2,r2,-1
 400c954:	88a2703a 	and	r17,r17,r2
 400c958:	90000126 	beq	r18,zero,400c960 <__d2b+0x50>
 400c95c:	8c400434 	orhi	r17,r17,16
 400c960:	dc400015 	stw	r17,0(sp)
 400c964:	98002226 	beq	r19,zero,400c9f0 <__d2b+0xe0>
 400c968:	d9000104 	addi	r4,sp,4
 400c96c:	dcc00115 	stw	r19,4(sp)
 400c970:	400c0140 	call	400c014 <__lo0bits>
 400c974:	d8c00017 	ldw	r3,0(sp)
 400c978:	10002d1e 	bne	r2,zero,400ca30 <__d2b+0x120>
 400c97c:	d9000117 	ldw	r4,4(sp)
 400c980:	81000515 	stw	r4,20(r16)
 400c984:	1823003a 	cmpeq	r17,r3,zero
 400c988:	01000084 	movi	r4,2
 400c98c:	2463c83a 	sub	r17,r4,r17
 400c990:	80c00615 	stw	r3,24(r16)
 400c994:	84400415 	stw	r17,16(r16)
 400c998:	90001d1e 	bne	r18,zero,400ca10 <__d2b+0x100>
 400c99c:	88c00104 	addi	r3,r17,4
 400c9a0:	18c7883a 	add	r3,r3,r3
 400c9a4:	18c7883a 	add	r3,r3,r3
 400c9a8:	80c7883a 	add	r3,r16,r3
 400c9ac:	19000017 	ldw	r4,0(r3)
 400c9b0:	10bef384 	addi	r2,r2,-1074
 400c9b4:	a0800015 	stw	r2,0(r20)
 400c9b8:	400bfac0 	call	400bfac <__hi0bits>
 400c9bc:	8822917a 	slli	r17,r17,5
 400c9c0:	d8c00817 	ldw	r3,32(sp)
 400c9c4:	8885c83a 	sub	r2,r17,r2
 400c9c8:	18800015 	stw	r2,0(r3)
 400c9cc:	8005883a 	mov	r2,r16
 400c9d0:	dfc00717 	ldw	ra,28(sp)
 400c9d4:	dd000617 	ldw	r20,24(sp)
 400c9d8:	dcc00517 	ldw	r19,20(sp)
 400c9dc:	dc800417 	ldw	r18,16(sp)
 400c9e0:	dc400317 	ldw	r17,12(sp)
 400c9e4:	dc000217 	ldw	r16,8(sp)
 400c9e8:	dec00804 	addi	sp,sp,32
 400c9ec:	f800283a 	ret
 400c9f0:	d809883a 	mov	r4,sp
 400c9f4:	400c0140 	call	400c014 <__lo0bits>
 400c9f8:	d8c00017 	ldw	r3,0(sp)
 400c9fc:	04400044 	movi	r17,1
 400ca00:	84400415 	stw	r17,16(r16)
 400ca04:	80c00515 	stw	r3,20(r16)
 400ca08:	10800804 	addi	r2,r2,32
 400ca0c:	903fe326 	beq	r18,zero,400c99c <__d2b+0x8c>
 400ca10:	00c00d44 	movi	r3,53
 400ca14:	94bef344 	addi	r18,r18,-1075
 400ca18:	90a5883a 	add	r18,r18,r2
 400ca1c:	1885c83a 	sub	r2,r3,r2
 400ca20:	d8c00817 	ldw	r3,32(sp)
 400ca24:	a4800015 	stw	r18,0(r20)
 400ca28:	18800015 	stw	r2,0(r3)
 400ca2c:	003fe706 	br	400c9cc <__d2b+0xbc>
 400ca30:	01000804 	movi	r4,32
 400ca34:	2089c83a 	sub	r4,r4,r2
 400ca38:	1908983a 	sll	r4,r3,r4
 400ca3c:	d9400117 	ldw	r5,4(sp)
 400ca40:	1886d83a 	srl	r3,r3,r2
 400ca44:	2148b03a 	or	r4,r4,r5
 400ca48:	81000515 	stw	r4,20(r16)
 400ca4c:	d8c00015 	stw	r3,0(sp)
 400ca50:	003fcc06 	br	400c984 <__d2b+0x74>

0400ca54 <__ratio>:
 400ca54:	defff904 	addi	sp,sp,-28
 400ca58:	dc400315 	stw	r17,12(sp)
 400ca5c:	2823883a 	mov	r17,r5
 400ca60:	d9400104 	addi	r5,sp,4
 400ca64:	dfc00615 	stw	ra,24(sp)
 400ca68:	dcc00515 	stw	r19,20(sp)
 400ca6c:	dc800415 	stw	r18,16(sp)
 400ca70:	2027883a 	mov	r19,r4
 400ca74:	dc000215 	stw	r16,8(sp)
 400ca78:	400c7c80 	call	400c7c8 <__b2d>
 400ca7c:	8809883a 	mov	r4,r17
 400ca80:	d80b883a 	mov	r5,sp
 400ca84:	1025883a 	mov	r18,r2
 400ca88:	1821883a 	mov	r16,r3
 400ca8c:	400c7c80 	call	400c7c8 <__b2d>
 400ca90:	99400417 	ldw	r5,16(r19)
 400ca94:	89000417 	ldw	r4,16(r17)
 400ca98:	d9800117 	ldw	r6,4(sp)
 400ca9c:	2909c83a 	sub	r4,r5,r4
 400caa0:	d9400017 	ldw	r5,0(sp)
 400caa4:	2008917a 	slli	r4,r4,5
 400caa8:	314bc83a 	sub	r5,r6,r5
 400caac:	290b883a 	add	r5,r5,r4
 400cab0:	01400e0e 	bge	zero,r5,400caec <__ratio+0x98>
 400cab4:	280a953a 	slli	r5,r5,20
 400cab8:	2c21883a 	add	r16,r5,r16
 400cabc:	9009883a 	mov	r4,r18
 400cac0:	800b883a 	mov	r5,r16
 400cac4:	100d883a 	mov	r6,r2
 400cac8:	180f883a 	mov	r7,r3
 400cacc:	400e4e80 	call	400e4e8 <__divdf3>
 400cad0:	dfc00617 	ldw	ra,24(sp)
 400cad4:	dcc00517 	ldw	r19,20(sp)
 400cad8:	dc800417 	ldw	r18,16(sp)
 400cadc:	dc400317 	ldw	r17,12(sp)
 400cae0:	dc000217 	ldw	r16,8(sp)
 400cae4:	dec00704 	addi	sp,sp,28
 400cae8:	f800283a 	ret
 400caec:	280a953a 	slli	r5,r5,20
 400caf0:	1947c83a 	sub	r3,r3,r5
 400caf4:	003ff106 	br	400cabc <__ratio+0x68>

0400caf8 <_mprec_log10>:
 400caf8:	defffe04 	addi	sp,sp,-8
 400cafc:	dc000015 	stw	r16,0(sp)
 400cb00:	dfc00115 	stw	ra,4(sp)
 400cb04:	008005c4 	movi	r2,23
 400cb08:	2021883a 	mov	r16,r4
 400cb0c:	11000d0e 	bge	r2,r4,400cb44 <_mprec_log10+0x4c>
 400cb10:	0005883a 	mov	r2,zero
 400cb14:	00cffc34 	movhi	r3,16368
 400cb18:	843fffc4 	addi	r16,r16,-1
 400cb1c:	1009883a 	mov	r4,r2
 400cb20:	180b883a 	mov	r5,r3
 400cb24:	000d883a 	mov	r6,zero
 400cb28:	01d00934 	movhi	r7,16420
 400cb2c:	4005b980 	call	4005b98 <__muldf3>
 400cb30:	803ff91e 	bne	r16,zero,400cb18 <_mprec_log10+0x20>
 400cb34:	dfc00117 	ldw	ra,4(sp)
 400cb38:	dc000017 	ldw	r16,0(sp)
 400cb3c:	dec00204 	addi	sp,sp,8
 400cb40:	f800283a 	ret
 400cb44:	202090fa 	slli	r16,r4,3
 400cb48:	00810374 	movhi	r2,1037
 400cb4c:	10893f04 	addi	r2,r2,9468
 400cb50:	1421883a 	add	r16,r2,r16
 400cb54:	80800017 	ldw	r2,0(r16)
 400cb58:	80c00117 	ldw	r3,4(r16)
 400cb5c:	dfc00117 	ldw	ra,4(sp)
 400cb60:	dc000017 	ldw	r16,0(sp)
 400cb64:	dec00204 	addi	sp,sp,8
 400cb68:	f800283a 	ret

0400cb6c <__copybits>:
 400cb6c:	297fffc4 	addi	r5,r5,-1
 400cb70:	31c00417 	ldw	r7,16(r6)
 400cb74:	2811d17a 	srai	r8,r5,5
 400cb78:	30800504 	addi	r2,r6,20
 400cb7c:	39c00144 	addi	r7,r7,5
 400cb80:	42000044 	addi	r8,r8,1
 400cb84:	39cf883a 	add	r7,r7,r7
 400cb88:	4211883a 	add	r8,r8,r8
 400cb8c:	39cf883a 	add	r7,r7,r7
 400cb90:	4211883a 	add	r8,r8,r8
 400cb94:	31cf883a 	add	r7,r6,r7
 400cb98:	2211883a 	add	r8,r4,r8
 400cb9c:	11c00d2e 	bgeu	r2,r7,400cbd4 <__copybits+0x68>
 400cba0:	2007883a 	mov	r3,r4
 400cba4:	11400017 	ldw	r5,0(r2)
 400cba8:	18c00104 	addi	r3,r3,4
 400cbac:	10800104 	addi	r2,r2,4
 400cbb0:	197fff15 	stw	r5,-4(r3)
 400cbb4:	11fffb36 	bltu	r2,r7,400cba4 <__copybits+0x38>
 400cbb8:	3985c83a 	sub	r2,r7,r6
 400cbbc:	10bffac4 	addi	r2,r2,-21
 400cbc0:	1004d0ba 	srli	r2,r2,2
 400cbc4:	10800044 	addi	r2,r2,1
 400cbc8:	1085883a 	add	r2,r2,r2
 400cbcc:	1085883a 	add	r2,r2,r2
 400cbd0:	2089883a 	add	r4,r4,r2
 400cbd4:	2200032e 	bgeu	r4,r8,400cbe4 <__copybits+0x78>
 400cbd8:	20000015 	stw	zero,0(r4)
 400cbdc:	21000104 	addi	r4,r4,4
 400cbe0:	223ffd36 	bltu	r4,r8,400cbd8 <__copybits+0x6c>
 400cbe4:	f800283a 	ret

0400cbe8 <__any_on>:
 400cbe8:	21800417 	ldw	r6,16(r4)
 400cbec:	2805d17a 	srai	r2,r5,5
 400cbf0:	20c00504 	addi	r3,r4,20
 400cbf4:	30800f0e 	bge	r6,r2,400cc34 <__any_on+0x4c>
 400cbf8:	3005883a 	mov	r2,r6
 400cbfc:	10800144 	addi	r2,r2,5
 400cc00:	1085883a 	add	r2,r2,r2
 400cc04:	1085883a 	add	r2,r2,r2
 400cc08:	2089883a 	add	r4,r4,r2
 400cc0c:	1900152e 	bgeu	r3,r4,400cc64 <__any_on+0x7c>
 400cc10:	20bfff17 	ldw	r2,-4(r4)
 400cc14:	213fff04 	addi	r4,r4,-4
 400cc18:	1000041e 	bne	r2,zero,400cc2c <__any_on+0x44>
 400cc1c:	1900112e 	bgeu	r3,r4,400cc64 <__any_on+0x7c>
 400cc20:	213fff04 	addi	r4,r4,-4
 400cc24:	20800017 	ldw	r2,0(r4)
 400cc28:	103ffc26 	beq	r2,zero,400cc1c <__any_on+0x34>
 400cc2c:	00800044 	movi	r2,1
 400cc30:	f800283a 	ret
 400cc34:	11bff10e 	bge	r2,r6,400cbfc <__any_on+0x14>
 400cc38:	294007cc 	andi	r5,r5,31
 400cc3c:	283fef26 	beq	r5,zero,400cbfc <__any_on+0x14>
 400cc40:	11800144 	addi	r6,r2,5
 400cc44:	318d883a 	add	r6,r6,r6
 400cc48:	318d883a 	add	r6,r6,r6
 400cc4c:	218d883a 	add	r6,r4,r6
 400cc50:	31800017 	ldw	r6,0(r6)
 400cc54:	314ed83a 	srl	r7,r6,r5
 400cc58:	394a983a 	sll	r5,r7,r5
 400cc5c:	29bff31e 	bne	r5,r6,400cc2c <__any_on+0x44>
 400cc60:	003fe606 	br	400cbfc <__any_on+0x14>
 400cc64:	0005883a 	mov	r2,zero
 400cc68:	f800283a 	ret

0400cc6c <_realloc_r>:
 400cc6c:	defff504 	addi	sp,sp,-44
 400cc70:	dd400615 	stw	r21,24(sp)
 400cc74:	dc800315 	stw	r18,12(sp)
 400cc78:	dc000115 	stw	r16,4(sp)
 400cc7c:	dfc00a15 	stw	ra,40(sp)
 400cc80:	df000915 	stw	fp,36(sp)
 400cc84:	ddc00815 	stw	r23,32(sp)
 400cc88:	dd800715 	stw	r22,28(sp)
 400cc8c:	dd000515 	stw	r20,20(sp)
 400cc90:	dcc00415 	stw	r19,16(sp)
 400cc94:	dc400215 	stw	r17,8(sp)
 400cc98:	2821883a 	mov	r16,r5
 400cc9c:	202b883a 	mov	r21,r4
 400cca0:	3025883a 	mov	r18,r6
 400cca4:	28009626 	beq	r5,zero,400cf00 <_realloc_r+0x294>
 400cca8:	400ef280 	call	400ef28 <__malloc_lock>
 400ccac:	80bfff17 	ldw	r2,-4(r16)
 400ccb0:	04ffff04 	movi	r19,-4
 400ccb4:	90c002c4 	addi	r3,r18,11
 400ccb8:	01000584 	movi	r4,22
 400ccbc:	85bffe04 	addi	r22,r16,-8
 400ccc0:	14e6703a 	and	r19,r2,r19
 400ccc4:	20c0372e 	bgeu	r4,r3,400cda4 <_realloc_r+0x138>
 400ccc8:	047ffe04 	movi	r17,-8
 400cccc:	1c62703a 	and	r17,r3,r17
 400ccd0:	8807883a 	mov	r3,r17
 400ccd4:	88005a16 	blt	r17,zero,400ce40 <_realloc_r+0x1d4>
 400ccd8:	8c805936 	bltu	r17,r18,400ce40 <_realloc_r+0x1d4>
 400ccdc:	98c0340e 	bge	r19,r3,400cdb0 <_realloc_r+0x144>
 400cce0:	07010374 	movhi	fp,1037
 400cce4:	e70a8504 	addi	fp,fp,10772
 400cce8:	e1400217 	ldw	r5,8(fp)
 400ccec:	b4c9883a 	add	r4,r22,r19
 400ccf0:	29009026 	beq	r5,r4,400cf34 <_realloc_r+0x2c8>
 400ccf4:	21800117 	ldw	r6,4(r4)
 400ccf8:	01ffff84 	movi	r7,-2
 400ccfc:	31ce703a 	and	r7,r6,r7
 400cd00:	21cf883a 	add	r7,r4,r7
 400cd04:	39c00117 	ldw	r7,4(r7)
 400cd08:	39c0004c 	andi	r7,r7,1
 400cd0c:	38004326 	beq	r7,zero,400ce1c <_realloc_r+0x1b0>
 400cd10:	000d883a 	mov	r6,zero
 400cd14:	0009883a 	mov	r4,zero
 400cd18:	1080004c 	andi	r2,r2,1
 400cd1c:	10005a1e 	bne	r2,zero,400ce88 <_realloc_r+0x21c>
 400cd20:	85fffe17 	ldw	r23,-8(r16)
 400cd24:	00bfff04 	movi	r2,-4
 400cd28:	b5efc83a 	sub	r23,r22,r23
 400cd2c:	b9c00117 	ldw	r7,4(r23)
 400cd30:	388e703a 	and	r7,r7,r2
 400cd34:	3ccf883a 	add	r7,r7,r19
 400cd38:	20005226 	beq	r4,zero,400ce84 <_realloc_r+0x218>
 400cd3c:	31e9883a 	add	r20,r6,r7
 400cd40:	2140c726 	beq	r4,r5,400d060 <_realloc_r+0x3f4>
 400cd44:	a0c04f16 	blt	r20,r3,400ce84 <_realloc_r+0x218>
 400cd48:	20800317 	ldw	r2,12(r4)
 400cd4c:	20c00217 	ldw	r3,8(r4)
 400cd50:	99bfff04 	addi	r6,r19,-4
 400cd54:	01000904 	movi	r4,36
 400cd58:	18800315 	stw	r2,12(r3)
 400cd5c:	10c00215 	stw	r3,8(r2)
 400cd60:	b8c00217 	ldw	r3,8(r23)
 400cd64:	b8800317 	ldw	r2,12(r23)
 400cd68:	bc800204 	addi	r18,r23,8
 400cd6c:	18800315 	stw	r2,12(r3)
 400cd70:	10c00215 	stw	r3,8(r2)
 400cd74:	2180ed36 	bltu	r4,r6,400d12c <_realloc_r+0x4c0>
 400cd78:	008004c4 	movi	r2,19
 400cd7c:	11809b2e 	bgeu	r2,r6,400cfec <_realloc_r+0x380>
 400cd80:	80800017 	ldw	r2,0(r16)
 400cd84:	b8800215 	stw	r2,8(r23)
 400cd88:	80800117 	ldw	r2,4(r16)
 400cd8c:	b8800315 	stw	r2,12(r23)
 400cd90:	008006c4 	movi	r2,27
 400cd94:	1180f936 	bltu	r2,r6,400d17c <_realloc_r+0x510>
 400cd98:	b8800404 	addi	r2,r23,16
 400cd9c:	80c00204 	addi	r3,r16,8
 400cda0:	00009406 	br	400cff4 <_realloc_r+0x388>
 400cda4:	00c00404 	movi	r3,16
 400cda8:	1823883a 	mov	r17,r3
 400cdac:	003fca06 	br	400ccd8 <_realloc_r+0x6c>
 400cdb0:	9829883a 	mov	r20,r19
 400cdb4:	a447c83a 	sub	r3,r20,r17
 400cdb8:	010003c4 	movi	r4,15
 400cdbc:	1080004c 	andi	r2,r2,1
 400cdc0:	20c02336 	bltu	r4,r3,400ce50 <_realloc_r+0x1e4>
 400cdc4:	1504b03a 	or	r2,r2,r20
 400cdc8:	b0800115 	stw	r2,4(r22)
 400cdcc:	b52d883a 	add	r22,r22,r20
 400cdd0:	b0800117 	ldw	r2,4(r22)
 400cdd4:	10800054 	ori	r2,r2,1
 400cdd8:	b0800115 	stw	r2,4(r22)
 400cddc:	a809883a 	mov	r4,r21
 400cde0:	400ef480 	call	400ef48 <__malloc_unlock>
 400cde4:	8025883a 	mov	r18,r16
 400cde8:	9005883a 	mov	r2,r18
 400cdec:	dfc00a17 	ldw	ra,40(sp)
 400cdf0:	df000917 	ldw	fp,36(sp)
 400cdf4:	ddc00817 	ldw	r23,32(sp)
 400cdf8:	dd800717 	ldw	r22,28(sp)
 400cdfc:	dd400617 	ldw	r21,24(sp)
 400ce00:	dd000517 	ldw	r20,20(sp)
 400ce04:	dcc00417 	ldw	r19,16(sp)
 400ce08:	dc800317 	ldw	r18,12(sp)
 400ce0c:	dc400217 	ldw	r17,8(sp)
 400ce10:	dc000117 	ldw	r16,4(sp)
 400ce14:	dec00b04 	addi	sp,sp,44
 400ce18:	f800283a 	ret
 400ce1c:	01ffff04 	movi	r7,-4
 400ce20:	31cc703a 	and	r6,r6,r7
 400ce24:	34e9883a 	add	r20,r6,r19
 400ce28:	a0ffbb16 	blt	r20,r3,400cd18 <_realloc_r+0xac>
 400ce2c:	20c00317 	ldw	r3,12(r4)
 400ce30:	21000217 	ldw	r4,8(r4)
 400ce34:	20c00315 	stw	r3,12(r4)
 400ce38:	19000215 	stw	r4,8(r3)
 400ce3c:	003fdd06 	br	400cdb4 <_realloc_r+0x148>
 400ce40:	00800304 	movi	r2,12
 400ce44:	a8800015 	stw	r2,0(r21)
 400ce48:	0025883a 	mov	r18,zero
 400ce4c:	003fe606 	br	400cde8 <_realloc_r+0x17c>
 400ce50:	1444b03a 	or	r2,r2,r17
 400ce54:	b0800115 	stw	r2,4(r22)
 400ce58:	b44b883a 	add	r5,r22,r17
 400ce5c:	18800054 	ori	r2,r3,1
 400ce60:	28800115 	stw	r2,4(r5)
 400ce64:	28c7883a 	add	r3,r5,r3
 400ce68:	18800117 	ldw	r2,4(r3)
 400ce6c:	a809883a 	mov	r4,r21
 400ce70:	29400204 	addi	r5,r5,8
 400ce74:	10800054 	ori	r2,r2,1
 400ce78:	18800115 	stw	r2,4(r3)
 400ce7c:	400a5b40 	call	400a5b4 <_free_r>
 400ce80:	003fd606 	br	400cddc <_realloc_r+0x170>
 400ce84:	38c0330e 	bge	r7,r3,400cf54 <_realloc_r+0x2e8>
 400ce88:	900b883a 	mov	r5,r18
 400ce8c:	a809883a 	mov	r4,r21
 400ce90:	400b14c0 	call	400b14c <_malloc_r>
 400ce94:	1025883a 	mov	r18,r2
 400ce98:	10001626 	beq	r2,zero,400cef4 <_realloc_r+0x288>
 400ce9c:	80bfff17 	ldw	r2,-4(r16)
 400cea0:	00ffff84 	movi	r3,-2
 400cea4:	913ffe04 	addi	r4,r18,-8
 400cea8:	10c6703a 	and	r3,r2,r3
 400ceac:	b0c7883a 	add	r3,r22,r3
 400ceb0:	20c09926 	beq	r4,r3,400d118 <_realloc_r+0x4ac>
 400ceb4:	99bfff04 	addi	r6,r19,-4
 400ceb8:	00800904 	movi	r2,36
 400cebc:	11806436 	bltu	r2,r6,400d050 <_realloc_r+0x3e4>
 400cec0:	00c004c4 	movi	r3,19
 400cec4:	19804036 	bltu	r3,r6,400cfc8 <_realloc_r+0x35c>
 400cec8:	9005883a 	mov	r2,r18
 400cecc:	8007883a 	mov	r3,r16
 400ced0:	19000017 	ldw	r4,0(r3)
 400ced4:	11000015 	stw	r4,0(r2)
 400ced8:	19000117 	ldw	r4,4(r3)
 400cedc:	11000115 	stw	r4,4(r2)
 400cee0:	18c00217 	ldw	r3,8(r3)
 400cee4:	10c00215 	stw	r3,8(r2)
 400cee8:	a809883a 	mov	r4,r21
 400ceec:	800b883a 	mov	r5,r16
 400cef0:	400a5b40 	call	400a5b4 <_free_r>
 400cef4:	a809883a 	mov	r4,r21
 400cef8:	400ef480 	call	400ef48 <__malloc_unlock>
 400cefc:	003fba06 	br	400cde8 <_realloc_r+0x17c>
 400cf00:	300b883a 	mov	r5,r6
 400cf04:	dfc00a17 	ldw	ra,40(sp)
 400cf08:	df000917 	ldw	fp,36(sp)
 400cf0c:	ddc00817 	ldw	r23,32(sp)
 400cf10:	dd800717 	ldw	r22,28(sp)
 400cf14:	dd400617 	ldw	r21,24(sp)
 400cf18:	dd000517 	ldw	r20,20(sp)
 400cf1c:	dcc00417 	ldw	r19,16(sp)
 400cf20:	dc800317 	ldw	r18,12(sp)
 400cf24:	dc400217 	ldw	r17,8(sp)
 400cf28:	dc000117 	ldw	r16,4(sp)
 400cf2c:	dec00b04 	addi	sp,sp,44
 400cf30:	400b14c1 	jmpi	400b14c <_malloc_r>
 400cf34:	29800117 	ldw	r6,4(r5)
 400cf38:	013fff04 	movi	r4,-4
 400cf3c:	89c00404 	addi	r7,r17,16
 400cf40:	310c703a 	and	r6,r6,r4
 400cf44:	34c9883a 	add	r4,r6,r19
 400cf48:	21c0340e 	bge	r4,r7,400d01c <_realloc_r+0x3b0>
 400cf4c:	2809883a 	mov	r4,r5
 400cf50:	003f7106 	br	400cd18 <_realloc_r+0xac>
 400cf54:	b8800317 	ldw	r2,12(r23)
 400cf58:	b8c00217 	ldw	r3,8(r23)
 400cf5c:	99bfff04 	addi	r6,r19,-4
 400cf60:	01000904 	movi	r4,36
 400cf64:	18800315 	stw	r2,12(r3)
 400cf68:	10c00215 	stw	r3,8(r2)
 400cf6c:	bc800204 	addi	r18,r23,8
 400cf70:	21807836 	bltu	r4,r6,400d154 <_realloc_r+0x4e8>
 400cf74:	008004c4 	movi	r2,19
 400cf78:	1180732e 	bgeu	r2,r6,400d148 <_realloc_r+0x4dc>
 400cf7c:	80800017 	ldw	r2,0(r16)
 400cf80:	b8800215 	stw	r2,8(r23)
 400cf84:	80800117 	ldw	r2,4(r16)
 400cf88:	b8800315 	stw	r2,12(r23)
 400cf8c:	008006c4 	movi	r2,27
 400cf90:	11808936 	bltu	r2,r6,400d1b8 <_realloc_r+0x54c>
 400cf94:	b8800404 	addi	r2,r23,16
 400cf98:	80c00204 	addi	r3,r16,8
 400cf9c:	19000017 	ldw	r4,0(r3)
 400cfa0:	9021883a 	mov	r16,r18
 400cfa4:	3829883a 	mov	r20,r7
 400cfa8:	11000015 	stw	r4,0(r2)
 400cfac:	19000117 	ldw	r4,4(r3)
 400cfb0:	b82d883a 	mov	r22,r23
 400cfb4:	11000115 	stw	r4,4(r2)
 400cfb8:	18c00217 	ldw	r3,8(r3)
 400cfbc:	10c00215 	stw	r3,8(r2)
 400cfc0:	b8800117 	ldw	r2,4(r23)
 400cfc4:	003f7b06 	br	400cdb4 <_realloc_r+0x148>
 400cfc8:	80c00017 	ldw	r3,0(r16)
 400cfcc:	90c00015 	stw	r3,0(r18)
 400cfd0:	80c00117 	ldw	r3,4(r16)
 400cfd4:	90c00115 	stw	r3,4(r18)
 400cfd8:	00c006c4 	movi	r3,27
 400cfdc:	19804636 	bltu	r3,r6,400d0f8 <_realloc_r+0x48c>
 400cfe0:	90800204 	addi	r2,r18,8
 400cfe4:	80c00204 	addi	r3,r16,8
 400cfe8:	003fb906 	br	400ced0 <_realloc_r+0x264>
 400cfec:	9005883a 	mov	r2,r18
 400cff0:	8007883a 	mov	r3,r16
 400cff4:	19000017 	ldw	r4,0(r3)
 400cff8:	9021883a 	mov	r16,r18
 400cffc:	b82d883a 	mov	r22,r23
 400d000:	11000015 	stw	r4,0(r2)
 400d004:	19000117 	ldw	r4,4(r3)
 400d008:	11000115 	stw	r4,4(r2)
 400d00c:	18c00217 	ldw	r3,8(r3)
 400d010:	10c00215 	stw	r3,8(r2)
 400d014:	b8800117 	ldw	r2,4(r23)
 400d018:	003f6606 	br	400cdb4 <_realloc_r+0x148>
 400d01c:	2445c83a 	sub	r2,r4,r17
 400d020:	b46d883a 	add	r22,r22,r17
 400d024:	10800054 	ori	r2,r2,1
 400d028:	b0800115 	stw	r2,4(r22)
 400d02c:	80bfff17 	ldw	r2,-4(r16)
 400d030:	a809883a 	mov	r4,r21
 400d034:	e5800215 	stw	r22,8(fp)
 400d038:	1080004c 	andi	r2,r2,1
 400d03c:	88a2b03a 	or	r17,r17,r2
 400d040:	847fff15 	stw	r17,-4(r16)
 400d044:	400ef480 	call	400ef48 <__malloc_unlock>
 400d048:	8025883a 	mov	r18,r16
 400d04c:	003f6606 	br	400cde8 <_realloc_r+0x17c>
 400d050:	9009883a 	mov	r4,r18
 400d054:	800b883a 	mov	r5,r16
 400d058:	400bac00 	call	400bac0 <memmove>
 400d05c:	003fa206 	br	400cee8 <_realloc_r+0x27c>
 400d060:	88800404 	addi	r2,r17,16
 400d064:	a0bf8716 	blt	r20,r2,400ce84 <_realloc_r+0x218>
 400d068:	b8800317 	ldw	r2,12(r23)
 400d06c:	b8c00217 	ldw	r3,8(r23)
 400d070:	99bfff04 	addi	r6,r19,-4
 400d074:	01000904 	movi	r4,36
 400d078:	18800315 	stw	r2,12(r3)
 400d07c:	10c00215 	stw	r3,8(r2)
 400d080:	bc800204 	addi	r18,r23,8
 400d084:	21806536 	bltu	r4,r6,400d21c <_realloc_r+0x5b0>
 400d088:	008004c4 	movi	r2,19
 400d08c:	1180592e 	bgeu	r2,r6,400d1f4 <_realloc_r+0x588>
 400d090:	80800017 	ldw	r2,0(r16)
 400d094:	b8800215 	stw	r2,8(r23)
 400d098:	80800117 	ldw	r2,4(r16)
 400d09c:	b8800315 	stw	r2,12(r23)
 400d0a0:	008006c4 	movi	r2,27
 400d0a4:	11806136 	bltu	r2,r6,400d22c <_realloc_r+0x5c0>
 400d0a8:	b8800404 	addi	r2,r23,16
 400d0ac:	80c00204 	addi	r3,r16,8
 400d0b0:	19000017 	ldw	r4,0(r3)
 400d0b4:	11000015 	stw	r4,0(r2)
 400d0b8:	19000117 	ldw	r4,4(r3)
 400d0bc:	11000115 	stw	r4,4(r2)
 400d0c0:	18c00217 	ldw	r3,8(r3)
 400d0c4:	10c00215 	stw	r3,8(r2)
 400d0c8:	a447c83a 	sub	r3,r20,r17
 400d0cc:	bc45883a 	add	r2,r23,r17
 400d0d0:	18c00054 	ori	r3,r3,1
 400d0d4:	10c00115 	stw	r3,4(r2)
 400d0d8:	b8c00117 	ldw	r3,4(r23)
 400d0dc:	e0800215 	stw	r2,8(fp)
 400d0e0:	a809883a 	mov	r4,r21
 400d0e4:	1880004c 	andi	r2,r3,1
 400d0e8:	88a2b03a 	or	r17,r17,r2
 400d0ec:	bc400115 	stw	r17,4(r23)
 400d0f0:	400ef480 	call	400ef48 <__malloc_unlock>
 400d0f4:	003f3c06 	br	400cde8 <_realloc_r+0x17c>
 400d0f8:	80c00217 	ldw	r3,8(r16)
 400d0fc:	90c00215 	stw	r3,8(r18)
 400d100:	80c00317 	ldw	r3,12(r16)
 400d104:	90c00315 	stw	r3,12(r18)
 400d108:	30802426 	beq	r6,r2,400d19c <_realloc_r+0x530>
 400d10c:	90800404 	addi	r2,r18,16
 400d110:	80c00404 	addi	r3,r16,16
 400d114:	003f6e06 	br	400ced0 <_realloc_r+0x264>
 400d118:	953fff17 	ldw	r20,-4(r18)
 400d11c:	00ffff04 	movi	r3,-4
 400d120:	a0e8703a 	and	r20,r20,r3
 400d124:	a4e9883a 	add	r20,r20,r19
 400d128:	003f2206 	br	400cdb4 <_realloc_r+0x148>
 400d12c:	800b883a 	mov	r5,r16
 400d130:	9009883a 	mov	r4,r18
 400d134:	400bac00 	call	400bac0 <memmove>
 400d138:	9021883a 	mov	r16,r18
 400d13c:	b8800117 	ldw	r2,4(r23)
 400d140:	b82d883a 	mov	r22,r23
 400d144:	003f1b06 	br	400cdb4 <_realloc_r+0x148>
 400d148:	9005883a 	mov	r2,r18
 400d14c:	8007883a 	mov	r3,r16
 400d150:	003f9206 	br	400cf9c <_realloc_r+0x330>
 400d154:	800b883a 	mov	r5,r16
 400d158:	9009883a 	mov	r4,r18
 400d15c:	d9c00015 	stw	r7,0(sp)
 400d160:	400bac00 	call	400bac0 <memmove>
 400d164:	d9c00017 	ldw	r7,0(sp)
 400d168:	9021883a 	mov	r16,r18
 400d16c:	b8800117 	ldw	r2,4(r23)
 400d170:	3829883a 	mov	r20,r7
 400d174:	b82d883a 	mov	r22,r23
 400d178:	003f0e06 	br	400cdb4 <_realloc_r+0x148>
 400d17c:	80800217 	ldw	r2,8(r16)
 400d180:	b8800415 	stw	r2,16(r23)
 400d184:	80800317 	ldw	r2,12(r16)
 400d188:	b8800515 	stw	r2,20(r23)
 400d18c:	31001226 	beq	r6,r4,400d1d8 <_realloc_r+0x56c>
 400d190:	b8800604 	addi	r2,r23,24
 400d194:	80c00404 	addi	r3,r16,16
 400d198:	003f9606 	br	400cff4 <_realloc_r+0x388>
 400d19c:	81000417 	ldw	r4,16(r16)
 400d1a0:	90800604 	addi	r2,r18,24
 400d1a4:	80c00604 	addi	r3,r16,24
 400d1a8:	91000415 	stw	r4,16(r18)
 400d1ac:	81000517 	ldw	r4,20(r16)
 400d1b0:	91000515 	stw	r4,20(r18)
 400d1b4:	003f4606 	br	400ced0 <_realloc_r+0x264>
 400d1b8:	80800217 	ldw	r2,8(r16)
 400d1bc:	b8800415 	stw	r2,16(r23)
 400d1c0:	80800317 	ldw	r2,12(r16)
 400d1c4:	b8800515 	stw	r2,20(r23)
 400d1c8:	31000d26 	beq	r6,r4,400d200 <_realloc_r+0x594>
 400d1cc:	b8800604 	addi	r2,r23,24
 400d1d0:	80c00404 	addi	r3,r16,16
 400d1d4:	003f7106 	br	400cf9c <_realloc_r+0x330>
 400d1d8:	81000417 	ldw	r4,16(r16)
 400d1dc:	b8800804 	addi	r2,r23,32
 400d1e0:	80c00604 	addi	r3,r16,24
 400d1e4:	b9000615 	stw	r4,24(r23)
 400d1e8:	81000517 	ldw	r4,20(r16)
 400d1ec:	b9000715 	stw	r4,28(r23)
 400d1f0:	003f8006 	br	400cff4 <_realloc_r+0x388>
 400d1f4:	9005883a 	mov	r2,r18
 400d1f8:	8007883a 	mov	r3,r16
 400d1fc:	003fac06 	br	400d0b0 <_realloc_r+0x444>
 400d200:	81000417 	ldw	r4,16(r16)
 400d204:	b8800804 	addi	r2,r23,32
 400d208:	80c00604 	addi	r3,r16,24
 400d20c:	b9000615 	stw	r4,24(r23)
 400d210:	81000517 	ldw	r4,20(r16)
 400d214:	b9000715 	stw	r4,28(r23)
 400d218:	003f6006 	br	400cf9c <_realloc_r+0x330>
 400d21c:	9009883a 	mov	r4,r18
 400d220:	800b883a 	mov	r5,r16
 400d224:	400bac00 	call	400bac0 <memmove>
 400d228:	003fa706 	br	400d0c8 <_realloc_r+0x45c>
 400d22c:	80800217 	ldw	r2,8(r16)
 400d230:	b8800415 	stw	r2,16(r23)
 400d234:	80800317 	ldw	r2,12(r16)
 400d238:	b8800515 	stw	r2,20(r23)
 400d23c:	31000326 	beq	r6,r4,400d24c <_realloc_r+0x5e0>
 400d240:	b8800604 	addi	r2,r23,24
 400d244:	80c00404 	addi	r3,r16,16
 400d248:	003f9906 	br	400d0b0 <_realloc_r+0x444>
 400d24c:	81000417 	ldw	r4,16(r16)
 400d250:	b8800804 	addi	r2,r23,32
 400d254:	80c00604 	addi	r3,r16,24
 400d258:	b9000615 	stw	r4,24(r23)
 400d25c:	81000517 	ldw	r4,20(r16)
 400d260:	b9000715 	stw	r4,28(r23)
 400d264:	003f9206 	br	400d0b0 <_realloc_r+0x444>

0400d268 <__isinfd>:
 400d268:	0105c83a 	sub	r2,zero,r4
 400d26c:	1108b03a 	or	r4,r2,r4
 400d270:	2004d7fa 	srli	r2,r4,31
 400d274:	00e00034 	movhi	r3,32768
 400d278:	18ffffc4 	addi	r3,r3,-1
 400d27c:	28ca703a 	and	r5,r5,r3
 400d280:	1144b03a 	or	r2,r2,r5
 400d284:	00dffc34 	movhi	r3,32752
 400d288:	1885c83a 	sub	r2,r3,r2
 400d28c:	0087c83a 	sub	r3,zero,r2
 400d290:	1884b03a 	or	r2,r3,r2
 400d294:	1005d7fa 	srai	r2,r2,31
 400d298:	10800044 	addi	r2,r2,1
 400d29c:	f800283a 	ret

0400d2a0 <__isnand>:
 400d2a0:	0105c83a 	sub	r2,zero,r4
 400d2a4:	1108b03a 	or	r4,r2,r4
 400d2a8:	2004d7fa 	srli	r2,r4,31
 400d2ac:	00e00034 	movhi	r3,32768
 400d2b0:	18ffffc4 	addi	r3,r3,-1
 400d2b4:	28ca703a 	and	r5,r5,r3
 400d2b8:	1144b03a 	or	r2,r2,r5
 400d2bc:	00dffc34 	movhi	r3,32752
 400d2c0:	1885c83a 	sub	r2,r3,r2
 400d2c4:	1004d7fa 	srli	r2,r2,31
 400d2c8:	f800283a 	ret

0400d2cc <_sbrk_r>:
 400d2cc:	defffd04 	addi	sp,sp,-12
 400d2d0:	dc400115 	stw	r17,4(sp)
 400d2d4:	dc000015 	stw	r16,0(sp)
 400d2d8:	2023883a 	mov	r17,r4
 400d2dc:	04010374 	movhi	r16,1037
 400d2e0:	84105404 	addi	r16,r16,16720
 400d2e4:	2809883a 	mov	r4,r5
 400d2e8:	dfc00215 	stw	ra,8(sp)
 400d2ec:	80000015 	stw	zero,0(r16)
 400d2f0:	400f1080 	call	400f108 <sbrk>
 400d2f4:	00ffffc4 	movi	r3,-1
 400d2f8:	10c00526 	beq	r2,r3,400d310 <_sbrk_r+0x44>
 400d2fc:	dfc00217 	ldw	ra,8(sp)
 400d300:	dc400117 	ldw	r17,4(sp)
 400d304:	dc000017 	ldw	r16,0(sp)
 400d308:	dec00304 	addi	sp,sp,12
 400d30c:	f800283a 	ret
 400d310:	80c00017 	ldw	r3,0(r16)
 400d314:	183ff926 	beq	r3,zero,400d2fc <_sbrk_r+0x30>
 400d318:	88c00015 	stw	r3,0(r17)
 400d31c:	dfc00217 	ldw	ra,8(sp)
 400d320:	dc400117 	ldw	r17,4(sp)
 400d324:	dc000017 	ldw	r16,0(sp)
 400d328:	dec00304 	addi	sp,sp,12
 400d32c:	f800283a 	ret

0400d330 <__sread>:
 400d330:	defffe04 	addi	sp,sp,-8
 400d334:	dc000015 	stw	r16,0(sp)
 400d338:	2821883a 	mov	r16,r5
 400d33c:	2940038f 	ldh	r5,14(r5)
 400d340:	dfc00115 	stw	ra,4(sp)
 400d344:	400d9280 	call	400d928 <_read_r>
 400d348:	10000716 	blt	r2,zero,400d368 <__sread+0x38>
 400d34c:	80c01417 	ldw	r3,80(r16)
 400d350:	1887883a 	add	r3,r3,r2
 400d354:	80c01415 	stw	r3,80(r16)
 400d358:	dfc00117 	ldw	ra,4(sp)
 400d35c:	dc000017 	ldw	r16,0(sp)
 400d360:	dec00204 	addi	sp,sp,8
 400d364:	f800283a 	ret
 400d368:	80c0030b 	ldhu	r3,12(r16)
 400d36c:	18fbffcc 	andi	r3,r3,61439
 400d370:	80c0030d 	sth	r3,12(r16)
 400d374:	dfc00117 	ldw	ra,4(sp)
 400d378:	dc000017 	ldw	r16,0(sp)
 400d37c:	dec00204 	addi	sp,sp,8
 400d380:	f800283a 	ret

0400d384 <__swrite>:
 400d384:	2880030b 	ldhu	r2,12(r5)
 400d388:	defffb04 	addi	sp,sp,-20
 400d38c:	dcc00315 	stw	r19,12(sp)
 400d390:	10c0400c 	andi	r3,r2,256
 400d394:	18ffffcc 	andi	r3,r3,65535
 400d398:	18e0001c 	xori	r3,r3,32768
 400d39c:	dc800215 	stw	r18,8(sp)
 400d3a0:	dc400115 	stw	r17,4(sp)
 400d3a4:	dc000015 	stw	r16,0(sp)
 400d3a8:	dfc00415 	stw	ra,16(sp)
 400d3ac:	18e00004 	addi	r3,r3,-32768
 400d3b0:	2821883a 	mov	r16,r5
 400d3b4:	2027883a 	mov	r19,r4
 400d3b8:	3025883a 	mov	r18,r6
 400d3bc:	3823883a 	mov	r17,r7
 400d3c0:	18000526 	beq	r3,zero,400d3d8 <__swrite+0x54>
 400d3c4:	2940038f 	ldh	r5,14(r5)
 400d3c8:	000d883a 	mov	r6,zero
 400d3cc:	01c00084 	movi	r7,2
 400d3d0:	400d8bc0 	call	400d8bc <_lseek_r>
 400d3d4:	8080030b 	ldhu	r2,12(r16)
 400d3d8:	8140038f 	ldh	r5,14(r16)
 400d3dc:	10bbffcc 	andi	r2,r2,61439
 400d3e0:	9809883a 	mov	r4,r19
 400d3e4:	900d883a 	mov	r6,r18
 400d3e8:	880f883a 	mov	r7,r17
 400d3ec:	8080030d 	sth	r2,12(r16)
 400d3f0:	dfc00417 	ldw	ra,16(sp)
 400d3f4:	dcc00317 	ldw	r19,12(sp)
 400d3f8:	dc800217 	ldw	r18,8(sp)
 400d3fc:	dc400117 	ldw	r17,4(sp)
 400d400:	dc000017 	ldw	r16,0(sp)
 400d404:	dec00504 	addi	sp,sp,20
 400d408:	400d5141 	jmpi	400d514 <_write_r>

0400d40c <__sseek>:
 400d40c:	defffe04 	addi	sp,sp,-8
 400d410:	dc000015 	stw	r16,0(sp)
 400d414:	2821883a 	mov	r16,r5
 400d418:	2940038f 	ldh	r5,14(r5)
 400d41c:	dfc00115 	stw	ra,4(sp)
 400d420:	400d8bc0 	call	400d8bc <_lseek_r>
 400d424:	00ffffc4 	movi	r3,-1
 400d428:	10c00826 	beq	r2,r3,400d44c <__sseek+0x40>
 400d42c:	80c0030b 	ldhu	r3,12(r16)
 400d430:	80801415 	stw	r2,80(r16)
 400d434:	18c40014 	ori	r3,r3,4096
 400d438:	80c0030d 	sth	r3,12(r16)
 400d43c:	dfc00117 	ldw	ra,4(sp)
 400d440:	dc000017 	ldw	r16,0(sp)
 400d444:	dec00204 	addi	sp,sp,8
 400d448:	f800283a 	ret
 400d44c:	80c0030b 	ldhu	r3,12(r16)
 400d450:	18fbffcc 	andi	r3,r3,61439
 400d454:	80c0030d 	sth	r3,12(r16)
 400d458:	dfc00117 	ldw	ra,4(sp)
 400d45c:	dc000017 	ldw	r16,0(sp)
 400d460:	dec00204 	addi	sp,sp,8
 400d464:	f800283a 	ret

0400d468 <__sclose>:
 400d468:	2940038f 	ldh	r5,14(r5)
 400d46c:	400d63c1 	jmpi	400d63c <_close_r>

0400d470 <strcmp>:
 400d470:	2904b03a 	or	r2,r5,r4
 400d474:	108000cc 	andi	r2,r2,3
 400d478:	1000171e 	bne	r2,zero,400d4d8 <strcmp+0x68>
 400d47c:	20800017 	ldw	r2,0(r4)
 400d480:	28c00017 	ldw	r3,0(r5)
 400d484:	10c0141e 	bne	r2,r3,400d4d8 <strcmp+0x68>
 400d488:	027fbff4 	movhi	r9,65279
 400d48c:	4a7fbfc4 	addi	r9,r9,-257
 400d490:	1247883a 	add	r3,r2,r9
 400d494:	0084303a 	nor	r2,zero,r2
 400d498:	1884703a 	and	r2,r3,r2
 400d49c:	02202074 	movhi	r8,32897
 400d4a0:	42202004 	addi	r8,r8,-32640
 400d4a4:	1204703a 	and	r2,r2,r8
 400d4a8:	10000226 	beq	r2,zero,400d4b4 <strcmp+0x44>
 400d4ac:	00001706 	br	400d50c <strcmp+0x9c>
 400d4b0:	3000161e 	bne	r6,zero,400d50c <strcmp+0x9c>
 400d4b4:	21000104 	addi	r4,r4,4
 400d4b8:	20800017 	ldw	r2,0(r4)
 400d4bc:	29400104 	addi	r5,r5,4
 400d4c0:	28c00017 	ldw	r3,0(r5)
 400d4c4:	124f883a 	add	r7,r2,r9
 400d4c8:	008c303a 	nor	r6,zero,r2
 400d4cc:	398c703a 	and	r6,r7,r6
 400d4d0:	320c703a 	and	r6,r6,r8
 400d4d4:	10fff626 	beq	r2,r3,400d4b0 <strcmp+0x40>
 400d4d8:	20800007 	ldb	r2,0(r4)
 400d4dc:	1000051e 	bne	r2,zero,400d4f4 <strcmp+0x84>
 400d4e0:	00000606 	br	400d4fc <strcmp+0x8c>
 400d4e4:	21000044 	addi	r4,r4,1
 400d4e8:	20800007 	ldb	r2,0(r4)
 400d4ec:	29400044 	addi	r5,r5,1
 400d4f0:	10000226 	beq	r2,zero,400d4fc <strcmp+0x8c>
 400d4f4:	28c00007 	ldb	r3,0(r5)
 400d4f8:	10fffa26 	beq	r2,r3,400d4e4 <strcmp+0x74>
 400d4fc:	20c00003 	ldbu	r3,0(r4)
 400d500:	28800003 	ldbu	r2,0(r5)
 400d504:	1885c83a 	sub	r2,r3,r2
 400d508:	f800283a 	ret
 400d50c:	0005883a 	mov	r2,zero
 400d510:	f800283a 	ret

0400d514 <_write_r>:
 400d514:	defffd04 	addi	sp,sp,-12
 400d518:	dc400115 	stw	r17,4(sp)
 400d51c:	dc000015 	stw	r16,0(sp)
 400d520:	2023883a 	mov	r17,r4
 400d524:	04010374 	movhi	r16,1037
 400d528:	84105404 	addi	r16,r16,16720
 400d52c:	2809883a 	mov	r4,r5
 400d530:	300b883a 	mov	r5,r6
 400d534:	380d883a 	mov	r6,r7
 400d538:	dfc00215 	stw	ra,8(sp)
 400d53c:	80000015 	stw	zero,0(r16)
 400d540:	400f2380 	call	400f238 <write>
 400d544:	00ffffc4 	movi	r3,-1
 400d548:	10c00526 	beq	r2,r3,400d560 <_write_r+0x4c>
 400d54c:	dfc00217 	ldw	ra,8(sp)
 400d550:	dc400117 	ldw	r17,4(sp)
 400d554:	dc000017 	ldw	r16,0(sp)
 400d558:	dec00304 	addi	sp,sp,12
 400d55c:	f800283a 	ret
 400d560:	80c00017 	ldw	r3,0(r16)
 400d564:	183ff926 	beq	r3,zero,400d54c <_write_r+0x38>
 400d568:	88c00015 	stw	r3,0(r17)
 400d56c:	dfc00217 	ldw	ra,8(sp)
 400d570:	dc400117 	ldw	r17,4(sp)
 400d574:	dc000017 	ldw	r16,0(sp)
 400d578:	dec00304 	addi	sp,sp,12
 400d57c:	f800283a 	ret

0400d580 <_calloc_r>:
 400d580:	314b383a 	mul	r5,r6,r5
 400d584:	defffe04 	addi	sp,sp,-8
 400d588:	dc000015 	stw	r16,0(sp)
 400d58c:	dfc00115 	stw	ra,4(sp)
 400d590:	400b14c0 	call	400b14c <_malloc_r>
 400d594:	1021883a 	mov	r16,r2
 400d598:	10000c26 	beq	r2,zero,400d5cc <_calloc_r+0x4c>
 400d59c:	11bfff17 	ldw	r6,-4(r2)
 400d5a0:	00ffff04 	movi	r3,-4
 400d5a4:	00800904 	movi	r2,36
 400d5a8:	30cc703a 	and	r6,r6,r3
 400d5ac:	30cd883a 	add	r6,r6,r3
 400d5b0:	11801436 	bltu	r2,r6,400d604 <_calloc_r+0x84>
 400d5b4:	00c004c4 	movi	r3,19
 400d5b8:	19800936 	bltu	r3,r6,400d5e0 <_calloc_r+0x60>
 400d5bc:	8005883a 	mov	r2,r16
 400d5c0:	10000015 	stw	zero,0(r2)
 400d5c4:	10000115 	stw	zero,4(r2)
 400d5c8:	10000215 	stw	zero,8(r2)
 400d5cc:	8005883a 	mov	r2,r16
 400d5d0:	dfc00117 	ldw	ra,4(sp)
 400d5d4:	dc000017 	ldw	r16,0(sp)
 400d5d8:	dec00204 	addi	sp,sp,8
 400d5dc:	f800283a 	ret
 400d5e0:	80000015 	stw	zero,0(r16)
 400d5e4:	80000115 	stw	zero,4(r16)
 400d5e8:	00c006c4 	movi	r3,27
 400d5ec:	19800d2e 	bgeu	r3,r6,400d624 <_calloc_r+0xa4>
 400d5f0:	80000215 	stw	zero,8(r16)
 400d5f4:	80000315 	stw	zero,12(r16)
 400d5f8:	30800c26 	beq	r6,r2,400d62c <_calloc_r+0xac>
 400d5fc:	80800404 	addi	r2,r16,16
 400d600:	003fef06 	br	400d5c0 <_calloc_r+0x40>
 400d604:	8009883a 	mov	r4,r16
 400d608:	000b883a 	mov	r5,zero
 400d60c:	400bbe80 	call	400bbe8 <memset>
 400d610:	8005883a 	mov	r2,r16
 400d614:	dfc00117 	ldw	ra,4(sp)
 400d618:	dc000017 	ldw	r16,0(sp)
 400d61c:	dec00204 	addi	sp,sp,8
 400d620:	f800283a 	ret
 400d624:	80800204 	addi	r2,r16,8
 400d628:	003fe506 	br	400d5c0 <_calloc_r+0x40>
 400d62c:	80000415 	stw	zero,16(r16)
 400d630:	80000515 	stw	zero,20(r16)
 400d634:	80800604 	addi	r2,r16,24
 400d638:	003fe106 	br	400d5c0 <_calloc_r+0x40>

0400d63c <_close_r>:
 400d63c:	defffd04 	addi	sp,sp,-12
 400d640:	dc400115 	stw	r17,4(sp)
 400d644:	dc000015 	stw	r16,0(sp)
 400d648:	2023883a 	mov	r17,r4
 400d64c:	04010374 	movhi	r16,1037
 400d650:	84105404 	addi	r16,r16,16720
 400d654:	2809883a 	mov	r4,r5
 400d658:	dfc00215 	stw	ra,8(sp)
 400d65c:	80000015 	stw	zero,0(r16)
 400d660:	400eab00 	call	400eab0 <close>
 400d664:	00ffffc4 	movi	r3,-1
 400d668:	10c00526 	beq	r2,r3,400d680 <_close_r+0x44>
 400d66c:	dfc00217 	ldw	ra,8(sp)
 400d670:	dc400117 	ldw	r17,4(sp)
 400d674:	dc000017 	ldw	r16,0(sp)
 400d678:	dec00304 	addi	sp,sp,12
 400d67c:	f800283a 	ret
 400d680:	80c00017 	ldw	r3,0(r16)
 400d684:	183ff926 	beq	r3,zero,400d66c <_close_r+0x30>
 400d688:	88c00015 	stw	r3,0(r17)
 400d68c:	dfc00217 	ldw	ra,8(sp)
 400d690:	dc400117 	ldw	r17,4(sp)
 400d694:	dc000017 	ldw	r16,0(sp)
 400d698:	dec00304 	addi	sp,sp,12
 400d69c:	f800283a 	ret

0400d6a0 <_fclose_r>:
 400d6a0:	defffc04 	addi	sp,sp,-16
 400d6a4:	dc400115 	stw	r17,4(sp)
 400d6a8:	dc000015 	stw	r16,0(sp)
 400d6ac:	dfc00315 	stw	ra,12(sp)
 400d6b0:	dc800215 	stw	r18,8(sp)
 400d6b4:	2821883a 	mov	r16,r5
 400d6b8:	2023883a 	mov	r17,r4
 400d6bc:	28003426 	beq	r5,zero,400d790 <_fclose_r+0xf0>
 400d6c0:	400a4380 	call	400a438 <__sfp_lock_acquire>
 400d6c4:	88000226 	beq	r17,zero,400d6d0 <_fclose_r+0x30>
 400d6c8:	88800e17 	ldw	r2,56(r17)
 400d6cc:	10003826 	beq	r2,zero,400d7b0 <_fclose_r+0x110>
 400d6d0:	8080030f 	ldh	r2,12(r16)
 400d6d4:	10002526 	beq	r2,zero,400d76c <_fclose_r+0xcc>
 400d6d8:	8809883a 	mov	r4,r17
 400d6dc:	800b883a 	mov	r5,r16
 400d6e0:	4009f880 	call	4009f88 <_fflush_r>
 400d6e4:	1025883a 	mov	r18,r2
 400d6e8:	80800b17 	ldw	r2,44(r16)
 400d6ec:	10000426 	beq	r2,zero,400d700 <_fclose_r+0x60>
 400d6f0:	81400717 	ldw	r5,28(r16)
 400d6f4:	8809883a 	mov	r4,r17
 400d6f8:	103ee83a 	callr	r2
 400d6fc:	10003516 	blt	r2,zero,400d7d4 <_fclose_r+0x134>
 400d700:	8080030b 	ldhu	r2,12(r16)
 400d704:	1080200c 	andi	r2,r2,128
 400d708:	10bfffcc 	andi	r2,r2,65535
 400d70c:	10a0001c 	xori	r2,r2,32768
 400d710:	10a00004 	addi	r2,r2,-32768
 400d714:	10002b1e 	bne	r2,zero,400d7c4 <_fclose_r+0x124>
 400d718:	81400c17 	ldw	r5,48(r16)
 400d71c:	28000526 	beq	r5,zero,400d734 <_fclose_r+0x94>
 400d720:	80801004 	addi	r2,r16,64
 400d724:	28800226 	beq	r5,r2,400d730 <_fclose_r+0x90>
 400d728:	8809883a 	mov	r4,r17
 400d72c:	400a5b40 	call	400a5b4 <_free_r>
 400d730:	80000c15 	stw	zero,48(r16)
 400d734:	81401117 	ldw	r5,68(r16)
 400d738:	28000326 	beq	r5,zero,400d748 <_fclose_r+0xa8>
 400d73c:	8809883a 	mov	r4,r17
 400d740:	400a5b40 	call	400a5b4 <_free_r>
 400d744:	80001115 	stw	zero,68(r16)
 400d748:	8000030d 	sth	zero,12(r16)
 400d74c:	400a43c0 	call	400a43c <__sfp_lock_release>
 400d750:	9005883a 	mov	r2,r18
 400d754:	dfc00317 	ldw	ra,12(sp)
 400d758:	dc800217 	ldw	r18,8(sp)
 400d75c:	dc400117 	ldw	r17,4(sp)
 400d760:	dc000017 	ldw	r16,0(sp)
 400d764:	dec00404 	addi	sp,sp,16
 400d768:	f800283a 	ret
 400d76c:	400a43c0 	call	400a43c <__sfp_lock_release>
 400d770:	0025883a 	mov	r18,zero
 400d774:	9005883a 	mov	r2,r18
 400d778:	dfc00317 	ldw	ra,12(sp)
 400d77c:	dc800217 	ldw	r18,8(sp)
 400d780:	dc400117 	ldw	r17,4(sp)
 400d784:	dc000017 	ldw	r16,0(sp)
 400d788:	dec00404 	addi	sp,sp,16
 400d78c:	f800283a 	ret
 400d790:	0025883a 	mov	r18,zero
 400d794:	9005883a 	mov	r2,r18
 400d798:	dfc00317 	ldw	ra,12(sp)
 400d79c:	dc800217 	ldw	r18,8(sp)
 400d7a0:	dc400117 	ldw	r17,4(sp)
 400d7a4:	dc000017 	ldw	r16,0(sp)
 400d7a8:	dec00404 	addi	sp,sp,16
 400d7ac:	f800283a 	ret
 400d7b0:	8809883a 	mov	r4,r17
 400d7b4:	400a2300 	call	400a230 <__sinit>
 400d7b8:	8080030f 	ldh	r2,12(r16)
 400d7bc:	103fc61e 	bne	r2,zero,400d6d8 <_fclose_r+0x38>
 400d7c0:	003fea06 	br	400d76c <_fclose_r+0xcc>
 400d7c4:	81400417 	ldw	r5,16(r16)
 400d7c8:	8809883a 	mov	r4,r17
 400d7cc:	400a5b40 	call	400a5b4 <_free_r>
 400d7d0:	003fd106 	br	400d718 <_fclose_r+0x78>
 400d7d4:	04bfffc4 	movi	r18,-1
 400d7d8:	003fc906 	br	400d700 <_fclose_r+0x60>

0400d7dc <fclose>:
 400d7dc:	00810374 	movhi	r2,1037
 400d7e0:	10903e04 	addi	r2,r2,16632
 400d7e4:	200b883a 	mov	r5,r4
 400d7e8:	11000017 	ldw	r4,0(r2)
 400d7ec:	400d6a01 	jmpi	400d6a0 <_fclose_r>

0400d7f0 <_fstat_r>:
 400d7f0:	defffd04 	addi	sp,sp,-12
 400d7f4:	dc400115 	stw	r17,4(sp)
 400d7f8:	dc000015 	stw	r16,0(sp)
 400d7fc:	2023883a 	mov	r17,r4
 400d800:	04010374 	movhi	r16,1037
 400d804:	84105404 	addi	r16,r16,16720
 400d808:	2809883a 	mov	r4,r5
 400d80c:	300b883a 	mov	r5,r6
 400d810:	dfc00215 	stw	ra,8(sp)
 400d814:	80000015 	stw	zero,0(r16)
 400d818:	400ebf40 	call	400ebf4 <fstat>
 400d81c:	00ffffc4 	movi	r3,-1
 400d820:	10c00526 	beq	r2,r3,400d838 <_fstat_r+0x48>
 400d824:	dfc00217 	ldw	ra,8(sp)
 400d828:	dc400117 	ldw	r17,4(sp)
 400d82c:	dc000017 	ldw	r16,0(sp)
 400d830:	dec00304 	addi	sp,sp,12
 400d834:	f800283a 	ret
 400d838:	80c00017 	ldw	r3,0(r16)
 400d83c:	183ff926 	beq	r3,zero,400d824 <_fstat_r+0x34>
 400d840:	88c00015 	stw	r3,0(r17)
 400d844:	dfc00217 	ldw	ra,8(sp)
 400d848:	dc400117 	ldw	r17,4(sp)
 400d84c:	dc000017 	ldw	r16,0(sp)
 400d850:	dec00304 	addi	sp,sp,12
 400d854:	f800283a 	ret

0400d858 <_isatty_r>:
 400d858:	defffd04 	addi	sp,sp,-12
 400d85c:	dc400115 	stw	r17,4(sp)
 400d860:	dc000015 	stw	r16,0(sp)
 400d864:	2023883a 	mov	r17,r4
 400d868:	04010374 	movhi	r16,1037
 400d86c:	84105404 	addi	r16,r16,16720
 400d870:	2809883a 	mov	r4,r5
 400d874:	dfc00215 	stw	ra,8(sp)
 400d878:	80000015 	stw	zero,0(r16)
 400d87c:	400ecf00 	call	400ecf0 <isatty>
 400d880:	00ffffc4 	movi	r3,-1
 400d884:	10c00526 	beq	r2,r3,400d89c <_isatty_r+0x44>
 400d888:	dfc00217 	ldw	ra,8(sp)
 400d88c:	dc400117 	ldw	r17,4(sp)
 400d890:	dc000017 	ldw	r16,0(sp)
 400d894:	dec00304 	addi	sp,sp,12
 400d898:	f800283a 	ret
 400d89c:	80c00017 	ldw	r3,0(r16)
 400d8a0:	183ff926 	beq	r3,zero,400d888 <_isatty_r+0x30>
 400d8a4:	88c00015 	stw	r3,0(r17)
 400d8a8:	dfc00217 	ldw	ra,8(sp)
 400d8ac:	dc400117 	ldw	r17,4(sp)
 400d8b0:	dc000017 	ldw	r16,0(sp)
 400d8b4:	dec00304 	addi	sp,sp,12
 400d8b8:	f800283a 	ret

0400d8bc <_lseek_r>:
 400d8bc:	defffd04 	addi	sp,sp,-12
 400d8c0:	dc400115 	stw	r17,4(sp)
 400d8c4:	dc000015 	stw	r16,0(sp)
 400d8c8:	2023883a 	mov	r17,r4
 400d8cc:	04010374 	movhi	r16,1037
 400d8d0:	84105404 	addi	r16,r16,16720
 400d8d4:	2809883a 	mov	r4,r5
 400d8d8:	300b883a 	mov	r5,r6
 400d8dc:	380d883a 	mov	r6,r7
 400d8e0:	dfc00215 	stw	ra,8(sp)
 400d8e4:	80000015 	stw	zero,0(r16)
 400d8e8:	400ede00 	call	400ede0 <lseek>
 400d8ec:	00ffffc4 	movi	r3,-1
 400d8f0:	10c00526 	beq	r2,r3,400d908 <_lseek_r+0x4c>
 400d8f4:	dfc00217 	ldw	ra,8(sp)
 400d8f8:	dc400117 	ldw	r17,4(sp)
 400d8fc:	dc000017 	ldw	r16,0(sp)
 400d900:	dec00304 	addi	sp,sp,12
 400d904:	f800283a 	ret
 400d908:	80c00017 	ldw	r3,0(r16)
 400d90c:	183ff926 	beq	r3,zero,400d8f4 <_lseek_r+0x38>
 400d910:	88c00015 	stw	r3,0(r17)
 400d914:	dfc00217 	ldw	ra,8(sp)
 400d918:	dc400117 	ldw	r17,4(sp)
 400d91c:	dc000017 	ldw	r16,0(sp)
 400d920:	dec00304 	addi	sp,sp,12
 400d924:	f800283a 	ret

0400d928 <_read_r>:
 400d928:	defffd04 	addi	sp,sp,-12
 400d92c:	dc400115 	stw	r17,4(sp)
 400d930:	dc000015 	stw	r16,0(sp)
 400d934:	2023883a 	mov	r17,r4
 400d938:	04010374 	movhi	r16,1037
 400d93c:	84105404 	addi	r16,r16,16720
 400d940:	2809883a 	mov	r4,r5
 400d944:	300b883a 	mov	r5,r6
 400d948:	380d883a 	mov	r6,r7
 400d94c:	dfc00215 	stw	ra,8(sp)
 400d950:	80000015 	stw	zero,0(r16)
 400d954:	400efb80 	call	400efb8 <read>
 400d958:	00ffffc4 	movi	r3,-1
 400d95c:	10c00526 	beq	r2,r3,400d974 <_read_r+0x4c>
 400d960:	dfc00217 	ldw	ra,8(sp)
 400d964:	dc400117 	ldw	r17,4(sp)
 400d968:	dc000017 	ldw	r16,0(sp)
 400d96c:	dec00304 	addi	sp,sp,12
 400d970:	f800283a 	ret
 400d974:	80c00017 	ldw	r3,0(r16)
 400d978:	183ff926 	beq	r3,zero,400d960 <_read_r+0x38>
 400d97c:	88c00015 	stw	r3,0(r17)
 400d980:	dfc00217 	ldw	ra,8(sp)
 400d984:	dc400117 	ldw	r17,4(sp)
 400d988:	dc000017 	ldw	r16,0(sp)
 400d98c:	dec00304 	addi	sp,sp,12
 400d990:	f800283a 	ret

0400d994 <__udivdi3>:
 400d994:	defff504 	addi	sp,sp,-44
 400d998:	dd000515 	stw	r20,20(sp)
 400d99c:	dcc00415 	stw	r19,16(sp)
 400d9a0:	dc800315 	stw	r18,12(sp)
 400d9a4:	dc400215 	stw	r17,8(sp)
 400d9a8:	dc000115 	stw	r16,4(sp)
 400d9ac:	dfc00a15 	stw	ra,40(sp)
 400d9b0:	df000915 	stw	fp,36(sp)
 400d9b4:	ddc00815 	stw	r23,32(sp)
 400d9b8:	dd800715 	stw	r22,28(sp)
 400d9bc:	dd400615 	stw	r21,24(sp)
 400d9c0:	2025883a 	mov	r18,r4
 400d9c4:	2823883a 	mov	r17,r5
 400d9c8:	3021883a 	mov	r16,r6
 400d9cc:	2027883a 	mov	r19,r4
 400d9d0:	2829883a 	mov	r20,r5
 400d9d4:	3800401e 	bne	r7,zero,400dad8 <__udivdi3+0x144>
 400d9d8:	2980602e 	bgeu	r5,r6,400db5c <__udivdi3+0x1c8>
 400d9dc:	00bfffd4 	movui	r2,65535
 400d9e0:	1180aa36 	bltu	r2,r6,400dc8c <__udivdi3+0x2f8>
 400d9e4:	00803fc4 	movi	r2,255
 400d9e8:	11814436 	bltu	r2,r6,400defc <__udivdi3+0x568>
 400d9ec:	0005883a 	mov	r2,zero
 400d9f0:	0007883a 	mov	r3,zero
 400d9f4:	3084d83a 	srl	r2,r6,r2
 400d9f8:	01010374 	movhi	r4,1037
 400d9fc:	2108bc04 	addi	r4,r4,8944
 400da00:	2085883a 	add	r2,r4,r2
 400da04:	10800003 	ldbu	r2,0(r2)
 400da08:	10c7883a 	add	r3,r2,r3
 400da0c:	00800804 	movi	r2,32
 400da10:	10c5c83a 	sub	r2,r2,r3
 400da14:	10000526 	beq	r2,zero,400da2c <__udivdi3+0x98>
 400da18:	88a2983a 	sll	r17,r17,r2
 400da1c:	90c6d83a 	srl	r3,r18,r3
 400da20:	30a0983a 	sll	r16,r6,r2
 400da24:	90a6983a 	sll	r19,r18,r2
 400da28:	88e8b03a 	or	r20,r17,r3
 400da2c:	8022d43a 	srli	r17,r16,16
 400da30:	a009883a 	mov	r4,r20
 400da34:	857fffcc 	andi	r21,r16,65535
 400da38:	880b883a 	mov	r5,r17
 400da3c:	400ea580 	call	400ea58 <__umodsi3>
 400da40:	a009883a 	mov	r4,r20
 400da44:	880b883a 	mov	r5,r17
 400da48:	102d883a 	mov	r22,r2
 400da4c:	400ea500 	call	400ea50 <__udivsi3>
 400da50:	b02c943a 	slli	r22,r22,16
 400da54:	9806d43a 	srli	r3,r19,16
 400da58:	1549383a 	mul	r4,r2,r21
 400da5c:	1025883a 	mov	r18,r2
 400da60:	b0c6b03a 	or	r3,r22,r3
 400da64:	1900052e 	bgeu	r3,r4,400da7c <__udivdi3+0xe8>
 400da68:	1c07883a 	add	r3,r3,r16
 400da6c:	10bfffc4 	addi	r2,r2,-1
 400da70:	1c000136 	bltu	r3,r16,400da78 <__udivdi3+0xe4>
 400da74:	19013636 	bltu	r3,r4,400df50 <__udivdi3+0x5bc>
 400da78:	1025883a 	mov	r18,r2
 400da7c:	1929c83a 	sub	r20,r3,r4
 400da80:	a009883a 	mov	r4,r20
 400da84:	880b883a 	mov	r5,r17
 400da88:	400ea580 	call	400ea58 <__umodsi3>
 400da8c:	102d883a 	mov	r22,r2
 400da90:	a009883a 	mov	r4,r20
 400da94:	880b883a 	mov	r5,r17
 400da98:	400ea500 	call	400ea50 <__udivsi3>
 400da9c:	b02c943a 	slli	r22,r22,16
 400daa0:	156b383a 	mul	r21,r2,r21
 400daa4:	9cffffcc 	andi	r19,r19,65535
 400daa8:	b4e6b03a 	or	r19,r22,r19
 400daac:	1009883a 	mov	r4,r2
 400dab0:	9d40052e 	bgeu	r19,r21,400dac8 <__udivdi3+0x134>
 400dab4:	9c27883a 	add	r19,r19,r16
 400dab8:	10bfffc4 	addi	r2,r2,-1
 400dabc:	9c00f736 	bltu	r19,r16,400de9c <__udivdi3+0x508>
 400dac0:	9d40f62e 	bgeu	r19,r21,400de9c <__udivdi3+0x508>
 400dac4:	213fff84 	addi	r4,r4,-2
 400dac8:	9004943a 	slli	r2,r18,16
 400dacc:	0007883a 	mov	r3,zero
 400dad0:	2084b03a 	or	r2,r4,r2
 400dad4:	00001506 	br	400db2c <__udivdi3+0x198>
 400dad8:	29c06536 	bltu	r5,r7,400dc70 <__udivdi3+0x2dc>
 400dadc:	00bfffd4 	movui	r2,65535
 400dae0:	11c0652e 	bgeu	r2,r7,400dc78 <__udivdi3+0x2e4>
 400dae4:	00804034 	movhi	r2,256
 400dae8:	10bfffc4 	addi	r2,r2,-1
 400daec:	11c0f736 	bltu	r2,r7,400decc <__udivdi3+0x538>
 400daf0:	00c00404 	movi	r3,16
 400daf4:	180b883a 	mov	r5,r3
 400daf8:	38c6d83a 	srl	r3,r7,r3
 400dafc:	01010374 	movhi	r4,1037
 400db00:	2108bc04 	addi	r4,r4,8944
 400db04:	04000804 	movi	r16,32
 400db08:	20c7883a 	add	r3,r4,r3
 400db0c:	18800003 	ldbu	r2,0(r3)
 400db10:	1145883a 	add	r2,r2,r5
 400db14:	80a1c83a 	sub	r16,r16,r2
 400db18:	8000691e 	bne	r16,zero,400dcc0 <__udivdi3+0x32c>
 400db1c:	0007883a 	mov	r3,zero
 400db20:	3c406536 	bltu	r7,r17,400dcb8 <__udivdi3+0x324>
 400db24:	9180642e 	bgeu	r18,r6,400dcb8 <__udivdi3+0x324>
 400db28:	0005883a 	mov	r2,zero
 400db2c:	dfc00a17 	ldw	ra,40(sp)
 400db30:	df000917 	ldw	fp,36(sp)
 400db34:	ddc00817 	ldw	r23,32(sp)
 400db38:	dd800717 	ldw	r22,28(sp)
 400db3c:	dd400617 	ldw	r21,24(sp)
 400db40:	dd000517 	ldw	r20,20(sp)
 400db44:	dcc00417 	ldw	r19,16(sp)
 400db48:	dc800317 	ldw	r18,12(sp)
 400db4c:	dc400217 	ldw	r17,8(sp)
 400db50:	dc000117 	ldw	r16,4(sp)
 400db54:	dec00b04 	addi	sp,sp,44
 400db58:	f800283a 	ret
 400db5c:	3000041e 	bne	r6,zero,400db70 <__udivdi3+0x1dc>
 400db60:	01000044 	movi	r4,1
 400db64:	000b883a 	mov	r5,zero
 400db68:	400ea500 	call	400ea50 <__udivsi3>
 400db6c:	1021883a 	mov	r16,r2
 400db70:	00bfffd4 	movui	r2,65535
 400db74:	14004b2e 	bgeu	r2,r16,400dca4 <__udivdi3+0x310>
 400db78:	00804034 	movhi	r2,256
 400db7c:	10bfffc4 	addi	r2,r2,-1
 400db80:	1400d836 	bltu	r2,r16,400dee4 <__udivdi3+0x550>
 400db84:	00800404 	movi	r2,16
 400db88:	1007883a 	mov	r3,r2
 400db8c:	8084d83a 	srl	r2,r16,r2
 400db90:	01010374 	movhi	r4,1037
 400db94:	2108bc04 	addi	r4,r4,8944
 400db98:	2085883a 	add	r2,r4,r2
 400db9c:	10800003 	ldbu	r2,0(r2)
 400dba0:	10c7883a 	add	r3,r2,r3
 400dba4:	00800804 	movi	r2,32
 400dba8:	10c5c83a 	sub	r2,r2,r3
 400dbac:	1000891e 	bne	r2,zero,400ddd4 <__udivdi3+0x440>
 400dbb0:	8028d43a 	srli	r20,r16,16
 400dbb4:	8c23c83a 	sub	r17,r17,r16
 400dbb8:	84bfffcc 	andi	r18,r16,65535
 400dbbc:	00c00044 	movi	r3,1
 400dbc0:	8809883a 	mov	r4,r17
 400dbc4:	a00b883a 	mov	r5,r20
 400dbc8:	d8c00015 	stw	r3,0(sp)
 400dbcc:	400ea580 	call	400ea58 <__umodsi3>
 400dbd0:	8809883a 	mov	r4,r17
 400dbd4:	a00b883a 	mov	r5,r20
 400dbd8:	102b883a 	mov	r21,r2
 400dbdc:	400ea500 	call	400ea50 <__udivsi3>
 400dbe0:	a82a943a 	slli	r21,r21,16
 400dbe4:	9808d43a 	srli	r4,r19,16
 400dbe8:	148b383a 	mul	r5,r2,r18
 400dbec:	1023883a 	mov	r17,r2
 400dbf0:	a908b03a 	or	r4,r21,r4
 400dbf4:	d8c00017 	ldw	r3,0(sp)
 400dbf8:	2140052e 	bgeu	r4,r5,400dc10 <__udivdi3+0x27c>
 400dbfc:	2409883a 	add	r4,r4,r16
 400dc00:	10bfffc4 	addi	r2,r2,-1
 400dc04:	24000136 	bltu	r4,r16,400dc0c <__udivdi3+0x278>
 400dc08:	2140ce36 	bltu	r4,r5,400df44 <__udivdi3+0x5b0>
 400dc0c:	1023883a 	mov	r17,r2
 400dc10:	216bc83a 	sub	r21,r4,r5
 400dc14:	a809883a 	mov	r4,r21
 400dc18:	a00b883a 	mov	r5,r20
 400dc1c:	d8c00015 	stw	r3,0(sp)
 400dc20:	400ea580 	call	400ea58 <__umodsi3>
 400dc24:	102d883a 	mov	r22,r2
 400dc28:	a809883a 	mov	r4,r21
 400dc2c:	a00b883a 	mov	r5,r20
 400dc30:	400ea500 	call	400ea50 <__udivsi3>
 400dc34:	b02c943a 	slli	r22,r22,16
 400dc38:	14a5383a 	mul	r18,r2,r18
 400dc3c:	9cffffcc 	andi	r19,r19,65535
 400dc40:	b4e6b03a 	or	r19,r22,r19
 400dc44:	1009883a 	mov	r4,r2
 400dc48:	d8c00017 	ldw	r3,0(sp)
 400dc4c:	9c80052e 	bgeu	r19,r18,400dc64 <__udivdi3+0x2d0>
 400dc50:	9c27883a 	add	r19,r19,r16
 400dc54:	10bfffc4 	addi	r2,r2,-1
 400dc58:	9c009236 	bltu	r19,r16,400dea4 <__udivdi3+0x510>
 400dc5c:	9c80912e 	bgeu	r19,r18,400dea4 <__udivdi3+0x510>
 400dc60:	213fff84 	addi	r4,r4,-2
 400dc64:	8804943a 	slli	r2,r17,16
 400dc68:	2084b03a 	or	r2,r4,r2
 400dc6c:	003faf06 	br	400db2c <__udivdi3+0x198>
 400dc70:	0007883a 	mov	r3,zero
 400dc74:	003fac06 	br	400db28 <__udivdi3+0x194>
 400dc78:	00803fc4 	movi	r2,255
 400dc7c:	11c09636 	bltu	r2,r7,400ded8 <__udivdi3+0x544>
 400dc80:	0007883a 	mov	r3,zero
 400dc84:	000b883a 	mov	r5,zero
 400dc88:	003f9b06 	br	400daf8 <__udivdi3+0x164>
 400dc8c:	00804034 	movhi	r2,256
 400dc90:	10bfffc4 	addi	r2,r2,-1
 400dc94:	11809636 	bltu	r2,r6,400def0 <__udivdi3+0x55c>
 400dc98:	00800404 	movi	r2,16
 400dc9c:	1007883a 	mov	r3,r2
 400dca0:	003f5406 	br	400d9f4 <__udivdi3+0x60>
 400dca4:	00803fc4 	movi	r2,255
 400dca8:	14009736 	bltu	r2,r16,400df08 <__udivdi3+0x574>
 400dcac:	0005883a 	mov	r2,zero
 400dcb0:	0007883a 	mov	r3,zero
 400dcb4:	003fb506 	br	400db8c <__udivdi3+0x1f8>
 400dcb8:	00800044 	movi	r2,1
 400dcbc:	003f9b06 	br	400db2c <__udivdi3+0x198>
 400dcc0:	3086d83a 	srl	r3,r6,r2
 400dcc4:	3c0e983a 	sll	r7,r7,r16
 400dcc8:	88aad83a 	srl	r21,r17,r2
 400dccc:	9084d83a 	srl	r2,r18,r2
 400dcd0:	38e6b03a 	or	r19,r7,r3
 400dcd4:	9828d43a 	srli	r20,r19,16
 400dcd8:	8c22983a 	sll	r17,r17,r16
 400dcdc:	a809883a 	mov	r4,r21
 400dce0:	a00b883a 	mov	r5,r20
 400dce4:	342c983a 	sll	r22,r6,r16
 400dce8:	88a2b03a 	or	r17,r17,r2
 400dcec:	400ea580 	call	400ea58 <__umodsi3>
 400dcf0:	a809883a 	mov	r4,r21
 400dcf4:	a00b883a 	mov	r5,r20
 400dcf8:	1039883a 	mov	fp,r2
 400dcfc:	400ea500 	call	400ea50 <__udivsi3>
 400dd00:	102b883a 	mov	r21,r2
 400dd04:	9dffffcc 	andi	r23,r19,65535
 400dd08:	e008943a 	slli	r4,fp,16
 400dd0c:	8804d43a 	srli	r2,r17,16
 400dd10:	adcd383a 	mul	r6,r21,r23
 400dd14:	2088b03a 	or	r4,r4,r2
 400dd18:	2180042e 	bgeu	r4,r6,400dd2c <__udivdi3+0x398>
 400dd1c:	24c9883a 	add	r4,r4,r19
 400dd20:	a8bfffc4 	addi	r2,r21,-1
 400dd24:	24c07f2e 	bgeu	r4,r19,400df24 <__udivdi3+0x590>
 400dd28:	102b883a 	mov	r21,r2
 400dd2c:	21b9c83a 	sub	fp,r4,r6
 400dd30:	e009883a 	mov	r4,fp
 400dd34:	a00b883a 	mov	r5,r20
 400dd38:	400ea580 	call	400ea58 <__umodsi3>
 400dd3c:	e009883a 	mov	r4,fp
 400dd40:	a00b883a 	mov	r5,r20
 400dd44:	d8800015 	stw	r2,0(sp)
 400dd48:	400ea500 	call	400ea50 <__udivsi3>
 400dd4c:	d8c00017 	ldw	r3,0(sp)
 400dd50:	15cb383a 	mul	r5,r2,r23
 400dd54:	8c7fffcc 	andi	r17,r17,65535
 400dd58:	1806943a 	slli	r3,r3,16
 400dd5c:	1009883a 	mov	r4,r2
 400dd60:	1c46b03a 	or	r3,r3,r17
 400dd64:	1940042e 	bgeu	r3,r5,400dd78 <__udivdi3+0x3e4>
 400dd68:	1cc7883a 	add	r3,r3,r19
 400dd6c:	10bfffc4 	addi	r2,r2,-1
 400dd70:	1cc0682e 	bgeu	r3,r19,400df14 <__udivdi3+0x580>
 400dd74:	1009883a 	mov	r4,r2
 400dd78:	a804943a 	slli	r2,r21,16
 400dd7c:	b1ffffcc 	andi	r7,r22,65535
 400dd80:	b02cd43a 	srli	r22,r22,16
 400dd84:	2084b03a 	or	r2,r4,r2
 400dd88:	113fffcc 	andi	r4,r2,65535
 400dd8c:	100cd43a 	srli	r6,r2,16
 400dd90:	21d1383a 	mul	r8,r4,r7
 400dd94:	2589383a 	mul	r4,r4,r22
 400dd98:	31cf383a 	mul	r7,r6,r7
 400dd9c:	4012d43a 	srli	r9,r8,16
 400dda0:	1947c83a 	sub	r3,r3,r5
 400dda4:	3909883a 	add	r4,r7,r4
 400dda8:	2249883a 	add	r4,r4,r9
 400ddac:	35ad383a 	mul	r22,r6,r22
 400ddb0:	21c0022e 	bgeu	r4,r7,400ddbc <__udivdi3+0x428>
 400ddb4:	01400074 	movhi	r5,1
 400ddb8:	b16d883a 	add	r22,r22,r5
 400ddbc:	200ad43a 	srli	r5,r4,16
 400ddc0:	b16d883a 	add	r22,r22,r5
 400ddc4:	1d803e36 	bltu	r3,r22,400dec0 <__udivdi3+0x52c>
 400ddc8:	1d803826 	beq	r3,r22,400deac <__udivdi3+0x518>
 400ddcc:	0007883a 	mov	r3,zero
 400ddd0:	003f5606 	br	400db2c <__udivdi3+0x198>
 400ddd4:	80a0983a 	sll	r16,r16,r2
 400ddd8:	88ead83a 	srl	r21,r17,r3
 400dddc:	90c6d83a 	srl	r3,r18,r3
 400dde0:	8028d43a 	srli	r20,r16,16
 400dde4:	88a2983a 	sll	r17,r17,r2
 400dde8:	a809883a 	mov	r4,r21
 400ddec:	a00b883a 	mov	r5,r20
 400ddf0:	88ecb03a 	or	r22,r17,r3
 400ddf4:	90a6983a 	sll	r19,r18,r2
 400ddf8:	400ea580 	call	400ea58 <__umodsi3>
 400ddfc:	a809883a 	mov	r4,r21
 400de00:	a00b883a 	mov	r5,r20
 400de04:	1023883a 	mov	r17,r2
 400de08:	400ea500 	call	400ea50 <__udivsi3>
 400de0c:	102b883a 	mov	r21,r2
 400de10:	84bfffcc 	andi	r18,r16,65535
 400de14:	8808943a 	slli	r4,r17,16
 400de18:	b004d43a 	srli	r2,r22,16
 400de1c:	ac87383a 	mul	r3,r21,r18
 400de20:	2088b03a 	or	r4,r4,r2
 400de24:	20c0062e 	bgeu	r4,r3,400de40 <__udivdi3+0x4ac>
 400de28:	2409883a 	add	r4,r4,r16
 400de2c:	a8bfffc4 	addi	r2,r21,-1
 400de30:	24004236 	bltu	r4,r16,400df3c <__udivdi3+0x5a8>
 400de34:	20c0412e 	bgeu	r4,r3,400df3c <__udivdi3+0x5a8>
 400de38:	ad7fff84 	addi	r21,r21,-2
 400de3c:	2409883a 	add	r4,r4,r16
 400de40:	20efc83a 	sub	r23,r4,r3
 400de44:	b809883a 	mov	r4,r23
 400de48:	a00b883a 	mov	r5,r20
 400de4c:	400ea580 	call	400ea58 <__umodsi3>
 400de50:	1023883a 	mov	r17,r2
 400de54:	a00b883a 	mov	r5,r20
 400de58:	b809883a 	mov	r4,r23
 400de5c:	400ea500 	call	400ea50 <__udivsi3>
 400de60:	8822943a 	slli	r17,r17,16
 400de64:	148b383a 	mul	r5,r2,r18
 400de68:	b5bfffcc 	andi	r22,r22,65535
 400de6c:	8da2b03a 	or	r17,r17,r22
 400de70:	8940062e 	bgeu	r17,r5,400de8c <__udivdi3+0x4f8>
 400de74:	8c23883a 	add	r17,r17,r16
 400de78:	10ffffc4 	addi	r3,r2,-1
 400de7c:	8c002d36 	bltu	r17,r16,400df34 <__udivdi3+0x5a0>
 400de80:	89402c2e 	bgeu	r17,r5,400df34 <__udivdi3+0x5a0>
 400de84:	10bfff84 	addi	r2,r2,-2
 400de88:	8c23883a 	add	r17,r17,r16
 400de8c:	a806943a 	slli	r3,r21,16
 400de90:	8963c83a 	sub	r17,r17,r5
 400de94:	10c6b03a 	or	r3,r2,r3
 400de98:	003f4906 	br	400dbc0 <__udivdi3+0x22c>
 400de9c:	1009883a 	mov	r4,r2
 400dea0:	003f0906 	br	400dac8 <__udivdi3+0x134>
 400dea4:	1009883a 	mov	r4,r2
 400dea8:	003f6e06 	br	400dc64 <__udivdi3+0x2d0>
 400deac:	2008943a 	slli	r4,r4,16
 400deb0:	9420983a 	sll	r16,r18,r16
 400deb4:	423fffcc 	andi	r8,r8,65535
 400deb8:	2209883a 	add	r4,r4,r8
 400debc:	813fc32e 	bgeu	r16,r4,400ddcc <__udivdi3+0x438>
 400dec0:	10bfffc4 	addi	r2,r2,-1
 400dec4:	0007883a 	mov	r3,zero
 400dec8:	003f1806 	br	400db2c <__udivdi3+0x198>
 400decc:	00c00604 	movi	r3,24
 400ded0:	180b883a 	mov	r5,r3
 400ded4:	003f0806 	br	400daf8 <__udivdi3+0x164>
 400ded8:	00c00204 	movi	r3,8
 400dedc:	180b883a 	mov	r5,r3
 400dee0:	003f0506 	br	400daf8 <__udivdi3+0x164>
 400dee4:	00800604 	movi	r2,24
 400dee8:	1007883a 	mov	r3,r2
 400deec:	003f2706 	br	400db8c <__udivdi3+0x1f8>
 400def0:	00800604 	movi	r2,24
 400def4:	1007883a 	mov	r3,r2
 400def8:	003ebe06 	br	400d9f4 <__udivdi3+0x60>
 400defc:	00800204 	movi	r2,8
 400df00:	1007883a 	mov	r3,r2
 400df04:	003ebb06 	br	400d9f4 <__udivdi3+0x60>
 400df08:	00800204 	movi	r2,8
 400df0c:	1007883a 	mov	r3,r2
 400df10:	003f1e06 	br	400db8c <__udivdi3+0x1f8>
 400df14:	197f972e 	bgeu	r3,r5,400dd74 <__udivdi3+0x3e0>
 400df18:	213fff84 	addi	r4,r4,-2
 400df1c:	1cc7883a 	add	r3,r3,r19
 400df20:	003f9506 	br	400dd78 <__udivdi3+0x3e4>
 400df24:	21bf802e 	bgeu	r4,r6,400dd28 <__udivdi3+0x394>
 400df28:	ad7fff84 	addi	r21,r21,-2
 400df2c:	24c9883a 	add	r4,r4,r19
 400df30:	003f7e06 	br	400dd2c <__udivdi3+0x398>
 400df34:	1805883a 	mov	r2,r3
 400df38:	003fd406 	br	400de8c <__udivdi3+0x4f8>
 400df3c:	102b883a 	mov	r21,r2
 400df40:	003fbf06 	br	400de40 <__udivdi3+0x4ac>
 400df44:	8c7fff84 	addi	r17,r17,-2
 400df48:	2409883a 	add	r4,r4,r16
 400df4c:	003f3006 	br	400dc10 <__udivdi3+0x27c>
 400df50:	94bfff84 	addi	r18,r18,-2
 400df54:	1c07883a 	add	r3,r3,r16
 400df58:	003ec806 	br	400da7c <__udivdi3+0xe8>

0400df5c <__umoddi3>:
 400df5c:	defff504 	addi	sp,sp,-44
 400df60:	dd000515 	stw	r20,20(sp)
 400df64:	dcc00415 	stw	r19,16(sp)
 400df68:	dc800315 	stw	r18,12(sp)
 400df6c:	dc400215 	stw	r17,8(sp)
 400df70:	dc000115 	stw	r16,4(sp)
 400df74:	dfc00a15 	stw	ra,40(sp)
 400df78:	df000915 	stw	fp,36(sp)
 400df7c:	ddc00815 	stw	r23,32(sp)
 400df80:	dd800715 	stw	r22,28(sp)
 400df84:	dd400615 	stw	r21,24(sp)
 400df88:	2025883a 	mov	r18,r4
 400df8c:	2823883a 	mov	r17,r5
 400df90:	3021883a 	mov	r16,r6
 400df94:	2027883a 	mov	r19,r4
 400df98:	2829883a 	mov	r20,r5
 400df9c:	3800351e 	bne	r7,zero,400e074 <__umoddi3+0x118>
 400dfa0:	29804d2e 	bgeu	r5,r6,400e0d8 <__umoddi3+0x17c>
 400dfa4:	00bfffd4 	movui	r2,65535
 400dfa8:	11809a36 	bltu	r2,r6,400e214 <__umoddi3+0x2b8>
 400dfac:	00803fc4 	movi	r2,255
 400dfb0:	11813936 	bltu	r2,r6,400e498 <__umoddi3+0x53c>
 400dfb4:	0005883a 	mov	r2,zero
 400dfb8:	0009883a 	mov	r4,zero
 400dfbc:	3084d83a 	srl	r2,r6,r2
 400dfc0:	00c10374 	movhi	r3,1037
 400dfc4:	18c8bc04 	addi	r3,r3,8944
 400dfc8:	05400804 	movi	r21,32
 400dfcc:	1885883a 	add	r2,r3,r2
 400dfd0:	10800003 	ldbu	r2,0(r2)
 400dfd4:	1109883a 	add	r4,r2,r4
 400dfd8:	a92bc83a 	sub	r21,r21,r4
 400dfdc:	a800ec26 	beq	r21,zero,400e390 <__umoddi3+0x434>
 400dfe0:	8d62983a 	sll	r17,r17,r21
 400dfe4:	9108d83a 	srl	r4,r18,r4
 400dfe8:	3560983a 	sll	r16,r6,r21
 400dfec:	9566983a 	sll	r19,r18,r21
 400dff0:	8928b03a 	or	r20,r17,r4
 400dff4:	8022d43a 	srli	r17,r16,16
 400dff8:	a009883a 	mov	r4,r20
 400dffc:	84bfffcc 	andi	r18,r16,65535
 400e000:	880b883a 	mov	r5,r17
 400e004:	400ea580 	call	400ea58 <__umodsi3>
 400e008:	a009883a 	mov	r4,r20
 400e00c:	880b883a 	mov	r5,r17
 400e010:	102d883a 	mov	r22,r2
 400e014:	400ea500 	call	400ea50 <__udivsi3>
 400e018:	b02c943a 	slli	r22,r22,16
 400e01c:	9806d43a 	srli	r3,r19,16
 400e020:	1485383a 	mul	r2,r2,r18
 400e024:	b0c6b03a 	or	r3,r22,r3
 400e028:	1880042e 	bgeu	r3,r2,400e03c <__umoddi3+0xe0>
 400e02c:	1c07883a 	add	r3,r3,r16
 400e030:	1c000236 	bltu	r3,r16,400e03c <__umoddi3+0xe0>
 400e034:	1880012e 	bgeu	r3,r2,400e03c <__umoddi3+0xe0>
 400e038:	1c07883a 	add	r3,r3,r16
 400e03c:	18a9c83a 	sub	r20,r3,r2
 400e040:	a009883a 	mov	r4,r20
 400e044:	880b883a 	mov	r5,r17
 400e048:	400ea580 	call	400ea58 <__umodsi3>
 400e04c:	102d883a 	mov	r22,r2
 400e050:	a009883a 	mov	r4,r20
 400e054:	880b883a 	mov	r5,r17
 400e058:	400ea500 	call	400ea50 <__udivsi3>
 400e05c:	b02c943a 	slli	r22,r22,16
 400e060:	1485383a 	mul	r2,r2,r18
 400e064:	9cffffcc 	andi	r19,r19,65535
 400e068:	b4e6b03a 	or	r19,r22,r19
 400e06c:	9880522e 	bgeu	r19,r2,400e1b8 <__umoddi3+0x25c>
 400e070:	00004d06 	br	400e1a8 <__umoddi3+0x24c>
 400e074:	29c05436 	bltu	r5,r7,400e1c8 <__umoddi3+0x26c>
 400e078:	00bfffd4 	movui	r2,65535
 400e07c:	11c0602e 	bgeu	r2,r7,400e200 <__umoddi3+0x2a4>
 400e080:	00804034 	movhi	r2,256
 400e084:	10bfffc4 	addi	r2,r2,-1
 400e088:	11c0f736 	bltu	r2,r7,400e468 <__umoddi3+0x50c>
 400e08c:	00c00404 	movi	r3,16
 400e090:	1827883a 	mov	r19,r3
 400e094:	38c6d83a 	srl	r3,r7,r3
 400e098:	01010374 	movhi	r4,1037
 400e09c:	2108bc04 	addi	r4,r4,8944
 400e0a0:	04000804 	movi	r16,32
 400e0a4:	20c7883a 	add	r3,r4,r3
 400e0a8:	18800003 	ldbu	r2,0(r3)
 400e0ac:	14e7883a 	add	r19,r2,r19
 400e0b0:	84e1c83a 	sub	r16,r16,r19
 400e0b4:	8000621e 	bne	r16,zero,400e240 <__umoddi3+0x2e4>
 400e0b8:	3c400136 	bltu	r7,r17,400e0c0 <__umoddi3+0x164>
 400e0bc:	91810336 	bltu	r18,r6,400e4cc <__umoddi3+0x570>
 400e0c0:	9185c83a 	sub	r2,r18,r6
 400e0c4:	89e3c83a 	sub	r17,r17,r7
 400e0c8:	90a5803a 	cmpltu	r18,r18,r2
 400e0cc:	8ca9c83a 	sub	r20,r17,r18
 400e0d0:	a007883a 	mov	r3,r20
 400e0d4:	00003e06 	br	400e1d0 <__umoddi3+0x274>
 400e0d8:	3000041e 	bne	r6,zero,400e0ec <__umoddi3+0x190>
 400e0dc:	01000044 	movi	r4,1
 400e0e0:	000b883a 	mov	r5,zero
 400e0e4:	400ea500 	call	400ea50 <__udivsi3>
 400e0e8:	1021883a 	mov	r16,r2
 400e0ec:	00bfffd4 	movui	r2,65535
 400e0f0:	14004e2e 	bgeu	r2,r16,400e22c <__umoddi3+0x2d0>
 400e0f4:	00804034 	movhi	r2,256
 400e0f8:	10bfffc4 	addi	r2,r2,-1
 400e0fc:	1400e336 	bltu	r2,r16,400e48c <__umoddi3+0x530>
 400e100:	00800404 	movi	r2,16
 400e104:	1007883a 	mov	r3,r2
 400e108:	8084d83a 	srl	r2,r16,r2
 400e10c:	01010374 	movhi	r4,1037
 400e110:	2108bc04 	addi	r4,r4,8944
 400e114:	05400804 	movi	r21,32
 400e118:	2085883a 	add	r2,r4,r2
 400e11c:	10800003 	ldbu	r2,0(r2)
 400e120:	10c7883a 	add	r3,r2,r3
 400e124:	a8ebc83a 	sub	r21,r21,r3
 400e128:	a8009b1e 	bne	r21,zero,400e398 <__umoddi3+0x43c>
 400e12c:	8028d43a 	srli	r20,r16,16
 400e130:	8c23c83a 	sub	r17,r17,r16
 400e134:	85bfffcc 	andi	r22,r16,65535
 400e138:	8809883a 	mov	r4,r17
 400e13c:	a00b883a 	mov	r5,r20
 400e140:	400ea580 	call	400ea58 <__umodsi3>
 400e144:	8809883a 	mov	r4,r17
 400e148:	a00b883a 	mov	r5,r20
 400e14c:	1025883a 	mov	r18,r2
 400e150:	400ea500 	call	400ea50 <__udivsi3>
 400e154:	9024943a 	slli	r18,r18,16
 400e158:	9806d43a 	srli	r3,r19,16
 400e15c:	1585383a 	mul	r2,r2,r22
 400e160:	90c6b03a 	or	r3,r18,r3
 400e164:	1880032e 	bgeu	r3,r2,400e174 <__umoddi3+0x218>
 400e168:	1c07883a 	add	r3,r3,r16
 400e16c:	1c000136 	bltu	r3,r16,400e174 <__umoddi3+0x218>
 400e170:	1880d436 	bltu	r3,r2,400e4c4 <__umoddi3+0x568>
 400e174:	18a3c83a 	sub	r17,r3,r2
 400e178:	8809883a 	mov	r4,r17
 400e17c:	a00b883a 	mov	r5,r20
 400e180:	400ea580 	call	400ea58 <__umodsi3>
 400e184:	1025883a 	mov	r18,r2
 400e188:	8809883a 	mov	r4,r17
 400e18c:	a00b883a 	mov	r5,r20
 400e190:	400ea500 	call	400ea50 <__udivsi3>
 400e194:	9024943a 	slli	r18,r18,16
 400e198:	1585383a 	mul	r2,r2,r22
 400e19c:	9cffffcc 	andi	r19,r19,65535
 400e1a0:	94e6b03a 	or	r19,r18,r19
 400e1a4:	9880042e 	bgeu	r19,r2,400e1b8 <__umoddi3+0x25c>
 400e1a8:	9c27883a 	add	r19,r19,r16
 400e1ac:	9c000236 	bltu	r19,r16,400e1b8 <__umoddi3+0x25c>
 400e1b0:	9880012e 	bgeu	r19,r2,400e1b8 <__umoddi3+0x25c>
 400e1b4:	9c27883a 	add	r19,r19,r16
 400e1b8:	98a7c83a 	sub	r19,r19,r2
 400e1bc:	9d44d83a 	srl	r2,r19,r21
 400e1c0:	0007883a 	mov	r3,zero
 400e1c4:	00000206 	br	400e1d0 <__umoddi3+0x274>
 400e1c8:	2005883a 	mov	r2,r4
 400e1cc:	2807883a 	mov	r3,r5
 400e1d0:	dfc00a17 	ldw	ra,40(sp)
 400e1d4:	df000917 	ldw	fp,36(sp)
 400e1d8:	ddc00817 	ldw	r23,32(sp)
 400e1dc:	dd800717 	ldw	r22,28(sp)
 400e1e0:	dd400617 	ldw	r21,24(sp)
 400e1e4:	dd000517 	ldw	r20,20(sp)
 400e1e8:	dcc00417 	ldw	r19,16(sp)
 400e1ec:	dc800317 	ldw	r18,12(sp)
 400e1f0:	dc400217 	ldw	r17,8(sp)
 400e1f4:	dc000117 	ldw	r16,4(sp)
 400e1f8:	dec00b04 	addi	sp,sp,44
 400e1fc:	f800283a 	ret
 400e200:	00803fc4 	movi	r2,255
 400e204:	11c09536 	bltu	r2,r7,400e45c <__umoddi3+0x500>
 400e208:	0007883a 	mov	r3,zero
 400e20c:	0027883a 	mov	r19,zero
 400e210:	003fa006 	br	400e094 <__umoddi3+0x138>
 400e214:	00804034 	movhi	r2,256
 400e218:	10bfffc4 	addi	r2,r2,-1
 400e21c:	11809536 	bltu	r2,r6,400e474 <__umoddi3+0x518>
 400e220:	00800404 	movi	r2,16
 400e224:	1009883a 	mov	r4,r2
 400e228:	003f6406 	br	400dfbc <__umoddi3+0x60>
 400e22c:	00803fc4 	movi	r2,255
 400e230:	14009336 	bltu	r2,r16,400e480 <__umoddi3+0x524>
 400e234:	0005883a 	mov	r2,zero
 400e238:	0007883a 	mov	r3,zero
 400e23c:	003fb206 	br	400e108 <__umoddi3+0x1ac>
 400e240:	34c4d83a 	srl	r2,r6,r19
 400e244:	3c0e983a 	sll	r7,r7,r16
 400e248:	8ceed83a 	srl	r23,r17,r19
 400e24c:	8c22983a 	sll	r17,r17,r16
 400e250:	38a8b03a 	or	r20,r7,r2
 400e254:	a02ad43a 	srli	r21,r20,16
 400e258:	94c4d83a 	srl	r2,r18,r19
 400e25c:	b809883a 	mov	r4,r23
 400e260:	a80b883a 	mov	r5,r21
 400e264:	88a2b03a 	or	r17,r17,r2
 400e268:	342c983a 	sll	r22,r6,r16
 400e26c:	400ea580 	call	400ea58 <__umodsi3>
 400e270:	b809883a 	mov	r4,r23
 400e274:	a80b883a 	mov	r5,r21
 400e278:	d8800015 	stw	r2,0(sp)
 400e27c:	400ea500 	call	400ea50 <__udivsi3>
 400e280:	d8c00017 	ldw	r3,0(sp)
 400e284:	102f883a 	mov	r23,r2
 400e288:	a73fffcc 	andi	fp,r20,65535
 400e28c:	180a943a 	slli	r5,r3,16
 400e290:	8804d43a 	srli	r2,r17,16
 400e294:	bf09383a 	mul	r4,r23,fp
 400e298:	9424983a 	sll	r18,r18,r16
 400e29c:	288ab03a 	or	r5,r5,r2
 400e2a0:	2900042e 	bgeu	r5,r4,400e2b4 <__umoddi3+0x358>
 400e2a4:	2d0b883a 	add	r5,r5,r20
 400e2a8:	b8bfffc4 	addi	r2,r23,-1
 400e2ac:	2d00812e 	bgeu	r5,r20,400e4b4 <__umoddi3+0x558>
 400e2b0:	102f883a 	mov	r23,r2
 400e2b4:	2907c83a 	sub	r3,r5,r4
 400e2b8:	1809883a 	mov	r4,r3
 400e2bc:	a80b883a 	mov	r5,r21
 400e2c0:	d8c00015 	stw	r3,0(sp)
 400e2c4:	400ea580 	call	400ea58 <__umodsi3>
 400e2c8:	d8c00017 	ldw	r3,0(sp)
 400e2cc:	a80b883a 	mov	r5,r21
 400e2d0:	d8800015 	stw	r2,0(sp)
 400e2d4:	1809883a 	mov	r4,r3
 400e2d8:	400ea500 	call	400ea50 <__udivsi3>
 400e2dc:	d9800017 	ldw	r6,0(sp)
 400e2e0:	8c7fffcc 	andi	r17,r17,65535
 400e2e4:	3008943a 	slli	r4,r6,16
 400e2e8:	170d383a 	mul	r6,r2,fp
 400e2ec:	2448b03a 	or	r4,r4,r17
 400e2f0:	2180042e 	bgeu	r4,r6,400e304 <__umoddi3+0x3a8>
 400e2f4:	2509883a 	add	r4,r4,r20
 400e2f8:	10ffffc4 	addi	r3,r2,-1
 400e2fc:	2500692e 	bgeu	r4,r20,400e4a4 <__umoddi3+0x548>
 400e300:	1805883a 	mov	r2,r3
 400e304:	b82e943a 	slli	r23,r23,16
 400e308:	b010d43a 	srli	r8,r22,16
 400e30c:	b1ffffcc 	andi	r7,r22,65535
 400e310:	15eeb03a 	or	r23,r2,r23
 400e314:	b8bfffcc 	andi	r2,r23,65535
 400e318:	b82ed43a 	srli	r23,r23,16
 400e31c:	11c7383a 	mul	r3,r2,r7
 400e320:	1205383a 	mul	r2,r2,r8
 400e324:	b9cf383a 	mul	r7,r23,r7
 400e328:	400b883a 	mov	r5,r8
 400e32c:	1810d43a 	srli	r8,r3,16
 400e330:	3885883a 	add	r2,r7,r2
 400e334:	2189c83a 	sub	r4,r4,r6
 400e338:	1205883a 	add	r2,r2,r8
 400e33c:	b94b383a 	mul	r5,r23,r5
 400e340:	11c0022e 	bgeu	r2,r7,400e34c <__umoddi3+0x3f0>
 400e344:	01800074 	movhi	r6,1
 400e348:	298b883a 	add	r5,r5,r6
 400e34c:	100cd43a 	srli	r6,r2,16
 400e350:	1004943a 	slli	r2,r2,16
 400e354:	18ffffcc 	andi	r3,r3,65535
 400e358:	298b883a 	add	r5,r5,r6
 400e35c:	10c5883a 	add	r2,r2,r3
 400e360:	21403836 	bltu	r4,r5,400e444 <__umoddi3+0x4e8>
 400e364:	21405c26 	beq	r4,r5,400e4d8 <__umoddi3+0x57c>
 400e368:	2147c83a 	sub	r3,r4,r5
 400e36c:	102d883a 	mov	r22,r2
 400e370:	95adc83a 	sub	r22,r18,r22
 400e374:	95a5803a 	cmpltu	r18,r18,r22
 400e378:	1c87c83a 	sub	r3,r3,r18
 400e37c:	1cc4983a 	sll	r2,r3,r19
 400e380:	b42cd83a 	srl	r22,r22,r16
 400e384:	1c06d83a 	srl	r3,r3,r16
 400e388:	1584b03a 	or	r2,r2,r22
 400e38c:	003f9006 	br	400e1d0 <__umoddi3+0x274>
 400e390:	002b883a 	mov	r21,zero
 400e394:	003f1706 	br	400dff4 <__umoddi3+0x98>
 400e398:	8560983a 	sll	r16,r16,r21
 400e39c:	88e6d83a 	srl	r19,r17,r3
 400e3a0:	90c6d83a 	srl	r3,r18,r3
 400e3a4:	8028d43a 	srli	r20,r16,16
 400e3a8:	8d62983a 	sll	r17,r17,r21
 400e3ac:	9809883a 	mov	r4,r19
 400e3b0:	a00b883a 	mov	r5,r20
 400e3b4:	88eeb03a 	or	r23,r17,r3
 400e3b8:	400ea580 	call	400ea58 <__umodsi3>
 400e3bc:	9809883a 	mov	r4,r19
 400e3c0:	a00b883a 	mov	r5,r20
 400e3c4:	1023883a 	mov	r17,r2
 400e3c8:	400ea500 	call	400ea50 <__udivsi3>
 400e3cc:	85bfffcc 	andi	r22,r16,65535
 400e3d0:	880a943a 	slli	r5,r17,16
 400e3d4:	b806d43a 	srli	r3,r23,16
 400e3d8:	1585383a 	mul	r2,r2,r22
 400e3dc:	9566983a 	sll	r19,r18,r21
 400e3e0:	28cab03a 	or	r5,r5,r3
 400e3e4:	2880042e 	bgeu	r5,r2,400e3f8 <__umoddi3+0x49c>
 400e3e8:	2c0b883a 	add	r5,r5,r16
 400e3ec:	2c000236 	bltu	r5,r16,400e3f8 <__umoddi3+0x49c>
 400e3f0:	2880012e 	bgeu	r5,r2,400e3f8 <__umoddi3+0x49c>
 400e3f4:	2c0b883a 	add	r5,r5,r16
 400e3f8:	28a5c83a 	sub	r18,r5,r2
 400e3fc:	9009883a 	mov	r4,r18
 400e400:	a00b883a 	mov	r5,r20
 400e404:	400ea580 	call	400ea58 <__umodsi3>
 400e408:	1023883a 	mov	r17,r2
 400e40c:	9009883a 	mov	r4,r18
 400e410:	a00b883a 	mov	r5,r20
 400e414:	400ea500 	call	400ea50 <__udivsi3>
 400e418:	8822943a 	slli	r17,r17,16
 400e41c:	1585383a 	mul	r2,r2,r22
 400e420:	bdffffcc 	andi	r23,r23,65535
 400e424:	8de2b03a 	or	r17,r17,r23
 400e428:	8880042e 	bgeu	r17,r2,400e43c <__umoddi3+0x4e0>
 400e42c:	8c23883a 	add	r17,r17,r16
 400e430:	8c000236 	bltu	r17,r16,400e43c <__umoddi3+0x4e0>
 400e434:	8880012e 	bgeu	r17,r2,400e43c <__umoddi3+0x4e0>
 400e438:	8c23883a 	add	r17,r17,r16
 400e43c:	88a3c83a 	sub	r17,r17,r2
 400e440:	003f3d06 	br	400e138 <__umoddi3+0x1dc>
 400e444:	15adc83a 	sub	r22,r2,r22
 400e448:	2d07c83a 	sub	r3,r5,r20
 400e44c:	1585803a 	cmpltu	r2,r2,r22
 400e450:	1887c83a 	sub	r3,r3,r2
 400e454:	20c7c83a 	sub	r3,r4,r3
 400e458:	003fc506 	br	400e370 <__umoddi3+0x414>
 400e45c:	00c00204 	movi	r3,8
 400e460:	1827883a 	mov	r19,r3
 400e464:	003f0b06 	br	400e094 <__umoddi3+0x138>
 400e468:	00c00604 	movi	r3,24
 400e46c:	1827883a 	mov	r19,r3
 400e470:	003f0806 	br	400e094 <__umoddi3+0x138>
 400e474:	00800604 	movi	r2,24
 400e478:	1009883a 	mov	r4,r2
 400e47c:	003ecf06 	br	400dfbc <__umoddi3+0x60>
 400e480:	00800204 	movi	r2,8
 400e484:	1007883a 	mov	r3,r2
 400e488:	003f1f06 	br	400e108 <__umoddi3+0x1ac>
 400e48c:	00800604 	movi	r2,24
 400e490:	1007883a 	mov	r3,r2
 400e494:	003f1c06 	br	400e108 <__umoddi3+0x1ac>
 400e498:	00800204 	movi	r2,8
 400e49c:	1009883a 	mov	r4,r2
 400e4a0:	003ec606 	br	400dfbc <__umoddi3+0x60>
 400e4a4:	21bf962e 	bgeu	r4,r6,400e300 <__umoddi3+0x3a4>
 400e4a8:	10bfff84 	addi	r2,r2,-2
 400e4ac:	2509883a 	add	r4,r4,r20
 400e4b0:	003f9406 	br	400e304 <__umoddi3+0x3a8>
 400e4b4:	293f7e2e 	bgeu	r5,r4,400e2b0 <__umoddi3+0x354>
 400e4b8:	bdffff84 	addi	r23,r23,-2
 400e4bc:	2d0b883a 	add	r5,r5,r20
 400e4c0:	003f7c06 	br	400e2b4 <__umoddi3+0x358>
 400e4c4:	1c07883a 	add	r3,r3,r16
 400e4c8:	003f2a06 	br	400e174 <__umoddi3+0x218>
 400e4cc:	9005883a 	mov	r2,r18
 400e4d0:	a007883a 	mov	r3,r20
 400e4d4:	003f3e06 	br	400e1d0 <__umoddi3+0x274>
 400e4d8:	90bfda36 	bltu	r18,r2,400e444 <__umoddi3+0x4e8>
 400e4dc:	102d883a 	mov	r22,r2
 400e4e0:	0007883a 	mov	r3,zero
 400e4e4:	003fa206 	br	400e370 <__umoddi3+0x414>

0400e4e8 <__divdf3>:
 400e4e8:	defff104 	addi	sp,sp,-60
 400e4ec:	d9000c15 	stw	r4,48(sp)
 400e4f0:	d9400d15 	stw	r5,52(sp)
 400e4f4:	d9000c04 	addi	r4,sp,48
 400e4f8:	d9400504 	addi	r5,sp,20
 400e4fc:	dfc00e15 	stw	ra,56(sp)
 400e500:	d9800a15 	stw	r6,40(sp)
 400e504:	d9c00b15 	stw	r7,44(sp)
 400e508:	40063b80 	call	40063b8 <__unpack_d>
 400e50c:	d9000a04 	addi	r4,sp,40
 400e510:	d80b883a 	mov	r5,sp
 400e514:	40063b80 	call	40063b8 <__unpack_d>
 400e518:	d8c00517 	ldw	r3,20(sp)
 400e51c:	00800044 	movi	r2,1
 400e520:	10c00536 	bltu	r2,r3,400e538 <__divdf3+0x50>
 400e524:	d9000504 	addi	r4,sp,20
 400e528:	40061940 	call	4006194 <__pack_d>
 400e52c:	dfc00e17 	ldw	ra,56(sp)
 400e530:	dec00f04 	addi	sp,sp,60
 400e534:	f800283a 	ret
 400e538:	d9000017 	ldw	r4,0(sp)
 400e53c:	11000536 	bltu	r2,r4,400e554 <__divdf3+0x6c>
 400e540:	d809883a 	mov	r4,sp
 400e544:	40061940 	call	4006194 <__pack_d>
 400e548:	dfc00e17 	ldw	ra,56(sp)
 400e54c:	dec00f04 	addi	sp,sp,60
 400e550:	f800283a 	ret
 400e554:	d9800617 	ldw	r6,24(sp)
 400e558:	d9400117 	ldw	r5,4(sp)
 400e55c:	00800104 	movi	r2,4
 400e560:	314af03a 	xor	r5,r6,r5
 400e564:	d9400615 	stw	r5,24(sp)
 400e568:	18800226 	beq	r3,r2,400e574 <__divdf3+0x8c>
 400e56c:	01400084 	movi	r5,2
 400e570:	1940041e 	bne	r3,r5,400e584 <__divdf3+0x9c>
 400e574:	193feb1e 	bne	r3,r4,400e524 <__divdf3+0x3c>
 400e578:	01010374 	movhi	r4,1037
 400e57c:	2108b704 	addi	r4,r4,8924
 400e580:	003fe906 	br	400e528 <__divdf3+0x40>
 400e584:	20803326 	beq	r4,r2,400e654 <__divdf3+0x16c>
 400e588:	21403726 	beq	r4,r5,400e668 <__divdf3+0x180>
 400e58c:	d8800217 	ldw	r2,8(sp)
 400e590:	d9000717 	ldw	r4,28(sp)
 400e594:	d8c00917 	ldw	r3,36(sp)
 400e598:	da000417 	ldw	r8,16(sp)
 400e59c:	2089c83a 	sub	r4,r4,r2
 400e5a0:	d9000715 	stw	r4,28(sp)
 400e5a4:	d8800817 	ldw	r2,32(sp)
 400e5a8:	dbc00317 	ldw	r15,12(sp)
 400e5ac:	1a000236 	bltu	r3,r8,400e5b8 <__divdf3+0xd0>
 400e5b0:	40c0081e 	bne	r8,r3,400e5d4 <__divdf3+0xec>
 400e5b4:	13c0072e 	bgeu	r2,r15,400e5d4 <__divdf3+0xec>
 400e5b8:	108b883a 	add	r5,r2,r2
 400e5bc:	288d803a 	cmpltu	r6,r5,r2
 400e5c0:	18c7883a 	add	r3,r3,r3
 400e5c4:	213fffc4 	addi	r4,r4,-1
 400e5c8:	2805883a 	mov	r2,r5
 400e5cc:	30c7883a 	add	r3,r6,r3
 400e5d0:	d9000715 	stw	r4,28(sp)
 400e5d4:	01400f44 	movi	r5,61
 400e5d8:	000f883a 	mov	r7,zero
 400e5dc:	01040034 	movhi	r4,4096
 400e5e0:	0019883a 	mov	r12,zero
 400e5e4:	001b883a 	mov	r13,zero
 400e5e8:	201697fa 	slli	r11,r4,31
 400e5ec:	3814d07a 	srli	r10,r7,1
 400e5f0:	297fffc4 	addi	r5,r5,-1
 400e5f4:	1a000936 	bltu	r3,r8,400e61c <__divdf3+0x134>
 400e5f8:	13cdc83a 	sub	r6,r2,r15
 400e5fc:	1193803a 	cmpltu	r9,r2,r6
 400e600:	1a1dc83a 	sub	r14,r3,r8
 400e604:	40c0011e 	bne	r8,r3,400e60c <__divdf3+0x124>
 400e608:	13c00436 	bltu	r2,r15,400e61c <__divdf3+0x134>
 400e60c:	3005883a 	mov	r2,r6
 400e610:	7247c83a 	sub	r3,r14,r9
 400e614:	61d8b03a 	or	r12,r12,r7
 400e618:	691ab03a 	or	r13,r13,r4
 400e61c:	108d883a 	add	r6,r2,r2
 400e620:	3093803a 	cmpltu	r9,r6,r2
 400e624:	18c7883a 	add	r3,r3,r3
 400e628:	5a8eb03a 	or	r7,r11,r10
 400e62c:	2008d07a 	srli	r4,r4,1
 400e630:	3005883a 	mov	r2,r6
 400e634:	48c7883a 	add	r3,r9,r3
 400e638:	283feb1e 	bne	r5,zero,400e5e8 <__divdf3+0x100>
 400e63c:	61003fcc 	andi	r4,r12,255
 400e640:	01402004 	movi	r5,128
 400e644:	21400b26 	beq	r4,r5,400e674 <__divdf3+0x18c>
 400e648:	db000815 	stw	r12,32(sp)
 400e64c:	db400915 	stw	r13,36(sp)
 400e650:	003fb406 	br	400e524 <__divdf3+0x3c>
 400e654:	d8000815 	stw	zero,32(sp)
 400e658:	d8000915 	stw	zero,36(sp)
 400e65c:	d8000715 	stw	zero,28(sp)
 400e660:	d9000504 	addi	r4,sp,20
 400e664:	003fb006 	br	400e528 <__divdf3+0x40>
 400e668:	d8800515 	stw	r2,20(sp)
 400e66c:	d9000504 	addi	r4,sp,20
 400e670:	003fad06 	br	400e528 <__divdf3+0x40>
 400e674:	6140400c 	andi	r5,r12,256
 400e678:	283ff31e 	bne	r5,zero,400e648 <__divdf3+0x160>
 400e67c:	30c4b03a 	or	r2,r6,r3
 400e680:	103ff126 	beq	r2,zero,400e648 <__divdf3+0x160>
 400e684:	6109883a 	add	r4,r12,r4
 400e688:	2305803a 	cmpltu	r2,r4,r12
 400e68c:	033fc004 	movi	r12,-256
 400e690:	2318703a 	and	r12,r4,r12
 400e694:	135b883a 	add	r13,r2,r13
 400e698:	003feb06 	br	400e648 <__divdf3+0x160>

0400e69c <__eqdf2>:
 400e69c:	defff104 	addi	sp,sp,-60
 400e6a0:	d9000c15 	stw	r4,48(sp)
 400e6a4:	d9400d15 	stw	r5,52(sp)
 400e6a8:	d9000c04 	addi	r4,sp,48
 400e6ac:	d9400504 	addi	r5,sp,20
 400e6b0:	dfc00e15 	stw	ra,56(sp)
 400e6b4:	d9800a15 	stw	r6,40(sp)
 400e6b8:	d9c00b15 	stw	r7,44(sp)
 400e6bc:	40063b80 	call	40063b8 <__unpack_d>
 400e6c0:	d9000a04 	addi	r4,sp,40
 400e6c4:	d80b883a 	mov	r5,sp
 400e6c8:	40063b80 	call	40063b8 <__unpack_d>
 400e6cc:	d8c00517 	ldw	r3,20(sp)
 400e6d0:	00800044 	movi	r2,1
 400e6d4:	10c0052e 	bgeu	r2,r3,400e6ec <__eqdf2+0x50>
 400e6d8:	d8c00017 	ldw	r3,0(sp)
 400e6dc:	10c0032e 	bgeu	r2,r3,400e6ec <__eqdf2+0x50>
 400e6e0:	d9000504 	addi	r4,sp,20
 400e6e4:	d80b883a 	mov	r5,sp
 400e6e8:	40064bc0 	call	40064bc <__fpcmp_parts_d>
 400e6ec:	dfc00e17 	ldw	ra,56(sp)
 400e6f0:	dec00f04 	addi	sp,sp,60
 400e6f4:	f800283a 	ret

0400e6f8 <__nedf2>:
 400e6f8:	defff104 	addi	sp,sp,-60
 400e6fc:	d9000c15 	stw	r4,48(sp)
 400e700:	d9400d15 	stw	r5,52(sp)
 400e704:	d9000c04 	addi	r4,sp,48
 400e708:	d9400504 	addi	r5,sp,20
 400e70c:	dfc00e15 	stw	ra,56(sp)
 400e710:	d9800a15 	stw	r6,40(sp)
 400e714:	d9c00b15 	stw	r7,44(sp)
 400e718:	40063b80 	call	40063b8 <__unpack_d>
 400e71c:	d9000a04 	addi	r4,sp,40
 400e720:	d80b883a 	mov	r5,sp
 400e724:	40063b80 	call	40063b8 <__unpack_d>
 400e728:	d8c00517 	ldw	r3,20(sp)
 400e72c:	00800044 	movi	r2,1
 400e730:	10c0052e 	bgeu	r2,r3,400e748 <__nedf2+0x50>
 400e734:	d8c00017 	ldw	r3,0(sp)
 400e738:	10c0032e 	bgeu	r2,r3,400e748 <__nedf2+0x50>
 400e73c:	d9000504 	addi	r4,sp,20
 400e740:	d80b883a 	mov	r5,sp
 400e744:	40064bc0 	call	40064bc <__fpcmp_parts_d>
 400e748:	dfc00e17 	ldw	ra,56(sp)
 400e74c:	dec00f04 	addi	sp,sp,60
 400e750:	f800283a 	ret

0400e754 <__gtdf2>:
 400e754:	defff104 	addi	sp,sp,-60
 400e758:	d9000c15 	stw	r4,48(sp)
 400e75c:	d9400d15 	stw	r5,52(sp)
 400e760:	d9000c04 	addi	r4,sp,48
 400e764:	d9400504 	addi	r5,sp,20
 400e768:	dfc00e15 	stw	ra,56(sp)
 400e76c:	d9800a15 	stw	r6,40(sp)
 400e770:	d9c00b15 	stw	r7,44(sp)
 400e774:	40063b80 	call	40063b8 <__unpack_d>
 400e778:	d9000a04 	addi	r4,sp,40
 400e77c:	d80b883a 	mov	r5,sp
 400e780:	40063b80 	call	40063b8 <__unpack_d>
 400e784:	d8c00517 	ldw	r3,20(sp)
 400e788:	00800044 	movi	r2,1
 400e78c:	10c0082e 	bgeu	r2,r3,400e7b0 <__gtdf2+0x5c>
 400e790:	d8c00017 	ldw	r3,0(sp)
 400e794:	10c0062e 	bgeu	r2,r3,400e7b0 <__gtdf2+0x5c>
 400e798:	d9000504 	addi	r4,sp,20
 400e79c:	d80b883a 	mov	r5,sp
 400e7a0:	40064bc0 	call	40064bc <__fpcmp_parts_d>
 400e7a4:	dfc00e17 	ldw	ra,56(sp)
 400e7a8:	dec00f04 	addi	sp,sp,60
 400e7ac:	f800283a 	ret
 400e7b0:	00bfffc4 	movi	r2,-1
 400e7b4:	003ffb06 	br	400e7a4 <__gtdf2+0x50>

0400e7b8 <__ltdf2>:
 400e7b8:	defff104 	addi	sp,sp,-60
 400e7bc:	d9000c15 	stw	r4,48(sp)
 400e7c0:	d9400d15 	stw	r5,52(sp)
 400e7c4:	d9000c04 	addi	r4,sp,48
 400e7c8:	d9400504 	addi	r5,sp,20
 400e7cc:	dfc00e15 	stw	ra,56(sp)
 400e7d0:	d9800a15 	stw	r6,40(sp)
 400e7d4:	d9c00b15 	stw	r7,44(sp)
 400e7d8:	40063b80 	call	40063b8 <__unpack_d>
 400e7dc:	d9000a04 	addi	r4,sp,40
 400e7e0:	d80b883a 	mov	r5,sp
 400e7e4:	40063b80 	call	40063b8 <__unpack_d>
 400e7e8:	d8c00517 	ldw	r3,20(sp)
 400e7ec:	00800044 	movi	r2,1
 400e7f0:	10c0052e 	bgeu	r2,r3,400e808 <__ltdf2+0x50>
 400e7f4:	d8c00017 	ldw	r3,0(sp)
 400e7f8:	10c0032e 	bgeu	r2,r3,400e808 <__ltdf2+0x50>
 400e7fc:	d9000504 	addi	r4,sp,20
 400e800:	d80b883a 	mov	r5,sp
 400e804:	40064bc0 	call	40064bc <__fpcmp_parts_d>
 400e808:	dfc00e17 	ldw	ra,56(sp)
 400e80c:	dec00f04 	addi	sp,sp,60
 400e810:	f800283a 	ret

0400e814 <__floatunsidf>:
 400e814:	defff904 	addi	sp,sp,-28
 400e818:	dc000515 	stw	r16,20(sp)
 400e81c:	dfc00615 	stw	ra,24(sp)
 400e820:	d8000115 	stw	zero,4(sp)
 400e824:	2021883a 	mov	r16,r4
 400e828:	20001726 	beq	r4,zero,400e888 <__floatunsidf+0x74>
 400e82c:	008000c4 	movi	r2,3
 400e830:	d8800015 	stw	r2,0(sp)
 400e834:	00800f04 	movi	r2,60
 400e838:	d8800215 	stw	r2,8(sp)
 400e83c:	40060e80 	call	40060e8 <__clzsi2>
 400e840:	10c00744 	addi	r3,r2,29
 400e844:	18001816 	blt	r3,zero,400e8a8 <__floatunsidf+0x94>
 400e848:	18002d26 	beq	r3,zero,400e900 <__floatunsidf+0xec>
 400e84c:	113fff44 	addi	r4,r2,-3
 400e850:	20002e16 	blt	r4,zero,400e90c <__floatunsidf+0xf8>
 400e854:	8108983a 	sll	r4,r16,r4
 400e858:	0021883a 	mov	r16,zero
 400e85c:	014007c4 	movi	r5,31
 400e860:	2885c83a 	sub	r2,r5,r2
 400e864:	dc000315 	stw	r16,12(sp)
 400e868:	d9000415 	stw	r4,16(sp)
 400e86c:	d8800215 	stw	r2,8(sp)
 400e870:	d809883a 	mov	r4,sp
 400e874:	40061940 	call	4006194 <__pack_d>
 400e878:	dfc00617 	ldw	ra,24(sp)
 400e87c:	dc000517 	ldw	r16,20(sp)
 400e880:	dec00704 	addi	sp,sp,28
 400e884:	f800283a 	ret
 400e888:	00800084 	movi	r2,2
 400e88c:	d809883a 	mov	r4,sp
 400e890:	d8800015 	stw	r2,0(sp)
 400e894:	40061940 	call	4006194 <__pack_d>
 400e898:	dfc00617 	ldw	ra,24(sp)
 400e89c:	dc000517 	ldw	r16,20(sp)
 400e8a0:	dec00704 	addi	sp,sp,28
 400e8a4:	f800283a 	ret
 400e8a8:	00c7c83a 	sub	r3,zero,r3
 400e8ac:	193ff804 	addi	r4,r3,-32
 400e8b0:	20001c16 	blt	r4,zero,400e924 <__floatunsidf+0x110>
 400e8b4:	000b883a 	mov	r5,zero
 400e8b8:	2009d7fa 	srai	r4,r4,31
 400e8bc:	80c6d83a 	srl	r3,r16,r3
 400e8c0:	297fffc4 	addi	r5,r5,-1
 400e8c4:	2c20703a 	and	r16,r5,r16
 400e8c8:	8020c03a 	cmpne	r16,r16,zero
 400e8cc:	1906703a 	and	r3,r3,r4
 400e8d0:	010007c4 	movi	r4,31
 400e8d4:	80c6b03a 	or	r3,r16,r3
 400e8d8:	2085c83a 	sub	r2,r4,r2
 400e8dc:	d809883a 	mov	r4,sp
 400e8e0:	d8c00315 	stw	r3,12(sp)
 400e8e4:	d8000415 	stw	zero,16(sp)
 400e8e8:	d8800215 	stw	r2,8(sp)
 400e8ec:	40061940 	call	4006194 <__pack_d>
 400e8f0:	dfc00617 	ldw	ra,24(sp)
 400e8f4:	dc000517 	ldw	r16,20(sp)
 400e8f8:	dec00704 	addi	sp,sp,28
 400e8fc:	f800283a 	ret
 400e900:	dc000315 	stw	r16,12(sp)
 400e904:	d8000415 	stw	zero,16(sp)
 400e908:	003fd906 	br	400e870 <__floatunsidf+0x5c>
 400e90c:	800ad07a 	srli	r5,r16,1
 400e910:	010007c4 	movi	r4,31
 400e914:	20c9c83a 	sub	r4,r4,r3
 400e918:	2908d83a 	srl	r4,r5,r4
 400e91c:	80e0983a 	sll	r16,r16,r3
 400e920:	003fce06 	br	400e85c <__floatunsidf+0x48>
 400e924:	01400044 	movi	r5,1
 400e928:	28ca983a 	sll	r5,r5,r3
 400e92c:	003fe206 	br	400e8b8 <__floatunsidf+0xa4>

0400e930 <udivmodsi4>:
 400e930:	2005883a 	mov	r2,r4
 400e934:	2900182e 	bgeu	r5,r4,400e998 <udivmodsi4+0x68>
 400e938:	28001716 	blt	r5,zero,400e998 <udivmodsi4+0x68>
 400e93c:	01000804 	movi	r4,32
 400e940:	00c00044 	movi	r3,1
 400e944:	00000206 	br	400e950 <udivmodsi4+0x20>
 400e948:	20001126 	beq	r4,zero,400e990 <udivmodsi4+0x60>
 400e94c:	28000516 	blt	r5,zero,400e964 <udivmodsi4+0x34>
 400e950:	294b883a 	add	r5,r5,r5
 400e954:	213fffc4 	addi	r4,r4,-1
 400e958:	18c7883a 	add	r3,r3,r3
 400e95c:	28bffa36 	bltu	r5,r2,400e948 <udivmodsi4+0x18>
 400e960:	18000b26 	beq	r3,zero,400e990 <udivmodsi4+0x60>
 400e964:	0009883a 	mov	r4,zero
 400e968:	11400236 	bltu	r2,r5,400e974 <udivmodsi4+0x44>
 400e96c:	1145c83a 	sub	r2,r2,r5
 400e970:	20c8b03a 	or	r4,r4,r3
 400e974:	1806d07a 	srli	r3,r3,1
 400e978:	280ad07a 	srli	r5,r5,1
 400e97c:	183ffa1e 	bne	r3,zero,400e968 <udivmodsi4+0x38>
 400e980:	3000021e 	bne	r6,zero,400e98c <udivmodsi4+0x5c>
 400e984:	2005883a 	mov	r2,r4
 400e988:	f800283a 	ret
 400e98c:	f800283a 	ret
 400e990:	0009883a 	mov	r4,zero
 400e994:	003ffa06 	br	400e980 <udivmodsi4+0x50>
 400e998:	00c00044 	movi	r3,1
 400e99c:	0009883a 	mov	r4,zero
 400e9a0:	003ff106 	br	400e968 <udivmodsi4+0x38>

0400e9a4 <__divsi3>:
 400e9a4:	defffe04 	addi	sp,sp,-8
 400e9a8:	dfc00115 	stw	ra,4(sp)
 400e9ac:	dc000015 	stw	r16,0(sp)
 400e9b0:	20000a16 	blt	r4,zero,400e9dc <__divsi3+0x38>
 400e9b4:	0021883a 	mov	r16,zero
 400e9b8:	28000b16 	blt	r5,zero,400e9e8 <__divsi3+0x44>
 400e9bc:	000d883a 	mov	r6,zero
 400e9c0:	400e9300 	call	400e930 <udivmodsi4>
 400e9c4:	80000126 	beq	r16,zero,400e9cc <__divsi3+0x28>
 400e9c8:	0085c83a 	sub	r2,zero,r2
 400e9cc:	dfc00117 	ldw	ra,4(sp)
 400e9d0:	dc000017 	ldw	r16,0(sp)
 400e9d4:	dec00204 	addi	sp,sp,8
 400e9d8:	f800283a 	ret
 400e9dc:	0109c83a 	sub	r4,zero,r4
 400e9e0:	04000044 	movi	r16,1
 400e9e4:	283ff50e 	bge	r5,zero,400e9bc <__divsi3+0x18>
 400e9e8:	014bc83a 	sub	r5,zero,r5
 400e9ec:	8400005c 	xori	r16,r16,1
 400e9f0:	003ff206 	br	400e9bc <__divsi3+0x18>

0400e9f4 <__modsi3>:
 400e9f4:	deffff04 	addi	sp,sp,-4
 400e9f8:	dfc00015 	stw	ra,0(sp)
 400e9fc:	20000516 	blt	r4,zero,400ea14 <__modsi3+0x20>
 400ea00:	28000c16 	blt	r5,zero,400ea34 <__modsi3+0x40>
 400ea04:	01800044 	movi	r6,1
 400ea08:	dfc00017 	ldw	ra,0(sp)
 400ea0c:	dec00104 	addi	sp,sp,4
 400ea10:	400e9301 	jmpi	400e930 <udivmodsi4>
 400ea14:	0109c83a 	sub	r4,zero,r4
 400ea18:	28000b16 	blt	r5,zero,400ea48 <__modsi3+0x54>
 400ea1c:	01800044 	movi	r6,1
 400ea20:	400e9300 	call	400e930 <udivmodsi4>
 400ea24:	0085c83a 	sub	r2,zero,r2
 400ea28:	dfc00017 	ldw	ra,0(sp)
 400ea2c:	dec00104 	addi	sp,sp,4
 400ea30:	f800283a 	ret
 400ea34:	014bc83a 	sub	r5,zero,r5
 400ea38:	01800044 	movi	r6,1
 400ea3c:	dfc00017 	ldw	ra,0(sp)
 400ea40:	dec00104 	addi	sp,sp,4
 400ea44:	400e9301 	jmpi	400e930 <udivmodsi4>
 400ea48:	014bc83a 	sub	r5,zero,r5
 400ea4c:	003ff306 	br	400ea1c <__modsi3+0x28>

0400ea50 <__udivsi3>:
 400ea50:	000d883a 	mov	r6,zero
 400ea54:	400e9301 	jmpi	400e930 <udivmodsi4>

0400ea58 <__umodsi3>:
 400ea58:	01800044 	movi	r6,1
 400ea5c:	400e9301 	jmpi	400e930 <udivmodsi4>

0400ea60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ea60:	defffe04 	addi	sp,sp,-8
 400ea64:	dfc00115 	stw	ra,4(sp)
 400ea68:	df000015 	stw	fp,0(sp)
 400ea6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ea70:	00810374 	movhi	r2,1037
 400ea74:	10904704 	addi	r2,r2,16668
 400ea78:	10800017 	ldw	r2,0(r2)
 400ea7c:	10000526 	beq	r2,zero,400ea94 <alt_get_errno+0x34>
 400ea80:	00810374 	movhi	r2,1037
 400ea84:	10904704 	addi	r2,r2,16668
 400ea88:	10800017 	ldw	r2,0(r2)
 400ea8c:	103ee83a 	callr	r2
 400ea90:	00000206 	br	400ea9c <alt_get_errno+0x3c>
 400ea94:	00810374 	movhi	r2,1037
 400ea98:	10905404 	addi	r2,r2,16720
}
 400ea9c:	e037883a 	mov	sp,fp
 400eaa0:	dfc00117 	ldw	ra,4(sp)
 400eaa4:	df000017 	ldw	fp,0(sp)
 400eaa8:	dec00204 	addi	sp,sp,8
 400eaac:	f800283a 	ret

0400eab0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400eab0:	defffb04 	addi	sp,sp,-20
 400eab4:	dfc00415 	stw	ra,16(sp)
 400eab8:	df000315 	stw	fp,12(sp)
 400eabc:	df000304 	addi	fp,sp,12
 400eac0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400eac4:	e0bfff17 	ldw	r2,-4(fp)
 400eac8:	10000616 	blt	r2,zero,400eae4 <close+0x34>
 400eacc:	e0bfff17 	ldw	r2,-4(fp)
 400ead0:	10c00324 	muli	r3,r2,12
 400ead4:	00810374 	movhi	r2,1037
 400ead8:	108b9104 	addi	r2,r2,11844
 400eadc:	1885883a 	add	r2,r3,r2
 400eae0:	00000106 	br	400eae8 <close+0x38>
 400eae4:	0005883a 	mov	r2,zero
 400eae8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400eaec:	e0bffd17 	ldw	r2,-12(fp)
 400eaf0:	10001826 	beq	r2,zero,400eb54 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400eaf4:	e0bffd17 	ldw	r2,-12(fp)
 400eaf8:	10800017 	ldw	r2,0(r2)
 400eafc:	10800417 	ldw	r2,16(r2)
 400eb00:	10000626 	beq	r2,zero,400eb1c <close+0x6c>
 400eb04:	e0bffd17 	ldw	r2,-12(fp)
 400eb08:	10800017 	ldw	r2,0(r2)
 400eb0c:	10800417 	ldw	r2,16(r2)
 400eb10:	e13ffd17 	ldw	r4,-12(fp)
 400eb14:	103ee83a 	callr	r2
 400eb18:	00000106 	br	400eb20 <close+0x70>
 400eb1c:	0005883a 	mov	r2,zero
 400eb20:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400eb24:	e13fff17 	ldw	r4,-4(fp)
 400eb28:	400f0a80 	call	400f0a8 <alt_release_fd>
    if (rval < 0)
 400eb2c:	e0bffe17 	ldw	r2,-8(fp)
 400eb30:	1000060e 	bge	r2,zero,400eb4c <close+0x9c>
    {
      ALT_ERRNO = -rval;
 400eb34:	400ea600 	call	400ea60 <alt_get_errno>
 400eb38:	e0fffe17 	ldw	r3,-8(fp)
 400eb3c:	00c7c83a 	sub	r3,zero,r3
 400eb40:	10c00015 	stw	r3,0(r2)
      return -1;
 400eb44:	00bfffc4 	movi	r2,-1
 400eb48:	00000606 	br	400eb64 <close+0xb4>
    }
    return 0;
 400eb4c:	0005883a 	mov	r2,zero
 400eb50:	00000406 	br	400eb64 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400eb54:	400ea600 	call	400ea60 <alt_get_errno>
 400eb58:	00c01444 	movi	r3,81
 400eb5c:	10c00015 	stw	r3,0(r2)
    return -1;
 400eb60:	00bfffc4 	movi	r2,-1
  }
}
 400eb64:	e037883a 	mov	sp,fp
 400eb68:	dfc00117 	ldw	ra,4(sp)
 400eb6c:	df000017 	ldw	fp,0(sp)
 400eb70:	dec00204 	addi	sp,sp,8
 400eb74:	f800283a 	ret

0400eb78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400eb78:	defffc04 	addi	sp,sp,-16
 400eb7c:	df000315 	stw	fp,12(sp)
 400eb80:	df000304 	addi	fp,sp,12
 400eb84:	e13ffd15 	stw	r4,-12(fp)
 400eb88:	e17ffe15 	stw	r5,-8(fp)
 400eb8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400eb90:	e0bfff17 	ldw	r2,-4(fp)
}
 400eb94:	e037883a 	mov	sp,fp
 400eb98:	df000017 	ldw	fp,0(sp)
 400eb9c:	dec00104 	addi	sp,sp,4
 400eba0:	f800283a 	ret

0400eba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eba4:	defffe04 	addi	sp,sp,-8
 400eba8:	dfc00115 	stw	ra,4(sp)
 400ebac:	df000015 	stw	fp,0(sp)
 400ebb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ebb4:	00810374 	movhi	r2,1037
 400ebb8:	10904704 	addi	r2,r2,16668
 400ebbc:	10800017 	ldw	r2,0(r2)
 400ebc0:	10000526 	beq	r2,zero,400ebd8 <alt_get_errno+0x34>
 400ebc4:	00810374 	movhi	r2,1037
 400ebc8:	10904704 	addi	r2,r2,16668
 400ebcc:	10800017 	ldw	r2,0(r2)
 400ebd0:	103ee83a 	callr	r2
 400ebd4:	00000206 	br	400ebe0 <alt_get_errno+0x3c>
 400ebd8:	00810374 	movhi	r2,1037
 400ebdc:	10905404 	addi	r2,r2,16720
}
 400ebe0:	e037883a 	mov	sp,fp
 400ebe4:	dfc00117 	ldw	ra,4(sp)
 400ebe8:	df000017 	ldw	fp,0(sp)
 400ebec:	dec00204 	addi	sp,sp,8
 400ebf0:	f800283a 	ret

0400ebf4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400ebf4:	defffb04 	addi	sp,sp,-20
 400ebf8:	dfc00415 	stw	ra,16(sp)
 400ebfc:	df000315 	stw	fp,12(sp)
 400ec00:	df000304 	addi	fp,sp,12
 400ec04:	e13ffe15 	stw	r4,-8(fp)
 400ec08:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ec0c:	e0bffe17 	ldw	r2,-8(fp)
 400ec10:	10000616 	blt	r2,zero,400ec2c <fstat+0x38>
 400ec14:	e0bffe17 	ldw	r2,-8(fp)
 400ec18:	10c00324 	muli	r3,r2,12
 400ec1c:	00810374 	movhi	r2,1037
 400ec20:	108b9104 	addi	r2,r2,11844
 400ec24:	1885883a 	add	r2,r3,r2
 400ec28:	00000106 	br	400ec30 <fstat+0x3c>
 400ec2c:	0005883a 	mov	r2,zero
 400ec30:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400ec34:	e0bffd17 	ldw	r2,-12(fp)
 400ec38:	10001026 	beq	r2,zero,400ec7c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400ec3c:	e0bffd17 	ldw	r2,-12(fp)
 400ec40:	10800017 	ldw	r2,0(r2)
 400ec44:	10800817 	ldw	r2,32(r2)
 400ec48:	10000726 	beq	r2,zero,400ec68 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400ec4c:	e0bffd17 	ldw	r2,-12(fp)
 400ec50:	10800017 	ldw	r2,0(r2)
 400ec54:	10800817 	ldw	r2,32(r2)
 400ec58:	e13ffd17 	ldw	r4,-12(fp)
 400ec5c:	e17fff17 	ldw	r5,-4(fp)
 400ec60:	103ee83a 	callr	r2
 400ec64:	00000906 	br	400ec8c <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400ec68:	e0bfff17 	ldw	r2,-4(fp)
 400ec6c:	00c80004 	movi	r3,8192
 400ec70:	10c00115 	stw	r3,4(r2)
      return 0;
 400ec74:	0005883a 	mov	r2,zero
 400ec78:	00000406 	br	400ec8c <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ec7c:	400eba40 	call	400eba4 <alt_get_errno>
 400ec80:	00c01444 	movi	r3,81
 400ec84:	10c00015 	stw	r3,0(r2)
    return -1;
 400ec88:	00bfffc4 	movi	r2,-1
  }
}
 400ec8c:	e037883a 	mov	sp,fp
 400ec90:	dfc00117 	ldw	ra,4(sp)
 400ec94:	df000017 	ldw	fp,0(sp)
 400ec98:	dec00204 	addi	sp,sp,8
 400ec9c:	f800283a 	ret

0400eca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400eca0:	defffe04 	addi	sp,sp,-8
 400eca4:	dfc00115 	stw	ra,4(sp)
 400eca8:	df000015 	stw	fp,0(sp)
 400ecac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ecb0:	00810374 	movhi	r2,1037
 400ecb4:	10904704 	addi	r2,r2,16668
 400ecb8:	10800017 	ldw	r2,0(r2)
 400ecbc:	10000526 	beq	r2,zero,400ecd4 <alt_get_errno+0x34>
 400ecc0:	00810374 	movhi	r2,1037
 400ecc4:	10904704 	addi	r2,r2,16668
 400ecc8:	10800017 	ldw	r2,0(r2)
 400eccc:	103ee83a 	callr	r2
 400ecd0:	00000206 	br	400ecdc <alt_get_errno+0x3c>
 400ecd4:	00810374 	movhi	r2,1037
 400ecd8:	10905404 	addi	r2,r2,16720
}
 400ecdc:	e037883a 	mov	sp,fp
 400ece0:	dfc00117 	ldw	ra,4(sp)
 400ece4:	df000017 	ldw	fp,0(sp)
 400ece8:	dec00204 	addi	sp,sp,8
 400ecec:	f800283a 	ret

0400ecf0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400ecf0:	deffed04 	addi	sp,sp,-76
 400ecf4:	dfc01215 	stw	ra,72(sp)
 400ecf8:	df001115 	stw	fp,68(sp)
 400ecfc:	df001104 	addi	fp,sp,68
 400ed00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ed04:	e0bfff17 	ldw	r2,-4(fp)
 400ed08:	10000616 	blt	r2,zero,400ed24 <isatty+0x34>
 400ed0c:	e0bfff17 	ldw	r2,-4(fp)
 400ed10:	10c00324 	muli	r3,r2,12
 400ed14:	00810374 	movhi	r2,1037
 400ed18:	108b9104 	addi	r2,r2,11844
 400ed1c:	1885883a 	add	r2,r3,r2
 400ed20:	00000106 	br	400ed28 <isatty+0x38>
 400ed24:	0005883a 	mov	r2,zero
 400ed28:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400ed2c:	e0bfef17 	ldw	r2,-68(fp)
 400ed30:	10000e26 	beq	r2,zero,400ed6c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400ed34:	e0bfef17 	ldw	r2,-68(fp)
 400ed38:	10800017 	ldw	r2,0(r2)
 400ed3c:	10800817 	ldw	r2,32(r2)
 400ed40:	1000021e 	bne	r2,zero,400ed4c <isatty+0x5c>
    {
      return 1;
 400ed44:	00800044 	movi	r2,1
 400ed48:	00000c06 	br	400ed7c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400ed4c:	e0bff004 	addi	r2,fp,-64
 400ed50:	e13fff17 	ldw	r4,-4(fp)
 400ed54:	100b883a 	mov	r5,r2
 400ed58:	400ebf40 	call	400ebf4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400ed5c:	e0bff117 	ldw	r2,-60(fp)
 400ed60:	10880020 	cmpeqi	r2,r2,8192
 400ed64:	10803fcc 	andi	r2,r2,255
 400ed68:	00000406 	br	400ed7c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ed6c:	400eca00 	call	400eca0 <alt_get_errno>
 400ed70:	00c01444 	movi	r3,81
 400ed74:	10c00015 	stw	r3,0(r2)
    return 0;
 400ed78:	0005883a 	mov	r2,zero
  }
}
 400ed7c:	e037883a 	mov	sp,fp
 400ed80:	dfc00117 	ldw	ra,4(sp)
 400ed84:	df000017 	ldw	fp,0(sp)
 400ed88:	dec00204 	addi	sp,sp,8
 400ed8c:	f800283a 	ret

0400ed90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ed90:	defffe04 	addi	sp,sp,-8
 400ed94:	dfc00115 	stw	ra,4(sp)
 400ed98:	df000015 	stw	fp,0(sp)
 400ed9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400eda0:	00810374 	movhi	r2,1037
 400eda4:	10904704 	addi	r2,r2,16668
 400eda8:	10800017 	ldw	r2,0(r2)
 400edac:	10000526 	beq	r2,zero,400edc4 <alt_get_errno+0x34>
 400edb0:	00810374 	movhi	r2,1037
 400edb4:	10904704 	addi	r2,r2,16668
 400edb8:	10800017 	ldw	r2,0(r2)
 400edbc:	103ee83a 	callr	r2
 400edc0:	00000206 	br	400edcc <alt_get_errno+0x3c>
 400edc4:	00810374 	movhi	r2,1037
 400edc8:	10905404 	addi	r2,r2,16720
}
 400edcc:	e037883a 	mov	sp,fp
 400edd0:	dfc00117 	ldw	ra,4(sp)
 400edd4:	df000017 	ldw	fp,0(sp)
 400edd8:	dec00204 	addi	sp,sp,8
 400eddc:	f800283a 	ret

0400ede0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400ede0:	defff904 	addi	sp,sp,-28
 400ede4:	dfc00615 	stw	ra,24(sp)
 400ede8:	df000515 	stw	fp,20(sp)
 400edec:	df000504 	addi	fp,sp,20
 400edf0:	e13ffd15 	stw	r4,-12(fp)
 400edf4:	e17ffe15 	stw	r5,-8(fp)
 400edf8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400edfc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ee00:	e0bffd17 	ldw	r2,-12(fp)
 400ee04:	10000616 	blt	r2,zero,400ee20 <lseek+0x40>
 400ee08:	e0bffd17 	ldw	r2,-12(fp)
 400ee0c:	10c00324 	muli	r3,r2,12
 400ee10:	00810374 	movhi	r2,1037
 400ee14:	108b9104 	addi	r2,r2,11844
 400ee18:	1885883a 	add	r2,r3,r2
 400ee1c:	00000106 	br	400ee24 <lseek+0x44>
 400ee20:	0005883a 	mov	r2,zero
 400ee24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400ee28:	e0bffc17 	ldw	r2,-16(fp)
 400ee2c:	10001026 	beq	r2,zero,400ee70 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400ee30:	e0bffc17 	ldw	r2,-16(fp)
 400ee34:	10800017 	ldw	r2,0(r2)
 400ee38:	10800717 	ldw	r2,28(r2)
 400ee3c:	10000926 	beq	r2,zero,400ee64 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400ee40:	e0bffc17 	ldw	r2,-16(fp)
 400ee44:	10800017 	ldw	r2,0(r2)
 400ee48:	10800717 	ldw	r2,28(r2)
 400ee4c:	e13ffc17 	ldw	r4,-16(fp)
 400ee50:	e17ffe17 	ldw	r5,-8(fp)
 400ee54:	e1bfff17 	ldw	r6,-4(fp)
 400ee58:	103ee83a 	callr	r2
 400ee5c:	e0bffb15 	stw	r2,-20(fp)
 400ee60:	00000506 	br	400ee78 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400ee64:	00bfde84 	movi	r2,-134
 400ee68:	e0bffb15 	stw	r2,-20(fp)
 400ee6c:	00000206 	br	400ee78 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400ee70:	00bfebc4 	movi	r2,-81
 400ee74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400ee78:	e0bffb17 	ldw	r2,-20(fp)
 400ee7c:	1000060e 	bge	r2,zero,400ee98 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 400ee80:	400ed900 	call	400ed90 <alt_get_errno>
 400ee84:	e0fffb17 	ldw	r3,-20(fp)
 400ee88:	00c7c83a 	sub	r3,zero,r3
 400ee8c:	10c00015 	stw	r3,0(r2)
    rc = -1;
 400ee90:	00bfffc4 	movi	r2,-1
 400ee94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400ee98:	e0bffb17 	ldw	r2,-20(fp)
}
 400ee9c:	e037883a 	mov	sp,fp
 400eea0:	dfc00117 	ldw	ra,4(sp)
 400eea4:	df000017 	ldw	fp,0(sp)
 400eea8:	dec00204 	addi	sp,sp,8
 400eeac:	f800283a 	ret

0400eeb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400eeb0:	defffd04 	addi	sp,sp,-12
 400eeb4:	dfc00215 	stw	ra,8(sp)
 400eeb8:	df000115 	stw	fp,4(sp)
 400eebc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400eec0:	0009883a 	mov	r4,zero
 400eec4:	400f35c0 	call	400f35c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400eec8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400eecc:	400f3900 	call	400f390 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400eed0:	01010374 	movhi	r4,1037
 400eed4:	21097704 	addi	r4,r4,9692
 400eed8:	01410374 	movhi	r5,1037
 400eedc:	29497704 	addi	r5,r5,9692
 400eee0:	01810374 	movhi	r6,1037
 400eee4:	31897704 	addi	r6,r6,9692
 400eee8:	40116480 	call	4011648 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400eeec:	40111500 	call	4011150 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400eef0:	01010074 	movhi	r4,1025
 400eef4:	21046b04 	addi	r4,r4,4524
 400eef8:	4011f4c0 	call	4011f4c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400eefc:	d1201a17 	ldw	r4,-32664(gp)
 400ef00:	d0e01b17 	ldw	r3,-32660(gp)
 400ef04:	d0a01c17 	ldw	r2,-32656(gp)
 400ef08:	180b883a 	mov	r5,r3
 400ef0c:	100d883a 	mov	r6,r2
 400ef10:	40055d00 	call	40055d0 <main>
 400ef14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400ef18:	01000044 	movi	r4,1
 400ef1c:	400eab00 	call	400eab0 <close>
  exit (result);
 400ef20:	e13fff17 	ldw	r4,-4(fp)
 400ef24:	4011f600 	call	4011f60 <exit>

0400ef28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400ef28:	defffe04 	addi	sp,sp,-8
 400ef2c:	df000115 	stw	fp,4(sp)
 400ef30:	df000104 	addi	fp,sp,4
 400ef34:	e13fff15 	stw	r4,-4(fp)
}
 400ef38:	e037883a 	mov	sp,fp
 400ef3c:	df000017 	ldw	fp,0(sp)
 400ef40:	dec00104 	addi	sp,sp,4
 400ef44:	f800283a 	ret

0400ef48 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ef48:	defffe04 	addi	sp,sp,-8
 400ef4c:	df000115 	stw	fp,4(sp)
 400ef50:	df000104 	addi	fp,sp,4
 400ef54:	e13fff15 	stw	r4,-4(fp)
}
 400ef58:	e037883a 	mov	sp,fp
 400ef5c:	df000017 	ldw	fp,0(sp)
 400ef60:	dec00104 	addi	sp,sp,4
 400ef64:	f800283a 	ret

0400ef68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ef68:	defffe04 	addi	sp,sp,-8
 400ef6c:	dfc00115 	stw	ra,4(sp)
 400ef70:	df000015 	stw	fp,0(sp)
 400ef74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ef78:	00810374 	movhi	r2,1037
 400ef7c:	10904704 	addi	r2,r2,16668
 400ef80:	10800017 	ldw	r2,0(r2)
 400ef84:	10000526 	beq	r2,zero,400ef9c <alt_get_errno+0x34>
 400ef88:	00810374 	movhi	r2,1037
 400ef8c:	10904704 	addi	r2,r2,16668
 400ef90:	10800017 	ldw	r2,0(r2)
 400ef94:	103ee83a 	callr	r2
 400ef98:	00000206 	br	400efa4 <alt_get_errno+0x3c>
 400ef9c:	00810374 	movhi	r2,1037
 400efa0:	10905404 	addi	r2,r2,16720
}
 400efa4:	e037883a 	mov	sp,fp
 400efa8:	dfc00117 	ldw	ra,4(sp)
 400efac:	df000017 	ldw	fp,0(sp)
 400efb0:	dec00204 	addi	sp,sp,8
 400efb4:	f800283a 	ret

0400efb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400efb8:	defff904 	addi	sp,sp,-28
 400efbc:	dfc00615 	stw	ra,24(sp)
 400efc0:	df000515 	stw	fp,20(sp)
 400efc4:	df000504 	addi	fp,sp,20
 400efc8:	e13ffd15 	stw	r4,-12(fp)
 400efcc:	e17ffe15 	stw	r5,-8(fp)
 400efd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400efd4:	e0bffd17 	ldw	r2,-12(fp)
 400efd8:	10000616 	blt	r2,zero,400eff4 <read+0x3c>
 400efdc:	e0bffd17 	ldw	r2,-12(fp)
 400efe0:	10c00324 	muli	r3,r2,12
 400efe4:	00810374 	movhi	r2,1037
 400efe8:	108b9104 	addi	r2,r2,11844
 400efec:	1885883a 	add	r2,r3,r2
 400eff0:	00000106 	br	400eff8 <read+0x40>
 400eff4:	0005883a 	mov	r2,zero
 400eff8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400effc:	e0bffb17 	ldw	r2,-20(fp)
 400f000:	10002026 	beq	r2,zero,400f084 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f004:	e0bffb17 	ldw	r2,-20(fp)
 400f008:	10800217 	ldw	r2,8(r2)
 400f00c:	108000cc 	andi	r2,r2,3
 400f010:	10800060 	cmpeqi	r2,r2,1
 400f014:	1000171e 	bne	r2,zero,400f074 <read+0xbc>
        (fd->dev->read))
 400f018:	e0bffb17 	ldw	r2,-20(fp)
 400f01c:	10800017 	ldw	r2,0(r2)
 400f020:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400f024:	10001326 	beq	r2,zero,400f074 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400f028:	e0bffb17 	ldw	r2,-20(fp)
 400f02c:	10800017 	ldw	r2,0(r2)
 400f030:	10c00517 	ldw	r3,20(r2)
 400f034:	e0bfff17 	ldw	r2,-4(fp)
 400f038:	e13ffb17 	ldw	r4,-20(fp)
 400f03c:	e17ffe17 	ldw	r5,-8(fp)
 400f040:	100d883a 	mov	r6,r2
 400f044:	183ee83a 	callr	r3
 400f048:	e0bffc15 	stw	r2,-16(fp)
 400f04c:	e0bffc17 	ldw	r2,-16(fp)
 400f050:	1000060e 	bge	r2,zero,400f06c <read+0xb4>
        {
          ALT_ERRNO = -rval;
 400f054:	400ef680 	call	400ef68 <alt_get_errno>
 400f058:	e0fffc17 	ldw	r3,-16(fp)
 400f05c:	00c7c83a 	sub	r3,zero,r3
 400f060:	10c00015 	stw	r3,0(r2)
          return -1;
 400f064:	00bfffc4 	movi	r2,-1
 400f068:	00000a06 	br	400f094 <read+0xdc>
        }
        return rval;
 400f06c:	e0bffc17 	ldw	r2,-16(fp)
 400f070:	00000806 	br	400f094 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400f074:	400ef680 	call	400ef68 <alt_get_errno>
 400f078:	00c00344 	movi	r3,13
 400f07c:	10c00015 	stw	r3,0(r2)
 400f080:	00000306 	br	400f090 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400f084:	400ef680 	call	400ef68 <alt_get_errno>
 400f088:	00c01444 	movi	r3,81
 400f08c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400f090:	00bfffc4 	movi	r2,-1
}
 400f094:	e037883a 	mov	sp,fp
 400f098:	dfc00117 	ldw	ra,4(sp)
 400f09c:	df000017 	ldw	fp,0(sp)
 400f0a0:	dec00204 	addi	sp,sp,8
 400f0a4:	f800283a 	ret

0400f0a8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400f0a8:	defffe04 	addi	sp,sp,-8
 400f0ac:	df000115 	stw	fp,4(sp)
 400f0b0:	df000104 	addi	fp,sp,4
 400f0b4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400f0b8:	e0bfff17 	ldw	r2,-4(fp)
 400f0bc:	108000d0 	cmplti	r2,r2,3
 400f0c0:	10000d1e 	bne	r2,zero,400f0f8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400f0c4:	00c10374 	movhi	r3,1037
 400f0c8:	18cb9104 	addi	r3,r3,11844
 400f0cc:	e0bfff17 	ldw	r2,-4(fp)
 400f0d0:	10800324 	muli	r2,r2,12
 400f0d4:	1885883a 	add	r2,r3,r2
 400f0d8:	10800204 	addi	r2,r2,8
 400f0dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400f0e0:	00c10374 	movhi	r3,1037
 400f0e4:	18cb9104 	addi	r3,r3,11844
 400f0e8:	e0bfff17 	ldw	r2,-4(fp)
 400f0ec:	10800324 	muli	r2,r2,12
 400f0f0:	1885883a 	add	r2,r3,r2
 400f0f4:	10000015 	stw	zero,0(r2)
  }
}
 400f0f8:	e037883a 	mov	sp,fp
 400f0fc:	df000017 	ldw	fp,0(sp)
 400f100:	dec00104 	addi	sp,sp,4
 400f104:	f800283a 	ret

0400f108 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400f108:	defff904 	addi	sp,sp,-28
 400f10c:	df000615 	stw	fp,24(sp)
 400f110:	df000604 	addi	fp,sp,24
 400f114:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f118:	0005303a 	rdctl	r2,status
 400f11c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f120:	e0fffc17 	ldw	r3,-16(fp)
 400f124:	00bfff84 	movi	r2,-2
 400f128:	1884703a 	and	r2,r3,r2
 400f12c:	1001703a 	wrctl	status,r2
  
  return context;
 400f130:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400f134:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400f138:	d0a00d17 	ldw	r2,-32716(gp)
 400f13c:	10c000c4 	addi	r3,r2,3
 400f140:	00bfff04 	movi	r2,-4
 400f144:	1884703a 	and	r2,r3,r2
 400f148:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400f14c:	d0e00d17 	ldw	r3,-32716(gp)
 400f150:	e0bfff17 	ldw	r2,-4(fp)
 400f154:	1885883a 	add	r2,r3,r2
 400f158:	00c18034 	movhi	r3,1536
 400f15c:	18c00004 	addi	r3,r3,0
 400f160:	1880062e 	bgeu	r3,r2,400f17c <sbrk+0x74>
 400f164:	e0bffa17 	ldw	r2,-24(fp)
 400f168:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f16c:	e0bffd17 	ldw	r2,-12(fp)
 400f170:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400f174:	00bfffc4 	movi	r2,-1
 400f178:	00000b06 	br	400f1a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400f17c:	d0a00d17 	ldw	r2,-32716(gp)
 400f180:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 400f184:	d0e00d17 	ldw	r3,-32716(gp)
 400f188:	e0bfff17 	ldw	r2,-4(fp)
 400f18c:	1885883a 	add	r2,r3,r2
 400f190:	d0a00d15 	stw	r2,-32716(gp)
 400f194:	e0bffa17 	ldw	r2,-24(fp)
 400f198:	e0bffe15 	stw	r2,-8(fp)
 400f19c:	e0bffe17 	ldw	r2,-8(fp)
 400f1a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400f1a4:	e0bffb17 	ldw	r2,-20(fp)
} 
 400f1a8:	e037883a 	mov	sp,fp
 400f1ac:	df000017 	ldw	fp,0(sp)
 400f1b0:	dec00104 	addi	sp,sp,4
 400f1b4:	f800283a 	ret

0400f1b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400f1b8:	defffd04 	addi	sp,sp,-12
 400f1bc:	dfc00215 	stw	ra,8(sp)
 400f1c0:	df000115 	stw	fp,4(sp)
 400f1c4:	df000104 	addi	fp,sp,4
 400f1c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400f1cc:	e13fff17 	ldw	r4,-4(fp)
 400f1d0:	4010f380 	call	4010f38 <alt_busy_sleep>
}
 400f1d4:	e037883a 	mov	sp,fp
 400f1d8:	dfc00117 	ldw	ra,4(sp)
 400f1dc:	df000017 	ldw	fp,0(sp)
 400f1e0:	dec00204 	addi	sp,sp,8
 400f1e4:	f800283a 	ret

0400f1e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400f1e8:	defffe04 	addi	sp,sp,-8
 400f1ec:	dfc00115 	stw	ra,4(sp)
 400f1f0:	df000015 	stw	fp,0(sp)
 400f1f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400f1f8:	00810374 	movhi	r2,1037
 400f1fc:	10904704 	addi	r2,r2,16668
 400f200:	10800017 	ldw	r2,0(r2)
 400f204:	10000526 	beq	r2,zero,400f21c <alt_get_errno+0x34>
 400f208:	00810374 	movhi	r2,1037
 400f20c:	10904704 	addi	r2,r2,16668
 400f210:	10800017 	ldw	r2,0(r2)
 400f214:	103ee83a 	callr	r2
 400f218:	00000206 	br	400f224 <alt_get_errno+0x3c>
 400f21c:	00810374 	movhi	r2,1037
 400f220:	10905404 	addi	r2,r2,16720
}
 400f224:	e037883a 	mov	sp,fp
 400f228:	dfc00117 	ldw	ra,4(sp)
 400f22c:	df000017 	ldw	fp,0(sp)
 400f230:	dec00204 	addi	sp,sp,8
 400f234:	f800283a 	ret

0400f238 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400f238:	defff904 	addi	sp,sp,-28
 400f23c:	dfc00615 	stw	ra,24(sp)
 400f240:	df000515 	stw	fp,20(sp)
 400f244:	df000504 	addi	fp,sp,20
 400f248:	e13ffd15 	stw	r4,-12(fp)
 400f24c:	e17ffe15 	stw	r5,-8(fp)
 400f250:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400f254:	e0bffd17 	ldw	r2,-12(fp)
 400f258:	10000616 	blt	r2,zero,400f274 <write+0x3c>
 400f25c:	e0bffd17 	ldw	r2,-12(fp)
 400f260:	10c00324 	muli	r3,r2,12
 400f264:	00810374 	movhi	r2,1037
 400f268:	108b9104 	addi	r2,r2,11844
 400f26c:	1885883a 	add	r2,r3,r2
 400f270:	00000106 	br	400f278 <write+0x40>
 400f274:	0005883a 	mov	r2,zero
 400f278:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400f27c:	e0bffb17 	ldw	r2,-20(fp)
 400f280:	10001f26 	beq	r2,zero,400f300 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400f284:	e0bffb17 	ldw	r2,-20(fp)
 400f288:	10800217 	ldw	r2,8(r2)
 400f28c:	108000cc 	andi	r2,r2,3
 400f290:	10001726 	beq	r2,zero,400f2f0 <write+0xb8>
 400f294:	e0bffb17 	ldw	r2,-20(fp)
 400f298:	10800017 	ldw	r2,0(r2)
 400f29c:	10800617 	ldw	r2,24(r2)
 400f2a0:	10001326 	beq	r2,zero,400f2f0 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400f2a4:	e0bffb17 	ldw	r2,-20(fp)
 400f2a8:	10800017 	ldw	r2,0(r2)
 400f2ac:	10c00617 	ldw	r3,24(r2)
 400f2b0:	e0bfff17 	ldw	r2,-4(fp)
 400f2b4:	e13ffb17 	ldw	r4,-20(fp)
 400f2b8:	e17ffe17 	ldw	r5,-8(fp)
 400f2bc:	100d883a 	mov	r6,r2
 400f2c0:	183ee83a 	callr	r3
 400f2c4:	e0bffc15 	stw	r2,-16(fp)
 400f2c8:	e0bffc17 	ldw	r2,-16(fp)
 400f2cc:	1000060e 	bge	r2,zero,400f2e8 <write+0xb0>
      {
        ALT_ERRNO = -rval;
 400f2d0:	400f1e80 	call	400f1e8 <alt_get_errno>
 400f2d4:	e0fffc17 	ldw	r3,-16(fp)
 400f2d8:	00c7c83a 	sub	r3,zero,r3
 400f2dc:	10c00015 	stw	r3,0(r2)
        return -1;
 400f2e0:	00bfffc4 	movi	r2,-1
 400f2e4:	00000a06 	br	400f310 <write+0xd8>
      }
      return rval;
 400f2e8:	e0bffc17 	ldw	r2,-16(fp)
 400f2ec:	00000806 	br	400f310 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400f2f0:	400f1e80 	call	400f1e8 <alt_get_errno>
 400f2f4:	00c00344 	movi	r3,13
 400f2f8:	10c00015 	stw	r3,0(r2)
 400f2fc:	00000306 	br	400f30c <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400f300:	400f1e80 	call	400f1e8 <alt_get_errno>
 400f304:	00c01444 	movi	r3,81
 400f308:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400f30c:	00bfffc4 	movi	r2,-1
}
 400f310:	e037883a 	mov	sp,fp
 400f314:	dfc00117 	ldw	ra,4(sp)
 400f318:	df000017 	ldw	fp,0(sp)
 400f31c:	dec00204 	addi	sp,sp,8
 400f320:	f800283a 	ret

0400f324 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400f324:	defffd04 	addi	sp,sp,-12
 400f328:	dfc00215 	stw	ra,8(sp)
 400f32c:	df000115 	stw	fp,4(sp)
 400f330:	df000104 	addi	fp,sp,4
 400f334:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400f338:	e13fff17 	ldw	r4,-4(fp)
 400f33c:	01410374 	movhi	r5,1037
 400f340:	29504404 	addi	r5,r5,16656
 400f344:	40110b00 	call	40110b0 <alt_dev_llist_insert>
}
 400f348:	e037883a 	mov	sp,fp
 400f34c:	dfc00117 	ldw	ra,4(sp)
 400f350:	df000017 	ldw	fp,0(sp)
 400f354:	dec00204 	addi	sp,sp,8
 400f358:	f800283a 	ret

0400f35c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400f35c:	defffd04 	addi	sp,sp,-12
 400f360:	dfc00215 	stw	ra,8(sp)
 400f364:	df000115 	stw	fp,4(sp)
 400f368:	df000104 	addi	fp,sp,4
 400f36c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 400f370:	4011acc0 	call	4011acc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400f374:	00800044 	movi	r2,1
 400f378:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400f37c:	e037883a 	mov	sp,fp
 400f380:	dfc00117 	ldw	ra,4(sp)
 400f384:	df000017 	ldw	fp,0(sp)
 400f388:	dec00204 	addi	sp,sp,8
 400f38c:	f800283a 	ret

0400f390 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400f390:	defffe04 	addi	sp,sp,-8
 400f394:	dfc00115 	stw	ra,4(sp)
 400f398:	df000015 	stw	fp,0(sp)
 400f39c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 400f3a0:	01010374 	movhi	r4,1037
 400f3a4:	210bf104 	addi	r4,r4,12228
 400f3a8:	400f4180 	call	400f418 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400f3ac:	01010374 	movhi	r4,1037
 400f3b0:	210c2d04 	addi	r4,r4,12468
 400f3b4:	000b883a 	mov	r5,zero
 400f3b8:	01800044 	movi	r6,1
 400f3bc:	400fed40 	call	400fed4 <altera_avalon_jtag_uart_init>
 400f3c0:	01010374 	movhi	r4,1037
 400f3c4:	210c2304 	addi	r4,r4,12428
 400f3c8:	400f3240 	call	400f324 <alt_dev_reg>
}
 400f3cc:	e037883a 	mov	sp,fp
 400f3d0:	dfc00117 	ldw	ra,4(sp)
 400f3d4:	df000017 	ldw	fp,0(sp)
 400f3d8:	dec00204 	addi	sp,sp,8
 400f3dc:	f800283a 	ret

0400f3e0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 400f3e0:	defffd04 	addi	sp,sp,-12
 400f3e4:	dfc00215 	stw	ra,8(sp)
 400f3e8:	df000115 	stw	fp,4(sp)
 400f3ec:	df000104 	addi	fp,sp,4
 400f3f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 400f3f4:	e13fff17 	ldw	r4,-4(fp)
 400f3f8:	01410374 	movhi	r5,1037
 400f3fc:	29504904 	addi	r5,r5,16676
 400f400:	40110b00 	call	40110b0 <alt_dev_llist_insert>
}
 400f404:	e037883a 	mov	sp,fp
 400f408:	dfc00117 	ldw	ra,4(sp)
 400f40c:	df000017 	ldw	fp,0(sp)
 400f410:	dec00204 	addi	sp,sp,8
 400f414:	f800283a 	ret

0400f418 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 400f418:	defffc04 	addi	sp,sp,-16
 400f41c:	dfc00315 	stw	ra,12(sp)
 400f420:	df000215 	stw	fp,8(sp)
 400f424:	df000204 	addi	fp,sp,8
 400f428:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 400f42c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 400f430:	e13fff17 	ldw	r4,-4(fp)
 400f434:	400f46c0 	call	400f46c <alt_epcs_flash_query>
 400f438:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 400f43c:	e0bffe17 	ldw	r2,-8(fp)
 400f440:	1000041e 	bne	r2,zero,400f454 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 400f444:	e0bfff17 	ldw	r2,-4(fp)
 400f448:	1009883a 	mov	r4,r2
 400f44c:	400f3e00 	call	400f3e0 <alt_flash_device_register>
 400f450:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 400f454:	e0bffe17 	ldw	r2,-8(fp)
}
 400f458:	e037883a 	mov	sp,fp
 400f45c:	dfc00117 	ldw	ra,4(sp)
 400f460:	df000017 	ldw	fp,0(sp)
 400f464:	dec00204 	addi	sp,sp,8
 400f468:	f800283a 	ret

0400f46c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 400f46c:	defffc04 	addi	sp,sp,-16
 400f470:	dfc00315 	stw	ra,12(sp)
 400f474:	df000215 	stw	fp,8(sp)
 400f478:	df000204 	addi	fp,sp,8
 400f47c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 400f480:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 400f484:	e0bfff17 	ldw	r2,-4(fp)
 400f488:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 400f48c:	e0bfff17 	ldw	r2,-4(fp)
 400f490:	10802d17 	ldw	r2,180(r2)
 400f494:	1009883a 	mov	r4,r2
 400f498:	4010c600 	call	4010c60 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 400f49c:	10c03fcc 	andi	r3,r2,255
 400f4a0:	e0bfff17 	ldw	r2,-4(fp)
 400f4a4:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 400f4a8:	e0bfff17 	ldw	r2,-4(fp)
 400f4ac:	10802f17 	ldw	r2,188(r2)
 400f4b0:	10800598 	cmpnei	r2,r2,22
 400f4b4:	10000a1e 	bne	r2,zero,400f4e0 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 400f4b8:	e0bfff17 	ldw	r2,-4(fp)
 400f4bc:	00c02034 	movhi	r3,128
 400f4c0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 400f4c4:	e0bfff17 	ldw	r2,-4(fp)
 400f4c8:	00c02004 	movi	r3,128
 400f4cc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 400f4d0:	e0bfff17 	ldw	r2,-4(fp)
 400f4d4:	00c00074 	movhi	r3,1
 400f4d8:	10c01015 	stw	r3,64(r2)
 400f4dc:	00007306 	br	400f6ac <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 400f4e0:	e0bfff17 	ldw	r2,-4(fp)
 400f4e4:	10802f17 	ldw	r2,188(r2)
 400f4e8:	10800518 	cmpnei	r2,r2,20
 400f4ec:	10000a1e 	bne	r2,zero,400f518 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 400f4f0:	e0bfff17 	ldw	r2,-4(fp)
 400f4f4:	00c00834 	movhi	r3,32
 400f4f8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 400f4fc:	e0bfff17 	ldw	r2,-4(fp)
 400f500:	00c00804 	movi	r3,32
 400f504:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 400f508:	e0bfff17 	ldw	r2,-4(fp)
 400f50c:	00c00074 	movhi	r3,1
 400f510:	10c01015 	stw	r3,64(r2)
 400f514:	00006506 	br	400f6ac <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 400f518:	e0bfff17 	ldw	r2,-4(fp)
 400f51c:	10802f17 	ldw	r2,188(r2)
 400f520:	108004d8 	cmpnei	r2,r2,19
 400f524:	10000a1e 	bne	r2,zero,400f550 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 400f528:	e0bfff17 	ldw	r2,-4(fp)
 400f52c:	00c00434 	movhi	r3,16
 400f530:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 400f534:	e0bfff17 	ldw	r2,-4(fp)
 400f538:	00c00404 	movi	r3,16
 400f53c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 400f540:	e0bfff17 	ldw	r2,-4(fp)
 400f544:	00c00074 	movhi	r3,1
 400f548:	10c01015 	stw	r3,64(r2)
 400f54c:	00005706 	br	400f6ac <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 400f550:	e0bfff17 	ldw	r2,-4(fp)
 400f554:	10802f17 	ldw	r2,188(r2)
 400f558:	10800498 	cmpnei	r2,r2,18
 400f55c:	10000a1e 	bne	r2,zero,400f588 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 400f560:	e0bfff17 	ldw	r2,-4(fp)
 400f564:	00c00234 	movhi	r3,8
 400f568:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 400f56c:	e0bfff17 	ldw	r2,-4(fp)
 400f570:	00c00204 	movi	r3,8
 400f574:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 400f578:	e0bfff17 	ldw	r2,-4(fp)
 400f57c:	00c00074 	movhi	r3,1
 400f580:	10c01015 	stw	r3,64(r2)
 400f584:	00004906 	br	400f6ac <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 400f588:	e0bfff17 	ldw	r2,-4(fp)
 400f58c:	10802f17 	ldw	r2,188(r2)
 400f590:	10800418 	cmpnei	r2,r2,16
 400f594:	10000a1e 	bne	r2,zero,400f5c0 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 400f598:	e0bfff17 	ldw	r2,-4(fp)
 400f59c:	00c000b4 	movhi	r3,2
 400f5a0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 400f5a4:	e0bfff17 	ldw	r2,-4(fp)
 400f5a8:	00c00104 	movi	r3,4
 400f5ac:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 400f5b0:	e0bfff17 	ldw	r2,-4(fp)
 400f5b4:	00e00014 	movui	r3,32768
 400f5b8:	10c01015 	stw	r3,64(r2)
 400f5bc:	00003b06 	br	400f6ac <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 400f5c0:	e0bfff17 	ldw	r2,-4(fp)
 400f5c4:	10802d17 	ldw	r2,180(r2)
 400f5c8:	1009883a 	mov	r4,r2
 400f5cc:	4010cc80 	call	4010cc8 <epcs_read_device_id>
 400f5d0:	e0ffff17 	ldw	r3,-4(fp)
 400f5d4:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 400f5d8:	e0bfff17 	ldw	r2,-4(fp)
 400f5dc:	10c02f17 	ldw	r3,188(r2)
 400f5e0:	00804034 	movhi	r2,256
 400f5e4:	10bfffc4 	addi	r2,r2,-1
 400f5e8:	1886703a 	and	r3,r3,r2
 400f5ec:	00800874 	movhi	r2,33
 400f5f0:	10ae8604 	addi	r2,r2,-17896
 400f5f4:	18800a1e 	bne	r3,r2,400f620 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 400f5f8:	e0bfff17 	ldw	r2,-4(fp)
 400f5fc:	00c04034 	movhi	r3,256
 400f600:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 400f604:	e0bfff17 	ldw	r2,-4(fp)
 400f608:	00c04004 	movi	r3,256
 400f60c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 400f610:	e0bfff17 	ldw	r2,-4(fp)
 400f614:	00c00074 	movhi	r3,1
 400f618:	10c01015 	stw	r3,64(r2)
 400f61c:	00002306 	br	400f6ac <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 400f620:	e0bfff17 	ldw	r2,-4(fp)
 400f624:	10802f17 	ldw	r2,188(r2)
 400f628:	10803fcc 	andi	r2,r2,255
 400f62c:	10800618 	cmpnei	r2,r2,24
 400f630:	10000a1e 	bne	r2,zero,400f65c <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 400f634:	e0bfff17 	ldw	r2,-4(fp)
 400f638:	00c04034 	movhi	r3,256
 400f63c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 400f640:	e0bfff17 	ldw	r2,-4(fp)
 400f644:	00c01004 	movi	r3,64
 400f648:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 400f64c:	e0bfff17 	ldw	r2,-4(fp)
 400f650:	00c00134 	movhi	r3,4
 400f654:	10c01015 	stw	r3,64(r2)
 400f658:	00001406 	br	400f6ac <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 400f65c:	e0bfff17 	ldw	r2,-4(fp)
 400f660:	10802f17 	ldw	r2,188(r2)
 400f664:	10803fcc 	andi	r2,r2,255
 400f668:	10800658 	cmpnei	r2,r2,25
 400f66c:	10000d1e 	bne	r2,zero,400f6a4 <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 400f670:	e0bfff17 	ldw	r2,-4(fp)
 400f674:	00c08034 	movhi	r3,512
 400f678:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 400f67c:	e0bfff17 	ldw	r2,-4(fp)
 400f680:	00c08004 	movi	r3,512
 400f684:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 400f688:	e0bfff17 	ldw	r2,-4(fp)
 400f68c:	00c00074 	movhi	r3,1
 400f690:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 400f694:	e0bfff17 	ldw	r2,-4(fp)
 400f698:	00c00044 	movi	r3,1
 400f69c:	10c03115 	stw	r3,196(r2)
 400f6a0:	00000206 	br	400f6ac <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 400f6a4:	00bffb44 	movi	r2,-19
 400f6a8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 400f6ac:	e0bfff17 	ldw	r2,-4(fp)
 400f6b0:	10800e17 	ldw	r2,56(r2)
 400f6b4:	1007883a 	mov	r3,r2
 400f6b8:	e0bfff17 	ldw	r2,-4(fp)
 400f6bc:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 400f6c0:	e0bfff17 	ldw	r2,-4(fp)
 400f6c4:	00c00044 	movi	r3,1
 400f6c8:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 400f6cc:	e0bfff17 	ldw	r2,-4(fp)
 400f6d0:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 400f6d4:	e0bfff17 	ldw	r2,-4(fp)
 400f6d8:	00c04004 	movi	r3,256
 400f6dc:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 400f6e0:	e0bffe17 	ldw	r2,-8(fp)
}
 400f6e4:	e037883a 	mov	sp,fp
 400f6e8:	dfc00117 	ldw	ra,4(sp)
 400f6ec:	df000017 	ldw	fp,0(sp)
 400f6f0:	dec00204 	addi	sp,sp,8
 400f6f4:	f800283a 	ret

0400f6f8 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 400f6f8:	deffee04 	addi	sp,sp,-72
 400f6fc:	dfc01115 	stw	ra,68(sp)
 400f700:	df001015 	stw	fp,64(sp)
 400f704:	df001004 	addi	fp,sp,64
 400f708:	e13ffc15 	stw	r4,-16(fp)
 400f70c:	e17ffd15 	stw	r5,-12(fp)
 400f710:	e1bffe15 	stw	r6,-8(fp)
 400f714:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 400f718:	00800804 	movi	r2,32
 400f71c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 400f720:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 400f724:	00002606 	br	400f7c0 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 400f728:	e0bff117 	ldw	r2,-60(fp)
 400f72c:	e0ffff17 	ldw	r3,-4(fp)
 400f730:	1880012e 	bgeu	r3,r2,400f738 <alt_epcs_flash_memcmp+0x40>
 400f734:	1805883a 	mov	r2,r3
 400f738:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 400f73c:	e0fffe17 	ldw	r3,-8(fp)
 400f740:	e0bff017 	ldw	r2,-64(fp)
 400f744:	1887883a 	add	r3,r3,r2
 400f748:	e0bff404 	addi	r2,fp,-48
 400f74c:	e13ffc17 	ldw	r4,-16(fp)
 400f750:	180b883a 	mov	r5,r3
 400f754:	100d883a 	mov	r6,r2
 400f758:	e1fff217 	ldw	r7,-56(fp)
 400f75c:	400fcd80 	call	400fcd8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 400f760:	1000020e 	bge	r2,zero,400f76c <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 400f764:	00bfffc4 	movi	r2,-1
 400f768:	00001806 	br	400f7cc <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 400f76c:	e0bff017 	ldw	r2,-64(fp)
 400f770:	e0fffd17 	ldw	r3,-12(fp)
 400f774:	1889883a 	add	r4,r3,r2
 400f778:	e0bff217 	ldw	r2,-56(fp)
 400f77c:	e0fff404 	addi	r3,fp,-48
 400f780:	180b883a 	mov	r5,r3
 400f784:	100d883a 	mov	r6,r2
 400f788:	4011f980 	call	4011f98 <memcmp>
 400f78c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 400f790:	e0bff317 	ldw	r2,-52(fp)
 400f794:	10000226 	beq	r2,zero,400f7a0 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 400f798:	e0bff317 	ldw	r2,-52(fp)
 400f79c:	00000b06 	br	400f7cc <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 400f7a0:	e0bff217 	ldw	r2,-56(fp)
 400f7a4:	e0ffff17 	ldw	r3,-4(fp)
 400f7a8:	1885c83a 	sub	r2,r3,r2
 400f7ac:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 400f7b0:	e0fff017 	ldw	r3,-64(fp)
 400f7b4:	e0bff217 	ldw	r2,-56(fp)
 400f7b8:	1885883a 	add	r2,r3,r2
 400f7bc:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 400f7c0:	e0bfff17 	ldw	r2,-4(fp)
 400f7c4:	103fd81e 	bne	r2,zero,400f728 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 400f7c8:	0005883a 	mov	r2,zero
}
 400f7cc:	e037883a 	mov	sp,fp
 400f7d0:	dfc00117 	ldw	ra,4(sp)
 400f7d4:	df000017 	ldw	fp,0(sp)
 400f7d8:	dec00204 	addi	sp,sp,8
 400f7dc:	f800283a 	ret

0400f7e0 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 400f7e0:	defff404 	addi	sp,sp,-48
 400f7e4:	dfc00b15 	stw	ra,44(sp)
 400f7e8:	df000a15 	stw	fp,40(sp)
 400f7ec:	df000a04 	addi	fp,sp,40
 400f7f0:	e13ffc15 	stw	r4,-16(fp)
 400f7f4:	e17ffd15 	stw	r5,-12(fp)
 400f7f8:	e1bffe15 	stw	r6,-8(fp)
 400f7fc:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 400f800:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 400f804:	e03ff815 	stw	zero,-32(fp)
 400f808:	00008306 	br	400fa18 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 400f80c:	e0fffc17 	ldw	r3,-16(fp)
 400f810:	e0bff817 	ldw	r2,-32(fp)
 400f814:	1004913a 	slli	r2,r2,4
 400f818:	1885883a 	add	r2,r3,r2
 400f81c:	10800d04 	addi	r2,r2,52
 400f820:	10800017 	ldw	r2,0(r2)
 400f824:	e0fffd17 	ldw	r3,-12(fp)
 400f828:	18807816 	blt	r3,r2,400fa0c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 400f82c:	e0fffc17 	ldw	r3,-16(fp)
 400f830:	e0bff817 	ldw	r2,-32(fp)
 400f834:	1004913a 	slli	r2,r2,4
 400f838:	1885883a 	add	r2,r3,r2
 400f83c:	10800d04 	addi	r2,r2,52
 400f840:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 400f844:	e13ffc17 	ldw	r4,-16(fp)
 400f848:	e0bff817 	ldw	r2,-32(fp)
 400f84c:	1004913a 	slli	r2,r2,4
 400f850:	2085883a 	add	r2,r4,r2
 400f854:	10800e04 	addi	r2,r2,56
 400f858:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 400f85c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 400f860:	e0fffd17 	ldw	r3,-12(fp)
 400f864:	1880690e 	bge	r3,r2,400fa0c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 400f868:	e0fffc17 	ldw	r3,-16(fp)
 400f86c:	e0bff817 	ldw	r2,-32(fp)
 400f870:	1004913a 	slli	r2,r2,4
 400f874:	1885883a 	add	r2,r3,r2
 400f878:	10800d04 	addi	r2,r2,52
 400f87c:	10800017 	ldw	r2,0(r2)
 400f880:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 400f884:	e03ff915 	stw	zero,-28(fp)
 400f888:	00005806 	br	400f9ec <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 400f88c:	e0fffd17 	ldw	r3,-12(fp)
 400f890:	e0bffa17 	ldw	r2,-24(fp)
 400f894:	18804916 	blt	r3,r2,400f9bc <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 400f898:	e0fffc17 	ldw	r3,-16(fp)
 400f89c:	e0bff817 	ldw	r2,-32(fp)
 400f8a0:	10800104 	addi	r2,r2,4
 400f8a4:	1004913a 	slli	r2,r2,4
 400f8a8:	1885883a 	add	r2,r3,r2
 400f8ac:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 400f8b0:	e0bffa17 	ldw	r2,-24(fp)
 400f8b4:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 400f8b8:	e0fffd17 	ldw	r3,-12(fp)
 400f8bc:	18803f0e 	bge	r3,r2,400f9bc <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 400f8c0:	e0fffc17 	ldw	r3,-16(fp)
 400f8c4:	e0bff817 	ldw	r2,-32(fp)
 400f8c8:	10800104 	addi	r2,r2,4
 400f8cc:	1004913a 	slli	r2,r2,4
 400f8d0:	1885883a 	add	r2,r3,r2
 400f8d4:	10c00017 	ldw	r3,0(r2)
 400f8d8:	e0bffa17 	ldw	r2,-24(fp)
 400f8dc:	1887883a 	add	r3,r3,r2
 400f8e0:	e0bffd17 	ldw	r2,-12(fp)
 400f8e4:	1885c83a 	sub	r2,r3,r2
 400f8e8:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 400f8ec:	e0fffb17 	ldw	r3,-20(fp)
 400f8f0:	e0bfff17 	ldw	r2,-4(fp)
 400f8f4:	1880010e 	bge	r3,r2,400f8fc <alt_epcs_flash_write+0x11c>
 400f8f8:	1805883a 	mov	r2,r3
 400f8fc:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 400f900:	e0bffb17 	ldw	r2,-20(fp)
 400f904:	e13ffc17 	ldw	r4,-16(fp)
 400f908:	e17ffe17 	ldw	r5,-8(fp)
 400f90c:	e1bffd17 	ldw	r6,-12(fp)
 400f910:	100f883a 	mov	r7,r2
 400f914:	400f6f80 	call	400f6f8 <alt_epcs_flash_memcmp>
 400f918:	10001226 	beq	r2,zero,400f964 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 400f91c:	e0bffc17 	ldw	r2,-16(fp)
 400f920:	10800817 	ldw	r2,32(r2)
 400f924:	e13ffc17 	ldw	r4,-16(fp)
 400f928:	e17ffa17 	ldw	r5,-24(fp)
 400f92c:	103ee83a 	callr	r2
 400f930:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 400f934:	e0bff717 	ldw	r2,-36(fp)
 400f938:	10000a1e 	bne	r2,zero,400f964 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 400f93c:	e0bffc17 	ldw	r2,-16(fp)
 400f940:	10800917 	ldw	r2,36(r2)
 400f944:	e0fffb17 	ldw	r3,-20(fp)
 400f948:	d8c00015 	stw	r3,0(sp)
 400f94c:	e13ffc17 	ldw	r4,-16(fp)
 400f950:	e17ffa17 	ldw	r5,-24(fp)
 400f954:	e1bffd17 	ldw	r6,-12(fp)
 400f958:	e1fffe17 	ldw	r7,-8(fp)
 400f95c:	103ee83a 	callr	r2
 400f960:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 400f964:	e0ffff17 	ldw	r3,-4(fp)
 400f968:	e0bffb17 	ldw	r2,-20(fp)
 400f96c:	18802e26 	beq	r3,r2,400fa28 <alt_epcs_flash_write+0x248>
 400f970:	e0bff717 	ldw	r2,-36(fp)
 400f974:	10002c1e 	bne	r2,zero,400fa28 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 400f978:	e0ffff17 	ldw	r3,-4(fp)
 400f97c:	e0bffb17 	ldw	r2,-20(fp)
 400f980:	1885c83a 	sub	r2,r3,r2
 400f984:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 400f988:	e0fffc17 	ldw	r3,-16(fp)
 400f98c:	e0bff817 	ldw	r2,-32(fp)
 400f990:	10800104 	addi	r2,r2,4
 400f994:	1004913a 	slli	r2,r2,4
 400f998:	1885883a 	add	r2,r3,r2
 400f99c:	10c00017 	ldw	r3,0(r2)
 400f9a0:	e0bffa17 	ldw	r2,-24(fp)
 400f9a4:	1885883a 	add	r2,r3,r2
 400f9a8:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 400f9ac:	e0bffb17 	ldw	r2,-20(fp)
 400f9b0:	e0fffe17 	ldw	r3,-8(fp)
 400f9b4:	1885883a 	add	r2,r3,r2
 400f9b8:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 400f9bc:	e0fffc17 	ldw	r3,-16(fp)
 400f9c0:	e0bff817 	ldw	r2,-32(fp)
 400f9c4:	10800104 	addi	r2,r2,4
 400f9c8:	1004913a 	slli	r2,r2,4
 400f9cc:	1885883a 	add	r2,r3,r2
 400f9d0:	10800017 	ldw	r2,0(r2)
 400f9d4:	e0fffa17 	ldw	r3,-24(fp)
 400f9d8:	1885883a 	add	r2,r3,r2
 400f9dc:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 400f9e0:	e0bff917 	ldw	r2,-28(fp)
 400f9e4:	10800044 	addi	r2,r2,1
 400f9e8:	e0bff915 	stw	r2,-28(fp)
 400f9ec:	e0fffc17 	ldw	r3,-16(fp)
 400f9f0:	e0bff817 	ldw	r2,-32(fp)
 400f9f4:	1004913a 	slli	r2,r2,4
 400f9f8:	1885883a 	add	r2,r3,r2
 400f9fc:	10800f04 	addi	r2,r2,60
 400fa00:	10800017 	ldw	r2,0(r2)
 400fa04:	e0fff917 	ldw	r3,-28(fp)
 400fa08:	18bfa016 	blt	r3,r2,400f88c <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 400fa0c:	e0bff817 	ldw	r2,-32(fp)
 400fa10:	10800044 	addi	r2,r2,1
 400fa14:	e0bff815 	stw	r2,-32(fp)
 400fa18:	e0bffc17 	ldw	r2,-16(fp)
 400fa1c:	10800c17 	ldw	r2,48(r2)
 400fa20:	e0fff817 	ldw	r3,-32(fp)
 400fa24:	18bf7916 	blt	r3,r2,400f80c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 400fa28:	e0bff717 	ldw	r2,-36(fp)
}
 400fa2c:	e037883a 	mov	sp,fp
 400fa30:	dfc00117 	ldw	ra,4(sp)
 400fa34:	df000017 	ldw	fp,0(sp)
 400fa38:	dec00204 	addi	sp,sp,8
 400fa3c:	f800283a 	ret

0400fa40 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 400fa40:	defffa04 	addi	sp,sp,-24
 400fa44:	df000515 	stw	fp,20(sp)
 400fa48:	df000504 	addi	fp,sp,20
 400fa4c:	e13ffd15 	stw	r4,-12(fp)
 400fa50:	e17ffe15 	stw	r5,-8(fp)
 400fa54:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 400fa58:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 400fa5c:	e0bffd17 	ldw	r2,-12(fp)
 400fa60:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 400fa64:	e0bffc17 	ldw	r2,-16(fp)
 400fa68:	10c00c17 	ldw	r3,48(r2)
 400fa6c:	e0bfff17 	ldw	r2,-4(fp)
 400fa70:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 400fa74:	e0bffc17 	ldw	r2,-16(fp)
 400fa78:	10800c17 	ldw	r2,48(r2)
 400fa7c:	1000031e 	bne	r2,zero,400fa8c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 400fa80:	00bffec4 	movi	r2,-5
 400fa84:	e0bffb15 	stw	r2,-20(fp)
 400fa88:	00000b06 	br	400fab8 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 400fa8c:	e0bffc17 	ldw	r2,-16(fp)
 400fa90:	10800c17 	ldw	r2,48(r2)
 400fa94:	10800250 	cmplti	r2,r2,9
 400fa98:	1000031e 	bne	r2,zero,400faa8 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 400fa9c:	00bffd04 	movi	r2,-12
 400faa0:	e0bffb15 	stw	r2,-20(fp)
 400faa4:	00000406 	br	400fab8 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 400faa8:	e0bffc17 	ldw	r2,-16(fp)
 400faac:	10c00d04 	addi	r3,r2,52
 400fab0:	e0bffe17 	ldw	r2,-8(fp)
 400fab4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 400fab8:	e0bffb17 	ldw	r2,-20(fp)
}
 400fabc:	e037883a 	mov	sp,fp
 400fac0:	df000017 	ldw	fp,0(sp)
 400fac4:	dec00104 	addi	sp,sp,4
 400fac8:	f800283a 	ret

0400facc <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 400facc:	defff904 	addi	sp,sp,-28
 400fad0:	df000615 	stw	fp,24(sp)
 400fad4:	df000604 	addi	fp,sp,24
 400fad8:	e13ffe15 	stw	r4,-8(fp)
 400fadc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 400fae0:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400fae4:	e0bffe17 	ldw	r2,-8(fp)
 400fae8:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 400faec:	e0bffb17 	ldw	r2,-20(fp)
 400faf0:	10800c17 	ldw	r2,48(r2)
 400faf4:	10bfffc4 	addi	r2,r2,-1
 400faf8:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 400fafc:	e0fffb17 	ldw	r3,-20(fp)
 400fb00:	e0bffc17 	ldw	r2,-16(fp)
 400fb04:	1004913a 	slli	r2,r2,4
 400fb08:	1885883a 	add	r2,r3,r2
 400fb0c:	10800d04 	addi	r2,r2,52
 400fb10:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 400fb14:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 400fb18:	e13ffb17 	ldw	r4,-20(fp)
 400fb1c:	e0bffc17 	ldw	r2,-16(fp)
 400fb20:	1004913a 	slli	r2,r2,4
 400fb24:	2085883a 	add	r2,r4,r2
 400fb28:	10800e04 	addi	r2,r2,56
 400fb2c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 400fb30:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 400fb34:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 400fb38:	e0bfff17 	ldw	r2,-4(fp)
 400fb3c:	e0fffd17 	ldw	r3,-12(fp)
 400fb40:	1880022e 	bgeu	r3,r2,400fb4c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 400fb44:	00bffec4 	movi	r2,-5
 400fb48:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 400fb4c:	e0bffa17 	ldw	r2,-24(fp)
}
 400fb50:	e037883a 	mov	sp,fp
 400fb54:	df000017 	ldw	fp,0(sp)
 400fb58:	dec00104 	addi	sp,sp,4
 400fb5c:	f800283a 	ret

0400fb60 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 400fb60:	defffa04 	addi	sp,sp,-24
 400fb64:	dfc00515 	stw	ra,20(sp)
 400fb68:	df000415 	stw	fp,16(sp)
 400fb6c:	df000404 	addi	fp,sp,16
 400fb70:	e13ffe15 	stw	r4,-8(fp)
 400fb74:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 400fb78:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400fb7c:	e0bffe17 	ldw	r2,-8(fp)
 400fb80:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 400fb84:	e13ffe17 	ldw	r4,-8(fp)
 400fb88:	e17fff17 	ldw	r5,-4(fp)
 400fb8c:	400facc0 	call	400facc <alt_epcs_test_address>
 400fb90:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 400fb94:	e0bffc17 	ldw	r2,-16(fp)
 400fb98:	10000816 	blt	r2,zero,400fbbc <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 400fb9c:	e0bffd17 	ldw	r2,-12(fp)
 400fba0:	11002d17 	ldw	r4,180(r2)
 400fba4:	e0ffff17 	ldw	r3,-4(fp)
 400fba8:	e0bffd17 	ldw	r2,-12(fp)
 400fbac:	10803117 	ldw	r2,196(r2)
 400fbb0:	180b883a 	mov	r5,r3
 400fbb4:	100d883a 	mov	r6,r2
 400fbb8:	40108a00 	call	40108a0 <epcs_sector_erase>
  }
  return ret_code;
 400fbbc:	e0bffc17 	ldw	r2,-16(fp)
}
 400fbc0:	e037883a 	mov	sp,fp
 400fbc4:	dfc00117 	ldw	ra,4(sp)
 400fbc8:	df000017 	ldw	fp,0(sp)
 400fbcc:	dec00204 	addi	sp,sp,8
 400fbd0:	f800283a 	ret

0400fbd4 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 400fbd4:	defff404 	addi	sp,sp,-48
 400fbd8:	dfc00b15 	stw	ra,44(sp)
 400fbdc:	df000a15 	stw	fp,40(sp)
 400fbe0:	df000a04 	addi	fp,sp,40
 400fbe4:	e13ffc15 	stw	r4,-16(fp)
 400fbe8:	e17ffd15 	stw	r5,-12(fp)
 400fbec:	e1bffe15 	stw	r6,-8(fp)
 400fbf0:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400fbf4:	e0bffc17 	ldw	r2,-16(fp)
 400fbf8:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 400fbfc:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 400fc00:	e13ffc17 	ldw	r4,-16(fp)
 400fc04:	e17ffe17 	ldw	r5,-8(fp)
 400fc08:	400facc0 	call	400facc <alt_epcs_test_address>
 400fc0c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 400fc10:	e0bff917 	ldw	r2,-28(fp)
 400fc14:	10002a16 	blt	r2,zero,400fcc0 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 400fc18:	00002706 	br	400fcb8 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 400fc1c:	e0bff817 	ldw	r2,-32(fp)
 400fc20:	10c03017 	ldw	r3,192(r2)
 400fc24:	e0bffe17 	ldw	r2,-8(fp)
 400fc28:	1887883a 	add	r3,r3,r2
 400fc2c:	e0bff817 	ldw	r2,-32(fp)
 400fc30:	10803017 	ldw	r2,192(r2)
 400fc34:	0085c83a 	sub	r2,zero,r2
 400fc38:	1884703a 	and	r2,r3,r2
 400fc3c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 400fc40:	e0fffa17 	ldw	r3,-24(fp)
 400fc44:	e0bffe17 	ldw	r2,-8(fp)
 400fc48:	1885c83a 	sub	r2,r3,r2
 400fc4c:	e0c00217 	ldw	r3,8(fp)
 400fc50:	1880010e 	bge	r3,r2,400fc58 <alt_epcs_flash_write_block+0x84>
 400fc54:	1805883a 	mov	r2,r3
 400fc58:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 400fc5c:	e0bff817 	ldw	r2,-32(fp)
 400fc60:	10c02d17 	ldw	r3,180(r2)
 400fc64:	e0bff717 	ldw	r2,-36(fp)
 400fc68:	e13fff17 	ldw	r4,-4(fp)
 400fc6c:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 400fc70:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 400fc74:	21003117 	ldw	r4,196(r4)
 400fc78:	d9000015 	stw	r4,0(sp)
 400fc7c:	1809883a 	mov	r4,r3
 400fc80:	e17ffe17 	ldw	r5,-8(fp)
 400fc84:	100d883a 	mov	r6,r2
 400fc88:	e1fffb17 	ldw	r7,-20(fp)
 400fc8c:	4010b440 	call	4010b44 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 400fc90:	e0c00217 	ldw	r3,8(fp)
 400fc94:	e0bffb17 	ldw	r2,-20(fp)
 400fc98:	1885c83a 	sub	r2,r3,r2
 400fc9c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 400fca0:	e0fff717 	ldw	r3,-36(fp)
 400fca4:	e0bffb17 	ldw	r2,-20(fp)
 400fca8:	1885883a 	add	r2,r3,r2
 400fcac:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 400fcb0:	e0bffa17 	ldw	r2,-24(fp)
 400fcb4:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 400fcb8:	e0800217 	ldw	r2,8(fp)
 400fcbc:	103fd71e 	bne	r2,zero,400fc1c <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 400fcc0:	e0bff917 	ldw	r2,-28(fp)
}
 400fcc4:	e037883a 	mov	sp,fp
 400fcc8:	dfc00117 	ldw	ra,4(sp)
 400fccc:	df000017 	ldw	fp,0(sp)
 400fcd0:	dec00204 	addi	sp,sp,8
 400fcd4:	f800283a 	ret

0400fcd8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 400fcd8:	defff704 	addi	sp,sp,-36
 400fcdc:	dfc00815 	stw	ra,32(sp)
 400fce0:	df000715 	stw	fp,28(sp)
 400fce4:	df000704 	addi	fp,sp,28
 400fce8:	e13ffc15 	stw	r4,-16(fp)
 400fcec:	e17ffd15 	stw	r5,-12(fp)
 400fcf0:	e1bffe15 	stw	r6,-8(fp)
 400fcf4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 400fcf8:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 400fcfc:	e0bffc17 	ldw	r2,-16(fp)
 400fd00:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 400fd04:	e13ffc17 	ldw	r4,-16(fp)
 400fd08:	e17ffd17 	ldw	r5,-12(fp)
 400fd0c:	400facc0 	call	400facc <alt_epcs_test_address>
 400fd10:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 400fd14:	e0bffa17 	ldw	r2,-24(fp)
 400fd18:	10000f16 	blt	r2,zero,400fd58 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 400fd1c:	e0bffb17 	ldw	r2,-20(fp)
 400fd20:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 400fd24:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 400fd28:	18c03117 	ldw	r3,196(r3)
 400fd2c:	d8c00015 	stw	r3,0(sp)
 400fd30:	1009883a 	mov	r4,r2
 400fd34:	e17ffd17 	ldw	r5,-12(fp)
 400fd38:	e1bffe17 	ldw	r6,-8(fp)
 400fd3c:	e1ffff17 	ldw	r7,-4(fp)
 400fd40:	40109980 	call	4010998 <epcs_read_buffer>
 400fd44:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 400fd48:	e0fffa17 	ldw	r3,-24(fp)
 400fd4c:	e0bfff17 	ldw	r2,-4(fp)
 400fd50:	1880011e 	bne	r3,r2,400fd58 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 400fd54:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 400fd58:	e0bffa17 	ldw	r2,-24(fp)
}
 400fd5c:	e037883a 	mov	sp,fp
 400fd60:	dfc00117 	ldw	ra,4(sp)
 400fd64:	df000017 	ldw	fp,0(sp)
 400fd68:	dec00204 	addi	sp,sp,8
 400fd6c:	f800283a 	ret

0400fd70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400fd70:	defffa04 	addi	sp,sp,-24
 400fd74:	dfc00515 	stw	ra,20(sp)
 400fd78:	df000415 	stw	fp,16(sp)
 400fd7c:	df000404 	addi	fp,sp,16
 400fd80:	e13ffd15 	stw	r4,-12(fp)
 400fd84:	e17ffe15 	stw	r5,-8(fp)
 400fd88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400fd8c:	e0bffd17 	ldw	r2,-12(fp)
 400fd90:	10800017 	ldw	r2,0(r2)
 400fd94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400fd98:	e0bffc17 	ldw	r2,-16(fp)
 400fd9c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 400fda0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400fda4:	10800217 	ldw	r2,8(r2)
 400fda8:	1809883a 	mov	r4,r3
 400fdac:	e17ffe17 	ldw	r5,-8(fp)
 400fdb0:	e1bfff17 	ldw	r6,-4(fp)
 400fdb4:	100f883a 	mov	r7,r2
 400fdb8:	40103980 	call	4010398 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400fdbc:	e037883a 	mov	sp,fp
 400fdc0:	dfc00117 	ldw	ra,4(sp)
 400fdc4:	df000017 	ldw	fp,0(sp)
 400fdc8:	dec00204 	addi	sp,sp,8
 400fdcc:	f800283a 	ret

0400fdd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400fdd0:	defffa04 	addi	sp,sp,-24
 400fdd4:	dfc00515 	stw	ra,20(sp)
 400fdd8:	df000415 	stw	fp,16(sp)
 400fddc:	df000404 	addi	fp,sp,16
 400fde0:	e13ffd15 	stw	r4,-12(fp)
 400fde4:	e17ffe15 	stw	r5,-8(fp)
 400fde8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400fdec:	e0bffd17 	ldw	r2,-12(fp)
 400fdf0:	10800017 	ldw	r2,0(r2)
 400fdf4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400fdf8:	e0bffc17 	ldw	r2,-16(fp)
 400fdfc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 400fe00:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400fe04:	10800217 	ldw	r2,8(r2)
 400fe08:	1809883a 	mov	r4,r3
 400fe0c:	e17ffe17 	ldw	r5,-8(fp)
 400fe10:	e1bfff17 	ldw	r6,-4(fp)
 400fe14:	100f883a 	mov	r7,r2
 400fe18:	40105b00 	call	40105b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400fe1c:	e037883a 	mov	sp,fp
 400fe20:	dfc00117 	ldw	ra,4(sp)
 400fe24:	df000017 	ldw	fp,0(sp)
 400fe28:	dec00204 	addi	sp,sp,8
 400fe2c:	f800283a 	ret

0400fe30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400fe30:	defffc04 	addi	sp,sp,-16
 400fe34:	dfc00315 	stw	ra,12(sp)
 400fe38:	df000215 	stw	fp,8(sp)
 400fe3c:	df000204 	addi	fp,sp,8
 400fe40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400fe44:	e0bfff17 	ldw	r2,-4(fp)
 400fe48:	10800017 	ldw	r2,0(r2)
 400fe4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400fe50:	e0bffe17 	ldw	r2,-8(fp)
 400fe54:	10c00a04 	addi	r3,r2,40
 400fe58:	e0bfff17 	ldw	r2,-4(fp)
 400fe5c:	10800217 	ldw	r2,8(r2)
 400fe60:	1809883a 	mov	r4,r3
 400fe64:	100b883a 	mov	r5,r2
 400fe68:	401023c0 	call	401023c <altera_avalon_jtag_uart_close>
}
 400fe6c:	e037883a 	mov	sp,fp
 400fe70:	dfc00117 	ldw	ra,4(sp)
 400fe74:	df000017 	ldw	fp,0(sp)
 400fe78:	dec00204 	addi	sp,sp,8
 400fe7c:	f800283a 	ret

0400fe80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400fe80:	defffa04 	addi	sp,sp,-24
 400fe84:	dfc00515 	stw	ra,20(sp)
 400fe88:	df000415 	stw	fp,16(sp)
 400fe8c:	df000404 	addi	fp,sp,16
 400fe90:	e13ffd15 	stw	r4,-12(fp)
 400fe94:	e17ffe15 	stw	r5,-8(fp)
 400fe98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400fe9c:	e0bffd17 	ldw	r2,-12(fp)
 400fea0:	10800017 	ldw	r2,0(r2)
 400fea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400fea8:	e0bffc17 	ldw	r2,-16(fp)
 400feac:	10800a04 	addi	r2,r2,40
 400feb0:	1009883a 	mov	r4,r2
 400feb4:	e17ffe17 	ldw	r5,-8(fp)
 400feb8:	e1bfff17 	ldw	r6,-4(fp)
 400febc:	40102a40 	call	40102a4 <altera_avalon_jtag_uart_ioctl>
}
 400fec0:	e037883a 	mov	sp,fp
 400fec4:	dfc00117 	ldw	ra,4(sp)
 400fec8:	df000017 	ldw	fp,0(sp)
 400fecc:	dec00204 	addi	sp,sp,8
 400fed0:	f800283a 	ret

0400fed4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400fed4:	defffa04 	addi	sp,sp,-24
 400fed8:	dfc00515 	stw	ra,20(sp)
 400fedc:	df000415 	stw	fp,16(sp)
 400fee0:	df000404 	addi	fp,sp,16
 400fee4:	e13ffd15 	stw	r4,-12(fp)
 400fee8:	e17ffe15 	stw	r5,-8(fp)
 400feec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400fef0:	e0bffd17 	ldw	r2,-12(fp)
 400fef4:	00c00044 	movi	r3,1
 400fef8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400fefc:	e0bffd17 	ldw	r2,-12(fp)
 400ff00:	10800017 	ldw	r2,0(r2)
 400ff04:	10800104 	addi	r2,r2,4
 400ff08:	e0fffd17 	ldw	r3,-12(fp)
 400ff0c:	18c00817 	ldw	r3,32(r3)
 400ff10:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400ff14:	e0fffe17 	ldw	r3,-8(fp)
 400ff18:	e0bfff17 	ldw	r2,-4(fp)
 400ff1c:	d8000015 	stw	zero,0(sp)
 400ff20:	1809883a 	mov	r4,r3
 400ff24:	100b883a 	mov	r5,r2
 400ff28:	01810074 	movhi	r6,1025
 400ff2c:	31bfe504 	addi	r6,r6,-108
 400ff30:	e1fffd17 	ldw	r7,-12(fp)
 400ff34:	40112c00 	call	40112c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400ff38:	e0bffd17 	ldw	r2,-12(fp)
 400ff3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400ff40:	e0bffd17 	ldw	r2,-12(fp)
 400ff44:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400ff48:	00810374 	movhi	r2,1037
 400ff4c:	10905904 	addi	r2,r2,16740
 400ff50:	10800017 	ldw	r2,0(r2)
 400ff54:	1809883a 	mov	r4,r3
 400ff58:	100b883a 	mov	r5,r2
 400ff5c:	01810074 	movhi	r6,1025
 400ff60:	31806604 	addi	r6,r6,408
 400ff64:	e1fffd17 	ldw	r7,-12(fp)
 400ff68:	4010df80 	call	4010df8 <alt_alarm_start>
 400ff6c:	1000040e 	bge	r2,zero,400ff80 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400ff70:	e0bffd17 	ldw	r2,-12(fp)
 400ff74:	00e00034 	movhi	r3,32768
 400ff78:	18ffffc4 	addi	r3,r3,-1
 400ff7c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400ff80:	e037883a 	mov	sp,fp
 400ff84:	dfc00117 	ldw	ra,4(sp)
 400ff88:	df000017 	ldw	fp,0(sp)
 400ff8c:	dec00204 	addi	sp,sp,8
 400ff90:	f800283a 	ret

0400ff94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400ff94:	defff804 	addi	sp,sp,-32
 400ff98:	df000715 	stw	fp,28(sp)
 400ff9c:	df000704 	addi	fp,sp,28
 400ffa0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400ffa4:	e0bfff17 	ldw	r2,-4(fp)
 400ffa8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400ffac:	e0bffb17 	ldw	r2,-20(fp)
 400ffb0:	10800017 	ldw	r2,0(r2)
 400ffb4:	e0bffc15 	stw	r2,-16(fp)
 400ffb8:	00000106 	br	400ffc0 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 400ffbc:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400ffc0:	e0bffc17 	ldw	r2,-16(fp)
 400ffc4:	10800104 	addi	r2,r2,4
 400ffc8:	10800037 	ldwio	r2,0(r2)
 400ffcc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400ffd0:	e0bffd17 	ldw	r2,-12(fp)
 400ffd4:	1080c00c 	andi	r2,r2,768
 400ffd8:	10006a26 	beq	r2,zero,4010184 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400ffdc:	e0bffd17 	ldw	r2,-12(fp)
 400ffe0:	1080400c 	andi	r2,r2,256
 400ffe4:	10003326 	beq	r2,zero,40100b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400ffe8:	00800074 	movhi	r2,1
 400ffec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fff0:	e0bffb17 	ldw	r2,-20(fp)
 400fff4:	10800a17 	ldw	r2,40(r2)
 400fff8:	10800044 	addi	r2,r2,1
 400fffc:	1081ffcc 	andi	r2,r2,2047
 4010000:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4010004:	e0bffb17 	ldw	r2,-20(fp)
 4010008:	10c00b17 	ldw	r3,44(r2)
 401000c:	e0bffe17 	ldw	r2,-8(fp)
 4010010:	18801426 	beq	r3,r2,4010064 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4010014:	e0bffc17 	ldw	r2,-16(fp)
 4010018:	10800037 	ldwio	r2,0(r2)
 401001c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4010020:	e0bff917 	ldw	r2,-28(fp)
 4010024:	10a0000c 	andi	r2,r2,32768
 4010028:	10001026 	beq	r2,zero,401006c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401002c:	e0bffb17 	ldw	r2,-20(fp)
 4010030:	10800a17 	ldw	r2,40(r2)
 4010034:	e0fff917 	ldw	r3,-28(fp)
 4010038:	e13ffb17 	ldw	r4,-20(fp)
 401003c:	2085883a 	add	r2,r4,r2
 4010040:	10800e04 	addi	r2,r2,56
 4010044:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010048:	e0bffb17 	ldw	r2,-20(fp)
 401004c:	10800a17 	ldw	r2,40(r2)
 4010050:	10800044 	addi	r2,r2,1
 4010054:	10c1ffcc 	andi	r3,r2,2047
 4010058:	e0bffb17 	ldw	r2,-20(fp)
 401005c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4010060:	003fe306 	br	400fff0 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4010064:	0001883a 	nop
 4010068:	00000106 	br	4010070 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401006c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4010070:	e0bff917 	ldw	r2,-28(fp)
 4010074:	10bfffec 	andhi	r2,r2,65535
 4010078:	10000e26 	beq	r2,zero,40100b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401007c:	e0bffb17 	ldw	r2,-20(fp)
 4010080:	10c00817 	ldw	r3,32(r2)
 4010084:	00bfff84 	movi	r2,-2
 4010088:	1886703a 	and	r3,r3,r2
 401008c:	e0bffb17 	ldw	r2,-20(fp)
 4010090:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4010094:	e0bffc17 	ldw	r2,-16(fp)
 4010098:	10800104 	addi	r2,r2,4
 401009c:	e0fffb17 	ldw	r3,-20(fp)
 40100a0:	18c00817 	ldw	r3,32(r3)
 40100a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40100a8:	e0bffc17 	ldw	r2,-16(fp)
 40100ac:	10800104 	addi	r2,r2,4
 40100b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40100b4:	e0bffd17 	ldw	r2,-12(fp)
 40100b8:	1080800c 	andi	r2,r2,512
 40100bc:	103fbf26 	beq	r2,zero,400ffbc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40100c0:	e0bffd17 	ldw	r2,-12(fp)
 40100c4:	1004d43a 	srli	r2,r2,16
 40100c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40100cc:	00001406 	br	4010120 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40100d0:	e0bffc17 	ldw	r2,-16(fp)
 40100d4:	e0fffb17 	ldw	r3,-20(fp)
 40100d8:	18c00d17 	ldw	r3,52(r3)
 40100dc:	e13ffb17 	ldw	r4,-20(fp)
 40100e0:	20c7883a 	add	r3,r4,r3
 40100e4:	18c20e04 	addi	r3,r3,2104
 40100e8:	18c00003 	ldbu	r3,0(r3)
 40100ec:	18c03fcc 	andi	r3,r3,255
 40100f0:	18c0201c 	xori	r3,r3,128
 40100f4:	18ffe004 	addi	r3,r3,-128
 40100f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40100fc:	e0bffb17 	ldw	r2,-20(fp)
 4010100:	10800d17 	ldw	r2,52(r2)
 4010104:	10800044 	addi	r2,r2,1
 4010108:	10c1ffcc 	andi	r3,r2,2047
 401010c:	e0bffb17 	ldw	r2,-20(fp)
 4010110:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4010114:	e0bffa17 	ldw	r2,-24(fp)
 4010118:	10bfffc4 	addi	r2,r2,-1
 401011c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4010120:	e0bffa17 	ldw	r2,-24(fp)
 4010124:	10000526 	beq	r2,zero,401013c <altera_avalon_jtag_uart_irq+0x1a8>
 4010128:	e0bffb17 	ldw	r2,-20(fp)
 401012c:	10c00d17 	ldw	r3,52(r2)
 4010130:	e0bffb17 	ldw	r2,-20(fp)
 4010134:	10800c17 	ldw	r2,48(r2)
 4010138:	18bfe51e 	bne	r3,r2,40100d0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401013c:	e0bffa17 	ldw	r2,-24(fp)
 4010140:	103f9e26 	beq	r2,zero,400ffbc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4010144:	e0bffb17 	ldw	r2,-20(fp)
 4010148:	10c00817 	ldw	r3,32(r2)
 401014c:	00bfff44 	movi	r2,-3
 4010150:	1886703a 	and	r3,r3,r2
 4010154:	e0bffb17 	ldw	r2,-20(fp)
 4010158:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401015c:	e0bffb17 	ldw	r2,-20(fp)
 4010160:	10800017 	ldw	r2,0(r2)
 4010164:	10800104 	addi	r2,r2,4
 4010168:	e0fffb17 	ldw	r3,-20(fp)
 401016c:	18c00817 	ldw	r3,32(r3)
 4010170:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010174:	e0bffc17 	ldw	r2,-16(fp)
 4010178:	10800104 	addi	r2,r2,4
 401017c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4010180:	003f8e06 	br	400ffbc <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4010184:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4010188:	e037883a 	mov	sp,fp
 401018c:	df000017 	ldw	fp,0(sp)
 4010190:	dec00104 	addi	sp,sp,4
 4010194:	f800283a 	ret

04010198 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4010198:	defffc04 	addi	sp,sp,-16
 401019c:	df000315 	stw	fp,12(sp)
 40101a0:	df000304 	addi	fp,sp,12
 40101a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40101a8:	e0bfff17 	ldw	r2,-4(fp)
 40101ac:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40101b0:	e0bffd17 	ldw	r2,-12(fp)
 40101b4:	10800017 	ldw	r2,0(r2)
 40101b8:	10800104 	addi	r2,r2,4
 40101bc:	10800037 	ldwio	r2,0(r2)
 40101c0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40101c4:	e0bffe17 	ldw	r2,-8(fp)
 40101c8:	1081000c 	andi	r2,r2,1024
 40101cc:	10000a26 	beq	r2,zero,40101f8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40101d0:	e0bffd17 	ldw	r2,-12(fp)
 40101d4:	10800017 	ldw	r2,0(r2)
 40101d8:	10800104 	addi	r2,r2,4
 40101dc:	e0fffd17 	ldw	r3,-12(fp)
 40101e0:	18c00817 	ldw	r3,32(r3)
 40101e4:	18c10014 	ori	r3,r3,1024
 40101e8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 40101ec:	e0bffd17 	ldw	r2,-12(fp)
 40101f0:	10000915 	stw	zero,36(r2)
 40101f4:	00000a06 	br	4010220 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40101f8:	e0bffd17 	ldw	r2,-12(fp)
 40101fc:	10800917 	ldw	r2,36(r2)
 4010200:	00e00034 	movhi	r3,32768
 4010204:	18ffff04 	addi	r3,r3,-4
 4010208:	18800536 	bltu	r3,r2,4010220 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 401020c:	e0bffd17 	ldw	r2,-12(fp)
 4010210:	10800917 	ldw	r2,36(r2)
 4010214:	10c00044 	addi	r3,r2,1
 4010218:	e0bffd17 	ldw	r2,-12(fp)
 401021c:	10c00915 	stw	r3,36(r2)
 4010220:	00810374 	movhi	r2,1037
 4010224:	10905904 	addi	r2,r2,16740
 4010228:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401022c:	e037883a 	mov	sp,fp
 4010230:	df000017 	ldw	fp,0(sp)
 4010234:	dec00104 	addi	sp,sp,4
 4010238:	f800283a 	ret

0401023c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401023c:	defffd04 	addi	sp,sp,-12
 4010240:	df000215 	stw	fp,8(sp)
 4010244:	df000204 	addi	fp,sp,8
 4010248:	e13ffe15 	stw	r4,-8(fp)
 401024c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010250:	00000506 	br	4010268 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4010254:	e0bfff17 	ldw	r2,-4(fp)
 4010258:	1090000c 	andi	r2,r2,16384
 401025c:	10000226 	beq	r2,zero,4010268 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4010260:	00bffd44 	movi	r2,-11
 4010264:	00000b06 	br	4010294 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010268:	e0bffe17 	ldw	r2,-8(fp)
 401026c:	10c00d17 	ldw	r3,52(r2)
 4010270:	e0bffe17 	ldw	r2,-8(fp)
 4010274:	10800c17 	ldw	r2,48(r2)
 4010278:	18800526 	beq	r3,r2,4010290 <altera_avalon_jtag_uart_close+0x54>
 401027c:	e0bffe17 	ldw	r2,-8(fp)
 4010280:	10c00917 	ldw	r3,36(r2)
 4010284:	e0bffe17 	ldw	r2,-8(fp)
 4010288:	10800117 	ldw	r2,4(r2)
 401028c:	18bff136 	bltu	r3,r2,4010254 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4010290:	0005883a 	mov	r2,zero
}
 4010294:	e037883a 	mov	sp,fp
 4010298:	df000017 	ldw	fp,0(sp)
 401029c:	dec00104 	addi	sp,sp,4
 40102a0:	f800283a 	ret

040102a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40102a4:	defffa04 	addi	sp,sp,-24
 40102a8:	df000515 	stw	fp,20(sp)
 40102ac:	df000504 	addi	fp,sp,20
 40102b0:	e13ffd15 	stw	r4,-12(fp)
 40102b4:	e17ffe15 	stw	r5,-8(fp)
 40102b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 40102bc:	00bff9c4 	movi	r2,-25
 40102c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40102c4:	e0bffe17 	ldw	r2,-8(fp)
 40102c8:	10da8060 	cmpeqi	r3,r2,27137
 40102cc:	1800031e 	bne	r3,zero,40102dc <altera_avalon_jtag_uart_ioctl+0x38>
 40102d0:	109a80a0 	cmpeqi	r2,r2,27138
 40102d4:	1000181e 	bne	r2,zero,4010338 <altera_avalon_jtag_uart_ioctl+0x94>
 40102d8:	00002606 	br	4010374 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40102dc:	e0bffd17 	ldw	r2,-12(fp)
 40102e0:	10c00117 	ldw	r3,4(r2)
 40102e4:	00a00034 	movhi	r2,32768
 40102e8:	10bfffc4 	addi	r2,r2,-1
 40102ec:	18802226 	beq	r3,r2,4010378 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 40102f0:	e0bfff17 	ldw	r2,-4(fp)
 40102f4:	10800017 	ldw	r2,0(r2)
 40102f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40102fc:	e0bffc17 	ldw	r2,-16(fp)
 4010300:	10800090 	cmplti	r2,r2,2
 4010304:	1000061e 	bne	r2,zero,4010320 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010308:	e0fffc17 	ldw	r3,-16(fp)
 401030c:	00a00034 	movhi	r2,32768
 4010310:	10bfffc4 	addi	r2,r2,-1
 4010314:	18800226 	beq	r3,r2,4010320 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010318:	e0bffc17 	ldw	r2,-16(fp)
 401031c:	00000206 	br	4010328 <altera_avalon_jtag_uart_ioctl+0x84>
 4010320:	00a00034 	movhi	r2,32768
 4010324:	10bfff84 	addi	r2,r2,-2
 4010328:	e0fffd17 	ldw	r3,-12(fp)
 401032c:	18800115 	stw	r2,4(r3)
      rc = 0;
 4010330:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4010334:	00001006 	br	4010378 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4010338:	e0bffd17 	ldw	r2,-12(fp)
 401033c:	10c00117 	ldw	r3,4(r2)
 4010340:	00a00034 	movhi	r2,32768
 4010344:	10bfffc4 	addi	r2,r2,-1
 4010348:	18800d26 	beq	r3,r2,4010380 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401034c:	e0bffd17 	ldw	r2,-12(fp)
 4010350:	10c00917 	ldw	r3,36(r2)
 4010354:	e0bffd17 	ldw	r2,-12(fp)
 4010358:	10800117 	ldw	r2,4(r2)
 401035c:	1885803a 	cmpltu	r2,r3,r2
 4010360:	10c03fcc 	andi	r3,r2,255
 4010364:	e0bfff17 	ldw	r2,-4(fp)
 4010368:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401036c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4010370:	00000306 	br	4010380 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 4010374:	00000306 	br	4010384 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4010378:	0001883a 	nop
 401037c:	00000106 	br	4010384 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4010380:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4010384:	e0bffb17 	ldw	r2,-20(fp)
}
 4010388:	e037883a 	mov	sp,fp
 401038c:	df000017 	ldw	fp,0(sp)
 4010390:	dec00104 	addi	sp,sp,4
 4010394:	f800283a 	ret

04010398 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4010398:	defff304 	addi	sp,sp,-52
 401039c:	dfc00c15 	stw	ra,48(sp)
 40103a0:	df000b15 	stw	fp,44(sp)
 40103a4:	df000b04 	addi	fp,sp,44
 40103a8:	e13ffc15 	stw	r4,-16(fp)
 40103ac:	e17ffd15 	stw	r5,-12(fp)
 40103b0:	e1bffe15 	stw	r6,-8(fp)
 40103b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40103b8:	e0bffd17 	ldw	r2,-12(fp)
 40103bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40103c0:	00004706 	br	40104e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40103c4:	e0bffc17 	ldw	r2,-16(fp)
 40103c8:	10800a17 	ldw	r2,40(r2)
 40103cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40103d0:	e0bffc17 	ldw	r2,-16(fp)
 40103d4:	10800b17 	ldw	r2,44(r2)
 40103d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40103dc:	e0fff717 	ldw	r3,-36(fp)
 40103e0:	e0bff817 	ldw	r2,-32(fp)
 40103e4:	18800536 	bltu	r3,r2,40103fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40103e8:	e0fff717 	ldw	r3,-36(fp)
 40103ec:	e0bff817 	ldw	r2,-32(fp)
 40103f0:	1885c83a 	sub	r2,r3,r2
 40103f4:	e0bff615 	stw	r2,-40(fp)
 40103f8:	00000406 	br	401040c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40103fc:	00c20004 	movi	r3,2048
 4010400:	e0bff817 	ldw	r2,-32(fp)
 4010404:	1885c83a 	sub	r2,r3,r2
 4010408:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401040c:	e0bff617 	ldw	r2,-40(fp)
 4010410:	10001e26 	beq	r2,zero,401048c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4010414:	e0fffe17 	ldw	r3,-8(fp)
 4010418:	e0bff617 	ldw	r2,-40(fp)
 401041c:	1880022e 	bgeu	r3,r2,4010428 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4010420:	e0bffe17 	ldw	r2,-8(fp)
 4010424:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4010428:	e0bff817 	ldw	r2,-32(fp)
 401042c:	10800e04 	addi	r2,r2,56
 4010430:	e0fffc17 	ldw	r3,-16(fp)
 4010434:	1885883a 	add	r2,r3,r2
 4010438:	e13ff517 	ldw	r4,-44(fp)
 401043c:	100b883a 	mov	r5,r2
 4010440:	e1bff617 	ldw	r6,-40(fp)
 4010444:	400b9c80 	call	400b9c8 <memcpy>
      ptr   += n;
 4010448:	e0fff517 	ldw	r3,-44(fp)
 401044c:	e0bff617 	ldw	r2,-40(fp)
 4010450:	1885883a 	add	r2,r3,r2
 4010454:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4010458:	e0fffe17 	ldw	r3,-8(fp)
 401045c:	e0bff617 	ldw	r2,-40(fp)
 4010460:	1885c83a 	sub	r2,r3,r2
 4010464:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010468:	e0fff817 	ldw	r3,-32(fp)
 401046c:	e0bff617 	ldw	r2,-40(fp)
 4010470:	1885883a 	add	r2,r3,r2
 4010474:	10c1ffcc 	andi	r3,r2,2047
 4010478:	e0bffc17 	ldw	r2,-16(fp)
 401047c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4010480:	e0bffe17 	ldw	r2,-8(fp)
 4010484:	00bfcf16 	blt	zero,r2,40103c4 <altera_avalon_jtag_uart_read+0x2c>
 4010488:	00000106 	br	4010490 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401048c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4010490:	e0fff517 	ldw	r3,-44(fp)
 4010494:	e0bffd17 	ldw	r2,-12(fp)
 4010498:	1880141e 	bne	r3,r2,40104ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401049c:	e0bfff17 	ldw	r2,-4(fp)
 40104a0:	1090000c 	andi	r2,r2,16384
 40104a4:	1000131e 	bne	r2,zero,40104f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40104a8:	0001883a 	nop
 40104ac:	e0bffc17 	ldw	r2,-16(fp)
 40104b0:	10c00a17 	ldw	r3,40(r2)
 40104b4:	e0bff717 	ldw	r2,-36(fp)
 40104b8:	1880051e 	bne	r3,r2,40104d0 <altera_avalon_jtag_uart_read+0x138>
 40104bc:	e0bffc17 	ldw	r2,-16(fp)
 40104c0:	10c00917 	ldw	r3,36(r2)
 40104c4:	e0bffc17 	ldw	r2,-16(fp)
 40104c8:	10800117 	ldw	r2,4(r2)
 40104cc:	18bff736 	bltu	r3,r2,40104ac <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40104d0:	e0bffc17 	ldw	r2,-16(fp)
 40104d4:	10c00a17 	ldw	r3,40(r2)
 40104d8:	e0bff717 	ldw	r2,-36(fp)
 40104dc:	18800726 	beq	r3,r2,40104fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40104e0:	e0bffe17 	ldw	r2,-8(fp)
 40104e4:	00bfb716 	blt	zero,r2,40103c4 <altera_avalon_jtag_uart_read+0x2c>
 40104e8:	00000506 	br	4010500 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40104ec:	0001883a 	nop
 40104f0:	00000306 	br	4010500 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40104f4:	0001883a 	nop
 40104f8:	00000106 	br	4010500 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40104fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4010500:	e0fff517 	ldw	r3,-44(fp)
 4010504:	e0bffd17 	ldw	r2,-12(fp)
 4010508:	18801726 	beq	r3,r2,4010568 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401050c:	0005303a 	rdctl	r2,status
 4010510:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010514:	e0fffa17 	ldw	r3,-24(fp)
 4010518:	00bfff84 	movi	r2,-2
 401051c:	1884703a 	and	r2,r3,r2
 4010520:	1001703a 	wrctl	status,r2
  
  return context;
 4010524:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4010528:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401052c:	e0bffc17 	ldw	r2,-16(fp)
 4010530:	10800817 	ldw	r2,32(r2)
 4010534:	10c00054 	ori	r3,r2,1
 4010538:	e0bffc17 	ldw	r2,-16(fp)
 401053c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4010540:	e0bffc17 	ldw	r2,-16(fp)
 4010544:	10800017 	ldw	r2,0(r2)
 4010548:	10800104 	addi	r2,r2,4
 401054c:	e0fffc17 	ldw	r3,-16(fp)
 4010550:	18c00817 	ldw	r3,32(r3)
 4010554:	10c00035 	stwio	r3,0(r2)
 4010558:	e0bff917 	ldw	r2,-28(fp)
 401055c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010560:	e0bffb17 	ldw	r2,-20(fp)
 4010564:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4010568:	e0fff517 	ldw	r3,-44(fp)
 401056c:	e0bffd17 	ldw	r2,-12(fp)
 4010570:	18800426 	beq	r3,r2,4010584 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 4010574:	e0fff517 	ldw	r3,-44(fp)
 4010578:	e0bffd17 	ldw	r2,-12(fp)
 401057c:	1885c83a 	sub	r2,r3,r2
 4010580:	00000606 	br	401059c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 4010584:	e0bfff17 	ldw	r2,-4(fp)
 4010588:	1090000c 	andi	r2,r2,16384
 401058c:	10000226 	beq	r2,zero,4010598 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 4010590:	00bffd44 	movi	r2,-11
 4010594:	00000106 	br	401059c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 4010598:	00bffec4 	movi	r2,-5
}
 401059c:	e037883a 	mov	sp,fp
 40105a0:	dfc00117 	ldw	ra,4(sp)
 40105a4:	df000017 	ldw	fp,0(sp)
 40105a8:	dec00204 	addi	sp,sp,8
 40105ac:	f800283a 	ret

040105b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40105b0:	defff304 	addi	sp,sp,-52
 40105b4:	dfc00c15 	stw	ra,48(sp)
 40105b8:	df000b15 	stw	fp,44(sp)
 40105bc:	df000b04 	addi	fp,sp,44
 40105c0:	e13ffc15 	stw	r4,-16(fp)
 40105c4:	e17ffd15 	stw	r5,-12(fp)
 40105c8:	e1bffe15 	stw	r6,-8(fp)
 40105cc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40105d0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40105d4:	e0bffd17 	ldw	r2,-12(fp)
 40105d8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40105dc:	00003706 	br	40106bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40105e0:	e0bffc17 	ldw	r2,-16(fp)
 40105e4:	10800c17 	ldw	r2,48(r2)
 40105e8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 40105ec:	e0bffc17 	ldw	r2,-16(fp)
 40105f0:	10800d17 	ldw	r2,52(r2)
 40105f4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40105f8:	e0fff817 	ldw	r3,-32(fp)
 40105fc:	e0bff517 	ldw	r2,-44(fp)
 4010600:	1880062e 	bgeu	r3,r2,401061c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4010604:	e0fff517 	ldw	r3,-44(fp)
 4010608:	e0bff817 	ldw	r2,-32(fp)
 401060c:	1885c83a 	sub	r2,r3,r2
 4010610:	10bfffc4 	addi	r2,r2,-1
 4010614:	e0bff615 	stw	r2,-40(fp)
 4010618:	00000b06 	br	4010648 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401061c:	e0bff517 	ldw	r2,-44(fp)
 4010620:	10000526 	beq	r2,zero,4010638 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4010624:	00c20004 	movi	r3,2048
 4010628:	e0bff817 	ldw	r2,-32(fp)
 401062c:	1885c83a 	sub	r2,r3,r2
 4010630:	e0bff615 	stw	r2,-40(fp)
 4010634:	00000406 	br	4010648 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4010638:	00c1ffc4 	movi	r3,2047
 401063c:	e0bff817 	ldw	r2,-32(fp)
 4010640:	1885c83a 	sub	r2,r3,r2
 4010644:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4010648:	e0bff617 	ldw	r2,-40(fp)
 401064c:	10001e26 	beq	r2,zero,40106c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4010650:	e0fffe17 	ldw	r3,-8(fp)
 4010654:	e0bff617 	ldw	r2,-40(fp)
 4010658:	1880022e 	bgeu	r3,r2,4010664 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401065c:	e0bffe17 	ldw	r2,-8(fp)
 4010660:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4010664:	e0bff817 	ldw	r2,-32(fp)
 4010668:	10820e04 	addi	r2,r2,2104
 401066c:	e0fffc17 	ldw	r3,-16(fp)
 4010670:	1885883a 	add	r2,r3,r2
 4010674:	1009883a 	mov	r4,r2
 4010678:	e17ffd17 	ldw	r5,-12(fp)
 401067c:	e1bff617 	ldw	r6,-40(fp)
 4010680:	400b9c80 	call	400b9c8 <memcpy>
      ptr   += n;
 4010684:	e0fffd17 	ldw	r3,-12(fp)
 4010688:	e0bff617 	ldw	r2,-40(fp)
 401068c:	1885883a 	add	r2,r3,r2
 4010690:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4010694:	e0fffe17 	ldw	r3,-8(fp)
 4010698:	e0bff617 	ldw	r2,-40(fp)
 401069c:	1885c83a 	sub	r2,r3,r2
 40106a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40106a4:	e0fff817 	ldw	r3,-32(fp)
 40106a8:	e0bff617 	ldw	r2,-40(fp)
 40106ac:	1885883a 	add	r2,r3,r2
 40106b0:	10c1ffcc 	andi	r3,r2,2047
 40106b4:	e0bffc17 	ldw	r2,-16(fp)
 40106b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40106bc:	e0bffe17 	ldw	r2,-8(fp)
 40106c0:	00bfc716 	blt	zero,r2,40105e0 <altera_avalon_jtag_uart_write+0x30>
 40106c4:	00000106 	br	40106cc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40106c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40106cc:	0005303a 	rdctl	r2,status
 40106d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40106d4:	e0fffa17 	ldw	r3,-24(fp)
 40106d8:	00bfff84 	movi	r2,-2
 40106dc:	1884703a 	and	r2,r3,r2
 40106e0:	1001703a 	wrctl	status,r2
  
  return context;
 40106e4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40106e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40106ec:	e0bffc17 	ldw	r2,-16(fp)
 40106f0:	10800817 	ldw	r2,32(r2)
 40106f4:	10c00094 	ori	r3,r2,2
 40106f8:	e0bffc17 	ldw	r2,-16(fp)
 40106fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4010700:	e0bffc17 	ldw	r2,-16(fp)
 4010704:	10800017 	ldw	r2,0(r2)
 4010708:	10800104 	addi	r2,r2,4
 401070c:	e0fffc17 	ldw	r3,-16(fp)
 4010710:	18c00817 	ldw	r3,32(r3)
 4010714:	10c00035 	stwio	r3,0(r2)
 4010718:	e0bff917 	ldw	r2,-28(fp)
 401071c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010720:	e0bffb17 	ldw	r2,-20(fp)
 4010724:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4010728:	e0bffe17 	ldw	r2,-8(fp)
 401072c:	0080110e 	bge	zero,r2,4010774 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4010730:	e0bfff17 	ldw	r2,-4(fp)
 4010734:	1090000c 	andi	r2,r2,16384
 4010738:	1000111e 	bne	r2,zero,4010780 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401073c:	0001883a 	nop
 4010740:	e0bffc17 	ldw	r2,-16(fp)
 4010744:	10c00d17 	ldw	r3,52(r2)
 4010748:	e0bff517 	ldw	r2,-44(fp)
 401074c:	1880051e 	bne	r3,r2,4010764 <altera_avalon_jtag_uart_write+0x1b4>
 4010750:	e0bffc17 	ldw	r2,-16(fp)
 4010754:	10c00917 	ldw	r3,36(r2)
 4010758:	e0bffc17 	ldw	r2,-16(fp)
 401075c:	10800117 	ldw	r2,4(r2)
 4010760:	18bff736 	bltu	r3,r2,4010740 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4010764:	e0bffc17 	ldw	r2,-16(fp)
 4010768:	10c00d17 	ldw	r3,52(r2)
 401076c:	e0bff517 	ldw	r2,-44(fp)
 4010770:	18800526 	beq	r3,r2,4010788 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4010774:	e0bffe17 	ldw	r2,-8(fp)
 4010778:	00bfd016 	blt	zero,r2,40106bc <altera_avalon_jtag_uart_write+0x10c>
 401077c:	00000306 	br	401078c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4010780:	0001883a 	nop
 4010784:	00000106 	br	401078c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 4010788:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401078c:	e0fffd17 	ldw	r3,-12(fp)
 4010790:	e0bff717 	ldw	r2,-36(fp)
 4010794:	18800426 	beq	r3,r2,40107a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4010798:	e0fffd17 	ldw	r3,-12(fp)
 401079c:	e0bff717 	ldw	r2,-36(fp)
 40107a0:	1885c83a 	sub	r2,r3,r2
 40107a4:	00000606 	br	40107c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 40107a8:	e0bfff17 	ldw	r2,-4(fp)
 40107ac:	1090000c 	andi	r2,r2,16384
 40107b0:	10000226 	beq	r2,zero,40107bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40107b4:	00bffd44 	movi	r2,-11
 40107b8:	00000106 	br	40107c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40107bc:	00bffec4 	movi	r2,-5
}
 40107c0:	e037883a 	mov	sp,fp
 40107c4:	dfc00117 	ldw	ra,4(sp)
 40107c8:	df000017 	ldw	fp,0(sp)
 40107cc:	dec00204 	addi	sp,sp,8
 40107d0:	f800283a 	ret

040107d4 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 40107d4:	defff904 	addi	sp,sp,-28
 40107d8:	dfc00615 	stw	ra,24(sp)
 40107dc:	df000515 	stw	fp,20(sp)
 40107e0:	df000504 	addi	fp,sp,20
 40107e4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 40107e8:	00800144 	movi	r2,5
 40107ec:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 40107f0:	00800044 	movi	r2,1
 40107f4:	d8800015 	stw	r2,0(sp)
 40107f8:	e0bffe44 	addi	r2,fp,-7
 40107fc:	d8800115 	stw	r2,4(sp)
 4010800:	d8000215 	stw	zero,8(sp)
 4010804:	e13fff17 	ldw	r4,-4(fp)
 4010808:	000b883a 	mov	r5,zero
 401080c:	01800044 	movi	r6,1
 4010810:	e1fffe04 	addi	r7,fp,-8
 4010814:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 4010818:	e0bffe43 	ldbu	r2,-7(fp)
}
 401081c:	e037883a 	mov	sp,fp
 4010820:	dfc00117 	ldw	ra,4(sp)
 4010824:	df000017 	ldw	fp,0(sp)
 4010828:	dec00204 	addi	sp,sp,8
 401082c:	f800283a 	ret

04010830 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 4010830:	defffd04 	addi	sp,sp,-12
 4010834:	dfc00215 	stw	ra,8(sp)
 4010838:	df000115 	stw	fp,4(sp)
 401083c:	df000104 	addi	fp,sp,4
 4010840:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 4010844:	e13fff17 	ldw	r4,-4(fp)
 4010848:	40107d40 	call	40107d4 <epcs_read_status_register>
 401084c:	10803fcc 	andi	r2,r2,255
 4010850:	1080004c 	andi	r2,r2,1
}
 4010854:	e037883a 	mov	sp,fp
 4010858:	dfc00117 	ldw	ra,4(sp)
 401085c:	df000017 	ldw	fp,0(sp)
 4010860:	dec00204 	addi	sp,sp,8
 4010864:	f800283a 	ret

04010868 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 4010868:	defffd04 	addi	sp,sp,-12
 401086c:	dfc00215 	stw	ra,8(sp)
 4010870:	df000115 	stw	fp,4(sp)
 4010874:	df000104 	addi	fp,sp,4
 4010878:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 401087c:	0001883a 	nop
 4010880:	e13fff17 	ldw	r4,-4(fp)
 4010884:	40108300 	call	4010830 <epcs_test_wip>
 4010888:	103ffd1e 	bne	r2,zero,4010880 <epcs_await_wip_released+0x18>
  {
  }
}
 401088c:	e037883a 	mov	sp,fp
 4010890:	dfc00117 	ldw	ra,4(sp)
 4010894:	df000017 	ldw	fp,0(sp)
 4010898:	dec00204 	addi	sp,sp,8
 401089c:	f800283a 	ret

040108a0 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 40108a0:	defff604 	addi	sp,sp,-40
 40108a4:	dfc00915 	stw	ra,36(sp)
 40108a8:	df000815 	stw	fp,32(sp)
 40108ac:	df000804 	addi	fp,sp,32
 40108b0:	e13ffd15 	stw	r4,-12(fp)
 40108b4:	e17ffe15 	stw	r5,-8(fp)
 40108b8:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 40108bc:	e0bfff17 	ldw	r2,-4(fp)
 40108c0:	10001226 	beq	r2,zero,401090c <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 40108c4:	00bff604 	movi	r2,-40
 40108c8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 40108cc:	e0bffe17 	ldw	r2,-8(fp)
 40108d0:	1004d63a 	srli	r2,r2,24
 40108d4:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 40108d8:	e0bffe17 	ldw	r2,-8(fp)
 40108dc:	1004d43a 	srli	r2,r2,16
 40108e0:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 40108e4:	e0bffe17 	ldw	r2,-8(fp)
 40108e8:	1004d23a 	srli	r2,r2,8
 40108ec:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 40108f0:	e0bffe17 	ldw	r2,-8(fp)
 40108f4:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 40108f8:	00800144 	movi	r2,5
 40108fc:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 4010900:	e13ffd17 	ldw	r4,-12(fp)
 4010904:	4010d480 	call	4010d48 <epcs_enter_4_bytes_mode>
 4010908:	00000c06 	br	401093c <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 401090c:	00bff604 	movi	r2,-40
 4010910:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 4010914:	e0bffe17 	ldw	r2,-8(fp)
 4010918:	1004d43a 	srli	r2,r2,16
 401091c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 4010920:	e0bffe17 	ldw	r2,-8(fp)
 4010924:	1004d23a 	srli	r2,r2,8
 4010928:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 401092c:	e0bffe17 	ldw	r2,-8(fp)
 4010930:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 4010934:	00800104 	movi	r2,4
 4010938:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 401093c:	e13ffd17 	ldw	r4,-12(fp)
 4010940:	4010a8c0 	call	4010a8c <epcs_write_enable>

  alt_avalon_spi_command(
 4010944:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 4010948:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 401094c:	d8000015 	stw	zero,0(sp)
 4010950:	d8000115 	stw	zero,4(sp)
 4010954:	d8000215 	stw	zero,8(sp)
 4010958:	e13ffd17 	ldw	r4,-12(fp)
 401095c:	000b883a 	mov	r5,zero
 4010960:	180d883a 	mov	r6,r3
 4010964:	100f883a 	mov	r7,r2
 4010968:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 401096c:	e13ffd17 	ldw	r4,-12(fp)
 4010970:	40108680 	call	4010868 <epcs_await_wip_released>

  if(four_bytes_mode)
 4010974:	e0bfff17 	ldw	r2,-4(fp)
 4010978:	10000226 	beq	r2,zero,4010984 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 401097c:	e13ffd17 	ldw	r4,-12(fp)
 4010980:	4010da00 	call	4010da0 <epcs_exit_4_bytes_mode>
  }
}
 4010984:	e037883a 	mov	sp,fp
 4010988:	dfc00117 	ldw	ra,4(sp)
 401098c:	df000017 	ldw	fp,0(sp)
 4010990:	dec00204 	addi	sp,sp,8
 4010994:	f800283a 	ret

04010998 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 4010998:	defff404 	addi	sp,sp,-48
 401099c:	dfc00b15 	stw	ra,44(sp)
 40109a0:	df000a15 	stw	fp,40(sp)
 40109a4:	df000a04 	addi	fp,sp,40
 40109a8:	e13ffc15 	stw	r4,-16(fp)
 40109ac:	e17ffd15 	stw	r5,-12(fp)
 40109b0:	e1bffe15 	stw	r6,-8(fp)
 40109b4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 40109b8:	008000c4 	movi	r2,3
 40109bc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 40109c0:	e0800217 	ldw	r2,8(fp)
 40109c4:	10001026 	beq	r2,zero,4010a08 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 40109c8:	e0bffd17 	ldw	r2,-12(fp)
 40109cc:	1004d63a 	srli	r2,r2,24
 40109d0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 40109d4:	e0bffd17 	ldw	r2,-12(fp)
 40109d8:	1005d43a 	srai	r2,r2,16
 40109dc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 40109e0:	e0bffd17 	ldw	r2,-12(fp)
 40109e4:	1005d23a 	srai	r2,r2,8
 40109e8:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 40109ec:	e0bffd17 	ldw	r2,-12(fp)
 40109f0:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 40109f4:	00800144 	movi	r2,5
 40109f8:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 40109fc:	e13ffc17 	ldw	r4,-16(fp)
 4010a00:	4010d480 	call	4010d48 <epcs_enter_4_bytes_mode>
 4010a04:	00000a06 	br	4010a30 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 4010a08:	e0bffd17 	ldw	r2,-12(fp)
 4010a0c:	1005d43a 	srai	r2,r2,16
 4010a10:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 4010a14:	e0bffd17 	ldw	r2,-12(fp)
 4010a18:	1005d23a 	srai	r2,r2,8
 4010a1c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 4010a20:	e0bffd17 	ldw	r2,-12(fp)
 4010a24:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 4010a28:	00800104 	movi	r2,4
 4010a2c:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 4010a30:	e13ffc17 	ldw	r4,-16(fp)
 4010a34:	40108680 	call	4010868 <epcs_await_wip_released>

  alt_avalon_spi_command(
 4010a38:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 4010a3c:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 4010a40:	d8c00015 	stw	r3,0(sp)
 4010a44:	e0fffe17 	ldw	r3,-8(fp)
 4010a48:	d8c00115 	stw	r3,4(sp)
 4010a4c:	d8000215 	stw	zero,8(sp)
 4010a50:	e13ffc17 	ldw	r4,-16(fp)
 4010a54:	000b883a 	mov	r5,zero
 4010a58:	e1bff917 	ldw	r6,-28(fp)
 4010a5c:	100f883a 	mov	r7,r2
 4010a60:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 4010a64:	e0800217 	ldw	r2,8(fp)
 4010a68:	10000226 	beq	r2,zero,4010a74 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 4010a6c:	e13ffc17 	ldw	r4,-16(fp)
 4010a70:	4010da00 	call	4010da0 <epcs_exit_4_bytes_mode>
  }

  return length;
 4010a74:	e0bfff17 	ldw	r2,-4(fp)
}
 4010a78:	e037883a 	mov	sp,fp
 4010a7c:	dfc00117 	ldw	ra,4(sp)
 4010a80:	df000017 	ldw	fp,0(sp)
 4010a84:	dec00204 	addi	sp,sp,8
 4010a88:	f800283a 	ret

04010a8c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 4010a8c:	defff904 	addi	sp,sp,-28
 4010a90:	dfc00615 	stw	ra,24(sp)
 4010a94:	df000515 	stw	fp,20(sp)
 4010a98:	df000504 	addi	fp,sp,20
 4010a9c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 4010aa0:	00800184 	movi	r2,6
 4010aa4:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 4010aa8:	d8000015 	stw	zero,0(sp)
 4010aac:	d8000115 	stw	zero,4(sp)
 4010ab0:	d8000215 	stw	zero,8(sp)
 4010ab4:	e13fff17 	ldw	r4,-4(fp)
 4010ab8:	000b883a 	mov	r5,zero
 4010abc:	01800044 	movi	r6,1
 4010ac0:	e1fffe04 	addi	r7,fp,-8
 4010ac4:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 4010ac8:	e037883a 	mov	sp,fp
 4010acc:	dfc00117 	ldw	ra,4(sp)
 4010ad0:	df000017 	ldw	fp,0(sp)
 4010ad4:	dec00204 	addi	sp,sp,8
 4010ad8:	f800283a 	ret

04010adc <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 4010adc:	defff804 	addi	sp,sp,-32
 4010ae0:	dfc00715 	stw	ra,28(sp)
 4010ae4:	df000615 	stw	fp,24(sp)
 4010ae8:	df000604 	addi	fp,sp,24
 4010aec:	e13ffe15 	stw	r4,-8(fp)
 4010af0:	2805883a 	mov	r2,r5
 4010af4:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 4010af8:	00800044 	movi	r2,1
 4010afc:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 4010b00:	e0bfff03 	ldbu	r2,-4(fp)
 4010b04:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 4010b08:	d8000015 	stw	zero,0(sp)
 4010b0c:	d8000115 	stw	zero,4(sp)
 4010b10:	d8000215 	stw	zero,8(sp)
 4010b14:	e13ffe17 	ldw	r4,-8(fp)
 4010b18:	000b883a 	mov	r5,zero
 4010b1c:	01800084 	movi	r6,2
 4010b20:	e1fffd04 	addi	r7,fp,-12
 4010b24:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4010b28:	e13ffe17 	ldw	r4,-8(fp)
 4010b2c:	40108680 	call	4010868 <epcs_await_wip_released>
}
 4010b30:	e037883a 	mov	sp,fp
 4010b34:	dfc00117 	ldw	ra,4(sp)
 4010b38:	df000017 	ldw	fp,0(sp)
 4010b3c:	dec00204 	addi	sp,sp,8
 4010b40:	f800283a 	ret

04010b44 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 4010b44:	defff404 	addi	sp,sp,-48
 4010b48:	dfc00b15 	stw	ra,44(sp)
 4010b4c:	df000a15 	stw	fp,40(sp)
 4010b50:	df000a04 	addi	fp,sp,40
 4010b54:	e13ffc15 	stw	r4,-16(fp)
 4010b58:	e17ffd15 	stw	r5,-12(fp)
 4010b5c:	e1bffe15 	stw	r6,-8(fp)
 4010b60:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 4010b64:	00800084 	movi	r2,2
 4010b68:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 4010b6c:	e0800217 	ldw	r2,8(fp)
 4010b70:	10001026 	beq	r2,zero,4010bb4 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 4010b74:	e0bffd17 	ldw	r2,-12(fp)
 4010b78:	1004d63a 	srli	r2,r2,24
 4010b7c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 4010b80:	e0bffd17 	ldw	r2,-12(fp)
 4010b84:	1005d43a 	srai	r2,r2,16
 4010b88:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 4010b8c:	e0bffd17 	ldw	r2,-12(fp)
 4010b90:	1005d23a 	srai	r2,r2,8
 4010b94:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 4010b98:	e0bffd17 	ldw	r2,-12(fp)
 4010b9c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 4010ba0:	00800144 	movi	r2,5
 4010ba4:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 4010ba8:	e13ffc17 	ldw	r4,-16(fp)
 4010bac:	4010d480 	call	4010d48 <epcs_enter_4_bytes_mode>
 4010bb0:	00000a06 	br	4010bdc <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 4010bb4:	e0bffd17 	ldw	r2,-12(fp)
 4010bb8:	1005d43a 	srai	r2,r2,16
 4010bbc:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 4010bc0:	e0bffd17 	ldw	r2,-12(fp)
 4010bc4:	1005d23a 	srai	r2,r2,8
 4010bc8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 4010bcc:	e0bffd17 	ldw	r2,-12(fp)
 4010bd0:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 4010bd4:	00800104 	movi	r2,4
 4010bd8:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 4010bdc:	e13ffc17 	ldw	r4,-16(fp)
 4010be0:	4010a8c0 	call	4010a8c <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 4010be4:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 4010be8:	d8000015 	stw	zero,0(sp)
 4010bec:	d8000115 	stw	zero,4(sp)
 4010bf0:	00c00044 	movi	r3,1
 4010bf4:	d8c00215 	stw	r3,8(sp)
 4010bf8:	e13ffc17 	ldw	r4,-16(fp)
 4010bfc:	000b883a 	mov	r5,zero
 4010c00:	e1bff917 	ldw	r6,-28(fp)
 4010c04:	100f883a 	mov	r7,r2
 4010c08:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 4010c0c:	e0bfff17 	ldw	r2,-4(fp)
 4010c10:	d8000015 	stw	zero,0(sp)
 4010c14:	d8000115 	stw	zero,4(sp)
 4010c18:	d8000215 	stw	zero,8(sp)
 4010c1c:	e13ffc17 	ldw	r4,-16(fp)
 4010c20:	000b883a 	mov	r5,zero
 4010c24:	100d883a 	mov	r6,r2
 4010c28:	e1fffe17 	ldw	r7,-8(fp)
 4010c2c:	4011aec0 	call	4011aec <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 4010c30:	e13ffc17 	ldw	r4,-16(fp)
 4010c34:	40108680 	call	4010868 <epcs_await_wip_released>

  if(four_bytes_mode)
 4010c38:	e0800217 	ldw	r2,8(fp)
 4010c3c:	10000226 	beq	r2,zero,4010c48 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 4010c40:	e13ffc17 	ldw	r4,-16(fp)
 4010c44:	4010da00 	call	4010da0 <epcs_exit_4_bytes_mode>
  }

  return length;
 4010c48:	e0bfff17 	ldw	r2,-4(fp)
}
 4010c4c:	e037883a 	mov	sp,fp
 4010c50:	dfc00117 	ldw	ra,4(sp)
 4010c54:	df000017 	ldw	fp,0(sp)
 4010c58:	dec00204 	addi	sp,sp,8
 4010c5c:	f800283a 	ret

04010c60 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 4010c60:	defff804 	addi	sp,sp,-32
 4010c64:	dfc00715 	stw	ra,28(sp)
 4010c68:	df000615 	stw	fp,24(sp)
 4010c6c:	df000604 	addi	fp,sp,24
 4010c70:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 4010c74:	00bfeac4 	movi	r2,-85
 4010c78:	e0bffd05 	stb	r2,-12(fp)
 4010c7c:	e03ffd45 	stb	zero,-11(fp)
 4010c80:	e03ffd85 	stb	zero,-10(fp)
 4010c84:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4010c88:	00800044 	movi	r2,1
 4010c8c:	d8800015 	stw	r2,0(sp)
 4010c90:	e0bffe04 	addi	r2,fp,-8
 4010c94:	d8800115 	stw	r2,4(sp)
 4010c98:	d8000215 	stw	zero,8(sp)
 4010c9c:	e13fff17 	ldw	r4,-4(fp)
 4010ca0:	000b883a 	mov	r5,zero
 4010ca4:	01800104 	movi	r6,4
 4010ca8:	e1fffd04 	addi	r7,fp,-12
 4010cac:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 4010cb0:	e0bffe03 	ldbu	r2,-8(fp)
}
 4010cb4:	e037883a 	mov	sp,fp
 4010cb8:	dfc00117 	ldw	ra,4(sp)
 4010cbc:	df000017 	ldw	fp,0(sp)
 4010cc0:	dec00204 	addi	sp,sp,8
 4010cc4:	f800283a 	ret

04010cc8 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 4010cc8:	defff904 	addi	sp,sp,-28
 4010ccc:	dfc00615 	stw	ra,24(sp)
 4010cd0:	df000515 	stw	fp,20(sp)
 4010cd4:	df000504 	addi	fp,sp,20
 4010cd8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 4010cdc:	00bfe7c4 	movi	r2,-97
 4010ce0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 4010ce4:	008000c4 	movi	r2,3
 4010ce8:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 4010cec:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 4010cf0:	d8800115 	stw	r2,4(sp)
 4010cf4:	d8000215 	stw	zero,8(sp)
 4010cf8:	e13fff17 	ldw	r4,-4(fp)
 4010cfc:	000b883a 	mov	r5,zero
 4010d00:	01800044 	movi	r6,1
 4010d04:	e1fffe04 	addi	r7,fp,-8
 4010d08:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 4010d0c:	e0bffe43 	ldbu	r2,-7(fp)
 4010d10:	10803fcc 	andi	r2,r2,255
 4010d14:	1006943a 	slli	r3,r2,16
 4010d18:	e0bffe83 	ldbu	r2,-6(fp)
 4010d1c:	10803fcc 	andi	r2,r2,255
 4010d20:	1004923a 	slli	r2,r2,8
 4010d24:	1886b03a 	or	r3,r3,r2
 4010d28:	e0bffec3 	ldbu	r2,-5(fp)
 4010d2c:	10803fcc 	andi	r2,r2,255
 4010d30:	1884b03a 	or	r2,r3,r2
}
 4010d34:	e037883a 	mov	sp,fp
 4010d38:	dfc00117 	ldw	ra,4(sp)
 4010d3c:	df000017 	ldw	fp,0(sp)
 4010d40:	dec00204 	addi	sp,sp,8
 4010d44:	f800283a 	ret

04010d48 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 4010d48:	defff904 	addi	sp,sp,-28
 4010d4c:	dfc00615 	stw	ra,24(sp)
 4010d50:	df000515 	stw	fp,20(sp)
 4010d54:	df000504 	addi	fp,sp,20
 4010d58:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 4010d5c:	00bfedc4 	movi	r2,-73
 4010d60:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 4010d64:	e13fff17 	ldw	r4,-4(fp)
 4010d68:	4010a8c0 	call	4010a8c <epcs_write_enable>

  alt_avalon_spi_command(
 4010d6c:	d8000015 	stw	zero,0(sp)
 4010d70:	d8000115 	stw	zero,4(sp)
 4010d74:	d8000215 	stw	zero,8(sp)
 4010d78:	e13fff17 	ldw	r4,-4(fp)
 4010d7c:	000b883a 	mov	r5,zero
 4010d80:	01800044 	movi	r6,1
 4010d84:	e1fffe04 	addi	r7,fp,-8
 4010d88:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 4010d8c:	e037883a 	mov	sp,fp
 4010d90:	dfc00117 	ldw	ra,4(sp)
 4010d94:	df000017 	ldw	fp,0(sp)
 4010d98:	dec00204 	addi	sp,sp,8
 4010d9c:	f800283a 	ret

04010da0 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 4010da0:	defff904 	addi	sp,sp,-28
 4010da4:	dfc00615 	stw	ra,24(sp)
 4010da8:	df000515 	stw	fp,20(sp)
 4010dac:	df000504 	addi	fp,sp,20
 4010db0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 4010db4:	00bffa44 	movi	r2,-23
 4010db8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 4010dbc:	e13fff17 	ldw	r4,-4(fp)
 4010dc0:	4010a8c0 	call	4010a8c <epcs_write_enable>

  alt_avalon_spi_command(
 4010dc4:	d8000015 	stw	zero,0(sp)
 4010dc8:	d8000115 	stw	zero,4(sp)
 4010dcc:	d8000215 	stw	zero,8(sp)
 4010dd0:	e13fff17 	ldw	r4,-4(fp)
 4010dd4:	000b883a 	mov	r5,zero
 4010dd8:	01800044 	movi	r6,1
 4010ddc:	e1fffe04 	addi	r7,fp,-8
 4010de0:	4011aec0 	call	4011aec <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 4010de4:	e037883a 	mov	sp,fp
 4010de8:	dfc00117 	ldw	ra,4(sp)
 4010dec:	df000017 	ldw	fp,0(sp)
 4010df0:	dec00204 	addi	sp,sp,8
 4010df4:	f800283a 	ret

04010df8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4010df8:	defff504 	addi	sp,sp,-44
 4010dfc:	df000a15 	stw	fp,40(sp)
 4010e00:	df000a04 	addi	fp,sp,40
 4010e04:	e13ffc15 	stw	r4,-16(fp)
 4010e08:	e17ffd15 	stw	r5,-12(fp)
 4010e0c:	e1bffe15 	stw	r6,-8(fp)
 4010e10:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4010e14:	e03ff615 	stw	zero,-40(fp)
 4010e18:	00810374 	movhi	r2,1037
 4010e1c:	10905904 	addi	r2,r2,16740
 4010e20:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4010e24:	10003f26 	beq	r2,zero,4010f24 <alt_alarm_start+0x12c>
  {
    if (alarm)
 4010e28:	e0bffc17 	ldw	r2,-16(fp)
 4010e2c:	10003b26 	beq	r2,zero,4010f1c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4010e30:	e0bffc17 	ldw	r2,-16(fp)
 4010e34:	e0fffe17 	ldw	r3,-8(fp)
 4010e38:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4010e3c:	e0bffc17 	ldw	r2,-16(fp)
 4010e40:	e0ffff17 	ldw	r3,-4(fp)
 4010e44:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010e48:	0005303a 	rdctl	r2,status
 4010e4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010e50:	e0fff817 	ldw	r3,-32(fp)
 4010e54:	00bfff84 	movi	r2,-2
 4010e58:	1884703a 	and	r2,r3,r2
 4010e5c:	1001703a 	wrctl	status,r2
  
  return context;
 4010e60:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4010e64:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4010e68:	00810374 	movhi	r2,1037
 4010e6c:	10905a04 	addi	r2,r2,16744
 4010e70:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4010e74:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4010e78:	e0fffd17 	ldw	r3,-12(fp)
 4010e7c:	e0bff617 	ldw	r2,-40(fp)
 4010e80:	1885883a 	add	r2,r3,r2
 4010e84:	10c00044 	addi	r3,r2,1
 4010e88:	e0bffc17 	ldw	r2,-16(fp)
 4010e8c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4010e90:	e0bffc17 	ldw	r2,-16(fp)
 4010e94:	10c00217 	ldw	r3,8(r2)
 4010e98:	e0bff617 	ldw	r2,-40(fp)
 4010e9c:	1880042e 	bgeu	r3,r2,4010eb0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4010ea0:	e0bffc17 	ldw	r2,-16(fp)
 4010ea4:	00c00044 	movi	r3,1
 4010ea8:	10c00405 	stb	r3,16(r2)
 4010eac:	00000206 	br	4010eb8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4010eb0:	e0bffc17 	ldw	r2,-16(fp)
 4010eb4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4010eb8:	e0bffc17 	ldw	r2,-16(fp)
 4010ebc:	00c10374 	movhi	r3,1037
 4010ec0:	18d04c04 	addi	r3,r3,16688
 4010ec4:	e0fff915 	stw	r3,-28(fp)
 4010ec8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010ecc:	e0bffa17 	ldw	r2,-24(fp)
 4010ed0:	e0fff917 	ldw	r3,-28(fp)
 4010ed4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4010ed8:	e0bff917 	ldw	r2,-28(fp)
 4010edc:	10c00017 	ldw	r3,0(r2)
 4010ee0:	e0bffa17 	ldw	r2,-24(fp)
 4010ee4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4010ee8:	e0bff917 	ldw	r2,-28(fp)
 4010eec:	10800017 	ldw	r2,0(r2)
 4010ef0:	e0fffa17 	ldw	r3,-24(fp)
 4010ef4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4010ef8:	e0bff917 	ldw	r2,-28(fp)
 4010efc:	e0fffa17 	ldw	r3,-24(fp)
 4010f00:	10c00015 	stw	r3,0(r2)
 4010f04:	e0bff717 	ldw	r2,-36(fp)
 4010f08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010f0c:	e0bffb17 	ldw	r2,-20(fp)
 4010f10:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4010f14:	0005883a 	mov	r2,zero
 4010f18:	00000306 	br	4010f28 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 4010f1c:	00bffa84 	movi	r2,-22
 4010f20:	00000106 	br	4010f28 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 4010f24:	00bfde84 	movi	r2,-134
  }
}
 4010f28:	e037883a 	mov	sp,fp
 4010f2c:	df000017 	ldw	fp,0(sp)
 4010f30:	dec00104 	addi	sp,sp,4
 4010f34:	f800283a 	ret

04010f38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4010f38:	defffb04 	addi	sp,sp,-20
 4010f3c:	df000415 	stw	fp,16(sp)
 4010f40:	df000404 	addi	fp,sp,16
 4010f44:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4010f48:	008000c4 	movi	r2,3
 4010f4c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4010f50:	e0fffd17 	ldw	r3,-12(fp)
 4010f54:	008003f4 	movhi	r2,15
 4010f58:	10909004 	addi	r2,r2,16960
 4010f5c:	1885383a 	mul	r2,r3,r2
 4010f60:	00c17db4 	movhi	r3,1526
 4010f64:	18f84004 	addi	r3,r3,-7936
 4010f68:	1885203a 	divu	r2,r3,r2
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4010f6c:	00e00034 	movhi	r3,32768
 4010f70:	18ffffc4 	addi	r3,r3,-1
 4010f74:	1885203a 	divu	r2,r3,r2
 4010f78:	e0ffff17 	ldw	r3,-4(fp)
 4010f7c:	1885203a 	divu	r2,r3,r2
 4010f80:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4010f84:	e0bffe17 	ldw	r2,-8(fp)
 4010f88:	10002526 	beq	r2,zero,4011020 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
 4010f8c:	e03ffc15 	stw	zero,-16(fp)
 4010f90:	00001406 	br	4010fe4 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4010f94:	00a00034 	movhi	r2,32768
 4010f98:	10bfffc4 	addi	r2,r2,-1
 4010f9c:	10bfffc4 	addi	r2,r2,-1
 4010fa0:	103ffe1e 	bne	r2,zero,4010f9c <alt_busy_sleep+0x64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4010fa4:	e0fffd17 	ldw	r3,-12(fp)
 4010fa8:	008003f4 	movhi	r2,15
 4010fac:	10909004 	addi	r2,r2,16960
 4010fb0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4010fb4:	00c17db4 	movhi	r3,1526
 4010fb8:	18f84004 	addi	r3,r3,-7936
 4010fbc:	1885203a 	divu	r2,r3,r2
 4010fc0:	00e00034 	movhi	r3,32768
 4010fc4:	18ffffc4 	addi	r3,r3,-1
 4010fc8:	1885203a 	divu	r2,r3,r2
 4010fcc:	e0ffff17 	ldw	r3,-4(fp)
 4010fd0:	1885c83a 	sub	r2,r3,r2
 4010fd4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4010fd8:	e0bffc17 	ldw	r2,-16(fp)
 4010fdc:	10800044 	addi	r2,r2,1
 4010fe0:	e0bffc15 	stw	r2,-16(fp)
 4010fe4:	e0fffc17 	ldw	r3,-16(fp)
 4010fe8:	e0bffe17 	ldw	r2,-8(fp)
 4010fec:	18bfe916 	blt	r3,r2,4010f94 <alt_busy_sleep+0x5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4010ff0:	e0fffd17 	ldw	r3,-12(fp)
 4010ff4:	008003f4 	movhi	r2,15
 4010ff8:	10909004 	addi	r2,r2,16960
 4010ffc:	1885383a 	mul	r2,r3,r2
 4011000:	00c17db4 	movhi	r3,1526
 4011004:	18f84004 	addi	r3,r3,-7936
 4011008:	1887203a 	divu	r3,r3,r2
 401100c:	e0bfff17 	ldw	r2,-4(fp)
 4011010:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4011014:	10bfffc4 	addi	r2,r2,-1
 4011018:	103ffe1e 	bne	r2,zero,4011014 <alt_busy_sleep+0xdc>
 401101c:	00000b06 	br	401104c <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4011020:	e0fffd17 	ldw	r3,-12(fp)
 4011024:	008003f4 	movhi	r2,15
 4011028:	10909004 	addi	r2,r2,16960
 401102c:	1885383a 	mul	r2,r3,r2
 4011030:	00c17db4 	movhi	r3,1526
 4011034:	18f84004 	addi	r3,r3,-7936
 4011038:	1887203a 	divu	r3,r3,r2
 401103c:	e0bfff17 	ldw	r2,-4(fp)
 4011040:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4011044:	10bfffc4 	addi	r2,r2,-1
 4011048:	00bffe16 	blt	zero,r2,4011044 <alt_busy_sleep+0x10c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401104c:	0005883a 	mov	r2,zero
}
 4011050:	e037883a 	mov	sp,fp
 4011054:	df000017 	ldw	fp,0(sp)
 4011058:	dec00104 	addi	sp,sp,4
 401105c:	f800283a 	ret

04011060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011060:	defffe04 	addi	sp,sp,-8
 4011064:	dfc00115 	stw	ra,4(sp)
 4011068:	df000015 	stw	fp,0(sp)
 401106c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011070:	00810374 	movhi	r2,1037
 4011074:	10904704 	addi	r2,r2,16668
 4011078:	10800017 	ldw	r2,0(r2)
 401107c:	10000526 	beq	r2,zero,4011094 <alt_get_errno+0x34>
 4011080:	00810374 	movhi	r2,1037
 4011084:	10904704 	addi	r2,r2,16668
 4011088:	10800017 	ldw	r2,0(r2)
 401108c:	103ee83a 	callr	r2
 4011090:	00000206 	br	401109c <alt_get_errno+0x3c>
 4011094:	00810374 	movhi	r2,1037
 4011098:	10905404 	addi	r2,r2,16720
}
 401109c:	e037883a 	mov	sp,fp
 40110a0:	dfc00117 	ldw	ra,4(sp)
 40110a4:	df000017 	ldw	fp,0(sp)
 40110a8:	dec00204 	addi	sp,sp,8
 40110ac:	f800283a 	ret

040110b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40110b0:	defffa04 	addi	sp,sp,-24
 40110b4:	dfc00515 	stw	ra,20(sp)
 40110b8:	df000415 	stw	fp,16(sp)
 40110bc:	df000404 	addi	fp,sp,16
 40110c0:	e13ffe15 	stw	r4,-8(fp)
 40110c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40110c8:	e0bffe17 	ldw	r2,-8(fp)
 40110cc:	10000326 	beq	r2,zero,40110dc <alt_dev_llist_insert+0x2c>
 40110d0:	e0bffe17 	ldw	r2,-8(fp)
 40110d4:	10800217 	ldw	r2,8(r2)
 40110d8:	1000051e 	bne	r2,zero,40110f0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 40110dc:	40110600 	call	4011060 <alt_get_errno>
 40110e0:	00c00584 	movi	r3,22
 40110e4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 40110e8:	00bffa84 	movi	r2,-22
 40110ec:	00001306 	br	401113c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40110f0:	e0bffe17 	ldw	r2,-8(fp)
 40110f4:	e0ffff17 	ldw	r3,-4(fp)
 40110f8:	e0fffc15 	stw	r3,-16(fp)
 40110fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4011100:	e0bffd17 	ldw	r2,-12(fp)
 4011104:	e0fffc17 	ldw	r3,-16(fp)
 4011108:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401110c:	e0bffc17 	ldw	r2,-16(fp)
 4011110:	10c00017 	ldw	r3,0(r2)
 4011114:	e0bffd17 	ldw	r2,-12(fp)
 4011118:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401111c:	e0bffc17 	ldw	r2,-16(fp)
 4011120:	10800017 	ldw	r2,0(r2)
 4011124:	e0fffd17 	ldw	r3,-12(fp)
 4011128:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401112c:	e0bffc17 	ldw	r2,-16(fp)
 4011130:	e0fffd17 	ldw	r3,-12(fp)
 4011134:	10c00015 	stw	r3,0(r2)

  return 0;  
 4011138:	0005883a 	mov	r2,zero
}
 401113c:	e037883a 	mov	sp,fp
 4011140:	dfc00117 	ldw	ra,4(sp)
 4011144:	df000017 	ldw	fp,0(sp)
 4011148:	dec00204 	addi	sp,sp,8
 401114c:	f800283a 	ret

04011150 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4011150:	defffd04 	addi	sp,sp,-12
 4011154:	dfc00215 	stw	ra,8(sp)
 4011158:	df000115 	stw	fp,4(sp)
 401115c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4011160:	00810074 	movhi	r2,1025
 4011164:	1088c704 	addi	r2,r2,8988
 4011168:	e0bfff15 	stw	r2,-4(fp)
 401116c:	00000606 	br	4011188 <_do_ctors+0x38>
        (*ctor) (); 
 4011170:	e0bfff17 	ldw	r2,-4(fp)
 4011174:	10800017 	ldw	r2,0(r2)
 4011178:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401117c:	e0bfff17 	ldw	r2,-4(fp)
 4011180:	10bfff04 	addi	r2,r2,-4
 4011184:	e0bfff15 	stw	r2,-4(fp)
 4011188:	e0ffff17 	ldw	r3,-4(fp)
 401118c:	00810074 	movhi	r2,1025
 4011190:	1088c804 	addi	r2,r2,8992
 4011194:	18bff62e 	bgeu	r3,r2,4011170 <_do_ctors+0x20>
        (*ctor) (); 
}
 4011198:	e037883a 	mov	sp,fp
 401119c:	dfc00117 	ldw	ra,4(sp)
 40111a0:	df000017 	ldw	fp,0(sp)
 40111a4:	dec00204 	addi	sp,sp,8
 40111a8:	f800283a 	ret

040111ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40111ac:	defffd04 	addi	sp,sp,-12
 40111b0:	dfc00215 	stw	ra,8(sp)
 40111b4:	df000115 	stw	fp,4(sp)
 40111b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40111bc:	00810074 	movhi	r2,1025
 40111c0:	1088c704 	addi	r2,r2,8988
 40111c4:	e0bfff15 	stw	r2,-4(fp)
 40111c8:	00000606 	br	40111e4 <_do_dtors+0x38>
        (*dtor) (); 
 40111cc:	e0bfff17 	ldw	r2,-4(fp)
 40111d0:	10800017 	ldw	r2,0(r2)
 40111d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40111d8:	e0bfff17 	ldw	r2,-4(fp)
 40111dc:	10bfff04 	addi	r2,r2,-4
 40111e0:	e0bfff15 	stw	r2,-4(fp)
 40111e4:	e0ffff17 	ldw	r3,-4(fp)
 40111e8:	00810074 	movhi	r2,1025
 40111ec:	1088c804 	addi	r2,r2,8992
 40111f0:	18bff62e 	bgeu	r3,r2,40111cc <_do_dtors+0x20>
        (*dtor) (); 
}
 40111f4:	e037883a 	mov	sp,fp
 40111f8:	dfc00117 	ldw	ra,4(sp)
 40111fc:	df000017 	ldw	fp,0(sp)
 4011200:	dec00204 	addi	sp,sp,8
 4011204:	f800283a 	ret

04011208 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4011208:	defffc04 	addi	sp,sp,-16
 401120c:	dfc00315 	stw	ra,12(sp)
 4011210:	df000215 	stw	fp,8(sp)
 4011214:	df000204 	addi	fp,sp,8
 4011218:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 401121c:	e13fff17 	ldw	r4,-4(fp)
 4011220:	d1600e04 	addi	r5,gp,-32712
 4011224:	4011cf40 	call	4011cf4 <alt_find_dev>
 4011228:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 401122c:	e0bffe17 	ldw	r2,-8(fp)
 4011230:	10000926 	beq	r2,zero,4011258 <alt_flash_open_dev+0x50>
 4011234:	e0bffe17 	ldw	r2,-8(fp)
 4011238:	10800317 	ldw	r2,12(r2)
 401123c:	10000626 	beq	r2,zero,4011258 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 4011240:	e0bffe17 	ldw	r2,-8(fp)
 4011244:	10800317 	ldw	r2,12(r2)
 4011248:	e13ffe17 	ldw	r4,-8(fp)
 401124c:	e17fff17 	ldw	r5,-4(fp)
 4011250:	103ee83a 	callr	r2
 4011254:	00000106 	br	401125c <alt_flash_open_dev+0x54>
  }

  return dev;
 4011258:	e0bffe17 	ldw	r2,-8(fp)
}
 401125c:	e037883a 	mov	sp,fp
 4011260:	dfc00117 	ldw	ra,4(sp)
 4011264:	df000017 	ldw	fp,0(sp)
 4011268:	dec00204 	addi	sp,sp,8
 401126c:	f800283a 	ret

04011270 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 4011270:	defffd04 	addi	sp,sp,-12
 4011274:	dfc00215 	stw	ra,8(sp)
 4011278:	df000115 	stw	fp,4(sp)
 401127c:	df000104 	addi	fp,sp,4
 4011280:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 4011284:	e0bfff17 	ldw	r2,-4(fp)
 4011288:	10000726 	beq	r2,zero,40112a8 <alt_flash_close_dev+0x38>
 401128c:	e0bfff17 	ldw	r2,-4(fp)
 4011290:	10800417 	ldw	r2,16(r2)
 4011294:	10000426 	beq	r2,zero,40112a8 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 4011298:	e0bfff17 	ldw	r2,-4(fp)
 401129c:	10800417 	ldw	r2,16(r2)
 40112a0:	e13fff17 	ldw	r4,-4(fp)
 40112a4:	103ee83a 	callr	r2
  }
  return;
 40112a8:	0001883a 	nop
}
 40112ac:	e037883a 	mov	sp,fp
 40112b0:	dfc00117 	ldw	ra,4(sp)
 40112b4:	df000017 	ldw	fp,0(sp)
 40112b8:	dec00204 	addi	sp,sp,8
 40112bc:	f800283a 	ret

040112c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40112c0:	defff904 	addi	sp,sp,-28
 40112c4:	dfc00615 	stw	ra,24(sp)
 40112c8:	df000515 	stw	fp,20(sp)
 40112cc:	df000504 	addi	fp,sp,20
 40112d0:	e13ffc15 	stw	r4,-16(fp)
 40112d4:	e17ffd15 	stw	r5,-12(fp)
 40112d8:	e1bffe15 	stw	r6,-8(fp)
 40112dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40112e0:	e0800217 	ldw	r2,8(fp)
 40112e4:	d8800015 	stw	r2,0(sp)
 40112e8:	e13ffc17 	ldw	r4,-16(fp)
 40112ec:	e17ffd17 	ldw	r5,-12(fp)
 40112f0:	e1bffe17 	ldw	r6,-8(fp)
 40112f4:	e1ffff17 	ldw	r7,-4(fp)
 40112f8:	40114980 	call	4011498 <alt_iic_isr_register>
}  
 40112fc:	e037883a 	mov	sp,fp
 4011300:	dfc00117 	ldw	ra,4(sp)
 4011304:	df000017 	ldw	fp,0(sp)
 4011308:	dec00204 	addi	sp,sp,8
 401130c:	f800283a 	ret

04011310 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4011310:	defff904 	addi	sp,sp,-28
 4011314:	df000615 	stw	fp,24(sp)
 4011318:	df000604 	addi	fp,sp,24
 401131c:	e13ffe15 	stw	r4,-8(fp)
 4011320:	e17fff15 	stw	r5,-4(fp)
 4011324:	e0bfff17 	ldw	r2,-4(fp)
 4011328:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401132c:	0005303a 	rdctl	r2,status
 4011330:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011334:	e0fffb17 	ldw	r3,-20(fp)
 4011338:	00bfff84 	movi	r2,-2
 401133c:	1884703a 	and	r2,r3,r2
 4011340:	1001703a 	wrctl	status,r2
  
  return context;
 4011344:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011348:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401134c:	e0bffa17 	ldw	r2,-24(fp)
 4011350:	00c00044 	movi	r3,1
 4011354:	1884983a 	sll	r2,r3,r2
 4011358:	1007883a 	mov	r3,r2
 401135c:	00810374 	movhi	r2,1037
 4011360:	10905804 	addi	r2,r2,16736
 4011364:	10800017 	ldw	r2,0(r2)
 4011368:	1886b03a 	or	r3,r3,r2
 401136c:	00810374 	movhi	r2,1037
 4011370:	10905804 	addi	r2,r2,16736
 4011374:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011378:	00810374 	movhi	r2,1037
 401137c:	10905804 	addi	r2,r2,16736
 4011380:	10800017 	ldw	r2,0(r2)
 4011384:	100170fa 	wrctl	ienable,r2
 4011388:	e0bffc17 	ldw	r2,-16(fp)
 401138c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011390:	e0bffd17 	ldw	r2,-12(fp)
 4011394:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011398:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 401139c:	e037883a 	mov	sp,fp
 40113a0:	df000017 	ldw	fp,0(sp)
 40113a4:	dec00104 	addi	sp,sp,4
 40113a8:	f800283a 	ret

040113ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40113ac:	defff904 	addi	sp,sp,-28
 40113b0:	df000615 	stw	fp,24(sp)
 40113b4:	df000604 	addi	fp,sp,24
 40113b8:	e13ffe15 	stw	r4,-8(fp)
 40113bc:	e17fff15 	stw	r5,-4(fp)
 40113c0:	e0bfff17 	ldw	r2,-4(fp)
 40113c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40113c8:	0005303a 	rdctl	r2,status
 40113cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40113d0:	e0fffb17 	ldw	r3,-20(fp)
 40113d4:	00bfff84 	movi	r2,-2
 40113d8:	1884703a 	and	r2,r3,r2
 40113dc:	1001703a 	wrctl	status,r2
  
  return context;
 40113e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40113e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40113e8:	e0bffa17 	ldw	r2,-24(fp)
 40113ec:	00c00044 	movi	r3,1
 40113f0:	1884983a 	sll	r2,r3,r2
 40113f4:	0084303a 	nor	r2,zero,r2
 40113f8:	1007883a 	mov	r3,r2
 40113fc:	00810374 	movhi	r2,1037
 4011400:	10905804 	addi	r2,r2,16736
 4011404:	10800017 	ldw	r2,0(r2)
 4011408:	1886703a 	and	r3,r3,r2
 401140c:	00810374 	movhi	r2,1037
 4011410:	10905804 	addi	r2,r2,16736
 4011414:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011418:	00810374 	movhi	r2,1037
 401141c:	10905804 	addi	r2,r2,16736
 4011420:	10800017 	ldw	r2,0(r2)
 4011424:	100170fa 	wrctl	ienable,r2
 4011428:	e0bffc17 	ldw	r2,-16(fp)
 401142c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011430:	e0bffd17 	ldw	r2,-12(fp)
 4011434:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011438:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 401143c:	e037883a 	mov	sp,fp
 4011440:	df000017 	ldw	fp,0(sp)
 4011444:	dec00104 	addi	sp,sp,4
 4011448:	f800283a 	ret

0401144c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401144c:	defffc04 	addi	sp,sp,-16
 4011450:	df000315 	stw	fp,12(sp)
 4011454:	df000304 	addi	fp,sp,12
 4011458:	e13ffe15 	stw	r4,-8(fp)
 401145c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4011460:	000530fa 	rdctl	r2,ienable
 4011464:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4011468:	e0bfff17 	ldw	r2,-4(fp)
 401146c:	00c00044 	movi	r3,1
 4011470:	1884983a 	sll	r2,r3,r2
 4011474:	1007883a 	mov	r3,r2
 4011478:	e0bffd17 	ldw	r2,-12(fp)
 401147c:	1884703a 	and	r2,r3,r2
 4011480:	1004c03a 	cmpne	r2,r2,zero
 4011484:	10803fcc 	andi	r2,r2,255
}
 4011488:	e037883a 	mov	sp,fp
 401148c:	df000017 	ldw	fp,0(sp)
 4011490:	dec00104 	addi	sp,sp,4
 4011494:	f800283a 	ret

04011498 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011498:	defff504 	addi	sp,sp,-44
 401149c:	dfc00a15 	stw	ra,40(sp)
 40114a0:	df000915 	stw	fp,36(sp)
 40114a4:	df000904 	addi	fp,sp,36
 40114a8:	e13ffc15 	stw	r4,-16(fp)
 40114ac:	e17ffd15 	stw	r5,-12(fp)
 40114b0:	e1bffe15 	stw	r6,-8(fp)
 40114b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40114b8:	00bffa84 	movi	r2,-22
 40114bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40114c0:	e0bffd17 	ldw	r2,-12(fp)
 40114c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40114c8:	e0bff817 	ldw	r2,-32(fp)
 40114cc:	10800808 	cmpgei	r2,r2,32
 40114d0:	1000271e 	bne	r2,zero,4011570 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40114d4:	0005303a 	rdctl	r2,status
 40114d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40114dc:	e0fffa17 	ldw	r3,-24(fp)
 40114e0:	00bfff84 	movi	r2,-2
 40114e4:	1884703a 	and	r2,r3,r2
 40114e8:	1001703a 	wrctl	status,r2
  
  return context;
 40114ec:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40114f0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 40114f4:	00c10374 	movhi	r3,1037
 40114f8:	18d06c04 	addi	r3,r3,16816
 40114fc:	e0bff817 	ldw	r2,-32(fp)
 4011500:	100490fa 	slli	r2,r2,3
 4011504:	1885883a 	add	r2,r3,r2
 4011508:	e0fffe17 	ldw	r3,-8(fp)
 401150c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4011510:	00c10374 	movhi	r3,1037
 4011514:	18d06c04 	addi	r3,r3,16816
 4011518:	e0bff817 	ldw	r2,-32(fp)
 401151c:	100490fa 	slli	r2,r2,3
 4011520:	1885883a 	add	r2,r3,r2
 4011524:	10800104 	addi	r2,r2,4
 4011528:	e0ffff17 	ldw	r3,-4(fp)
 401152c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4011530:	e0bffe17 	ldw	r2,-8(fp)
 4011534:	10000526 	beq	r2,zero,401154c <alt_iic_isr_register+0xb4>
 4011538:	e0bff817 	ldw	r2,-32(fp)
 401153c:	e13ffc17 	ldw	r4,-16(fp)
 4011540:	100b883a 	mov	r5,r2
 4011544:	40113100 	call	4011310 <alt_ic_irq_enable>
 4011548:	00000406 	br	401155c <alt_iic_isr_register+0xc4>
 401154c:	e0bff817 	ldw	r2,-32(fp)
 4011550:	e13ffc17 	ldw	r4,-16(fp)
 4011554:	100b883a 	mov	r5,r2
 4011558:	40113ac0 	call	40113ac <alt_ic_irq_disable>
 401155c:	e0bff715 	stw	r2,-36(fp)
 4011560:	e0bff917 	ldw	r2,-28(fp)
 4011564:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011568:	e0bffb17 	ldw	r2,-20(fp)
 401156c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4011570:	e0bff717 	ldw	r2,-36(fp)
}
 4011574:	e037883a 	mov	sp,fp
 4011578:	dfc00117 	ldw	ra,4(sp)
 401157c:	df000017 	ldw	fp,0(sp)
 4011580:	dec00204 	addi	sp,sp,8
 4011584:	f800283a 	ret

04011588 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4011588:	defff904 	addi	sp,sp,-28
 401158c:	dfc00615 	stw	ra,24(sp)
 4011590:	df000515 	stw	fp,20(sp)
 4011594:	df000504 	addi	fp,sp,20
 4011598:	e13ffc15 	stw	r4,-16(fp)
 401159c:	e17ffd15 	stw	r5,-12(fp)
 40115a0:	e1bffe15 	stw	r6,-8(fp)
 40115a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 40115a8:	e13ffd17 	ldw	r4,-12(fp)
 40115ac:	e17ffe17 	ldw	r5,-8(fp)
 40115b0:	e1bfff17 	ldw	r6,-4(fp)
 40115b4:	40117dc0 	call	40117dc <open>
 40115b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40115bc:	e0bffb17 	ldw	r2,-20(fp)
 40115c0:	10001c16 	blt	r2,zero,4011634 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40115c4:	00c10374 	movhi	r3,1037
 40115c8:	18cb9104 	addi	r3,r3,11844
 40115cc:	e0bffb17 	ldw	r2,-20(fp)
 40115d0:	10800324 	muli	r2,r2,12
 40115d4:	1885883a 	add	r2,r3,r2
 40115d8:	10c00017 	ldw	r3,0(r2)
 40115dc:	e0bffc17 	ldw	r2,-16(fp)
 40115e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40115e4:	00c10374 	movhi	r3,1037
 40115e8:	18cb9104 	addi	r3,r3,11844
 40115ec:	e0bffb17 	ldw	r2,-20(fp)
 40115f0:	10800324 	muli	r2,r2,12
 40115f4:	1885883a 	add	r2,r3,r2
 40115f8:	10800104 	addi	r2,r2,4
 40115fc:	10c00017 	ldw	r3,0(r2)
 4011600:	e0bffc17 	ldw	r2,-16(fp)
 4011604:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4011608:	00c10374 	movhi	r3,1037
 401160c:	18cb9104 	addi	r3,r3,11844
 4011610:	e0bffb17 	ldw	r2,-20(fp)
 4011614:	10800324 	muli	r2,r2,12
 4011618:	1885883a 	add	r2,r3,r2
 401161c:	10800204 	addi	r2,r2,8
 4011620:	10c00017 	ldw	r3,0(r2)
 4011624:	e0bffc17 	ldw	r2,-16(fp)
 4011628:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401162c:	e13ffb17 	ldw	r4,-20(fp)
 4011630:	400f0a80 	call	400f0a8 <alt_release_fd>
  }
} 
 4011634:	e037883a 	mov	sp,fp
 4011638:	dfc00117 	ldw	ra,4(sp)
 401163c:	df000017 	ldw	fp,0(sp)
 4011640:	dec00204 	addi	sp,sp,8
 4011644:	f800283a 	ret

04011648 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4011648:	defffb04 	addi	sp,sp,-20
 401164c:	dfc00415 	stw	ra,16(sp)
 4011650:	df000315 	stw	fp,12(sp)
 4011654:	df000304 	addi	fp,sp,12
 4011658:	e13ffd15 	stw	r4,-12(fp)
 401165c:	e17ffe15 	stw	r5,-8(fp)
 4011660:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4011664:	01010374 	movhi	r4,1037
 4011668:	210b9404 	addi	r4,r4,11856
 401166c:	e17ffd17 	ldw	r5,-12(fp)
 4011670:	01800044 	movi	r6,1
 4011674:	01c07fc4 	movi	r7,511
 4011678:	40115880 	call	4011588 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401167c:	01010374 	movhi	r4,1037
 4011680:	210b9104 	addi	r4,r4,11844
 4011684:	e17ffe17 	ldw	r5,-8(fp)
 4011688:	000d883a 	mov	r6,zero
 401168c:	01c07fc4 	movi	r7,511
 4011690:	40115880 	call	4011588 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4011694:	01010374 	movhi	r4,1037
 4011698:	210b9704 	addi	r4,r4,11868
 401169c:	e17fff17 	ldw	r5,-4(fp)
 40116a0:	01800044 	movi	r6,1
 40116a4:	01c07fc4 	movi	r7,511
 40116a8:	40115880 	call	4011588 <alt_open_fd>
}  
 40116ac:	e037883a 	mov	sp,fp
 40116b0:	dfc00117 	ldw	ra,4(sp)
 40116b4:	df000017 	ldw	fp,0(sp)
 40116b8:	dec00204 	addi	sp,sp,8
 40116bc:	f800283a 	ret

040116c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40116c0:	defffe04 	addi	sp,sp,-8
 40116c4:	dfc00115 	stw	ra,4(sp)
 40116c8:	df000015 	stw	fp,0(sp)
 40116cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40116d0:	00810374 	movhi	r2,1037
 40116d4:	10904704 	addi	r2,r2,16668
 40116d8:	10800017 	ldw	r2,0(r2)
 40116dc:	10000526 	beq	r2,zero,40116f4 <alt_get_errno+0x34>
 40116e0:	00810374 	movhi	r2,1037
 40116e4:	10904704 	addi	r2,r2,16668
 40116e8:	10800017 	ldw	r2,0(r2)
 40116ec:	103ee83a 	callr	r2
 40116f0:	00000206 	br	40116fc <alt_get_errno+0x3c>
 40116f4:	00810374 	movhi	r2,1037
 40116f8:	10905404 	addi	r2,r2,16720
}
 40116fc:	e037883a 	mov	sp,fp
 4011700:	dfc00117 	ldw	ra,4(sp)
 4011704:	df000017 	ldw	fp,0(sp)
 4011708:	dec00204 	addi	sp,sp,8
 401170c:	f800283a 	ret

04011710 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4011710:	defffd04 	addi	sp,sp,-12
 4011714:	df000215 	stw	fp,8(sp)
 4011718:	df000204 	addi	fp,sp,8
 401171c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4011720:	e0bfff17 	ldw	r2,-4(fp)
 4011724:	10800217 	ldw	r2,8(r2)
 4011728:	10d00034 	orhi	r3,r2,16384
 401172c:	e0bfff17 	ldw	r2,-4(fp)
 4011730:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4011734:	e03ffe15 	stw	zero,-8(fp)
 4011738:	00001d06 	br	40117b0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401173c:	00c10374 	movhi	r3,1037
 4011740:	18cb9104 	addi	r3,r3,11844
 4011744:	e0bffe17 	ldw	r2,-8(fp)
 4011748:	10800324 	muli	r2,r2,12
 401174c:	1885883a 	add	r2,r3,r2
 4011750:	10c00017 	ldw	r3,0(r2)
 4011754:	e0bfff17 	ldw	r2,-4(fp)
 4011758:	10800017 	ldw	r2,0(r2)
 401175c:	1880111e 	bne	r3,r2,40117a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4011760:	00c10374 	movhi	r3,1037
 4011764:	18cb9104 	addi	r3,r3,11844
 4011768:	e0bffe17 	ldw	r2,-8(fp)
 401176c:	10800324 	muli	r2,r2,12
 4011770:	1885883a 	add	r2,r3,r2
 4011774:	10800204 	addi	r2,r2,8
 4011778:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401177c:	1000090e 	bge	r2,zero,40117a4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4011780:	e0bffe17 	ldw	r2,-8(fp)
 4011784:	10c00324 	muli	r3,r2,12
 4011788:	00810374 	movhi	r2,1037
 401178c:	108b9104 	addi	r2,r2,11844
 4011790:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4011794:	e0bfff17 	ldw	r2,-4(fp)
 4011798:	18800226 	beq	r3,r2,40117a4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401179c:	00bffcc4 	movi	r2,-13
 40117a0:	00000a06 	br	40117cc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40117a4:	e0bffe17 	ldw	r2,-8(fp)
 40117a8:	10800044 	addi	r2,r2,1
 40117ac:	e0bffe15 	stw	r2,-8(fp)
 40117b0:	00810374 	movhi	r2,1037
 40117b4:	10904604 	addi	r2,r2,16664
 40117b8:	10800017 	ldw	r2,0(r2)
 40117bc:	1007883a 	mov	r3,r2
 40117c0:	e0bffe17 	ldw	r2,-8(fp)
 40117c4:	18bfdd2e 	bgeu	r3,r2,401173c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40117c8:	0005883a 	mov	r2,zero
}
 40117cc:	e037883a 	mov	sp,fp
 40117d0:	df000017 	ldw	fp,0(sp)
 40117d4:	dec00104 	addi	sp,sp,4
 40117d8:	f800283a 	ret

040117dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40117dc:	defff604 	addi	sp,sp,-40
 40117e0:	dfc00915 	stw	ra,36(sp)
 40117e4:	df000815 	stw	fp,32(sp)
 40117e8:	df000804 	addi	fp,sp,32
 40117ec:	e13ffd15 	stw	r4,-12(fp)
 40117f0:	e17ffe15 	stw	r5,-8(fp)
 40117f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40117f8:	00bfffc4 	movi	r2,-1
 40117fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4011800:	00bffb44 	movi	r2,-19
 4011804:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4011808:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401180c:	e13ffd17 	ldw	r4,-12(fp)
 4011810:	01410374 	movhi	r5,1037
 4011814:	29504404 	addi	r5,r5,16656
 4011818:	4011cf40 	call	4011cf4 <alt_find_dev>
 401181c:	e0bff815 	stw	r2,-32(fp)
 4011820:	e0bff817 	ldw	r2,-32(fp)
 4011824:	1000051e 	bne	r2,zero,401183c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4011828:	e13ffd17 	ldw	r4,-12(fp)
 401182c:	4011d840 	call	4011d84 <alt_find_file>
 4011830:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4011834:	00800044 	movi	r2,1
 4011838:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401183c:	e0bff817 	ldw	r2,-32(fp)
 4011840:	10002926 	beq	r2,zero,40118e8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4011844:	e13ff817 	ldw	r4,-32(fp)
 4011848:	4011e980 	call	4011e98 <alt_get_fd>
 401184c:	e0bff915 	stw	r2,-28(fp)
 4011850:	e0bff917 	ldw	r2,-28(fp)
 4011854:	1000030e 	bge	r2,zero,4011864 <open+0x88>
    {
      status = index;
 4011858:	e0bff917 	ldw	r2,-28(fp)
 401185c:	e0bffa15 	stw	r2,-24(fp)
 4011860:	00002306 	br	40118f0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 4011864:	e0bff917 	ldw	r2,-28(fp)
 4011868:	10c00324 	muli	r3,r2,12
 401186c:	00810374 	movhi	r2,1037
 4011870:	108b9104 	addi	r2,r2,11844
 4011874:	1885883a 	add	r2,r3,r2
 4011878:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401187c:	e0fffe17 	ldw	r3,-8(fp)
 4011880:	00900034 	movhi	r2,16384
 4011884:	10bfffc4 	addi	r2,r2,-1
 4011888:	1886703a 	and	r3,r3,r2
 401188c:	e0bffc17 	ldw	r2,-16(fp)
 4011890:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4011894:	e0bffb17 	ldw	r2,-20(fp)
 4011898:	1000051e 	bne	r2,zero,40118b0 <open+0xd4>
 401189c:	e13ffc17 	ldw	r4,-16(fp)
 40118a0:	40117100 	call	4011710 <alt_file_locked>
 40118a4:	e0bffa15 	stw	r2,-24(fp)
 40118a8:	e0bffa17 	ldw	r2,-24(fp)
 40118ac:	10001016 	blt	r2,zero,40118f0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40118b0:	e0bff817 	ldw	r2,-32(fp)
 40118b4:	10800317 	ldw	r2,12(r2)
 40118b8:	10000826 	beq	r2,zero,40118dc <open+0x100>
 40118bc:	e0bff817 	ldw	r2,-32(fp)
 40118c0:	10800317 	ldw	r2,12(r2)
 40118c4:	e13ffc17 	ldw	r4,-16(fp)
 40118c8:	e17ffd17 	ldw	r5,-12(fp)
 40118cc:	e1bffe17 	ldw	r6,-8(fp)
 40118d0:	e1ffff17 	ldw	r7,-4(fp)
 40118d4:	103ee83a 	callr	r2
 40118d8:	00000106 	br	40118e0 <open+0x104>
 40118dc:	0005883a 	mov	r2,zero
 40118e0:	e0bffa15 	stw	r2,-24(fp)
 40118e4:	00000206 	br	40118f0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40118e8:	00bffb44 	movi	r2,-19
 40118ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40118f0:	e0bffa17 	ldw	r2,-24(fp)
 40118f4:	1000080e 	bge	r2,zero,4011918 <open+0x13c>
  {
    alt_release_fd (index);  
 40118f8:	e13ff917 	ldw	r4,-28(fp)
 40118fc:	400f0a80 	call	400f0a8 <alt_release_fd>
    ALT_ERRNO = -status;
 4011900:	40116c00 	call	40116c0 <alt_get_errno>
 4011904:	e0fffa17 	ldw	r3,-24(fp)
 4011908:	00c7c83a 	sub	r3,zero,r3
 401190c:	10c00015 	stw	r3,0(r2)
    return -1;
 4011910:	00bfffc4 	movi	r2,-1
 4011914:	00000106 	br	401191c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4011918:	e0bff917 	ldw	r2,-28(fp)
}
 401191c:	e037883a 	mov	sp,fp
 4011920:	dfc00117 	ldw	ra,4(sp)
 4011924:	df000017 	ldw	fp,0(sp)
 4011928:	dec00204 	addi	sp,sp,8
 401192c:	f800283a 	ret

04011930 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4011930:	defffa04 	addi	sp,sp,-24
 4011934:	df000515 	stw	fp,20(sp)
 4011938:	df000504 	addi	fp,sp,20
 401193c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011940:	0005303a 	rdctl	r2,status
 4011944:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011948:	e0fffc17 	ldw	r3,-16(fp)
 401194c:	00bfff84 	movi	r2,-2
 4011950:	1884703a 	and	r2,r3,r2
 4011954:	1001703a 	wrctl	status,r2
  
  return context;
 4011958:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401195c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4011960:	e0bfff17 	ldw	r2,-4(fp)
 4011964:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4011968:	e0bffd17 	ldw	r2,-12(fp)
 401196c:	10800017 	ldw	r2,0(r2)
 4011970:	e0fffd17 	ldw	r3,-12(fp)
 4011974:	18c00117 	ldw	r3,4(r3)
 4011978:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401197c:	e0bffd17 	ldw	r2,-12(fp)
 4011980:	10800117 	ldw	r2,4(r2)
 4011984:	e0fffd17 	ldw	r3,-12(fp)
 4011988:	18c00017 	ldw	r3,0(r3)
 401198c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4011990:	e0bffd17 	ldw	r2,-12(fp)
 4011994:	e0fffd17 	ldw	r3,-12(fp)
 4011998:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401199c:	e0bffd17 	ldw	r2,-12(fp)
 40119a0:	e0fffd17 	ldw	r3,-12(fp)
 40119a4:	10c00015 	stw	r3,0(r2)
 40119a8:	e0bffb17 	ldw	r2,-20(fp)
 40119ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40119b0:	e0bffe17 	ldw	r2,-8(fp)
 40119b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40119b8:	e037883a 	mov	sp,fp
 40119bc:	df000017 	ldw	fp,0(sp)
 40119c0:	dec00104 	addi	sp,sp,4
 40119c4:	f800283a 	ret

040119c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40119c8:	defffb04 	addi	sp,sp,-20
 40119cc:	dfc00415 	stw	ra,16(sp)
 40119d0:	df000315 	stw	fp,12(sp)
 40119d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40119d8:	d0a01117 	ldw	r2,-32700(gp)
 40119dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40119e0:	d0a01f17 	ldw	r2,-32644(gp)
 40119e4:	10800044 	addi	r2,r2,1
 40119e8:	d0a01f15 	stw	r2,-32644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40119ec:	00002e06 	br	4011aa8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40119f0:	e0bffd17 	ldw	r2,-12(fp)
 40119f4:	10800017 	ldw	r2,0(r2)
 40119f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40119fc:	e0bffd17 	ldw	r2,-12(fp)
 4011a00:	10800403 	ldbu	r2,16(r2)
 4011a04:	10803fcc 	andi	r2,r2,255
 4011a08:	10000426 	beq	r2,zero,4011a1c <alt_tick+0x54>
 4011a0c:	d0a01f17 	ldw	r2,-32644(gp)
 4011a10:	1000021e 	bne	r2,zero,4011a1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4011a14:	e0bffd17 	ldw	r2,-12(fp)
 4011a18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4011a1c:	e0bffd17 	ldw	r2,-12(fp)
 4011a20:	10800217 	ldw	r2,8(r2)
 4011a24:	d0e01f17 	ldw	r3,-32644(gp)
 4011a28:	18801d36 	bltu	r3,r2,4011aa0 <alt_tick+0xd8>
 4011a2c:	e0bffd17 	ldw	r2,-12(fp)
 4011a30:	10800403 	ldbu	r2,16(r2)
 4011a34:	10803fcc 	andi	r2,r2,255
 4011a38:	1000191e 	bne	r2,zero,4011aa0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4011a3c:	e0bffd17 	ldw	r2,-12(fp)
 4011a40:	10c00317 	ldw	r3,12(r2)
 4011a44:	e0bffd17 	ldw	r2,-12(fp)
 4011a48:	10800517 	ldw	r2,20(r2)
 4011a4c:	1009883a 	mov	r4,r2
 4011a50:	183ee83a 	callr	r3
 4011a54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4011a58:	e0bfff17 	ldw	r2,-4(fp)
 4011a5c:	1000031e 	bne	r2,zero,4011a6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4011a60:	e13ffd17 	ldw	r4,-12(fp)
 4011a64:	40119300 	call	4011930 <alt_alarm_stop>
 4011a68:	00000d06 	br	4011aa0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4011a6c:	e0bffd17 	ldw	r2,-12(fp)
 4011a70:	10c00217 	ldw	r3,8(r2)
 4011a74:	e0bfff17 	ldw	r2,-4(fp)
 4011a78:	1887883a 	add	r3,r3,r2
 4011a7c:	e0bffd17 	ldw	r2,-12(fp)
 4011a80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4011a84:	e0bffd17 	ldw	r2,-12(fp)
 4011a88:	10c00217 	ldw	r3,8(r2)
 4011a8c:	d0a01f17 	ldw	r2,-32644(gp)
 4011a90:	1880032e 	bgeu	r3,r2,4011aa0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4011a94:	e0bffd17 	ldw	r2,-12(fp)
 4011a98:	00c00044 	movi	r3,1
 4011a9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4011aa0:	e0bffe17 	ldw	r2,-8(fp)
 4011aa4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4011aa8:	e0fffd17 	ldw	r3,-12(fp)
 4011aac:	d0a01104 	addi	r2,gp,-32700
 4011ab0:	18bfcf1e 	bne	r3,r2,40119f0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4011ab4:	0001883a 	nop
}
 4011ab8:	e037883a 	mov	sp,fp
 4011abc:	dfc00117 	ldw	ra,4(sp)
 4011ac0:	df000017 	ldw	fp,0(sp)
 4011ac4:	dec00204 	addi	sp,sp,8
 4011ac8:	f800283a 	ret

04011acc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 4011acc:	deffff04 	addi	sp,sp,-4
 4011ad0:	df000015 	stw	fp,0(sp)
 4011ad4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4011ad8:	000170fa 	wrctl	ienable,zero
}
 4011adc:	e037883a 	mov	sp,fp
 4011ae0:	df000017 	ldw	fp,0(sp)
 4011ae4:	dec00104 	addi	sp,sp,4
 4011ae8:	f800283a 	ret

04011aec <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4011aec:	defff404 	addi	sp,sp,-48
 4011af0:	df000b15 	stw	fp,44(sp)
 4011af4:	df000b04 	addi	fp,sp,44
 4011af8:	e13ffc15 	stw	r4,-16(fp)
 4011afc:	e17ffd15 	stw	r5,-12(fp)
 4011b00:	e1bffe15 	stw	r6,-8(fp)
 4011b04:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4011b08:	e0ffff17 	ldw	r3,-4(fp)
 4011b0c:	e0bffe17 	ldw	r2,-8(fp)
 4011b10:	1885883a 	add	r2,r3,r2
 4011b14:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4011b18:	e0c00217 	ldw	r3,8(fp)
 4011b1c:	e0800117 	ldw	r2,4(fp)
 4011b20:	1885883a 	add	r2,r3,r2
 4011b24:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4011b28:	e0800117 	ldw	r2,4(fp)
 4011b2c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4011b30:	e0bffe17 	ldw	r2,-8(fp)
 4011b34:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4011b38:	00800044 	movi	r2,1
 4011b3c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4011b40:	e0bffc17 	ldw	r2,-16(fp)
 4011b44:	10800504 	addi	r2,r2,20
 4011b48:	e0fffd17 	ldw	r3,-12(fp)
 4011b4c:	01000044 	movi	r4,1
 4011b50:	20c6983a 	sll	r3,r4,r3
 4011b54:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4011b58:	e0800317 	ldw	r2,12(fp)
 4011b5c:	1080008c 	andi	r2,r2,2
 4011b60:	1000041e 	bne	r2,zero,4011b74 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4011b64:	e0bffc17 	ldw	r2,-16(fp)
 4011b68:	10800304 	addi	r2,r2,12
 4011b6c:	00c10004 	movi	r3,1024
 4011b70:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4011b74:	e0bffc17 	ldw	r2,-16(fp)
 4011b78:	10800037 	ldwio	r2,0(r2)
 4011b7c:	00000106 	br	4011b84 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 4011b80:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4011b84:	e0bffc17 	ldw	r2,-16(fp)
 4011b88:	10800204 	addi	r2,r2,8
 4011b8c:	10800037 	ldwio	r2,0(r2)
 4011b90:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4011b94:	e0bffa17 	ldw	r2,-24(fp)
 4011b98:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4011b9c:	10000226 	beq	r2,zero,4011ba8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4011ba0:	e0bff717 	ldw	r2,-36(fp)
 4011ba4:	1000031e 	bne	r2,zero,4011bb4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4011ba8:	e0bffa17 	ldw	r2,-24(fp)
 4011bac:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4011bb0:	103ff426 	beq	r2,zero,4011b84 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4011bb4:	e0bffa17 	ldw	r2,-24(fp)
 4011bb8:	1080100c 	andi	r2,r2,64
 4011bbc:	10001e26 	beq	r2,zero,4011c38 <alt_avalon_spi_command+0x14c>
 4011bc0:	e0bff717 	ldw	r2,-36(fp)
 4011bc4:	00801c0e 	bge	zero,r2,4011c38 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4011bc8:	e0bff717 	ldw	r2,-36(fp)
 4011bcc:	10bfffc4 	addi	r2,r2,-1
 4011bd0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4011bd4:	e0ffff17 	ldw	r3,-4(fp)
 4011bd8:	e0bff817 	ldw	r2,-32(fp)
 4011bdc:	18800a2e 	bgeu	r3,r2,4011c08 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4011be0:	e0bffc17 	ldw	r2,-16(fp)
 4011be4:	10800104 	addi	r2,r2,4
 4011be8:	e0ffff17 	ldw	r3,-4(fp)
 4011bec:	18c00003 	ldbu	r3,0(r3)
 4011bf0:	18c03fcc 	andi	r3,r3,255
 4011bf4:	e13fff17 	ldw	r4,-4(fp)
 4011bf8:	21000044 	addi	r4,r4,1
 4011bfc:	e13fff15 	stw	r4,-4(fp)
 4011c00:	10c00035 	stwio	r3,0(r2)
 4011c04:	00000c06 	br	4011c38 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4011c08:	e0bff517 	ldw	r2,-44(fp)
 4011c0c:	10000826 	beq	r2,zero,4011c30 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4011c10:	e0bff517 	ldw	r2,-44(fp)
 4011c14:	10bfffc4 	addi	r2,r2,-1
 4011c18:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4011c1c:	e0bffc17 	ldw	r2,-16(fp)
 4011c20:	10800104 	addi	r2,r2,4
 4011c24:	0007883a 	mov	r3,zero
 4011c28:	10c00035 	stwio	r3,0(r2)
 4011c2c:	00000206 	br	4011c38 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4011c30:	00bf0004 	movi	r2,-1024
 4011c34:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4011c38:	e0bffa17 	ldw	r2,-24(fp)
 4011c3c:	1080200c 	andi	r2,r2,128
 4011c40:	103fcf26 	beq	r2,zero,4011b80 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4011c44:	e0bffc17 	ldw	r2,-16(fp)
 4011c48:	10800037 	ldwio	r2,0(r2)
 4011c4c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4011c50:	e0bff617 	ldw	r2,-40(fp)
 4011c54:	10000426 	beq	r2,zero,4011c68 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4011c58:	e0bff617 	ldw	r2,-40(fp)
 4011c5c:	10bfffc4 	addi	r2,r2,-1
 4011c60:	e0bff615 	stw	r2,-40(fp)
 4011c64:	00000706 	br	4011c84 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 4011c68:	e0bffb17 	ldw	r2,-20(fp)
 4011c6c:	1007883a 	mov	r3,r2
 4011c70:	e0800217 	ldw	r2,8(fp)
 4011c74:	10c00005 	stb	r3,0(r2)
 4011c78:	e0800217 	ldw	r2,8(fp)
 4011c7c:	10800044 	addi	r2,r2,1
 4011c80:	e0800215 	stw	r2,8(fp)
      credits++;
 4011c84:	e0bff717 	ldw	r2,-36(fp)
 4011c88:	10800044 	addi	r2,r2,1
 4011c8c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4011c90:	e0bff617 	ldw	r2,-40(fp)
 4011c94:	103fba1e 	bne	r2,zero,4011b80 <alt_avalon_spi_command+0x94>
 4011c98:	e0c00217 	ldw	r3,8(fp)
 4011c9c:	e0bff917 	ldw	r2,-28(fp)
 4011ca0:	18bfb71e 	bne	r3,r2,4011b80 <alt_avalon_spi_command+0x94>
        break;
 4011ca4:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4011ca8:	e0bffc17 	ldw	r2,-16(fp)
 4011cac:	10800204 	addi	r2,r2,8
 4011cb0:	10800037 	ldwio	r2,0(r2)
 4011cb4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4011cb8:	e0bffa17 	ldw	r2,-24(fp)
 4011cbc:	1080080c 	andi	r2,r2,32
 4011cc0:	103ff926 	beq	r2,zero,4011ca8 <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4011cc4:	e0800317 	ldw	r2,12(fp)
 4011cc8:	1080004c 	andi	r2,r2,1
 4011ccc:	1000041e 	bne	r2,zero,4011ce0 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4011cd0:	e0bffc17 	ldw	r2,-16(fp)
 4011cd4:	10800304 	addi	r2,r2,12
 4011cd8:	0007883a 	mov	r3,zero
 4011cdc:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4011ce0:	e0800117 	ldw	r2,4(fp)
}
 4011ce4:	e037883a 	mov	sp,fp
 4011ce8:	df000017 	ldw	fp,0(sp)
 4011cec:	dec00104 	addi	sp,sp,4
 4011cf0:	f800283a 	ret

04011cf4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4011cf4:	defffa04 	addi	sp,sp,-24
 4011cf8:	dfc00515 	stw	ra,20(sp)
 4011cfc:	df000415 	stw	fp,16(sp)
 4011d00:	df000404 	addi	fp,sp,16
 4011d04:	e13ffe15 	stw	r4,-8(fp)
 4011d08:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4011d0c:	e0bfff17 	ldw	r2,-4(fp)
 4011d10:	10800017 	ldw	r2,0(r2)
 4011d14:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4011d18:	e13ffe17 	ldw	r4,-8(fp)
 4011d1c:	40067140 	call	4006714 <strlen>
 4011d20:	10800044 	addi	r2,r2,1
 4011d24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4011d28:	00000d06 	br	4011d60 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4011d2c:	e0bffc17 	ldw	r2,-16(fp)
 4011d30:	10c00217 	ldw	r3,8(r2)
 4011d34:	e0bffd17 	ldw	r2,-12(fp)
 4011d38:	1809883a 	mov	r4,r3
 4011d3c:	e17ffe17 	ldw	r5,-8(fp)
 4011d40:	100d883a 	mov	r6,r2
 4011d44:	4011f980 	call	4011f98 <memcmp>
 4011d48:	1000021e 	bne	r2,zero,4011d54 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4011d4c:	e0bffc17 	ldw	r2,-16(fp)
 4011d50:	00000706 	br	4011d70 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4011d54:	e0bffc17 	ldw	r2,-16(fp)
 4011d58:	10800017 	ldw	r2,0(r2)
 4011d5c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4011d60:	e0fffc17 	ldw	r3,-16(fp)
 4011d64:	e0bfff17 	ldw	r2,-4(fp)
 4011d68:	18bff01e 	bne	r3,r2,4011d2c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4011d6c:	0005883a 	mov	r2,zero
}
 4011d70:	e037883a 	mov	sp,fp
 4011d74:	dfc00117 	ldw	ra,4(sp)
 4011d78:	df000017 	ldw	fp,0(sp)
 4011d7c:	dec00204 	addi	sp,sp,8
 4011d80:	f800283a 	ret

04011d84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4011d84:	defffb04 	addi	sp,sp,-20
 4011d88:	dfc00415 	stw	ra,16(sp)
 4011d8c:	df000315 	stw	fp,12(sp)
 4011d90:	df000304 	addi	fp,sp,12
 4011d94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4011d98:	00810374 	movhi	r2,1037
 4011d9c:	10904204 	addi	r2,r2,16648
 4011da0:	10800017 	ldw	r2,0(r2)
 4011da4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4011da8:	00003106 	br	4011e70 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 4011dac:	e0bffd17 	ldw	r2,-12(fp)
 4011db0:	10800217 	ldw	r2,8(r2)
 4011db4:	1009883a 	mov	r4,r2
 4011db8:	40067140 	call	4006714 <strlen>
 4011dbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4011dc0:	e0bffd17 	ldw	r2,-12(fp)
 4011dc4:	10c00217 	ldw	r3,8(r2)
 4011dc8:	e0bffe17 	ldw	r2,-8(fp)
 4011dcc:	10bfffc4 	addi	r2,r2,-1
 4011dd0:	1885883a 	add	r2,r3,r2
 4011dd4:	10800003 	ldbu	r2,0(r2)
 4011dd8:	10803fcc 	andi	r2,r2,255
 4011ddc:	1080201c 	xori	r2,r2,128
 4011de0:	10bfe004 	addi	r2,r2,-128
 4011de4:	10800bd8 	cmpnei	r2,r2,47
 4011de8:	1000031e 	bne	r2,zero,4011df8 <alt_find_file+0x74>
    {
      len -= 1;
 4011dec:	e0bffe17 	ldw	r2,-8(fp)
 4011df0:	10bfffc4 	addi	r2,r2,-1
 4011df4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4011df8:	e0bffe17 	ldw	r2,-8(fp)
 4011dfc:	e0ffff17 	ldw	r3,-4(fp)
 4011e00:	1885883a 	add	r2,r3,r2
 4011e04:	10800003 	ldbu	r2,0(r2)
 4011e08:	10803fcc 	andi	r2,r2,255
 4011e0c:	1080201c 	xori	r2,r2,128
 4011e10:	10bfe004 	addi	r2,r2,-128
 4011e14:	10800be0 	cmpeqi	r2,r2,47
 4011e18:	1000081e 	bne	r2,zero,4011e3c <alt_find_file+0xb8>
 4011e1c:	e0bffe17 	ldw	r2,-8(fp)
 4011e20:	e0ffff17 	ldw	r3,-4(fp)
 4011e24:	1885883a 	add	r2,r3,r2
 4011e28:	10800003 	ldbu	r2,0(r2)
 4011e2c:	10803fcc 	andi	r2,r2,255
 4011e30:	1080201c 	xori	r2,r2,128
 4011e34:	10bfe004 	addi	r2,r2,-128
 4011e38:	10000a1e 	bne	r2,zero,4011e64 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 4011e3c:	e0bffd17 	ldw	r2,-12(fp)
 4011e40:	10c00217 	ldw	r3,8(r2)
 4011e44:	e0bffe17 	ldw	r2,-8(fp)
 4011e48:	1809883a 	mov	r4,r3
 4011e4c:	e17fff17 	ldw	r5,-4(fp)
 4011e50:	100d883a 	mov	r6,r2
 4011e54:	4011f980 	call	4011f98 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4011e58:	1000021e 	bne	r2,zero,4011e64 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4011e5c:	e0bffd17 	ldw	r2,-12(fp)
 4011e60:	00000806 	br	4011e84 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 4011e64:	e0bffd17 	ldw	r2,-12(fp)
 4011e68:	10800017 	ldw	r2,0(r2)
 4011e6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4011e70:	e0fffd17 	ldw	r3,-12(fp)
 4011e74:	00810374 	movhi	r2,1037
 4011e78:	10904204 	addi	r2,r2,16648
 4011e7c:	18bfcb1e 	bne	r3,r2,4011dac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4011e80:	0005883a 	mov	r2,zero
}
 4011e84:	e037883a 	mov	sp,fp
 4011e88:	dfc00117 	ldw	ra,4(sp)
 4011e8c:	df000017 	ldw	fp,0(sp)
 4011e90:	dec00204 	addi	sp,sp,8
 4011e94:	f800283a 	ret

04011e98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4011e98:	defffc04 	addi	sp,sp,-16
 4011e9c:	df000315 	stw	fp,12(sp)
 4011ea0:	df000304 	addi	fp,sp,12
 4011ea4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4011ea8:	00bffa04 	movi	r2,-24
 4011eac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4011eb0:	e03ffd15 	stw	zero,-12(fp)
 4011eb4:	00001d06 	br	4011f2c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 4011eb8:	00c10374 	movhi	r3,1037
 4011ebc:	18cb9104 	addi	r3,r3,11844
 4011ec0:	e0bffd17 	ldw	r2,-12(fp)
 4011ec4:	10800324 	muli	r2,r2,12
 4011ec8:	1885883a 	add	r2,r3,r2
 4011ecc:	10800017 	ldw	r2,0(r2)
 4011ed0:	1000131e 	bne	r2,zero,4011f20 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 4011ed4:	00c10374 	movhi	r3,1037
 4011ed8:	18cb9104 	addi	r3,r3,11844
 4011edc:	e0bffd17 	ldw	r2,-12(fp)
 4011ee0:	10800324 	muli	r2,r2,12
 4011ee4:	1885883a 	add	r2,r3,r2
 4011ee8:	e0ffff17 	ldw	r3,-4(fp)
 4011eec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4011ef0:	00810374 	movhi	r2,1037
 4011ef4:	10904604 	addi	r2,r2,16664
 4011ef8:	10c00017 	ldw	r3,0(r2)
 4011efc:	e0bffd17 	ldw	r2,-12(fp)
 4011f00:	1880040e 	bge	r3,r2,4011f14 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 4011f04:	00810374 	movhi	r2,1037
 4011f08:	10904604 	addi	r2,r2,16664
 4011f0c:	e0fffd17 	ldw	r3,-12(fp)
 4011f10:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 4011f14:	e0bffd17 	ldw	r2,-12(fp)
 4011f18:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4011f1c:	00000606 	br	4011f38 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4011f20:	e0bffd17 	ldw	r2,-12(fp)
 4011f24:	10800044 	addi	r2,r2,1
 4011f28:	e0bffd15 	stw	r2,-12(fp)
 4011f2c:	e0bffd17 	ldw	r2,-12(fp)
 4011f30:	10800810 	cmplti	r2,r2,32
 4011f34:	103fe01e 	bne	r2,zero,4011eb8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4011f38:	e0bffe17 	ldw	r2,-8(fp)
}
 4011f3c:	e037883a 	mov	sp,fp
 4011f40:	df000017 	ldw	fp,0(sp)
 4011f44:	dec00104 	addi	sp,sp,4
 4011f48:	f800283a 	ret

04011f4c <atexit>:
 4011f4c:	200b883a 	mov	r5,r4
 4011f50:	000d883a 	mov	r6,zero
 4011f54:	0009883a 	mov	r4,zero
 4011f58:	000f883a 	mov	r7,zero
 4011f5c:	40120141 	jmpi	4012014 <__register_exitproc>

04011f60 <exit>:
 4011f60:	defffe04 	addi	sp,sp,-8
 4011f64:	000b883a 	mov	r5,zero
 4011f68:	dc000015 	stw	r16,0(sp)
 4011f6c:	dfc00115 	stw	ra,4(sp)
 4011f70:	2021883a 	mov	r16,r4
 4011f74:	40121440 	call	4012144 <__call_exitprocs>
 4011f78:	00810374 	movhi	r2,1037
 4011f7c:	10903d04 	addi	r2,r2,16628
 4011f80:	11000017 	ldw	r4,0(r2)
 4011f84:	20800f17 	ldw	r2,60(r4)
 4011f88:	10000126 	beq	r2,zero,4011f90 <exit+0x30>
 4011f8c:	103ee83a 	callr	r2
 4011f90:	8009883a 	mov	r4,r16
 4011f94:	40122e40 	call	40122e4 <_exit>

04011f98 <memcmp>:
 4011f98:	01c000c4 	movi	r7,3
 4011f9c:	3980192e 	bgeu	r7,r6,4012004 <memcmp+0x6c>
 4011fa0:	2904b03a 	or	r2,r5,r4
 4011fa4:	11c4703a 	and	r2,r2,r7
 4011fa8:	10000f26 	beq	r2,zero,4011fe8 <memcmp+0x50>
 4011fac:	20c00003 	ldbu	r3,0(r4)
 4011fb0:	28800003 	ldbu	r2,0(r5)
 4011fb4:	1880151e 	bne	r3,r2,401200c <memcmp+0x74>
 4011fb8:	31bfff84 	addi	r6,r6,-2
 4011fbc:	01ffffc4 	movi	r7,-1
 4011fc0:	00000406 	br	4011fd4 <memcmp+0x3c>
 4011fc4:	20c00003 	ldbu	r3,0(r4)
 4011fc8:	28800003 	ldbu	r2,0(r5)
 4011fcc:	31bfffc4 	addi	r6,r6,-1
 4011fd0:	18800e1e 	bne	r3,r2,401200c <memcmp+0x74>
 4011fd4:	21000044 	addi	r4,r4,1
 4011fd8:	29400044 	addi	r5,r5,1
 4011fdc:	31fff91e 	bne	r6,r7,4011fc4 <memcmp+0x2c>
 4011fe0:	0005883a 	mov	r2,zero
 4011fe4:	f800283a 	ret
 4011fe8:	20c00017 	ldw	r3,0(r4)
 4011fec:	28800017 	ldw	r2,0(r5)
 4011ff0:	1880041e 	bne	r3,r2,4012004 <memcmp+0x6c>
 4011ff4:	31bfff04 	addi	r6,r6,-4
 4011ff8:	21000104 	addi	r4,r4,4
 4011ffc:	29400104 	addi	r5,r5,4
 4012000:	39bff936 	bltu	r7,r6,4011fe8 <memcmp+0x50>
 4012004:	303fe91e 	bne	r6,zero,4011fac <memcmp+0x14>
 4012008:	003ff506 	br	4011fe0 <memcmp+0x48>
 401200c:	1885c83a 	sub	r2,r3,r2
 4012010:	f800283a 	ret

04012014 <__register_exitproc>:
 4012014:	defffa04 	addi	sp,sp,-24
 4012018:	00810374 	movhi	r2,1037
 401201c:	10903d04 	addi	r2,r2,16628
 4012020:	dc000315 	stw	r16,12(sp)
 4012024:	14000017 	ldw	r16,0(r2)
 4012028:	dc400415 	stw	r17,16(sp)
 401202c:	dfc00515 	stw	ra,20(sp)
 4012030:	80805217 	ldw	r2,328(r16)
 4012034:	2023883a 	mov	r17,r4
 4012038:	10003e26 	beq	r2,zero,4012134 <__register_exitproc+0x120>
 401203c:	10c00117 	ldw	r3,4(r2)
 4012040:	020007c4 	movi	r8,31
 4012044:	40c0180e 	bge	r8,r3,40120a8 <__register_exitproc+0x94>
 4012048:	00800034 	movhi	r2,0
 401204c:	10800004 	addi	r2,r2,0
 4012050:	1000061e 	bne	r2,zero,401206c <__register_exitproc+0x58>
 4012054:	00bfffc4 	movi	r2,-1
 4012058:	dfc00517 	ldw	ra,20(sp)
 401205c:	dc400417 	ldw	r17,16(sp)
 4012060:	dc000317 	ldw	r16,12(sp)
 4012064:	dec00604 	addi	sp,sp,24
 4012068:	f800283a 	ret
 401206c:	01006404 	movi	r4,400
 4012070:	d9400015 	stw	r5,0(sp)
 4012074:	d9800115 	stw	r6,4(sp)
 4012078:	d9c00215 	stw	r7,8(sp)
 401207c:	00000000 	call	0 <__reset>
 4012080:	d9400017 	ldw	r5,0(sp)
 4012084:	d9800117 	ldw	r6,4(sp)
 4012088:	d9c00217 	ldw	r7,8(sp)
 401208c:	103ff126 	beq	r2,zero,4012054 <__register_exitproc+0x40>
 4012090:	80c05217 	ldw	r3,328(r16)
 4012094:	10000115 	stw	zero,4(r2)
 4012098:	10c00015 	stw	r3,0(r2)
 401209c:	80805215 	stw	r2,328(r16)
 40120a0:	10006215 	stw	zero,392(r2)
 40120a4:	10006315 	stw	zero,396(r2)
 40120a8:	10c00117 	ldw	r3,4(r2)
 40120ac:	88000d1e 	bne	r17,zero,40120e4 <__register_exitproc+0xd0>
 40120b0:	19000084 	addi	r4,r3,2
 40120b4:	2109883a 	add	r4,r4,r4
 40120b8:	18c00044 	addi	r3,r3,1
 40120bc:	2109883a 	add	r4,r4,r4
 40120c0:	1109883a 	add	r4,r2,r4
 40120c4:	10c00115 	stw	r3,4(r2)
 40120c8:	0005883a 	mov	r2,zero
 40120cc:	21400015 	stw	r5,0(r4)
 40120d0:	dfc00517 	ldw	ra,20(sp)
 40120d4:	dc400417 	ldw	r17,16(sp)
 40120d8:	dc000317 	ldw	r16,12(sp)
 40120dc:	dec00604 	addi	sp,sp,24
 40120e0:	f800283a 	ret
 40120e4:	02400044 	movi	r9,1
 40120e8:	12806217 	ldw	r10,392(r2)
 40120ec:	48d2983a 	sll	r9,r9,r3
 40120f0:	19000804 	addi	r4,r3,32
 40120f4:	18d1883a 	add	r8,r3,r3
 40120f8:	2109883a 	add	r4,r4,r4
 40120fc:	4211883a 	add	r8,r8,r8
 4012100:	2109883a 	add	r4,r4,r4
 4012104:	1109883a 	add	r4,r2,r4
 4012108:	1211883a 	add	r8,r2,r8
 401210c:	5254b03a 	or	r10,r10,r9
 4012110:	21c02215 	stw	r7,136(r4)
 4012114:	41802215 	stw	r6,136(r8)
 4012118:	12806215 	stw	r10,392(r2)
 401211c:	01000084 	movi	r4,2
 4012120:	893fe31e 	bne	r17,r4,40120b0 <__register_exitproc+0x9c>
 4012124:	11006317 	ldw	r4,396(r2)
 4012128:	2252b03a 	or	r9,r4,r9
 401212c:	12406315 	stw	r9,396(r2)
 4012130:	003fdf06 	br	40120b0 <__register_exitproc+0x9c>
 4012134:	00810374 	movhi	r2,1037
 4012138:	1090ac04 	addi	r2,r2,17072
 401213c:	80805215 	stw	r2,328(r16)
 4012140:	003fbe06 	br	401203c <__register_exitproc+0x28>

04012144 <__call_exitprocs>:
 4012144:	00810374 	movhi	r2,1037
 4012148:	10903d04 	addi	r2,r2,16628
 401214c:	10800017 	ldw	r2,0(r2)
 4012150:	defff304 	addi	sp,sp,-52
 4012154:	df000b15 	stw	fp,44(sp)
 4012158:	d8800015 	stw	r2,0(sp)
 401215c:	10805204 	addi	r2,r2,328
 4012160:	dd400815 	stw	r21,32(sp)
 4012164:	dfc00c15 	stw	ra,48(sp)
 4012168:	ddc00a15 	stw	r23,40(sp)
 401216c:	dd800915 	stw	r22,36(sp)
 4012170:	dd000715 	stw	r20,28(sp)
 4012174:	dcc00615 	stw	r19,24(sp)
 4012178:	dc800515 	stw	r18,20(sp)
 401217c:	dc400415 	stw	r17,16(sp)
 4012180:	dc000315 	stw	r16,12(sp)
 4012184:	d9000115 	stw	r4,4(sp)
 4012188:	2839883a 	mov	fp,r5
 401218c:	d8800215 	stw	r2,8(sp)
 4012190:	057fffc4 	movi	r21,-1
 4012194:	d8800017 	ldw	r2,0(sp)
 4012198:	ddc00217 	ldw	r23,8(sp)
 401219c:	14805217 	ldw	r18,328(r2)
 40121a0:	90001726 	beq	r18,zero,4012200 <__call_exitprocs+0xbc>
 40121a4:	94400117 	ldw	r17,4(r18)
 40121a8:	8c3fffc4 	addi	r16,r17,-1
 40121ac:	80001116 	blt	r16,zero,40121f4 <__call_exitprocs+0xb0>
 40121b0:	8c400044 	addi	r17,r17,1
 40121b4:	8427883a 	add	r19,r16,r16
 40121b8:	8c63883a 	add	r17,r17,r17
 40121bc:	95802204 	addi	r22,r18,136
 40121c0:	9ce7883a 	add	r19,r19,r19
 40121c4:	8c63883a 	add	r17,r17,r17
 40121c8:	b4e7883a 	add	r19,r22,r19
 40121cc:	9463883a 	add	r17,r18,r17
 40121d0:	e0001726 	beq	fp,zero,4012230 <__call_exitprocs+0xec>
 40121d4:	8c87c83a 	sub	r3,r17,r18
 40121d8:	b0c7883a 	add	r3,r22,r3
 40121dc:	18c01e17 	ldw	r3,120(r3)
 40121e0:	1f001326 	beq	r3,fp,4012230 <__call_exitprocs+0xec>
 40121e4:	843fffc4 	addi	r16,r16,-1
 40121e8:	9cffff04 	addi	r19,r19,-4
 40121ec:	8c7fff04 	addi	r17,r17,-4
 40121f0:	857ff71e 	bne	r16,r21,40121d0 <__call_exitprocs+0x8c>
 40121f4:	00800034 	movhi	r2,0
 40121f8:	10800004 	addi	r2,r2,0
 40121fc:	10002a1e 	bne	r2,zero,40122a8 <__call_exitprocs+0x164>
 4012200:	dfc00c17 	ldw	ra,48(sp)
 4012204:	df000b17 	ldw	fp,44(sp)
 4012208:	ddc00a17 	ldw	r23,40(sp)
 401220c:	dd800917 	ldw	r22,36(sp)
 4012210:	dd400817 	ldw	r21,32(sp)
 4012214:	dd000717 	ldw	r20,28(sp)
 4012218:	dcc00617 	ldw	r19,24(sp)
 401221c:	dc800517 	ldw	r18,20(sp)
 4012220:	dc400417 	ldw	r17,16(sp)
 4012224:	dc000317 	ldw	r16,12(sp)
 4012228:	dec00d04 	addi	sp,sp,52
 401222c:	f800283a 	ret
 4012230:	91000117 	ldw	r4,4(r18)
 4012234:	88c00017 	ldw	r3,0(r17)
 4012238:	213fffc4 	addi	r4,r4,-1
 401223c:	24001526 	beq	r4,r16,4012294 <__call_exitprocs+0x150>
 4012240:	88000015 	stw	zero,0(r17)
 4012244:	183fe726 	beq	r3,zero,40121e4 <__call_exitprocs+0xa0>
 4012248:	00800044 	movi	r2,1
 401224c:	1408983a 	sll	r4,r2,r16
 4012250:	91406217 	ldw	r5,392(r18)
 4012254:	95000117 	ldw	r20,4(r18)
 4012258:	214a703a 	and	r5,r4,r5
 401225c:	28000b26 	beq	r5,zero,401228c <__call_exitprocs+0x148>
 4012260:	91406317 	ldw	r5,396(r18)
 4012264:	2148703a 	and	r4,r4,r5
 4012268:	20000c1e 	bne	r4,zero,401229c <__call_exitprocs+0x158>
 401226c:	99400017 	ldw	r5,0(r19)
 4012270:	d9000117 	ldw	r4,4(sp)
 4012274:	183ee83a 	callr	r3
 4012278:	90c00117 	ldw	r3,4(r18)
 401227c:	1d3fc51e 	bne	r3,r20,4012194 <__call_exitprocs+0x50>
 4012280:	b8c00017 	ldw	r3,0(r23)
 4012284:	1cbfd726 	beq	r3,r18,40121e4 <__call_exitprocs+0xa0>
 4012288:	003fc206 	br	4012194 <__call_exitprocs+0x50>
 401228c:	183ee83a 	callr	r3
 4012290:	003ff906 	br	4012278 <__call_exitprocs+0x134>
 4012294:	94000115 	stw	r16,4(r18)
 4012298:	003fea06 	br	4012244 <__call_exitprocs+0x100>
 401229c:	99000017 	ldw	r4,0(r19)
 40122a0:	183ee83a 	callr	r3
 40122a4:	003ff406 	br	4012278 <__call_exitprocs+0x134>
 40122a8:	90c00117 	ldw	r3,4(r18)
 40122ac:	1800071e 	bne	r3,zero,40122cc <__call_exitprocs+0x188>
 40122b0:	90c00017 	ldw	r3,0(r18)
 40122b4:	18000926 	beq	r3,zero,40122dc <__call_exitprocs+0x198>
 40122b8:	9009883a 	mov	r4,r18
 40122bc:	b8c00015 	stw	r3,0(r23)
 40122c0:	00000000 	call	0 <__reset>
 40122c4:	bc800017 	ldw	r18,0(r23)
 40122c8:	003fb506 	br	40121a0 <__call_exitprocs+0x5c>
 40122cc:	90c00017 	ldw	r3,0(r18)
 40122d0:	902f883a 	mov	r23,r18
 40122d4:	1825883a 	mov	r18,r3
 40122d8:	003fb106 	br	40121a0 <__call_exitprocs+0x5c>
 40122dc:	0007883a 	mov	r3,zero
 40122e0:	003ffb06 	br	40122d0 <__call_exitprocs+0x18c>

040122e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40122e4:	defffc04 	addi	sp,sp,-16
 40122e8:	df000315 	stw	fp,12(sp)
 40122ec:	df000304 	addi	fp,sp,12
 40122f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40122f4:	0001883a 	nop
 40122f8:	e0bfff17 	ldw	r2,-4(fp)
 40122fc:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 4012300:	e0bffd17 	ldw	r2,-12(fp)
 4012304:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4012308:	e0bffe17 	ldw	r2,-8(fp)
 401230c:	10000226 	beq	r2,zero,4012318 <_exit+0x34>
    ALT_SIM_FAIL();
 4012310:	002af070 	cmpltui	zero,zero,43969
 4012314:	00000106 	br	401231c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 4012318:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401231c:	003fff06 	br	401231c <_exit+0x38>
