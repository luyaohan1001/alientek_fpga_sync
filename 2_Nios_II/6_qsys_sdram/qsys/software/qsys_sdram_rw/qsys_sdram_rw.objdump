
qsys_sdram_rw.elf:     file format elf32-littlenios2
qsys_sdram_rw.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0000d738 memsz 0x0000da24 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000b824  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000320  0200b9dc  0200b9dc  0000c9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0200bcfc  0200bcfc  0000ccfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  0200d758  0200d758  0000e758  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000e758  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c78  00000000  00000000  0000e780  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000216fe  00000000  00000000  0000f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008907  00000000  00000000  00030af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009a40  00000000  00000000  000393fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001630  00000000  00000000  00042e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000029e9  00000000  00000000  00044470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001029c  00000000  00000000  00046e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  000570f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  00057118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0005a709  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  0005a70c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0005a716  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005a717  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005a718  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005a71c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005a720  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0005a724  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0005a72d  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0005a736  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000005  00000000  00000000  0005a73f  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000020  00000000  00000000  0005a744  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0002a7ab  00000000  00000000  0005a764  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
0200b9dc l    d  .rodata	00000000 .rodata
0200bcfc l    d  .rwdata	00000000 .rwdata
0200d758 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 F:/Qsys/qsys_sdram/qsys/software/qsys_sdram_rw_bsp//obj/HAL/src/crt0.o
020001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
020003fc l     F .text	00000034 __sprint_r
0200ba22 l     O .rodata	00000010 blanks.3515
0200ba32 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
020023c0 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02003dfc l     F .text	00000008 __fp_lock
02003e04 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0200bcfc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0200ba68 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0200bbb0 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
020080f4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02008e34 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
020094f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02009608 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02009634 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02009730 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
02009820 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
020099f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0200d748 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02009c48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02009d84 l     F .text	00000038 alt_dev_reg
0200c6b8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200a05c l     F .text	00000204 altera_avalon_jtag_uart_irq
0200a260 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200a9dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200ae4c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0200af84 l     F .text	00000050 alt_get_errno
0200afd4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
02006678 g     F .text	00000074 _mprec_log10
02006768 g     F .text	00000084 __any_on
02007464 g     F .text	00000064 _isatty_r
0200ba98 g     O .rodata	00000028 __mprec_tinytens
02009940 g     F .text	00000078 alt_main
020094ac g     F .text	00000044 __ashldi3
0200d7b4 g     O .bss	00000100 alt_irq
020074c8 g     F .text	0000006c _lseek_r
02008994 g     F .text	0000005c __eqdf2
0200da44 g       *ABS*	00000000 __alt_heap_start
020003c0 g     F .text	0000003c printf
02006f8c g     F .text	0000005c __sseek
02003e8c g     F .text	0000010c __sinit
02004b24 g     F .text	0000009c _setlocale_r
02003e18 g     F .text	00000064 __sfmoreglue
020099d8 g     F .text	00000020 __malloc_unlock
0200571c g     F .text	00000128 memmove
02003e7c g     F .text	00000010 _cleanup
02005844 g     F .text	000000a8 _Balloc
02008a4c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	00000000 __reset
020073fc g     F .text	00000068 _fstat_r
0200d770 g     O .bss	00000004 errno
0200d778 g     O .bss	00000004 alt_argv
02015718 g       *ABS*	00000000 _gp
0200c538 g     O .rwdata	00000180 alt_fd_list
0200b3b0 g     F .text	00000090 alt_find_dev
02005624 g     F .text	000000f8 memcpy
02003e0c g     F .text	0000000c _cleanup_r
02008b70 g     F .text	000000d4 __floatsidf
0200af0c g     F .text	00000078 alt_io_redirect
02008b14 g     F .text	0000005c __ltdf2
0200b9dc g       *ABS*	00000000 __DTOR_END__
020065d4 g     F .text	000000a4 __ratio
0200a460 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02000394 g     F .text	0000002c _printf_r
02008f54 g     F .text	00000008 __udivsi3
02009780 g     F .text	000000a0 isatty
0200bae8 g     O .rodata	000000c8 __mprec_tens
02004bc0 g     F .text	0000000c __locale_charset
0200d76c g     O .bss	00000004 __malloc_top_pad
0200d724 g     O .rwdata	00000004 __mb_cur_max
02004bcc g     F .text	0000000c _localeconv_r
02005c44 g     F .text	0000003c __i2b
020044e0 g     F .text	000004e4 __sfvwrite_r
02006e4c g     F .text	00000064 _sbrk_r
02007534 g     F .text	0000006c _read_r
0200c0fc g     O .rwdata	0000000c __lc_ctype
0200d740 g     O .rwdata	00000004 alt_max_fd
02009294 g     F .text	00000104 __unpack_d
020072ac g     F .text	0000013c _fclose_r
02003dcc g     F .text	00000030 fflush
0200d768 g     O .bss	00000004 __malloc_max_sbrked_mem
02008448 g     F .text	00000054 __adddf3
02006348 g     F .text	00000148 __b2d
02007b68 g     F .text	0000058c __umoddi3
02009870 g     F .text	000000d0 lseek
0200d71c g     O .rwdata	00000004 _global_impure_ptr
020067ec g     F .text	000005fc _realloc_r
0200da44 g       *ABS*	00000000 __bss_end
0200ad5c g     F .text	000000f0 alt_iic_isr_register
0200b28c g     F .text	00000104 alt_tick
020075a0 g     F .text	000005c8 __udivdi3
0200bac0 g     O .rodata	00000028 __mprec_bigtens
02005a28 g     F .text	00000104 __s2b
02008d18 g     F .text	0000011c __floatunsidf
020060e8 g     F .text	00000058 __mcmp
020040a4 g     F .text	00000018 __fp_lock_all
0200ad10 g     F .text	0000004c alt_ic_irq_enabled
0200b1f4 g     F .text	00000098 alt_alarm_stop
0200d780 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000cc alt_irq_handler
0200c510 g     O .rwdata	00000028 alt_dev_null
02005b2c g     F .text	00000068 __hi0bits
02008c44 g     F .text	000000d4 __fixdfsi
0200d738 g     O .rwdata	00000008 alt_dev_list
02009c98 g     F .text	000000ec write
02009684 g     F .text	000000ac fstat
02009468 g     F .text	00000044 __lshrdi3
02005e60 g     F .text	0000012c __pow5mult
0200d760 g     O .bss	00000004 __nlocale_changed
02008f5c g     F .text	00000008 __umodsi3
0200da44 g       *ABS*	00000000 end
02009f9c g     F .text	000000c0 altera_avalon_jtag_uart_init
0200b9dc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02008fc4 g     F .text	000000ac __clzsi2
0200a678 g     F .text	00000224 altera_avalon_jtag_uart_write
02004094 g     F .text	00000004 __sfp_lock_acquire
0200552c g     F .text	000000f8 memchr
02000430 g     F .text	00001df8 ___vfprintf_internal_r
02004210 g     F .text	000002d0 _free_r
0200b800 g     F .text	000001a0 __call_exitprocs
0200d75c g     O .bss	00000004 __mlocale_changed
0200d728 g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	00000048 _start
0200d784 g     O .bss	00000004 _alt_tick_rate
02005f8c g     F .text	0000015c __lshift
0200d788 g     O .bss	00000004 _alt_nticks
02009a48 g     F .text	000000f0 read
02009df0 g     F .text	00000048 alt_sys_init
0200b6d0 g     F .text	00000130 __register_exitproc
02005c80 g     F .text	000001e0 __multiply
0200a304 g     F .text	00000068 altera_avalon_jtag_uart_close
0200d78c g     O .bss	00000028 __malloc_current_mallinfo
02006490 g     F .text	00000144 __d2b
02009e38 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0200b554 g     F .text	000000b4 alt_get_fd
02009398 g     F .text	000000d0 __fpcmp_parts_d
02007248 g     F .text	00000064 _close_r
0200b654 g     F .text	0000007c memcmp
02009ef8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0200da44 g       *ABS*	00000000 __alt_stack_base
02009f48 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200224c g     F .text	00000174 __swsetup_r
020087e0 g     F .text	000001b4 __divdf3
02003f98 g     F .text	000000fc __sfp
020066ec g     F .text	0000007c __copybits
0200c108 g     O .rwdata	00000408 __malloc_av_
020040a0 g     F .text	00000004 __sinit_lock_release
020084fc g     F .text	000002e4 __muldf3
02006eb0 g     F .text	00000054 __sread
0200b440 g     F .text	00000114 alt_find_file
0200aa2c g     F .text	000000a0 alt_dev_llist_insert
020099b8 g     F .text	00000020 __malloc_lock
02009b98 g     F .text	000000b0 sbrk
02003be4 g     F .text	000001e8 _fflush_r
0200718c g     F .text	000000bc _calloc_r
0200d758 g       *ABS*	00000000 __bss_start
020002b8 g     F .text	000000dc memset
02000200 g     F .text	000000b8 main
0200d77c g     O .bss	00000004 alt_envp
0200d764 g     O .bss	00000004 __malloc_max_total_mem
02009e98 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02006fe8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
020073e8 g     F .text	00000014 fclose
0200d8b4 g     O .bss	00000190 _atexit0
020025c8 g     F .text	0000161c _dtoa_r
02004da8 g     F .text	00000784 _malloc_r
0200d744 g     O .rwdata	00000004 alt_errno
020049c4 g     F .text	000000a8 _fwalk
02008ea8 g     F .text	00000050 __divsi3
0200bbbc g     O .rodata	00000014 __thenan_df
020040d4 g     F .text	0000013c _malloc_trim_r
0200b9dc g       *ABS*	00000000 __CTOR_END__
02006ff0 g     F .text	000000a4 strcmp
0200b9dc g       *ABS*	00000000 __DTOR_LIST__
020089f0 g     F .text	0000005c __nedf2
02009dbc g     F .text	00000034 alt_irq_init
02009b38 g     F .text	00000060 alt_release_fd
0200bbd0 g     O .rodata	00000100 __clz_tab
0200d758 g     O .bss	00000004 _PathLocale
0200b608 g     F .text	00000014 atexit
02007120 g     F .text	0000006c _write_r
02004bd8 g     F .text	0000001c setlocale
0200d720 g     O .rwdata	00000004 _impure_ptr
0200d774 g     O .bss	00000004 alt_argc
0200ab28 g     F .text	0000005c _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
020062e8 g     F .text	00000060 __ulp
02006de8 g     F .text	00000038 __isinfd
020040bc g     F .text	00000018 __fp_unlock_all
0200d730 g     O .rwdata	00000008 alt_fs_list
02004bf4 g     F .text	0000000c localeconv
0200ab84 g     F .text	00000050 alt_ic_isr_register
0200d718 g     O .rwdata	00000004 ram
0200d758 g       *ABS*	00000000 _edata
0200da44 g       *ABS*	00000000 _end
0200a36c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0200ac70 g     F .text	000000a0 alt_ic_irq_disable
02006f04 g     F .text	00000088 __swrite
0200d72c g     O .rwdata	00000004 __malloc_trim_threshold
0200b390 g     F .text	00000020 altera_nios2_qsys_irq_init
0200b61c g     F .text	00000038 exit
02004a6c g     F .text	000000b8 _fwalk_reent
02006140 g     F .text	000001a8 __mdiff
02008ef8 g     F .text	0000005c __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02004098 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
0200b9a0 g     F .text	0000003c _exit
02006e20 g     F .text	0000002c __isnand
0200a89c g     F .text	00000140 alt_alarm_start
02008f64 g     F .text	00000060 __muldi3
02004c00 g     F .text	000001a8 __smakebuf_r
02007094 g     F .text	0000008c strlen
0200b0a0 g     F .text	00000154 open
02008ab0 g     F .text	00000064 __gedf2
0200d74c g     O .rwdata	00000004 alt_priority_mask
0200abd4 g     F .text	0000009c alt_ic_irq_enable
02002228 g     F .text	00000024 __vfprintf_internal
0200849c g     F .text	00000060 __subdf3
02005b94 g     F .text	000000b0 __lo0bits
0200d750 g     O .rwdata	00000008 alt_alarm_list
0200aacc g     F .text	0000005c _do_ctors
02009540 g     F .text	000000c8 close
02009070 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
0200409c g     F .text	00000004 __sinit_lock_acquire
02005914 g     F .text	00000114 __multadd
020058ec g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c08074 	movhi	r3,513
 2000130:	18f5ed04 	addi	r3,r3,-10316
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	01008074 	movhi	r4,513
 2000148:	2135ed04 	addi	r4,r4,-10316
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 20001c4:	00bffd16 	blt	zero,r2,20001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001d0:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001d4:	d695c614 	ori	gp,gp,22296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d8:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001dc:	10b5d614 	ori	r2,r2,55128

    movhi r3, %hi(__bss_end)
 20001e0:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001e4:	18f69114 	ori	r3,r3,55876

    beq r2, r3, 1f
 20001e8:	10c00326 	beq	r2,r3,20001f8 <_start+0x40>

0:
    stw zero, (r2)
 20001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f4:	10fffd36 	bltu	r2,r3,20001ec <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f8:	20099400 	call	2009940 <alt_main>

020001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001fc:	003fff06 	br	20001fc <alt_after_alt_main>

02000200 <main>:
#include "string.h"

//SDRAM地址
alt_u8 * ram = (alt_u8 *)(SDRAM_BASE+0x10000);

int main(void){
 2000200:	defffd04 	addi	sp,sp,-12
 2000204:	dfc00215 	stw	ra,8(sp)
 2000208:	df000115 	stw	fp,4(sp)
 200020c:	df000104 	addi	fp,sp,4
    int i;
    memset(ram,0,100);
 2000210:	d0a00017 	ldw	r2,-32768(gp)
 2000214:	1009883a 	mov	r4,r2
 2000218:	000b883a 	mov	r5,zero
 200021c:	01801904 	movi	r6,100
 2000220:	20002b80 	call	20002b8 <memset>
    //向ram中写数据，当ram写完以后，ram的地址已经变为(SDRAM_BASE+0x10000+200)
    for(i=0;i<100;i++){
 2000224:	e03fff15 	stw	zero,-4(fp)
 2000228:	00000806 	br	200024c <main+0x4c>
        *(ram++) = i;
 200022c:	d0a00017 	ldw	r2,-32768(gp)
 2000230:	e0ffff17 	ldw	r3,-4(fp)
 2000234:	10c00005 	stb	r3,0(r2)
 2000238:	10800044 	addi	r2,r2,1
 200023c:	d0a00015 	stw	r2,-32768(gp)

int main(void){
    int i;
    memset(ram,0,100);
    //向ram中写数据，当ram写完以后，ram的地址已经变为(SDRAM_BASE+0x10000+200)
    for(i=0;i<100;i++){
 2000240:	e0bfff17 	ldw	r2,-4(fp)
 2000244:	10800044 	addi	r2,r2,1
 2000248:	e0bfff15 	stw	r2,-4(fp)
 200024c:	e0bfff17 	ldw	r2,-4(fp)
 2000250:	10801910 	cmplti	r2,r2,100
 2000254:	103ff51e 	bne	r2,zero,200022c <main+0x2c>
        *(ram++) = i;
    }
    //逆向读取ram中的数据
    for(i=0;i<100;i++){
 2000258:	e03fff15 	stw	zero,-4(fp)
 200025c:	00000d06 	br	2000294 <main+0x94>
        printf("%d ",*(--ram));
 2000260:	d0a00017 	ldw	r2,-32768(gp)
 2000264:	10bfffc4 	addi	r2,r2,-1
 2000268:	d0a00015 	stw	r2,-32768(gp)
 200026c:	d0a00017 	ldw	r2,-32768(gp)
 2000270:	10800003 	ldbu	r2,0(r2)
 2000274:	10803fcc 	andi	r2,r2,255
 2000278:	01008074 	movhi	r4,513
 200027c:	212e7704 	addi	r4,r4,-17956
 2000280:	100b883a 	mov	r5,r2
 2000284:	20003c00 	call	20003c0 <printf>
    //向ram中写数据，当ram写完以后，ram的地址已经变为(SDRAM_BASE+0x10000+200)
    for(i=0;i<100;i++){
        *(ram++) = i;
    }
    //逆向读取ram中的数据
    for(i=0;i<100;i++){
 2000288:	e0bfff17 	ldw	r2,-4(fp)
 200028c:	10800044 	addi	r2,r2,1
 2000290:	e0bfff15 	stw	r2,-4(fp)
 2000294:	e0bfff17 	ldw	r2,-4(fp)
 2000298:	10801910 	cmplti	r2,r2,100
 200029c:	103ff01e 	bne	r2,zero,2000260 <main+0x60>
        printf("%d ",*(--ram));
    }
    return 0;
 20002a0:	0005883a 	mov	r2,zero
}
 20002a4:	e037883a 	mov	sp,fp
 20002a8:	dfc00117 	ldw	ra,4(sp)
 20002ac:	df000017 	ldw	fp,0(sp)
 20002b0:	dec00204 	addi	sp,sp,8
 20002b4:	f800283a 	ret

020002b8 <memset>:
 20002b8:	00c000c4 	movi	r3,3
 20002bc:	2005883a 	mov	r2,r4
 20002c0:	29403fcc 	andi	r5,r5,255
 20002c4:	19802d2e 	bgeu	r3,r6,200037c <memset+0xc4>
 20002c8:	20c6703a 	and	r3,r4,r3
 20002cc:	18002e1e 	bne	r3,zero,2000388 <memset+0xd0>
 20002d0:	2806923a 	slli	r3,r5,8
 20002d4:	010003c4 	movi	r4,15
 20002d8:	3011883a 	mov	r8,r6
 20002dc:	1946b03a 	or	r3,r3,r5
 20002e0:	180e943a 	slli	r7,r3,16
 20002e4:	38ceb03a 	or	r7,r7,r3
 20002e8:	1007883a 	mov	r3,r2
 20002ec:	21800f2e 	bgeu	r4,r6,200032c <memset+0x74>
 20002f0:	19c00015 	stw	r7,0(r3)
 20002f4:	19c00115 	stw	r7,4(r3)
 20002f8:	19c00215 	stw	r7,8(r3)
 20002fc:	19c00315 	stw	r7,12(r3)
 2000300:	423ffc04 	addi	r8,r8,-16
 2000304:	18c00404 	addi	r3,r3,16
 2000308:	223ff936 	bltu	r4,r8,20002f0 <memset+0x38>
 200030c:	30fffc04 	addi	r3,r6,-16
 2000310:	1806d13a 	srli	r3,r3,4
 2000314:	318003cc 	andi	r6,r6,15
 2000318:	010000c4 	movi	r4,3
 200031c:	18c00044 	addi	r3,r3,1
 2000320:	1806913a 	slli	r3,r3,4
 2000324:	10c7883a 	add	r3,r2,r3
 2000328:	21800e2e 	bgeu	r4,r6,2000364 <memset+0xac>
 200032c:	1813883a 	mov	r9,r3
 2000330:	3011883a 	mov	r8,r6
 2000334:	010000c4 	movi	r4,3
 2000338:	49c00015 	stw	r7,0(r9)
 200033c:	423fff04 	addi	r8,r8,-4
 2000340:	4a400104 	addi	r9,r9,4
 2000344:	223ffc36 	bltu	r4,r8,2000338 <memset+0x80>
 2000348:	313fff04 	addi	r4,r6,-4
 200034c:	2008d0ba 	srli	r4,r4,2
 2000350:	318000cc 	andi	r6,r6,3
 2000354:	21000044 	addi	r4,r4,1
 2000358:	2109883a 	add	r4,r4,r4
 200035c:	2109883a 	add	r4,r4,r4
 2000360:	1907883a 	add	r3,r3,r4
 2000364:	30000a26 	beq	r6,zero,2000390 <memset+0xd8>
 2000368:	198d883a 	add	r6,r3,r6
 200036c:	19400005 	stb	r5,0(r3)
 2000370:	18c00044 	addi	r3,r3,1
 2000374:	19bffd1e 	bne	r3,r6,200036c <memset+0xb4>
 2000378:	f800283a 	ret
 200037c:	2007883a 	mov	r3,r4
 2000380:	303ff91e 	bne	r6,zero,2000368 <memset+0xb0>
 2000384:	00000206 	br	2000390 <memset+0xd8>
 2000388:	2007883a 	mov	r3,r4
 200038c:	003ff606 	br	2000368 <memset+0xb0>
 2000390:	f800283a 	ret

02000394 <_printf_r>:
 2000394:	defffd04 	addi	sp,sp,-12
 2000398:	dfc00015 	stw	ra,0(sp)
 200039c:	d9800115 	stw	r6,4(sp)
 20003a0:	d9c00215 	stw	r7,8(sp)
 20003a4:	280d883a 	mov	r6,r5
 20003a8:	21400217 	ldw	r5,8(r4)
 20003ac:	d9c00104 	addi	r7,sp,4
 20003b0:	20004300 	call	2000430 <___vfprintf_internal_r>
 20003b4:	dfc00017 	ldw	ra,0(sp)
 20003b8:	dec00304 	addi	sp,sp,12
 20003bc:	f800283a 	ret

020003c0 <printf>:
 20003c0:	defffc04 	addi	sp,sp,-16
 20003c4:	dfc00015 	stw	ra,0(sp)
 20003c8:	d9400115 	stw	r5,4(sp)
 20003cc:	d9800215 	stw	r6,8(sp)
 20003d0:	d9c00315 	stw	r7,12(sp)
 20003d4:	00808074 	movhi	r2,513
 20003d8:	10b5c804 	addi	r2,r2,-10464
 20003dc:	10800017 	ldw	r2,0(r2)
 20003e0:	200b883a 	mov	r5,r4
 20003e4:	d9800104 	addi	r6,sp,4
 20003e8:	11000217 	ldw	r4,8(r2)
 20003ec:	20022280 	call	2002228 <__vfprintf_internal>
 20003f0:	dfc00017 	ldw	ra,0(sp)
 20003f4:	dec00404 	addi	sp,sp,16
 20003f8:	f800283a 	ret

020003fc <__sprint_r>:
 20003fc:	30800217 	ldw	r2,8(r6)
 2000400:	defffe04 	addi	sp,sp,-8
 2000404:	dc000015 	stw	r16,0(sp)
 2000408:	dfc00115 	stw	ra,4(sp)
 200040c:	3021883a 	mov	r16,r6
 2000410:	10000226 	beq	r2,zero,200041c <__sprint_r+0x20>
 2000414:	20044e00 	call	20044e0 <__sfvwrite_r>
 2000418:	80000215 	stw	zero,8(r16)
 200041c:	80000115 	stw	zero,4(r16)
 2000420:	dfc00117 	ldw	ra,4(sp)
 2000424:	dc000017 	ldw	r16,0(sp)
 2000428:	dec00204 	addi	sp,sp,8
 200042c:	f800283a 	ret

02000430 <___vfprintf_internal_r>:
 2000430:	defeb904 	addi	sp,sp,-1308
 2000434:	dc013d15 	stw	r16,1268(sp)
 2000438:	d9013015 	stw	r4,1216(sp)
 200043c:	dfc14615 	stw	ra,1304(sp)
 2000440:	df014515 	stw	fp,1300(sp)
 2000444:	ddc14415 	stw	r23,1296(sp)
 2000448:	dd814315 	stw	r22,1292(sp)
 200044c:	dd414215 	stw	r21,1288(sp)
 2000450:	dd014115 	stw	r20,1284(sp)
 2000454:	dcc14015 	stw	r19,1280(sp)
 2000458:	dc813f15 	stw	r18,1276(sp)
 200045c:	dc413e15 	stw	r17,1272(sp)
 2000460:	d9412915 	stw	r5,1188(sp)
 2000464:	3021883a 	mov	r16,r6
 2000468:	d9c12d15 	stw	r7,1204(sp)
 200046c:	2004bcc0 	call	2004bcc <_localeconv_r>
 2000470:	10800017 	ldw	r2,0(r2)
 2000474:	d9013017 	ldw	r4,1216(sp)
 2000478:	d8013315 	stw	zero,1228(sp)
 200047c:	d8813715 	stw	r2,1244(sp)
 2000480:	d8013415 	stw	zero,1232(sp)
 2000484:	20000226 	beq	r4,zero,2000490 <___vfprintf_internal_r+0x60>
 2000488:	20800e17 	ldw	r2,56(r4)
 200048c:	10019826 	beq	r2,zero,2000af0 <___vfprintf_internal_r+0x6c0>
 2000490:	da012917 	ldw	r8,1188(sp)
 2000494:	4080030b 	ldhu	r2,12(r8)
 2000498:	10c0020c 	andi	r3,r2,8
 200049c:	18ffffcc 	andi	r3,r3,65535
 20004a0:	18e0001c 	xori	r3,r3,32768
 20004a4:	18e00004 	addi	r3,r3,-32768
 20004a8:	18013a26 	beq	r3,zero,2000994 <___vfprintf_internal_r+0x564>
 20004ac:	40c00417 	ldw	r3,16(r8)
 20004b0:	18013826 	beq	r3,zero,2000994 <___vfprintf_internal_r+0x564>
 20004b4:	1100068c 	andi	r4,r2,26
 20004b8:	00c00284 	movi	r3,10
 20004bc:	20c13e26 	beq	r4,r3,20009b8 <___vfprintf_internal_r+0x588>
 20004c0:	da010dc4 	addi	r8,sp,1079
 20004c4:	d8800404 	addi	r2,sp,16
 20004c8:	da012615 	stw	r8,1176(sp)
 20004cc:	d8811b15 	stw	r2,1132(sp)
 20004d0:	1013883a 	mov	r9,r2
 20004d4:	d8812617 	ldw	r2,1176(sp)
 20004d8:	da010e04 	addi	r8,sp,1080
 20004dc:	dc413017 	ldw	r17,1216(sp)
 20004e0:	da012715 	stw	r8,1180(sp)
 20004e4:	4091c83a 	sub	r8,r8,r2
 20004e8:	d8011d15 	stw	zero,1140(sp)
 20004ec:	d8011c15 	stw	zero,1136(sp)
 20004f0:	802b883a 	mov	r21,r16
 20004f4:	d8013215 	stw	zero,1224(sp)
 20004f8:	d8013615 	stw	zero,1240(sp)
 20004fc:	d8013515 	stw	zero,1236(sp)
 2000500:	d8012c15 	stw	zero,1200(sp)
 2000504:	da013915 	stw	r8,1252(sp)
 2000508:	a8800007 	ldb	r2,0(r21)
 200050c:	1002ec26 	beq	r2,zero,20010c0 <___vfprintf_internal_r+0xc90>
 2000510:	00c00944 	movi	r3,37
 2000514:	a825883a 	mov	r18,r21
 2000518:	10c0021e 	bne	r2,r3,2000524 <___vfprintf_internal_r+0xf4>
 200051c:	00001406 	br	2000570 <___vfprintf_internal_r+0x140>
 2000520:	10c00326 	beq	r2,r3,2000530 <___vfprintf_internal_r+0x100>
 2000524:	94800044 	addi	r18,r18,1
 2000528:	90800007 	ldb	r2,0(r18)
 200052c:	103ffc1e 	bne	r2,zero,2000520 <___vfprintf_internal_r+0xf0>
 2000530:	9561c83a 	sub	r16,r18,r21
 2000534:	80000e26 	beq	r16,zero,2000570 <___vfprintf_internal_r+0x140>
 2000538:	da011d17 	ldw	r8,1140(sp)
 200053c:	d8c11c17 	ldw	r3,1136(sp)
 2000540:	4d400015 	stw	r21,0(r9)
 2000544:	4c000115 	stw	r16,4(r9)
 2000548:	4411883a 	add	r8,r8,r16
 200054c:	18c00044 	addi	r3,r3,1
 2000550:	da011d15 	stw	r8,1140(sp)
 2000554:	d8c11c15 	stw	r3,1136(sp)
 2000558:	008001c4 	movi	r2,7
 200055c:	10c15d16 	blt	r2,r3,2000ad4 <___vfprintf_internal_r+0x6a4>
 2000560:	4a400204 	addi	r9,r9,8
 2000564:	d8812c17 	ldw	r2,1200(sp)
 2000568:	1405883a 	add	r2,r2,r16
 200056c:	d8812c15 	stw	r2,1200(sp)
 2000570:	90800007 	ldb	r2,0(r18)
 2000574:	10013b26 	beq	r2,zero,2000a64 <___vfprintf_internal_r+0x634>
 2000578:	95400044 	addi	r21,r18,1
 200057c:	94800047 	ldb	r18,1(r18)
 2000580:	d8012585 	stb	zero,1174(sp)
 2000584:	073fffc4 	movi	fp,-1
 2000588:	d8012e15 	stw	zero,1208(sp)
 200058c:	0021883a 	mov	r16,zero
 2000590:	00c01604 	movi	r3,88
 2000594:	01400244 	movi	r5,9
 2000598:	02800a84 	movi	r10,42
 200059c:	01c01b04 	movi	r7,108
 20005a0:	01800ac4 	movi	r6,43
 20005a4:	02c00804 	movi	r11,32
 20005a8:	ad400044 	addi	r21,r21,1
 20005ac:	90bff804 	addi	r2,r18,-32
 20005b0:	1880092e 	bgeu	r3,r2,20005d8 <___vfprintf_internal_r+0x1a8>
 20005b4:	90012b26 	beq	r18,zero,2000a64 <___vfprintf_internal_r+0x634>
 20005b8:	00c00044 	movi	r3,1
 20005bc:	d8c12815 	stw	r3,1184(sp)
 20005c0:	dc810405 	stb	r18,1040(sp)
 20005c4:	d8012585 	stb	zero,1174(sp)
 20005c8:	d8c12b15 	stw	r3,1196(sp)
 20005cc:	dcc10404 	addi	r19,sp,1040
 20005d0:	d8013115 	stw	zero,1220(sp)
 20005d4:	00008806 	br	20007f8 <___vfprintf_internal_r+0x3c8>
 20005d8:	1085883a 	add	r2,r2,r2
 20005dc:	1085883a 	add	r2,r2,r2
 20005e0:	01008034 	movhi	r4,512
 20005e4:	21017d04 	addi	r4,r4,1524
 20005e8:	1105883a 	add	r2,r2,r4
 20005ec:	10800017 	ldw	r2,0(r2)
 20005f0:	1000683a 	jmp	r2
 20005f4:	02000ba8 	cmpgeui	r8,zero,46
 20005f8:	020005b4 	movhi	r8,22
 20005fc:	020005b4 	movhi	r8,22
 2000600:	02000bbc 	xorhi	r8,zero,46
 2000604:	020005b4 	movhi	r8,22
 2000608:	020005b4 	movhi	r8,22
 200060c:	020005b4 	movhi	r8,22
 2000610:	020005b4 	movhi	r8,22
 2000614:	020005b4 	movhi	r8,22
 2000618:	020005b4 	movhi	r8,22
 200061c:	02000ca4 	muli	r8,zero,50
 2000620:	02000b60 	cmpeqi	r8,zero,45
 2000624:	020005b4 	movhi	r8,22
 2000628:	02000988 	cmpgei	r8,zero,38
 200062c:	02000b6c 	andhi	r8,zero,45
 2000630:	020005b4 	movhi	r8,22
 2000634:	02000bc8 	cmpgei	r8,zero,47
 2000638:	02000cc8 	cmpgei	r8,zero,51
 200063c:	02000cc8 	cmpgei	r8,zero,51
 2000640:	02000cc8 	cmpgei	r8,zero,51
 2000644:	02000cc8 	cmpgei	r8,zero,51
 2000648:	02000cc8 	cmpgei	r8,zero,51
 200064c:	02000cc8 	cmpgei	r8,zero,51
 2000650:	02000cc8 	cmpgei	r8,zero,51
 2000654:	02000cc8 	cmpgei	r8,zero,51
 2000658:	02000cc8 	cmpgei	r8,zero,51
 200065c:	020005b4 	movhi	r8,22
 2000660:	020005b4 	movhi	r8,22
 2000664:	020005b4 	movhi	r8,22
 2000668:	020005b4 	movhi	r8,22
 200066c:	020005b4 	movhi	r8,22
 2000670:	020005b4 	movhi	r8,22
 2000674:	020005b4 	movhi	r8,22
 2000678:	020005b4 	movhi	r8,22
 200067c:	020005b4 	movhi	r8,22
 2000680:	020005b4 	movhi	r8,22
 2000684:	02000924 	muli	r8,zero,36
 2000688:	02000cf0 	cmpltui	r8,zero,51
 200068c:	020005b4 	movhi	r8,22
 2000690:	02000cf0 	cmpltui	r8,zero,51
 2000694:	020005b4 	movhi	r8,22
 2000698:	020005b4 	movhi	r8,22
 200069c:	020005b4 	movhi	r8,22
 20006a0:	020005b4 	movhi	r8,22
 20006a4:	02000e60 	cmpeqi	r8,zero,57
 20006a8:	020005b4 	movhi	r8,22
 20006ac:	020005b4 	movhi	r8,22
 20006b0:	020008ec 	andhi	r8,zero,35
 20006b4:	020005b4 	movhi	r8,22
 20006b8:	020005b4 	movhi	r8,22
 20006bc:	020005b4 	movhi	r8,22
 20006c0:	020005b4 	movhi	r8,22
 20006c4:	020005b4 	movhi	r8,22
 20006c8:	02000758 	cmpnei	r8,zero,29
 20006cc:	020005b4 	movhi	r8,22
 20006d0:	020005b4 	movhi	r8,22
 20006d4:	02000bd4 	movui	r8,47
 20006d8:	020005b4 	movhi	r8,22
 20006dc:	020005b4 	movhi	r8,22
 20006e0:	020005b4 	movhi	r8,22
 20006e4:	020005b4 	movhi	r8,22
 20006e8:	020005b4 	movhi	r8,22
 20006ec:	020005b4 	movhi	r8,22
 20006f0:	020005b4 	movhi	r8,22
 20006f4:	020005b4 	movhi	r8,22
 20006f8:	020005b4 	movhi	r8,22
 20006fc:	020005b4 	movhi	r8,22
 2000700:	02000c48 	cmpgei	r8,zero,49
 2000704:	02000928 	cmpgeui	r8,zero,36
 2000708:	02000cf0 	cmpltui	r8,zero,51
 200070c:	02000cf0 	cmpltui	r8,zero,51
 2000710:	02000cf0 	cmpltui	r8,zero,51
 2000714:	02000c28 	cmpgeui	r8,zero,48
 2000718:	02000928 	cmpgeui	r8,zero,36
 200071c:	020005b4 	movhi	r8,22
 2000720:	020005b4 	movhi	r8,22
 2000724:	02000c34 	movhi	r8,48
 2000728:	020005b4 	movhi	r8,22
 200072c:	02000c78 	rdprs	r8,zero,49
 2000730:	020008f0 	cmpltui	r8,zero,35
 2000734:	02000d78 	rdprs	r8,zero,53
 2000738:	02000dc4 	movi	r8,55
 200073c:	020005b4 	movhi	r8,22
 2000740:	02000dd0 	cmplti	r8,zero,55
 2000744:	020005b4 	movhi	r8,22
 2000748:	0200075c 	xori	r8,zero,29
 200074c:	020005b4 	movhi	r8,22
 2000750:	020005b4 	movhi	r8,22
 2000754:	02000e2c 	andhi	r8,zero,56
 2000758:	84000414 	ori	r16,r16,16
 200075c:	8080080c 	andi	r2,r16,32
 2000760:	1000f51e 	bne	r2,zero,2000b38 <___vfprintf_internal_r+0x708>
 2000764:	8080040c 	andi	r2,r16,16
 2000768:	10042c26 	beq	r2,zero,200181c <___vfprintf_internal_r+0x13ec>
 200076c:	da012d17 	ldw	r8,1204(sp)
 2000770:	002d883a 	mov	r22,zero
 2000774:	00c00044 	movi	r3,1
 2000778:	45c00017 	ldw	r23,0(r8)
 200077c:	42000104 	addi	r8,r8,4
 2000780:	da012d15 	stw	r8,1204(sp)
 2000784:	b805883a 	mov	r2,r23
 2000788:	d8012585 	stb	zero,1174(sp)
 200078c:	e0000216 	blt	fp,zero,2000798 <___vfprintf_internal_r+0x368>
 2000790:	013fdfc4 	movi	r4,-129
 2000794:	8120703a 	and	r16,r16,r4
 2000798:	1002671e 	bne	r2,zero,2001138 <___vfprintf_internal_r+0xd08>
 200079c:	e002661e 	bne	fp,zero,2001138 <___vfprintf_internal_r+0xd08>
 20007a0:	18c03fcc 	andi	r3,r3,255
 20007a4:	1803561e 	bne	r3,zero,2001500 <___vfprintf_internal_r+0x10d0>
 20007a8:	8080004c 	andi	r2,r16,1
 20007ac:	10035426 	beq	r2,zero,2001500 <___vfprintf_internal_r+0x10d0>
 20007b0:	da013917 	ldw	r8,1252(sp)
 20007b4:	00800c04 	movi	r2,48
 20007b8:	d8810dc5 	stb	r2,1079(sp)
 20007bc:	da012b15 	stw	r8,1196(sp)
 20007c0:	dcc10dc4 	addi	r19,sp,1079
 20007c4:	d8812b17 	ldw	r2,1196(sp)
 20007c8:	d8812815 	stw	r2,1184(sp)
 20007cc:	1700010e 	bge	r2,fp,20007d4 <___vfprintf_internal_r+0x3a4>
 20007d0:	df012815 	stw	fp,1184(sp)
 20007d4:	d8812583 	ldbu	r2,1174(sp)
 20007d8:	df013115 	stw	fp,1220(sp)
 20007dc:	10803fcc 	andi	r2,r2,255
 20007e0:	1080201c 	xori	r2,r2,128
 20007e4:	10bfe004 	addi	r2,r2,-128
 20007e8:	10000326 	beq	r2,zero,20007f8 <___vfprintf_internal_r+0x3c8>
 20007ec:	da012817 	ldw	r8,1184(sp)
 20007f0:	42000044 	addi	r8,r8,1
 20007f4:	da012815 	stw	r8,1184(sp)
 20007f8:	80c0008c 	andi	r3,r16,2
 20007fc:	d8c12a15 	stw	r3,1192(sp)
 2000800:	18000326 	beq	r3,zero,2000810 <___vfprintf_internal_r+0x3e0>
 2000804:	da012817 	ldw	r8,1184(sp)
 2000808:	42000084 	addi	r8,r8,2
 200080c:	da012815 	stw	r8,1184(sp)
 2000810:	80c0210c 	andi	r3,r16,132
 2000814:	d8c12f15 	stw	r3,1212(sp)
 2000818:	1801941e 	bne	r3,zero,2000e6c <___vfprintf_internal_r+0xa3c>
 200081c:	da012e17 	ldw	r8,1208(sp)
 2000820:	d8c12817 	ldw	r3,1184(sp)
 2000824:	40edc83a 	sub	r22,r8,r3
 2000828:	0581900e 	bge	zero,r22,2000e6c <___vfprintf_internal_r+0xa3c>
 200082c:	02800404 	movi	r10,16
 2000830:	da011d17 	ldw	r8,1140(sp)
 2000834:	d8c11c17 	ldw	r3,1136(sp)
 2000838:	05c08074 	movhi	r23,513
 200083c:	bdee8884 	addi	r23,r23,-17886
 2000840:	5580200e 	bge	r10,r22,20008c4 <___vfprintf_internal_r+0x494>
 2000844:	dc813815 	stw	r18,1248(sp)
 2000848:	5039883a 	mov	fp,r10
 200084c:	b825883a 	mov	r18,r23
 2000850:	050001c4 	movi	r20,7
 2000854:	b02f883a 	mov	r23,r22
 2000858:	802d883a 	mov	r22,r16
 200085c:	dc012917 	ldw	r16,1188(sp)
 2000860:	00000306 	br	2000870 <___vfprintf_internal_r+0x440>
 2000864:	bdfffc04 	addi	r23,r23,-16
 2000868:	4a400204 	addi	r9,r9,8
 200086c:	e5c0110e 	bge	fp,r23,20008b4 <___vfprintf_internal_r+0x484>
 2000870:	4c800015 	stw	r18,0(r9)
 2000874:	4f000115 	stw	fp,4(r9)
 2000878:	42000404 	addi	r8,r8,16
 200087c:	18c00044 	addi	r3,r3,1
 2000880:	da011d15 	stw	r8,1140(sp)
 2000884:	d8c11c15 	stw	r3,1136(sp)
 2000888:	a0fff60e 	bge	r20,r3,2000864 <___vfprintf_internal_r+0x434>
 200088c:	8809883a 	mov	r4,r17
 2000890:	800b883a 	mov	r5,r16
 2000894:	d9811b04 	addi	r6,sp,1132
 2000898:	20003fc0 	call	20003fc <__sprint_r>
 200089c:	1000771e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20008a0:	bdfffc04 	addi	r23,r23,-16
 20008a4:	da011d17 	ldw	r8,1140(sp)
 20008a8:	d8c11c17 	ldw	r3,1136(sp)
 20008ac:	da400404 	addi	r9,sp,16
 20008b0:	e5ffef16 	blt	fp,r23,2000870 <___vfprintf_internal_r+0x440>
 20008b4:	b021883a 	mov	r16,r22
 20008b8:	b82d883a 	mov	r22,r23
 20008bc:	902f883a 	mov	r23,r18
 20008c0:	dc813817 	ldw	r18,1248(sp)
 20008c4:	4dc00015 	stw	r23,0(r9)
 20008c8:	4d800115 	stw	r22,4(r9)
 20008cc:	4591883a 	add	r8,r8,r22
 20008d0:	18c00044 	addi	r3,r3,1
 20008d4:	da011d15 	stw	r8,1140(sp)
 20008d8:	d8c11c15 	stw	r3,1136(sp)
 20008dc:	008001c4 	movi	r2,7
 20008e0:	10c36d16 	blt	r2,r3,2001698 <___vfprintf_internal_r+0x1268>
 20008e4:	4a400204 	addi	r9,r9,8
 20008e8:	00016206 	br	2000e74 <___vfprintf_internal_r+0xa44>
 20008ec:	84000414 	ori	r16,r16,16
 20008f0:	8080080c 	andi	r2,r16,32
 20008f4:	1000801e 	bne	r2,zero,2000af8 <___vfprintf_internal_r+0x6c8>
 20008f8:	8080040c 	andi	r2,r16,16
 20008fc:	1003da26 	beq	r2,zero,2001868 <___vfprintf_internal_r+0x1438>
 2000900:	d8c12d17 	ldw	r3,1204(sp)
 2000904:	002d883a 	mov	r22,zero
 2000908:	1dc00017 	ldw	r23,0(r3)
 200090c:	18c00104 	addi	r3,r3,4
 2000910:	d8c12d15 	stw	r3,1204(sp)
 2000914:	b805883a 	mov	r2,r23
 2000918:	0007883a 	mov	r3,zero
 200091c:	d8012585 	stb	zero,1174(sp)
 2000920:	003f9a06 	br	200078c <___vfprintf_internal_r+0x35c>
 2000924:	84000414 	ori	r16,r16,16
 2000928:	8080080c 	andi	r2,r16,32
 200092c:	10007b1e 	bne	r2,zero,2000b1c <___vfprintf_internal_r+0x6ec>
 2000930:	8080040c 	andi	r2,r16,16
 2000934:	1003ed26 	beq	r2,zero,20018ec <___vfprintf_internal_r+0x14bc>
 2000938:	d9012d17 	ldw	r4,1204(sp)
 200093c:	25c00017 	ldw	r23,0(r4)
 2000940:	21000104 	addi	r4,r4,4
 2000944:	d9012d15 	stw	r4,1204(sp)
 2000948:	b82dd7fa 	srai	r22,r23,31
 200094c:	b005883a 	mov	r2,r22
 2000950:	1003230e 	bge	r2,zero,20015e0 <___vfprintf_internal_r+0x11b0>
 2000954:	05efc83a 	sub	r23,zero,r23
 2000958:	b804c03a 	cmpne	r2,r23,zero
 200095c:	05adc83a 	sub	r22,zero,r22
 2000960:	b0adc83a 	sub	r22,r22,r2
 2000964:	00800b44 	movi	r2,45
 2000968:	d8812585 	stb	r2,1174(sp)
 200096c:	00c00044 	movi	r3,1
 2000970:	bd84b03a 	or	r2,r23,r22
 2000974:	003f8506 	br	200078c <___vfprintf_internal_r+0x35c>
 2000978:	da012e17 	ldw	r8,1208(sp)
 200097c:	d8812d15 	stw	r2,1204(sp)
 2000980:	0211c83a 	sub	r8,zero,r8
 2000984:	da012e15 	stw	r8,1208(sp)
 2000988:	84000114 	ori	r16,r16,4
 200098c:	ac800007 	ldb	r18,0(r21)
 2000990:	003f0506 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000994:	d9013017 	ldw	r4,1216(sp)
 2000998:	d9412917 	ldw	r5,1188(sp)
 200099c:	200224c0 	call	200224c <__swsetup_r>
 20009a0:	10003d1e 	bne	r2,zero,2000a98 <___vfprintf_internal_r+0x668>
 20009a4:	d8c12917 	ldw	r3,1188(sp)
 20009a8:	1880030b 	ldhu	r2,12(r3)
 20009ac:	00c00284 	movi	r3,10
 20009b0:	1100068c 	andi	r4,r2,26
 20009b4:	20fec21e 	bne	r4,r3,20004c0 <___vfprintf_internal_r+0x90>
 20009b8:	d9012917 	ldw	r4,1188(sp)
 20009bc:	20c0038b 	ldhu	r3,14(r4)
 20009c0:	193fffcc 	andi	r4,r3,65535
 20009c4:	2120001c 	xori	r4,r4,32768
 20009c8:	21200004 	addi	r4,r4,-32768
 20009cc:	203ebc16 	blt	r4,zero,20004c0 <___vfprintf_internal_r+0x90>
 20009d0:	da012917 	ldw	r8,1188(sp)
 20009d4:	d9013017 	ldw	r4,1216(sp)
 20009d8:	d9c12d17 	ldw	r7,1204(sp)
 20009dc:	42800717 	ldw	r10,28(r8)
 20009e0:	42400917 	ldw	r9,36(r8)
 20009e4:	10bfff4c 	andi	r2,r2,65533
 20009e8:	02010004 	movi	r8,1024
 20009ec:	d881070d 	sth	r2,1052(sp)
 20009f0:	d9410404 	addi	r5,sp,1040
 20009f4:	d8800404 	addi	r2,sp,16
 20009f8:	800d883a 	mov	r6,r16
 20009fc:	d8c1078d 	sth	r3,1054(sp)
 2000a00:	da810b15 	stw	r10,1068(sp)
 2000a04:	da410d15 	stw	r9,1076(sp)
 2000a08:	d8810415 	stw	r2,1040(sp)
 2000a0c:	d8810815 	stw	r2,1056(sp)
 2000a10:	da010615 	stw	r8,1048(sp)
 2000a14:	da010915 	stw	r8,1060(sp)
 2000a18:	d8010a15 	stw	zero,1064(sp)
 2000a1c:	20004300 	call	2000430 <___vfprintf_internal_r>
 2000a20:	d8812c15 	stw	r2,1200(sp)
 2000a24:	10000416 	blt	r2,zero,2000a38 <___vfprintf_internal_r+0x608>
 2000a28:	d9013017 	ldw	r4,1216(sp)
 2000a2c:	d9410404 	addi	r5,sp,1040
 2000a30:	2003be40 	call	2003be4 <_fflush_r>
 2000a34:	1005d81e 	bne	r2,zero,2002198 <___vfprintf_internal_r+0x1d68>
 2000a38:	d881070b 	ldhu	r2,1052(sp)
 2000a3c:	1080100c 	andi	r2,r2,64
 2000a40:	10bfffcc 	andi	r2,r2,65535
 2000a44:	10a0001c 	xori	r2,r2,32768
 2000a48:	10a00004 	addi	r2,r2,-32768
 2000a4c:	10001426 	beq	r2,zero,2000aa0 <___vfprintf_internal_r+0x670>
 2000a50:	d8c12917 	ldw	r3,1188(sp)
 2000a54:	1880030b 	ldhu	r2,12(r3)
 2000a58:	10801014 	ori	r2,r2,64
 2000a5c:	1880030d 	sth	r2,12(r3)
 2000a60:	00000f06 	br	2000aa0 <___vfprintf_internal_r+0x670>
 2000a64:	d8811d17 	ldw	r2,1140(sp)
 2000a68:	10000426 	beq	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2000a6c:	d9013017 	ldw	r4,1216(sp)
 2000a70:	d9412917 	ldw	r5,1188(sp)
 2000a74:	d9811b04 	addi	r6,sp,1132
 2000a78:	20003fc0 	call	20003fc <__sprint_r>
 2000a7c:	d8c12917 	ldw	r3,1188(sp)
 2000a80:	1880030b 	ldhu	r2,12(r3)
 2000a84:	1080100c 	andi	r2,r2,64
 2000a88:	10bfffcc 	andi	r2,r2,65535
 2000a8c:	10a0001c 	xori	r2,r2,32768
 2000a90:	10a00004 	addi	r2,r2,-32768
 2000a94:	10000226 	beq	r2,zero,2000aa0 <___vfprintf_internal_r+0x670>
 2000a98:	00bfffc4 	movi	r2,-1
 2000a9c:	d8812c15 	stw	r2,1200(sp)
 2000aa0:	d8812c17 	ldw	r2,1200(sp)
 2000aa4:	dfc14617 	ldw	ra,1304(sp)
 2000aa8:	df014517 	ldw	fp,1300(sp)
 2000aac:	ddc14417 	ldw	r23,1296(sp)
 2000ab0:	dd814317 	ldw	r22,1292(sp)
 2000ab4:	dd414217 	ldw	r21,1288(sp)
 2000ab8:	dd014117 	ldw	r20,1284(sp)
 2000abc:	dcc14017 	ldw	r19,1280(sp)
 2000ac0:	dc813f17 	ldw	r18,1276(sp)
 2000ac4:	dc413e17 	ldw	r17,1272(sp)
 2000ac8:	dc013d17 	ldw	r16,1268(sp)
 2000acc:	dec14704 	addi	sp,sp,1308
 2000ad0:	f800283a 	ret
 2000ad4:	d9412917 	ldw	r5,1188(sp)
 2000ad8:	8809883a 	mov	r4,r17
 2000adc:	d9811b04 	addi	r6,sp,1132
 2000ae0:	20003fc0 	call	20003fc <__sprint_r>
 2000ae4:	103fe51e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2000ae8:	da400404 	addi	r9,sp,16
 2000aec:	003e9d06 	br	2000564 <___vfprintf_internal_r+0x134>
 2000af0:	2003e8c0 	call	2003e8c <__sinit>
 2000af4:	003e6606 	br	2000490 <___vfprintf_internal_r+0x60>
 2000af8:	d8812d17 	ldw	r2,1204(sp)
 2000afc:	0007883a 	mov	r3,zero
 2000b00:	15c00017 	ldw	r23,0(r2)
 2000b04:	15800117 	ldw	r22,4(r2)
 2000b08:	10800204 	addi	r2,r2,8
 2000b0c:	d8812d15 	stw	r2,1204(sp)
 2000b10:	d8012585 	stb	zero,1174(sp)
 2000b14:	bd84b03a 	or	r2,r23,r22
 2000b18:	003f1c06 	br	200078c <___vfprintf_internal_r+0x35c>
 2000b1c:	d8c12d17 	ldw	r3,1204(sp)
 2000b20:	18800117 	ldw	r2,4(r3)
 2000b24:	1dc00017 	ldw	r23,0(r3)
 2000b28:	18c00204 	addi	r3,r3,8
 2000b2c:	d8c12d15 	stw	r3,1204(sp)
 2000b30:	102d883a 	mov	r22,r2
 2000b34:	003f8606 	br	2000950 <___vfprintf_internal_r+0x520>
 2000b38:	d8c12d17 	ldw	r3,1204(sp)
 2000b3c:	d9012d17 	ldw	r4,1204(sp)
 2000b40:	1dc00017 	ldw	r23,0(r3)
 2000b44:	1d800117 	ldw	r22,4(r3)
 2000b48:	21000204 	addi	r4,r4,8
 2000b4c:	00c00044 	movi	r3,1
 2000b50:	d9012d15 	stw	r4,1204(sp)
 2000b54:	bd84b03a 	or	r2,r23,r22
 2000b58:	d8012585 	stb	zero,1174(sp)
 2000b5c:	003f0b06 	br	200078c <___vfprintf_internal_r+0x35c>
 2000b60:	d9812585 	stb	r6,1174(sp)
 2000b64:	ac800007 	ldb	r18,0(r21)
 2000b68:	003e8f06 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000b6c:	ac800007 	ldb	r18,0(r21)
 2000b70:	a9000044 	addi	r4,r21,1
 2000b74:	92857d26 	beq	r18,r10,200216c <___vfprintf_internal_r+0x1d3c>
 2000b78:	90bff404 	addi	r2,r18,-48
 2000b7c:	0039883a 	mov	fp,zero
 2000b80:	28800736 	bltu	r5,r2,2000ba0 <___vfprintf_internal_r+0x770>
 2000b84:	24800007 	ldb	r18,0(r4)
 2000b88:	e70002a4 	muli	fp,fp,10
 2000b8c:	21000044 	addi	r4,r4,1
 2000b90:	1739883a 	add	fp,r2,fp
 2000b94:	90bff404 	addi	r2,r18,-48
 2000b98:	28bffa2e 	bgeu	r5,r2,2000b84 <___vfprintf_internal_r+0x754>
 2000b9c:	e0044216 	blt	fp,zero,2001ca8 <___vfprintf_internal_r+0x1878>
 2000ba0:	202b883a 	mov	r21,r4
 2000ba4:	003e8106 	br	20005ac <___vfprintf_internal_r+0x17c>
 2000ba8:	d8812587 	ldb	r2,1174(sp)
 2000bac:	1003581e 	bne	r2,zero,2001910 <___vfprintf_internal_r+0x14e0>
 2000bb0:	dac12585 	stb	r11,1174(sp)
 2000bb4:	ac800007 	ldb	r18,0(r21)
 2000bb8:	003e7b06 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000bbc:	84000054 	ori	r16,r16,1
 2000bc0:	ac800007 	ldb	r18,0(r21)
 2000bc4:	003e7806 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000bc8:	84002014 	ori	r16,r16,128
 2000bcc:	ac800007 	ldb	r18,0(r21)
 2000bd0:	003e7506 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000bd4:	02008074 	movhi	r8,513
 2000bd8:	422e7c04 	addi	r8,r8,-17936
 2000bdc:	da013615 	stw	r8,1240(sp)
 2000be0:	8080080c 	andi	r2,r16,32
 2000be4:	10009626 	beq	r2,zero,2000e40 <___vfprintf_internal_r+0xa10>
 2000be8:	d8812d17 	ldw	r2,1204(sp)
 2000bec:	15c00017 	ldw	r23,0(r2)
 2000bf0:	15800117 	ldw	r22,4(r2)
 2000bf4:	10800204 	addi	r2,r2,8
 2000bf8:	d8812d15 	stw	r2,1204(sp)
 2000bfc:	8080004c 	andi	r2,r16,1
 2000c00:	1002ae26 	beq	r2,zero,20016bc <___vfprintf_internal_r+0x128c>
 2000c04:	bd84b03a 	or	r2,r23,r22
 2000c08:	10032a26 	beq	r2,zero,20018b4 <___vfprintf_internal_r+0x1484>
 2000c0c:	00c00c04 	movi	r3,48
 2000c10:	d8c12505 	stb	r3,1172(sp)
 2000c14:	dc812545 	stb	r18,1173(sp)
 2000c18:	84000094 	ori	r16,r16,2
 2000c1c:	00c00084 	movi	r3,2
 2000c20:	d8012585 	stb	zero,1174(sp)
 2000c24:	003ed906 	br	200078c <___vfprintf_internal_r+0x35c>
 2000c28:	84001014 	ori	r16,r16,64
 2000c2c:	ac800007 	ldb	r18,0(r21)
 2000c30:	003e5d06 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000c34:	ac800007 	ldb	r18,0(r21)
 2000c38:	a805883a 	mov	r2,r21
 2000c3c:	91c43226 	beq	r18,r7,2001d08 <___vfprintf_internal_r+0x18d8>
 2000c40:	84000414 	ori	r16,r16,16
 2000c44:	003e5806 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000c48:	d8c12d17 	ldw	r3,1204(sp)
 2000c4c:	02000044 	movi	r8,1
 2000c50:	da012815 	stw	r8,1184(sp)
 2000c54:	18800017 	ldw	r2,0(r3)
 2000c58:	18c00104 	addi	r3,r3,4
 2000c5c:	d8012585 	stb	zero,1174(sp)
 2000c60:	d8810405 	stb	r2,1040(sp)
 2000c64:	d8c12d15 	stw	r3,1204(sp)
 2000c68:	da012b15 	stw	r8,1196(sp)
 2000c6c:	dcc10404 	addi	r19,sp,1040
 2000c70:	d8013115 	stw	zero,1220(sp)
 2000c74:	003ee006 	br	20007f8 <___vfprintf_internal_r+0x3c8>
 2000c78:	8080080c 	andi	r2,r16,32
 2000c7c:	10031026 	beq	r2,zero,20018c0 <___vfprintf_internal_r+0x1490>
 2000c80:	d9012d17 	ldw	r4,1204(sp)
 2000c84:	da012c17 	ldw	r8,1200(sp)
 2000c88:	20800017 	ldw	r2,0(r4)
 2000c8c:	4007d7fa 	srai	r3,r8,31
 2000c90:	21000104 	addi	r4,r4,4
 2000c94:	d9012d15 	stw	r4,1204(sp)
 2000c98:	12000015 	stw	r8,0(r2)
 2000c9c:	10c00115 	stw	r3,4(r2)
 2000ca0:	003e1906 	br	2000508 <___vfprintf_internal_r+0xd8>
 2000ca4:	da012d17 	ldw	r8,1204(sp)
 2000ca8:	d9012d17 	ldw	r4,1204(sp)
 2000cac:	42000017 	ldw	r8,0(r8)
 2000cb0:	20800104 	addi	r2,r4,4
 2000cb4:	da012e15 	stw	r8,1208(sp)
 2000cb8:	403f2f16 	blt	r8,zero,2000978 <___vfprintf_internal_r+0x548>
 2000cbc:	d8812d15 	stw	r2,1204(sp)
 2000cc0:	ac800007 	ldb	r18,0(r21)
 2000cc4:	003e3806 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000cc8:	0009883a 	mov	r4,zero
 2000ccc:	90bff404 	addi	r2,r18,-48
 2000cd0:	ac800007 	ldb	r18,0(r21)
 2000cd4:	210002a4 	muli	r4,r4,10
 2000cd8:	ad400044 	addi	r21,r21,1
 2000cdc:	2089883a 	add	r4,r4,r2
 2000ce0:	90bff404 	addi	r2,r18,-48
 2000ce4:	28bffa2e 	bgeu	r5,r2,2000cd0 <___vfprintf_internal_r+0x8a0>
 2000ce8:	d9012e15 	stw	r4,1208(sp)
 2000cec:	003e2f06 	br	20005ac <___vfprintf_internal_r+0x17c>
 2000cf0:	8080020c 	andi	r2,r16,8
 2000cf4:	1002d426 	beq	r2,zero,2001848 <___vfprintf_internal_r+0x1418>
 2000cf8:	d8c12d17 	ldw	r3,1204(sp)
 2000cfc:	1d800017 	ldw	r22,0(r3)
 2000d00:	1d000117 	ldw	r20,4(r3)
 2000d04:	18c00204 	addi	r3,r3,8
 2000d08:	d8c12d15 	stw	r3,1204(sp)
 2000d0c:	dd813315 	stw	r22,1228(sp)
 2000d10:	dd013415 	stw	r20,1232(sp)
 2000d14:	b009883a 	mov	r4,r22
 2000d18:	a00b883a 	mov	r5,r20
 2000d1c:	da413c15 	stw	r9,1264(sp)
 2000d20:	2006de80 	call	2006de8 <__isinfd>
 2000d24:	da413c17 	ldw	r9,1264(sp)
 2000d28:	b009883a 	mov	r4,r22
 2000d2c:	a00b883a 	mov	r5,r20
 2000d30:	10035726 	beq	r2,zero,2001a90 <___vfprintf_internal_r+0x1660>
 2000d34:	000d883a 	mov	r6,zero
 2000d38:	000f883a 	mov	r7,zero
 2000d3c:	2008b140 	call	2008b14 <__ltdf2>
 2000d40:	da413c17 	ldw	r9,1264(sp)
 2000d44:	10041b16 	blt	r2,zero,2001db4 <___vfprintf_internal_r+0x1984>
 2000d48:	d8812583 	ldbu	r2,1174(sp)
 2000d4c:	00c011c4 	movi	r3,71
 2000d50:	1c830b16 	blt	r3,r18,2001980 <___vfprintf_internal_r+0x1550>
 2000d54:	04c08074 	movhi	r19,513
 2000d58:	9cee7804 	addi	r19,r19,-17952
 2000d5c:	020000c4 	movi	r8,3
 2000d60:	00ffdfc4 	movi	r3,-129
 2000d64:	da012815 	stw	r8,1184(sp)
 2000d68:	80e0703a 	and	r16,r16,r3
 2000d6c:	da012b15 	stw	r8,1196(sp)
 2000d70:	d8013115 	stw	zero,1220(sp)
 2000d74:	003e9906 	br	20007dc <___vfprintf_internal_r+0x3ac>
 2000d78:	d8812d17 	ldw	r2,1204(sp)
 2000d7c:	d8c12d17 	ldw	r3,1204(sp)
 2000d80:	02008074 	movhi	r8,513
 2000d84:	422e8104 	addi	r8,r8,-17916
 2000d88:	15c00017 	ldw	r23,0(r2)
 2000d8c:	00800c04 	movi	r2,48
 2000d90:	18c00104 	addi	r3,r3,4
 2000d94:	d8812505 	stb	r2,1172(sp)
 2000d98:	00801e04 	movi	r2,120
 2000d9c:	d8812545 	stb	r2,1173(sp)
 2000da0:	d8c12d15 	stw	r3,1204(sp)
 2000da4:	002d883a 	mov	r22,zero
 2000da8:	84000094 	ori	r16,r16,2
 2000dac:	da013615 	stw	r8,1240(sp)
 2000db0:	00c00084 	movi	r3,2
 2000db4:	04801e04 	movi	r18,120
 2000db8:	b805883a 	mov	r2,r23
 2000dbc:	d8012585 	stb	zero,1174(sp)
 2000dc0:	003e7206 	br	200078c <___vfprintf_internal_r+0x35c>
 2000dc4:	84000814 	ori	r16,r16,32
 2000dc8:	ac800007 	ldb	r18,0(r21)
 2000dcc:	003df606 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000dd0:	d8812d17 	ldw	r2,1204(sp)
 2000dd4:	d8012585 	stb	zero,1174(sp)
 2000dd8:	14c00017 	ldw	r19,0(r2)
 2000ddc:	15c00104 	addi	r23,r2,4
 2000de0:	98040126 	beq	r19,zero,2001de8 <___vfprintf_internal_r+0x19b8>
 2000de4:	9809883a 	mov	r4,r19
 2000de8:	e003dd16 	blt	fp,zero,2001d60 <___vfprintf_internal_r+0x1930>
 2000dec:	000b883a 	mov	r5,zero
 2000df0:	e00d883a 	mov	r6,fp
 2000df4:	da413c15 	stw	r9,1264(sp)
 2000df8:	200552c0 	call	200552c <memchr>
 2000dfc:	da413c17 	ldw	r9,1264(sp)
 2000e00:	10042e26 	beq	r2,zero,2001ebc <___vfprintf_internal_r+0x1a8c>
 2000e04:	14c5c83a 	sub	r2,r2,r19
 2000e08:	d8812b15 	stw	r2,1196(sp)
 2000e0c:	e083790e 	bge	fp,r2,2001bf4 <___vfprintf_internal_r+0x17c4>
 2000e10:	df012815 	stw	fp,1184(sp)
 2000e14:	e0049516 	blt	fp,zero,200206c <___vfprintf_internal_r+0x1c3c>
 2000e18:	d8812583 	ldbu	r2,1174(sp)
 2000e1c:	df012b15 	stw	fp,1196(sp)
 2000e20:	ddc12d15 	stw	r23,1204(sp)
 2000e24:	d8013115 	stw	zero,1220(sp)
 2000e28:	003e6c06 	br	20007dc <___vfprintf_internal_r+0x3ac>
 2000e2c:	02008074 	movhi	r8,513
 2000e30:	422e8104 	addi	r8,r8,-17916
 2000e34:	da013615 	stw	r8,1240(sp)
 2000e38:	8080080c 	andi	r2,r16,32
 2000e3c:	103f6a1e 	bne	r2,zero,2000be8 <___vfprintf_internal_r+0x7b8>
 2000e40:	8080040c 	andi	r2,r16,16
 2000e44:	10029326 	beq	r2,zero,2001894 <___vfprintf_internal_r+0x1464>
 2000e48:	d8c12d17 	ldw	r3,1204(sp)
 2000e4c:	002d883a 	mov	r22,zero
 2000e50:	1dc00017 	ldw	r23,0(r3)
 2000e54:	18c00104 	addi	r3,r3,4
 2000e58:	d8c12d15 	stw	r3,1204(sp)
 2000e5c:	003f6706 	br	2000bfc <___vfprintf_internal_r+0x7cc>
 2000e60:	84000214 	ori	r16,r16,8
 2000e64:	ac800007 	ldb	r18,0(r21)
 2000e68:	003dcf06 	br	20005a8 <___vfprintf_internal_r+0x178>
 2000e6c:	da011d17 	ldw	r8,1140(sp)
 2000e70:	d8c11c17 	ldw	r3,1136(sp)
 2000e74:	d8812587 	ldb	r2,1174(sp)
 2000e78:	10000b26 	beq	r2,zero,2000ea8 <___vfprintf_internal_r+0xa78>
 2000e7c:	d8812584 	addi	r2,sp,1174
 2000e80:	48800015 	stw	r2,0(r9)
 2000e84:	00800044 	movi	r2,1
 2000e88:	48800115 	stw	r2,4(r9)
 2000e8c:	4091883a 	add	r8,r8,r2
 2000e90:	1887883a 	add	r3,r3,r2
 2000e94:	da011d15 	stw	r8,1140(sp)
 2000e98:	d8c11c15 	stw	r3,1136(sp)
 2000e9c:	008001c4 	movi	r2,7
 2000ea0:	10c18516 	blt	r2,r3,20014b8 <___vfprintf_internal_r+0x1088>
 2000ea4:	4a400204 	addi	r9,r9,8
 2000ea8:	d9012a17 	ldw	r4,1192(sp)
 2000eac:	20000b26 	beq	r4,zero,2000edc <___vfprintf_internal_r+0xaac>
 2000eb0:	d8812504 	addi	r2,sp,1172
 2000eb4:	48800015 	stw	r2,0(r9)
 2000eb8:	00800084 	movi	r2,2
 2000ebc:	48800115 	stw	r2,4(r9)
 2000ec0:	4091883a 	add	r8,r8,r2
 2000ec4:	18c00044 	addi	r3,r3,1
 2000ec8:	da011d15 	stw	r8,1140(sp)
 2000ecc:	d8c11c15 	stw	r3,1136(sp)
 2000ed0:	008001c4 	movi	r2,7
 2000ed4:	10c18116 	blt	r2,r3,20014dc <___vfprintf_internal_r+0x10ac>
 2000ed8:	4a400204 	addi	r9,r9,8
 2000edc:	d9012f17 	ldw	r4,1212(sp)
 2000ee0:	00802004 	movi	r2,128
 2000ee4:	2080fc26 	beq	r4,r2,20012d8 <___vfprintf_internal_r+0xea8>
 2000ee8:	d8813117 	ldw	r2,1220(sp)
 2000eec:	d9012b17 	ldw	r4,1196(sp)
 2000ef0:	112fc83a 	sub	r23,r2,r4
 2000ef4:	05c02a0e 	bge	zero,r23,2000fa0 <___vfprintf_internal_r+0xb70>
 2000ef8:	07000404 	movi	fp,16
 2000efc:	05008074 	movhi	r20,513
 2000f00:	a52e8c84 	addi	r20,r20,-17870
 2000f04:	e5c01d0e 	bge	fp,r23,2000f7c <___vfprintf_internal_r+0xb4c>
 2000f08:	dc812a15 	stw	r18,1192(sp)
 2000f0c:	058001c4 	movi	r22,7
 2000f10:	a025883a 	mov	r18,r20
 2000f14:	8029883a 	mov	r20,r16
 2000f18:	dc012917 	ldw	r16,1188(sp)
 2000f1c:	00000306 	br	2000f2c <___vfprintf_internal_r+0xafc>
 2000f20:	bdfffc04 	addi	r23,r23,-16
 2000f24:	4a400204 	addi	r9,r9,8
 2000f28:	e5c0110e 	bge	fp,r23,2000f70 <___vfprintf_internal_r+0xb40>
 2000f2c:	4c800015 	stw	r18,0(r9)
 2000f30:	4f000115 	stw	fp,4(r9)
 2000f34:	42000404 	addi	r8,r8,16
 2000f38:	18c00044 	addi	r3,r3,1
 2000f3c:	da011d15 	stw	r8,1140(sp)
 2000f40:	d8c11c15 	stw	r3,1136(sp)
 2000f44:	b0fff60e 	bge	r22,r3,2000f20 <___vfprintf_internal_r+0xaf0>
 2000f48:	8809883a 	mov	r4,r17
 2000f4c:	800b883a 	mov	r5,r16
 2000f50:	d9811b04 	addi	r6,sp,1132
 2000f54:	20003fc0 	call	20003fc <__sprint_r>
 2000f58:	103ec81e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2000f5c:	bdfffc04 	addi	r23,r23,-16
 2000f60:	da011d17 	ldw	r8,1140(sp)
 2000f64:	d8c11c17 	ldw	r3,1136(sp)
 2000f68:	da400404 	addi	r9,sp,16
 2000f6c:	e5ffef16 	blt	fp,r23,2000f2c <___vfprintf_internal_r+0xafc>
 2000f70:	a021883a 	mov	r16,r20
 2000f74:	9029883a 	mov	r20,r18
 2000f78:	dc812a17 	ldw	r18,1192(sp)
 2000f7c:	4d000015 	stw	r20,0(r9)
 2000f80:	4dc00115 	stw	r23,4(r9)
 2000f84:	45d1883a 	add	r8,r8,r23
 2000f88:	18c00044 	addi	r3,r3,1
 2000f8c:	da011d15 	stw	r8,1140(sp)
 2000f90:	d8c11c15 	stw	r3,1136(sp)
 2000f94:	008001c4 	movi	r2,7
 2000f98:	10c13e16 	blt	r2,r3,2001494 <___vfprintf_internal_r+0x1064>
 2000f9c:	4a400204 	addi	r9,r9,8
 2000fa0:	8080400c 	andi	r2,r16,256
 2000fa4:	1000831e 	bne	r2,zero,20011b4 <___vfprintf_internal_r+0xd84>
 2000fa8:	d8812b17 	ldw	r2,1196(sp)
 2000fac:	4cc00015 	stw	r19,0(r9)
 2000fb0:	48800115 	stw	r2,4(r9)
 2000fb4:	4091883a 	add	r8,r8,r2
 2000fb8:	18c00044 	addi	r3,r3,1
 2000fbc:	da011d15 	stw	r8,1140(sp)
 2000fc0:	d8c11c15 	stw	r3,1136(sp)
 2000fc4:	008001c4 	movi	r2,7
 2000fc8:	10c05316 	blt	r2,r3,2001118 <___vfprintf_internal_r+0xce8>
 2000fcc:	4a400204 	addi	r9,r9,8
 2000fd0:	8400010c 	andi	r16,r16,4
 2000fd4:	80002e26 	beq	r16,zero,2001090 <___vfprintf_internal_r+0xc60>
 2000fd8:	d8812e17 	ldw	r2,1208(sp)
 2000fdc:	d8c12817 	ldw	r3,1184(sp)
 2000fe0:	10e1c83a 	sub	r16,r2,r3
 2000fe4:	04002a0e 	bge	zero,r16,2001090 <___vfprintf_internal_r+0xc60>
 2000fe8:	04800404 	movi	r18,16
 2000fec:	d8c11c17 	ldw	r3,1136(sp)
 2000ff0:	05c08074 	movhi	r23,513
 2000ff4:	bdee8884 	addi	r23,r23,-17886
 2000ff8:	9400170e 	bge	r18,r16,2001058 <___vfprintf_internal_r+0xc28>
 2000ffc:	04c001c4 	movi	r19,7
 2001000:	dd012917 	ldw	r20,1188(sp)
 2001004:	00000306 	br	2001014 <___vfprintf_internal_r+0xbe4>
 2001008:	843ffc04 	addi	r16,r16,-16
 200100c:	4a400204 	addi	r9,r9,8
 2001010:	9400110e 	bge	r18,r16,2001058 <___vfprintf_internal_r+0xc28>
 2001014:	4dc00015 	stw	r23,0(r9)
 2001018:	4c800115 	stw	r18,4(r9)
 200101c:	42000404 	addi	r8,r8,16
 2001020:	18c00044 	addi	r3,r3,1
 2001024:	da011d15 	stw	r8,1140(sp)
 2001028:	d8c11c15 	stw	r3,1136(sp)
 200102c:	98fff60e 	bge	r19,r3,2001008 <___vfprintf_internal_r+0xbd8>
 2001030:	8809883a 	mov	r4,r17
 2001034:	a00b883a 	mov	r5,r20
 2001038:	d9811b04 	addi	r6,sp,1132
 200103c:	20003fc0 	call	20003fc <__sprint_r>
 2001040:	103e8e1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001044:	843ffc04 	addi	r16,r16,-16
 2001048:	da011d17 	ldw	r8,1140(sp)
 200104c:	d8c11c17 	ldw	r3,1136(sp)
 2001050:	da400404 	addi	r9,sp,16
 2001054:	943fef16 	blt	r18,r16,2001014 <___vfprintf_internal_r+0xbe4>
 2001058:	4dc00015 	stw	r23,0(r9)
 200105c:	4c000115 	stw	r16,4(r9)
 2001060:	8211883a 	add	r8,r16,r8
 2001064:	18c00044 	addi	r3,r3,1
 2001068:	da011d15 	stw	r8,1140(sp)
 200106c:	d8c11c15 	stw	r3,1136(sp)
 2001070:	008001c4 	movi	r2,7
 2001074:	10c0060e 	bge	r2,r3,2001090 <___vfprintf_internal_r+0xc60>
 2001078:	d9412917 	ldw	r5,1188(sp)
 200107c:	8809883a 	mov	r4,r17
 2001080:	d9811b04 	addi	r6,sp,1132
 2001084:	20003fc0 	call	20003fc <__sprint_r>
 2001088:	103e7c1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 200108c:	da011d17 	ldw	r8,1140(sp)
 2001090:	dd012817 	ldw	r20,1184(sp)
 2001094:	d9012e17 	ldw	r4,1208(sp)
 2001098:	a100010e 	bge	r20,r4,20010a0 <___vfprintf_internal_r+0xc70>
 200109c:	2029883a 	mov	r20,r4
 20010a0:	d8812c17 	ldw	r2,1200(sp)
 20010a4:	1505883a 	add	r2,r2,r20
 20010a8:	d8812c15 	stw	r2,1200(sp)
 20010ac:	4000b91e 	bne	r8,zero,2001394 <___vfprintf_internal_r+0xf64>
 20010b0:	d8011c15 	stw	zero,1136(sp)
 20010b4:	a8800007 	ldb	r2,0(r21)
 20010b8:	da400404 	addi	r9,sp,16
 20010bc:	103d141e 	bne	r2,zero,2000510 <___vfprintf_internal_r+0xe0>
 20010c0:	a825883a 	mov	r18,r21
 20010c4:	003d2a06 	br	2000570 <___vfprintf_internal_r+0x140>
 20010c8:	d9412917 	ldw	r5,1188(sp)
 20010cc:	8809883a 	mov	r4,r17
 20010d0:	d9811b04 	addi	r6,sp,1132
 20010d4:	20003fc0 	call	20003fc <__sprint_r>
 20010d8:	103e681e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20010dc:	da011d17 	ldw	r8,1140(sp)
 20010e0:	da400404 	addi	r9,sp,16
 20010e4:	8080004c 	andi	r2,r16,1
 20010e8:	103fb926 	beq	r2,zero,2000fd0 <___vfprintf_internal_r+0xba0>
 20010ec:	d8c11c17 	ldw	r3,1136(sp)
 20010f0:	d9013717 	ldw	r4,1244(sp)
 20010f4:	00800044 	movi	r2,1
 20010f8:	48800115 	stw	r2,4(r9)
 20010fc:	49000015 	stw	r4,0(r9)
 2001100:	4091883a 	add	r8,r8,r2
 2001104:	1887883a 	add	r3,r3,r2
 2001108:	da011d15 	stw	r8,1140(sp)
 200110c:	d8c11c15 	stw	r3,1136(sp)
 2001110:	008001c4 	movi	r2,7
 2001114:	10ffad0e 	bge	r2,r3,2000fcc <___vfprintf_internal_r+0xb9c>
 2001118:	d9412917 	ldw	r5,1188(sp)
 200111c:	8809883a 	mov	r4,r17
 2001120:	d9811b04 	addi	r6,sp,1132
 2001124:	20003fc0 	call	20003fc <__sprint_r>
 2001128:	103e541e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 200112c:	da400404 	addi	r9,sp,16
 2001130:	da011d17 	ldw	r8,1140(sp)
 2001134:	003fa606 	br	2000fd0 <___vfprintf_internal_r+0xba0>
 2001138:	18803fcc 	andi	r2,r3,255
 200113c:	00c00044 	movi	r3,1
 2001140:	10c10126 	beq	r2,r3,2001548 <___vfprintf_internal_r+0x1118>
 2001144:	00c00084 	movi	r3,2
 2001148:	10c0f026 	beq	r2,r3,200150c <___vfprintf_internal_r+0x10dc>
 200114c:	d8c10dc4 	addi	r3,sp,1079
 2001150:	b808d0fa 	srli	r4,r23,3
 2001154:	b00a977a 	slli	r5,r22,29
 2001158:	b02cd0fa 	srli	r22,r22,3
 200115c:	bdc001cc 	andi	r23,r23,7
 2001160:	b8800c04 	addi	r2,r23,48
 2001164:	292eb03a 	or	r23,r5,r4
 2001168:	18800005 	stb	r2,0(r3)
 200116c:	bd88b03a 	or	r4,r23,r22
 2001170:	1827883a 	mov	r19,r3
 2001174:	18ffffc4 	addi	r3,r3,-1
 2001178:	203ff51e 	bne	r4,zero,2001150 <___vfprintf_internal_r+0xd20>
 200117c:	8100004c 	andi	r4,r16,1
 2001180:	980b883a 	mov	r5,r19
 2001184:	20000726 	beq	r4,zero,20011a4 <___vfprintf_internal_r+0xd74>
 2001188:	10803fcc 	andi	r2,r2,255
 200118c:	1080201c 	xori	r2,r2,128
 2001190:	10bfe004 	addi	r2,r2,-128
 2001194:	01000c04 	movi	r4,48
 2001198:	11000226 	beq	r2,r4,20011a4 <___vfprintf_internal_r+0xd74>
 200119c:	1827883a 	mov	r19,r3
 20011a0:	293fffc5 	stb	r4,-1(r5)
 20011a4:	d8812717 	ldw	r2,1180(sp)
 20011a8:	14c5c83a 	sub	r2,r2,r19
 20011ac:	d8812b15 	stw	r2,1196(sp)
 20011b0:	003d8406 	br	20007c4 <___vfprintf_internal_r+0x394>
 20011b4:	00801944 	movi	r2,101
 20011b8:	14807c0e 	bge	r2,r18,20013ac <___vfprintf_internal_r+0xf7c>
 20011bc:	d9013317 	ldw	r4,1228(sp)
 20011c0:	d9413417 	ldw	r5,1232(sp)
 20011c4:	000d883a 	mov	r6,zero
 20011c8:	000f883a 	mov	r7,zero
 20011cc:	d8c13b15 	stw	r3,1260(sp)
 20011d0:	da013a15 	stw	r8,1256(sp)
 20011d4:	da413c15 	stw	r9,1264(sp)
 20011d8:	20089940 	call	2008994 <__eqdf2>
 20011dc:	d8c13b17 	ldw	r3,1260(sp)
 20011e0:	da013a17 	ldw	r8,1256(sp)
 20011e4:	da413c17 	ldw	r9,1264(sp)
 20011e8:	1001001e 	bne	r2,zero,20015ec <___vfprintf_internal_r+0x11bc>
 20011ec:	00808074 	movhi	r2,513
 20011f0:	10ae8804 	addi	r2,r2,-17888
 20011f4:	48800015 	stw	r2,0(r9)
 20011f8:	00800044 	movi	r2,1
 20011fc:	48800115 	stw	r2,4(r9)
 2001200:	4091883a 	add	r8,r8,r2
 2001204:	1887883a 	add	r3,r3,r2
 2001208:	da011d15 	stw	r8,1140(sp)
 200120c:	d8c11c15 	stw	r3,1136(sp)
 2001210:	008001c4 	movi	r2,7
 2001214:	10c1dd16 	blt	r2,r3,200198c <___vfprintf_internal_r+0x155c>
 2001218:	4a400204 	addi	r9,r9,8
 200121c:	d8812417 	ldw	r2,1168(sp)
 2001220:	d8c13217 	ldw	r3,1224(sp)
 2001224:	10c00216 	blt	r2,r3,2001230 <___vfprintf_internal_r+0xe00>
 2001228:	8080004c 	andi	r2,r16,1
 200122c:	103f6826 	beq	r2,zero,2000fd0 <___vfprintf_internal_r+0xba0>
 2001230:	d8c11c17 	ldw	r3,1136(sp)
 2001234:	d9013717 	ldw	r4,1244(sp)
 2001238:	00800044 	movi	r2,1
 200123c:	48800115 	stw	r2,4(r9)
 2001240:	49000015 	stw	r4,0(r9)
 2001244:	4091883a 	add	r8,r8,r2
 2001248:	1887883a 	add	r3,r3,r2
 200124c:	da011d15 	stw	r8,1140(sp)
 2001250:	d8c11c15 	stw	r3,1136(sp)
 2001254:	008001c4 	movi	r2,7
 2001258:	10c2af16 	blt	r2,r3,2001d18 <___vfprintf_internal_r+0x18e8>
 200125c:	4a400204 	addi	r9,r9,8
 2001260:	d8813217 	ldw	r2,1224(sp)
 2001264:	14bfffc4 	addi	r18,r2,-1
 2001268:	04bf590e 	bge	zero,r18,2000fd0 <___vfprintf_internal_r+0xba0>
 200126c:	04c00404 	movi	r19,16
 2001270:	d8c11c17 	ldw	r3,1136(sp)
 2001274:	05008074 	movhi	r20,513
 2001278:	a52e8c84 	addi	r20,r20,-17870
 200127c:	9c81630e 	bge	r19,r18,200180c <___vfprintf_internal_r+0x13dc>
 2001280:	058001c4 	movi	r22,7
 2001284:	ddc12917 	ldw	r23,1188(sp)
 2001288:	00000306 	br	2001298 <___vfprintf_internal_r+0xe68>
 200128c:	4a400204 	addi	r9,r9,8
 2001290:	94bffc04 	addi	r18,r18,-16
 2001294:	9c815d0e 	bge	r19,r18,200180c <___vfprintf_internal_r+0x13dc>
 2001298:	4d000015 	stw	r20,0(r9)
 200129c:	4cc00115 	stw	r19,4(r9)
 20012a0:	42000404 	addi	r8,r8,16
 20012a4:	18c00044 	addi	r3,r3,1
 20012a8:	da011d15 	stw	r8,1140(sp)
 20012ac:	d8c11c15 	stw	r3,1136(sp)
 20012b0:	b0fff60e 	bge	r22,r3,200128c <___vfprintf_internal_r+0xe5c>
 20012b4:	8809883a 	mov	r4,r17
 20012b8:	b80b883a 	mov	r5,r23
 20012bc:	d9811b04 	addi	r6,sp,1132
 20012c0:	20003fc0 	call	20003fc <__sprint_r>
 20012c4:	103ded1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20012c8:	da011d17 	ldw	r8,1140(sp)
 20012cc:	d8c11c17 	ldw	r3,1136(sp)
 20012d0:	da400404 	addi	r9,sp,16
 20012d4:	003fee06 	br	2001290 <___vfprintf_internal_r+0xe60>
 20012d8:	d8812e17 	ldw	r2,1208(sp)
 20012dc:	d9012817 	ldw	r4,1184(sp)
 20012e0:	112fc83a 	sub	r23,r2,r4
 20012e4:	05ff000e 	bge	zero,r23,2000ee8 <___vfprintf_internal_r+0xab8>
 20012e8:	07000404 	movi	fp,16
 20012ec:	05008074 	movhi	r20,513
 20012f0:	a52e8c84 	addi	r20,r20,-17870
 20012f4:	e5c01d0e 	bge	fp,r23,200136c <___vfprintf_internal_r+0xf3c>
 20012f8:	dc812a15 	stw	r18,1192(sp)
 20012fc:	058001c4 	movi	r22,7
 2001300:	a025883a 	mov	r18,r20
 2001304:	8029883a 	mov	r20,r16
 2001308:	dc012917 	ldw	r16,1188(sp)
 200130c:	00000306 	br	200131c <___vfprintf_internal_r+0xeec>
 2001310:	bdfffc04 	addi	r23,r23,-16
 2001314:	4a400204 	addi	r9,r9,8
 2001318:	e5c0110e 	bge	fp,r23,2001360 <___vfprintf_internal_r+0xf30>
 200131c:	4c800015 	stw	r18,0(r9)
 2001320:	4f000115 	stw	fp,4(r9)
 2001324:	42000404 	addi	r8,r8,16
 2001328:	18c00044 	addi	r3,r3,1
 200132c:	da011d15 	stw	r8,1140(sp)
 2001330:	d8c11c15 	stw	r3,1136(sp)
 2001334:	b0fff60e 	bge	r22,r3,2001310 <___vfprintf_internal_r+0xee0>
 2001338:	8809883a 	mov	r4,r17
 200133c:	800b883a 	mov	r5,r16
 2001340:	d9811b04 	addi	r6,sp,1132
 2001344:	20003fc0 	call	20003fc <__sprint_r>
 2001348:	103dcc1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 200134c:	bdfffc04 	addi	r23,r23,-16
 2001350:	da011d17 	ldw	r8,1140(sp)
 2001354:	d8c11c17 	ldw	r3,1136(sp)
 2001358:	da400404 	addi	r9,sp,16
 200135c:	e5ffef16 	blt	fp,r23,200131c <___vfprintf_internal_r+0xeec>
 2001360:	a021883a 	mov	r16,r20
 2001364:	9029883a 	mov	r20,r18
 2001368:	dc812a17 	ldw	r18,1192(sp)
 200136c:	4d000015 	stw	r20,0(r9)
 2001370:	4dc00115 	stw	r23,4(r9)
 2001374:	45d1883a 	add	r8,r8,r23
 2001378:	18c00044 	addi	r3,r3,1
 200137c:	da011d15 	stw	r8,1140(sp)
 2001380:	d8c11c15 	stw	r3,1136(sp)
 2001384:	008001c4 	movi	r2,7
 2001388:	10c11716 	blt	r2,r3,20017e8 <___vfprintf_internal_r+0x13b8>
 200138c:	4a400204 	addi	r9,r9,8
 2001390:	003ed506 	br	2000ee8 <___vfprintf_internal_r+0xab8>
 2001394:	d9412917 	ldw	r5,1188(sp)
 2001398:	8809883a 	mov	r4,r17
 200139c:	d9811b04 	addi	r6,sp,1132
 20013a0:	20003fc0 	call	20003fc <__sprint_r>
 20013a4:	103f4226 	beq	r2,zero,20010b0 <___vfprintf_internal_r+0xc80>
 20013a8:	003db406 	br	2000a7c <___vfprintf_internal_r+0x64c>
 20013ac:	d9013217 	ldw	r4,1224(sp)
 20013b0:	00800044 	movi	r2,1
 20013b4:	4cc00015 	stw	r19,0(r9)
 20013b8:	1100e10e 	bge	r2,r4,2001740 <___vfprintf_internal_r+0x1310>
 20013bc:	00800044 	movi	r2,1
 20013c0:	48800115 	stw	r2,4(r9)
 20013c4:	4091883a 	add	r8,r8,r2
 20013c8:	1887883a 	add	r3,r3,r2
 20013cc:	da011d15 	stw	r8,1140(sp)
 20013d0:	d8c11c15 	stw	r3,1136(sp)
 20013d4:	008001c4 	movi	r2,7
 20013d8:	10c0ed16 	blt	r2,r3,2001790 <___vfprintf_internal_r+0x1360>
 20013dc:	4a400204 	addi	r9,r9,8
 20013e0:	d8813717 	ldw	r2,1244(sp)
 20013e4:	48800015 	stw	r2,0(r9)
 20013e8:	00800044 	movi	r2,1
 20013ec:	48800115 	stw	r2,4(r9)
 20013f0:	4091883a 	add	r8,r8,r2
 20013f4:	1887883a 	add	r3,r3,r2
 20013f8:	da011d15 	stw	r8,1140(sp)
 20013fc:	d8c11c15 	stw	r3,1136(sp)
 2001400:	008001c4 	movi	r2,7
 2001404:	10c0eb16 	blt	r2,r3,20017b4 <___vfprintf_internal_r+0x1384>
 2001408:	4c800204 	addi	r18,r9,8
 200140c:	d9013317 	ldw	r4,1228(sp)
 2001410:	d9413417 	ldw	r5,1232(sp)
 2001414:	000d883a 	mov	r6,zero
 2001418:	000f883a 	mov	r7,zero
 200141c:	d8c13b15 	stw	r3,1260(sp)
 2001420:	da013a15 	stw	r8,1256(sp)
 2001424:	20089f00 	call	20089f0 <__nedf2>
 2001428:	d8c13b17 	ldw	r3,1260(sp)
 200142c:	da013a17 	ldw	r8,1256(sp)
 2001430:	1000a626 	beq	r2,zero,20016cc <___vfprintf_internal_r+0x129c>
 2001434:	d9013217 	ldw	r4,1224(sp)
 2001438:	9cc00044 	addi	r19,r19,1
 200143c:	94c00015 	stw	r19,0(r18)
 2001440:	20bfffc4 	addi	r2,r4,-1
 2001444:	90800115 	stw	r2,4(r18)
 2001448:	4091883a 	add	r8,r8,r2
 200144c:	18c00044 	addi	r3,r3,1
 2001450:	da011d15 	stw	r8,1140(sp)
 2001454:	d8c11c15 	stw	r3,1136(sp)
 2001458:	008001c4 	movi	r2,7
 200145c:	10c0c316 	blt	r2,r3,200176c <___vfprintf_internal_r+0x133c>
 2001460:	94800204 	addi	r18,r18,8
 2001464:	d9013517 	ldw	r4,1236(sp)
 2001468:	d8811fc4 	addi	r2,sp,1151
 200146c:	90800015 	stw	r2,0(r18)
 2001470:	91000115 	stw	r4,4(r18)
 2001474:	4111883a 	add	r8,r8,r4
 2001478:	18c00044 	addi	r3,r3,1
 200147c:	da011d15 	stw	r8,1140(sp)
 2001480:	d8c11c15 	stw	r3,1136(sp)
 2001484:	008001c4 	movi	r2,7
 2001488:	10ff2316 	blt	r2,r3,2001118 <___vfprintf_internal_r+0xce8>
 200148c:	92400204 	addi	r9,r18,8
 2001490:	003ecf06 	br	2000fd0 <___vfprintf_internal_r+0xba0>
 2001494:	d9412917 	ldw	r5,1188(sp)
 2001498:	8809883a 	mov	r4,r17
 200149c:	d9811b04 	addi	r6,sp,1132
 20014a0:	20003fc0 	call	20003fc <__sprint_r>
 20014a4:	103d751e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20014a8:	da011d17 	ldw	r8,1140(sp)
 20014ac:	d8c11c17 	ldw	r3,1136(sp)
 20014b0:	da400404 	addi	r9,sp,16
 20014b4:	003eba06 	br	2000fa0 <___vfprintf_internal_r+0xb70>
 20014b8:	d9412917 	ldw	r5,1188(sp)
 20014bc:	8809883a 	mov	r4,r17
 20014c0:	d9811b04 	addi	r6,sp,1132
 20014c4:	20003fc0 	call	20003fc <__sprint_r>
 20014c8:	103d6c1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20014cc:	da011d17 	ldw	r8,1140(sp)
 20014d0:	d8c11c17 	ldw	r3,1136(sp)
 20014d4:	da400404 	addi	r9,sp,16
 20014d8:	003e7306 	br	2000ea8 <___vfprintf_internal_r+0xa78>
 20014dc:	d9412917 	ldw	r5,1188(sp)
 20014e0:	8809883a 	mov	r4,r17
 20014e4:	d9811b04 	addi	r6,sp,1132
 20014e8:	20003fc0 	call	20003fc <__sprint_r>
 20014ec:	103d631e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20014f0:	da011d17 	ldw	r8,1140(sp)
 20014f4:	d8c11c17 	ldw	r3,1136(sp)
 20014f8:	da400404 	addi	r9,sp,16
 20014fc:	003e7706 	br	2000edc <___vfprintf_internal_r+0xaac>
 2001500:	d8012b15 	stw	zero,1196(sp)
 2001504:	dcc10e04 	addi	r19,sp,1080
 2001508:	003cae06 	br	20007c4 <___vfprintf_internal_r+0x394>
 200150c:	d9413617 	ldw	r5,1240(sp)
 2001510:	d8810dc4 	addi	r2,sp,1079
 2001514:	b8c003cc 	andi	r3,r23,15
 2001518:	b008973a 	slli	r4,r22,28
 200151c:	28c7883a 	add	r3,r5,r3
 2001520:	b82ed13a 	srli	r23,r23,4
 2001524:	18c00003 	ldbu	r3,0(r3)
 2001528:	b02cd13a 	srli	r22,r22,4
 200152c:	25eeb03a 	or	r23,r4,r23
 2001530:	10c00005 	stb	r3,0(r2)
 2001534:	bd86b03a 	or	r3,r23,r22
 2001538:	1027883a 	mov	r19,r2
 200153c:	10bfffc4 	addi	r2,r2,-1
 2001540:	183ff41e 	bne	r3,zero,2001514 <___vfprintf_internal_r+0x10e4>
 2001544:	003f1706 	br	20011a4 <___vfprintf_internal_r+0xd74>
 2001548:	b0025826 	beq	r22,zero,2001eac <___vfprintf_internal_r+0x1a7c>
 200154c:	b807883a 	mov	r3,r23
 2001550:	d8810dc4 	addi	r2,sp,1079
 2001554:	882f883a 	mov	r23,r17
 2001558:	04c00244 	movi	r19,9
 200155c:	8023883a 	mov	r17,r16
 2001560:	da412815 	stw	r9,1184(sp)
 2001564:	1821883a 	mov	r16,r3
 2001568:	8009883a 	mov	r4,r16
 200156c:	b00b883a 	mov	r5,r22
 2001570:	01800284 	movi	r6,10
 2001574:	000f883a 	mov	r7,zero
 2001578:	1029883a 	mov	r20,r2
 200157c:	2007b680 	call	2007b68 <__umoddi3>
 2001580:	10800c04 	addi	r2,r2,48
 2001584:	8009883a 	mov	r4,r16
 2001588:	b00b883a 	mov	r5,r22
 200158c:	a0800005 	stb	r2,0(r20)
 2001590:	01800284 	movi	r6,10
 2001594:	000f883a 	mov	r7,zero
 2001598:	20075a00 	call	20075a0 <__udivdi3>
 200159c:	1021883a 	mov	r16,r2
 20015a0:	182d883a 	mov	r22,r3
 20015a4:	a0bfffc4 	addi	r2,r20,-1
 20015a8:	183fef1e 	bne	r3,zero,2001568 <___vfprintf_internal_r+0x1138>
 20015ac:	9c3fee36 	bltu	r19,r16,2001568 <___vfprintf_internal_r+0x1138>
 20015b0:	da412817 	ldw	r9,1184(sp)
 20015b4:	8005883a 	mov	r2,r16
 20015b8:	8821883a 	mov	r16,r17
 20015bc:	b823883a 	mov	r17,r23
 20015c0:	102f883a 	mov	r23,r2
 20015c4:	d8812717 	ldw	r2,1180(sp)
 20015c8:	a4ffffc4 	addi	r19,r20,-1
 20015cc:	bdc00c04 	addi	r23,r23,48
 20015d0:	14c5c83a 	sub	r2,r2,r19
 20015d4:	a5ffffc5 	stb	r23,-1(r20)
 20015d8:	d8812b15 	stw	r2,1196(sp)
 20015dc:	003c7906 	br	20007c4 <___vfprintf_internal_r+0x394>
 20015e0:	00c00044 	movi	r3,1
 20015e4:	bd84b03a 	or	r2,r23,r22
 20015e8:	003c6806 	br	200078c <___vfprintf_internal_r+0x35c>
 20015ec:	dc812417 	ldw	r18,1168(sp)
 20015f0:	0480ee0e 	bge	zero,r18,20019ac <___vfprintf_internal_r+0x157c>
 20015f4:	d9013217 	ldw	r4,1224(sp)
 20015f8:	4cc00015 	stw	r19,0(r9)
 20015fc:	9100c616 	blt	r18,r4,2001918 <___vfprintf_internal_r+0x14e8>
 2001600:	49000115 	stw	r4,4(r9)
 2001604:	4111883a 	add	r8,r8,r4
 2001608:	18c00044 	addi	r3,r3,1
 200160c:	da011d15 	stw	r8,1140(sp)
 2001610:	d8c11c15 	stw	r3,1136(sp)
 2001614:	008001c4 	movi	r2,7
 2001618:	10c20916 	blt	r2,r3,2001e40 <___vfprintf_internal_r+0x1a10>
 200161c:	4a400204 	addi	r9,r9,8
 2001620:	d8813217 	ldw	r2,1224(sp)
 2001624:	90a5c83a 	sub	r18,r18,r2
 2001628:	04beae0e 	bge	zero,r18,20010e4 <___vfprintf_internal_r+0xcb4>
 200162c:	04c00404 	movi	r19,16
 2001630:	d8c11c17 	ldw	r3,1136(sp)
 2001634:	05008074 	movhi	r20,513
 2001638:	a52e8c84 	addi	r20,r20,-17870
 200163c:	9c81be0e 	bge	r19,r18,2001d38 <___vfprintf_internal_r+0x1908>
 2001640:	058001c4 	movi	r22,7
 2001644:	ddc12917 	ldw	r23,1188(sp)
 2001648:	00000306 	br	2001658 <___vfprintf_internal_r+0x1228>
 200164c:	4a400204 	addi	r9,r9,8
 2001650:	94bffc04 	addi	r18,r18,-16
 2001654:	9c81b80e 	bge	r19,r18,2001d38 <___vfprintf_internal_r+0x1908>
 2001658:	4d000015 	stw	r20,0(r9)
 200165c:	4cc00115 	stw	r19,4(r9)
 2001660:	42000404 	addi	r8,r8,16
 2001664:	18c00044 	addi	r3,r3,1
 2001668:	da011d15 	stw	r8,1140(sp)
 200166c:	d8c11c15 	stw	r3,1136(sp)
 2001670:	b0fff60e 	bge	r22,r3,200164c <___vfprintf_internal_r+0x121c>
 2001674:	8809883a 	mov	r4,r17
 2001678:	b80b883a 	mov	r5,r23
 200167c:	d9811b04 	addi	r6,sp,1132
 2001680:	20003fc0 	call	20003fc <__sprint_r>
 2001684:	103cfd1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001688:	da011d17 	ldw	r8,1140(sp)
 200168c:	d8c11c17 	ldw	r3,1136(sp)
 2001690:	da400404 	addi	r9,sp,16
 2001694:	003fee06 	br	2001650 <___vfprintf_internal_r+0x1220>
 2001698:	d9412917 	ldw	r5,1188(sp)
 200169c:	8809883a 	mov	r4,r17
 20016a0:	d9811b04 	addi	r6,sp,1132
 20016a4:	20003fc0 	call	20003fc <__sprint_r>
 20016a8:	103cf41e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20016ac:	da011d17 	ldw	r8,1140(sp)
 20016b0:	d8c11c17 	ldw	r3,1136(sp)
 20016b4:	da400404 	addi	r9,sp,16
 20016b8:	003dee06 	br	2000e74 <___vfprintf_internal_r+0xa44>
 20016bc:	00c00084 	movi	r3,2
 20016c0:	bd84b03a 	or	r2,r23,r22
 20016c4:	d8012585 	stb	zero,1174(sp)
 20016c8:	003c3006 	br	200078c <___vfprintf_internal_r+0x35c>
 20016cc:	d8813217 	ldw	r2,1224(sp)
 20016d0:	14ffffc4 	addi	r19,r2,-1
 20016d4:	04ff630e 	bge	zero,r19,2001464 <___vfprintf_internal_r+0x1034>
 20016d8:	05800404 	movi	r22,16
 20016dc:	05008074 	movhi	r20,513
 20016e0:	a52e8c84 	addi	r20,r20,-17870
 20016e4:	b4c03c0e 	bge	r22,r19,20017d8 <___vfprintf_internal_r+0x13a8>
 20016e8:	05c001c4 	movi	r23,7
 20016ec:	df012917 	ldw	fp,1188(sp)
 20016f0:	00000306 	br	2001700 <___vfprintf_internal_r+0x12d0>
 20016f4:	94800204 	addi	r18,r18,8
 20016f8:	9cfffc04 	addi	r19,r19,-16
 20016fc:	b4c0360e 	bge	r22,r19,20017d8 <___vfprintf_internal_r+0x13a8>
 2001700:	95000015 	stw	r20,0(r18)
 2001704:	95800115 	stw	r22,4(r18)
 2001708:	42000404 	addi	r8,r8,16
 200170c:	18c00044 	addi	r3,r3,1
 2001710:	da011d15 	stw	r8,1140(sp)
 2001714:	d8c11c15 	stw	r3,1136(sp)
 2001718:	b8fff60e 	bge	r23,r3,20016f4 <___vfprintf_internal_r+0x12c4>
 200171c:	8809883a 	mov	r4,r17
 2001720:	e00b883a 	mov	r5,fp
 2001724:	d9811b04 	addi	r6,sp,1132
 2001728:	20003fc0 	call	20003fc <__sprint_r>
 200172c:	103cd31e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001730:	da011d17 	ldw	r8,1140(sp)
 2001734:	d8c11c17 	ldw	r3,1136(sp)
 2001738:	dc800404 	addi	r18,sp,16
 200173c:	003fee06 	br	20016f8 <___vfprintf_internal_r+0x12c8>
 2001740:	8088703a 	and	r4,r16,r2
 2001744:	203f1d1e 	bne	r4,zero,20013bc <___vfprintf_internal_r+0xf8c>
 2001748:	48800115 	stw	r2,4(r9)
 200174c:	42000044 	addi	r8,r8,1
 2001750:	18c00044 	addi	r3,r3,1
 2001754:	da011d15 	stw	r8,1140(sp)
 2001758:	d8c11c15 	stw	r3,1136(sp)
 200175c:	008001c4 	movi	r2,7
 2001760:	10c00216 	blt	r2,r3,200176c <___vfprintf_internal_r+0x133c>
 2001764:	4c800204 	addi	r18,r9,8
 2001768:	003f3e06 	br	2001464 <___vfprintf_internal_r+0x1034>
 200176c:	d9412917 	ldw	r5,1188(sp)
 2001770:	8809883a 	mov	r4,r17
 2001774:	d9811b04 	addi	r6,sp,1132
 2001778:	20003fc0 	call	20003fc <__sprint_r>
 200177c:	103cbf1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001780:	dc800404 	addi	r18,sp,16
 2001784:	da011d17 	ldw	r8,1140(sp)
 2001788:	d8c11c17 	ldw	r3,1136(sp)
 200178c:	003f3506 	br	2001464 <___vfprintf_internal_r+0x1034>
 2001790:	d9412917 	ldw	r5,1188(sp)
 2001794:	8809883a 	mov	r4,r17
 2001798:	d9811b04 	addi	r6,sp,1132
 200179c:	20003fc0 	call	20003fc <__sprint_r>
 20017a0:	103cb61e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20017a4:	da011d17 	ldw	r8,1140(sp)
 20017a8:	d8c11c17 	ldw	r3,1136(sp)
 20017ac:	da400404 	addi	r9,sp,16
 20017b0:	003f0b06 	br	20013e0 <___vfprintf_internal_r+0xfb0>
 20017b4:	d9412917 	ldw	r5,1188(sp)
 20017b8:	8809883a 	mov	r4,r17
 20017bc:	d9811b04 	addi	r6,sp,1132
 20017c0:	20003fc0 	call	20003fc <__sprint_r>
 20017c4:	103cad1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20017c8:	da011d17 	ldw	r8,1140(sp)
 20017cc:	d8c11c17 	ldw	r3,1136(sp)
 20017d0:	dc800404 	addi	r18,sp,16
 20017d4:	003f0d06 	br	200140c <___vfprintf_internal_r+0xfdc>
 20017d8:	95000015 	stw	r20,0(r18)
 20017dc:	94c00115 	stw	r19,4(r18)
 20017e0:	44d1883a 	add	r8,r8,r19
 20017e4:	003f1906 	br	200144c <___vfprintf_internal_r+0x101c>
 20017e8:	d9412917 	ldw	r5,1188(sp)
 20017ec:	8809883a 	mov	r4,r17
 20017f0:	d9811b04 	addi	r6,sp,1132
 20017f4:	20003fc0 	call	20003fc <__sprint_r>
 20017f8:	103ca01e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20017fc:	da011d17 	ldw	r8,1140(sp)
 2001800:	d8c11c17 	ldw	r3,1136(sp)
 2001804:	da400404 	addi	r9,sp,16
 2001808:	003db706 	br	2000ee8 <___vfprintf_internal_r+0xab8>
 200180c:	4d000015 	stw	r20,0(r9)
 2001810:	4c800115 	stw	r18,4(r9)
 2001814:	4491883a 	add	r8,r8,r18
 2001818:	003de706 	br	2000fb8 <___vfprintf_internal_r+0xb88>
 200181c:	8080100c 	andi	r2,r16,64
 2001820:	10010226 	beq	r2,zero,2001c2c <___vfprintf_internal_r+0x17fc>
 2001824:	d8812d17 	ldw	r2,1204(sp)
 2001828:	002d883a 	mov	r22,zero
 200182c:	00c00044 	movi	r3,1
 2001830:	15c0000b 	ldhu	r23,0(r2)
 2001834:	10800104 	addi	r2,r2,4
 2001838:	d8812d15 	stw	r2,1204(sp)
 200183c:	d8012585 	stb	zero,1174(sp)
 2001840:	b805883a 	mov	r2,r23
 2001844:	003bd106 	br	200078c <___vfprintf_internal_r+0x35c>
 2001848:	d9012d17 	ldw	r4,1204(sp)
 200184c:	25800017 	ldw	r22,0(r4)
 2001850:	25000117 	ldw	r20,4(r4)
 2001854:	21000204 	addi	r4,r4,8
 2001858:	d9012d15 	stw	r4,1204(sp)
 200185c:	dd813315 	stw	r22,1228(sp)
 2001860:	dd013415 	stw	r20,1232(sp)
 2001864:	003d2b06 	br	2000d14 <___vfprintf_internal_r+0x8e4>
 2001868:	8080100c 	andi	r2,r16,64
 200186c:	1000fe26 	beq	r2,zero,2001c68 <___vfprintf_internal_r+0x1838>
 2001870:	d9012d17 	ldw	r4,1204(sp)
 2001874:	002d883a 	mov	r22,zero
 2001878:	0007883a 	mov	r3,zero
 200187c:	25c0000b 	ldhu	r23,0(r4)
 2001880:	21000104 	addi	r4,r4,4
 2001884:	d9012d15 	stw	r4,1204(sp)
 2001888:	b805883a 	mov	r2,r23
 200188c:	d8012585 	stb	zero,1174(sp)
 2001890:	003bbe06 	br	200078c <___vfprintf_internal_r+0x35c>
 2001894:	8080100c 	andi	r2,r16,64
 2001898:	1000ed26 	beq	r2,zero,2001c50 <___vfprintf_internal_r+0x1820>
 200189c:	d9012d17 	ldw	r4,1204(sp)
 20018a0:	002d883a 	mov	r22,zero
 20018a4:	25c0000b 	ldhu	r23,0(r4)
 20018a8:	21000104 	addi	r4,r4,4
 20018ac:	d9012d15 	stw	r4,1204(sp)
 20018b0:	003cd206 	br	2000bfc <___vfprintf_internal_r+0x7cc>
 20018b4:	00c00084 	movi	r3,2
 20018b8:	d8012585 	stb	zero,1174(sp)
 20018bc:	003bb306 	br	200078c <___vfprintf_internal_r+0x35c>
 20018c0:	8080040c 	andi	r2,r16,16
 20018c4:	1000f11e 	bne	r2,zero,2001c8c <___vfprintf_internal_r+0x185c>
 20018c8:	8400100c 	andi	r16,r16,64
 20018cc:	80015526 	beq	r16,zero,2001e24 <___vfprintf_internal_r+0x19f4>
 20018d0:	da012d17 	ldw	r8,1204(sp)
 20018d4:	d8c12c17 	ldw	r3,1200(sp)
 20018d8:	40800017 	ldw	r2,0(r8)
 20018dc:	42000104 	addi	r8,r8,4
 20018e0:	da012d15 	stw	r8,1204(sp)
 20018e4:	10c0000d 	sth	r3,0(r2)
 20018e8:	003b0706 	br	2000508 <___vfprintf_internal_r+0xd8>
 20018ec:	8080100c 	andi	r2,r16,64
 20018f0:	1000c726 	beq	r2,zero,2001c10 <___vfprintf_internal_r+0x17e0>
 20018f4:	da012d17 	ldw	r8,1204(sp)
 20018f8:	45c0000f 	ldh	r23,0(r8)
 20018fc:	42000104 	addi	r8,r8,4
 2001900:	da012d15 	stw	r8,1204(sp)
 2001904:	b82dd7fa 	srai	r22,r23,31
 2001908:	b005883a 	mov	r2,r22
 200190c:	003c1006 	br	2000950 <___vfprintf_internal_r+0x520>
 2001910:	ac800007 	ldb	r18,0(r21)
 2001914:	003b2406 	br	20005a8 <___vfprintf_internal_r+0x178>
 2001918:	4c800115 	stw	r18,4(r9)
 200191c:	9211883a 	add	r8,r18,r8
 2001920:	18c00044 	addi	r3,r3,1
 2001924:	da011d15 	stw	r8,1140(sp)
 2001928:	d8c11c15 	stw	r3,1136(sp)
 200192c:	008001c4 	movi	r2,7
 2001930:	10c15416 	blt	r2,r3,2001e84 <___vfprintf_internal_r+0x1a54>
 2001934:	4a400204 	addi	r9,r9,8
 2001938:	d8813717 	ldw	r2,1244(sp)
 200193c:	9ca7883a 	add	r19,r19,r18
 2001940:	48800015 	stw	r2,0(r9)
 2001944:	00800044 	movi	r2,1
 2001948:	48800115 	stw	r2,4(r9)
 200194c:	4091883a 	add	r8,r8,r2
 2001950:	1887883a 	add	r3,r3,r2
 2001954:	da011d15 	stw	r8,1140(sp)
 2001958:	d8c11c15 	stw	r3,1136(sp)
 200195c:	008001c4 	movi	r2,7
 2001960:	10c14016 	blt	r2,r3,2001e64 <___vfprintf_internal_r+0x1a34>
 2001964:	4a400204 	addi	r9,r9,8
 2001968:	d9013217 	ldw	r4,1224(sp)
 200196c:	da011d17 	ldw	r8,1140(sp)
 2001970:	d8c11c17 	ldw	r3,1136(sp)
 2001974:	24a5c83a 	sub	r18,r4,r18
 2001978:	4cc00015 	stw	r19,0(r9)
 200197c:	003fa406 	br	2001810 <___vfprintf_internal_r+0x13e0>
 2001980:	04c08074 	movhi	r19,513
 2001984:	9cee7904 	addi	r19,r19,-17948
 2001988:	003cf406 	br	2000d5c <___vfprintf_internal_r+0x92c>
 200198c:	d9412917 	ldw	r5,1188(sp)
 2001990:	8809883a 	mov	r4,r17
 2001994:	d9811b04 	addi	r6,sp,1132
 2001998:	20003fc0 	call	20003fc <__sprint_r>
 200199c:	103c371e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 20019a0:	da011d17 	ldw	r8,1140(sp)
 20019a4:	da400404 	addi	r9,sp,16
 20019a8:	003e1c06 	br	200121c <___vfprintf_internal_r+0xdec>
 20019ac:	00808074 	movhi	r2,513
 20019b0:	10ae8804 	addi	r2,r2,-17888
 20019b4:	48800015 	stw	r2,0(r9)
 20019b8:	00800044 	movi	r2,1
 20019bc:	48800115 	stw	r2,4(r9)
 20019c0:	4091883a 	add	r8,r8,r2
 20019c4:	1887883a 	add	r3,r3,r2
 20019c8:	da011d15 	stw	r8,1140(sp)
 20019cc:	d8c11c15 	stw	r3,1136(sp)
 20019d0:	008001c4 	movi	r2,7
 20019d4:	10c0c316 	blt	r2,r3,2001ce4 <___vfprintf_internal_r+0x18b4>
 20019d8:	4a400204 	addi	r9,r9,8
 20019dc:	9000041e 	bne	r18,zero,20019f0 <___vfprintf_internal_r+0x15c0>
 20019e0:	d8c13217 	ldw	r3,1224(sp)
 20019e4:	1800021e 	bne	r3,zero,20019f0 <___vfprintf_internal_r+0x15c0>
 20019e8:	8080004c 	andi	r2,r16,1
 20019ec:	103d7826 	beq	r2,zero,2000fd0 <___vfprintf_internal_r+0xba0>
 20019f0:	d8c11c17 	ldw	r3,1136(sp)
 20019f4:	d9013717 	ldw	r4,1244(sp)
 20019f8:	00800044 	movi	r2,1
 20019fc:	48800115 	stw	r2,4(r9)
 2001a00:	49000015 	stw	r4,0(r9)
 2001a04:	4091883a 	add	r8,r8,r2
 2001a08:	1887883a 	add	r3,r3,r2
 2001a0c:	da011d15 	stw	r8,1140(sp)
 2001a10:	d8c11c15 	stw	r3,1136(sp)
 2001a14:	008001c4 	movi	r2,7
 2001a18:	10c12e16 	blt	r2,r3,2001ed4 <___vfprintf_internal_r+0x1aa4>
 2001a1c:	4a400204 	addi	r9,r9,8
 2001a20:	04a5c83a 	sub	r18,zero,r18
 2001a24:	0480de0e 	bge	zero,r18,2001da0 <___vfprintf_internal_r+0x1970>
 2001a28:	05800404 	movi	r22,16
 2001a2c:	05008074 	movhi	r20,513
 2001a30:	a52e8c84 	addi	r20,r20,-17870
 2001a34:	b480e20e 	bge	r22,r18,2001dc0 <___vfprintf_internal_r+0x1990>
 2001a38:	05c001c4 	movi	r23,7
 2001a3c:	df012917 	ldw	fp,1188(sp)
 2001a40:	00000306 	br	2001a50 <___vfprintf_internal_r+0x1620>
 2001a44:	4a400204 	addi	r9,r9,8
 2001a48:	94bffc04 	addi	r18,r18,-16
 2001a4c:	b480dc0e 	bge	r22,r18,2001dc0 <___vfprintf_internal_r+0x1990>
 2001a50:	4d000015 	stw	r20,0(r9)
 2001a54:	4d800115 	stw	r22,4(r9)
 2001a58:	42000404 	addi	r8,r8,16
 2001a5c:	18c00044 	addi	r3,r3,1
 2001a60:	da011d15 	stw	r8,1140(sp)
 2001a64:	d8c11c15 	stw	r3,1136(sp)
 2001a68:	b8fff60e 	bge	r23,r3,2001a44 <___vfprintf_internal_r+0x1614>
 2001a6c:	8809883a 	mov	r4,r17
 2001a70:	e00b883a 	mov	r5,fp
 2001a74:	d9811b04 	addi	r6,sp,1132
 2001a78:	20003fc0 	call	20003fc <__sprint_r>
 2001a7c:	103bff1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001a80:	da011d17 	ldw	r8,1140(sp)
 2001a84:	d8c11c17 	ldw	r3,1136(sp)
 2001a88:	da400404 	addi	r9,sp,16
 2001a8c:	003fee06 	br	2001a48 <___vfprintf_internal_r+0x1618>
 2001a90:	da413c15 	stw	r9,1264(sp)
 2001a94:	2006e200 	call	2006e20 <__isnand>
 2001a98:	da413c17 	ldw	r9,1264(sp)
 2001a9c:	1000851e 	bne	r2,zero,2001cb4 <___vfprintf_internal_r+0x1884>
 2001aa0:	00bfffc4 	movi	r2,-1
 2001aa4:	e0817626 	beq	fp,r2,2002080 <___vfprintf_internal_r+0x1c50>
 2001aa8:	008019c4 	movi	r2,103
 2001aac:	90817126 	beq	r18,r2,2002074 <___vfprintf_internal_r+0x1c44>
 2001ab0:	008011c4 	movi	r2,71
 2001ab4:	90816f26 	beq	r18,r2,2002074 <___vfprintf_internal_r+0x1c44>
 2001ab8:	82004014 	ori	r8,r16,256
 2001abc:	da012a15 	stw	r8,1192(sp)
 2001ac0:	a0017116 	blt	r20,zero,2002088 <___vfprintf_internal_r+0x1c58>
 2001ac4:	d8012f05 	stb	zero,1212(sp)
 2001ac8:	00801984 	movi	r2,102
 2001acc:	90811226 	beq	r18,r2,2001f18 <___vfprintf_internal_r+0x1ae8>
 2001ad0:	00801184 	movi	r2,70
 2001ad4:	90811026 	beq	r18,r2,2001f18 <___vfprintf_internal_r+0x1ae8>
 2001ad8:	00801944 	movi	r2,101
 2001adc:	90819b26 	beq	r18,r2,200214c <___vfprintf_internal_r+0x1d1c>
 2001ae0:	00801144 	movi	r2,69
 2001ae4:	90819926 	beq	r18,r2,200214c <___vfprintf_internal_r+0x1d1c>
 2001ae8:	e02f883a 	mov	r23,fp
 2001aec:	d8812404 	addi	r2,sp,1168
 2001af0:	d8800115 	stw	r2,4(sp)
 2001af4:	d8812304 	addi	r2,sp,1164
 2001af8:	d8800215 	stw	r2,8(sp)
 2001afc:	d8812204 	addi	r2,sp,1160
 2001b00:	ddc00015 	stw	r23,0(sp)
 2001b04:	d8800315 	stw	r2,12(sp)
 2001b08:	8809883a 	mov	r4,r17
 2001b0c:	b00b883a 	mov	r5,r22
 2001b10:	a00d883a 	mov	r6,r20
 2001b14:	01c00084 	movi	r7,2
 2001b18:	da413c15 	stw	r9,1264(sp)
 2001b1c:	20025c80 	call	20025c8 <_dtoa_r>
 2001b20:	1027883a 	mov	r19,r2
 2001b24:	008019c4 	movi	r2,103
 2001b28:	da413c17 	ldw	r9,1264(sp)
 2001b2c:	90818c1e 	bne	r18,r2,2002160 <___vfprintf_internal_r+0x1d30>
 2001b30:	8080004c 	andi	r2,r16,1
 2001b34:	10017926 	beq	r2,zero,200211c <___vfprintf_internal_r+0x1cec>
 2001b38:	00801184 	movi	r2,70
 2001b3c:	9dc7883a 	add	r3,r19,r23
 2001b40:	90810626 	beq	r18,r2,2001f5c <___vfprintf_internal_r+0x1b2c>
 2001b44:	b009883a 	mov	r4,r22
 2001b48:	a00b883a 	mov	r5,r20
 2001b4c:	000d883a 	mov	r6,zero
 2001b50:	000f883a 	mov	r7,zero
 2001b54:	d8c13b15 	stw	r3,1260(sp)
 2001b58:	da413c15 	stw	r9,1264(sp)
 2001b5c:	20089940 	call	2008994 <__eqdf2>
 2001b60:	d8c13b17 	ldw	r3,1260(sp)
 2001b64:	da413c17 	ldw	r9,1264(sp)
 2001b68:	10000726 	beq	r2,zero,2001b88 <___vfprintf_internal_r+0x1758>
 2001b6c:	d8812217 	ldw	r2,1160(sp)
 2001b70:	10c1962e 	bgeu	r2,r3,20021cc <___vfprintf_internal_r+0x1d9c>
 2001b74:	01000c04 	movi	r4,48
 2001b78:	11000005 	stb	r4,0(r2)
 2001b7c:	10800044 	addi	r2,r2,1
 2001b80:	d8812215 	stw	r2,1160(sp)
 2001b84:	10fffc1e 	bne	r2,r3,2001b78 <___vfprintf_internal_r+0x1748>
 2001b88:	1cc7c83a 	sub	r3,r3,r19
 2001b8c:	d8c13215 	stw	r3,1224(sp)
 2001b90:	008019c4 	movi	r2,103
 2001b94:	90810626 	beq	r18,r2,2001fb0 <___vfprintf_internal_r+0x1b80>
 2001b98:	008011c4 	movi	r2,71
 2001b9c:	90810426 	beq	r18,r2,2001fb0 <___vfprintf_internal_r+0x1b80>
 2001ba0:	00801984 	movi	r2,102
 2001ba4:	90819a1e 	bne	r18,r2,2002210 <___vfprintf_internal_r+0x1de0>
 2001ba8:	d8812417 	ldw	r2,1168(sp)
 2001bac:	d8812b15 	stw	r2,1196(sp)
 2001bb0:	0081880e 	bge	zero,r2,20021d4 <___vfprintf_internal_r+0x1da4>
 2001bb4:	e000021e 	bne	fp,zero,2001bc0 <___vfprintf_internal_r+0x1790>
 2001bb8:	8400004c 	andi	r16,r16,1
 2001bbc:	80000426 	beq	r16,zero,2001bd0 <___vfprintf_internal_r+0x17a0>
 2001bc0:	d8812b17 	ldw	r2,1196(sp)
 2001bc4:	e2000044 	addi	r8,fp,1
 2001bc8:	1205883a 	add	r2,r2,r8
 2001bcc:	d8812b15 	stw	r2,1196(sp)
 2001bd0:	d8812815 	stw	r2,1184(sp)
 2001bd4:	10011716 	blt	r2,zero,2002034 <___vfprintf_internal_r+0x1c04>
 2001bd8:	ddc12f07 	ldb	r23,1212(sp)
 2001bdc:	b800ca26 	beq	r23,zero,2001f08 <___vfprintf_internal_r+0x1ad8>
 2001be0:	00800b44 	movi	r2,45
 2001be4:	d8812585 	stb	r2,1174(sp)
 2001be8:	dc012a17 	ldw	r16,1192(sp)
 2001bec:	d8013115 	stw	zero,1220(sp)
 2001bf0:	003afe06 	br	20007ec <___vfprintf_internal_r+0x3bc>
 2001bf4:	d8812b17 	ldw	r2,1196(sp)
 2001bf8:	d8812815 	stw	r2,1184(sp)
 2001bfc:	10005e16 	blt	r2,zero,2001d78 <___vfprintf_internal_r+0x1948>
 2001c00:	d8812583 	ldbu	r2,1174(sp)
 2001c04:	ddc12d15 	stw	r23,1204(sp)
 2001c08:	d8013115 	stw	zero,1220(sp)
 2001c0c:	003af306 	br	20007dc <___vfprintf_internal_r+0x3ac>
 2001c10:	d8812d17 	ldw	r2,1204(sp)
 2001c14:	15c00017 	ldw	r23,0(r2)
 2001c18:	10800104 	addi	r2,r2,4
 2001c1c:	d8812d15 	stw	r2,1204(sp)
 2001c20:	b82dd7fa 	srai	r22,r23,31
 2001c24:	b005883a 	mov	r2,r22
 2001c28:	003b4906 	br	2000950 <___vfprintf_internal_r+0x520>
 2001c2c:	d8c12d17 	ldw	r3,1204(sp)
 2001c30:	002d883a 	mov	r22,zero
 2001c34:	1dc00017 	ldw	r23,0(r3)
 2001c38:	18c00104 	addi	r3,r3,4
 2001c3c:	d8c12d15 	stw	r3,1204(sp)
 2001c40:	b805883a 	mov	r2,r23
 2001c44:	00c00044 	movi	r3,1
 2001c48:	d8012585 	stb	zero,1174(sp)
 2001c4c:	003acf06 	br	200078c <___vfprintf_internal_r+0x35c>
 2001c50:	da012d17 	ldw	r8,1204(sp)
 2001c54:	002d883a 	mov	r22,zero
 2001c58:	45c00017 	ldw	r23,0(r8)
 2001c5c:	42000104 	addi	r8,r8,4
 2001c60:	da012d15 	stw	r8,1204(sp)
 2001c64:	003be506 	br	2000bfc <___vfprintf_internal_r+0x7cc>
 2001c68:	da012d17 	ldw	r8,1204(sp)
 2001c6c:	002d883a 	mov	r22,zero
 2001c70:	0007883a 	mov	r3,zero
 2001c74:	45c00017 	ldw	r23,0(r8)
 2001c78:	42000104 	addi	r8,r8,4
 2001c7c:	da012d15 	stw	r8,1204(sp)
 2001c80:	b805883a 	mov	r2,r23
 2001c84:	d8012585 	stb	zero,1174(sp)
 2001c88:	003ac006 	br	200078c <___vfprintf_internal_r+0x35c>
 2001c8c:	d8c12d17 	ldw	r3,1204(sp)
 2001c90:	d9012c17 	ldw	r4,1200(sp)
 2001c94:	18800017 	ldw	r2,0(r3)
 2001c98:	18c00104 	addi	r3,r3,4
 2001c9c:	d8c12d15 	stw	r3,1204(sp)
 2001ca0:	11000015 	stw	r4,0(r2)
 2001ca4:	003a1806 	br	2000508 <___vfprintf_internal_r+0xd8>
 2001ca8:	073fffc4 	movi	fp,-1
 2001cac:	202b883a 	mov	r21,r4
 2001cb0:	003a3e06 	br	20005ac <___vfprintf_internal_r+0x17c>
 2001cb4:	008011c4 	movi	r2,71
 2001cb8:	14809016 	blt	r2,r18,2001efc <___vfprintf_internal_r+0x1acc>
 2001cbc:	04c08074 	movhi	r19,513
 2001cc0:	9cee7a04 	addi	r19,r19,-17944
 2001cc4:	00c000c4 	movi	r3,3
 2001cc8:	00bfdfc4 	movi	r2,-129
 2001ccc:	80a0703a 	and	r16,r16,r2
 2001cd0:	d8c12815 	stw	r3,1184(sp)
 2001cd4:	d8812583 	ldbu	r2,1174(sp)
 2001cd8:	d8c12b15 	stw	r3,1196(sp)
 2001cdc:	d8013115 	stw	zero,1220(sp)
 2001ce0:	003abe06 	br	20007dc <___vfprintf_internal_r+0x3ac>
 2001ce4:	d9412917 	ldw	r5,1188(sp)
 2001ce8:	8809883a 	mov	r4,r17
 2001cec:	d9811b04 	addi	r6,sp,1132
 2001cf0:	20003fc0 	call	20003fc <__sprint_r>
 2001cf4:	103b611e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001cf8:	dc812417 	ldw	r18,1168(sp)
 2001cfc:	da011d17 	ldw	r8,1140(sp)
 2001d00:	da400404 	addi	r9,sp,16
 2001d04:	003f3506 	br	20019dc <___vfprintf_internal_r+0x15ac>
 2001d08:	ad400044 	addi	r21,r21,1
 2001d0c:	84000814 	ori	r16,r16,32
 2001d10:	14800047 	ldb	r18,1(r2)
 2001d14:	003a2406 	br	20005a8 <___vfprintf_internal_r+0x178>
 2001d18:	d9412917 	ldw	r5,1188(sp)
 2001d1c:	8809883a 	mov	r4,r17
 2001d20:	d9811b04 	addi	r6,sp,1132
 2001d24:	20003fc0 	call	20003fc <__sprint_r>
 2001d28:	103b541e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001d2c:	da011d17 	ldw	r8,1140(sp)
 2001d30:	da400404 	addi	r9,sp,16
 2001d34:	003d4a06 	br	2001260 <___vfprintf_internal_r+0xe30>
 2001d38:	4d000015 	stw	r20,0(r9)
 2001d3c:	4c800115 	stw	r18,4(r9)
 2001d40:	4491883a 	add	r8,r8,r18
 2001d44:	18c00044 	addi	r3,r3,1
 2001d48:	da011d15 	stw	r8,1140(sp)
 2001d4c:	d8c11c15 	stw	r3,1136(sp)
 2001d50:	008001c4 	movi	r2,7
 2001d54:	10fcdc16 	blt	r2,r3,20010c8 <___vfprintf_internal_r+0xc98>
 2001d58:	4a400204 	addi	r9,r9,8
 2001d5c:	003ce106 	br	20010e4 <___vfprintf_internal_r+0xcb4>
 2001d60:	da413c15 	stw	r9,1264(sp)
 2001d64:	20070940 	call	2007094 <strlen>
 2001d68:	d8812b15 	stw	r2,1196(sp)
 2001d6c:	d8812815 	stw	r2,1184(sp)
 2001d70:	da413c17 	ldw	r9,1264(sp)
 2001d74:	103fa20e 	bge	r2,zero,2001c00 <___vfprintf_internal_r+0x17d0>
 2001d78:	d8012815 	stw	zero,1184(sp)
 2001d7c:	003fa006 	br	2001c00 <___vfprintf_internal_r+0x17d0>
 2001d80:	d9412917 	ldw	r5,1188(sp)
 2001d84:	8809883a 	mov	r4,r17
 2001d88:	d9811b04 	addi	r6,sp,1132
 2001d8c:	20003fc0 	call	20003fc <__sprint_r>
 2001d90:	103b3a1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001d94:	da011d17 	ldw	r8,1140(sp)
 2001d98:	d8c11c17 	ldw	r3,1136(sp)
 2001d9c:	da400404 	addi	r9,sp,16
 2001da0:	d8813217 	ldw	r2,1224(sp)
 2001da4:	4cc00015 	stw	r19,0(r9)
 2001da8:	48800115 	stw	r2,4(r9)
 2001dac:	4091883a 	add	r8,r8,r2
 2001db0:	003c8106 	br	2000fb8 <___vfprintf_internal_r+0xb88>
 2001db4:	00800b44 	movi	r2,45
 2001db8:	d8812585 	stb	r2,1174(sp)
 2001dbc:	003be306 	br	2000d4c <___vfprintf_internal_r+0x91c>
 2001dc0:	4d000015 	stw	r20,0(r9)
 2001dc4:	4c800115 	stw	r18,4(r9)
 2001dc8:	4491883a 	add	r8,r8,r18
 2001dcc:	18c00044 	addi	r3,r3,1
 2001dd0:	da011d15 	stw	r8,1140(sp)
 2001dd4:	d8c11c15 	stw	r3,1136(sp)
 2001dd8:	008001c4 	movi	r2,7
 2001ddc:	10ffe816 	blt	r2,r3,2001d80 <___vfprintf_internal_r+0x1950>
 2001de0:	4a400204 	addi	r9,r9,8
 2001de4:	003fee06 	br	2001da0 <___vfprintf_internal_r+0x1970>
 2001de8:	df012b15 	stw	fp,1196(sp)
 2001dec:	00800184 	movi	r2,6
 2001df0:	1700072e 	bgeu	r2,fp,2001e10 <___vfprintf_internal_r+0x19e0>
 2001df4:	d8812b15 	stw	r2,1196(sp)
 2001df8:	d8812815 	stw	r2,1184(sp)
 2001dfc:	ddc12d15 	stw	r23,1204(sp)
 2001e00:	04c08074 	movhi	r19,513
 2001e04:	9cee8604 	addi	r19,r19,-17896
 2001e08:	d8013115 	stw	zero,1220(sp)
 2001e0c:	003a7a06 	br	20007f8 <___vfprintf_internal_r+0x3c8>
 2001e10:	d8812b17 	ldw	r2,1196(sp)
 2001e14:	d8812815 	stw	r2,1184(sp)
 2001e18:	103ff80e 	bge	r2,zero,2001dfc <___vfprintf_internal_r+0x19cc>
 2001e1c:	d8012815 	stw	zero,1184(sp)
 2001e20:	003ff606 	br	2001dfc <___vfprintf_internal_r+0x19cc>
 2001e24:	d9012d17 	ldw	r4,1204(sp)
 2001e28:	da012c17 	ldw	r8,1200(sp)
 2001e2c:	20800017 	ldw	r2,0(r4)
 2001e30:	21000104 	addi	r4,r4,4
 2001e34:	d9012d15 	stw	r4,1204(sp)
 2001e38:	12000015 	stw	r8,0(r2)
 2001e3c:	0039b206 	br	2000508 <___vfprintf_internal_r+0xd8>
 2001e40:	d9412917 	ldw	r5,1188(sp)
 2001e44:	8809883a 	mov	r4,r17
 2001e48:	d9811b04 	addi	r6,sp,1132
 2001e4c:	20003fc0 	call	20003fc <__sprint_r>
 2001e50:	103b0a1e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001e54:	dc812417 	ldw	r18,1168(sp)
 2001e58:	da011d17 	ldw	r8,1140(sp)
 2001e5c:	da400404 	addi	r9,sp,16
 2001e60:	003def06 	br	2001620 <___vfprintf_internal_r+0x11f0>
 2001e64:	d9412917 	ldw	r5,1188(sp)
 2001e68:	8809883a 	mov	r4,r17
 2001e6c:	d9811b04 	addi	r6,sp,1132
 2001e70:	20003fc0 	call	20003fc <__sprint_r>
 2001e74:	103b011e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001e78:	dc812417 	ldw	r18,1168(sp)
 2001e7c:	da400404 	addi	r9,sp,16
 2001e80:	003eb906 	br	2001968 <___vfprintf_internal_r+0x1538>
 2001e84:	d9412917 	ldw	r5,1188(sp)
 2001e88:	8809883a 	mov	r4,r17
 2001e8c:	d9811b04 	addi	r6,sp,1132
 2001e90:	20003fc0 	call	20003fc <__sprint_r>
 2001e94:	103af91e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001e98:	dc812417 	ldw	r18,1168(sp)
 2001e9c:	da011d17 	ldw	r8,1140(sp)
 2001ea0:	d8c11c17 	ldw	r3,1136(sp)
 2001ea4:	da400404 	addi	r9,sp,16
 2001ea8:	003ea306 	br	2001938 <___vfprintf_internal_r+0x1508>
 2001eac:	00800244 	movi	r2,9
 2001eb0:	15fda636 	bltu	r2,r23,200154c <___vfprintf_internal_r+0x111c>
 2001eb4:	dd010e04 	addi	r20,sp,1080
 2001eb8:	003dc206 	br	20015c4 <___vfprintf_internal_r+0x1194>
 2001ebc:	df012815 	stw	fp,1184(sp)
 2001ec0:	d8812583 	ldbu	r2,1174(sp)
 2001ec4:	df012b15 	stw	fp,1196(sp)
 2001ec8:	ddc12d15 	stw	r23,1204(sp)
 2001ecc:	d8013115 	stw	zero,1220(sp)
 2001ed0:	003a4206 	br	20007dc <___vfprintf_internal_r+0x3ac>
 2001ed4:	d9412917 	ldw	r5,1188(sp)
 2001ed8:	8809883a 	mov	r4,r17
 2001edc:	d9811b04 	addi	r6,sp,1132
 2001ee0:	20003fc0 	call	20003fc <__sprint_r>
 2001ee4:	103ae51e 	bne	r2,zero,2000a7c <___vfprintf_internal_r+0x64c>
 2001ee8:	dc812417 	ldw	r18,1168(sp)
 2001eec:	da011d17 	ldw	r8,1140(sp)
 2001ef0:	d8c11c17 	ldw	r3,1136(sp)
 2001ef4:	da400404 	addi	r9,sp,16
 2001ef8:	003ec906 	br	2001a20 <___vfprintf_internal_r+0x15f0>
 2001efc:	04c08074 	movhi	r19,513
 2001f00:	9cee7b04 	addi	r19,r19,-17940
 2001f04:	003f6f06 	br	2001cc4 <___vfprintf_internal_r+0x1894>
 2001f08:	d8812583 	ldbu	r2,1174(sp)
 2001f0c:	dc012a17 	ldw	r16,1192(sp)
 2001f10:	d8013115 	stw	zero,1220(sp)
 2001f14:	003a3106 	br	20007dc <___vfprintf_internal_r+0x3ac>
 2001f18:	d8812404 	addi	r2,sp,1168
 2001f1c:	d8800115 	stw	r2,4(sp)
 2001f20:	d8812304 	addi	r2,sp,1164
 2001f24:	d8800215 	stw	r2,8(sp)
 2001f28:	d8812204 	addi	r2,sp,1160
 2001f2c:	df000015 	stw	fp,0(sp)
 2001f30:	d8800315 	stw	r2,12(sp)
 2001f34:	8809883a 	mov	r4,r17
 2001f38:	b00b883a 	mov	r5,r22
 2001f3c:	a00d883a 	mov	r6,r20
 2001f40:	01c000c4 	movi	r7,3
 2001f44:	da413c15 	stw	r9,1264(sp)
 2001f48:	20025c80 	call	20025c8 <_dtoa_r>
 2001f4c:	da413c17 	ldw	r9,1264(sp)
 2001f50:	1027883a 	mov	r19,r2
 2001f54:	1707883a 	add	r3,r2,fp
 2001f58:	e02f883a 	mov	r23,fp
 2001f5c:	99000007 	ldb	r4,0(r19)
 2001f60:	00800c04 	movi	r2,48
 2001f64:	20800326 	beq	r4,r2,2001f74 <___vfprintf_internal_r+0x1b44>
 2001f68:	da812417 	ldw	r10,1168(sp)
 2001f6c:	1a87883a 	add	r3,r3,r10
 2001f70:	003ef406 	br	2001b44 <___vfprintf_internal_r+0x1714>
 2001f74:	b009883a 	mov	r4,r22
 2001f78:	a00b883a 	mov	r5,r20
 2001f7c:	000d883a 	mov	r6,zero
 2001f80:	000f883a 	mov	r7,zero
 2001f84:	d8c13b15 	stw	r3,1260(sp)
 2001f88:	da413c15 	stw	r9,1264(sp)
 2001f8c:	20089f00 	call	20089f0 <__nedf2>
 2001f90:	d8c13b17 	ldw	r3,1260(sp)
 2001f94:	da413c17 	ldw	r9,1264(sp)
 2001f98:	103ff326 	beq	r2,zero,2001f68 <___vfprintf_internal_r+0x1b38>
 2001f9c:	00800044 	movi	r2,1
 2001fa0:	15d5c83a 	sub	r10,r2,r23
 2001fa4:	da812415 	stw	r10,1168(sp)
 2001fa8:	1a87883a 	add	r3,r3,r10
 2001fac:	003ee506 	br	2001b44 <___vfprintf_internal_r+0x1714>
 2001fb0:	d8812417 	ldw	r2,1168(sp)
 2001fb4:	d8812b15 	stw	r2,1196(sp)
 2001fb8:	1029883a 	mov	r20,r2
 2001fbc:	00bfff44 	movi	r2,-3
 2001fc0:	a0800116 	blt	r20,r2,2001fc8 <___vfprintf_internal_r+0x1b98>
 2001fc4:	e5001d0e 	bge	fp,r20,200203c <___vfprintf_internal_r+0x1c0c>
 2001fc8:	94bfff84 	addi	r18,r18,-2
 2001fcc:	a53fffc4 	addi	r20,r20,-1
 2001fd0:	dd012415 	stw	r20,1168(sp)
 2001fd4:	dc811fc5 	stb	r18,1151(sp)
 2001fd8:	a0007816 	blt	r20,zero,20021bc <___vfprintf_internal_r+0x1d8c>
 2001fdc:	00800ac4 	movi	r2,43
 2001fe0:	d8812005 	stb	r2,1152(sp)
 2001fe4:	00800244 	movi	r2,9
 2001fe8:	15002b16 	blt	r2,r20,2002098 <___vfprintf_internal_r+0x1c68>
 2001fec:	00800c04 	movi	r2,48
 2001ff0:	a5000c04 	addi	r20,r20,48
 2001ff4:	d8812045 	stb	r2,1153(sp)
 2001ff8:	dd012085 	stb	r20,1154(sp)
 2001ffc:	d8c120c4 	addi	r3,sp,1155
 2002000:	d8811fc4 	addi	r2,sp,1151
 2002004:	da013217 	ldw	r8,1224(sp)
 2002008:	1885c83a 	sub	r2,r3,r2
 200200c:	d8813515 	stw	r2,1236(sp)
 2002010:	4085883a 	add	r2,r8,r2
 2002014:	d8812b15 	stw	r2,1196(sp)
 2002018:	00800044 	movi	r2,1
 200201c:	1200610e 	bge	r2,r8,20021a4 <___vfprintf_internal_r+0x1d74>
 2002020:	d8812b17 	ldw	r2,1196(sp)
 2002024:	10800044 	addi	r2,r2,1
 2002028:	d8812b15 	stw	r2,1196(sp)
 200202c:	d8812815 	stw	r2,1184(sp)
 2002030:	103ee90e 	bge	r2,zero,2001bd8 <___vfprintf_internal_r+0x17a8>
 2002034:	d8012815 	stw	zero,1184(sp)
 2002038:	003ee706 	br	2001bd8 <___vfprintf_internal_r+0x17a8>
 200203c:	d8812b17 	ldw	r2,1196(sp)
 2002040:	da013217 	ldw	r8,1224(sp)
 2002044:	12003716 	blt	r2,r8,2002124 <___vfprintf_internal_r+0x1cf4>
 2002048:	8400004c 	andi	r16,r16,1
 200204c:	80000326 	beq	r16,zero,200205c <___vfprintf_internal_r+0x1c2c>
 2002050:	d8812b17 	ldw	r2,1196(sp)
 2002054:	10800044 	addi	r2,r2,1
 2002058:	d8812b15 	stw	r2,1196(sp)
 200205c:	d8812815 	stw	r2,1184(sp)
 2002060:	10003716 	blt	r2,zero,2002140 <___vfprintf_internal_r+0x1d10>
 2002064:	048019c4 	movi	r18,103
 2002068:	003edb06 	br	2001bd8 <___vfprintf_internal_r+0x17a8>
 200206c:	d8012815 	stw	zero,1184(sp)
 2002070:	003b6906 	br	2000e18 <___vfprintf_internal_r+0x9e8>
 2002074:	e03e901e 	bne	fp,zero,2001ab8 <___vfprintf_internal_r+0x1688>
 2002078:	07000044 	movi	fp,1
 200207c:	003e8e06 	br	2001ab8 <___vfprintf_internal_r+0x1688>
 2002080:	07000184 	movi	fp,6
 2002084:	003e8c06 	br	2001ab8 <___vfprintf_internal_r+0x1688>
 2002088:	00c00b44 	movi	r3,45
 200208c:	a520003c 	xorhi	r20,r20,32768
 2002090:	d8c12f05 	stb	r3,1212(sp)
 2002094:	003e8c06 	br	2001ac8 <___vfprintf_internal_r+0x1698>
 2002098:	d8c11f84 	addi	r3,sp,1150
 200209c:	102f883a 	mov	r23,r2
 20020a0:	4839883a 	mov	fp,r9
 20020a4:	a009883a 	mov	r4,r20
 20020a8:	01400284 	movi	r5,10
 20020ac:	182d883a 	mov	r22,r3
 20020b0:	2008ef80 	call	2008ef8 <__modsi3>
 20020b4:	10800c04 	addi	r2,r2,48
 20020b8:	a009883a 	mov	r4,r20
 20020bc:	b0800005 	stb	r2,0(r22)
 20020c0:	01400284 	movi	r5,10
 20020c4:	2008ea80 	call	2008ea8 <__divsi3>
 20020c8:	1029883a 	mov	r20,r2
 20020cc:	b0ffffc4 	addi	r3,r22,-1
 20020d0:	b8bff416 	blt	r23,r2,20020a4 <___vfprintf_internal_r+0x1c74>
 20020d4:	11400c04 	addi	r5,r2,48
 20020d8:	b17fffc5 	stb	r5,-1(r22)
 20020dc:	d8811fc4 	addi	r2,sp,1151
 20020e0:	e013883a 	mov	r9,fp
 20020e4:	1880482e 	bgeu	r3,r2,2002208 <___vfprintf_internal_r+0x1dd8>
 20020e8:	b007883a 	mov	r3,r22
 20020ec:	d9012044 	addi	r4,sp,1153
 20020f0:	00000206 	br	20020fc <___vfprintf_internal_r+0x1ccc>
 20020f4:	19400003 	ldbu	r5,0(r3)
 20020f8:	18c00044 	addi	r3,r3,1
 20020fc:	21400005 	stb	r5,0(r4)
 2002100:	21000044 	addi	r4,r4,1
 2002104:	10fffb1e 	bne	r2,r3,20020f4 <___vfprintf_internal_r+0x1cc4>
 2002108:	d8c12004 	addi	r3,sp,1152
 200210c:	1d87c83a 	sub	r3,r3,r22
 2002110:	d9012044 	addi	r4,sp,1153
 2002114:	20c7883a 	add	r3,r4,r3
 2002118:	003fba06 	br	2002004 <___vfprintf_internal_r+0x1bd4>
 200211c:	d8c12217 	ldw	r3,1160(sp)
 2002120:	003e9906 	br	2001b88 <___vfprintf_internal_r+0x1758>
 2002124:	05000b0e 	bge	zero,r20,2002154 <___vfprintf_internal_r+0x1d24>
 2002128:	05000044 	movi	r20,1
 200212c:	da013217 	ldw	r8,1224(sp)
 2002130:	a229883a 	add	r20,r20,r8
 2002134:	dd012b15 	stw	r20,1196(sp)
 2002138:	dd012815 	stw	r20,1184(sp)
 200213c:	a03fc90e 	bge	r20,zero,2002064 <___vfprintf_internal_r+0x1c34>
 2002140:	d8012815 	stw	zero,1184(sp)
 2002144:	048019c4 	movi	r18,103
 2002148:	003ea306 	br	2001bd8 <___vfprintf_internal_r+0x17a8>
 200214c:	e5c00044 	addi	r23,fp,1
 2002150:	003e6606 	br	2001aec <___vfprintf_internal_r+0x16bc>
 2002154:	00800084 	movi	r2,2
 2002158:	1529c83a 	sub	r20,r2,r20
 200215c:	003ff306 	br	200212c <___vfprintf_internal_r+0x1cfc>
 2002160:	008011c4 	movi	r2,71
 2002164:	90be7226 	beq	r18,r2,2001b30 <___vfprintf_internal_r+0x1700>
 2002168:	003e7306 	br	2001b38 <___vfprintf_internal_r+0x1708>
 200216c:	d8812d17 	ldw	r2,1204(sp)
 2002170:	ac800043 	ldbu	r18,1(r21)
 2002174:	202b883a 	mov	r21,r4
 2002178:	17000017 	ldw	fp,0(r2)
 200217c:	10800104 	addi	r2,r2,4
 2002180:	d8812d15 	stw	r2,1204(sp)
 2002184:	e0001b16 	blt	fp,zero,20021f4 <___vfprintf_internal_r+0x1dc4>
 2002188:	94803fcc 	andi	r18,r18,255
 200218c:	9480201c 	xori	r18,r18,128
 2002190:	94bfe004 	addi	r18,r18,-128
 2002194:	00390406 	br	20005a8 <___vfprintf_internal_r+0x178>
 2002198:	00bfffc4 	movi	r2,-1
 200219c:	d8812c15 	stw	r2,1200(sp)
 20021a0:	003a2506 	br	2000a38 <___vfprintf_internal_r+0x608>
 20021a4:	80a0703a 	and	r16,r16,r2
 20021a8:	803f9d1e 	bne	r16,zero,2002020 <___vfprintf_internal_r+0x1bf0>
 20021ac:	d8812b17 	ldw	r2,1196(sp)
 20021b0:	d8812815 	stw	r2,1184(sp)
 20021b4:	103e880e 	bge	r2,zero,2001bd8 <___vfprintf_internal_r+0x17a8>
 20021b8:	003f9e06 	br	2002034 <___vfprintf_internal_r+0x1c04>
 20021bc:	00800b44 	movi	r2,45
 20021c0:	0529c83a 	sub	r20,zero,r20
 20021c4:	d8812005 	stb	r2,1152(sp)
 20021c8:	003f8606 	br	2001fe4 <___vfprintf_internal_r+0x1bb4>
 20021cc:	1007883a 	mov	r3,r2
 20021d0:	003e6d06 	br	2001b88 <___vfprintf_internal_r+0x1758>
 20021d4:	e000021e 	bne	fp,zero,20021e0 <___vfprintf_internal_r+0x1db0>
 20021d8:	8400004c 	andi	r16,r16,1
 20021dc:	80000e26 	beq	r16,zero,2002218 <___vfprintf_internal_r+0x1de8>
 20021e0:	e7000084 	addi	fp,fp,2
 20021e4:	df012b15 	stw	fp,1196(sp)
 20021e8:	df012815 	stw	fp,1184(sp)
 20021ec:	e03e7a0e 	bge	fp,zero,2001bd8 <___vfprintf_internal_r+0x17a8>
 20021f0:	003f9006 	br	2002034 <___vfprintf_internal_r+0x1c04>
 20021f4:	94803fcc 	andi	r18,r18,255
 20021f8:	9480201c 	xori	r18,r18,128
 20021fc:	073fffc4 	movi	fp,-1
 2002200:	94bfe004 	addi	r18,r18,-128
 2002204:	0038e806 	br	20005a8 <___vfprintf_internal_r+0x178>
 2002208:	d8c12044 	addi	r3,sp,1153
 200220c:	003f7d06 	br	2002004 <___vfprintf_internal_r+0x1bd4>
 2002210:	dd012417 	ldw	r20,1168(sp)
 2002214:	003f6d06 	br	2001fcc <___vfprintf_internal_r+0x1b9c>
 2002218:	00c00044 	movi	r3,1
 200221c:	d8c12815 	stw	r3,1184(sp)
 2002220:	d8c12b15 	stw	r3,1196(sp)
 2002224:	003e6c06 	br	2001bd8 <___vfprintf_internal_r+0x17a8>

02002228 <__vfprintf_internal>:
 2002228:	00808074 	movhi	r2,513
 200222c:	10b5c804 	addi	r2,r2,-10464
 2002230:	2007883a 	mov	r3,r4
 2002234:	11000017 	ldw	r4,0(r2)
 2002238:	2805883a 	mov	r2,r5
 200223c:	300f883a 	mov	r7,r6
 2002240:	180b883a 	mov	r5,r3
 2002244:	100d883a 	mov	r6,r2
 2002248:	20004301 	jmpi	2000430 <___vfprintf_internal_r>

0200224c <__swsetup_r>:
 200224c:	00808074 	movhi	r2,513
 2002250:	10b5c804 	addi	r2,r2,-10464
 2002254:	10800017 	ldw	r2,0(r2)
 2002258:	defffd04 	addi	sp,sp,-12
 200225c:	dc400115 	stw	r17,4(sp)
 2002260:	dc000015 	stw	r16,0(sp)
 2002264:	dfc00215 	stw	ra,8(sp)
 2002268:	2023883a 	mov	r17,r4
 200226c:	2821883a 	mov	r16,r5
 2002270:	10000226 	beq	r2,zero,200227c <__swsetup_r+0x30>
 2002274:	10c00e17 	ldw	r3,56(r2)
 2002278:	18003d26 	beq	r3,zero,2002370 <__swsetup_r+0x124>
 200227c:	8080030b 	ldhu	r2,12(r16)
 2002280:	10c0020c 	andi	r3,r2,8
 2002284:	18ffffcc 	andi	r3,r3,65535
 2002288:	18e0001c 	xori	r3,r3,32768
 200228c:	18e00004 	addi	r3,r3,-32768
 2002290:	18001226 	beq	r3,zero,20022dc <__swsetup_r+0x90>
 2002294:	80c00417 	ldw	r3,16(r16)
 2002298:	18001f26 	beq	r3,zero,2002318 <__swsetup_r+0xcc>
 200229c:	1100004c 	andi	r4,r2,1
 20022a0:	2000261e 	bne	r4,zero,200233c <__swsetup_r+0xf0>
 20022a4:	1080008c 	andi	r2,r2,2
 20022a8:	10bfffcc 	andi	r2,r2,65535
 20022ac:	10a0001c 	xori	r2,r2,32768
 20022b0:	10a00004 	addi	r2,r2,-32768
 20022b4:	1000311e 	bne	r2,zero,200237c <__swsetup_r+0x130>
 20022b8:	80800517 	ldw	r2,20(r16)
 20022bc:	80800215 	stw	r2,8(r16)
 20022c0:	18002326 	beq	r3,zero,2002350 <__swsetup_r+0x104>
 20022c4:	0005883a 	mov	r2,zero
 20022c8:	dfc00217 	ldw	ra,8(sp)
 20022cc:	dc400117 	ldw	r17,4(sp)
 20022d0:	dc000017 	ldw	r16,0(sp)
 20022d4:	dec00304 	addi	sp,sp,12
 20022d8:	f800283a 	ret
 20022dc:	10c0040c 	andi	r3,r2,16
 20022e0:	18ffffcc 	andi	r3,r3,65535
 20022e4:	18e0001c 	xori	r3,r3,32768
 20022e8:	18e00004 	addi	r3,r3,-32768
 20022ec:	18001e26 	beq	r3,zero,2002368 <__swsetup_r+0x11c>
 20022f0:	10c0010c 	andi	r3,r2,4
 20022f4:	18ffffcc 	andi	r3,r3,65535
 20022f8:	18e0001c 	xori	r3,r3,32768
 20022fc:	18e00004 	addi	r3,r3,-32768
 2002300:	1800211e 	bne	r3,zero,2002388 <__swsetup_r+0x13c>
 2002304:	80c00417 	ldw	r3,16(r16)
 2002308:	11400214 	ori	r5,r2,8
 200230c:	8140030d 	sth	r5,12(r16)
 2002310:	2805883a 	mov	r2,r5
 2002314:	183fe11e 	bne	r3,zero,200229c <__swsetup_r+0x50>
 2002318:	1140a00c 	andi	r5,r2,640
 200231c:	01008004 	movi	r4,512
 2002320:	293fde26 	beq	r5,r4,200229c <__swsetup_r+0x50>
 2002324:	8809883a 	mov	r4,r17
 2002328:	800b883a 	mov	r5,r16
 200232c:	2004c000 	call	2004c00 <__smakebuf_r>
 2002330:	8080030b 	ldhu	r2,12(r16)
 2002334:	80c00417 	ldw	r3,16(r16)
 2002338:	003fd806 	br	200229c <__swsetup_r+0x50>
 200233c:	80800517 	ldw	r2,20(r16)
 2002340:	80000215 	stw	zero,8(r16)
 2002344:	0085c83a 	sub	r2,zero,r2
 2002348:	80800615 	stw	r2,24(r16)
 200234c:	183fdd1e 	bne	r3,zero,20022c4 <__swsetup_r+0x78>
 2002350:	8080030b 	ldhu	r2,12(r16)
 2002354:	1080200c 	andi	r2,r2,128
 2002358:	10bfffcc 	andi	r2,r2,65535
 200235c:	10a0001c 	xori	r2,r2,32768
 2002360:	10a00004 	addi	r2,r2,-32768
 2002364:	103fd826 	beq	r2,zero,20022c8 <__swsetup_r+0x7c>
 2002368:	00bfffc4 	movi	r2,-1
 200236c:	003fd606 	br	20022c8 <__swsetup_r+0x7c>
 2002370:	1009883a 	mov	r4,r2
 2002374:	2003e8c0 	call	2003e8c <__sinit>
 2002378:	003fc006 	br	200227c <__swsetup_r+0x30>
 200237c:	0005883a 	mov	r2,zero
 2002380:	80800215 	stw	r2,8(r16)
 2002384:	003fce06 	br	20022c0 <__swsetup_r+0x74>
 2002388:	81400c17 	ldw	r5,48(r16)
 200238c:	28000626 	beq	r5,zero,20023a8 <__swsetup_r+0x15c>
 2002390:	80c01004 	addi	r3,r16,64
 2002394:	28c00326 	beq	r5,r3,20023a4 <__swsetup_r+0x158>
 2002398:	8809883a 	mov	r4,r17
 200239c:	20042100 	call	2004210 <_free_r>
 20023a0:	8080030b 	ldhu	r2,12(r16)
 20023a4:	80000c15 	stw	zero,48(r16)
 20023a8:	80c00417 	ldw	r3,16(r16)
 20023ac:	013ff6c4 	movi	r4,-37
 20023b0:	2084703a 	and	r2,r4,r2
 20023b4:	80000115 	stw	zero,4(r16)
 20023b8:	80c00015 	stw	r3,0(r16)
 20023bc:	003fd206 	br	2002308 <__swsetup_r+0xbc>

020023c0 <quorem>:
 20023c0:	defff704 	addi	sp,sp,-36
 20023c4:	dc400115 	stw	r17,4(sp)
 20023c8:	20800417 	ldw	r2,16(r4)
 20023cc:	2c400417 	ldw	r17,16(r5)
 20023d0:	dd800615 	stw	r22,24(sp)
 20023d4:	dd400515 	stw	r21,20(sp)
 20023d8:	dfc00815 	stw	ra,32(sp)
 20023dc:	ddc00715 	stw	r23,28(sp)
 20023e0:	dd000415 	stw	r20,16(sp)
 20023e4:	dcc00315 	stw	r19,12(sp)
 20023e8:	dc800215 	stw	r18,8(sp)
 20023ec:	dc000015 	stw	r16,0(sp)
 20023f0:	202b883a 	mov	r21,r4
 20023f4:	282d883a 	mov	r22,r5
 20023f8:	14407116 	blt	r2,r17,20025c0 <quorem+0x200>
 20023fc:	88800104 	addi	r2,r17,4
 2002400:	1085883a 	add	r2,r2,r2
 2002404:	1085883a 	add	r2,r2,r2
 2002408:	28a7883a 	add	r19,r5,r2
 200240c:	2085883a 	add	r2,r4,r2
 2002410:	15c00017 	ldw	r23,0(r2)
 2002414:	99400017 	ldw	r5,0(r19)
 2002418:	8c7fffc4 	addi	r17,r17,-1
 200241c:	b809883a 	mov	r4,r23
 2002420:	29400044 	addi	r5,r5,1
 2002424:	2008f540 	call	2008f54 <__udivsi3>
 2002428:	1025883a 	mov	r18,r2
 200242c:	b4000504 	addi	r16,r22,20
 2002430:	ad000504 	addi	r20,r21,20
 2002434:	10002d26 	beq	r2,zero,20024ec <quorem+0x12c>
 2002438:	800d883a 	mov	r6,r16
 200243c:	a007883a 	mov	r3,r20
 2002440:	000f883a 	mov	r7,zero
 2002444:	0005883a 	mov	r2,zero
 2002448:	32c00017 	ldw	r11,0(r6)
 200244c:	1a400017 	ldw	r9,0(r3)
 2002450:	31800104 	addi	r6,r6,4
 2002454:	5abfffcc 	andi	r10,r11,65535
 2002458:	5495383a 	mul	r10,r10,r18
 200245c:	5816d43a 	srli	r11,r11,16
 2002460:	4a3fffcc 	andi	r8,r9,65535
 2002464:	3a95883a 	add	r10,r7,r10
 2002468:	500ed43a 	srli	r7,r10,16
 200246c:	5c97383a 	mul	r11,r11,r18
 2002470:	4085883a 	add	r2,r8,r2
 2002474:	52bfffcc 	andi	r10,r10,65535
 2002478:	1291c83a 	sub	r8,r2,r10
 200247c:	4804d43a 	srli	r2,r9,16
 2002480:	3acf883a 	add	r7,r7,r11
 2002484:	4015d43a 	srai	r10,r8,16
 2002488:	393fffcc 	andi	r4,r7,65535
 200248c:	1105c83a 	sub	r2,r2,r4
 2002490:	1285883a 	add	r2,r2,r10
 2002494:	1880008d 	sth	r2,2(r3)
 2002498:	1a00000d 	sth	r8,0(r3)
 200249c:	380ed43a 	srli	r7,r7,16
 20024a0:	1005d43a 	srai	r2,r2,16
 20024a4:	18c00104 	addi	r3,r3,4
 20024a8:	99bfe72e 	bgeu	r19,r6,2002448 <quorem+0x88>
 20024ac:	b8000f1e 	bne	r23,zero,20024ec <quorem+0x12c>
 20024b0:	88800144 	addi	r2,r17,5
 20024b4:	1085883a 	add	r2,r2,r2
 20024b8:	1085883a 	add	r2,r2,r2
 20024bc:	a887883a 	add	r3,r21,r2
 20024c0:	18bfff04 	addi	r2,r3,-4
 20024c4:	a080082e 	bgeu	r20,r2,20024e8 <quorem+0x128>
 20024c8:	18ffff17 	ldw	r3,-4(r3)
 20024cc:	18000326 	beq	r3,zero,20024dc <quorem+0x11c>
 20024d0:	00000506 	br	20024e8 <quorem+0x128>
 20024d4:	10c00017 	ldw	r3,0(r2)
 20024d8:	1800031e 	bne	r3,zero,20024e8 <quorem+0x128>
 20024dc:	10bfff04 	addi	r2,r2,-4
 20024e0:	8c7fffc4 	addi	r17,r17,-1
 20024e4:	a0bffb36 	bltu	r20,r2,20024d4 <quorem+0x114>
 20024e8:	ac400415 	stw	r17,16(r21)
 20024ec:	a809883a 	mov	r4,r21
 20024f0:	b00b883a 	mov	r5,r22
 20024f4:	20060e80 	call	20060e8 <__mcmp>
 20024f8:	10002516 	blt	r2,zero,2002590 <quorem+0x1d0>
 20024fc:	94800044 	addi	r18,r18,1
 2002500:	a007883a 	mov	r3,r20
 2002504:	000b883a 	mov	r5,zero
 2002508:	1a000017 	ldw	r8,0(r3)
 200250c:	81c00017 	ldw	r7,0(r16)
 2002510:	84000104 	addi	r16,r16,4
 2002514:	41bfffcc 	andi	r6,r8,65535
 2002518:	38bfffcc 	andi	r2,r7,65535
 200251c:	314b883a 	add	r5,r6,r5
 2002520:	288dc83a 	sub	r6,r5,r2
 2002524:	380ed43a 	srli	r7,r7,16
 2002528:	400ad43a 	srli	r5,r8,16
 200252c:	3005d43a 	srai	r2,r6,16
 2002530:	1980000d 	sth	r6,0(r3)
 2002534:	29cbc83a 	sub	r5,r5,r7
 2002538:	288b883a 	add	r5,r5,r2
 200253c:	1940008d 	sth	r5,2(r3)
 2002540:	280bd43a 	srai	r5,r5,16
 2002544:	18c00104 	addi	r3,r3,4
 2002548:	9c3fef2e 	bgeu	r19,r16,2002508 <quorem+0x148>
 200254c:	88800144 	addi	r2,r17,5
 2002550:	1085883a 	add	r2,r2,r2
 2002554:	1085883a 	add	r2,r2,r2
 2002558:	a885883a 	add	r2,r21,r2
 200255c:	10c00017 	ldw	r3,0(r2)
 2002560:	18000b1e 	bne	r3,zero,2002590 <quorem+0x1d0>
 2002564:	10ffff04 	addi	r3,r2,-4
 2002568:	a0c0082e 	bgeu	r20,r3,200258c <quorem+0x1cc>
 200256c:	10bfff17 	ldw	r2,-4(r2)
 2002570:	10000326 	beq	r2,zero,2002580 <quorem+0x1c0>
 2002574:	00000506 	br	200258c <quorem+0x1cc>
 2002578:	18800017 	ldw	r2,0(r3)
 200257c:	1000031e 	bne	r2,zero,200258c <quorem+0x1cc>
 2002580:	18ffff04 	addi	r3,r3,-4
 2002584:	8c7fffc4 	addi	r17,r17,-1
 2002588:	a0fffb36 	bltu	r20,r3,2002578 <quorem+0x1b8>
 200258c:	ac400415 	stw	r17,16(r21)
 2002590:	9005883a 	mov	r2,r18
 2002594:	dfc00817 	ldw	ra,32(sp)
 2002598:	ddc00717 	ldw	r23,28(sp)
 200259c:	dd800617 	ldw	r22,24(sp)
 20025a0:	dd400517 	ldw	r21,20(sp)
 20025a4:	dd000417 	ldw	r20,16(sp)
 20025a8:	dcc00317 	ldw	r19,12(sp)
 20025ac:	dc800217 	ldw	r18,8(sp)
 20025b0:	dc400117 	ldw	r17,4(sp)
 20025b4:	dc000017 	ldw	r16,0(sp)
 20025b8:	dec00904 	addi	sp,sp,36
 20025bc:	f800283a 	ret
 20025c0:	0005883a 	mov	r2,zero
 20025c4:	003ff306 	br	2002594 <quorem+0x1d4>

020025c8 <_dtoa_r>:
 20025c8:	20801017 	ldw	r2,64(r4)
 20025cc:	deffdf04 	addi	sp,sp,-132
 20025d0:	dcc01a15 	stw	r19,104(sp)
 20025d4:	dc801915 	stw	r18,100(sp)
 20025d8:	dc401815 	stw	r17,96(sp)
 20025dc:	dc001715 	stw	r16,92(sp)
 20025e0:	dfc02015 	stw	ra,128(sp)
 20025e4:	df001f15 	stw	fp,124(sp)
 20025e8:	ddc01e15 	stw	r23,120(sp)
 20025ec:	dd801d15 	stw	r22,116(sp)
 20025f0:	dd401c15 	stw	r21,112(sp)
 20025f4:	dd001b15 	stw	r20,108(sp)
 20025f8:	d9400315 	stw	r5,12(sp)
 20025fc:	d9c00415 	stw	r7,16(sp)
 2002600:	2021883a 	mov	r16,r4
 2002604:	3025883a 	mov	r18,r6
 2002608:	dcc02317 	ldw	r19,140(sp)
 200260c:	3023883a 	mov	r17,r6
 2002610:	10000826 	beq	r2,zero,2002634 <_dtoa_r+0x6c>
 2002614:	20c01117 	ldw	r3,68(r4)
 2002618:	01800044 	movi	r6,1
 200261c:	100b883a 	mov	r5,r2
 2002620:	30cc983a 	sll	r6,r6,r3
 2002624:	10c00115 	stw	r3,4(r2)
 2002628:	11800215 	stw	r6,8(r2)
 200262c:	20058ec0 	call	20058ec <_Bfree>
 2002630:	80001015 	stw	zero,64(r16)
 2002634:	90002f16 	blt	r18,zero,20026f4 <_dtoa_r+0x12c>
 2002638:	98000015 	stw	zero,0(r19)
 200263c:	90dffc2c 	andhi	r3,r18,32752
 2002640:	009ffc34 	movhi	r2,32752
 2002644:	18801c26 	beq	r3,r2,20026b8 <_dtoa_r+0xf0>
 2002648:	d9000317 	ldw	r4,12(sp)
 200264c:	880b883a 	mov	r5,r17
 2002650:	000d883a 	mov	r6,zero
 2002654:	000f883a 	mov	r7,zero
 2002658:	20089940 	call	2008994 <__eqdf2>
 200265c:	10002c1e 	bne	r2,zero,2002710 <_dtoa_r+0x148>
 2002660:	d9002217 	ldw	r4,136(sp)
 2002664:	d9c02417 	ldw	r7,144(sp)
 2002668:	00800044 	movi	r2,1
 200266c:	20800015 	stw	r2,0(r4)
 2002670:	38019426 	beq	r7,zero,2002cc4 <_dtoa_r+0x6fc>
 2002674:	00808074 	movhi	r2,513
 2002678:	10ae8844 	addi	r2,r2,-17887
 200267c:	38800015 	stw	r2,0(r7)
 2002680:	15ffffc4 	addi	r23,r2,-1
 2002684:	b805883a 	mov	r2,r23
 2002688:	dfc02017 	ldw	ra,128(sp)
 200268c:	df001f17 	ldw	fp,124(sp)
 2002690:	ddc01e17 	ldw	r23,120(sp)
 2002694:	dd801d17 	ldw	r22,116(sp)
 2002698:	dd401c17 	ldw	r21,112(sp)
 200269c:	dd001b17 	ldw	r20,108(sp)
 20026a0:	dcc01a17 	ldw	r19,104(sp)
 20026a4:	dc801917 	ldw	r18,100(sp)
 20026a8:	dc401817 	ldw	r17,96(sp)
 20026ac:	dc001717 	ldw	r16,92(sp)
 20026b0:	dec02104 	addi	sp,sp,132
 20026b4:	f800283a 	ret
 20026b8:	d8c02217 	ldw	r3,136(sp)
 20026bc:	d9000317 	ldw	r4,12(sp)
 20026c0:	0089c3c4 	movi	r2,9999
 20026c4:	18800015 	stw	r2,0(r3)
 20026c8:	20016c26 	beq	r4,zero,2002c7c <_dtoa_r+0x6b4>
 20026cc:	05c08074 	movhi	r23,513
 20026d0:	bdee9404 	addi	r23,r23,-17840
 20026d4:	d9c02417 	ldw	r7,144(sp)
 20026d8:	383fea26 	beq	r7,zero,2002684 <_dtoa_r+0xbc>
 20026dc:	b88000c7 	ldb	r2,3(r23)
 20026e0:	10016d1e 	bne	r2,zero,2002c98 <_dtoa_r+0x6d0>
 20026e4:	b88000c4 	addi	r2,r23,3
 20026e8:	d8c02417 	ldw	r3,144(sp)
 20026ec:	18800015 	stw	r2,0(r3)
 20026f0:	003fe406 	br	2002684 <_dtoa_r+0xbc>
 20026f4:	04600034 	movhi	r17,32768
 20026f8:	8c7fffc4 	addi	r17,r17,-1
 20026fc:	9462703a 	and	r17,r18,r17
 2002700:	00800044 	movi	r2,1
 2002704:	98800015 	stw	r2,0(r19)
 2002708:	8825883a 	mov	r18,r17
 200270c:	003fcb06 	br	200263c <_dtoa_r+0x74>
 2002710:	d9400317 	ldw	r5,12(sp)
 2002714:	9028d53a 	srli	r20,r18,20
 2002718:	d8800204 	addi	r2,sp,8
 200271c:	d8800015 	stw	r2,0(sp)
 2002720:	8009883a 	mov	r4,r16
 2002724:	880d883a 	mov	r6,r17
 2002728:	d9c00104 	addi	r7,sp,4
 200272c:	20064900 	call	2006490 <__d2b>
 2002730:	a501ffcc 	andi	r20,r20,2047
 2002734:	1039883a 	mov	fp,r2
 2002738:	a001591e 	bne	r20,zero,2002ca0 <_dtoa_r+0x6d8>
 200273c:	dd400217 	ldw	r21,8(sp)
 2002740:	dd000117 	ldw	r20,4(sp)
 2002744:	00befbc4 	movi	r2,-1041
 2002748:	ad29883a 	add	r20,r21,r20
 200274c:	a082d216 	blt	r20,r2,2003298 <_dtoa_r+0xcd0>
 2002750:	d8c00317 	ldw	r3,12(sp)
 2002754:	013f0384 	movi	r4,-1010
 2002758:	2509c83a 	sub	r4,r4,r20
 200275c:	a0810484 	addi	r2,r20,1042
 2002760:	9124983a 	sll	r18,r18,r4
 2002764:	1884d83a 	srl	r2,r3,r2
 2002768:	9088b03a 	or	r4,r18,r2
 200276c:	2008d180 	call	2008d18 <__floatunsidf>
 2002770:	1009883a 	mov	r4,r2
 2002774:	017f8434 	movhi	r5,65040
 2002778:	00800044 	movi	r2,1
 200277c:	194b883a 	add	r5,r3,r5
 2002780:	a53fffc4 	addi	r20,r20,-1
 2002784:	d8800f15 	stw	r2,60(sp)
 2002788:	000d883a 	mov	r6,zero
 200278c:	01cffe34 	movhi	r7,16376
 2002790:	200849c0 	call	200849c <__subdf3>
 2002794:	1009883a 	mov	r4,r2
 2002798:	180b883a 	mov	r5,r3
 200279c:	0198dbf4 	movhi	r6,25455
 20027a0:	3190d844 	addi	r6,r6,17249
 20027a4:	01cff4f4 	movhi	r7,16339
 20027a8:	39e1e9c4 	addi	r7,r7,-30809
 20027ac:	20084fc0 	call	20084fc <__muldf3>
 20027b0:	180b883a 	mov	r5,r3
 20027b4:	01a2d874 	movhi	r6,35681
 20027b8:	31b22cc4 	addi	r6,r6,-14157
 20027bc:	01cff1f4 	movhi	r7,16327
 20027c0:	39e28a04 	addi	r7,r7,-30168
 20027c4:	1009883a 	mov	r4,r2
 20027c8:	20084480 	call	2008448 <__adddf3>
 20027cc:	a009883a 	mov	r4,r20
 20027d0:	1027883a 	mov	r19,r2
 20027d4:	1825883a 	mov	r18,r3
 20027d8:	2008b700 	call	2008b70 <__floatsidf>
 20027dc:	1009883a 	mov	r4,r2
 20027e0:	180b883a 	mov	r5,r3
 20027e4:	019427f4 	movhi	r6,20639
 20027e8:	319e7ec4 	addi	r6,r6,31227
 20027ec:	01cff4f4 	movhi	r7,16339
 20027f0:	39d104c4 	addi	r7,r7,17427
 20027f4:	20084fc0 	call	20084fc <__muldf3>
 20027f8:	9809883a 	mov	r4,r19
 20027fc:	900b883a 	mov	r5,r18
 2002800:	100d883a 	mov	r6,r2
 2002804:	180f883a 	mov	r7,r3
 2002808:	20084480 	call	2008448 <__adddf3>
 200280c:	1009883a 	mov	r4,r2
 2002810:	180b883a 	mov	r5,r3
 2002814:	1027883a 	mov	r19,r2
 2002818:	1825883a 	mov	r18,r3
 200281c:	2008c440 	call	2008c44 <__fixdfsi>
 2002820:	9809883a 	mov	r4,r19
 2002824:	900b883a 	mov	r5,r18
 2002828:	000d883a 	mov	r6,zero
 200282c:	000f883a 	mov	r7,zero
 2002830:	d8800615 	stw	r2,24(sp)
 2002834:	2008b140 	call	2008b14 <__ltdf2>
 2002838:	10027e16 	blt	r2,zero,2003234 <_dtoa_r+0xc6c>
 200283c:	d8c00617 	ldw	r3,24(sp)
 2002840:	00800584 	movi	r2,22
 2002844:	10c26c36 	bltu	r2,r3,20031f8 <_dtoa_r+0xc30>
 2002848:	180490fa 	slli	r2,r3,3
 200284c:	00c08074 	movhi	r3,513
 2002850:	18eeba04 	addi	r3,r3,-17688
 2002854:	d9800317 	ldw	r6,12(sp)
 2002858:	1885883a 	add	r2,r3,r2
 200285c:	11000017 	ldw	r4,0(r2)
 2002860:	11400117 	ldw	r5,4(r2)
 2002864:	880f883a 	mov	r7,r17
 2002868:	2008a4c0 	call	2008a4c <__gtdf2>
 200286c:	00828f0e 	bge	zero,r2,20032ac <_dtoa_r+0xce4>
 2002870:	d8800617 	ldw	r2,24(sp)
 2002874:	d8000d15 	stw	zero,52(sp)
 2002878:	10bfffc4 	addi	r2,r2,-1
 200287c:	d8800615 	stw	r2,24(sp)
 2002880:	ad29c83a 	sub	r20,r21,r20
 2002884:	a53fffc4 	addi	r20,r20,-1
 2002888:	a0026616 	blt	r20,zero,2003224 <_dtoa_r+0xc5c>
 200288c:	dd000715 	stw	r20,28(sp)
 2002890:	d8000815 	stw	zero,32(sp)
 2002894:	d8800617 	ldw	r2,24(sp)
 2002898:	10025a16 	blt	r2,zero,2003204 <_dtoa_r+0xc3c>
 200289c:	d8c00717 	ldw	r3,28(sp)
 20028a0:	d8800b15 	stw	r2,44(sp)
 20028a4:	d8000a15 	stw	zero,40(sp)
 20028a8:	1887883a 	add	r3,r3,r2
 20028ac:	d8c00715 	stw	r3,28(sp)
 20028b0:	d9c00417 	ldw	r7,16(sp)
 20028b4:	00800244 	movi	r2,9
 20028b8:	11c10536 	bltu	r2,r7,2002cd0 <_dtoa_r+0x708>
 20028bc:	00800144 	movi	r2,5
 20028c0:	11c4c60e 	bge	r2,r7,2003bdc <_dtoa_r+0x1614>
 20028c4:	39ffff04 	addi	r7,r7,-4
 20028c8:	d9c00415 	stw	r7,16(sp)
 20028cc:	0027883a 	mov	r19,zero
 20028d0:	d9c00417 	ldw	r7,16(sp)
 20028d4:	008000c4 	movi	r2,3
 20028d8:	3883a226 	beq	r7,r2,2003764 <_dtoa_r+0x119c>
 20028dc:	11c2bc16 	blt	r2,r7,20033d0 <_dtoa_r+0xe08>
 20028e0:	00800084 	movi	r2,2
 20028e4:	3880fb1e 	bne	r7,r2,2002cd4 <_dtoa_r+0x70c>
 20028e8:	d8000c15 	stw	zero,48(sp)
 20028ec:	d9002117 	ldw	r4,132(sp)
 20028f0:	0103ae0e 	bge	zero,r4,20037ac <_dtoa_r+0x11e4>
 20028f4:	2025883a 	mov	r18,r4
 20028f8:	d9000e15 	stw	r4,56(sp)
 20028fc:	d9000915 	stw	r4,36(sp)
 2002900:	80001115 	stw	zero,68(r16)
 2002904:	008005c4 	movi	r2,23
 2002908:	1484b22e 	bgeu	r2,r18,2003bd4 <_dtoa_r+0x160c>
 200290c:	00c00044 	movi	r3,1
 2002910:	00800104 	movi	r2,4
 2002914:	1085883a 	add	r2,r2,r2
 2002918:	11000504 	addi	r4,r2,20
 200291c:	180b883a 	mov	r5,r3
 2002920:	18c00044 	addi	r3,r3,1
 2002924:	913ffb2e 	bgeu	r18,r4,2002914 <_dtoa_r+0x34c>
 2002928:	81401115 	stw	r5,68(r16)
 200292c:	8009883a 	mov	r4,r16
 2002930:	20058440 	call	2005844 <_Balloc>
 2002934:	102f883a 	mov	r23,r2
 2002938:	80801015 	stw	r2,64(r16)
 200293c:	00800384 	movi	r2,14
 2002940:	1480f036 	bltu	r2,r18,2002d04 <_dtoa_r+0x73c>
 2002944:	9800ef26 	beq	r19,zero,2002d04 <_dtoa_r+0x73c>
 2002948:	d8800617 	ldw	r2,24(sp)
 200294c:	00839c0e 	bge	zero,r2,20037c0 <_dtoa_r+0x11f8>
 2002950:	d8c00617 	ldw	r3,24(sp)
 2002954:	108003cc 	andi	r2,r2,15
 2002958:	100490fa 	slli	r2,r2,3
 200295c:	182bd13a 	srai	r21,r3,4
 2002960:	00c08074 	movhi	r3,513
 2002964:	18eeba04 	addi	r3,r3,-17688
 2002968:	1885883a 	add	r2,r3,r2
 200296c:	a8c0040c 	andi	r3,r21,16
 2002970:	12800017 	ldw	r10,0(r2)
 2002974:	15800117 	ldw	r22,4(r2)
 2002978:	18038726 	beq	r3,zero,2003798 <_dtoa_r+0x11d0>
 200297c:	00808074 	movhi	r2,513
 2002980:	10aeb004 	addi	r2,r2,-17728
 2002984:	11800817 	ldw	r6,32(r2)
 2002988:	11c00917 	ldw	r7,36(r2)
 200298c:	d9000317 	ldw	r4,12(sp)
 2002990:	880b883a 	mov	r5,r17
 2002994:	da801515 	stw	r10,84(sp)
 2002998:	20087e00 	call	20087e0 <__divdf3>
 200299c:	da801517 	ldw	r10,84(sp)
 20029a0:	d8801015 	stw	r2,64(sp)
 20029a4:	1829883a 	mov	r20,r3
 20029a8:	ad4003cc 	andi	r21,r21,15
 20029ac:	048000c4 	movi	r18,3
 20029b0:	a8001126 	beq	r21,zero,20029f8 <_dtoa_r+0x430>
 20029b4:	04c08074 	movhi	r19,513
 20029b8:	9ceeb004 	addi	r19,r19,-17728
 20029bc:	5005883a 	mov	r2,r10
 20029c0:	b007883a 	mov	r3,r22
 20029c4:	a980004c 	andi	r6,r21,1
 20029c8:	1009883a 	mov	r4,r2
 20029cc:	a82bd07a 	srai	r21,r21,1
 20029d0:	180b883a 	mov	r5,r3
 20029d4:	30000426 	beq	r6,zero,20029e8 <_dtoa_r+0x420>
 20029d8:	99800017 	ldw	r6,0(r19)
 20029dc:	99c00117 	ldw	r7,4(r19)
 20029e0:	94800044 	addi	r18,r18,1
 20029e4:	20084fc0 	call	20084fc <__muldf3>
 20029e8:	9cc00204 	addi	r19,r19,8
 20029ec:	a83ff51e 	bne	r21,zero,20029c4 <_dtoa_r+0x3fc>
 20029f0:	1015883a 	mov	r10,r2
 20029f4:	182d883a 	mov	r22,r3
 20029f8:	d9001017 	ldw	r4,64(sp)
 20029fc:	a00b883a 	mov	r5,r20
 2002a00:	500d883a 	mov	r6,r10
 2002a04:	b00f883a 	mov	r7,r22
 2002a08:	20087e00 	call	20087e0 <__divdf3>
 2002a0c:	1027883a 	mov	r19,r2
 2002a10:	1829883a 	mov	r20,r3
 2002a14:	d8c00d17 	ldw	r3,52(sp)
 2002a18:	18000626 	beq	r3,zero,2002a34 <_dtoa_r+0x46c>
 2002a1c:	9809883a 	mov	r4,r19
 2002a20:	a00b883a 	mov	r5,r20
 2002a24:	000d883a 	mov	r6,zero
 2002a28:	01cffc34 	movhi	r7,16368
 2002a2c:	2008b140 	call	2008b14 <__ltdf2>
 2002a30:	10040e16 	blt	r2,zero,2003a6c <_dtoa_r+0x14a4>
 2002a34:	9009883a 	mov	r4,r18
 2002a38:	2008b700 	call	2008b70 <__floatsidf>
 2002a3c:	1009883a 	mov	r4,r2
 2002a40:	180b883a 	mov	r5,r3
 2002a44:	980d883a 	mov	r6,r19
 2002a48:	a00f883a 	mov	r7,r20
 2002a4c:	20084fc0 	call	20084fc <__muldf3>
 2002a50:	1009883a 	mov	r4,r2
 2002a54:	180b883a 	mov	r5,r3
 2002a58:	000d883a 	mov	r6,zero
 2002a5c:	01d00734 	movhi	r7,16412
 2002a60:	20084480 	call	2008448 <__adddf3>
 2002a64:	057f3034 	movhi	r21,64704
 2002a68:	1d6b883a 	add	r21,r3,r21
 2002a6c:	d8c00917 	ldw	r3,36(sp)
 2002a70:	1025883a 	mov	r18,r2
 2002a74:	18031f26 	beq	r3,zero,20036f4 <_dtoa_r+0x112c>
 2002a78:	d8800617 	ldw	r2,24(sp)
 2002a7c:	dac00917 	ldw	r11,36(sp)
 2002a80:	d8801315 	stw	r2,76(sp)
 2002a84:	d8c00c17 	ldw	r3,48(sp)
 2002a88:	18039026 	beq	r3,zero,20038cc <_dtoa_r+0x1304>
 2002a8c:	58bfffc4 	addi	r2,r11,-1
 2002a90:	100490fa 	slli	r2,r2,3
 2002a94:	00c08074 	movhi	r3,513
 2002a98:	18eeba04 	addi	r3,r3,-17688
 2002a9c:	0009883a 	mov	r4,zero
 2002aa0:	1885883a 	add	r2,r3,r2
 2002aa4:	11800017 	ldw	r6,0(r2)
 2002aa8:	11c00117 	ldw	r7,4(r2)
 2002aac:	014ff834 	movhi	r5,16352
 2002ab0:	dac01615 	stw	r11,88(sp)
 2002ab4:	20087e00 	call	20087e0 <__divdf3>
 2002ab8:	900d883a 	mov	r6,r18
 2002abc:	a80f883a 	mov	r7,r21
 2002ac0:	1009883a 	mov	r4,r2
 2002ac4:	180b883a 	mov	r5,r3
 2002ac8:	200849c0 	call	200849c <__subdf3>
 2002acc:	a00b883a 	mov	r5,r20
 2002ad0:	9809883a 	mov	r4,r19
 2002ad4:	182b883a 	mov	r21,r3
 2002ad8:	d8801015 	stw	r2,64(sp)
 2002adc:	2008c440 	call	2008c44 <__fixdfsi>
 2002ae0:	1009883a 	mov	r4,r2
 2002ae4:	d8801515 	stw	r2,84(sp)
 2002ae8:	2008b700 	call	2008b70 <__floatsidf>
 2002aec:	9809883a 	mov	r4,r19
 2002af0:	a00b883a 	mov	r5,r20
 2002af4:	100d883a 	mov	r6,r2
 2002af8:	180f883a 	mov	r7,r3
 2002afc:	200849c0 	call	200849c <__subdf3>
 2002b00:	da401517 	ldw	r9,84(sp)
 2002b04:	d9001017 	ldw	r4,64(sp)
 2002b08:	a80b883a 	mov	r5,r21
 2002b0c:	4d000c04 	addi	r20,r9,48
 2002b10:	bd000005 	stb	r20,0(r23)
 2002b14:	100d883a 	mov	r6,r2
 2002b18:	180f883a 	mov	r7,r3
 2002b1c:	bd800044 	addi	r22,r23,1
 2002b20:	1025883a 	mov	r18,r2
 2002b24:	1827883a 	mov	r19,r3
 2002b28:	2008a4c0 	call	2008a4c <__gtdf2>
 2002b2c:	00842216 	blt	zero,r2,2003bb8 <_dtoa_r+0x15f0>
 2002b30:	0009883a 	mov	r4,zero
 2002b34:	014ffc34 	movhi	r5,16368
 2002b38:	900d883a 	mov	r6,r18
 2002b3c:	980f883a 	mov	r7,r19
 2002b40:	200849c0 	call	200849c <__subdf3>
 2002b44:	d9001017 	ldw	r4,64(sp)
 2002b48:	a80b883a 	mov	r5,r21
 2002b4c:	100d883a 	mov	r6,r2
 2002b50:	180f883a 	mov	r7,r3
 2002b54:	2008a4c0 	call	2008a4c <__gtdf2>
 2002b58:	dac01617 	ldw	r11,88(sp)
 2002b5c:	00841316 	blt	zero,r2,2003bac <_dtoa_r+0x15e4>
 2002b60:	00800044 	movi	r2,1
 2002b64:	12c0670e 	bge	r2,r11,2002d04 <_dtoa_r+0x73c>
 2002b68:	bad7883a 	add	r11,r23,r11
 2002b6c:	df001115 	stw	fp,68(sp)
 2002b70:	dc401215 	stw	r17,72(sp)
 2002b74:	5839883a 	mov	fp,r11
 2002b78:	dc401017 	ldw	r17,64(sp)
 2002b7c:	00000806 	br	2002ba0 <_dtoa_r+0x5d8>
 2002b80:	200849c0 	call	200849c <__subdf3>
 2002b84:	1009883a 	mov	r4,r2
 2002b88:	180b883a 	mov	r5,r3
 2002b8c:	880d883a 	mov	r6,r17
 2002b90:	a80f883a 	mov	r7,r21
 2002b94:	2008b140 	call	2008b14 <__ltdf2>
 2002b98:	1003ee16 	blt	r2,zero,2003b54 <_dtoa_r+0x158c>
 2002b9c:	b703f126 	beq	r22,fp,2003b64 <_dtoa_r+0x159c>
 2002ba0:	8809883a 	mov	r4,r17
 2002ba4:	a80b883a 	mov	r5,r21
 2002ba8:	000d883a 	mov	r6,zero
 2002bac:	01d00934 	movhi	r7,16420
 2002bb0:	20084fc0 	call	20084fc <__muldf3>
 2002bb4:	000d883a 	mov	r6,zero
 2002bb8:	01d00934 	movhi	r7,16420
 2002bbc:	9009883a 	mov	r4,r18
 2002bc0:	980b883a 	mov	r5,r19
 2002bc4:	1023883a 	mov	r17,r2
 2002bc8:	182b883a 	mov	r21,r3
 2002bcc:	20084fc0 	call	20084fc <__muldf3>
 2002bd0:	180b883a 	mov	r5,r3
 2002bd4:	1009883a 	mov	r4,r2
 2002bd8:	1825883a 	mov	r18,r3
 2002bdc:	1027883a 	mov	r19,r2
 2002be0:	2008c440 	call	2008c44 <__fixdfsi>
 2002be4:	1009883a 	mov	r4,r2
 2002be8:	1029883a 	mov	r20,r2
 2002bec:	2008b700 	call	2008b70 <__floatsidf>
 2002bf0:	9809883a 	mov	r4,r19
 2002bf4:	900b883a 	mov	r5,r18
 2002bf8:	100d883a 	mov	r6,r2
 2002bfc:	180f883a 	mov	r7,r3
 2002c00:	200849c0 	call	200849c <__subdf3>
 2002c04:	a5000c04 	addi	r20,r20,48
 2002c08:	b5000005 	stb	r20,0(r22)
 2002c0c:	1009883a 	mov	r4,r2
 2002c10:	180b883a 	mov	r5,r3
 2002c14:	880d883a 	mov	r6,r17
 2002c18:	a80f883a 	mov	r7,r21
 2002c1c:	1025883a 	mov	r18,r2
 2002c20:	1827883a 	mov	r19,r3
 2002c24:	2008b140 	call	2008b14 <__ltdf2>
 2002c28:	b5800044 	addi	r22,r22,1
 2002c2c:	0009883a 	mov	r4,zero
 2002c30:	014ffc34 	movhi	r5,16368
 2002c34:	900d883a 	mov	r6,r18
 2002c38:	980f883a 	mov	r7,r19
 2002c3c:	103fd00e 	bge	r2,zero,2002b80 <_dtoa_r+0x5b8>
 2002c40:	d9001317 	ldw	r4,76(sp)
 2002c44:	df001117 	ldw	fp,68(sp)
 2002c48:	d9000615 	stw	r4,24(sp)
 2002c4c:	8009883a 	mov	r4,r16
 2002c50:	e00b883a 	mov	r5,fp
 2002c54:	20058ec0 	call	20058ec <_Bfree>
 2002c58:	d9c00617 	ldw	r7,24(sp)
 2002c5c:	d8c02217 	ldw	r3,136(sp)
 2002c60:	d9002417 	ldw	r4,144(sp)
 2002c64:	b0000005 	stb	zero,0(r22)
 2002c68:	38800044 	addi	r2,r7,1
 2002c6c:	18800015 	stw	r2,0(r3)
 2002c70:	203e8426 	beq	r4,zero,2002684 <_dtoa_r+0xbc>
 2002c74:	25800015 	stw	r22,0(r4)
 2002c78:	003e8206 	br	2002684 <_dtoa_r+0xbc>
 2002c7c:	00800434 	movhi	r2,16
 2002c80:	10bfffc4 	addi	r2,r2,-1
 2002c84:	90a4703a 	and	r18,r18,r2
 2002c88:	903e901e 	bne	r18,zero,20026cc <_dtoa_r+0x104>
 2002c8c:	05c08074 	movhi	r23,513
 2002c90:	bdee9104 	addi	r23,r23,-17852
 2002c94:	003e8f06 	br	20026d4 <_dtoa_r+0x10c>
 2002c98:	b8800204 	addi	r2,r23,8
 2002c9c:	003e9206 	br	20026e8 <_dtoa_r+0x120>
 2002ca0:	01400434 	movhi	r5,16
 2002ca4:	297fffc4 	addi	r5,r5,-1
 2002ca8:	894a703a 	and	r5,r17,r5
 2002cac:	d9000317 	ldw	r4,12(sp)
 2002cb0:	294ffc34 	orhi	r5,r5,16368
 2002cb4:	a53f0044 	addi	r20,r20,-1023
 2002cb8:	dd400217 	ldw	r21,8(sp)
 2002cbc:	d8000f15 	stw	zero,60(sp)
 2002cc0:	003eb106 	br	2002788 <_dtoa_r+0x1c0>
 2002cc4:	05c08074 	movhi	r23,513
 2002cc8:	bdee8804 	addi	r23,r23,-17888
 2002ccc:	003e6d06 	br	2002684 <_dtoa_r+0xbc>
 2002cd0:	d8000415 	stw	zero,16(sp)
 2002cd4:	80001115 	stw	zero,68(r16)
 2002cd8:	8009883a 	mov	r4,r16
 2002cdc:	000b883a 	mov	r5,zero
 2002ce0:	20058440 	call	2005844 <_Balloc>
 2002ce4:	01ffffc4 	movi	r7,-1
 2002ce8:	102f883a 	mov	r23,r2
 2002cec:	80801015 	stw	r2,64(r16)
 2002cf0:	00800044 	movi	r2,1
 2002cf4:	d9c00915 	stw	r7,36(sp)
 2002cf8:	d8002115 	stw	zero,132(sp)
 2002cfc:	d9c00e15 	stw	r7,56(sp)
 2002d00:	d8800c15 	stw	r2,48(sp)
 2002d04:	d8800117 	ldw	r2,4(sp)
 2002d08:	10008b16 	blt	r2,zero,2002f38 <_dtoa_r+0x970>
 2002d0c:	d9000617 	ldw	r4,24(sp)
 2002d10:	00c00384 	movi	r3,14
 2002d14:	19008816 	blt	r3,r4,2002f38 <_dtoa_r+0x970>
 2002d18:	200490fa 	slli	r2,r4,3
 2002d1c:	d9c02117 	ldw	r7,132(sp)
 2002d20:	00c08074 	movhi	r3,513
 2002d24:	18eeba04 	addi	r3,r3,-17688
 2002d28:	1885883a 	add	r2,r3,r2
 2002d2c:	14800017 	ldw	r18,0(r2)
 2002d30:	14c00117 	ldw	r19,4(r2)
 2002d34:	3801c916 	blt	r7,zero,200345c <_dtoa_r+0xe94>
 2002d38:	d9000317 	ldw	r4,12(sp)
 2002d3c:	900d883a 	mov	r6,r18
 2002d40:	980f883a 	mov	r7,r19
 2002d44:	880b883a 	mov	r5,r17
 2002d48:	20087e00 	call	20087e0 <__divdf3>
 2002d4c:	180b883a 	mov	r5,r3
 2002d50:	1009883a 	mov	r4,r2
 2002d54:	2008c440 	call	2008c44 <__fixdfsi>
 2002d58:	1009883a 	mov	r4,r2
 2002d5c:	102b883a 	mov	r21,r2
 2002d60:	2008b700 	call	2008b70 <__floatsidf>
 2002d64:	1009883a 	mov	r4,r2
 2002d68:	180b883a 	mov	r5,r3
 2002d6c:	900d883a 	mov	r6,r18
 2002d70:	980f883a 	mov	r7,r19
 2002d74:	20084fc0 	call	20084fc <__muldf3>
 2002d78:	d9000317 	ldw	r4,12(sp)
 2002d7c:	880b883a 	mov	r5,r17
 2002d80:	100d883a 	mov	r6,r2
 2002d84:	180f883a 	mov	r7,r3
 2002d88:	200849c0 	call	200849c <__subdf3>
 2002d8c:	d9c00917 	ldw	r7,36(sp)
 2002d90:	1009883a 	mov	r4,r2
 2002d94:	a8800c04 	addi	r2,r21,48
 2002d98:	b8800005 	stb	r2,0(r23)
 2002d9c:	01800044 	movi	r6,1
 2002da0:	180b883a 	mov	r5,r3
 2002da4:	2005883a 	mov	r2,r4
 2002da8:	bd800044 	addi	r22,r23,1
 2002dac:	39803726 	beq	r7,r6,2002e8c <_dtoa_r+0x8c4>
 2002db0:	000d883a 	mov	r6,zero
 2002db4:	01d00934 	movhi	r7,16420
 2002db8:	20084fc0 	call	20084fc <__muldf3>
 2002dbc:	1009883a 	mov	r4,r2
 2002dc0:	180b883a 	mov	r5,r3
 2002dc4:	000d883a 	mov	r6,zero
 2002dc8:	000f883a 	mov	r7,zero
 2002dcc:	1029883a 	mov	r20,r2
 2002dd0:	1823883a 	mov	r17,r3
 2002dd4:	20089940 	call	2008994 <__eqdf2>
 2002dd8:	103f9c26 	beq	r2,zero,2002c4c <_dtoa_r+0x684>
 2002ddc:	dd400917 	ldw	r21,36(sp)
 2002de0:	dc000415 	stw	r16,16(sp)
 2002de4:	00000906 	br	2002e0c <_dtoa_r+0x844>
 2002de8:	20084fc0 	call	20084fc <__muldf3>
 2002dec:	1009883a 	mov	r4,r2
 2002df0:	180b883a 	mov	r5,r3
 2002df4:	000d883a 	mov	r6,zero
 2002df8:	000f883a 	mov	r7,zero
 2002dfc:	1029883a 	mov	r20,r2
 2002e00:	1823883a 	mov	r17,r3
 2002e04:	20089940 	call	2008994 <__eqdf2>
 2002e08:	10022926 	beq	r2,zero,20036b0 <_dtoa_r+0x10e8>
 2002e0c:	900d883a 	mov	r6,r18
 2002e10:	980f883a 	mov	r7,r19
 2002e14:	a009883a 	mov	r4,r20
 2002e18:	880b883a 	mov	r5,r17
 2002e1c:	20087e00 	call	20087e0 <__divdf3>
 2002e20:	180b883a 	mov	r5,r3
 2002e24:	1009883a 	mov	r4,r2
 2002e28:	2008c440 	call	2008c44 <__fixdfsi>
 2002e2c:	1009883a 	mov	r4,r2
 2002e30:	1021883a 	mov	r16,r2
 2002e34:	2008b700 	call	2008b70 <__floatsidf>
 2002e38:	1009883a 	mov	r4,r2
 2002e3c:	180b883a 	mov	r5,r3
 2002e40:	900d883a 	mov	r6,r18
 2002e44:	980f883a 	mov	r7,r19
 2002e48:	20084fc0 	call	20084fc <__muldf3>
 2002e4c:	a009883a 	mov	r4,r20
 2002e50:	880b883a 	mov	r5,r17
 2002e54:	100d883a 	mov	r6,r2
 2002e58:	180f883a 	mov	r7,r3
 2002e5c:	200849c0 	call	200849c <__subdf3>
 2002e60:	82400c04 	addi	r9,r16,48
 2002e64:	b2400005 	stb	r9,0(r22)
 2002e68:	b5800044 	addi	r22,r22,1
 2002e6c:	b5d3c83a 	sub	r9,r22,r23
 2002e70:	000d883a 	mov	r6,zero
 2002e74:	01d00934 	movhi	r7,16420
 2002e78:	1009883a 	mov	r4,r2
 2002e7c:	180b883a 	mov	r5,r3
 2002e80:	aa7fd91e 	bne	r21,r9,2002de8 <_dtoa_r+0x820>
 2002e84:	802b883a 	mov	r21,r16
 2002e88:	dc000417 	ldw	r16,16(sp)
 2002e8c:	1009883a 	mov	r4,r2
 2002e90:	180b883a 	mov	r5,r3
 2002e94:	100d883a 	mov	r6,r2
 2002e98:	180f883a 	mov	r7,r3
 2002e9c:	20084480 	call	2008448 <__adddf3>
 2002ea0:	9009883a 	mov	r4,r18
 2002ea4:	980b883a 	mov	r5,r19
 2002ea8:	100d883a 	mov	r6,r2
 2002eac:	180f883a 	mov	r7,r3
 2002eb0:	1023883a 	mov	r17,r2
 2002eb4:	1829883a 	mov	r20,r3
 2002eb8:	2008b140 	call	2008b14 <__ltdf2>
 2002ebc:	10000816 	blt	r2,zero,2002ee0 <_dtoa_r+0x918>
 2002ec0:	9009883a 	mov	r4,r18
 2002ec4:	980b883a 	mov	r5,r19
 2002ec8:	880d883a 	mov	r6,r17
 2002ecc:	a00f883a 	mov	r7,r20
 2002ed0:	20089940 	call	2008994 <__eqdf2>
 2002ed4:	103f5d1e 	bne	r2,zero,2002c4c <_dtoa_r+0x684>
 2002ed8:	ad40004c 	andi	r21,r21,1
 2002edc:	a83f5b26 	beq	r21,zero,2002c4c <_dtoa_r+0x684>
 2002ee0:	b53fffc3 	ldbu	r20,-1(r22)
 2002ee4:	b0ffff84 	addi	r3,r22,-2
 2002ee8:	01400e44 	movi	r5,57
 2002eec:	00000306 	br	2002efc <_dtoa_r+0x934>
 2002ef0:	1d000003 	ldbu	r20,0(r3)
 2002ef4:	102d883a 	mov	r22,r2
 2002ef8:	18ffffc4 	addi	r3,r3,-1
 2002efc:	a1003fcc 	andi	r4,r20,255
 2002f00:	2100201c 	xori	r4,r4,128
 2002f04:	213fe004 	addi	r4,r4,-128
 2002f08:	b0bfffc4 	addi	r2,r22,-1
 2002f0c:	2142ca1e 	bne	r4,r5,2003a38 <_dtoa_r+0x1470>
 2002f10:	b8bff71e 	bne	r23,r2,2002ef0 <_dtoa_r+0x928>
 2002f14:	d8800617 	ldw	r2,24(sp)
 2002f18:	05000c44 	movi	r20,49
 2002f1c:	10800044 	addi	r2,r2,1
 2002f20:	d8800615 	stw	r2,24(sp)
 2002f24:	00800c04 	movi	r2,48
 2002f28:	b8800005 	stb	r2,0(r23)
 2002f2c:	b805883a 	mov	r2,r23
 2002f30:	15000005 	stb	r20,0(r2)
 2002f34:	003f4506 	br	2002c4c <_dtoa_r+0x684>
 2002f38:	d9c00c17 	ldw	r7,48(sp)
 2002f3c:	3800c926 	beq	r7,zero,2003264 <_dtoa_r+0xc9c>
 2002f40:	d9c00417 	ldw	r7,16(sp)
 2002f44:	00c00044 	movi	r3,1
 2002f48:	19c16c0e 	bge	r3,r7,20034fc <_dtoa_r+0xf34>
 2002f4c:	d9000917 	ldw	r4,36(sp)
 2002f50:	d9c00a17 	ldw	r7,40(sp)
 2002f54:	24ffffc4 	addi	r19,r4,-1
 2002f58:	3cc20716 	blt	r7,r19,2003778 <_dtoa_r+0x11b0>
 2002f5c:	3ce7c83a 	sub	r19,r7,r19
 2002f60:	d9c00917 	ldw	r7,36(sp)
 2002f64:	3802ae16 	blt	r7,zero,2003a20 <_dtoa_r+0x1458>
 2002f68:	dc800817 	ldw	r18,32(sp)
 2002f6c:	d8800917 	ldw	r2,36(sp)
 2002f70:	d8c00817 	ldw	r3,32(sp)
 2002f74:	d9c00717 	ldw	r7,28(sp)
 2002f78:	8009883a 	mov	r4,r16
 2002f7c:	1887883a 	add	r3,r3,r2
 2002f80:	388f883a 	add	r7,r7,r2
 2002f84:	01400044 	movi	r5,1
 2002f88:	d8c00815 	stw	r3,32(sp)
 2002f8c:	d9c00715 	stw	r7,28(sp)
 2002f90:	2005c440 	call	2005c44 <__i2b>
 2002f94:	102b883a 	mov	r21,r2
 2002f98:	90000a26 	beq	r18,zero,2002fc4 <_dtoa_r+0x9fc>
 2002f9c:	d8800717 	ldw	r2,28(sp)
 2002fa0:	0080080e 	bge	zero,r2,2002fc4 <_dtoa_r+0x9fc>
 2002fa4:	90812b16 	blt	r18,r2,2003454 <_dtoa_r+0xe8c>
 2002fa8:	d8c00817 	ldw	r3,32(sp)
 2002fac:	d9000717 	ldw	r4,28(sp)
 2002fb0:	90a5c83a 	sub	r18,r18,r2
 2002fb4:	1887c83a 	sub	r3,r3,r2
 2002fb8:	2089c83a 	sub	r4,r4,r2
 2002fbc:	d8c00815 	stw	r3,32(sp)
 2002fc0:	d9000715 	stw	r4,28(sp)
 2002fc4:	d9c00a17 	ldw	r7,40(sp)
 2002fc8:	01c0140e 	bge	zero,r7,200301c <_dtoa_r+0xa54>
 2002fcc:	d8800c17 	ldw	r2,48(sp)
 2002fd0:	1001de26 	beq	r2,zero,200374c <_dtoa_r+0x1184>
 2002fd4:	04c00e0e 	bge	zero,r19,2003010 <_dtoa_r+0xa48>
 2002fd8:	a80b883a 	mov	r5,r21
 2002fdc:	8009883a 	mov	r4,r16
 2002fe0:	980d883a 	mov	r6,r19
 2002fe4:	2005e600 	call	2005e60 <__pow5mult>
 2002fe8:	e00d883a 	mov	r6,fp
 2002fec:	8009883a 	mov	r4,r16
 2002ff0:	100b883a 	mov	r5,r2
 2002ff4:	102b883a 	mov	r21,r2
 2002ff8:	2005c800 	call	2005c80 <__multiply>
 2002ffc:	1029883a 	mov	r20,r2
 2003000:	e00b883a 	mov	r5,fp
 2003004:	8009883a 	mov	r4,r16
 2003008:	20058ec0 	call	20058ec <_Bfree>
 200300c:	a039883a 	mov	fp,r20
 2003010:	d8c00a17 	ldw	r3,40(sp)
 2003014:	1ccdc83a 	sub	r6,r3,r19
 2003018:	3001291e 	bne	r6,zero,20034c0 <_dtoa_r+0xef8>
 200301c:	8009883a 	mov	r4,r16
 2003020:	01400044 	movi	r5,1
 2003024:	2005c440 	call	2005c44 <__i2b>
 2003028:	d9000b17 	ldw	r4,44(sp)
 200302c:	1029883a 	mov	r20,r2
 2003030:	0100050e 	bge	zero,r4,2003048 <_dtoa_r+0xa80>
 2003034:	d9800b17 	ldw	r6,44(sp)
 2003038:	8009883a 	mov	r4,r16
 200303c:	100b883a 	mov	r5,r2
 2003040:	2005e600 	call	2005e60 <__pow5mult>
 2003044:	1029883a 	mov	r20,r2
 2003048:	d9c00417 	ldw	r7,16(sp)
 200304c:	00800044 	movi	r2,1
 2003050:	11c0f00e 	bge	r2,r7,2003414 <_dtoa_r+0xe4c>
 2003054:	0023883a 	mov	r17,zero
 2003058:	d8800b17 	ldw	r2,44(sp)
 200305c:	1001741e 	bne	r2,zero,2003630 <_dtoa_r+0x1068>
 2003060:	00800044 	movi	r2,1
 2003064:	d8c00717 	ldw	r3,28(sp)
 2003068:	10c5883a 	add	r2,r2,r3
 200306c:	108007cc 	andi	r2,r2,31
 2003070:	10008026 	beq	r2,zero,2003274 <_dtoa_r+0xcac>
 2003074:	01000804 	movi	r4,32
 2003078:	2089c83a 	sub	r4,r4,r2
 200307c:	00c00104 	movi	r3,4
 2003080:	1902d00e 	bge	r3,r4,2003bc4 <_dtoa_r+0x15fc>
 2003084:	d9000817 	ldw	r4,32(sp)
 2003088:	d9c00717 	ldw	r7,28(sp)
 200308c:	00c00704 	movi	r3,28
 2003090:	1885c83a 	sub	r2,r3,r2
 2003094:	2089883a 	add	r4,r4,r2
 2003098:	388f883a 	add	r7,r7,r2
 200309c:	d9000815 	stw	r4,32(sp)
 20030a0:	90a5883a 	add	r18,r18,r2
 20030a4:	d9c00715 	stw	r7,28(sp)
 20030a8:	d9c00817 	ldw	r7,32(sp)
 20030ac:	01c0050e 	bge	zero,r7,20030c4 <_dtoa_r+0xafc>
 20030b0:	e00b883a 	mov	r5,fp
 20030b4:	8009883a 	mov	r4,r16
 20030b8:	380d883a 	mov	r6,r7
 20030bc:	2005f8c0 	call	2005f8c <__lshift>
 20030c0:	1039883a 	mov	fp,r2
 20030c4:	d8800717 	ldw	r2,28(sp)
 20030c8:	0080050e 	bge	zero,r2,20030e0 <_dtoa_r+0xb18>
 20030cc:	a00b883a 	mov	r5,r20
 20030d0:	8009883a 	mov	r4,r16
 20030d4:	100d883a 	mov	r6,r2
 20030d8:	2005f8c0 	call	2005f8c <__lshift>
 20030dc:	1029883a 	mov	r20,r2
 20030e0:	d8c00d17 	ldw	r3,52(sp)
 20030e4:	1801401e 	bne	r3,zero,20035e8 <_dtoa_r+0x1020>
 20030e8:	d8800917 	ldw	r2,36(sp)
 20030ec:	00815a0e 	bge	zero,r2,2003658 <_dtoa_r+0x1090>
 20030f0:	d8c00c17 	ldw	r3,48(sp)
 20030f4:	18006f1e 	bne	r3,zero,20032b4 <_dtoa_r+0xcec>
 20030f8:	b823883a 	mov	r17,r23
 20030fc:	dc800917 	ldw	r18,36(sp)
 2003100:	00000206 	br	200310c <_dtoa_r+0xb44>
 2003104:	20059140 	call	2005914 <__multadd>
 2003108:	1039883a 	mov	fp,r2
 200310c:	e009883a 	mov	r4,fp
 2003110:	a00b883a 	mov	r5,r20
 2003114:	20023c00 	call	20023c0 <quorem>
 2003118:	10800c04 	addi	r2,r2,48
 200311c:	88800005 	stb	r2,0(r17)
 2003120:	8c400044 	addi	r17,r17,1
 2003124:	8dc7c83a 	sub	r3,r17,r23
 2003128:	8009883a 	mov	r4,r16
 200312c:	e00b883a 	mov	r5,fp
 2003130:	01800284 	movi	r6,10
 2003134:	000f883a 	mov	r7,zero
 2003138:	1cbff216 	blt	r3,r18,2003104 <_dtoa_r+0xb3c>
 200313c:	dd800917 	ldw	r22,36(sp)
 2003140:	1007883a 	mov	r3,r2
 2003144:	05823a0e 	bge	zero,r22,2003a30 <_dtoa_r+0x1468>
 2003148:	bdad883a 	add	r22,r23,r22
 200314c:	0023883a 	mov	r17,zero
 2003150:	e00b883a 	mov	r5,fp
 2003154:	01800044 	movi	r6,1
 2003158:	8009883a 	mov	r4,r16
 200315c:	d8c01515 	stw	r3,84(sp)
 2003160:	2005f8c0 	call	2005f8c <__lshift>
 2003164:	1009883a 	mov	r4,r2
 2003168:	a00b883a 	mov	r5,r20
 200316c:	1039883a 	mov	fp,r2
 2003170:	20060e80 	call	20060e8 <__mcmp>
 2003174:	d8c01517 	ldw	r3,84(sp)
 2003178:	0080d60e 	bge	zero,r2,20034d4 <_dtoa_r+0xf0c>
 200317c:	b13fffc3 	ldbu	r4,-1(r22)
 2003180:	b0ffff84 	addi	r3,r22,-2
 2003184:	01800e44 	movi	r6,57
 2003188:	00000306 	br	2003198 <_dtoa_r+0xbd0>
 200318c:	19000003 	ldbu	r4,0(r3)
 2003190:	102d883a 	mov	r22,r2
 2003194:	18ffffc4 	addi	r3,r3,-1
 2003198:	21403fcc 	andi	r5,r4,255
 200319c:	2940201c 	xori	r5,r5,128
 20031a0:	297fe004 	addi	r5,r5,-128
 20031a4:	b0bfffc4 	addi	r2,r22,-1
 20031a8:	2981a71e 	bne	r5,r6,2003848 <_dtoa_r+0x1280>
 20031ac:	b8bff71e 	bne	r23,r2,200318c <_dtoa_r+0xbc4>
 20031b0:	d8800617 	ldw	r2,24(sp)
 20031b4:	10800044 	addi	r2,r2,1
 20031b8:	d8800615 	stw	r2,24(sp)
 20031bc:	00800c44 	movi	r2,49
 20031c0:	b8800005 	stb	r2,0(r23)
 20031c4:	8009883a 	mov	r4,r16
 20031c8:	a00b883a 	mov	r5,r20
 20031cc:	20058ec0 	call	20058ec <_Bfree>
 20031d0:	a83e9e26 	beq	r21,zero,2002c4c <_dtoa_r+0x684>
 20031d4:	88000426 	beq	r17,zero,20031e8 <_dtoa_r+0xc20>
 20031d8:	8d400326 	beq	r17,r21,20031e8 <_dtoa_r+0xc20>
 20031dc:	8009883a 	mov	r4,r16
 20031e0:	880b883a 	mov	r5,r17
 20031e4:	20058ec0 	call	20058ec <_Bfree>
 20031e8:	8009883a 	mov	r4,r16
 20031ec:	a80b883a 	mov	r5,r21
 20031f0:	20058ec0 	call	20058ec <_Bfree>
 20031f4:	003e9506 	br	2002c4c <_dtoa_r+0x684>
 20031f8:	00c00044 	movi	r3,1
 20031fc:	d8c00d15 	stw	r3,52(sp)
 2003200:	003d9f06 	br	2002880 <_dtoa_r+0x2b8>
 2003204:	d9000817 	ldw	r4,32(sp)
 2003208:	d8800617 	ldw	r2,24(sp)
 200320c:	d8000b15 	stw	zero,44(sp)
 2003210:	2089c83a 	sub	r4,r4,r2
 2003214:	0087c83a 	sub	r3,zero,r2
 2003218:	d9000815 	stw	r4,32(sp)
 200321c:	d8c00a15 	stw	r3,40(sp)
 2003220:	003da306 	br	20028b0 <_dtoa_r+0x2e8>
 2003224:	0529c83a 	sub	r20,zero,r20
 2003228:	dd000815 	stw	r20,32(sp)
 200322c:	d8000715 	stw	zero,28(sp)
 2003230:	003d9806 	br	2002894 <_dtoa_r+0x2cc>
 2003234:	d9000617 	ldw	r4,24(sp)
 2003238:	2008b700 	call	2008b70 <__floatsidf>
 200323c:	1009883a 	mov	r4,r2
 2003240:	180b883a 	mov	r5,r3
 2003244:	980d883a 	mov	r6,r19
 2003248:	900f883a 	mov	r7,r18
 200324c:	20089f00 	call	20089f0 <__nedf2>
 2003250:	103d7a26 	beq	r2,zero,200283c <_dtoa_r+0x274>
 2003254:	d8800617 	ldw	r2,24(sp)
 2003258:	10bfffc4 	addi	r2,r2,-1
 200325c:	d8800615 	stw	r2,24(sp)
 2003260:	003d7606 	br	200283c <_dtoa_r+0x274>
 2003264:	dcc00a17 	ldw	r19,40(sp)
 2003268:	dc800817 	ldw	r18,32(sp)
 200326c:	002b883a 	mov	r21,zero
 2003270:	003f4906 	br	2002f98 <_dtoa_r+0x9d0>
 2003274:	00800704 	movi	r2,28
 2003278:	d8c00817 	ldw	r3,32(sp)
 200327c:	d9000717 	ldw	r4,28(sp)
 2003280:	90a5883a 	add	r18,r18,r2
 2003284:	1887883a 	add	r3,r3,r2
 2003288:	2089883a 	add	r4,r4,r2
 200328c:	d8c00815 	stw	r3,32(sp)
 2003290:	d9000715 	stw	r4,28(sp)
 2003294:	003f8406 	br	20030a8 <_dtoa_r+0xae0>
 2003298:	d9c00317 	ldw	r7,12(sp)
 200329c:	013efb84 	movi	r4,-1042
 20032a0:	2509c83a 	sub	r4,r4,r20
 20032a4:	3908983a 	sll	r4,r7,r4
 20032a8:	003d3006 	br	200276c <_dtoa_r+0x1a4>
 20032ac:	d8000d15 	stw	zero,52(sp)
 20032b0:	003d7306 	br	2002880 <_dtoa_r+0x2b8>
 20032b4:	0480050e 	bge	zero,r18,20032cc <_dtoa_r+0xd04>
 20032b8:	a80b883a 	mov	r5,r21
 20032bc:	8009883a 	mov	r4,r16
 20032c0:	900d883a 	mov	r6,r18
 20032c4:	2005f8c0 	call	2005f8c <__lshift>
 20032c8:	102b883a 	mov	r21,r2
 20032cc:	8801611e 	bne	r17,zero,2003854 <_dtoa_r+0x128c>
 20032d0:	a827883a 	mov	r19,r21
 20032d4:	d8c00317 	ldw	r3,12(sp)
 20032d8:	d9000917 	ldw	r4,36(sp)
 20032dc:	b8bfffc4 	addi	r2,r23,-1
 20032e0:	18c0004c 	andi	r3,r3,1
 20032e4:	1105883a 	add	r2,r2,r4
 20032e8:	b825883a 	mov	r18,r23
 20032ec:	d8800515 	stw	r2,20(sp)
 20032f0:	a823883a 	mov	r17,r21
 20032f4:	d8c00315 	stw	r3,12(sp)
 20032f8:	ddc00715 	stw	r23,28(sp)
 20032fc:	e009883a 	mov	r4,fp
 2003300:	a00b883a 	mov	r5,r20
 2003304:	20023c00 	call	20023c0 <quorem>
 2003308:	e009883a 	mov	r4,fp
 200330c:	880b883a 	mov	r5,r17
 2003310:	102d883a 	mov	r22,r2
 2003314:	20060e80 	call	20060e8 <__mcmp>
 2003318:	980d883a 	mov	r6,r19
 200331c:	8009883a 	mov	r4,r16
 2003320:	a00b883a 	mov	r5,r20
 2003324:	102b883a 	mov	r21,r2
 2003328:	20061400 	call	2006140 <__mdiff>
 200332c:	100d883a 	mov	r6,r2
 2003330:	10800317 	ldw	r2,12(r2)
 2003334:	b5c00c04 	addi	r23,r22,48
 2003338:	10008c26 	beq	r2,zero,200356c <_dtoa_r+0xfa4>
 200333c:	8009883a 	mov	r4,r16
 2003340:	300b883a 	mov	r5,r6
 2003344:	20058ec0 	call	20058ec <_Bfree>
 2003348:	00800044 	movi	r2,1
 200334c:	a8007116 	blt	r21,zero,2003514 <_dtoa_r+0xf4c>
 2003350:	a800041e 	bne	r21,zero,2003364 <_dtoa_r+0xd9c>
 2003354:	d9c00417 	ldw	r7,16(sp)
 2003358:	3800021e 	bne	r7,zero,2003364 <_dtoa_r+0xd9c>
 200335c:	d8c00317 	ldw	r3,12(sp)
 2003360:	18006c26 	beq	r3,zero,2003514 <_dtoa_r+0xf4c>
 2003364:	00814c16 	blt	zero,r2,2003898 <_dtoa_r+0x12d0>
 2003368:	d8c00517 	ldw	r3,20(sp)
 200336c:	95400044 	addi	r21,r18,1
 2003370:	95c00005 	stb	r23,0(r18)
 2003374:	a82d883a 	mov	r22,r21
 2003378:	90c14d26 	beq	r18,r3,20038b0 <_dtoa_r+0x12e8>
 200337c:	e00b883a 	mov	r5,fp
 2003380:	8009883a 	mov	r4,r16
 2003384:	01800284 	movi	r6,10
 2003388:	000f883a 	mov	r7,zero
 200338c:	20059140 	call	2005914 <__multadd>
 2003390:	1039883a 	mov	fp,r2
 2003394:	8cc08b26 	beq	r17,r19,20035c4 <_dtoa_r+0xffc>
 2003398:	880b883a 	mov	r5,r17
 200339c:	01800284 	movi	r6,10
 20033a0:	000f883a 	mov	r7,zero
 20033a4:	8009883a 	mov	r4,r16
 20033a8:	20059140 	call	2005914 <__multadd>
 20033ac:	980b883a 	mov	r5,r19
 20033b0:	8009883a 	mov	r4,r16
 20033b4:	01800284 	movi	r6,10
 20033b8:	000f883a 	mov	r7,zero
 20033bc:	1023883a 	mov	r17,r2
 20033c0:	20059140 	call	2005914 <__multadd>
 20033c4:	1027883a 	mov	r19,r2
 20033c8:	a825883a 	mov	r18,r21
 20033cc:	003fcb06 	br	20032fc <_dtoa_r+0xd34>
 20033d0:	d9c00417 	ldw	r7,16(sp)
 20033d4:	00800104 	movi	r2,4
 20033d8:	3880e426 	beq	r7,r2,200376c <_dtoa_r+0x11a4>
 20033dc:	00800144 	movi	r2,5
 20033e0:	38be3c1e 	bne	r7,r2,2002cd4 <_dtoa_r+0x70c>
 20033e4:	00c00044 	movi	r3,1
 20033e8:	d8c00c15 	stw	r3,48(sp)
 20033ec:	d9c02117 	ldw	r7,132(sp)
 20033f0:	d8800617 	ldw	r2,24(sp)
 20033f4:	388f883a 	add	r7,r7,r2
 20033f8:	3c800044 	addi	r18,r7,1
 20033fc:	d9c00e15 	stw	r7,56(sp)
 2003400:	dc800915 	stw	r18,36(sp)
 2003404:	04bd3e16 	blt	zero,r18,2002900 <_dtoa_r+0x338>
 2003408:	80001115 	stw	zero,68(r16)
 200340c:	000b883a 	mov	r5,zero
 2003410:	003d4606 	br	200292c <_dtoa_r+0x364>
 2003414:	d8c00317 	ldw	r3,12(sp)
 2003418:	183f0e1e 	bne	r3,zero,2003054 <_dtoa_r+0xa8c>
 200341c:	00c00434 	movhi	r3,16
 2003420:	18ffffc4 	addi	r3,r3,-1
 2003424:	88c6703a 	and	r3,r17,r3
 2003428:	183f0a1e 	bne	r3,zero,2003054 <_dtoa_r+0xa8c>
 200342c:	8c5ffc2c 	andhi	r17,r17,32752
 2003430:	883f0826 	beq	r17,zero,2003054 <_dtoa_r+0xa8c>
 2003434:	d9000817 	ldw	r4,32(sp)
 2003438:	d9c00717 	ldw	r7,28(sp)
 200343c:	1023883a 	mov	r17,r2
 2003440:	2089883a 	add	r4,r4,r2
 2003444:	388f883a 	add	r7,r7,r2
 2003448:	d9000815 	stw	r4,32(sp)
 200344c:	d9c00715 	stw	r7,28(sp)
 2003450:	003f0106 	br	2003058 <_dtoa_r+0xa90>
 2003454:	9005883a 	mov	r2,r18
 2003458:	003ed306 	br	2002fa8 <_dtoa_r+0x9e0>
 200345c:	d8800917 	ldw	r2,36(sp)
 2003460:	00be3516 	blt	zero,r2,2002d38 <_dtoa_r+0x770>
 2003464:	1000b61e 	bne	r2,zero,2003740 <_dtoa_r+0x1178>
 2003468:	9009883a 	mov	r4,r18
 200346c:	980b883a 	mov	r5,r19
 2003470:	000d883a 	mov	r6,zero
 2003474:	01d00534 	movhi	r7,16404
 2003478:	20084fc0 	call	20084fc <__muldf3>
 200347c:	d9800317 	ldw	r6,12(sp)
 2003480:	1009883a 	mov	r4,r2
 2003484:	180b883a 	mov	r5,r3
 2003488:	880f883a 	mov	r7,r17
 200348c:	2008ab00 	call	2008ab0 <__gedf2>
 2003490:	0029883a 	mov	r20,zero
 2003494:	002b883a 	mov	r21,zero
 2003498:	10007e16 	blt	r2,zero,2003694 <_dtoa_r+0x10cc>
 200349c:	d8802117 	ldw	r2,132(sp)
 20034a0:	b82d883a 	mov	r22,r23
 20034a4:	0084303a 	nor	r2,zero,r2
 20034a8:	d8800615 	stw	r2,24(sp)
 20034ac:	8009883a 	mov	r4,r16
 20034b0:	a00b883a 	mov	r5,r20
 20034b4:	20058ec0 	call	20058ec <_Bfree>
 20034b8:	a83f4b1e 	bne	r21,zero,20031e8 <_dtoa_r+0xc20>
 20034bc:	003de306 	br	2002c4c <_dtoa_r+0x684>
 20034c0:	e00b883a 	mov	r5,fp
 20034c4:	8009883a 	mov	r4,r16
 20034c8:	2005e600 	call	2005e60 <__pow5mult>
 20034cc:	1039883a 	mov	fp,r2
 20034d0:	003ed206 	br	200301c <_dtoa_r+0xa54>
 20034d4:	1000021e 	bne	r2,zero,20034e0 <_dtoa_r+0xf18>
 20034d8:	18c0004c 	andi	r3,r3,1
 20034dc:	183f271e 	bne	r3,zero,200317c <_dtoa_r+0xbb4>
 20034e0:	01000c04 	movi	r4,48
 20034e4:	00000106 	br	20034ec <_dtoa_r+0xf24>
 20034e8:	102d883a 	mov	r22,r2
 20034ec:	b0bfffc4 	addi	r2,r22,-1
 20034f0:	10c00007 	ldb	r3,0(r2)
 20034f4:	193ffc26 	beq	r3,r4,20034e8 <_dtoa_r+0xf20>
 20034f8:	003f3206 	br	20031c4 <_dtoa_r+0xbfc>
 20034fc:	d8c00f17 	ldw	r3,60(sp)
 2003500:	18015026 	beq	r3,zero,2003a44 <_dtoa_r+0x147c>
 2003504:	10810cc4 	addi	r2,r2,1075
 2003508:	dcc00a17 	ldw	r19,40(sp)
 200350c:	dc800817 	ldw	r18,32(sp)
 2003510:	003e9706 	br	2002f70 <_dtoa_r+0x9a8>
 2003514:	b807883a 	mov	r3,r23
 2003518:	182b883a 	mov	r21,r3
 200351c:	ddc00717 	ldw	r23,28(sp)
 2003520:	00800e0e 	bge	zero,r2,200355c <_dtoa_r+0xf94>
 2003524:	e00b883a 	mov	r5,fp
 2003528:	01800044 	movi	r6,1
 200352c:	8009883a 	mov	r4,r16
 2003530:	d8c01515 	stw	r3,84(sp)
 2003534:	2005f8c0 	call	2005f8c <__lshift>
 2003538:	1009883a 	mov	r4,r2
 200353c:	a00b883a 	mov	r5,r20
 2003540:	1039883a 	mov	fp,r2
 2003544:	20060e80 	call	20060e8 <__mcmp>
 2003548:	d8c01517 	ldw	r3,84(sp)
 200354c:	0081880e 	bge	zero,r2,2003b70 <_dtoa_r+0x15a8>
 2003550:	00800e44 	movi	r2,57
 2003554:	b0c00c44 	addi	r3,r22,49
 2003558:	a8816326 	beq	r21,r2,2003ae8 <_dtoa_r+0x1520>
 200355c:	90c00005 	stb	r3,0(r18)
 2003560:	95800044 	addi	r22,r18,1
 2003564:	982b883a 	mov	r21,r19
 2003568:	003f1606 	br	20031c4 <_dtoa_r+0xbfc>
 200356c:	300b883a 	mov	r5,r6
 2003570:	e009883a 	mov	r4,fp
 2003574:	d9801515 	stw	r6,84(sp)
 2003578:	20060e80 	call	20060e8 <__mcmp>
 200357c:	d9801517 	ldw	r6,84(sp)
 2003580:	8009883a 	mov	r4,r16
 2003584:	d8801515 	stw	r2,84(sp)
 2003588:	300b883a 	mov	r5,r6
 200358c:	20058ec0 	call	20058ec <_Bfree>
 2003590:	d8801517 	ldw	r2,84(sp)
 2003594:	103f6d1e 	bne	r2,zero,200334c <_dtoa_r+0xd84>
 2003598:	d9c00417 	ldw	r7,16(sp)
 200359c:	383f6b1e 	bne	r7,zero,200334c <_dtoa_r+0xd84>
 20035a0:	d8c00317 	ldw	r3,12(sp)
 20035a4:	183f691e 	bne	r3,zero,200334c <_dtoa_r+0xd84>
 20035a8:	b807883a 	mov	r3,r23
 20035ac:	00800e44 	movi	r2,57
 20035b0:	ddc00717 	ldw	r23,28(sp)
 20035b4:	18814c26 	beq	r3,r2,2003ae8 <_dtoa_r+0x1520>
 20035b8:	057fe80e 	bge	zero,r21,200355c <_dtoa_r+0xf94>
 20035bc:	b0c00c44 	addi	r3,r22,49
 20035c0:	003fe606 	br	200355c <_dtoa_r+0xf94>
 20035c4:	880b883a 	mov	r5,r17
 20035c8:	8009883a 	mov	r4,r16
 20035cc:	01800284 	movi	r6,10
 20035d0:	000f883a 	mov	r7,zero
 20035d4:	20059140 	call	2005914 <__multadd>
 20035d8:	1023883a 	mov	r17,r2
 20035dc:	1027883a 	mov	r19,r2
 20035e0:	a825883a 	mov	r18,r21
 20035e4:	003f4506 	br	20032fc <_dtoa_r+0xd34>
 20035e8:	e009883a 	mov	r4,fp
 20035ec:	a00b883a 	mov	r5,r20
 20035f0:	20060e80 	call	20060e8 <__mcmp>
 20035f4:	103ebc0e 	bge	r2,zero,20030e8 <_dtoa_r+0xb20>
 20035f8:	e00b883a 	mov	r5,fp
 20035fc:	8009883a 	mov	r4,r16
 2003600:	01800284 	movi	r6,10
 2003604:	000f883a 	mov	r7,zero
 2003608:	20059140 	call	2005914 <__multadd>
 200360c:	1039883a 	mov	fp,r2
 2003610:	d8800617 	ldw	r2,24(sp)
 2003614:	d8c00c17 	ldw	r3,48(sp)
 2003618:	10bfffc4 	addi	r2,r2,-1
 200361c:	d8800615 	stw	r2,24(sp)
 2003620:	1801571e 	bne	r3,zero,2003b80 <_dtoa_r+0x15b8>
 2003624:	d9c00e17 	ldw	r7,56(sp)
 2003628:	d9c00915 	stw	r7,36(sp)
 200362c:	003eae06 	br	20030e8 <_dtoa_r+0xb20>
 2003630:	a0800417 	ldw	r2,16(r20)
 2003634:	10800104 	addi	r2,r2,4
 2003638:	1085883a 	add	r2,r2,r2
 200363c:	1085883a 	add	r2,r2,r2
 2003640:	a085883a 	add	r2,r20,r2
 2003644:	11000017 	ldw	r4,0(r2)
 2003648:	2005b2c0 	call	2005b2c <__hi0bits>
 200364c:	00c00804 	movi	r3,32
 2003650:	1885c83a 	sub	r2,r3,r2
 2003654:	003e8306 	br	2003064 <_dtoa_r+0xa9c>
 2003658:	d9c00417 	ldw	r7,16(sp)
 200365c:	00800084 	movi	r2,2
 2003660:	11fea30e 	bge	r2,r7,20030f0 <_dtoa_r+0xb28>
 2003664:	d8800917 	ldw	r2,36(sp)
 2003668:	103f8c1e 	bne	r2,zero,200349c <_dtoa_r+0xed4>
 200366c:	a00b883a 	mov	r5,r20
 2003670:	8009883a 	mov	r4,r16
 2003674:	01800144 	movi	r6,5
 2003678:	000f883a 	mov	r7,zero
 200367c:	20059140 	call	2005914 <__multadd>
 2003680:	e009883a 	mov	r4,fp
 2003684:	100b883a 	mov	r5,r2
 2003688:	1029883a 	mov	r20,r2
 200368c:	20060e80 	call	20060e8 <__mcmp>
 2003690:	00bf820e 	bge	zero,r2,200349c <_dtoa_r+0xed4>
 2003694:	00800c44 	movi	r2,49
 2003698:	b8800005 	stb	r2,0(r23)
 200369c:	d8800617 	ldw	r2,24(sp)
 20036a0:	bd800044 	addi	r22,r23,1
 20036a4:	10800044 	addi	r2,r2,1
 20036a8:	d8800615 	stw	r2,24(sp)
 20036ac:	003f7f06 	br	20034ac <_dtoa_r+0xee4>
 20036b0:	dc000417 	ldw	r16,16(sp)
 20036b4:	003d6506 	br	2002c4c <_dtoa_r+0x684>
 20036b8:	9009883a 	mov	r4,r18
 20036bc:	2008b700 	call	2008b70 <__floatsidf>
 20036c0:	1009883a 	mov	r4,r2
 20036c4:	180b883a 	mov	r5,r3
 20036c8:	980d883a 	mov	r6,r19
 20036cc:	a00f883a 	mov	r7,r20
 20036d0:	20084fc0 	call	20084fc <__muldf3>
 20036d4:	1009883a 	mov	r4,r2
 20036d8:	180b883a 	mov	r5,r3
 20036dc:	000d883a 	mov	r6,zero
 20036e0:	01d00734 	movhi	r7,16412
 20036e4:	20084480 	call	2008448 <__adddf3>
 20036e8:	057f3034 	movhi	r21,64704
 20036ec:	1025883a 	mov	r18,r2
 20036f0:	1d6b883a 	add	r21,r3,r21
 20036f4:	9809883a 	mov	r4,r19
 20036f8:	a00b883a 	mov	r5,r20
 20036fc:	000d883a 	mov	r6,zero
 2003700:	01d00534 	movhi	r7,16404
 2003704:	200849c0 	call	200849c <__subdf3>
 2003708:	1009883a 	mov	r4,r2
 200370c:	180b883a 	mov	r5,r3
 2003710:	900d883a 	mov	r6,r18
 2003714:	a80f883a 	mov	r7,r21
 2003718:	1027883a 	mov	r19,r2
 200371c:	1829883a 	mov	r20,r3
 2003720:	2008a4c0 	call	2008a4c <__gtdf2>
 2003724:	00806616 	blt	zero,r2,20038c0 <_dtoa_r+0x12f8>
 2003728:	a9e0003c 	xorhi	r7,r21,32768
 200372c:	9809883a 	mov	r4,r19
 2003730:	a00b883a 	mov	r5,r20
 2003734:	900d883a 	mov	r6,r18
 2003738:	2008b140 	call	2008b14 <__ltdf2>
 200373c:	103d710e 	bge	r2,zero,2002d04 <_dtoa_r+0x73c>
 2003740:	0029883a 	mov	r20,zero
 2003744:	002b883a 	mov	r21,zero
 2003748:	003f5406 	br	200349c <_dtoa_r+0xed4>
 200374c:	d9800a17 	ldw	r6,40(sp)
 2003750:	e00b883a 	mov	r5,fp
 2003754:	8009883a 	mov	r4,r16
 2003758:	2005e600 	call	2005e60 <__pow5mult>
 200375c:	1039883a 	mov	fp,r2
 2003760:	003e2e06 	br	200301c <_dtoa_r+0xa54>
 2003764:	d8000c15 	stw	zero,48(sp)
 2003768:	003f2006 	br	20033ec <_dtoa_r+0xe24>
 200376c:	00800044 	movi	r2,1
 2003770:	d8800c15 	stw	r2,48(sp)
 2003774:	003c5d06 	br	20028ec <_dtoa_r+0x324>
 2003778:	d8c00a17 	ldw	r3,40(sp)
 200377c:	d9000b17 	ldw	r4,44(sp)
 2003780:	dcc00a15 	stw	r19,40(sp)
 2003784:	98c5c83a 	sub	r2,r19,r3
 2003788:	2089883a 	add	r4,r4,r2
 200378c:	d9000b15 	stw	r4,44(sp)
 2003790:	0027883a 	mov	r19,zero
 2003794:	003df206 	br	2002f60 <_dtoa_r+0x998>
 2003798:	d9000317 	ldw	r4,12(sp)
 200379c:	8829883a 	mov	r20,r17
 20037a0:	04800084 	movi	r18,2
 20037a4:	d9001015 	stw	r4,64(sp)
 20037a8:	003c8106 	br	20029b0 <_dtoa_r+0x3e8>
 20037ac:	04800044 	movi	r18,1
 20037b0:	dc800e15 	stw	r18,56(sp)
 20037b4:	dc800915 	stw	r18,36(sp)
 20037b8:	dc802115 	stw	r18,132(sp)
 20037bc:	003f1206 	br	2003408 <_dtoa_r+0xe40>
 20037c0:	d8800617 	ldw	r2,24(sp)
 20037c4:	00abc83a 	sub	r21,zero,r2
 20037c8:	a800a426 	beq	r21,zero,2003a5c <_dtoa_r+0x1494>
 20037cc:	a88003cc 	andi	r2,r21,15
 20037d0:	100490fa 	slli	r2,r2,3
 20037d4:	00c08074 	movhi	r3,513
 20037d8:	18eeba04 	addi	r3,r3,-17688
 20037dc:	d9000317 	ldw	r4,12(sp)
 20037e0:	1885883a 	add	r2,r3,r2
 20037e4:	11800017 	ldw	r6,0(r2)
 20037e8:	11c00117 	ldw	r7,4(r2)
 20037ec:	a82bd13a 	srai	r21,r21,4
 20037f0:	880b883a 	mov	r5,r17
 20037f4:	20084fc0 	call	20084fc <__muldf3>
 20037f8:	1027883a 	mov	r19,r2
 20037fc:	1829883a 	mov	r20,r3
 2003800:	a800e826 	beq	r21,zero,2003ba4 <_dtoa_r+0x15dc>
 2003804:	05808074 	movhi	r22,513
 2003808:	b5aeb004 	addi	r22,r22,-17728
 200380c:	04800084 	movi	r18,2
 2003810:	a980004c 	andi	r6,r21,1
 2003814:	1009883a 	mov	r4,r2
 2003818:	a82bd07a 	srai	r21,r21,1
 200381c:	180b883a 	mov	r5,r3
 2003820:	30000426 	beq	r6,zero,2003834 <_dtoa_r+0x126c>
 2003824:	b1800017 	ldw	r6,0(r22)
 2003828:	b1c00117 	ldw	r7,4(r22)
 200382c:	94800044 	addi	r18,r18,1
 2003830:	20084fc0 	call	20084fc <__muldf3>
 2003834:	b5800204 	addi	r22,r22,8
 2003838:	a83ff51e 	bne	r21,zero,2003810 <_dtoa_r+0x1248>
 200383c:	1027883a 	mov	r19,r2
 2003840:	1829883a 	mov	r20,r3
 2003844:	003c7306 	br	2002a14 <_dtoa_r+0x44c>
 2003848:	21000044 	addi	r4,r4,1
 200384c:	11000005 	stb	r4,0(r2)
 2003850:	003e5c06 	br	20031c4 <_dtoa_r+0xbfc>
 2003854:	a9400117 	ldw	r5,4(r21)
 2003858:	8009883a 	mov	r4,r16
 200385c:	20058440 	call	2005844 <_Balloc>
 2003860:	a9800417 	ldw	r6,16(r21)
 2003864:	11000304 	addi	r4,r2,12
 2003868:	a9400304 	addi	r5,r21,12
 200386c:	31800084 	addi	r6,r6,2
 2003870:	318d883a 	add	r6,r6,r6
 2003874:	318d883a 	add	r6,r6,r6
 2003878:	1023883a 	mov	r17,r2
 200387c:	20056240 	call	2005624 <memcpy>
 2003880:	8009883a 	mov	r4,r16
 2003884:	880b883a 	mov	r5,r17
 2003888:	01800044 	movi	r6,1
 200388c:	2005f8c0 	call	2005f8c <__lshift>
 2003890:	1027883a 	mov	r19,r2
 2003894:	003e8f06 	br	20032d4 <_dtoa_r+0xd0c>
 2003898:	b807883a 	mov	r3,r23
 200389c:	00800e44 	movi	r2,57
 20038a0:	ddc00717 	ldw	r23,28(sp)
 20038a4:	18809026 	beq	r3,r2,2003ae8 <_dtoa_r+0x1520>
 20038a8:	18c00044 	addi	r3,r3,1
 20038ac:	003f2b06 	br	200355c <_dtoa_r+0xf94>
 20038b0:	b807883a 	mov	r3,r23
 20038b4:	982b883a 	mov	r21,r19
 20038b8:	ddc00717 	ldw	r23,28(sp)
 20038bc:	003e2406 	br	2003150 <_dtoa_r+0xb88>
 20038c0:	0029883a 	mov	r20,zero
 20038c4:	002b883a 	mov	r21,zero
 20038c8:	003f7206 	br	2003694 <_dtoa_r+0x10cc>
 20038cc:	593fffc4 	addi	r4,r11,-1
 20038d0:	200490fa 	slli	r2,r4,3
 20038d4:	00c08074 	movhi	r3,513
 20038d8:	18eeba04 	addi	r3,r3,-17688
 20038dc:	d9001015 	stw	r4,64(sp)
 20038e0:	1885883a 	add	r2,r3,r2
 20038e4:	11000017 	ldw	r4,0(r2)
 20038e8:	11400117 	ldw	r5,4(r2)
 20038ec:	900d883a 	mov	r6,r18
 20038f0:	a80f883a 	mov	r7,r21
 20038f4:	dac01615 	stw	r11,88(sp)
 20038f8:	20084fc0 	call	20084fc <__muldf3>
 20038fc:	a00b883a 	mov	r5,r20
 2003900:	9809883a 	mov	r4,r19
 2003904:	d8c01215 	stw	r3,72(sp)
 2003908:	d8801115 	stw	r2,68(sp)
 200390c:	2008c440 	call	2008c44 <__fixdfsi>
 2003910:	1009883a 	mov	r4,r2
 2003914:	1025883a 	mov	r18,r2
 2003918:	2008b700 	call	2008b70 <__floatsidf>
 200391c:	9809883a 	mov	r4,r19
 2003920:	a00b883a 	mov	r5,r20
 2003924:	100d883a 	mov	r6,r2
 2003928:	180f883a 	mov	r7,r3
 200392c:	94800c04 	addi	r18,r18,48
 2003930:	200849c0 	call	200849c <__subdf3>
 2003934:	bc800005 	stb	r18,0(r23)
 2003938:	dac01617 	ldw	r11,88(sp)
 200393c:	102b883a 	mov	r21,r2
 2003940:	00800044 	movi	r2,1
 2003944:	bd800044 	addi	r22,r23,1
 2003948:	1815883a 	mov	r10,r3
 200394c:	58802226 	beq	r11,r2,20039d8 <_dtoa_r+0x1410>
 2003950:	bad7883a 	add	r11,r23,r11
 2003954:	dc001415 	stw	r16,80(sp)
 2003958:	a805883a 	mov	r2,r21
 200395c:	b027883a 	mov	r19,r22
 2003960:	5821883a 	mov	r16,r11
 2003964:	882b883a 	mov	r21,r17
 2003968:	000d883a 	mov	r6,zero
 200396c:	01d00934 	movhi	r7,16420
 2003970:	1009883a 	mov	r4,r2
 2003974:	180b883a 	mov	r5,r3
 2003978:	20084fc0 	call	20084fc <__muldf3>
 200397c:	180b883a 	mov	r5,r3
 2003980:	1009883a 	mov	r4,r2
 2003984:	1829883a 	mov	r20,r3
 2003988:	1023883a 	mov	r17,r2
 200398c:	2008c440 	call	2008c44 <__fixdfsi>
 2003990:	1009883a 	mov	r4,r2
 2003994:	1025883a 	mov	r18,r2
 2003998:	2008b700 	call	2008b70 <__floatsidf>
 200399c:	8809883a 	mov	r4,r17
 20039a0:	a00b883a 	mov	r5,r20
 20039a4:	100d883a 	mov	r6,r2
 20039a8:	180f883a 	mov	r7,r3
 20039ac:	94800c04 	addi	r18,r18,48
 20039b0:	200849c0 	call	200849c <__subdf3>
 20039b4:	9cc00044 	addi	r19,r19,1
 20039b8:	9cbfffc5 	stb	r18,-1(r19)
 20039bc:	9c3fea1e 	bne	r19,r16,2003968 <_dtoa_r+0x13a0>
 20039c0:	1815883a 	mov	r10,r3
 20039c4:	d8c01017 	ldw	r3,64(sp)
 20039c8:	dc001417 	ldw	r16,80(sp)
 20039cc:	a823883a 	mov	r17,r21
 20039d0:	b0ed883a 	add	r22,r22,r3
 20039d4:	102b883a 	mov	r21,r2
 20039d8:	d9001117 	ldw	r4,68(sp)
 20039dc:	d9401217 	ldw	r5,72(sp)
 20039e0:	000d883a 	mov	r6,zero
 20039e4:	01cff834 	movhi	r7,16352
 20039e8:	da801515 	stw	r10,84(sp)
 20039ec:	20084480 	call	2008448 <__adddf3>
 20039f0:	da801517 	ldw	r10,84(sp)
 20039f4:	1009883a 	mov	r4,r2
 20039f8:	180b883a 	mov	r5,r3
 20039fc:	500f883a 	mov	r7,r10
 2003a00:	a80d883a 	mov	r6,r21
 2003a04:	2008b140 	call	2008b14 <__ltdf2>
 2003a08:	da801517 	ldw	r10,84(sp)
 2003a0c:	10003b0e 	bge	r2,zero,2003afc <_dtoa_r+0x1534>
 2003a10:	d9c01317 	ldw	r7,76(sp)
 2003a14:	b53fffc3 	ldbu	r20,-1(r22)
 2003a18:	d9c00615 	stw	r7,24(sp)
 2003a1c:	003d3106 	br	2002ee4 <_dtoa_r+0x91c>
 2003a20:	d8800817 	ldw	r2,32(sp)
 2003a24:	11e5c83a 	sub	r18,r2,r7
 2003a28:	0005883a 	mov	r2,zero
 2003a2c:	003d5006 	br	2002f70 <_dtoa_r+0x9a8>
 2003a30:	05800044 	movi	r22,1
 2003a34:	003dc406 	br	2003148 <_dtoa_r+0xb80>
 2003a38:	a5000044 	addi	r20,r20,1
 2003a3c:	15000005 	stb	r20,0(r2)
 2003a40:	003c8206 	br	2002c4c <_dtoa_r+0x684>
 2003a44:	d8800217 	ldw	r2,8(sp)
 2003a48:	00c00d84 	movi	r3,54
 2003a4c:	dcc00a17 	ldw	r19,40(sp)
 2003a50:	1885c83a 	sub	r2,r3,r2
 2003a54:	dc800817 	ldw	r18,32(sp)
 2003a58:	003d4506 	br	2002f70 <_dtoa_r+0x9a8>
 2003a5c:	dcc00317 	ldw	r19,12(sp)
 2003a60:	8829883a 	mov	r20,r17
 2003a64:	04800084 	movi	r18,2
 2003a68:	003bea06 	br	2002a14 <_dtoa_r+0x44c>
 2003a6c:	d9000917 	ldw	r4,36(sp)
 2003a70:	203f1126 	beq	r4,zero,20036b8 <_dtoa_r+0x10f0>
 2003a74:	d9c00e17 	ldw	r7,56(sp)
 2003a78:	01fca20e 	bge	zero,r7,2002d04 <_dtoa_r+0x73c>
 2003a7c:	a00b883a 	mov	r5,r20
 2003a80:	9809883a 	mov	r4,r19
 2003a84:	000d883a 	mov	r6,zero
 2003a88:	01d00934 	movhi	r7,16420
 2003a8c:	20084fc0 	call	20084fc <__muldf3>
 2003a90:	91000044 	addi	r4,r18,1
 2003a94:	1027883a 	mov	r19,r2
 2003a98:	1829883a 	mov	r20,r3
 2003a9c:	2008b700 	call	2008b70 <__floatsidf>
 2003aa0:	9809883a 	mov	r4,r19
 2003aa4:	a00b883a 	mov	r5,r20
 2003aa8:	100d883a 	mov	r6,r2
 2003aac:	180f883a 	mov	r7,r3
 2003ab0:	20084fc0 	call	20084fc <__muldf3>
 2003ab4:	1009883a 	mov	r4,r2
 2003ab8:	180b883a 	mov	r5,r3
 2003abc:	000d883a 	mov	r6,zero
 2003ac0:	01d00734 	movhi	r7,16412
 2003ac4:	20084480 	call	2008448 <__adddf3>
 2003ac8:	1025883a 	mov	r18,r2
 2003acc:	d8800617 	ldw	r2,24(sp)
 2003ad0:	057f3034 	movhi	r21,64704
 2003ad4:	1d6b883a 	add	r21,r3,r21
 2003ad8:	10bfffc4 	addi	r2,r2,-1
 2003adc:	d8801315 	stw	r2,76(sp)
 2003ae0:	dac00e17 	ldw	r11,56(sp)
 2003ae4:	003be706 	br	2002a84 <_dtoa_r+0x4bc>
 2003ae8:	01000e44 	movi	r4,57
 2003aec:	91000005 	stb	r4,0(r18)
 2003af0:	95800044 	addi	r22,r18,1
 2003af4:	982b883a 	mov	r21,r19
 2003af8:	003da106 	br	2003180 <_dtoa_r+0xbb8>
 2003afc:	d9801117 	ldw	r6,68(sp)
 2003b00:	d9c01217 	ldw	r7,72(sp)
 2003b04:	0009883a 	mov	r4,zero
 2003b08:	014ff834 	movhi	r5,16352
 2003b0c:	da801515 	stw	r10,84(sp)
 2003b10:	200849c0 	call	200849c <__subdf3>
 2003b14:	da801517 	ldw	r10,84(sp)
 2003b18:	1009883a 	mov	r4,r2
 2003b1c:	180b883a 	mov	r5,r3
 2003b20:	a80d883a 	mov	r6,r21
 2003b24:	500f883a 	mov	r7,r10
 2003b28:	2008a4c0 	call	2008a4c <__gtdf2>
 2003b2c:	00bc750e 	bge	zero,r2,2002d04 <_dtoa_r+0x73c>
 2003b30:	01000c04 	movi	r4,48
 2003b34:	00000106 	br	2003b3c <_dtoa_r+0x1574>
 2003b38:	102d883a 	mov	r22,r2
 2003b3c:	b0bfffc4 	addi	r2,r22,-1
 2003b40:	10c00007 	ldb	r3,0(r2)
 2003b44:	193ffc26 	beq	r3,r4,2003b38 <_dtoa_r+0x1570>
 2003b48:	d8801317 	ldw	r2,76(sp)
 2003b4c:	d8800615 	stw	r2,24(sp)
 2003b50:	003c3e06 	br	2002c4c <_dtoa_r+0x684>
 2003b54:	d9001317 	ldw	r4,76(sp)
 2003b58:	df001117 	ldw	fp,68(sp)
 2003b5c:	d9000615 	stw	r4,24(sp)
 2003b60:	003ce006 	br	2002ee4 <_dtoa_r+0x91c>
 2003b64:	df001117 	ldw	fp,68(sp)
 2003b68:	dc401217 	ldw	r17,72(sp)
 2003b6c:	003c6506 	br	2002d04 <_dtoa_r+0x73c>
 2003b70:	103e7a1e 	bne	r2,zero,200355c <_dtoa_r+0xf94>
 2003b74:	1880004c 	andi	r2,r3,1
 2003b78:	103e7826 	beq	r2,zero,200355c <_dtoa_r+0xf94>
 2003b7c:	003e7406 	br	2003550 <_dtoa_r+0xf88>
 2003b80:	8009883a 	mov	r4,r16
 2003b84:	a80b883a 	mov	r5,r21
 2003b88:	01800284 	movi	r6,10
 2003b8c:	000f883a 	mov	r7,zero
 2003b90:	20059140 	call	2005914 <__multadd>
 2003b94:	d9000e17 	ldw	r4,56(sp)
 2003b98:	102b883a 	mov	r21,r2
 2003b9c:	d9000915 	stw	r4,36(sp)
 2003ba0:	003d5106 	br	20030e8 <_dtoa_r+0xb20>
 2003ba4:	04800084 	movi	r18,2
 2003ba8:	003b9a06 	br	2002a14 <_dtoa_r+0x44c>
 2003bac:	d8c01317 	ldw	r3,76(sp)
 2003bb0:	d8c00615 	stw	r3,24(sp)
 2003bb4:	003ccb06 	br	2002ee4 <_dtoa_r+0x91c>
 2003bb8:	d8c01317 	ldw	r3,76(sp)
 2003bbc:	d8c00615 	stw	r3,24(sp)
 2003bc0:	003c2206 	br	2002c4c <_dtoa_r+0x684>
 2003bc4:	20fd3826 	beq	r4,r3,20030a8 <_dtoa_r+0xae0>
 2003bc8:	00c00f04 	movi	r3,60
 2003bcc:	1885c83a 	sub	r2,r3,r2
 2003bd0:	003da906 	br	2003278 <_dtoa_r+0xcb0>
 2003bd4:	000b883a 	mov	r5,zero
 2003bd8:	003b5406 	br	200292c <_dtoa_r+0x364>
 2003bdc:	04c00044 	movi	r19,1
 2003be0:	003b3b06 	br	20028d0 <_dtoa_r+0x308>

02003be4 <_fflush_r>:
 2003be4:	defffb04 	addi	sp,sp,-20
 2003be8:	dcc00315 	stw	r19,12(sp)
 2003bec:	dc400115 	stw	r17,4(sp)
 2003bf0:	dfc00415 	stw	ra,16(sp)
 2003bf4:	dc800215 	stw	r18,8(sp)
 2003bf8:	dc000015 	stw	r16,0(sp)
 2003bfc:	2027883a 	mov	r19,r4
 2003c00:	2823883a 	mov	r17,r5
 2003c04:	20000226 	beq	r4,zero,2003c10 <_fflush_r+0x2c>
 2003c08:	20800e17 	ldw	r2,56(r4)
 2003c0c:	10005726 	beq	r2,zero,2003d6c <_fflush_r+0x188>
 2003c10:	8880030b 	ldhu	r2,12(r17)
 2003c14:	10c0020c 	andi	r3,r2,8
 2003c18:	18ffffcc 	andi	r3,r3,65535
 2003c1c:	18e0001c 	xori	r3,r3,32768
 2003c20:	18e00004 	addi	r3,r3,-32768
 2003c24:	1800311e 	bne	r3,zero,2003cec <_fflush_r+0x108>
 2003c28:	89000117 	ldw	r4,4(r17)
 2003c2c:	10c20014 	ori	r3,r2,2048
 2003c30:	88c0030d 	sth	r3,12(r17)
 2003c34:	180b883a 	mov	r5,r3
 2003c38:	0100520e 	bge	zero,r4,2003d84 <_fflush_r+0x1a0>
 2003c3c:	88c00a17 	ldw	r3,40(r17)
 2003c40:	18002226 	beq	r3,zero,2003ccc <_fflush_r+0xe8>
 2003c44:	1084000c 	andi	r2,r2,4096
 2003c48:	10bfffcc 	andi	r2,r2,65535
 2003c4c:	10a0001c 	xori	r2,r2,32768
 2003c50:	10a00004 	addi	r2,r2,-32768
 2003c54:	10004e26 	beq	r2,zero,2003d90 <_fflush_r+0x1ac>
 2003c58:	8c001417 	ldw	r16,80(r17)
 2003c5c:	2940010c 	andi	r5,r5,4
 2003c60:	297fffcc 	andi	r5,r5,65535
 2003c64:	2960001c 	xori	r5,r5,32768
 2003c68:	29600004 	addi	r5,r5,-32768
 2003c6c:	28000626 	beq	r5,zero,2003c88 <_fflush_r+0xa4>
 2003c70:	89000117 	ldw	r4,4(r17)
 2003c74:	88800c17 	ldw	r2,48(r17)
 2003c78:	8121c83a 	sub	r16,r16,r4
 2003c7c:	10000226 	beq	r2,zero,2003c88 <_fflush_r+0xa4>
 2003c80:	88800f17 	ldw	r2,60(r17)
 2003c84:	80a1c83a 	sub	r16,r16,r2
 2003c88:	89400717 	ldw	r5,28(r17)
 2003c8c:	9809883a 	mov	r4,r19
 2003c90:	800d883a 	mov	r6,r16
 2003c94:	000f883a 	mov	r7,zero
 2003c98:	183ee83a 	callr	r3
 2003c9c:	8080281e 	bne	r16,r2,2003d40 <_fflush_r+0x15c>
 2003ca0:	8880030b 	ldhu	r2,12(r17)
 2003ca4:	88c00417 	ldw	r3,16(r17)
 2003ca8:	88000115 	stw	zero,4(r17)
 2003cac:	113dffcc 	andi	r4,r2,63487
 2003cb0:	1084000c 	andi	r2,r2,4096
 2003cb4:	10bfffcc 	andi	r2,r2,65535
 2003cb8:	10a0001c 	xori	r2,r2,32768
 2003cbc:	8900030d 	sth	r4,12(r17)
 2003cc0:	88c00015 	stw	r3,0(r17)
 2003cc4:	10a00004 	addi	r2,r2,-32768
 2003cc8:	10002c1e 	bne	r2,zero,2003d7c <_fflush_r+0x198>
 2003ccc:	0005883a 	mov	r2,zero
 2003cd0:	dfc00417 	ldw	ra,16(sp)
 2003cd4:	dcc00317 	ldw	r19,12(sp)
 2003cd8:	dc800217 	ldw	r18,8(sp)
 2003cdc:	dc400117 	ldw	r17,4(sp)
 2003ce0:	dc000017 	ldw	r16,0(sp)
 2003ce4:	dec00504 	addi	sp,sp,20
 2003ce8:	f800283a 	ret
 2003cec:	8c800417 	ldw	r18,16(r17)
 2003cf0:	903ff626 	beq	r18,zero,2003ccc <_fflush_r+0xe8>
 2003cf4:	8c000017 	ldw	r16,0(r17)
 2003cf8:	108000cc 	andi	r2,r2,3
 2003cfc:	8c800015 	stw	r18,0(r17)
 2003d00:	84a1c83a 	sub	r16,r16,r18
 2003d04:	10001b1e 	bne	r2,zero,2003d74 <_fflush_r+0x190>
 2003d08:	88800517 	ldw	r2,20(r17)
 2003d0c:	88800215 	stw	r2,8(r17)
 2003d10:	04000316 	blt	zero,r16,2003d20 <_fflush_r+0x13c>
 2003d14:	003fed06 	br	2003ccc <_fflush_r+0xe8>
 2003d18:	90a5883a 	add	r18,r18,r2
 2003d1c:	043feb0e 	bge	zero,r16,2003ccc <_fflush_r+0xe8>
 2003d20:	88800917 	ldw	r2,36(r17)
 2003d24:	89400717 	ldw	r5,28(r17)
 2003d28:	800f883a 	mov	r7,r16
 2003d2c:	900d883a 	mov	r6,r18
 2003d30:	9809883a 	mov	r4,r19
 2003d34:	103ee83a 	callr	r2
 2003d38:	80a1c83a 	sub	r16,r16,r2
 2003d3c:	00bff616 	blt	zero,r2,2003d18 <_fflush_r+0x134>
 2003d40:	88c0030b 	ldhu	r3,12(r17)
 2003d44:	00bfffc4 	movi	r2,-1
 2003d48:	18c01014 	ori	r3,r3,64
 2003d4c:	88c0030d 	sth	r3,12(r17)
 2003d50:	dfc00417 	ldw	ra,16(sp)
 2003d54:	dcc00317 	ldw	r19,12(sp)
 2003d58:	dc800217 	ldw	r18,8(sp)
 2003d5c:	dc400117 	ldw	r17,4(sp)
 2003d60:	dc000017 	ldw	r16,0(sp)
 2003d64:	dec00504 	addi	sp,sp,20
 2003d68:	f800283a 	ret
 2003d6c:	2003e8c0 	call	2003e8c <__sinit>
 2003d70:	003fa706 	br	2003c10 <_fflush_r+0x2c>
 2003d74:	0005883a 	mov	r2,zero
 2003d78:	003fe406 	br	2003d0c <_fflush_r+0x128>
 2003d7c:	8c001415 	stw	r16,80(r17)
 2003d80:	003fd206 	br	2003ccc <_fflush_r+0xe8>
 2003d84:	88c00f17 	ldw	r3,60(r17)
 2003d88:	00ffac16 	blt	zero,r3,2003c3c <_fflush_r+0x58>
 2003d8c:	003fcf06 	br	2003ccc <_fflush_r+0xe8>
 2003d90:	89400717 	ldw	r5,28(r17)
 2003d94:	9809883a 	mov	r4,r19
 2003d98:	000d883a 	mov	r6,zero
 2003d9c:	01c00044 	movi	r7,1
 2003da0:	183ee83a 	callr	r3
 2003da4:	1021883a 	mov	r16,r2
 2003da8:	00bfffc4 	movi	r2,-1
 2003dac:	80800326 	beq	r16,r2,2003dbc <_fflush_r+0x1d8>
 2003db0:	8940030b 	ldhu	r5,12(r17)
 2003db4:	88c00a17 	ldw	r3,40(r17)
 2003db8:	003fa806 	br	2003c5c <_fflush_r+0x78>
 2003dbc:	98c00017 	ldw	r3,0(r19)
 2003dc0:	00800744 	movi	r2,29
 2003dc4:	18bfde1e 	bne	r3,r2,2003d40 <_fflush_r+0x15c>
 2003dc8:	003fc006 	br	2003ccc <_fflush_r+0xe8>

02003dcc <fflush>:
 2003dcc:	200b883a 	mov	r5,r4
 2003dd0:	20000426 	beq	r4,zero,2003de4 <fflush+0x18>
 2003dd4:	00808074 	movhi	r2,513
 2003dd8:	10b5c804 	addi	r2,r2,-10464
 2003ddc:	11000017 	ldw	r4,0(r2)
 2003de0:	2003be41 	jmpi	2003be4 <_fflush_r>
 2003de4:	00808074 	movhi	r2,513
 2003de8:	10b5c704 	addi	r2,r2,-10468
 2003dec:	11000017 	ldw	r4,0(r2)
 2003df0:	01408034 	movhi	r5,512
 2003df4:	294ef904 	addi	r5,r5,15332
 2003df8:	2004a6c1 	jmpi	2004a6c <_fwalk_reent>

02003dfc <__fp_lock>:
 2003dfc:	0005883a 	mov	r2,zero
 2003e00:	f800283a 	ret

02003e04 <__fp_unlock>:
 2003e04:	0005883a 	mov	r2,zero
 2003e08:	f800283a 	ret

02003e0c <_cleanup_r>:
 2003e0c:	01408034 	movhi	r5,512
 2003e10:	295cfa04 	addi	r5,r5,29672
 2003e14:	20049c41 	jmpi	20049c4 <_fwalk>

02003e18 <__sfmoreglue>:
 2003e18:	defffc04 	addi	sp,sp,-16
 2003e1c:	dc400115 	stw	r17,4(sp)
 2003e20:	2c401724 	muli	r17,r5,92
 2003e24:	dc800215 	stw	r18,8(sp)
 2003e28:	2825883a 	mov	r18,r5
 2003e2c:	89400304 	addi	r5,r17,12
 2003e30:	dc000015 	stw	r16,0(sp)
 2003e34:	dfc00315 	stw	ra,12(sp)
 2003e38:	2004da80 	call	2004da8 <_malloc_r>
 2003e3c:	1021883a 	mov	r16,r2
 2003e40:	10000726 	beq	r2,zero,2003e60 <__sfmoreglue+0x48>
 2003e44:	11000304 	addi	r4,r2,12
 2003e48:	10000015 	stw	zero,0(r2)
 2003e4c:	14800115 	stw	r18,4(r2)
 2003e50:	11000215 	stw	r4,8(r2)
 2003e54:	000b883a 	mov	r5,zero
 2003e58:	880d883a 	mov	r6,r17
 2003e5c:	20002b80 	call	20002b8 <memset>
 2003e60:	8005883a 	mov	r2,r16
 2003e64:	dfc00317 	ldw	ra,12(sp)
 2003e68:	dc800217 	ldw	r18,8(sp)
 2003e6c:	dc400117 	ldw	r17,4(sp)
 2003e70:	dc000017 	ldw	r16,0(sp)
 2003e74:	dec00404 	addi	sp,sp,16
 2003e78:	f800283a 	ret

02003e7c <_cleanup>:
 2003e7c:	00808074 	movhi	r2,513
 2003e80:	10b5c704 	addi	r2,r2,-10468
 2003e84:	11000017 	ldw	r4,0(r2)
 2003e88:	2003e0c1 	jmpi	2003e0c <_cleanup_r>

02003e8c <__sinit>:
 2003e8c:	20800e17 	ldw	r2,56(r4)
 2003e90:	1000401e 	bne	r2,zero,2003f94 <__sinit+0x108>
 2003e94:	21400117 	ldw	r5,4(r4)
 2003e98:	01808034 	movhi	r6,512
 2003e9c:	318f8304 	addi	r6,r6,15884
 2003ea0:	20c00217 	ldw	r3,8(r4)
 2003ea4:	21800f15 	stw	r6,60(r4)
 2003ea8:	2080bb04 	addi	r2,r4,748
 2003eac:	02400044 	movi	r9,1
 2003eb0:	018000c4 	movi	r6,3
 2003eb4:	2180b915 	stw	r6,740(r4)
 2003eb8:	2080ba15 	stw	r2,744(r4)
 2003ebc:	22400e15 	stw	r9,56(r4)
 2003ec0:	20800317 	ldw	r2,12(r4)
 2003ec4:	2000b815 	stw	zero,736(r4)
 2003ec8:	02008034 	movhi	r8,512
 2003ecc:	421bac04 	addi	r8,r8,28336
 2003ed0:	01c08034 	movhi	r7,512
 2003ed4:	39dbc104 	addi	r7,r7,28420
 2003ed8:	01808034 	movhi	r6,512
 2003edc:	319be304 	addi	r6,r6,28556
 2003ee0:	01008034 	movhi	r4,512
 2003ee4:	211bfa04 	addi	r4,r4,28648
 2003ee8:	02800104 	movi	r10,4
 2003eec:	28000015 	stw	zero,0(r5)
 2003ef0:	28000115 	stw	zero,4(r5)
 2003ef4:	28000215 	stw	zero,8(r5)
 2003ef8:	2a80030d 	sth	r10,12(r5)
 2003efc:	2800038d 	sth	zero,14(r5)
 2003f00:	28000415 	stw	zero,16(r5)
 2003f04:	28000515 	stw	zero,20(r5)
 2003f08:	28000615 	stw	zero,24(r5)
 2003f0c:	29400715 	stw	r5,28(r5)
 2003f10:	2a000815 	stw	r8,32(r5)
 2003f14:	29c00915 	stw	r7,36(r5)
 2003f18:	29800a15 	stw	r6,40(r5)
 2003f1c:	29000b15 	stw	r4,44(r5)
 2003f20:	01400284 	movi	r5,10
 2003f24:	18000015 	stw	zero,0(r3)
 2003f28:	18000115 	stw	zero,4(r3)
 2003f2c:	18000215 	stw	zero,8(r3)
 2003f30:	1940030d 	sth	r5,12(r3)
 2003f34:	1a40038d 	sth	r9,14(r3)
 2003f38:	18000415 	stw	zero,16(r3)
 2003f3c:	18000515 	stw	zero,20(r3)
 2003f40:	18000615 	stw	zero,24(r3)
 2003f44:	18c00715 	stw	r3,28(r3)
 2003f48:	1a000815 	stw	r8,32(r3)
 2003f4c:	19c00915 	stw	r7,36(r3)
 2003f50:	19800a15 	stw	r6,40(r3)
 2003f54:	19000b15 	stw	r4,44(r3)
 2003f58:	00c00484 	movi	r3,18
 2003f5c:	10c0030d 	sth	r3,12(r2)
 2003f60:	00c00084 	movi	r3,2
 2003f64:	10000015 	stw	zero,0(r2)
 2003f68:	10000115 	stw	zero,4(r2)
 2003f6c:	10000215 	stw	zero,8(r2)
 2003f70:	10c0038d 	sth	r3,14(r2)
 2003f74:	10000415 	stw	zero,16(r2)
 2003f78:	10000515 	stw	zero,20(r2)
 2003f7c:	10000615 	stw	zero,24(r2)
 2003f80:	10800715 	stw	r2,28(r2)
 2003f84:	12000815 	stw	r8,32(r2)
 2003f88:	11c00915 	stw	r7,36(r2)
 2003f8c:	11800a15 	stw	r6,40(r2)
 2003f90:	11000b15 	stw	r4,44(r2)
 2003f94:	f800283a 	ret

02003f98 <__sfp>:
 2003f98:	defffc04 	addi	sp,sp,-16
 2003f9c:	00808074 	movhi	r2,513
 2003fa0:	10b5c704 	addi	r2,r2,-10468
 2003fa4:	dc400115 	stw	r17,4(sp)
 2003fa8:	14400017 	ldw	r17,0(r2)
 2003fac:	dc800215 	stw	r18,8(sp)
 2003fb0:	dfc00315 	stw	ra,12(sp)
 2003fb4:	88800e17 	ldw	r2,56(r17)
 2003fb8:	dc000015 	stw	r16,0(sp)
 2003fbc:	2025883a 	mov	r18,r4
 2003fc0:	10002826 	beq	r2,zero,2004064 <__sfp+0xcc>
 2003fc4:	8c40b804 	addi	r17,r17,736
 2003fc8:	043fffc4 	movi	r16,-1
 2003fcc:	89400117 	ldw	r5,4(r17)
 2003fd0:	88800217 	ldw	r2,8(r17)
 2003fd4:	297fffc4 	addi	r5,r5,-1
 2003fd8:	28000a16 	blt	r5,zero,2004004 <__sfp+0x6c>
 2003fdc:	10c0030f 	ldh	r3,12(r2)
 2003fe0:	18000c26 	beq	r3,zero,2004014 <__sfp+0x7c>
 2003fe4:	10c01a04 	addi	r3,r2,104
 2003fe8:	00000206 	br	2003ff4 <__sfp+0x5c>
 2003fec:	19bfe90f 	ldh	r6,-92(r3)
 2003ff0:	30000826 	beq	r6,zero,2004014 <__sfp+0x7c>
 2003ff4:	297fffc4 	addi	r5,r5,-1
 2003ff8:	18bffd04 	addi	r2,r3,-12
 2003ffc:	18c01704 	addi	r3,r3,92
 2004000:	2c3ffa1e 	bne	r5,r16,2003fec <__sfp+0x54>
 2004004:	88800017 	ldw	r2,0(r17)
 2004008:	10001926 	beq	r2,zero,2004070 <__sfp+0xd8>
 200400c:	1023883a 	mov	r17,r2
 2004010:	003fee06 	br	2003fcc <__sfp+0x34>
 2004014:	00ffffc4 	movi	r3,-1
 2004018:	10c0038d 	sth	r3,14(r2)
 200401c:	00c00044 	movi	r3,1
 2004020:	10c0030d 	sth	r3,12(r2)
 2004024:	10000015 	stw	zero,0(r2)
 2004028:	10000215 	stw	zero,8(r2)
 200402c:	10000115 	stw	zero,4(r2)
 2004030:	10000415 	stw	zero,16(r2)
 2004034:	10000515 	stw	zero,20(r2)
 2004038:	10000615 	stw	zero,24(r2)
 200403c:	10000c15 	stw	zero,48(r2)
 2004040:	10000d15 	stw	zero,52(r2)
 2004044:	10001115 	stw	zero,68(r2)
 2004048:	10001215 	stw	zero,72(r2)
 200404c:	dfc00317 	ldw	ra,12(sp)
 2004050:	dc800217 	ldw	r18,8(sp)
 2004054:	dc400117 	ldw	r17,4(sp)
 2004058:	dc000017 	ldw	r16,0(sp)
 200405c:	dec00404 	addi	sp,sp,16
 2004060:	f800283a 	ret
 2004064:	8809883a 	mov	r4,r17
 2004068:	2003e8c0 	call	2003e8c <__sinit>
 200406c:	003fd506 	br	2003fc4 <__sfp+0x2c>
 2004070:	9009883a 	mov	r4,r18
 2004074:	01400104 	movi	r5,4
 2004078:	2003e180 	call	2003e18 <__sfmoreglue>
 200407c:	88800015 	stw	r2,0(r17)
 2004080:	103fe21e 	bne	r2,zero,200400c <__sfp+0x74>
 2004084:	00800304 	movi	r2,12
 2004088:	90800015 	stw	r2,0(r18)
 200408c:	0005883a 	mov	r2,zero
 2004090:	003fee06 	br	200404c <__sfp+0xb4>

02004094 <__sfp_lock_acquire>:
 2004094:	f800283a 	ret

02004098 <__sfp_lock_release>:
 2004098:	f800283a 	ret

0200409c <__sinit_lock_acquire>:
 200409c:	f800283a 	ret

020040a0 <__sinit_lock_release>:
 20040a0:	f800283a 	ret

020040a4 <__fp_lock_all>:
 20040a4:	00808074 	movhi	r2,513
 20040a8:	10b5c804 	addi	r2,r2,-10464
 20040ac:	11000017 	ldw	r4,0(r2)
 20040b0:	01408034 	movhi	r5,512
 20040b4:	294f7f04 	addi	r5,r5,15868
 20040b8:	20049c41 	jmpi	20049c4 <_fwalk>

020040bc <__fp_unlock_all>:
 20040bc:	00808074 	movhi	r2,513
 20040c0:	10b5c804 	addi	r2,r2,-10464
 20040c4:	11000017 	ldw	r4,0(r2)
 20040c8:	01408034 	movhi	r5,512
 20040cc:	294f8104 	addi	r5,r5,15876
 20040d0:	20049c41 	jmpi	20049c4 <_fwalk>

020040d4 <_malloc_trim_r>:
 20040d4:	defffb04 	addi	sp,sp,-20
 20040d8:	dcc00315 	stw	r19,12(sp)
 20040dc:	dc800215 	stw	r18,8(sp)
 20040e0:	dc400115 	stw	r17,4(sp)
 20040e4:	dc000015 	stw	r16,0(sp)
 20040e8:	2827883a 	mov	r19,r5
 20040ec:	dfc00415 	stw	ra,16(sp)
 20040f0:	04408074 	movhi	r17,513
 20040f4:	8c704204 	addi	r17,r17,-16120
 20040f8:	2021883a 	mov	r16,r4
 20040fc:	20099b80 	call	20099b8 <__malloc_lock>
 2004100:	88800217 	ldw	r2,8(r17)
 2004104:	14800117 	ldw	r18,4(r2)
 2004108:	00bfff04 	movi	r2,-4
 200410c:	90a4703a 	and	r18,r18,r2
 2004110:	9083fbc4 	addi	r2,r18,4079
 2004114:	14e7c83a 	sub	r19,r2,r19
 2004118:	9826d33a 	srli	r19,r19,12
 200411c:	0083ffc4 	movi	r2,4095
 2004120:	9cffffc4 	addi	r19,r19,-1
 2004124:	9826933a 	slli	r19,r19,12
 2004128:	14c0060e 	bge	r2,r19,2004144 <_malloc_trim_r+0x70>
 200412c:	8009883a 	mov	r4,r16
 2004130:	000b883a 	mov	r5,zero
 2004134:	2006e4c0 	call	2006e4c <_sbrk_r>
 2004138:	88c00217 	ldw	r3,8(r17)
 200413c:	1c87883a 	add	r3,r3,r18
 2004140:	10c00a26 	beq	r2,r3,200416c <_malloc_trim_r+0x98>
 2004144:	8009883a 	mov	r4,r16
 2004148:	20099d80 	call	20099d8 <__malloc_unlock>
 200414c:	0005883a 	mov	r2,zero
 2004150:	dfc00417 	ldw	ra,16(sp)
 2004154:	dcc00317 	ldw	r19,12(sp)
 2004158:	dc800217 	ldw	r18,8(sp)
 200415c:	dc400117 	ldw	r17,4(sp)
 2004160:	dc000017 	ldw	r16,0(sp)
 2004164:	dec00504 	addi	sp,sp,20
 2004168:	f800283a 	ret
 200416c:	8009883a 	mov	r4,r16
 2004170:	04cbc83a 	sub	r5,zero,r19
 2004174:	2006e4c0 	call	2006e4c <_sbrk_r>
 2004178:	00ffffc4 	movi	r3,-1
 200417c:	10c01326 	beq	r2,r3,20041cc <_malloc_trim_r+0xf8>
 2004180:	00808074 	movhi	r2,513
 2004184:	10b5e304 	addi	r2,r2,-10356
 2004188:	11000017 	ldw	r4,0(r2)
 200418c:	88c00217 	ldw	r3,8(r17)
 2004190:	94e5c83a 	sub	r18,r18,r19
 2004194:	94800054 	ori	r18,r18,1
 2004198:	24e7c83a 	sub	r19,r4,r19
 200419c:	1c800115 	stw	r18,4(r3)
 20041a0:	8009883a 	mov	r4,r16
 20041a4:	14c00015 	stw	r19,0(r2)
 20041a8:	20099d80 	call	20099d8 <__malloc_unlock>
 20041ac:	00800044 	movi	r2,1
 20041b0:	dfc00417 	ldw	ra,16(sp)
 20041b4:	dcc00317 	ldw	r19,12(sp)
 20041b8:	dc800217 	ldw	r18,8(sp)
 20041bc:	dc400117 	ldw	r17,4(sp)
 20041c0:	dc000017 	ldw	r16,0(sp)
 20041c4:	dec00504 	addi	sp,sp,20
 20041c8:	f800283a 	ret
 20041cc:	8009883a 	mov	r4,r16
 20041d0:	000b883a 	mov	r5,zero
 20041d4:	2006e4c0 	call	2006e4c <_sbrk_r>
 20041d8:	88c00217 	ldw	r3,8(r17)
 20041dc:	014003c4 	movi	r5,15
 20041e0:	10c9c83a 	sub	r4,r2,r3
 20041e4:	293fd70e 	bge	r5,r4,2004144 <_malloc_trim_r+0x70>
 20041e8:	01408074 	movhi	r5,513
 20041ec:	2975ca04 	addi	r5,r5,-10456
 20041f0:	29400017 	ldw	r5,0(r5)
 20041f4:	21000054 	ori	r4,r4,1
 20041f8:	19000115 	stw	r4,4(r3)
 20041fc:	1145c83a 	sub	r2,r2,r5
 2004200:	01408074 	movhi	r5,513
 2004204:	2975e304 	addi	r5,r5,-10356
 2004208:	28800015 	stw	r2,0(r5)
 200420c:	003fcd06 	br	2004144 <_malloc_trim_r+0x70>

02004210 <_free_r>:
 2004210:	defffd04 	addi	sp,sp,-12
 2004214:	dc400115 	stw	r17,4(sp)
 2004218:	dc000015 	stw	r16,0(sp)
 200421c:	dfc00215 	stw	ra,8(sp)
 2004220:	2821883a 	mov	r16,r5
 2004224:	2023883a 	mov	r17,r4
 2004228:	28004b26 	beq	r5,zero,2004358 <_free_r+0x148>
 200422c:	20099b80 	call	20099b8 <__malloc_lock>
 2004230:	823fff17 	ldw	r8,-4(r16)
 2004234:	00bfff84 	movi	r2,-2
 2004238:	81bffe04 	addi	r6,r16,-8
 200423c:	4084703a 	and	r2,r8,r2
 2004240:	3087883a 	add	r3,r6,r2
 2004244:	01408074 	movhi	r5,513
 2004248:	29704204 	addi	r5,r5,-16120
 200424c:	1a400117 	ldw	r9,4(r3)
 2004250:	29000217 	ldw	r4,8(r5)
 2004254:	01ffff04 	movi	r7,-4
 2004258:	49ce703a 	and	r7,r9,r7
 200425c:	20c06526 	beq	r4,r3,20043f4 <_free_r+0x1e4>
 2004260:	19c00115 	stw	r7,4(r3)
 2004264:	4200004c 	andi	r8,r8,1
 2004268:	40003026 	beq	r8,zero,200432c <_free_r+0x11c>
 200426c:	0009883a 	mov	r4,zero
 2004270:	19d1883a 	add	r8,r3,r7
 2004274:	42000117 	ldw	r8,4(r8)
 2004278:	4200004c 	andi	r8,r8,1
 200427c:	4000061e 	bne	r8,zero,2004298 <_free_r+0x88>
 2004280:	11c5883a 	add	r2,r2,r7
 2004284:	19c00217 	ldw	r7,8(r3)
 2004288:	20004e26 	beq	r4,zero,20043c4 <_free_r+0x1b4>
 200428c:	18c00317 	ldw	r3,12(r3)
 2004290:	38c00315 	stw	r3,12(r7)
 2004294:	19c00215 	stw	r7,8(r3)
 2004298:	11c00054 	ori	r7,r2,1
 200429c:	3087883a 	add	r3,r6,r2
 20042a0:	31c00115 	stw	r7,4(r6)
 20042a4:	18800015 	stw	r2,0(r3)
 20042a8:	20001a1e 	bne	r4,zero,2004314 <_free_r+0x104>
 20042ac:	00c07fc4 	movi	r3,511
 20042b0:	18802e2e 	bgeu	r3,r2,200436c <_free_r+0x15c>
 20042b4:	1006d27a 	srli	r3,r2,9
 20042b8:	01000104 	movi	r4,4
 20042bc:	20c06636 	bltu	r4,r3,2004458 <_free_r+0x248>
 20042c0:	1008d1ba 	srli	r4,r2,6
 20042c4:	21000e04 	addi	r4,r4,56
 20042c8:	210f883a 	add	r7,r4,r4
 20042cc:	39cf883a 	add	r7,r7,r7
 20042d0:	39cf883a 	add	r7,r7,r7
 20042d4:	29cf883a 	add	r7,r5,r7
 20042d8:	38c00217 	ldw	r3,8(r7)
 20042dc:	01408074 	movhi	r5,513
 20042e0:	29704204 	addi	r5,r5,-16120
 20042e4:	19c06126 	beq	r3,r7,200446c <_free_r+0x25c>
 20042e8:	013fff04 	movi	r4,-4
 20042ec:	19400117 	ldw	r5,4(r3)
 20042f0:	290a703a 	and	r5,r5,r4
 20042f4:	1140022e 	bgeu	r2,r5,2004300 <_free_r+0xf0>
 20042f8:	18c00217 	ldw	r3,8(r3)
 20042fc:	38fffb1e 	bne	r7,r3,20042ec <_free_r+0xdc>
 2004300:	18800317 	ldw	r2,12(r3)
 2004304:	30800315 	stw	r2,12(r6)
 2004308:	30c00215 	stw	r3,8(r6)
 200430c:	11800215 	stw	r6,8(r2)
 2004310:	19800315 	stw	r6,12(r3)
 2004314:	8809883a 	mov	r4,r17
 2004318:	dfc00217 	ldw	ra,8(sp)
 200431c:	dc400117 	ldw	r17,4(sp)
 2004320:	dc000017 	ldw	r16,0(sp)
 2004324:	dec00304 	addi	sp,sp,12
 2004328:	20099d81 	jmpi	20099d8 <__malloc_unlock>
 200432c:	813ffe17 	ldw	r4,-8(r16)
 2004330:	2a400204 	addi	r9,r5,8
 2004334:	310dc83a 	sub	r6,r6,r4
 2004338:	32000217 	ldw	r8,8(r6)
 200433c:	1105883a 	add	r2,r2,r4
 2004340:	42404326 	beq	r8,r9,2004450 <_free_r+0x240>
 2004344:	32400317 	ldw	r9,12(r6)
 2004348:	0009883a 	mov	r4,zero
 200434c:	42400315 	stw	r9,12(r8)
 2004350:	4a000215 	stw	r8,8(r9)
 2004354:	003fc606 	br	2004270 <_free_r+0x60>
 2004358:	dfc00217 	ldw	ra,8(sp)
 200435c:	dc400117 	ldw	r17,4(sp)
 2004360:	dc000017 	ldw	r16,0(sp)
 2004364:	dec00304 	addi	sp,sp,12
 2004368:	f800283a 	ret
 200436c:	1004d0fa 	srli	r2,r2,3
 2004370:	02000044 	movi	r8,1
 2004374:	29c00117 	ldw	r7,4(r5)
 2004378:	1087883a 	add	r3,r2,r2
 200437c:	18c7883a 	add	r3,r3,r3
 2004380:	1005d0ba 	srai	r2,r2,2
 2004384:	18c7883a 	add	r3,r3,r3
 2004388:	28c7883a 	add	r3,r5,r3
 200438c:	19000217 	ldw	r4,8(r3)
 2004390:	4084983a 	sll	r2,r8,r2
 2004394:	30c00315 	stw	r3,12(r6)
 2004398:	31000215 	stw	r4,8(r6)
 200439c:	11c4b03a 	or	r2,r2,r7
 20043a0:	21800315 	stw	r6,12(r4)
 20043a4:	8809883a 	mov	r4,r17
 20043a8:	28800115 	stw	r2,4(r5)
 20043ac:	19800215 	stw	r6,8(r3)
 20043b0:	dfc00217 	ldw	ra,8(sp)
 20043b4:	dc400117 	ldw	r17,4(sp)
 20043b8:	dc000017 	ldw	r16,0(sp)
 20043bc:	dec00304 	addi	sp,sp,12
 20043c0:	20099d81 	jmpi	20099d8 <__malloc_unlock>
 20043c4:	02008074 	movhi	r8,513
 20043c8:	42304404 	addi	r8,r8,-16112
 20043cc:	3a3faf1e 	bne	r7,r8,200428c <_free_r+0x7c>
 20043d0:	29800515 	stw	r6,20(r5)
 20043d4:	29800415 	stw	r6,16(r5)
 20043d8:	11000054 	ori	r4,r2,1
 20043dc:	3087883a 	add	r3,r6,r2
 20043e0:	31c00315 	stw	r7,12(r6)
 20043e4:	31c00215 	stw	r7,8(r6)
 20043e8:	31000115 	stw	r4,4(r6)
 20043ec:	18800015 	stw	r2,0(r3)
 20043f0:	003fc806 	br	2004314 <_free_r+0x104>
 20043f4:	4200004c 	andi	r8,r8,1
 20043f8:	3885883a 	add	r2,r7,r2
 20043fc:	4000071e 	bne	r8,zero,200441c <_free_r+0x20c>
 2004400:	81fffe17 	ldw	r7,-8(r16)
 2004404:	31cdc83a 	sub	r6,r6,r7
 2004408:	30c00317 	ldw	r3,12(r6)
 200440c:	31000217 	ldw	r4,8(r6)
 2004410:	11c5883a 	add	r2,r2,r7
 2004414:	20c00315 	stw	r3,12(r4)
 2004418:	19000215 	stw	r4,8(r3)
 200441c:	00c08074 	movhi	r3,513
 2004420:	18f5cb04 	addi	r3,r3,-10452
 2004424:	18c00017 	ldw	r3,0(r3)
 2004428:	11000054 	ori	r4,r2,1
 200442c:	31000115 	stw	r4,4(r6)
 2004430:	29800215 	stw	r6,8(r5)
 2004434:	10ffb736 	bltu	r2,r3,2004314 <_free_r+0x104>
 2004438:	00808074 	movhi	r2,513
 200443c:	10b5db04 	addi	r2,r2,-10388
 2004440:	11400017 	ldw	r5,0(r2)
 2004444:	8809883a 	mov	r4,r17
 2004448:	20040d40 	call	20040d4 <_malloc_trim_r>
 200444c:	003fb106 	br	2004314 <_free_r+0x104>
 2004450:	01000044 	movi	r4,1
 2004454:	003f8606 	br	2004270 <_free_r+0x60>
 2004458:	01000504 	movi	r4,20
 200445c:	20c00b36 	bltu	r4,r3,200448c <_free_r+0x27c>
 2004460:	190016c4 	addi	r4,r3,91
 2004464:	210f883a 	add	r7,r4,r4
 2004468:	003f9806 	br	20042cc <_free_r+0xbc>
 200446c:	2009d0ba 	srai	r4,r4,2
 2004470:	00800044 	movi	r2,1
 2004474:	29c00117 	ldw	r7,4(r5)
 2004478:	1108983a 	sll	r4,r2,r4
 200447c:	1805883a 	mov	r2,r3
 2004480:	21c8b03a 	or	r4,r4,r7
 2004484:	29000115 	stw	r4,4(r5)
 2004488:	003f9e06 	br	2004304 <_free_r+0xf4>
 200448c:	01001504 	movi	r4,84
 2004490:	20c00436 	bltu	r4,r3,20044a4 <_free_r+0x294>
 2004494:	1008d33a 	srli	r4,r2,12
 2004498:	21001b84 	addi	r4,r4,110
 200449c:	210f883a 	add	r7,r4,r4
 20044a0:	003f8a06 	br	20042cc <_free_r+0xbc>
 20044a4:	01005504 	movi	r4,340
 20044a8:	20c00436 	bltu	r4,r3,20044bc <_free_r+0x2ac>
 20044ac:	1008d3fa 	srli	r4,r2,15
 20044b0:	21001dc4 	addi	r4,r4,119
 20044b4:	210f883a 	add	r7,r4,r4
 20044b8:	003f8406 	br	20042cc <_free_r+0xbc>
 20044bc:	01015504 	movi	r4,1364
 20044c0:	20c00436 	bltu	r4,r3,20044d4 <_free_r+0x2c4>
 20044c4:	1008d4ba 	srli	r4,r2,18
 20044c8:	21001f04 	addi	r4,r4,124
 20044cc:	210f883a 	add	r7,r4,r4
 20044d0:	003f7e06 	br	20042cc <_free_r+0xbc>
 20044d4:	01c03f04 	movi	r7,252
 20044d8:	01001f84 	movi	r4,126
 20044dc:	003f7b06 	br	20042cc <_free_r+0xbc>

020044e0 <__sfvwrite_r>:
 20044e0:	30800217 	ldw	r2,8(r6)
 20044e4:	defff504 	addi	sp,sp,-44
 20044e8:	dd400615 	stw	r21,24(sp)
 20044ec:	dd000515 	stw	r20,20(sp)
 20044f0:	dc000115 	stw	r16,4(sp)
 20044f4:	dfc00a15 	stw	ra,40(sp)
 20044f8:	df000915 	stw	fp,36(sp)
 20044fc:	ddc00815 	stw	r23,32(sp)
 2004500:	dd800715 	stw	r22,28(sp)
 2004504:	dcc00415 	stw	r19,16(sp)
 2004508:	dc800315 	stw	r18,12(sp)
 200450c:	dc400215 	stw	r17,8(sp)
 2004510:	3029883a 	mov	r20,r6
 2004514:	202b883a 	mov	r21,r4
 2004518:	2821883a 	mov	r16,r5
 200451c:	10002126 	beq	r2,zero,20045a4 <__sfvwrite_r+0xc4>
 2004520:	2880030b 	ldhu	r2,12(r5)
 2004524:	10c0020c 	andi	r3,r2,8
 2004528:	18ffffcc 	andi	r3,r3,65535
 200452c:	18e0001c 	xori	r3,r3,32768
 2004530:	18e00004 	addi	r3,r3,-32768
 2004534:	18002826 	beq	r3,zero,20045d8 <__sfvwrite_r+0xf8>
 2004538:	28c00417 	ldw	r3,16(r5)
 200453c:	18002626 	beq	r3,zero,20045d8 <__sfvwrite_r+0xf8>
 2004540:	10c0008c 	andi	r3,r2,2
 2004544:	18ffffcc 	andi	r3,r3,65535
 2004548:	18e0001c 	xori	r3,r3,32768
 200454c:	18e00004 	addi	r3,r3,-32768
 2004550:	a4400017 	ldw	r17,0(r20)
 2004554:	18002b26 	beq	r3,zero,2004604 <__sfvwrite_r+0x124>
 2004558:	0027883a 	mov	r19,zero
 200455c:	0025883a 	mov	r18,zero
 2004560:	05810004 	movi	r22,1024
 2004564:	980d883a 	mov	r6,r19
 2004568:	a809883a 	mov	r4,r21
 200456c:	90004f26 	beq	r18,zero,20046ac <__sfvwrite_r+0x1cc>
 2004570:	900f883a 	mov	r7,r18
 2004574:	81400717 	ldw	r5,28(r16)
 2004578:	b480012e 	bgeu	r22,r18,2004580 <__sfvwrite_r+0xa0>
 200457c:	01c10004 	movi	r7,1024
 2004580:	80800917 	ldw	r2,36(r16)
 2004584:	103ee83a 	callr	r2
 2004588:	0080540e 	bge	zero,r2,20046dc <__sfvwrite_r+0x1fc>
 200458c:	a0c00217 	ldw	r3,8(r20)
 2004590:	98a7883a 	add	r19,r19,r2
 2004594:	90a5c83a 	sub	r18,r18,r2
 2004598:	1885c83a 	sub	r2,r3,r2
 200459c:	a0800215 	stw	r2,8(r20)
 20045a0:	103ff01e 	bne	r2,zero,2004564 <__sfvwrite_r+0x84>
 20045a4:	0005883a 	mov	r2,zero
 20045a8:	dfc00a17 	ldw	ra,40(sp)
 20045ac:	df000917 	ldw	fp,36(sp)
 20045b0:	ddc00817 	ldw	r23,32(sp)
 20045b4:	dd800717 	ldw	r22,28(sp)
 20045b8:	dd400617 	ldw	r21,24(sp)
 20045bc:	dd000517 	ldw	r20,20(sp)
 20045c0:	dcc00417 	ldw	r19,16(sp)
 20045c4:	dc800317 	ldw	r18,12(sp)
 20045c8:	dc400217 	ldw	r17,8(sp)
 20045cc:	dc000117 	ldw	r16,4(sp)
 20045d0:	dec00b04 	addi	sp,sp,44
 20045d4:	f800283a 	ret
 20045d8:	a809883a 	mov	r4,r21
 20045dc:	800b883a 	mov	r5,r16
 20045e0:	200224c0 	call	200224c <__swsetup_r>
 20045e4:	1000f01e 	bne	r2,zero,20049a8 <__sfvwrite_r+0x4c8>
 20045e8:	8080030b 	ldhu	r2,12(r16)
 20045ec:	a4400017 	ldw	r17,0(r20)
 20045f0:	10c0008c 	andi	r3,r2,2
 20045f4:	18ffffcc 	andi	r3,r3,65535
 20045f8:	18e0001c 	xori	r3,r3,32768
 20045fc:	18e00004 	addi	r3,r3,-32768
 2004600:	183fd51e 	bne	r3,zero,2004558 <__sfvwrite_r+0x78>
 2004604:	10c0004c 	andi	r3,r2,1
 2004608:	002d883a 	mov	r22,zero
 200460c:	1800381e 	bne	r3,zero,20046f0 <__sfvwrite_r+0x210>
 2004610:	0025883a 	mov	r18,zero
 2004614:	90002126 	beq	r18,zero,200469c <__sfvwrite_r+0x1bc>
 2004618:	10c0800c 	andi	r3,r2,512
 200461c:	18ffffcc 	andi	r3,r3,65535
 2004620:	18e0001c 	xori	r3,r3,32768
 2004624:	18e00004 	addi	r3,r3,-32768
 2004628:	84c00217 	ldw	r19,8(r16)
 200462c:	18006b26 	beq	r3,zero,20047dc <__sfvwrite_r+0x2fc>
 2004630:	980f883a 	mov	r7,r19
 2004634:	94c08636 	bltu	r18,r19,2004850 <__sfvwrite_r+0x370>
 2004638:	10c1200c 	andi	r3,r2,1152
 200463c:	18009f1e 	bne	r3,zero,20048bc <__sfvwrite_r+0x3dc>
 2004640:	81000017 	ldw	r4,0(r16)
 2004644:	982f883a 	mov	r23,r19
 2004648:	9039883a 	mov	fp,r18
 200464c:	9027883a 	mov	r19,r18
 2004650:	380d883a 	mov	r6,r7
 2004654:	b00b883a 	mov	r5,r22
 2004658:	d9c00015 	stw	r7,0(sp)
 200465c:	200571c0 	call	200571c <memmove>
 2004660:	d9c00017 	ldw	r7,0(sp)
 2004664:	81000217 	ldw	r4,8(r16)
 2004668:	80800017 	ldw	r2,0(r16)
 200466c:	25efc83a 	sub	r23,r4,r23
 2004670:	11cf883a 	add	r7,r2,r7
 2004674:	85c00215 	stw	r23,8(r16)
 2004678:	81c00015 	stw	r7,0(r16)
 200467c:	a0800217 	ldw	r2,8(r20)
 2004680:	b72d883a 	add	r22,r22,fp
 2004684:	9725c83a 	sub	r18,r18,fp
 2004688:	14e7c83a 	sub	r19,r2,r19
 200468c:	a4c00215 	stw	r19,8(r20)
 2004690:	983fc426 	beq	r19,zero,20045a4 <__sfvwrite_r+0xc4>
 2004694:	8080030b 	ldhu	r2,12(r16)
 2004698:	903fdf1e 	bne	r18,zero,2004618 <__sfvwrite_r+0x138>
 200469c:	8d800017 	ldw	r22,0(r17)
 20046a0:	8c800117 	ldw	r18,4(r17)
 20046a4:	8c400204 	addi	r17,r17,8
 20046a8:	003fda06 	br	2004614 <__sfvwrite_r+0x134>
 20046ac:	8cc00017 	ldw	r19,0(r17)
 20046b0:	8c800117 	ldw	r18,4(r17)
 20046b4:	8c400204 	addi	r17,r17,8
 20046b8:	003faa06 	br	2004564 <__sfvwrite_r+0x84>
 20046bc:	20067ec0 	call	20067ec <_realloc_r>
 20046c0:	102f883a 	mov	r23,r2
 20046c4:	10009f1e 	bne	r2,zero,2004944 <__sfvwrite_r+0x464>
 20046c8:	81400417 	ldw	r5,16(r16)
 20046cc:	a809883a 	mov	r4,r21
 20046d0:	20042100 	call	2004210 <_free_r>
 20046d4:	00800304 	movi	r2,12
 20046d8:	a8800015 	stw	r2,0(r21)
 20046dc:	80c0030b 	ldhu	r3,12(r16)
 20046e0:	00bfffc4 	movi	r2,-1
 20046e4:	18c01014 	ori	r3,r3,64
 20046e8:	80c0030d 	sth	r3,12(r16)
 20046ec:	003fae06 	br	20045a8 <__sfvwrite_r+0xc8>
 20046f0:	0007883a 	mov	r3,zero
 20046f4:	0039883a 	mov	fp,zero
 20046f8:	0025883a 	mov	r18,zero
 20046fc:	90001e26 	beq	r18,zero,2004778 <__sfvwrite_r+0x298>
 2004700:	18006526 	beq	r3,zero,2004898 <__sfvwrite_r+0x3b8>
 2004704:	b02f883a 	mov	r23,r22
 2004708:	9580012e 	bgeu	r18,r22,2004710 <__sfvwrite_r+0x230>
 200470c:	902f883a 	mov	r23,r18
 2004710:	81000017 	ldw	r4,0(r16)
 2004714:	80800417 	ldw	r2,16(r16)
 2004718:	84c00217 	ldw	r19,8(r16)
 200471c:	81c00517 	ldw	r7,20(r16)
 2004720:	1100022e 	bgeu	r2,r4,200472c <__sfvwrite_r+0x24c>
 2004724:	99e7883a 	add	r19,r19,r7
 2004728:	9dc01816 	blt	r19,r23,200478c <__sfvwrite_r+0x2ac>
 200472c:	b9c03b16 	blt	r23,r7,200481c <__sfvwrite_r+0x33c>
 2004730:	80800917 	ldw	r2,36(r16)
 2004734:	81400717 	ldw	r5,28(r16)
 2004738:	a809883a 	mov	r4,r21
 200473c:	d8c00015 	stw	r3,0(sp)
 2004740:	e00d883a 	mov	r6,fp
 2004744:	103ee83a 	callr	r2
 2004748:	1027883a 	mov	r19,r2
 200474c:	d8c00017 	ldw	r3,0(sp)
 2004750:	00bfe20e 	bge	zero,r2,20046dc <__sfvwrite_r+0x1fc>
 2004754:	b4edc83a 	sub	r22,r22,r19
 2004758:	b0001a26 	beq	r22,zero,20047c4 <__sfvwrite_r+0x2e4>
 200475c:	a0800217 	ldw	r2,8(r20)
 2004760:	e4f9883a 	add	fp,fp,r19
 2004764:	94e5c83a 	sub	r18,r18,r19
 2004768:	14e7c83a 	sub	r19,r2,r19
 200476c:	a4c00215 	stw	r19,8(r20)
 2004770:	983f8c26 	beq	r19,zero,20045a4 <__sfvwrite_r+0xc4>
 2004774:	903fe21e 	bne	r18,zero,2004700 <__sfvwrite_r+0x220>
 2004778:	8f000017 	ldw	fp,0(r17)
 200477c:	8c800117 	ldw	r18,4(r17)
 2004780:	0007883a 	mov	r3,zero
 2004784:	8c400204 	addi	r17,r17,8
 2004788:	003fdc06 	br	20046fc <__sfvwrite_r+0x21c>
 200478c:	e00b883a 	mov	r5,fp
 2004790:	980d883a 	mov	r6,r19
 2004794:	d8c00015 	stw	r3,0(sp)
 2004798:	200571c0 	call	200571c <memmove>
 200479c:	80800017 	ldw	r2,0(r16)
 20047a0:	a809883a 	mov	r4,r21
 20047a4:	800b883a 	mov	r5,r16
 20047a8:	14c5883a 	add	r2,r2,r19
 20047ac:	80800015 	stw	r2,0(r16)
 20047b0:	2003be40 	call	2003be4 <_fflush_r>
 20047b4:	d8c00017 	ldw	r3,0(sp)
 20047b8:	103fc81e 	bne	r2,zero,20046dc <__sfvwrite_r+0x1fc>
 20047bc:	b4edc83a 	sub	r22,r22,r19
 20047c0:	b03fe61e 	bne	r22,zero,200475c <__sfvwrite_r+0x27c>
 20047c4:	a809883a 	mov	r4,r21
 20047c8:	800b883a 	mov	r5,r16
 20047cc:	2003be40 	call	2003be4 <_fflush_r>
 20047d0:	103fc21e 	bne	r2,zero,20046dc <__sfvwrite_r+0x1fc>
 20047d4:	0007883a 	mov	r3,zero
 20047d8:	003fe006 	br	200475c <__sfvwrite_r+0x27c>
 20047dc:	81000017 	ldw	r4,0(r16)
 20047e0:	80800417 	ldw	r2,16(r16)
 20047e4:	1100022e 	bgeu	r2,r4,20047f0 <__sfvwrite_r+0x310>
 20047e8:	9839883a 	mov	fp,r19
 20047ec:	9c806036 	bltu	r19,r18,2004970 <__sfvwrite_r+0x490>
 20047f0:	81c00517 	ldw	r7,20(r16)
 20047f4:	91c01c36 	bltu	r18,r7,2004868 <__sfvwrite_r+0x388>
 20047f8:	80800917 	ldw	r2,36(r16)
 20047fc:	81400717 	ldw	r5,28(r16)
 2004800:	a809883a 	mov	r4,r21
 2004804:	b00d883a 	mov	r6,r22
 2004808:	103ee83a 	callr	r2
 200480c:	1027883a 	mov	r19,r2
 2004810:	00bfb20e 	bge	zero,r2,20046dc <__sfvwrite_r+0x1fc>
 2004814:	1039883a 	mov	fp,r2
 2004818:	003f9806 	br	200467c <__sfvwrite_r+0x19c>
 200481c:	b80d883a 	mov	r6,r23
 2004820:	e00b883a 	mov	r5,fp
 2004824:	d8c00015 	stw	r3,0(sp)
 2004828:	200571c0 	call	200571c <memmove>
 200482c:	80800217 	ldw	r2,8(r16)
 2004830:	81000017 	ldw	r4,0(r16)
 2004834:	b827883a 	mov	r19,r23
 2004838:	15c5c83a 	sub	r2,r2,r23
 200483c:	25ef883a 	add	r23,r4,r23
 2004840:	80800215 	stw	r2,8(r16)
 2004844:	85c00015 	stw	r23,0(r16)
 2004848:	d8c00017 	ldw	r3,0(sp)
 200484c:	003fc106 	br	2004754 <__sfvwrite_r+0x274>
 2004850:	81000017 	ldw	r4,0(r16)
 2004854:	902f883a 	mov	r23,r18
 2004858:	9039883a 	mov	fp,r18
 200485c:	9027883a 	mov	r19,r18
 2004860:	900f883a 	mov	r7,r18
 2004864:	003f7a06 	br	2004650 <__sfvwrite_r+0x170>
 2004868:	b00b883a 	mov	r5,r22
 200486c:	900d883a 	mov	r6,r18
 2004870:	200571c0 	call	200571c <memmove>
 2004874:	80c00217 	ldw	r3,8(r16)
 2004878:	80800017 	ldw	r2,0(r16)
 200487c:	9027883a 	mov	r19,r18
 2004880:	1c87c83a 	sub	r3,r3,r18
 2004884:	1485883a 	add	r2,r2,r18
 2004888:	80c00215 	stw	r3,8(r16)
 200488c:	80800015 	stw	r2,0(r16)
 2004890:	9039883a 	mov	fp,r18
 2004894:	003f7906 	br	200467c <__sfvwrite_r+0x19c>
 2004898:	e009883a 	mov	r4,fp
 200489c:	01400284 	movi	r5,10
 20048a0:	900d883a 	mov	r6,r18
 20048a4:	200552c0 	call	200552c <memchr>
 20048a8:	10003c26 	beq	r2,zero,200499c <__sfvwrite_r+0x4bc>
 20048ac:	15800044 	addi	r22,r2,1
 20048b0:	b72dc83a 	sub	r22,r22,fp
 20048b4:	00c00044 	movi	r3,1
 20048b8:	003f9206 	br	2004704 <__sfvwrite_r+0x224>
 20048bc:	81000517 	ldw	r4,20(r16)
 20048c0:	81400417 	ldw	r5,16(r16)
 20048c4:	80c00017 	ldw	r3,0(r16)
 20048c8:	210d883a 	add	r6,r4,r4
 20048cc:	3109883a 	add	r4,r6,r4
 20048d0:	2026d7fa 	srli	r19,r4,31
 20048d4:	1979c83a 	sub	fp,r3,r5
 20048d8:	e1800044 	addi	r6,fp,1
 20048dc:	9909883a 	add	r4,r19,r4
 20048e0:	2027d07a 	srai	r19,r4,1
 20048e4:	3489883a 	add	r4,r6,r18
 20048e8:	980d883a 	mov	r6,r19
 20048ec:	9900022e 	bgeu	r19,r4,20048f8 <__sfvwrite_r+0x418>
 20048f0:	2027883a 	mov	r19,r4
 20048f4:	200d883a 	mov	r6,r4
 20048f8:	1081000c 	andi	r2,r2,1024
 20048fc:	10bfffcc 	andi	r2,r2,65535
 2004900:	10a0001c 	xori	r2,r2,32768
 2004904:	10a00004 	addi	r2,r2,-32768
 2004908:	a809883a 	mov	r4,r21
 200490c:	103f6b26 	beq	r2,zero,20046bc <__sfvwrite_r+0x1dc>
 2004910:	300b883a 	mov	r5,r6
 2004914:	2004da80 	call	2004da8 <_malloc_r>
 2004918:	102f883a 	mov	r23,r2
 200491c:	103f6d26 	beq	r2,zero,20046d4 <__sfvwrite_r+0x1f4>
 2004920:	81400417 	ldw	r5,16(r16)
 2004924:	1009883a 	mov	r4,r2
 2004928:	e00d883a 	mov	r6,fp
 200492c:	20056240 	call	2005624 <memcpy>
 2004930:	8080030b 	ldhu	r2,12(r16)
 2004934:	00fedfc4 	movi	r3,-1153
 2004938:	10c4703a 	and	r2,r2,r3
 200493c:	10802014 	ori	r2,r2,128
 2004940:	8080030d 	sth	r2,12(r16)
 2004944:	bf09883a 	add	r4,r23,fp
 2004948:	9f07c83a 	sub	r3,r19,fp
 200494c:	85c00415 	stw	r23,16(r16)
 2004950:	84c00515 	stw	r19,20(r16)
 2004954:	81000015 	stw	r4,0(r16)
 2004958:	902f883a 	mov	r23,r18
 200495c:	80c00215 	stw	r3,8(r16)
 2004960:	9039883a 	mov	fp,r18
 2004964:	9027883a 	mov	r19,r18
 2004968:	900f883a 	mov	r7,r18
 200496c:	003f3806 	br	2004650 <__sfvwrite_r+0x170>
 2004970:	b00b883a 	mov	r5,r22
 2004974:	980d883a 	mov	r6,r19
 2004978:	200571c0 	call	200571c <memmove>
 200497c:	80800017 	ldw	r2,0(r16)
 2004980:	a809883a 	mov	r4,r21
 2004984:	800b883a 	mov	r5,r16
 2004988:	14c5883a 	add	r2,r2,r19
 200498c:	80800015 	stw	r2,0(r16)
 2004990:	2003be40 	call	2003be4 <_fflush_r>
 2004994:	103f3926 	beq	r2,zero,200467c <__sfvwrite_r+0x19c>
 2004998:	003f5006 	br	20046dc <__sfvwrite_r+0x1fc>
 200499c:	95800044 	addi	r22,r18,1
 20049a0:	00c00044 	movi	r3,1
 20049a4:	003f5706 	br	2004704 <__sfvwrite_r+0x224>
 20049a8:	80c0030b 	ldhu	r3,12(r16)
 20049ac:	00bfffc4 	movi	r2,-1
 20049b0:	18c01014 	ori	r3,r3,64
 20049b4:	80c0030d 	sth	r3,12(r16)
 20049b8:	00c00244 	movi	r3,9
 20049bc:	a8c00015 	stw	r3,0(r21)
 20049c0:	003ef906 	br	20045a8 <__sfvwrite_r+0xc8>

020049c4 <_fwalk>:
 20049c4:	defff904 	addi	sp,sp,-28
 20049c8:	dcc00315 	stw	r19,12(sp)
 20049cc:	24c0b804 	addi	r19,r4,736
 20049d0:	dd400515 	stw	r21,20(sp)
 20049d4:	dd000415 	stw	r20,16(sp)
 20049d8:	dfc00615 	stw	ra,24(sp)
 20049dc:	dc800215 	stw	r18,8(sp)
 20049e0:	dc400115 	stw	r17,4(sp)
 20049e4:	dc000015 	stw	r16,0(sp)
 20049e8:	282b883a 	mov	r21,r5
 20049ec:	0029883a 	mov	r20,zero
 20049f0:	20040940 	call	2004094 <__sfp_lock_acquire>
 20049f4:	98001226 	beq	r19,zero,2004a40 <_fwalk+0x7c>
 20049f8:	04bfffc4 	movi	r18,-1
 20049fc:	9c400117 	ldw	r17,4(r19)
 2004a00:	9c000217 	ldw	r16,8(r19)
 2004a04:	8c7fffc4 	addi	r17,r17,-1
 2004a08:	88000b16 	blt	r17,zero,2004a38 <_fwalk+0x74>
 2004a0c:	84000304 	addi	r16,r16,12
 2004a10:	80c0000f 	ldh	r3,0(r16)
 2004a14:	8c7fffc4 	addi	r17,r17,-1
 2004a18:	813ffd04 	addi	r4,r16,-12
 2004a1c:	18000426 	beq	r3,zero,2004a30 <_fwalk+0x6c>
 2004a20:	80c0008f 	ldh	r3,2(r16)
 2004a24:	1c800226 	beq	r3,r18,2004a30 <_fwalk+0x6c>
 2004a28:	a83ee83a 	callr	r21
 2004a2c:	a0a8b03a 	or	r20,r20,r2
 2004a30:	84001704 	addi	r16,r16,92
 2004a34:	8cbff61e 	bne	r17,r18,2004a10 <_fwalk+0x4c>
 2004a38:	9cc00017 	ldw	r19,0(r19)
 2004a3c:	983fef1e 	bne	r19,zero,20049fc <_fwalk+0x38>
 2004a40:	20040980 	call	2004098 <__sfp_lock_release>
 2004a44:	a005883a 	mov	r2,r20
 2004a48:	dfc00617 	ldw	ra,24(sp)
 2004a4c:	dd400517 	ldw	r21,20(sp)
 2004a50:	dd000417 	ldw	r20,16(sp)
 2004a54:	dcc00317 	ldw	r19,12(sp)
 2004a58:	dc800217 	ldw	r18,8(sp)
 2004a5c:	dc400117 	ldw	r17,4(sp)
 2004a60:	dc000017 	ldw	r16,0(sp)
 2004a64:	dec00704 	addi	sp,sp,28
 2004a68:	f800283a 	ret

02004a6c <_fwalk_reent>:
 2004a6c:	defff804 	addi	sp,sp,-32
 2004a70:	dcc00315 	stw	r19,12(sp)
 2004a74:	24c0b804 	addi	r19,r4,736
 2004a78:	dd800615 	stw	r22,24(sp)
 2004a7c:	dd400515 	stw	r21,20(sp)
 2004a80:	dd000415 	stw	r20,16(sp)
 2004a84:	dfc00715 	stw	ra,28(sp)
 2004a88:	dc800215 	stw	r18,8(sp)
 2004a8c:	dc400115 	stw	r17,4(sp)
 2004a90:	dc000015 	stw	r16,0(sp)
 2004a94:	2029883a 	mov	r20,r4
 2004a98:	282b883a 	mov	r21,r5
 2004a9c:	002d883a 	mov	r22,zero
 2004aa0:	20040940 	call	2004094 <__sfp_lock_acquire>
 2004aa4:	98001326 	beq	r19,zero,2004af4 <_fwalk_reent+0x88>
 2004aa8:	04bfffc4 	movi	r18,-1
 2004aac:	9c400117 	ldw	r17,4(r19)
 2004ab0:	9c000217 	ldw	r16,8(r19)
 2004ab4:	8c7fffc4 	addi	r17,r17,-1
 2004ab8:	88000c16 	blt	r17,zero,2004aec <_fwalk_reent+0x80>
 2004abc:	84000304 	addi	r16,r16,12
 2004ac0:	80c0000f 	ldh	r3,0(r16)
 2004ac4:	8c7fffc4 	addi	r17,r17,-1
 2004ac8:	817ffd04 	addi	r5,r16,-12
 2004acc:	18000526 	beq	r3,zero,2004ae4 <_fwalk_reent+0x78>
 2004ad0:	80c0008f 	ldh	r3,2(r16)
 2004ad4:	a009883a 	mov	r4,r20
 2004ad8:	1c800226 	beq	r3,r18,2004ae4 <_fwalk_reent+0x78>
 2004adc:	a83ee83a 	callr	r21
 2004ae0:	b0acb03a 	or	r22,r22,r2
 2004ae4:	84001704 	addi	r16,r16,92
 2004ae8:	8cbff51e 	bne	r17,r18,2004ac0 <_fwalk_reent+0x54>
 2004aec:	9cc00017 	ldw	r19,0(r19)
 2004af0:	983fee1e 	bne	r19,zero,2004aac <_fwalk_reent+0x40>
 2004af4:	20040980 	call	2004098 <__sfp_lock_release>
 2004af8:	b005883a 	mov	r2,r22
 2004afc:	dfc00717 	ldw	ra,28(sp)
 2004b00:	dd800617 	ldw	r22,24(sp)
 2004b04:	dd400517 	ldw	r21,20(sp)
 2004b08:	dd000417 	ldw	r20,16(sp)
 2004b0c:	dcc00317 	ldw	r19,12(sp)
 2004b10:	dc800217 	ldw	r18,8(sp)
 2004b14:	dc400117 	ldw	r17,4(sp)
 2004b18:	dc000017 	ldw	r16,0(sp)
 2004b1c:	dec00804 	addi	sp,sp,32
 2004b20:	f800283a 	ret

02004b24 <_setlocale_r>:
 2004b24:	defffc04 	addi	sp,sp,-16
 2004b28:	dc800215 	stw	r18,8(sp)
 2004b2c:	dc400115 	stw	r17,4(sp)
 2004b30:	dc000015 	stw	r16,0(sp)
 2004b34:	dfc00315 	stw	ra,12(sp)
 2004b38:	3021883a 	mov	r16,r6
 2004b3c:	2023883a 	mov	r17,r4
 2004b40:	2825883a 	mov	r18,r5
 2004b44:	30001626 	beq	r6,zero,2004ba0 <_setlocale_r+0x7c>
 2004b48:	3009883a 	mov	r4,r6
 2004b4c:	01408074 	movhi	r5,513
 2004b50:	296e9504 	addi	r5,r5,-17836
 2004b54:	2006ff00 	call	2006ff0 <strcmp>
 2004b58:	10000a1e 	bne	r2,zero,2004b84 <_setlocale_r+0x60>
 2004b5c:	8c800c15 	stw	r18,48(r17)
 2004b60:	8c000d15 	stw	r16,52(r17)
 2004b64:	00808074 	movhi	r2,513
 2004b68:	10ae9504 	addi	r2,r2,-17836
 2004b6c:	dfc00317 	ldw	ra,12(sp)
 2004b70:	dc800217 	ldw	r18,8(sp)
 2004b74:	dc400117 	ldw	r17,4(sp)
 2004b78:	dc000017 	ldw	r16,0(sp)
 2004b7c:	dec00404 	addi	sp,sp,16
 2004b80:	f800283a 	ret
 2004b84:	8009883a 	mov	r4,r16
 2004b88:	01408074 	movhi	r5,513
 2004b8c:	296e8004 	addi	r5,r5,-17920
 2004b90:	2006ff00 	call	2006ff0 <strcmp>
 2004b94:	103ff126 	beq	r2,zero,2004b5c <_setlocale_r+0x38>
 2004b98:	0005883a 	mov	r2,zero
 2004b9c:	003ff306 	br	2004b6c <_setlocale_r+0x48>
 2004ba0:	00808074 	movhi	r2,513
 2004ba4:	10ae9504 	addi	r2,r2,-17836
 2004ba8:	dfc00317 	ldw	ra,12(sp)
 2004bac:	dc800217 	ldw	r18,8(sp)
 2004bb0:	dc400117 	ldw	r17,4(sp)
 2004bb4:	dc000017 	ldw	r16,0(sp)
 2004bb8:	dec00404 	addi	sp,sp,16
 2004bbc:	f800283a 	ret

02004bc0 <__locale_charset>:
 2004bc0:	00808074 	movhi	r2,513
 2004bc4:	10ae9604 	addi	r2,r2,-17832
 2004bc8:	f800283a 	ret

02004bcc <_localeconv_r>:
 2004bcc:	00808074 	movhi	r2,513
 2004bd0:	10ae9a04 	addi	r2,r2,-17816
 2004bd4:	f800283a 	ret

02004bd8 <setlocale>:
 2004bd8:	00c08074 	movhi	r3,513
 2004bdc:	18f5c804 	addi	r3,r3,-10464
 2004be0:	2005883a 	mov	r2,r4
 2004be4:	19000017 	ldw	r4,0(r3)
 2004be8:	280d883a 	mov	r6,r5
 2004bec:	100b883a 	mov	r5,r2
 2004bf0:	2004b241 	jmpi	2004b24 <_setlocale_r>

02004bf4 <localeconv>:
 2004bf4:	00808074 	movhi	r2,513
 2004bf8:	10ae9a04 	addi	r2,r2,-17816
 2004bfc:	f800283a 	ret

02004c00 <__smakebuf_r>:
 2004c00:	2880030b 	ldhu	r2,12(r5)
 2004c04:	deffed04 	addi	sp,sp,-76
 2004c08:	dc401015 	stw	r17,64(sp)
 2004c0c:	10c0008c 	andi	r3,r2,2
 2004c10:	18ffffcc 	andi	r3,r3,65535
 2004c14:	18e0001c 	xori	r3,r3,32768
 2004c18:	dc000f15 	stw	r16,60(sp)
 2004c1c:	dfc01215 	stw	ra,72(sp)
 2004c20:	dc801115 	stw	r18,68(sp)
 2004c24:	18e00004 	addi	r3,r3,-32768
 2004c28:	2821883a 	mov	r16,r5
 2004c2c:	2023883a 	mov	r17,r4
 2004c30:	1800381e 	bne	r3,zero,2004d14 <__smakebuf_r+0x114>
 2004c34:	2940038f 	ldh	r5,14(r5)
 2004c38:	28002d16 	blt	r5,zero,2004cf0 <__smakebuf_r+0xf0>
 2004c3c:	d80d883a 	mov	r6,sp
 2004c40:	20073fc0 	call	20073fc <_fstat_r>
 2004c44:	10002916 	blt	r2,zero,2004cec <__smakebuf_r+0xec>
 2004c48:	d8800117 	ldw	r2,4(sp)
 2004c4c:	00e00014 	movui	r3,32768
 2004c50:	10bc000c 	andi	r2,r2,61440
 2004c54:	10c03c26 	beq	r2,r3,2004d48 <__smakebuf_r+0x148>
 2004c58:	80c0030b 	ldhu	r3,12(r16)
 2004c5c:	18c20014 	ori	r3,r3,2048
 2004c60:	80c0030d 	sth	r3,12(r16)
 2004c64:	00c80004 	movi	r3,8192
 2004c68:	10c00c1e 	bne	r2,r3,2004c9c <__smakebuf_r+0x9c>
 2004c6c:	8140038f 	ldh	r5,14(r16)
 2004c70:	8809883a 	mov	r4,r17
 2004c74:	20074640 	call	2007464 <_isatty_r>
 2004c78:	10000826 	beq	r2,zero,2004c9c <__smakebuf_r+0x9c>
 2004c7c:	80c0030b 	ldhu	r3,12(r16)
 2004c80:	808010c4 	addi	r2,r16,67
 2004c84:	80800015 	stw	r2,0(r16)
 2004c88:	18c00054 	ori	r3,r3,1
 2004c8c:	80800415 	stw	r2,16(r16)
 2004c90:	00800044 	movi	r2,1
 2004c94:	80c0030d 	sth	r3,12(r16)
 2004c98:	80800515 	stw	r2,20(r16)
 2004c9c:	04810004 	movi	r18,1024
 2004ca0:	8809883a 	mov	r4,r17
 2004ca4:	900b883a 	mov	r5,r18
 2004ca8:	2004da80 	call	2004da8 <_malloc_r>
 2004cac:	10003026 	beq	r2,zero,2004d70 <__smakebuf_r+0x170>
 2004cb0:	80c0030b 	ldhu	r3,12(r16)
 2004cb4:	01008034 	movhi	r4,512
 2004cb8:	210f8304 	addi	r4,r4,15884
 2004cbc:	89000f15 	stw	r4,60(r17)
 2004cc0:	18c02014 	ori	r3,r3,128
 2004cc4:	80c0030d 	sth	r3,12(r16)
 2004cc8:	80800015 	stw	r2,0(r16)
 2004ccc:	80800415 	stw	r2,16(r16)
 2004cd0:	84800515 	stw	r18,20(r16)
 2004cd4:	dfc01217 	ldw	ra,72(sp)
 2004cd8:	dc801117 	ldw	r18,68(sp)
 2004cdc:	dc401017 	ldw	r17,64(sp)
 2004ce0:	dc000f17 	ldw	r16,60(sp)
 2004ce4:	dec01304 	addi	sp,sp,76
 2004ce8:	f800283a 	ret
 2004cec:	8080030b 	ldhu	r2,12(r16)
 2004cf0:	10c0200c 	andi	r3,r2,128
 2004cf4:	18ffffcc 	andi	r3,r3,65535
 2004cf8:	18e0001c 	xori	r3,r3,32768
 2004cfc:	18e00004 	addi	r3,r3,-32768
 2004d00:	18000f1e 	bne	r3,zero,2004d40 <__smakebuf_r+0x140>
 2004d04:	04810004 	movi	r18,1024
 2004d08:	10820014 	ori	r2,r2,2048
 2004d0c:	8080030d 	sth	r2,12(r16)
 2004d10:	003fe306 	br	2004ca0 <__smakebuf_r+0xa0>
 2004d14:	288010c4 	addi	r2,r5,67
 2004d18:	28800015 	stw	r2,0(r5)
 2004d1c:	28800415 	stw	r2,16(r5)
 2004d20:	00800044 	movi	r2,1
 2004d24:	28800515 	stw	r2,20(r5)
 2004d28:	dfc01217 	ldw	ra,72(sp)
 2004d2c:	dc801117 	ldw	r18,68(sp)
 2004d30:	dc401017 	ldw	r17,64(sp)
 2004d34:	dc000f17 	ldw	r16,60(sp)
 2004d38:	dec01304 	addi	sp,sp,76
 2004d3c:	f800283a 	ret
 2004d40:	04801004 	movi	r18,64
 2004d44:	003ff006 	br	2004d08 <__smakebuf_r+0x108>
 2004d48:	81000a17 	ldw	r4,40(r16)
 2004d4c:	00c08034 	movhi	r3,512
 2004d50:	18dbe304 	addi	r3,r3,28556
 2004d54:	20ffc01e 	bne	r4,r3,2004c58 <__smakebuf_r+0x58>
 2004d58:	8080030b 	ldhu	r2,12(r16)
 2004d5c:	00c10004 	movi	r3,1024
 2004d60:	80c01315 	stw	r3,76(r16)
 2004d64:	10c4b03a 	or	r2,r2,r3
 2004d68:	8080030d 	sth	r2,12(r16)
 2004d6c:	003fcb06 	br	2004c9c <__smakebuf_r+0x9c>
 2004d70:	8080030b 	ldhu	r2,12(r16)
 2004d74:	10c0800c 	andi	r3,r2,512
 2004d78:	18ffffcc 	andi	r3,r3,65535
 2004d7c:	18e0001c 	xori	r3,r3,32768
 2004d80:	18e00004 	addi	r3,r3,-32768
 2004d84:	183fd31e 	bne	r3,zero,2004cd4 <__smakebuf_r+0xd4>
 2004d88:	10800094 	ori	r2,r2,2
 2004d8c:	80c010c4 	addi	r3,r16,67
 2004d90:	8080030d 	sth	r2,12(r16)
 2004d94:	00800044 	movi	r2,1
 2004d98:	80c00015 	stw	r3,0(r16)
 2004d9c:	80c00415 	stw	r3,16(r16)
 2004da0:	80800515 	stw	r2,20(r16)
 2004da4:	003fcb06 	br	2004cd4 <__smakebuf_r+0xd4>

02004da8 <_malloc_r>:
 2004da8:	defff604 	addi	sp,sp,-40
 2004dac:	dc800215 	stw	r18,8(sp)
 2004db0:	dfc00915 	stw	ra,36(sp)
 2004db4:	df000815 	stw	fp,32(sp)
 2004db8:	ddc00715 	stw	r23,28(sp)
 2004dbc:	dd800615 	stw	r22,24(sp)
 2004dc0:	dd400515 	stw	r21,20(sp)
 2004dc4:	dd000415 	stw	r20,16(sp)
 2004dc8:	dcc00315 	stw	r19,12(sp)
 2004dcc:	dc400115 	stw	r17,4(sp)
 2004dd0:	dc000015 	stw	r16,0(sp)
 2004dd4:	288002c4 	addi	r2,r5,11
 2004dd8:	00c00584 	movi	r3,22
 2004ddc:	2025883a 	mov	r18,r4
 2004de0:	18802b2e 	bgeu	r3,r2,2004e90 <_malloc_r+0xe8>
 2004de4:	047ffe04 	movi	r17,-8
 2004de8:	1462703a 	and	r17,r2,r17
 2004dec:	88002a16 	blt	r17,zero,2004e98 <_malloc_r+0xf0>
 2004df0:	89402936 	bltu	r17,r5,2004e98 <_malloc_r+0xf0>
 2004df4:	9009883a 	mov	r4,r18
 2004df8:	20099b80 	call	20099b8 <__malloc_lock>
 2004dfc:	00807dc4 	movi	r2,503
 2004e00:	14402936 	bltu	r2,r17,2004ea8 <_malloc_r+0x100>
 2004e04:	8808d0fa 	srli	r4,r17,3
 2004e08:	04c08074 	movhi	r19,513
 2004e0c:	9cf04204 	addi	r19,r19,-16120
 2004e10:	2105883a 	add	r2,r4,r4
 2004e14:	1085883a 	add	r2,r2,r2
 2004e18:	1085883a 	add	r2,r2,r2
 2004e1c:	9885883a 	add	r2,r19,r2
 2004e20:	14000317 	ldw	r16,12(r2)
 2004e24:	80815526 	beq	r16,r2,200537c <_malloc_r+0x5d4>
 2004e28:	81000117 	ldw	r4,4(r16)
 2004e2c:	00bfff04 	movi	r2,-4
 2004e30:	80c00317 	ldw	r3,12(r16)
 2004e34:	2084703a 	and	r2,r4,r2
 2004e38:	8085883a 	add	r2,r16,r2
 2004e3c:	11800117 	ldw	r6,4(r2)
 2004e40:	81400217 	ldw	r5,8(r16)
 2004e44:	9009883a 	mov	r4,r18
 2004e48:	31800054 	ori	r6,r6,1
 2004e4c:	11800115 	stw	r6,4(r2)
 2004e50:	28c00315 	stw	r3,12(r5)
 2004e54:	19400215 	stw	r5,8(r3)
 2004e58:	20099d80 	call	20099d8 <__malloc_unlock>
 2004e5c:	80800204 	addi	r2,r16,8
 2004e60:	dfc00917 	ldw	ra,36(sp)
 2004e64:	df000817 	ldw	fp,32(sp)
 2004e68:	ddc00717 	ldw	r23,28(sp)
 2004e6c:	dd800617 	ldw	r22,24(sp)
 2004e70:	dd400517 	ldw	r21,20(sp)
 2004e74:	dd000417 	ldw	r20,16(sp)
 2004e78:	dcc00317 	ldw	r19,12(sp)
 2004e7c:	dc800217 	ldw	r18,8(sp)
 2004e80:	dc400117 	ldw	r17,4(sp)
 2004e84:	dc000017 	ldw	r16,0(sp)
 2004e88:	dec00a04 	addi	sp,sp,40
 2004e8c:	f800283a 	ret
 2004e90:	04400404 	movi	r17,16
 2004e94:	897fd72e 	bgeu	r17,r5,2004df4 <_malloc_r+0x4c>
 2004e98:	00800304 	movi	r2,12
 2004e9c:	90800015 	stw	r2,0(r18)
 2004ea0:	0005883a 	mov	r2,zero
 2004ea4:	003fee06 	br	2004e60 <_malloc_r+0xb8>
 2004ea8:	8808d27a 	srli	r4,r17,9
 2004eac:	20007126 	beq	r4,zero,2005074 <_malloc_r+0x2cc>
 2004eb0:	00800104 	movi	r2,4
 2004eb4:	1100eb36 	bltu	r2,r4,2005264 <_malloc_r+0x4bc>
 2004eb8:	8808d1ba 	srli	r4,r17,6
 2004ebc:	21000e04 	addi	r4,r4,56
 2004ec0:	210b883a 	add	r5,r4,r4
 2004ec4:	294b883a 	add	r5,r5,r5
 2004ec8:	294b883a 	add	r5,r5,r5
 2004ecc:	04c08074 	movhi	r19,513
 2004ed0:	9cf04204 	addi	r19,r19,-16120
 2004ed4:	994b883a 	add	r5,r19,r5
 2004ed8:	2c000317 	ldw	r16,12(r5)
 2004edc:	2c000e26 	beq	r5,r16,2004f18 <_malloc_r+0x170>
 2004ee0:	80c00117 	ldw	r3,4(r16)
 2004ee4:	01ffff04 	movi	r7,-4
 2004ee8:	018003c4 	movi	r6,15
 2004eec:	19c6703a 	and	r3,r3,r7
 2004ef0:	1c45c83a 	sub	r2,r3,r17
 2004ef4:	30800716 	blt	r6,r2,2004f14 <_malloc_r+0x16c>
 2004ef8:	1000610e 	bge	r2,zero,2005080 <_malloc_r+0x2d8>
 2004efc:	84000317 	ldw	r16,12(r16)
 2004f00:	2c000526 	beq	r5,r16,2004f18 <_malloc_r+0x170>
 2004f04:	80c00117 	ldw	r3,4(r16)
 2004f08:	19c6703a 	and	r3,r3,r7
 2004f0c:	1c45c83a 	sub	r2,r3,r17
 2004f10:	30bff90e 	bge	r6,r2,2004ef8 <_malloc_r+0x150>
 2004f14:	213fffc4 	addi	r4,r4,-1
 2004f18:	21000044 	addi	r4,r4,1
 2004f1c:	9c000417 	ldw	r16,16(r19)
 2004f20:	00c08074 	movhi	r3,513
 2004f24:	18f04204 	addi	r3,r3,-16120
 2004f28:	1a400204 	addi	r9,r3,8
 2004f2c:	8240ff26 	beq	r16,r9,200532c <_malloc_r+0x584>
 2004f30:	81400117 	ldw	r5,4(r16)
 2004f34:	00bfff04 	movi	r2,-4
 2004f38:	018003c4 	movi	r6,15
 2004f3c:	2884703a 	and	r2,r5,r2
 2004f40:	144bc83a 	sub	r5,r2,r17
 2004f44:	3140ea16 	blt	r6,r5,20052f0 <_malloc_r+0x548>
 2004f48:	1a400515 	stw	r9,20(r3)
 2004f4c:	1a400415 	stw	r9,16(r3)
 2004f50:	2800570e 	bge	r5,zero,20050b0 <_malloc_r+0x308>
 2004f54:	01407fc4 	movi	r5,511
 2004f58:	2880ca36 	bltu	r5,r2,2005284 <_malloc_r+0x4dc>
 2004f5c:	1004d0fa 	srli	r2,r2,3
 2004f60:	02000044 	movi	r8,1
 2004f64:	19c00117 	ldw	r7,4(r3)
 2004f68:	108b883a 	add	r5,r2,r2
 2004f6c:	294b883a 	add	r5,r5,r5
 2004f70:	1005d0ba 	srai	r2,r2,2
 2004f74:	294b883a 	add	r5,r5,r5
 2004f78:	28cb883a 	add	r5,r5,r3
 2004f7c:	29800217 	ldw	r6,8(r5)
 2004f80:	4084983a 	sll	r2,r8,r2
 2004f84:	81400315 	stw	r5,12(r16)
 2004f88:	81800215 	stw	r6,8(r16)
 2004f8c:	11c4b03a 	or	r2,r2,r7
 2004f90:	18800115 	stw	r2,4(r3)
 2004f94:	2c000215 	stw	r16,8(r5)
 2004f98:	34000315 	stw	r16,12(r6)
 2004f9c:	200bd0ba 	srai	r5,r4,2
 2004fa0:	00c00044 	movi	r3,1
 2004fa4:	194a983a 	sll	r5,r3,r5
 2004fa8:	11404936 	bltu	r2,r5,20050d0 <_malloc_r+0x328>
 2004fac:	1146703a 	and	r3,r2,r5
 2004fb0:	18000a1e 	bne	r3,zero,2004fdc <_malloc_r+0x234>
 2004fb4:	00ffff04 	movi	r3,-4
 2004fb8:	294b883a 	add	r5,r5,r5
 2004fbc:	20c8703a 	and	r4,r4,r3
 2004fc0:	1146703a 	and	r3,r2,r5
 2004fc4:	21000104 	addi	r4,r4,4
 2004fc8:	1800041e 	bne	r3,zero,2004fdc <_malloc_r+0x234>
 2004fcc:	294b883a 	add	r5,r5,r5
 2004fd0:	1146703a 	and	r3,r2,r5
 2004fd4:	21000104 	addi	r4,r4,4
 2004fd8:	183ffc26 	beq	r3,zero,2004fcc <_malloc_r+0x224>
 2004fdc:	023fff04 	movi	r8,-4
 2004fe0:	01c003c4 	movi	r7,15
 2004fe4:	2105883a 	add	r2,r4,r4
 2004fe8:	1085883a 	add	r2,r2,r2
 2004fec:	1085883a 	add	r2,r2,r2
 2004ff0:	9899883a 	add	r12,r19,r2
 2004ff4:	62800304 	addi	r10,r12,12
 2004ff8:	2017883a 	mov	r11,r4
 2004ffc:	54000017 	ldw	r16,0(r10)
 2005000:	51bffd04 	addi	r6,r10,-12
 2005004:	8180041e 	bne	r16,r6,2005018 <_malloc_r+0x270>
 2005008:	0000ca06 	br	2005334 <_malloc_r+0x58c>
 200500c:	10001c0e 	bge	r2,zero,2005080 <_malloc_r+0x2d8>
 2005010:	84000317 	ldw	r16,12(r16)
 2005014:	8180c726 	beq	r16,r6,2005334 <_malloc_r+0x58c>
 2005018:	80c00117 	ldw	r3,4(r16)
 200501c:	1a06703a 	and	r3,r3,r8
 2005020:	1c45c83a 	sub	r2,r3,r17
 2005024:	38bff90e 	bge	r7,r2,200500c <_malloc_r+0x264>
 2005028:	81000317 	ldw	r4,12(r16)
 200502c:	81400217 	ldw	r5,8(r16)
 2005030:	8447883a 	add	r3,r16,r17
 2005034:	8c400054 	ori	r17,r17,1
 2005038:	29000315 	stw	r4,12(r5)
 200503c:	21400215 	stw	r5,8(r4)
 2005040:	84400115 	stw	r17,4(r16)
 2005044:	1889883a 	add	r4,r3,r2
 2005048:	11400054 	ori	r5,r2,1
 200504c:	98c00515 	stw	r3,20(r19)
 2005050:	98c00415 	stw	r3,16(r19)
 2005054:	20800015 	stw	r2,0(r4)
 2005058:	1a400315 	stw	r9,12(r3)
 200505c:	1a400215 	stw	r9,8(r3)
 2005060:	19400115 	stw	r5,4(r3)
 2005064:	9009883a 	mov	r4,r18
 2005068:	20099d80 	call	20099d8 <__malloc_unlock>
 200506c:	80800204 	addi	r2,r16,8
 2005070:	003f7b06 	br	2004e60 <_malloc_r+0xb8>
 2005074:	8808d0fa 	srli	r4,r17,3
 2005078:	210b883a 	add	r5,r4,r4
 200507c:	003f9106 	br	2004ec4 <_malloc_r+0x11c>
 2005080:	80c7883a 	add	r3,r16,r3
 2005084:	19400117 	ldw	r5,4(r3)
 2005088:	80800317 	ldw	r2,12(r16)
 200508c:	81000217 	ldw	r4,8(r16)
 2005090:	29400054 	ori	r5,r5,1
 2005094:	19400115 	stw	r5,4(r3)
 2005098:	20800315 	stw	r2,12(r4)
 200509c:	11000215 	stw	r4,8(r2)
 20050a0:	9009883a 	mov	r4,r18
 20050a4:	20099d80 	call	20099d8 <__malloc_unlock>
 20050a8:	80800204 	addi	r2,r16,8
 20050ac:	003f6c06 	br	2004e60 <_malloc_r+0xb8>
 20050b0:	8085883a 	add	r2,r16,r2
 20050b4:	10c00117 	ldw	r3,4(r2)
 20050b8:	9009883a 	mov	r4,r18
 20050bc:	18c00054 	ori	r3,r3,1
 20050c0:	10c00115 	stw	r3,4(r2)
 20050c4:	20099d80 	call	20099d8 <__malloc_unlock>
 20050c8:	80800204 	addi	r2,r16,8
 20050cc:	003f6406 	br	2004e60 <_malloc_r+0xb8>
 20050d0:	9c000217 	ldw	r16,8(r19)
 20050d4:	00bfff04 	movi	r2,-4
 20050d8:	85400117 	ldw	r21,4(r16)
 20050dc:	a8aa703a 	and	r21,r21,r2
 20050e0:	ac400336 	bltu	r21,r17,20050f0 <_malloc_r+0x348>
 20050e4:	ac45c83a 	sub	r2,r21,r17
 20050e8:	00c003c4 	movi	r3,15
 20050ec:	18805316 	blt	r3,r2,200523c <_malloc_r+0x494>
 20050f0:	d5e01517 	ldw	r23,-32684(gp)
 20050f4:	d0e00417 	ldw	r3,-32752(gp)
 20050f8:	00bfffc4 	movi	r2,-1
 20050fc:	8579883a 	add	fp,r16,r21
 2005100:	8def883a 	add	r23,r17,r23
 2005104:	1880d226 	beq	r3,r2,2005450 <_malloc_r+0x6a8>
 2005108:	bdc403c4 	addi	r23,r23,4111
 200510c:	00bc0004 	movi	r2,-4096
 2005110:	b8ae703a 	and	r23,r23,r2
 2005114:	9009883a 	mov	r4,r18
 2005118:	b80b883a 	mov	r5,r23
 200511c:	2006e4c0 	call	2006e4c <_sbrk_r>
 2005120:	1029883a 	mov	r20,r2
 2005124:	00bfffc4 	movi	r2,-1
 2005128:	a080d126 	beq	r20,r2,2005470 <_malloc_r+0x6c8>
 200512c:	a7009f36 	bltu	r20,fp,20053ac <_malloc_r+0x604>
 2005130:	05808074 	movhi	r22,513
 2005134:	b5b5e304 	addi	r22,r22,-10356
 2005138:	b0800017 	ldw	r2,0(r22)
 200513c:	b885883a 	add	r2,r23,r2
 2005140:	b0800015 	stw	r2,0(r22)
 2005144:	e500cf26 	beq	fp,r20,2005484 <_malloc_r+0x6dc>
 2005148:	d1200417 	ldw	r4,-32752(gp)
 200514c:	00ffffc4 	movi	r3,-1
 2005150:	20c0e026 	beq	r4,r3,20054d4 <_malloc_r+0x72c>
 2005154:	a739c83a 	sub	fp,r20,fp
 2005158:	1705883a 	add	r2,r2,fp
 200515c:	b0800015 	stw	r2,0(r22)
 2005160:	a08001cc 	andi	r2,r20,7
 2005164:	1000a526 	beq	r2,zero,20053fc <_malloc_r+0x654>
 2005168:	a0a9c83a 	sub	r20,r20,r2
 200516c:	00c40204 	movi	r3,4104
 2005170:	a5000204 	addi	r20,r20,8
 2005174:	1885c83a 	sub	r2,r3,r2
 2005178:	a5c7883a 	add	r3,r20,r23
 200517c:	18c3ffcc 	andi	r3,r3,4095
 2005180:	10efc83a 	sub	r23,r2,r3
 2005184:	9009883a 	mov	r4,r18
 2005188:	b80b883a 	mov	r5,r23
 200518c:	2006e4c0 	call	2006e4c <_sbrk_r>
 2005190:	00ffffc4 	movi	r3,-1
 2005194:	10c0cc26 	beq	r2,r3,20054c8 <_malloc_r+0x720>
 2005198:	1505c83a 	sub	r2,r2,r20
 200519c:	b887883a 	add	r3,r23,r2
 20051a0:	18c00054 	ori	r3,r3,1
 20051a4:	b0800017 	ldw	r2,0(r22)
 20051a8:	9d000215 	stw	r20,8(r19)
 20051ac:	a0c00115 	stw	r3,4(r20)
 20051b0:	b885883a 	add	r2,r23,r2
 20051b4:	b0800015 	stw	r2,0(r22)
 20051b8:	84c00e26 	beq	r16,r19,20051f4 <_malloc_r+0x44c>
 20051bc:	00c003c4 	movi	r3,15
 20051c0:	1d40902e 	bgeu	r3,r21,2005404 <_malloc_r+0x65c>
 20051c4:	ad7ffd04 	addi	r21,r21,-12
 20051c8:	013ffe04 	movi	r4,-8
 20051cc:	a908703a 	and	r4,r21,r4
 20051d0:	810b883a 	add	r5,r16,r4
 20051d4:	01800144 	movi	r6,5
 20051d8:	29800115 	stw	r6,4(r5)
 20051dc:	29800215 	stw	r6,8(r5)
 20051e0:	81400117 	ldw	r5,4(r16)
 20051e4:	2940004c 	andi	r5,r5,1
 20051e8:	214ab03a 	or	r5,r4,r5
 20051ec:	81400115 	stw	r5,4(r16)
 20051f0:	1900ae36 	bltu	r3,r4,20054ac <_malloc_r+0x704>
 20051f4:	d0e01417 	ldw	r3,-32688(gp)
 20051f8:	1880012e 	bgeu	r3,r2,2005200 <_malloc_r+0x458>
 20051fc:	d0a01415 	stw	r2,-32688(gp)
 2005200:	d0e01317 	ldw	r3,-32692(gp)
 2005204:	9c000217 	ldw	r16,8(r19)
 2005208:	1880012e 	bgeu	r3,r2,2005210 <_malloc_r+0x468>
 200520c:	d0a01315 	stw	r2,-32692(gp)
 2005210:	80c00117 	ldw	r3,4(r16)
 2005214:	00bfff04 	movi	r2,-4
 2005218:	1886703a 	and	r3,r3,r2
 200521c:	1c45c83a 	sub	r2,r3,r17
 2005220:	1c400236 	bltu	r3,r17,200522c <_malloc_r+0x484>
 2005224:	00c003c4 	movi	r3,15
 2005228:	18800416 	blt	r3,r2,200523c <_malloc_r+0x494>
 200522c:	9009883a 	mov	r4,r18
 2005230:	20099d80 	call	20099d8 <__malloc_unlock>
 2005234:	0005883a 	mov	r2,zero
 2005238:	003f0906 	br	2004e60 <_malloc_r+0xb8>
 200523c:	88c00054 	ori	r3,r17,1
 2005240:	10800054 	ori	r2,r2,1
 2005244:	80c00115 	stw	r3,4(r16)
 2005248:	8463883a 	add	r17,r16,r17
 200524c:	88800115 	stw	r2,4(r17)
 2005250:	9009883a 	mov	r4,r18
 2005254:	9c400215 	stw	r17,8(r19)
 2005258:	20099d80 	call	20099d8 <__malloc_unlock>
 200525c:	80800204 	addi	r2,r16,8
 2005260:	003eff06 	br	2004e60 <_malloc_r+0xb8>
 2005264:	00800504 	movi	r2,20
 2005268:	1100492e 	bgeu	r2,r4,2005390 <_malloc_r+0x5e8>
 200526c:	00801504 	movi	r2,84
 2005270:	11005c36 	bltu	r2,r4,20053e4 <_malloc_r+0x63c>
 2005274:	8808d33a 	srli	r4,r17,12
 2005278:	21001b84 	addi	r4,r4,110
 200527c:	210b883a 	add	r5,r4,r4
 2005280:	003f1006 	br	2004ec4 <_malloc_r+0x11c>
 2005284:	1006d27a 	srli	r3,r2,9
 2005288:	01400104 	movi	r5,4
 200528c:	28c0432e 	bgeu	r5,r3,200539c <_malloc_r+0x5f4>
 2005290:	01400504 	movi	r5,20
 2005294:	28c07036 	bltu	r5,r3,2005458 <_malloc_r+0x6b0>
 2005298:	194016c4 	addi	r5,r3,91
 200529c:	294d883a 	add	r6,r5,r5
 20052a0:	318d883a 	add	r6,r6,r6
 20052a4:	318d883a 	add	r6,r6,r6
 20052a8:	998d883a 	add	r6,r19,r6
 20052ac:	30c00217 	ldw	r3,8(r6)
 20052b0:	01c08074 	movhi	r7,513
 20052b4:	39f04204 	addi	r7,r7,-16120
 20052b8:	19805726 	beq	r3,r6,2005418 <_malloc_r+0x670>
 20052bc:	01ffff04 	movi	r7,-4
 20052c0:	19400117 	ldw	r5,4(r3)
 20052c4:	29ca703a 	and	r5,r5,r7
 20052c8:	1140022e 	bgeu	r2,r5,20052d4 <_malloc_r+0x52c>
 20052cc:	18c00217 	ldw	r3,8(r3)
 20052d0:	30fffb1e 	bne	r6,r3,20052c0 <_malloc_r+0x518>
 20052d4:	19400317 	ldw	r5,12(r3)
 20052d8:	98800117 	ldw	r2,4(r19)
 20052dc:	81400315 	stw	r5,12(r16)
 20052e0:	80c00215 	stw	r3,8(r16)
 20052e4:	2c000215 	stw	r16,8(r5)
 20052e8:	1c000315 	stw	r16,12(r3)
 20052ec:	003f2b06 	br	2004f9c <_malloc_r+0x1f4>
 20052f0:	8445883a 	add	r2,r16,r17
 20052f4:	8c400054 	ori	r17,r17,1
 20052f8:	18800515 	stw	r2,20(r3)
 20052fc:	18800415 	stw	r2,16(r3)
 2005300:	29000054 	ori	r4,r5,1
 2005304:	1147883a 	add	r3,r2,r5
 2005308:	84400115 	stw	r17,4(r16)
 200530c:	11000115 	stw	r4,4(r2)
 2005310:	12400315 	stw	r9,12(r2)
 2005314:	12400215 	stw	r9,8(r2)
 2005318:	19400015 	stw	r5,0(r3)
 200531c:	9009883a 	mov	r4,r18
 2005320:	20099d80 	call	20099d8 <__malloc_unlock>
 2005324:	80800204 	addi	r2,r16,8
 2005328:	003ecd06 	br	2004e60 <_malloc_r+0xb8>
 200532c:	18800117 	ldw	r2,4(r3)
 2005330:	003f1a06 	br	2004f9c <_malloc_r+0x1f4>
 2005334:	5ac00044 	addi	r11,r11,1
 2005338:	588000cc 	andi	r2,r11,3
 200533c:	52800204 	addi	r10,r10,8
 2005340:	103f2e1e 	bne	r2,zero,2004ffc <_malloc_r+0x254>
 2005344:	20c000cc 	andi	r3,r4,3
 2005348:	60bffe04 	addi	r2,r12,-8
 200534c:	18006f26 	beq	r3,zero,200550c <_malloc_r+0x764>
 2005350:	63000017 	ldw	r12,0(r12)
 2005354:	213fffc4 	addi	r4,r4,-1
 2005358:	60bffa26 	beq	r12,r2,2005344 <_malloc_r+0x59c>
 200535c:	98800117 	ldw	r2,4(r19)
 2005360:	294b883a 	add	r5,r5,r5
 2005364:	117f5a36 	bltu	r2,r5,20050d0 <_malloc_r+0x328>
 2005368:	283f5926 	beq	r5,zero,20050d0 <_malloc_r+0x328>
 200536c:	1146703a 	and	r3,r2,r5
 2005370:	18001626 	beq	r3,zero,20053cc <_malloc_r+0x624>
 2005374:	5809883a 	mov	r4,r11
 2005378:	003f1a06 	br	2004fe4 <_malloc_r+0x23c>
 200537c:	80800204 	addi	r2,r16,8
 2005380:	84000517 	ldw	r16,20(r16)
 2005384:	143ea81e 	bne	r2,r16,2004e28 <_malloc_r+0x80>
 2005388:	21000084 	addi	r4,r4,2
 200538c:	003ee306 	br	2004f1c <_malloc_r+0x174>
 2005390:	210016c4 	addi	r4,r4,91
 2005394:	210b883a 	add	r5,r4,r4
 2005398:	003eca06 	br	2004ec4 <_malloc_r+0x11c>
 200539c:	100ad1ba 	srli	r5,r2,6
 20053a0:	29400e04 	addi	r5,r5,56
 20053a4:	294d883a 	add	r6,r5,r5
 20053a8:	003fbd06 	br	20052a0 <_malloc_r+0x4f8>
 20053ac:	84ff6026 	beq	r16,r19,2005130 <_malloc_r+0x388>
 20053b0:	00808074 	movhi	r2,513
 20053b4:	10b04204 	addi	r2,r2,-16120
 20053b8:	14000217 	ldw	r16,8(r2)
 20053bc:	00bfff04 	movi	r2,-4
 20053c0:	80c00117 	ldw	r3,4(r16)
 20053c4:	1886703a 	and	r3,r3,r2
 20053c8:	003f9406 	br	200521c <_malloc_r+0x474>
 20053cc:	294b883a 	add	r5,r5,r5
 20053d0:	1146703a 	and	r3,r2,r5
 20053d4:	5ac00104 	addi	r11,r11,4
 20053d8:	183ffc26 	beq	r3,zero,20053cc <_malloc_r+0x624>
 20053dc:	5809883a 	mov	r4,r11
 20053e0:	003f0006 	br	2004fe4 <_malloc_r+0x23c>
 20053e4:	00805504 	movi	r2,340
 20053e8:	11001336 	bltu	r2,r4,2005438 <_malloc_r+0x690>
 20053ec:	8808d3fa 	srli	r4,r17,15
 20053f0:	21001dc4 	addi	r4,r4,119
 20053f4:	210b883a 	add	r5,r4,r4
 20053f8:	003eb206 	br	2004ec4 <_malloc_r+0x11c>
 20053fc:	00840004 	movi	r2,4096
 2005400:	003f5d06 	br	2005178 <_malloc_r+0x3d0>
 2005404:	00800044 	movi	r2,1
 2005408:	a0800115 	stw	r2,4(r20)
 200540c:	a021883a 	mov	r16,r20
 2005410:	0007883a 	mov	r3,zero
 2005414:	003f8106 	br	200521c <_malloc_r+0x474>
 2005418:	280bd0ba 	srai	r5,r5,2
 200541c:	01800044 	movi	r6,1
 2005420:	38800117 	ldw	r2,4(r7)
 2005424:	314c983a 	sll	r6,r6,r5
 2005428:	180b883a 	mov	r5,r3
 200542c:	3084b03a 	or	r2,r6,r2
 2005430:	38800115 	stw	r2,4(r7)
 2005434:	003fa906 	br	20052dc <_malloc_r+0x534>
 2005438:	00815504 	movi	r2,1364
 200543c:	11001836 	bltu	r2,r4,20054a0 <_malloc_r+0x6f8>
 2005440:	8808d4ba 	srli	r4,r17,18
 2005444:	21001f04 	addi	r4,r4,124
 2005448:	210b883a 	add	r5,r4,r4
 200544c:	003e9d06 	br	2004ec4 <_malloc_r+0x11c>
 2005450:	bdc00404 	addi	r23,r23,16
 2005454:	003f2f06 	br	2005114 <_malloc_r+0x36c>
 2005458:	01401504 	movi	r5,84
 200545c:	28c01f36 	bltu	r5,r3,20054dc <_malloc_r+0x734>
 2005460:	100ad33a 	srli	r5,r2,12
 2005464:	29401b84 	addi	r5,r5,110
 2005468:	294d883a 	add	r6,r5,r5
 200546c:	003f8c06 	br	20052a0 <_malloc_r+0x4f8>
 2005470:	9c000217 	ldw	r16,8(r19)
 2005474:	00bfff04 	movi	r2,-4
 2005478:	80c00117 	ldw	r3,4(r16)
 200547c:	1886703a 	and	r3,r3,r2
 2005480:	003f6606 	br	200521c <_malloc_r+0x474>
 2005484:	e0c3ffcc 	andi	r3,fp,4095
 2005488:	183f2f1e 	bne	r3,zero,2005148 <_malloc_r+0x3a0>
 200548c:	98c00217 	ldw	r3,8(r19)
 2005490:	bd49883a 	add	r4,r23,r21
 2005494:	21000054 	ori	r4,r4,1
 2005498:	19000115 	stw	r4,4(r3)
 200549c:	003f5506 	br	20051f4 <_malloc_r+0x44c>
 20054a0:	01403f04 	movi	r5,252
 20054a4:	01001f84 	movi	r4,126
 20054a8:	003e8606 	br	2004ec4 <_malloc_r+0x11c>
 20054ac:	9009883a 	mov	r4,r18
 20054b0:	81400204 	addi	r5,r16,8
 20054b4:	20042100 	call	2004210 <_free_r>
 20054b8:	00808074 	movhi	r2,513
 20054bc:	10b5e304 	addi	r2,r2,-10356
 20054c0:	10800017 	ldw	r2,0(r2)
 20054c4:	003f4b06 	br	20051f4 <_malloc_r+0x44c>
 20054c8:	00c00044 	movi	r3,1
 20054cc:	002f883a 	mov	r23,zero
 20054d0:	003f3406 	br	20051a4 <_malloc_r+0x3fc>
 20054d4:	d5200415 	stw	r20,-32752(gp)
 20054d8:	003f2106 	br	2005160 <_malloc_r+0x3b8>
 20054dc:	01405504 	movi	r5,340
 20054e0:	28c00436 	bltu	r5,r3,20054f4 <_malloc_r+0x74c>
 20054e4:	100ad3fa 	srli	r5,r2,15
 20054e8:	29401dc4 	addi	r5,r5,119
 20054ec:	294d883a 	add	r6,r5,r5
 20054f0:	003f6b06 	br	20052a0 <_malloc_r+0x4f8>
 20054f4:	01415504 	movi	r5,1364
 20054f8:	28c00936 	bltu	r5,r3,2005520 <_malloc_r+0x778>
 20054fc:	100ad4ba 	srli	r5,r2,18
 2005500:	29401f04 	addi	r5,r5,124
 2005504:	294d883a 	add	r6,r5,r5
 2005508:	003f6506 	br	20052a0 <_malloc_r+0x4f8>
 200550c:	98800117 	ldw	r2,4(r19)
 2005510:	0146303a 	nor	r3,zero,r5
 2005514:	1884703a 	and	r2,r3,r2
 2005518:	98800115 	stw	r2,4(r19)
 200551c:	003f9006 	br	2005360 <_malloc_r+0x5b8>
 2005520:	01803f04 	movi	r6,252
 2005524:	01401f84 	movi	r5,126
 2005528:	003f5d06 	br	20052a0 <_malloc_r+0x4f8>

0200552c <memchr>:
 200552c:	008000c4 	movi	r2,3
 2005530:	29403fcc 	andi	r5,r5,255
 2005534:	1180282e 	bgeu	r2,r6,20055d8 <memchr+0xac>
 2005538:	2086703a 	and	r3,r4,r2
 200553c:	1800351e 	bne	r3,zero,2005614 <memchr+0xe8>
 2005540:	2816923a 	slli	r11,r5,8
 2005544:	2093883a 	add	r9,r4,r2
 2005548:	22000084 	addi	r8,r4,2
 200554c:	5957883a 	add	r11,r11,r5
 2005550:	5816923a 	slli	r11,r11,8
 2005554:	20c00044 	addi	r3,r4,1
 2005558:	037fbff4 	movhi	r13,65279
 200555c:	6b7fbfc4 	addi	r13,r13,-257
 2005560:	5957883a 	add	r11,r11,r5
 2005564:	5816923a 	slli	r11,r11,8
 2005568:	03202074 	movhi	r12,32897
 200556c:	63202004 	addi	r12,r12,-32640
 2005570:	101d883a 	mov	r14,r2
 2005574:	5957883a 	add	r11,r11,r5
 2005578:	21c00017 	ldw	r7,0(r4)
 200557c:	31bfff04 	addi	r6,r6,-4
 2005580:	1805883a 	mov	r2,r3
 2005584:	3acef03a 	xor	r7,r7,r11
 2005588:	3b55883a 	add	r10,r7,r13
 200558c:	01ce303a 	nor	r7,zero,r7
 2005590:	51ce703a 	and	r7,r10,r7
 2005594:	3b0e703a 	and	r7,r7,r12
 2005598:	38000a26 	beq	r7,zero,20055c4 <memchr+0x98>
 200559c:	21c00003 	ldbu	r7,0(r4)
 20055a0:	39401e26 	beq	r7,r5,200561c <memchr+0xf0>
 20055a4:	19c00003 	ldbu	r7,0(r3)
 20055a8:	39401926 	beq	r7,r5,2005610 <memchr+0xe4>
 20055ac:	41c00003 	ldbu	r7,0(r8)
 20055b0:	4005883a 	mov	r2,r8
 20055b4:	39401626 	beq	r7,r5,2005610 <memchr+0xe4>
 20055b8:	49c00003 	ldbu	r7,0(r9)
 20055bc:	4805883a 	mov	r2,r9
 20055c0:	39401326 	beq	r7,r5,2005610 <memchr+0xe4>
 20055c4:	21000104 	addi	r4,r4,4
 20055c8:	4a400104 	addi	r9,r9,4
 20055cc:	42000104 	addi	r8,r8,4
 20055d0:	18c00104 	addi	r3,r3,4
 20055d4:	71bfe836 	bltu	r14,r6,2005578 <memchr+0x4c>
 20055d8:	2005883a 	mov	r2,r4
 20055dc:	30000a26 	beq	r6,zero,2005608 <memchr+0xdc>
 20055e0:	10c00003 	ldbu	r3,0(r2)
 20055e4:	19400a26 	beq	r3,r5,2005610 <memchr+0xe4>
 20055e8:	10c00044 	addi	r3,r2,1
 20055ec:	118d883a 	add	r6,r2,r6
 20055f0:	00000306 	br	2005600 <memchr+0xd4>
 20055f4:	11000003 	ldbu	r4,0(r2)
 20055f8:	18c00044 	addi	r3,r3,1
 20055fc:	21400426 	beq	r4,r5,2005610 <memchr+0xe4>
 2005600:	1805883a 	mov	r2,r3
 2005604:	19bffb1e 	bne	r3,r6,20055f4 <memchr+0xc8>
 2005608:	0005883a 	mov	r2,zero
 200560c:	f800283a 	ret
 2005610:	f800283a 	ret
 2005614:	2005883a 	mov	r2,r4
 2005618:	003ff106 	br	20055e0 <memchr+0xb4>
 200561c:	2005883a 	mov	r2,r4
 2005620:	f800283a 	ret

02005624 <memcpy>:
 2005624:	00c003c4 	movi	r3,15
 2005628:	2005883a 	mov	r2,r4
 200562c:	3009883a 	mov	r4,r6
 2005630:	1980032e 	bgeu	r3,r6,2005640 <memcpy+0x1c>
 2005634:	2886b03a 	or	r3,r5,r2
 2005638:	18c000cc 	andi	r3,r3,3
 200563c:	18000926 	beq	r3,zero,2005664 <memcpy+0x40>
 2005640:	1007883a 	mov	r3,r2
 2005644:	290f883a 	add	r7,r5,r4
 2005648:	20000526 	beq	r4,zero,2005660 <memcpy+0x3c>
 200564c:	29800003 	ldbu	r6,0(r5)
 2005650:	18c00044 	addi	r3,r3,1
 2005654:	29400044 	addi	r5,r5,1
 2005658:	19bfffc5 	stb	r6,-1(r3)
 200565c:	29fffb1e 	bne	r5,r7,200564c <memcpy+0x28>
 2005660:	f800283a 	ret
 2005664:	327ffc04 	addi	r9,r6,-16
 2005668:	4812d13a 	srli	r9,r9,4
 200566c:	11000404 	addi	r4,r2,16
 2005670:	1007883a 	mov	r3,r2
 2005674:	4810913a 	slli	r8,r9,4
 2005678:	280f883a 	mov	r7,r5
 200567c:	2209883a 	add	r4,r4,r8
 2005680:	3a000017 	ldw	r8,0(r7)
 2005684:	18c00404 	addi	r3,r3,16
 2005688:	39c00404 	addi	r7,r7,16
 200568c:	1a3ffc15 	stw	r8,-16(r3)
 2005690:	3a3ffd17 	ldw	r8,-12(r7)
 2005694:	1a3ffd15 	stw	r8,-12(r3)
 2005698:	3a3ffe17 	ldw	r8,-8(r7)
 200569c:	1a3ffe15 	stw	r8,-8(r3)
 20056a0:	3a3fff17 	ldw	r8,-4(r7)
 20056a4:	1a3fff15 	stw	r8,-4(r3)
 20056a8:	193ff51e 	bne	r3,r4,2005680 <memcpy+0x5c>
 20056ac:	49c00044 	addi	r7,r9,1
 20056b0:	380e913a 	slli	r7,r7,4
 20056b4:	310003cc 	andi	r4,r6,15
 20056b8:	018000c4 	movi	r6,3
 20056bc:	11c7883a 	add	r3,r2,r7
 20056c0:	29cb883a 	add	r5,r5,r7
 20056c4:	313fdf2e 	bgeu	r6,r4,2005644 <memcpy+0x20>
 20056c8:	213fff04 	addi	r4,r4,-4
 20056cc:	2014d0ba 	srli	r10,r4,2
 20056d0:	1a400104 	addi	r9,r3,4
 20056d4:	180d883a 	mov	r6,r3
 20056d8:	528f883a 	add	r7,r10,r10
 20056dc:	39cf883a 	add	r7,r7,r7
 20056e0:	49d3883a 	add	r9,r9,r7
 20056e4:	280f883a 	mov	r7,r5
 20056e8:	3a000017 	ldw	r8,0(r7)
 20056ec:	31800104 	addi	r6,r6,4
 20056f0:	39c00104 	addi	r7,r7,4
 20056f4:	323fff15 	stw	r8,-4(r6)
 20056f8:	327ffb1e 	bne	r6,r9,20056e8 <memcpy+0xc4>
 20056fc:	51800044 	addi	r6,r10,1
 2005700:	52bfff24 	muli	r10,r10,-4
 2005704:	318d883a 	add	r6,r6,r6
 2005708:	318d883a 	add	r6,r6,r6
 200570c:	5109883a 	add	r4,r10,r4
 2005710:	298b883a 	add	r5,r5,r6
 2005714:	1987883a 	add	r3,r3,r6
 2005718:	003fca06 	br	2005644 <memcpy+0x20>

0200571c <memmove>:
 200571c:	2005883a 	mov	r2,r4
 2005720:	300f883a 	mov	r7,r6
 2005724:	29000b2e 	bgeu	r5,r4,2005754 <memmove+0x38>
 2005728:	2987883a 	add	r3,r5,r6
 200572c:	20c0092e 	bgeu	r4,r3,2005754 <memmove+0x38>
 2005730:	218b883a 	add	r5,r4,r6
 2005734:	198fc83a 	sub	r7,r3,r6
 2005738:	30003f26 	beq	r6,zero,2005838 <memmove+0x11c>
 200573c:	18ffffc4 	addi	r3,r3,-1
 2005740:	19000003 	ldbu	r4,0(r3)
 2005744:	297fffc4 	addi	r5,r5,-1
 2005748:	29000005 	stb	r4,0(r5)
 200574c:	19fffb1e 	bne	r3,r7,200573c <memmove+0x20>
 2005750:	f800283a 	ret
 2005754:	00c003c4 	movi	r3,15
 2005758:	1980382e 	bgeu	r3,r6,200583c <memmove+0x120>
 200575c:	2886b03a 	or	r3,r5,r2
 2005760:	18c000cc 	andi	r3,r3,3
 2005764:	1800351e 	bne	r3,zero,200583c <memmove+0x120>
 2005768:	327ffc04 	addi	r9,r6,-16
 200576c:	4812d13a 	srli	r9,r9,4
 2005770:	12000404 	addi	r8,r2,16
 2005774:	1007883a 	mov	r3,r2
 2005778:	4808913a 	slli	r4,r9,4
 200577c:	280f883a 	mov	r7,r5
 2005780:	4111883a 	add	r8,r8,r4
 2005784:	39000017 	ldw	r4,0(r7)
 2005788:	18c00404 	addi	r3,r3,16
 200578c:	39c00404 	addi	r7,r7,16
 2005790:	193ffc15 	stw	r4,-16(r3)
 2005794:	393ffd17 	ldw	r4,-12(r7)
 2005798:	193ffd15 	stw	r4,-12(r3)
 200579c:	393ffe17 	ldw	r4,-8(r7)
 20057a0:	193ffe15 	stw	r4,-8(r3)
 20057a4:	393fff17 	ldw	r4,-4(r7)
 20057a8:	193fff15 	stw	r4,-4(r3)
 20057ac:	1a3ff51e 	bne	r3,r8,2005784 <memmove+0x68>
 20057b0:	49000044 	addi	r4,r9,1
 20057b4:	2008913a 	slli	r4,r4,4
 20057b8:	31c003cc 	andi	r7,r6,15
 20057bc:	1107883a 	add	r3,r2,r4
 20057c0:	290b883a 	add	r5,r5,r4
 20057c4:	010000c4 	movi	r4,3
 20057c8:	21c0142e 	bgeu	r4,r7,200581c <memmove+0x100>
 20057cc:	39ffff04 	addi	r7,r7,-4
 20057d0:	3814d0ba 	srli	r10,r7,2
 20057d4:	1a400104 	addi	r9,r3,4
 20057d8:	180d883a 	mov	r6,r3
 20057dc:	5289883a 	add	r4,r10,r10
 20057e0:	2109883a 	add	r4,r4,r4
 20057e4:	4913883a 	add	r9,r9,r4
 20057e8:	2809883a 	mov	r4,r5
 20057ec:	22000017 	ldw	r8,0(r4)
 20057f0:	31800104 	addi	r6,r6,4
 20057f4:	21000104 	addi	r4,r4,4
 20057f8:	323fff15 	stw	r8,-4(r6)
 20057fc:	327ffb1e 	bne	r6,r9,20057ec <memmove+0xd0>
 2005800:	51000044 	addi	r4,r10,1
 2005804:	52bfff24 	muli	r10,r10,-4
 2005808:	2109883a 	add	r4,r4,r4
 200580c:	2109883a 	add	r4,r4,r4
 2005810:	51cf883a 	add	r7,r10,r7
 2005814:	290b883a 	add	r5,r5,r4
 2005818:	1907883a 	add	r3,r3,r4
 200581c:	38000626 	beq	r7,zero,2005838 <memmove+0x11c>
 2005820:	19cf883a 	add	r7,r3,r7
 2005824:	29800003 	ldbu	r6,0(r5)
 2005828:	18c00044 	addi	r3,r3,1
 200582c:	29400044 	addi	r5,r5,1
 2005830:	19bfffc5 	stb	r6,-1(r3)
 2005834:	19fffb1e 	bne	r3,r7,2005824 <memmove+0x108>
 2005838:	f800283a 	ret
 200583c:	1007883a 	mov	r3,r2
 2005840:	003ff606 	br	200581c <memmove+0x100>

02005844 <_Balloc>:
 2005844:	20801317 	ldw	r2,76(r4)
 2005848:	defffc04 	addi	sp,sp,-16
 200584c:	dc400115 	stw	r17,4(sp)
 2005850:	dc000015 	stw	r16,0(sp)
 2005854:	dfc00315 	stw	ra,12(sp)
 2005858:	dc800215 	stw	r18,8(sp)
 200585c:	2023883a 	mov	r17,r4
 2005860:	2821883a 	mov	r16,r5
 2005864:	10000f26 	beq	r2,zero,20058a4 <_Balloc+0x60>
 2005868:	8407883a 	add	r3,r16,r16
 200586c:	18c7883a 	add	r3,r3,r3
 2005870:	10c7883a 	add	r3,r2,r3
 2005874:	18800017 	ldw	r2,0(r3)
 2005878:	10001126 	beq	r2,zero,20058c0 <_Balloc+0x7c>
 200587c:	11000017 	ldw	r4,0(r2)
 2005880:	19000015 	stw	r4,0(r3)
 2005884:	10000415 	stw	zero,16(r2)
 2005888:	10000315 	stw	zero,12(r2)
 200588c:	dfc00317 	ldw	ra,12(sp)
 2005890:	dc800217 	ldw	r18,8(sp)
 2005894:	dc400117 	ldw	r17,4(sp)
 2005898:	dc000017 	ldw	r16,0(sp)
 200589c:	dec00404 	addi	sp,sp,16
 20058a0:	f800283a 	ret
 20058a4:	01400104 	movi	r5,4
 20058a8:	01800404 	movi	r6,16
 20058ac:	200718c0 	call	200718c <_calloc_r>
 20058b0:	88801315 	stw	r2,76(r17)
 20058b4:	103fec1e 	bne	r2,zero,2005868 <_Balloc+0x24>
 20058b8:	0005883a 	mov	r2,zero
 20058bc:	003ff306 	br	200588c <_Balloc+0x48>
 20058c0:	01400044 	movi	r5,1
 20058c4:	2c24983a 	sll	r18,r5,r16
 20058c8:	8809883a 	mov	r4,r17
 20058cc:	91800144 	addi	r6,r18,5
 20058d0:	318d883a 	add	r6,r6,r6
 20058d4:	318d883a 	add	r6,r6,r6
 20058d8:	200718c0 	call	200718c <_calloc_r>
 20058dc:	103ff626 	beq	r2,zero,20058b8 <_Balloc+0x74>
 20058e0:	14000115 	stw	r16,4(r2)
 20058e4:	14800215 	stw	r18,8(r2)
 20058e8:	003fe606 	br	2005884 <_Balloc+0x40>

020058ec <_Bfree>:
 20058ec:	28000826 	beq	r5,zero,2005910 <_Bfree+0x24>
 20058f0:	28c00117 	ldw	r3,4(r5)
 20058f4:	20801317 	ldw	r2,76(r4)
 20058f8:	18c7883a 	add	r3,r3,r3
 20058fc:	18c7883a 	add	r3,r3,r3
 2005900:	10c5883a 	add	r2,r2,r3
 2005904:	10c00017 	ldw	r3,0(r2)
 2005908:	28c00015 	stw	r3,0(r5)
 200590c:	11400015 	stw	r5,0(r2)
 2005910:	f800283a 	ret

02005914 <__multadd>:
 2005914:	defffa04 	addi	sp,sp,-24
 2005918:	dc000115 	stw	r16,4(sp)
 200591c:	2c000417 	ldw	r16,16(r5)
 2005920:	dc800315 	stw	r18,12(sp)
 2005924:	dc400215 	stw	r17,8(sp)
 2005928:	dfc00515 	stw	ra,20(sp)
 200592c:	dcc00415 	stw	r19,16(sp)
 2005930:	2823883a 	mov	r17,r5
 2005934:	2025883a 	mov	r18,r4
 2005938:	28c00504 	addi	r3,r5,20
 200593c:	0011883a 	mov	r8,zero
 2005940:	1a800017 	ldw	r10,0(r3)
 2005944:	18c00104 	addi	r3,r3,4
 2005948:	42000044 	addi	r8,r8,1
 200594c:	527fffcc 	andi	r9,r10,65535
 2005950:	4993383a 	mul	r9,r9,r6
 2005954:	5014d43a 	srli	r10,r10,16
 2005958:	49d3883a 	add	r9,r9,r7
 200595c:	480ed43a 	srli	r7,r9,16
 2005960:	5195383a 	mul	r10,r10,r6
 2005964:	4a7fffcc 	andi	r9,r9,65535
 2005968:	3a8f883a 	add	r7,r7,r10
 200596c:	3814943a 	slli	r10,r7,16
 2005970:	380ed43a 	srli	r7,r7,16
 2005974:	5253883a 	add	r9,r10,r9
 2005978:	1a7fff15 	stw	r9,-4(r3)
 200597c:	443ff016 	blt	r8,r16,2005940 <__multadd+0x2c>
 2005980:	38000926 	beq	r7,zero,20059a8 <__multadd+0x94>
 2005984:	88800217 	ldw	r2,8(r17)
 2005988:	80800f0e 	bge	r16,r2,20059c8 <__multadd+0xb4>
 200598c:	80800144 	addi	r2,r16,5
 2005990:	1085883a 	add	r2,r2,r2
 2005994:	1085883a 	add	r2,r2,r2
 2005998:	8885883a 	add	r2,r17,r2
 200599c:	84000044 	addi	r16,r16,1
 20059a0:	11c00015 	stw	r7,0(r2)
 20059a4:	8c000415 	stw	r16,16(r17)
 20059a8:	8805883a 	mov	r2,r17
 20059ac:	dfc00517 	ldw	ra,20(sp)
 20059b0:	dcc00417 	ldw	r19,16(sp)
 20059b4:	dc800317 	ldw	r18,12(sp)
 20059b8:	dc400217 	ldw	r17,8(sp)
 20059bc:	dc000117 	ldw	r16,4(sp)
 20059c0:	dec00604 	addi	sp,sp,24
 20059c4:	f800283a 	ret
 20059c8:	89400117 	ldw	r5,4(r17)
 20059cc:	9009883a 	mov	r4,r18
 20059d0:	d9c00015 	stw	r7,0(sp)
 20059d4:	29400044 	addi	r5,r5,1
 20059d8:	20058440 	call	2005844 <_Balloc>
 20059dc:	89800417 	ldw	r6,16(r17)
 20059e0:	89400304 	addi	r5,r17,12
 20059e4:	11000304 	addi	r4,r2,12
 20059e8:	31800084 	addi	r6,r6,2
 20059ec:	318d883a 	add	r6,r6,r6
 20059f0:	318d883a 	add	r6,r6,r6
 20059f4:	1027883a 	mov	r19,r2
 20059f8:	20056240 	call	2005624 <memcpy>
 20059fc:	88c00117 	ldw	r3,4(r17)
 2005a00:	90801317 	ldw	r2,76(r18)
 2005a04:	d9c00017 	ldw	r7,0(sp)
 2005a08:	18c7883a 	add	r3,r3,r3
 2005a0c:	18c7883a 	add	r3,r3,r3
 2005a10:	10c5883a 	add	r2,r2,r3
 2005a14:	10c00017 	ldw	r3,0(r2)
 2005a18:	88c00015 	stw	r3,0(r17)
 2005a1c:	14400015 	stw	r17,0(r2)
 2005a20:	9823883a 	mov	r17,r19
 2005a24:	003fd906 	br	200598c <__multadd+0x78>

02005a28 <__s2b>:
 2005a28:	defff904 	addi	sp,sp,-28
 2005a2c:	dd000415 	stw	r20,16(sp)
 2005a30:	dc400115 	stw	r17,4(sp)
 2005a34:	2829883a 	mov	r20,r5
 2005a38:	2023883a 	mov	r17,r4
 2005a3c:	01400244 	movi	r5,9
 2005a40:	39000204 	addi	r4,r7,8
 2005a44:	dcc00315 	stw	r19,12(sp)
 2005a48:	dc800215 	stw	r18,8(sp)
 2005a4c:	dfc00615 	stw	ra,24(sp)
 2005a50:	dd400515 	stw	r21,20(sp)
 2005a54:	dc000015 	stw	r16,0(sp)
 2005a58:	3825883a 	mov	r18,r7
 2005a5c:	3027883a 	mov	r19,r6
 2005a60:	2008ea80 	call	2008ea8 <__divsi3>
 2005a64:	00c00044 	movi	r3,1
 2005a68:	000b883a 	mov	r5,zero
 2005a6c:	1880030e 	bge	r3,r2,2005a7c <__s2b+0x54>
 2005a70:	18c7883a 	add	r3,r3,r3
 2005a74:	29400044 	addi	r5,r5,1
 2005a78:	18bffd16 	blt	r3,r2,2005a70 <__s2b+0x48>
 2005a7c:	8809883a 	mov	r4,r17
 2005a80:	20058440 	call	2005844 <_Balloc>
 2005a84:	d8c00717 	ldw	r3,28(sp)
 2005a88:	10c00515 	stw	r3,20(r2)
 2005a8c:	00c00044 	movi	r3,1
 2005a90:	10c00415 	stw	r3,16(r2)
 2005a94:	00c00244 	movi	r3,9
 2005a98:	1cc0210e 	bge	r3,r19,2005b20 <__s2b+0xf8>
 2005a9c:	a0eb883a 	add	r21,r20,r3
 2005aa0:	a821883a 	mov	r16,r21
 2005aa4:	a4e9883a 	add	r20,r20,r19
 2005aa8:	81c00007 	ldb	r7,0(r16)
 2005aac:	8809883a 	mov	r4,r17
 2005ab0:	84000044 	addi	r16,r16,1
 2005ab4:	100b883a 	mov	r5,r2
 2005ab8:	01800284 	movi	r6,10
 2005abc:	39fff404 	addi	r7,r7,-48
 2005ac0:	20059140 	call	2005914 <__multadd>
 2005ac4:	853ff81e 	bne	r16,r20,2005aa8 <__s2b+0x80>
 2005ac8:	ace1883a 	add	r16,r21,r19
 2005acc:	843ffe04 	addi	r16,r16,-8
 2005ad0:	9c800a0e 	bge	r19,r18,2005afc <__s2b+0xd4>
 2005ad4:	94e5c83a 	sub	r18,r18,r19
 2005ad8:	84a5883a 	add	r18,r16,r18
 2005adc:	81c00007 	ldb	r7,0(r16)
 2005ae0:	8809883a 	mov	r4,r17
 2005ae4:	84000044 	addi	r16,r16,1
 2005ae8:	100b883a 	mov	r5,r2
 2005aec:	01800284 	movi	r6,10
 2005af0:	39fff404 	addi	r7,r7,-48
 2005af4:	20059140 	call	2005914 <__multadd>
 2005af8:	84bff81e 	bne	r16,r18,2005adc <__s2b+0xb4>
 2005afc:	dfc00617 	ldw	ra,24(sp)
 2005b00:	dd400517 	ldw	r21,20(sp)
 2005b04:	dd000417 	ldw	r20,16(sp)
 2005b08:	dcc00317 	ldw	r19,12(sp)
 2005b0c:	dc800217 	ldw	r18,8(sp)
 2005b10:	dc400117 	ldw	r17,4(sp)
 2005b14:	dc000017 	ldw	r16,0(sp)
 2005b18:	dec00704 	addi	sp,sp,28
 2005b1c:	f800283a 	ret
 2005b20:	a4000284 	addi	r16,r20,10
 2005b24:	1827883a 	mov	r19,r3
 2005b28:	003fe906 	br	2005ad0 <__s2b+0xa8>

02005b2c <__hi0bits>:
 2005b2c:	20bfffec 	andhi	r2,r4,65535
 2005b30:	1000141e 	bne	r2,zero,2005b84 <__hi0bits+0x58>
 2005b34:	2008943a 	slli	r4,r4,16
 2005b38:	00800404 	movi	r2,16
 2005b3c:	20ffc02c 	andhi	r3,r4,65280
 2005b40:	1800021e 	bne	r3,zero,2005b4c <__hi0bits+0x20>
 2005b44:	2008923a 	slli	r4,r4,8
 2005b48:	10800204 	addi	r2,r2,8
 2005b4c:	20fc002c 	andhi	r3,r4,61440
 2005b50:	1800021e 	bne	r3,zero,2005b5c <__hi0bits+0x30>
 2005b54:	2008913a 	slli	r4,r4,4
 2005b58:	10800104 	addi	r2,r2,4
 2005b5c:	20f0002c 	andhi	r3,r4,49152
 2005b60:	1800031e 	bne	r3,zero,2005b70 <__hi0bits+0x44>
 2005b64:	2109883a 	add	r4,r4,r4
 2005b68:	10800084 	addi	r2,r2,2
 2005b6c:	2109883a 	add	r4,r4,r4
 2005b70:	20000316 	blt	r4,zero,2005b80 <__hi0bits+0x54>
 2005b74:	2110002c 	andhi	r4,r4,16384
 2005b78:	2000041e 	bne	r4,zero,2005b8c <__hi0bits+0x60>
 2005b7c:	00800804 	movi	r2,32
 2005b80:	f800283a 	ret
 2005b84:	0005883a 	mov	r2,zero
 2005b88:	003fec06 	br	2005b3c <__hi0bits+0x10>
 2005b8c:	10800044 	addi	r2,r2,1
 2005b90:	f800283a 	ret

02005b94 <__lo0bits>:
 2005b94:	20c00017 	ldw	r3,0(r4)
 2005b98:	188001cc 	andi	r2,r3,7
 2005b9c:	10000826 	beq	r2,zero,2005bc0 <__lo0bits+0x2c>
 2005ba0:	1880004c 	andi	r2,r3,1
 2005ba4:	1000211e 	bne	r2,zero,2005c2c <__lo0bits+0x98>
 2005ba8:	1880008c 	andi	r2,r3,2
 2005bac:	1000211e 	bne	r2,zero,2005c34 <__lo0bits+0xa0>
 2005bb0:	1806d0ba 	srli	r3,r3,2
 2005bb4:	00800084 	movi	r2,2
 2005bb8:	20c00015 	stw	r3,0(r4)
 2005bbc:	f800283a 	ret
 2005bc0:	18bfffcc 	andi	r2,r3,65535
 2005bc4:	10001326 	beq	r2,zero,2005c14 <__lo0bits+0x80>
 2005bc8:	0005883a 	mov	r2,zero
 2005bcc:	19403fcc 	andi	r5,r3,255
 2005bd0:	2800021e 	bne	r5,zero,2005bdc <__lo0bits+0x48>
 2005bd4:	1806d23a 	srli	r3,r3,8
 2005bd8:	10800204 	addi	r2,r2,8
 2005bdc:	194003cc 	andi	r5,r3,15
 2005be0:	2800021e 	bne	r5,zero,2005bec <__lo0bits+0x58>
 2005be4:	1806d13a 	srli	r3,r3,4
 2005be8:	10800104 	addi	r2,r2,4
 2005bec:	194000cc 	andi	r5,r3,3
 2005bf0:	2800021e 	bne	r5,zero,2005bfc <__lo0bits+0x68>
 2005bf4:	1806d0ba 	srli	r3,r3,2
 2005bf8:	10800084 	addi	r2,r2,2
 2005bfc:	1940004c 	andi	r5,r3,1
 2005c00:	2800081e 	bne	r5,zero,2005c24 <__lo0bits+0x90>
 2005c04:	1806d07a 	srli	r3,r3,1
 2005c08:	1800051e 	bne	r3,zero,2005c20 <__lo0bits+0x8c>
 2005c0c:	00800804 	movi	r2,32
 2005c10:	f800283a 	ret
 2005c14:	1806d43a 	srli	r3,r3,16
 2005c18:	00800404 	movi	r2,16
 2005c1c:	003feb06 	br	2005bcc <__lo0bits+0x38>
 2005c20:	10800044 	addi	r2,r2,1
 2005c24:	20c00015 	stw	r3,0(r4)
 2005c28:	f800283a 	ret
 2005c2c:	0005883a 	mov	r2,zero
 2005c30:	f800283a 	ret
 2005c34:	1806d07a 	srli	r3,r3,1
 2005c38:	00800044 	movi	r2,1
 2005c3c:	20c00015 	stw	r3,0(r4)
 2005c40:	f800283a 	ret

02005c44 <__i2b>:
 2005c44:	defffd04 	addi	sp,sp,-12
 2005c48:	dc000015 	stw	r16,0(sp)
 2005c4c:	04000044 	movi	r16,1
 2005c50:	dc400115 	stw	r17,4(sp)
 2005c54:	2823883a 	mov	r17,r5
 2005c58:	800b883a 	mov	r5,r16
 2005c5c:	dfc00215 	stw	ra,8(sp)
 2005c60:	20058440 	call	2005844 <_Balloc>
 2005c64:	14400515 	stw	r17,20(r2)
 2005c68:	14000415 	stw	r16,16(r2)
 2005c6c:	dfc00217 	ldw	ra,8(sp)
 2005c70:	dc400117 	ldw	r17,4(sp)
 2005c74:	dc000017 	ldw	r16,0(sp)
 2005c78:	dec00304 	addi	sp,sp,12
 2005c7c:	f800283a 	ret

02005c80 <__multiply>:
 2005c80:	defffa04 	addi	sp,sp,-24
 2005c84:	dcc00315 	stw	r19,12(sp)
 2005c88:	dc400115 	stw	r17,4(sp)
 2005c8c:	34c00417 	ldw	r19,16(r6)
 2005c90:	2c400417 	ldw	r17,16(r5)
 2005c94:	dd000415 	stw	r20,16(sp)
 2005c98:	dc800215 	stw	r18,8(sp)
 2005c9c:	dfc00515 	stw	ra,20(sp)
 2005ca0:	dc000015 	stw	r16,0(sp)
 2005ca4:	2825883a 	mov	r18,r5
 2005ca8:	3029883a 	mov	r20,r6
 2005cac:	8cc0050e 	bge	r17,r19,2005cc4 <__multiply+0x44>
 2005cb0:	8807883a 	mov	r3,r17
 2005cb4:	3025883a 	mov	r18,r6
 2005cb8:	9823883a 	mov	r17,r19
 2005cbc:	2829883a 	mov	r20,r5
 2005cc0:	1827883a 	mov	r19,r3
 2005cc4:	90800217 	ldw	r2,8(r18)
 2005cc8:	8ce1883a 	add	r16,r17,r19
 2005ccc:	91400117 	ldw	r5,4(r18)
 2005cd0:	1400010e 	bge	r2,r16,2005cd8 <__multiply+0x58>
 2005cd4:	29400044 	addi	r5,r5,1
 2005cd8:	20058440 	call	2005844 <_Balloc>
 2005cdc:	83c00144 	addi	r15,r16,5
 2005ce0:	7bdf883a 	add	r15,r15,r15
 2005ce4:	7bdf883a 	add	r15,r15,r15
 2005ce8:	13800504 	addi	r14,r2,20
 2005cec:	13df883a 	add	r15,r2,r15
 2005cf0:	7007883a 	mov	r3,r14
 2005cf4:	73c0032e 	bgeu	r14,r15,2005d04 <__multiply+0x84>
 2005cf8:	18000015 	stw	zero,0(r3)
 2005cfc:	18c00104 	addi	r3,r3,4
 2005d00:	1bfffd36 	bltu	r3,r15,2005cf8 <__multiply+0x78>
 2005d04:	99800144 	addi	r6,r19,5
 2005d08:	8b000144 	addi	r12,r17,5
 2005d0c:	318d883a 	add	r6,r6,r6
 2005d10:	6319883a 	add	r12,r12,r12
 2005d14:	318d883a 	add	r6,r6,r6
 2005d18:	6319883a 	add	r12,r12,r12
 2005d1c:	a3400504 	addi	r13,r20,20
 2005d20:	a18d883a 	add	r6,r20,r6
 2005d24:	94400504 	addi	r17,r18,20
 2005d28:	9319883a 	add	r12,r18,r12
 2005d2c:	6980392e 	bgeu	r13,r6,2005e14 <__multiply+0x194>
 2005d30:	6a800017 	ldw	r10,0(r13)
 2005d34:	52ffffcc 	andi	r11,r10,65535
 2005d38:	58001826 	beq	r11,zero,2005d9c <__multiply+0x11c>
 2005d3c:	7007883a 	mov	r3,r14
 2005d40:	8809883a 	mov	r4,r17
 2005d44:	000b883a 	mov	r5,zero
 2005d48:	22400017 	ldw	r9,0(r4)
 2005d4c:	1a000017 	ldw	r8,0(r3)
 2005d50:	21000104 	addi	r4,r4,4
 2005d54:	49ffffcc 	andi	r7,r9,65535
 2005d58:	3acf383a 	mul	r7,r7,r11
 2005d5c:	4812d43a 	srli	r9,r9,16
 2005d60:	42bfffcc 	andi	r10,r8,65535
 2005d64:	3a8f883a 	add	r7,r7,r10
 2005d68:	394f883a 	add	r7,r7,r5
 2005d6c:	4010d43a 	srli	r8,r8,16
 2005d70:	4acb383a 	mul	r5,r9,r11
 2005d74:	3814d43a 	srli	r10,r7,16
 2005d78:	19c0000d 	sth	r7,0(r3)
 2005d7c:	2a0b883a 	add	r5,r5,r8
 2005d80:	2a8b883a 	add	r5,r5,r10
 2005d84:	1940008d 	sth	r5,2(r3)
 2005d88:	280ad43a 	srli	r5,r5,16
 2005d8c:	18c00104 	addi	r3,r3,4
 2005d90:	233fed36 	bltu	r4,r12,2005d48 <__multiply+0xc8>
 2005d94:	19400015 	stw	r5,0(r3)
 2005d98:	6a800017 	ldw	r10,0(r13)
 2005d9c:	5014d43a 	srli	r10,r10,16
 2005da0:	50001926 	beq	r10,zero,2005e08 <__multiply+0x188>
 2005da4:	71400017 	ldw	r5,0(r14)
 2005da8:	7007883a 	mov	r3,r14
 2005dac:	8809883a 	mov	r4,r17
 2005db0:	280f883a 	mov	r7,r5
 2005db4:	0017883a 	mov	r11,zero
 2005db8:	22400017 	ldw	r9,0(r4)
 2005dbc:	380ed43a 	srli	r7,r7,16
 2005dc0:	1940000d 	sth	r5,0(r3)
 2005dc4:	4a3fffcc 	andi	r8,r9,65535
 2005dc8:	4291383a 	mul	r8,r8,r10
 2005dcc:	4812d43a 	srli	r9,r9,16
 2005dd0:	18c00104 	addi	r3,r3,4
 2005dd4:	41d1883a 	add	r8,r8,r7
 2005dd8:	19c00017 	ldw	r7,0(r3)
 2005ddc:	42d1883a 	add	r8,r8,r11
 2005de0:	4a93383a 	mul	r9,r9,r10
 2005de4:	1a3fff8d 	sth	r8,-2(r3)
 2005de8:	4010d43a 	srli	r8,r8,16
 2005dec:	397fffcc 	andi	r5,r7,65535
 2005df0:	2a4b883a 	add	r5,r5,r9
 2005df4:	2a0b883a 	add	r5,r5,r8
 2005df8:	21000104 	addi	r4,r4,4
 2005dfc:	2816d43a 	srli	r11,r5,16
 2005e00:	233fed36 	bltu	r4,r12,2005db8 <__multiply+0x138>
 2005e04:	19400015 	stw	r5,0(r3)
 2005e08:	6b400104 	addi	r13,r13,4
 2005e0c:	73800104 	addi	r14,r14,4
 2005e10:	69bfc736 	bltu	r13,r6,2005d30 <__multiply+0xb0>
 2005e14:	0400090e 	bge	zero,r16,2005e3c <__multiply+0x1bc>
 2005e18:	78ffff17 	ldw	r3,-4(r15)
 2005e1c:	7bffff04 	addi	r15,r15,-4
 2005e20:	18000326 	beq	r3,zero,2005e30 <__multiply+0x1b0>
 2005e24:	00000506 	br	2005e3c <__multiply+0x1bc>
 2005e28:	78c00017 	ldw	r3,0(r15)
 2005e2c:	1800031e 	bne	r3,zero,2005e3c <__multiply+0x1bc>
 2005e30:	843fffc4 	addi	r16,r16,-1
 2005e34:	7bffff04 	addi	r15,r15,-4
 2005e38:	803ffb1e 	bne	r16,zero,2005e28 <__multiply+0x1a8>
 2005e3c:	14000415 	stw	r16,16(r2)
 2005e40:	dfc00517 	ldw	ra,20(sp)
 2005e44:	dd000417 	ldw	r20,16(sp)
 2005e48:	dcc00317 	ldw	r19,12(sp)
 2005e4c:	dc800217 	ldw	r18,8(sp)
 2005e50:	dc400117 	ldw	r17,4(sp)
 2005e54:	dc000017 	ldw	r16,0(sp)
 2005e58:	dec00604 	addi	sp,sp,24
 2005e5c:	f800283a 	ret

02005e60 <__pow5mult>:
 2005e60:	defffb04 	addi	sp,sp,-20
 2005e64:	dcc00315 	stw	r19,12(sp)
 2005e68:	dc800215 	stw	r18,8(sp)
 2005e6c:	dc000015 	stw	r16,0(sp)
 2005e70:	dfc00415 	stw	ra,16(sp)
 2005e74:	dc400115 	stw	r17,4(sp)
 2005e78:	308000cc 	andi	r2,r6,3
 2005e7c:	3021883a 	mov	r16,r6
 2005e80:	2027883a 	mov	r19,r4
 2005e84:	2825883a 	mov	r18,r5
 2005e88:	10002e1e 	bne	r2,zero,2005f44 <__pow5mult+0xe4>
 2005e8c:	8021d0ba 	srai	r16,r16,2
 2005e90:	80001a26 	beq	r16,zero,2005efc <__pow5mult+0x9c>
 2005e94:	9c401217 	ldw	r17,72(r19)
 2005e98:	8800061e 	bne	r17,zero,2005eb4 <__pow5mult+0x54>
 2005e9c:	00003406 	br	2005f70 <__pow5mult+0x110>
 2005ea0:	8021d07a 	srai	r16,r16,1
 2005ea4:	80001526 	beq	r16,zero,2005efc <__pow5mult+0x9c>
 2005ea8:	88c00017 	ldw	r3,0(r17)
 2005eac:	18001b26 	beq	r3,zero,2005f1c <__pow5mult+0xbc>
 2005eb0:	1823883a 	mov	r17,r3
 2005eb4:	80c0004c 	andi	r3,r16,1
 2005eb8:	183ff926 	beq	r3,zero,2005ea0 <__pow5mult+0x40>
 2005ebc:	900b883a 	mov	r5,r18
 2005ec0:	880d883a 	mov	r6,r17
 2005ec4:	9809883a 	mov	r4,r19
 2005ec8:	2005c800 	call	2005c80 <__multiply>
 2005ecc:	90001b26 	beq	r18,zero,2005f3c <__pow5mult+0xdc>
 2005ed0:	91000117 	ldw	r4,4(r18)
 2005ed4:	98c01317 	ldw	r3,76(r19)
 2005ed8:	8021d07a 	srai	r16,r16,1
 2005edc:	2109883a 	add	r4,r4,r4
 2005ee0:	2109883a 	add	r4,r4,r4
 2005ee4:	1907883a 	add	r3,r3,r4
 2005ee8:	19000017 	ldw	r4,0(r3)
 2005eec:	91000015 	stw	r4,0(r18)
 2005ef0:	1c800015 	stw	r18,0(r3)
 2005ef4:	1025883a 	mov	r18,r2
 2005ef8:	803feb1e 	bne	r16,zero,2005ea8 <__pow5mult+0x48>
 2005efc:	9005883a 	mov	r2,r18
 2005f00:	dfc00417 	ldw	ra,16(sp)
 2005f04:	dcc00317 	ldw	r19,12(sp)
 2005f08:	dc800217 	ldw	r18,8(sp)
 2005f0c:	dc400117 	ldw	r17,4(sp)
 2005f10:	dc000017 	ldw	r16,0(sp)
 2005f14:	dec00504 	addi	sp,sp,20
 2005f18:	f800283a 	ret
 2005f1c:	880b883a 	mov	r5,r17
 2005f20:	880d883a 	mov	r6,r17
 2005f24:	9809883a 	mov	r4,r19
 2005f28:	2005c800 	call	2005c80 <__multiply>
 2005f2c:	88800015 	stw	r2,0(r17)
 2005f30:	10000015 	stw	zero,0(r2)
 2005f34:	1023883a 	mov	r17,r2
 2005f38:	003fde06 	br	2005eb4 <__pow5mult+0x54>
 2005f3c:	1025883a 	mov	r18,r2
 2005f40:	003fd706 	br	2005ea0 <__pow5mult+0x40>
 2005f44:	10bfffc4 	addi	r2,r2,-1
 2005f48:	1085883a 	add	r2,r2,r2
 2005f4c:	00c08074 	movhi	r3,513
 2005f50:	18eeec04 	addi	r3,r3,-17488
 2005f54:	1085883a 	add	r2,r2,r2
 2005f58:	1885883a 	add	r2,r3,r2
 2005f5c:	11800017 	ldw	r6,0(r2)
 2005f60:	000f883a 	mov	r7,zero
 2005f64:	20059140 	call	2005914 <__multadd>
 2005f68:	1025883a 	mov	r18,r2
 2005f6c:	003fc706 	br	2005e8c <__pow5mult+0x2c>
 2005f70:	9809883a 	mov	r4,r19
 2005f74:	01409c44 	movi	r5,625
 2005f78:	2005c440 	call	2005c44 <__i2b>
 2005f7c:	98801215 	stw	r2,72(r19)
 2005f80:	1023883a 	mov	r17,r2
 2005f84:	10000015 	stw	zero,0(r2)
 2005f88:	003fca06 	br	2005eb4 <__pow5mult+0x54>

02005f8c <__lshift>:
 2005f8c:	defff904 	addi	sp,sp,-28
 2005f90:	dd400515 	stw	r21,20(sp)
 2005f94:	dc400115 	stw	r17,4(sp)
 2005f98:	2d400417 	ldw	r21,16(r5)
 2005f9c:	3023d17a 	srai	r17,r6,5
 2005fa0:	28800217 	ldw	r2,8(r5)
 2005fa4:	dd000415 	stw	r20,16(sp)
 2005fa8:	8d6b883a 	add	r21,r17,r21
 2005fac:	dcc00315 	stw	r19,12(sp)
 2005fb0:	dc800215 	stw	r18,8(sp)
 2005fb4:	dc000015 	stw	r16,0(sp)
 2005fb8:	dfc00615 	stw	ra,24(sp)
 2005fbc:	ac000044 	addi	r16,r21,1
 2005fc0:	2825883a 	mov	r18,r5
 2005fc4:	3029883a 	mov	r20,r6
 2005fc8:	2027883a 	mov	r19,r4
 2005fcc:	29400117 	ldw	r5,4(r5)
 2005fd0:	1400030e 	bge	r2,r16,2005fe0 <__lshift+0x54>
 2005fd4:	1085883a 	add	r2,r2,r2
 2005fd8:	29400044 	addi	r5,r5,1
 2005fdc:	143ffd16 	blt	r2,r16,2005fd4 <__lshift+0x48>
 2005fe0:	9809883a 	mov	r4,r19
 2005fe4:	20058440 	call	2005844 <_Balloc>
 2005fe8:	10c00504 	addi	r3,r2,20
 2005fec:	0440090e 	bge	zero,r17,2006014 <__lshift+0x88>
 2005ff0:	000f883a 	mov	r7,zero
 2005ff4:	18000015 	stw	zero,0(r3)
 2005ff8:	39c00044 	addi	r7,r7,1
 2005ffc:	18c00104 	addi	r3,r3,4
 2006000:	3c7ffc1e 	bne	r7,r17,2005ff4 <__lshift+0x68>
 2006004:	38c00144 	addi	r3,r7,5
 2006008:	18c7883a 	add	r3,r3,r3
 200600c:	18c7883a 	add	r3,r3,r3
 2006010:	10c7883a 	add	r3,r2,r3
 2006014:	92000417 	ldw	r8,16(r18)
 2006018:	a18007cc 	andi	r6,r20,31
 200601c:	91c00504 	addi	r7,r18,20
 2006020:	42000144 	addi	r8,r8,5
 2006024:	4211883a 	add	r8,r8,r8
 2006028:	4211883a 	add	r8,r8,r8
 200602c:	9211883a 	add	r8,r18,r8
 2006030:	30002226 	beq	r6,zero,20060bc <__lshift+0x130>
 2006034:	02800804 	movi	r10,32
 2006038:	5195c83a 	sub	r10,r10,r6
 200603c:	000b883a 	mov	r5,zero
 2006040:	3a400017 	ldw	r9,0(r7)
 2006044:	18c00104 	addi	r3,r3,4
 2006048:	39c00104 	addi	r7,r7,4
 200604c:	4992983a 	sll	r9,r9,r6
 2006050:	2a4ab03a 	or	r5,r5,r9
 2006054:	197fff15 	stw	r5,-4(r3)
 2006058:	397fff17 	ldw	r5,-4(r7)
 200605c:	2a8ad83a 	srl	r5,r5,r10
 2006060:	3a3ff736 	bltu	r7,r8,2006040 <__lshift+0xb4>
 2006064:	19400015 	stw	r5,0(r3)
 2006068:	28000126 	beq	r5,zero,2006070 <__lshift+0xe4>
 200606c:	ac000084 	addi	r16,r21,2
 2006070:	91000117 	ldw	r4,4(r18)
 2006074:	98c01317 	ldw	r3,76(r19)
 2006078:	843fffc4 	addi	r16,r16,-1
 200607c:	2109883a 	add	r4,r4,r4
 2006080:	2109883a 	add	r4,r4,r4
 2006084:	1907883a 	add	r3,r3,r4
 2006088:	19000017 	ldw	r4,0(r3)
 200608c:	14000415 	stw	r16,16(r2)
 2006090:	91000015 	stw	r4,0(r18)
 2006094:	1c800015 	stw	r18,0(r3)
 2006098:	dfc00617 	ldw	ra,24(sp)
 200609c:	dd400517 	ldw	r21,20(sp)
 20060a0:	dd000417 	ldw	r20,16(sp)
 20060a4:	dcc00317 	ldw	r19,12(sp)
 20060a8:	dc800217 	ldw	r18,8(sp)
 20060ac:	dc400117 	ldw	r17,4(sp)
 20060b0:	dc000017 	ldw	r16,0(sp)
 20060b4:	dec00704 	addi	sp,sp,28
 20060b8:	f800283a 	ret
 20060bc:	39400017 	ldw	r5,0(r7)
 20060c0:	18c00104 	addi	r3,r3,4
 20060c4:	39c00104 	addi	r7,r7,4
 20060c8:	197fff15 	stw	r5,-4(r3)
 20060cc:	3a3fe82e 	bgeu	r7,r8,2006070 <__lshift+0xe4>
 20060d0:	39400017 	ldw	r5,0(r7)
 20060d4:	18c00104 	addi	r3,r3,4
 20060d8:	39c00104 	addi	r7,r7,4
 20060dc:	197fff15 	stw	r5,-4(r3)
 20060e0:	3a3ff636 	bltu	r7,r8,20060bc <__lshift+0x130>
 20060e4:	003fe206 	br	2006070 <__lshift+0xe4>

020060e8 <__mcmp>:
 20060e8:	20800417 	ldw	r2,16(r4)
 20060ec:	28c00417 	ldw	r3,16(r5)
 20060f0:	10c5c83a 	sub	r2,r2,r3
 20060f4:	10000f1e 	bne	r2,zero,2006134 <__mcmp+0x4c>
 20060f8:	18c00144 	addi	r3,r3,5
 20060fc:	18c7883a 	add	r3,r3,r3
 2006100:	18c7883a 	add	r3,r3,r3
 2006104:	21c00504 	addi	r7,r4,20
 2006108:	28cb883a 	add	r5,r5,r3
 200610c:	20c9883a 	add	r4,r4,r3
 2006110:	213fff04 	addi	r4,r4,-4
 2006114:	297fff04 	addi	r5,r5,-4
 2006118:	21800017 	ldw	r6,0(r4)
 200611c:	28c00017 	ldw	r3,0(r5)
 2006120:	30c0021e 	bne	r6,r3,200612c <__mcmp+0x44>
 2006124:	393ffa36 	bltu	r7,r4,2006110 <__mcmp+0x28>
 2006128:	f800283a 	ret
 200612c:	30c00236 	bltu	r6,r3,2006138 <__mcmp+0x50>
 2006130:	00800044 	movi	r2,1
 2006134:	f800283a 	ret
 2006138:	00bfffc4 	movi	r2,-1
 200613c:	f800283a 	ret

02006140 <__mdiff>:
 2006140:	defffb04 	addi	sp,sp,-20
 2006144:	dc000015 	stw	r16,0(sp)
 2006148:	2821883a 	mov	r16,r5
 200614c:	dc800215 	stw	r18,8(sp)
 2006150:	300b883a 	mov	r5,r6
 2006154:	2025883a 	mov	r18,r4
 2006158:	8009883a 	mov	r4,r16
 200615c:	dc400115 	stw	r17,4(sp)
 2006160:	dfc00415 	stw	ra,16(sp)
 2006164:	dcc00315 	stw	r19,12(sp)
 2006168:	3023883a 	mov	r17,r6
 200616c:	20060e80 	call	20060e8 <__mcmp>
 2006170:	10005026 	beq	r2,zero,20062b4 <__mdiff+0x174>
 2006174:	10004a16 	blt	r2,zero,20062a0 <__mdiff+0x160>
 2006178:	0027883a 	mov	r19,zero
 200617c:	81400117 	ldw	r5,4(r16)
 2006180:	9009883a 	mov	r4,r18
 2006184:	20058440 	call	2005844 <_Balloc>
 2006188:	82400417 	ldw	r9,16(r16)
 200618c:	89800417 	ldw	r6,16(r17)
 2006190:	14c00315 	stw	r19,12(r2)
 2006194:	4b800144 	addi	r14,r9,5
 2006198:	31800144 	addi	r6,r6,5
 200619c:	739d883a 	add	r14,r14,r14
 20061a0:	318d883a 	add	r6,r6,r6
 20061a4:	739d883a 	add	r14,r14,r14
 20061a8:	318d883a 	add	r6,r6,r6
 20061ac:	81c00504 	addi	r7,r16,20
 20061b0:	839d883a 	add	r14,r16,r14
 20061b4:	8a000504 	addi	r8,r17,20
 20061b8:	898d883a 	add	r6,r17,r6
 20061bc:	10c00504 	addi	r3,r2,20
 20061c0:	0009883a 	mov	r4,zero
 20061c4:	3b000017 	ldw	r12,0(r7)
 20061c8:	42c00017 	ldw	r11,0(r8)
 20061cc:	42000104 	addi	r8,r8,4
 20061d0:	62bfffcc 	andi	r10,r12,65535
 20061d4:	5b7fffcc 	andi	r13,r11,65535
 20061d8:	5109883a 	add	r4,r10,r4
 20061dc:	2355c83a 	sub	r10,r4,r13
 20061e0:	5816d43a 	srli	r11,r11,16
 20061e4:	6008d43a 	srli	r4,r12,16
 20061e8:	501bd43a 	srai	r13,r10,16
 20061ec:	1a80000d 	sth	r10,0(r3)
 20061f0:	22c9c83a 	sub	r4,r4,r11
 20061f4:	2349883a 	add	r4,r4,r13
 20061f8:	1900008d 	sth	r4,2(r3)
 20061fc:	39c00104 	addi	r7,r7,4
 2006200:	2009d43a 	srai	r4,r4,16
 2006204:	18c00104 	addi	r3,r3,4
 2006208:	41bfee36 	bltu	r8,r6,20061c4 <__mdiff+0x84>
 200620c:	180b883a 	mov	r5,r3
 2006210:	3815883a 	mov	r10,r7
 2006214:	3b80132e 	bgeu	r7,r14,2006264 <__mdiff+0x124>
 2006218:	3a000017 	ldw	r8,0(r7)
 200621c:	18c00104 	addi	r3,r3,4
 2006220:	39c00104 	addi	r7,r7,4
 2006224:	41bfffcc 	andi	r6,r8,65535
 2006228:	310d883a 	add	r6,r6,r4
 200622c:	3009d43a 	srai	r4,r6,16
 2006230:	4010d43a 	srli	r8,r8,16
 2006234:	19bfff0d 	sth	r6,-4(r3)
 2006238:	2209883a 	add	r4,r4,r8
 200623c:	193fff8d 	sth	r4,-2(r3)
 2006240:	2009d43a 	srai	r4,r4,16
 2006244:	3bbff436 	bltu	r7,r14,2006218 <__mdiff+0xd8>
 2006248:	0286303a 	nor	r3,zero,r10
 200624c:	1b87883a 	add	r3,r3,r14
 2006250:	1806d0ba 	srli	r3,r3,2
 2006254:	18c00044 	addi	r3,r3,1
 2006258:	18c7883a 	add	r3,r3,r3
 200625c:	18c7883a 	add	r3,r3,r3
 2006260:	28c7883a 	add	r3,r5,r3
 2006264:	193fff17 	ldw	r4,-4(r3)
 2006268:	18ffff04 	addi	r3,r3,-4
 200626c:	2000041e 	bne	r4,zero,2006280 <__mdiff+0x140>
 2006270:	18ffff04 	addi	r3,r3,-4
 2006274:	19000017 	ldw	r4,0(r3)
 2006278:	4a7fffc4 	addi	r9,r9,-1
 200627c:	203ffc26 	beq	r4,zero,2006270 <__mdiff+0x130>
 2006280:	12400415 	stw	r9,16(r2)
 2006284:	dfc00417 	ldw	ra,16(sp)
 2006288:	dcc00317 	ldw	r19,12(sp)
 200628c:	dc800217 	ldw	r18,8(sp)
 2006290:	dc400117 	ldw	r17,4(sp)
 2006294:	dc000017 	ldw	r16,0(sp)
 2006298:	dec00504 	addi	sp,sp,20
 200629c:	f800283a 	ret
 20062a0:	8005883a 	mov	r2,r16
 20062a4:	04c00044 	movi	r19,1
 20062a8:	8821883a 	mov	r16,r17
 20062ac:	1023883a 	mov	r17,r2
 20062b0:	003fb206 	br	200617c <__mdiff+0x3c>
 20062b4:	9009883a 	mov	r4,r18
 20062b8:	000b883a 	mov	r5,zero
 20062bc:	20058440 	call	2005844 <_Balloc>
 20062c0:	00c00044 	movi	r3,1
 20062c4:	10c00415 	stw	r3,16(r2)
 20062c8:	10000515 	stw	zero,20(r2)
 20062cc:	dfc00417 	ldw	ra,16(sp)
 20062d0:	dcc00317 	ldw	r19,12(sp)
 20062d4:	dc800217 	ldw	r18,8(sp)
 20062d8:	dc400117 	ldw	r17,4(sp)
 20062dc:	dc000017 	ldw	r16,0(sp)
 20062e0:	dec00504 	addi	sp,sp,20
 20062e4:	f800283a 	ret

020062e8 <__ulp>:
 20062e8:	295ffc2c 	andhi	r5,r5,32752
 20062ec:	00bf3034 	movhi	r2,64704
 20062f0:	2887883a 	add	r3,r5,r2
 20062f4:	00c0020e 	bge	zero,r3,2006300 <__ulp+0x18>
 20062f8:	0005883a 	mov	r2,zero
 20062fc:	f800283a 	ret
 2006300:	00c7c83a 	sub	r3,zero,r3
 2006304:	1805d53a 	srai	r2,r3,20
 2006308:	00c004c4 	movi	r3,19
 200630c:	18800a0e 	bge	r3,r2,2006338 <__ulp+0x50>
 2006310:	01000c84 	movi	r4,50
 2006314:	0007883a 	mov	r3,zero
 2006318:	20800516 	blt	r4,r2,2006330 <__ulp+0x48>
 200631c:	01000cc4 	movi	r4,51
 2006320:	2085c83a 	sub	r2,r4,r2
 2006324:	01000044 	movi	r4,1
 2006328:	2084983a 	sll	r2,r4,r2
 200632c:	f800283a 	ret
 2006330:	00800044 	movi	r2,1
 2006334:	f800283a 	ret
 2006338:	00c00234 	movhi	r3,8
 200633c:	1887d83a 	sra	r3,r3,r2
 2006340:	0005883a 	mov	r2,zero
 2006344:	f800283a 	ret

02006348 <__b2d>:
 2006348:	defffa04 	addi	sp,sp,-24
 200634c:	dc000015 	stw	r16,0(sp)
 2006350:	24000417 	ldw	r16,16(r4)
 2006354:	dc400115 	stw	r17,4(sp)
 2006358:	dcc00315 	stw	r19,12(sp)
 200635c:	84000144 	addi	r16,r16,5
 2006360:	8421883a 	add	r16,r16,r16
 2006364:	8421883a 	add	r16,r16,r16
 2006368:	2421883a 	add	r16,r4,r16
 200636c:	847fff17 	ldw	r17,-4(r16)
 2006370:	24c00504 	addi	r19,r4,20
 2006374:	dd000415 	stw	r20,16(sp)
 2006378:	8809883a 	mov	r4,r17
 200637c:	dc800215 	stw	r18,8(sp)
 2006380:	2829883a 	mov	r20,r5
 2006384:	dfc00515 	stw	ra,20(sp)
 2006388:	2005b2c0 	call	2005b2c <__hi0bits>
 200638c:	00c00804 	movi	r3,32
 2006390:	1887c83a 	sub	r3,r3,r2
 2006394:	a0c00015 	stw	r3,0(r20)
 2006398:	00c00284 	movi	r3,10
 200639c:	84bfff04 	addi	r18,r16,-4
 20063a0:	18801216 	blt	r3,r2,20063ec <__b2d+0xa4>
 20063a4:	010002c4 	movi	r4,11
 20063a8:	2089c83a 	sub	r4,r4,r2
 20063ac:	8906d83a 	srl	r3,r17,r4
 20063b0:	18cffc34 	orhi	r3,r3,16368
 20063b4:	9c80322e 	bgeu	r19,r18,2006480 <__b2d+0x138>
 20063b8:	817ffe17 	ldw	r5,-8(r16)
 20063bc:	2908d83a 	srl	r4,r5,r4
 20063c0:	10800544 	addi	r2,r2,21
 20063c4:	88a2983a 	sll	r17,r17,r2
 20063c8:	2444b03a 	or	r2,r4,r17
 20063cc:	dfc00517 	ldw	ra,20(sp)
 20063d0:	dd000417 	ldw	r20,16(sp)
 20063d4:	dcc00317 	ldw	r19,12(sp)
 20063d8:	dc800217 	ldw	r18,8(sp)
 20063dc:	dc400117 	ldw	r17,4(sp)
 20063e0:	dc000017 	ldw	r16,0(sp)
 20063e4:	dec00604 	addi	sp,sp,24
 20063e8:	f800283a 	ret
 20063ec:	9c801636 	bltu	r19,r18,2006448 <__b2d+0x100>
 20063f0:	113ffd44 	addi	r4,r2,-11
 20063f4:	000b883a 	mov	r5,zero
 20063f8:	20001726 	beq	r4,zero,2006458 <__b2d+0x110>
 20063fc:	00c00ac4 	movi	r3,43
 2006400:	1885c83a 	sub	r2,r3,r2
 2006404:	8906983a 	sll	r3,r17,r4
 2006408:	288cd83a 	srl	r6,r5,r2
 200640c:	18cffc34 	orhi	r3,r3,16368
 2006410:	1986b03a 	or	r3,r3,r6
 2006414:	9c801c2e 	bgeu	r19,r18,2006488 <__b2d+0x140>
 2006418:	91bfff17 	ldw	r6,-4(r18)
 200641c:	3084d83a 	srl	r2,r6,r2
 2006420:	2908983a 	sll	r4,r5,r4
 2006424:	1104b03a 	or	r2,r2,r4
 2006428:	dfc00517 	ldw	ra,20(sp)
 200642c:	dd000417 	ldw	r20,16(sp)
 2006430:	dcc00317 	ldw	r19,12(sp)
 2006434:	dc800217 	ldw	r18,8(sp)
 2006438:	dc400117 	ldw	r17,4(sp)
 200643c:	dc000017 	ldw	r16,0(sp)
 2006440:	dec00604 	addi	sp,sp,24
 2006444:	f800283a 	ret
 2006448:	113ffd44 	addi	r4,r2,-11
 200644c:	84bffe04 	addi	r18,r16,-8
 2006450:	817ffe17 	ldw	r5,-8(r16)
 2006454:	203fe91e 	bne	r4,zero,20063fc <__b2d+0xb4>
 2006458:	88cffc34 	orhi	r3,r17,16368
 200645c:	2805883a 	mov	r2,r5
 2006460:	dfc00517 	ldw	ra,20(sp)
 2006464:	dd000417 	ldw	r20,16(sp)
 2006468:	dcc00317 	ldw	r19,12(sp)
 200646c:	dc800217 	ldw	r18,8(sp)
 2006470:	dc400117 	ldw	r17,4(sp)
 2006474:	dc000017 	ldw	r16,0(sp)
 2006478:	dec00604 	addi	sp,sp,24
 200647c:	f800283a 	ret
 2006480:	0009883a 	mov	r4,zero
 2006484:	003fce06 	br	20063c0 <__b2d+0x78>
 2006488:	0005883a 	mov	r2,zero
 200648c:	003fe406 	br	2006420 <__b2d+0xd8>

02006490 <__d2b>:
 2006490:	defff804 	addi	sp,sp,-32
 2006494:	dc400315 	stw	r17,12(sp)
 2006498:	3023883a 	mov	r17,r6
 200649c:	dc800415 	stw	r18,16(sp)
 20064a0:	8824907a 	slli	r18,r17,1
 20064a4:	dcc00515 	stw	r19,20(sp)
 20064a8:	2827883a 	mov	r19,r5
 20064ac:	9024d57a 	srli	r18,r18,21
 20064b0:	01400044 	movi	r5,1
 20064b4:	dd000615 	stw	r20,24(sp)
 20064b8:	dc000215 	stw	r16,8(sp)
 20064bc:	dfc00715 	stw	ra,28(sp)
 20064c0:	3829883a 	mov	r20,r7
 20064c4:	20058440 	call	2005844 <_Balloc>
 20064c8:	1021883a 	mov	r16,r2
 20064cc:	00800434 	movhi	r2,16
 20064d0:	10bfffc4 	addi	r2,r2,-1
 20064d4:	88a2703a 	and	r17,r17,r2
 20064d8:	90000126 	beq	r18,zero,20064e0 <__d2b+0x50>
 20064dc:	8c400434 	orhi	r17,r17,16
 20064e0:	dc400015 	stw	r17,0(sp)
 20064e4:	98002226 	beq	r19,zero,2006570 <__d2b+0xe0>
 20064e8:	d9000104 	addi	r4,sp,4
 20064ec:	dcc00115 	stw	r19,4(sp)
 20064f0:	2005b940 	call	2005b94 <__lo0bits>
 20064f4:	d8c00017 	ldw	r3,0(sp)
 20064f8:	10002d1e 	bne	r2,zero,20065b0 <__d2b+0x120>
 20064fc:	d9000117 	ldw	r4,4(sp)
 2006500:	81000515 	stw	r4,20(r16)
 2006504:	1823003a 	cmpeq	r17,r3,zero
 2006508:	01000084 	movi	r4,2
 200650c:	2463c83a 	sub	r17,r4,r17
 2006510:	80c00615 	stw	r3,24(r16)
 2006514:	84400415 	stw	r17,16(r16)
 2006518:	90001d1e 	bne	r18,zero,2006590 <__d2b+0x100>
 200651c:	88c00104 	addi	r3,r17,4
 2006520:	18c7883a 	add	r3,r3,r3
 2006524:	18c7883a 	add	r3,r3,r3
 2006528:	80c7883a 	add	r3,r16,r3
 200652c:	19000017 	ldw	r4,0(r3)
 2006530:	10bef384 	addi	r2,r2,-1074
 2006534:	a0800015 	stw	r2,0(r20)
 2006538:	2005b2c0 	call	2005b2c <__hi0bits>
 200653c:	8822917a 	slli	r17,r17,5
 2006540:	d8c00817 	ldw	r3,32(sp)
 2006544:	8885c83a 	sub	r2,r17,r2
 2006548:	18800015 	stw	r2,0(r3)
 200654c:	8005883a 	mov	r2,r16
 2006550:	dfc00717 	ldw	ra,28(sp)
 2006554:	dd000617 	ldw	r20,24(sp)
 2006558:	dcc00517 	ldw	r19,20(sp)
 200655c:	dc800417 	ldw	r18,16(sp)
 2006560:	dc400317 	ldw	r17,12(sp)
 2006564:	dc000217 	ldw	r16,8(sp)
 2006568:	dec00804 	addi	sp,sp,32
 200656c:	f800283a 	ret
 2006570:	d809883a 	mov	r4,sp
 2006574:	2005b940 	call	2005b94 <__lo0bits>
 2006578:	d8c00017 	ldw	r3,0(sp)
 200657c:	04400044 	movi	r17,1
 2006580:	84400415 	stw	r17,16(r16)
 2006584:	80c00515 	stw	r3,20(r16)
 2006588:	10800804 	addi	r2,r2,32
 200658c:	903fe326 	beq	r18,zero,200651c <__d2b+0x8c>
 2006590:	00c00d44 	movi	r3,53
 2006594:	94bef344 	addi	r18,r18,-1075
 2006598:	90a5883a 	add	r18,r18,r2
 200659c:	1885c83a 	sub	r2,r3,r2
 20065a0:	d8c00817 	ldw	r3,32(sp)
 20065a4:	a4800015 	stw	r18,0(r20)
 20065a8:	18800015 	stw	r2,0(r3)
 20065ac:	003fe706 	br	200654c <__d2b+0xbc>
 20065b0:	01000804 	movi	r4,32
 20065b4:	2089c83a 	sub	r4,r4,r2
 20065b8:	1908983a 	sll	r4,r3,r4
 20065bc:	d9400117 	ldw	r5,4(sp)
 20065c0:	1886d83a 	srl	r3,r3,r2
 20065c4:	2148b03a 	or	r4,r4,r5
 20065c8:	81000515 	stw	r4,20(r16)
 20065cc:	d8c00015 	stw	r3,0(sp)
 20065d0:	003fcc06 	br	2006504 <__d2b+0x74>

020065d4 <__ratio>:
 20065d4:	defff904 	addi	sp,sp,-28
 20065d8:	dc400315 	stw	r17,12(sp)
 20065dc:	2823883a 	mov	r17,r5
 20065e0:	d9400104 	addi	r5,sp,4
 20065e4:	dfc00615 	stw	ra,24(sp)
 20065e8:	dcc00515 	stw	r19,20(sp)
 20065ec:	dc800415 	stw	r18,16(sp)
 20065f0:	2027883a 	mov	r19,r4
 20065f4:	dc000215 	stw	r16,8(sp)
 20065f8:	20063480 	call	2006348 <__b2d>
 20065fc:	8809883a 	mov	r4,r17
 2006600:	d80b883a 	mov	r5,sp
 2006604:	1025883a 	mov	r18,r2
 2006608:	1821883a 	mov	r16,r3
 200660c:	20063480 	call	2006348 <__b2d>
 2006610:	99400417 	ldw	r5,16(r19)
 2006614:	89000417 	ldw	r4,16(r17)
 2006618:	d9800117 	ldw	r6,4(sp)
 200661c:	2909c83a 	sub	r4,r5,r4
 2006620:	d9400017 	ldw	r5,0(sp)
 2006624:	2008917a 	slli	r4,r4,5
 2006628:	314bc83a 	sub	r5,r6,r5
 200662c:	290b883a 	add	r5,r5,r4
 2006630:	01400e0e 	bge	zero,r5,200666c <__ratio+0x98>
 2006634:	280a953a 	slli	r5,r5,20
 2006638:	2c21883a 	add	r16,r5,r16
 200663c:	9009883a 	mov	r4,r18
 2006640:	800b883a 	mov	r5,r16
 2006644:	100d883a 	mov	r6,r2
 2006648:	180f883a 	mov	r7,r3
 200664c:	20087e00 	call	20087e0 <__divdf3>
 2006650:	dfc00617 	ldw	ra,24(sp)
 2006654:	dcc00517 	ldw	r19,20(sp)
 2006658:	dc800417 	ldw	r18,16(sp)
 200665c:	dc400317 	ldw	r17,12(sp)
 2006660:	dc000217 	ldw	r16,8(sp)
 2006664:	dec00704 	addi	sp,sp,28
 2006668:	f800283a 	ret
 200666c:	280a953a 	slli	r5,r5,20
 2006670:	1947c83a 	sub	r3,r3,r5
 2006674:	003ff106 	br	200663c <__ratio+0x68>

02006678 <_mprec_log10>:
 2006678:	defffe04 	addi	sp,sp,-8
 200667c:	dc000015 	stw	r16,0(sp)
 2006680:	dfc00115 	stw	ra,4(sp)
 2006684:	008005c4 	movi	r2,23
 2006688:	2021883a 	mov	r16,r4
 200668c:	11000d0e 	bge	r2,r4,20066c4 <_mprec_log10+0x4c>
 2006690:	0005883a 	mov	r2,zero
 2006694:	00cffc34 	movhi	r3,16368
 2006698:	843fffc4 	addi	r16,r16,-1
 200669c:	1009883a 	mov	r4,r2
 20066a0:	180b883a 	mov	r5,r3
 20066a4:	000d883a 	mov	r6,zero
 20066a8:	01d00934 	movhi	r7,16420
 20066ac:	20084fc0 	call	20084fc <__muldf3>
 20066b0:	803ff91e 	bne	r16,zero,2006698 <_mprec_log10+0x20>
 20066b4:	dfc00117 	ldw	ra,4(sp)
 20066b8:	dc000017 	ldw	r16,0(sp)
 20066bc:	dec00204 	addi	sp,sp,8
 20066c0:	f800283a 	ret
 20066c4:	202090fa 	slli	r16,r4,3
 20066c8:	00808074 	movhi	r2,513
 20066cc:	10aeba04 	addi	r2,r2,-17688
 20066d0:	1421883a 	add	r16,r2,r16
 20066d4:	80800017 	ldw	r2,0(r16)
 20066d8:	80c00117 	ldw	r3,4(r16)
 20066dc:	dfc00117 	ldw	ra,4(sp)
 20066e0:	dc000017 	ldw	r16,0(sp)
 20066e4:	dec00204 	addi	sp,sp,8
 20066e8:	f800283a 	ret

020066ec <__copybits>:
 20066ec:	297fffc4 	addi	r5,r5,-1
 20066f0:	31c00417 	ldw	r7,16(r6)
 20066f4:	2811d17a 	srai	r8,r5,5
 20066f8:	30800504 	addi	r2,r6,20
 20066fc:	39c00144 	addi	r7,r7,5
 2006700:	42000044 	addi	r8,r8,1
 2006704:	39cf883a 	add	r7,r7,r7
 2006708:	4211883a 	add	r8,r8,r8
 200670c:	39cf883a 	add	r7,r7,r7
 2006710:	4211883a 	add	r8,r8,r8
 2006714:	31cf883a 	add	r7,r6,r7
 2006718:	2211883a 	add	r8,r4,r8
 200671c:	11c00d2e 	bgeu	r2,r7,2006754 <__copybits+0x68>
 2006720:	2007883a 	mov	r3,r4
 2006724:	11400017 	ldw	r5,0(r2)
 2006728:	18c00104 	addi	r3,r3,4
 200672c:	10800104 	addi	r2,r2,4
 2006730:	197fff15 	stw	r5,-4(r3)
 2006734:	11fffb36 	bltu	r2,r7,2006724 <__copybits+0x38>
 2006738:	3985c83a 	sub	r2,r7,r6
 200673c:	10bffac4 	addi	r2,r2,-21
 2006740:	1004d0ba 	srli	r2,r2,2
 2006744:	10800044 	addi	r2,r2,1
 2006748:	1085883a 	add	r2,r2,r2
 200674c:	1085883a 	add	r2,r2,r2
 2006750:	2089883a 	add	r4,r4,r2
 2006754:	2200032e 	bgeu	r4,r8,2006764 <__copybits+0x78>
 2006758:	20000015 	stw	zero,0(r4)
 200675c:	21000104 	addi	r4,r4,4
 2006760:	223ffd36 	bltu	r4,r8,2006758 <__copybits+0x6c>
 2006764:	f800283a 	ret

02006768 <__any_on>:
 2006768:	21800417 	ldw	r6,16(r4)
 200676c:	2805d17a 	srai	r2,r5,5
 2006770:	20c00504 	addi	r3,r4,20
 2006774:	30800f0e 	bge	r6,r2,20067b4 <__any_on+0x4c>
 2006778:	3005883a 	mov	r2,r6
 200677c:	10800144 	addi	r2,r2,5
 2006780:	1085883a 	add	r2,r2,r2
 2006784:	1085883a 	add	r2,r2,r2
 2006788:	2089883a 	add	r4,r4,r2
 200678c:	1900152e 	bgeu	r3,r4,20067e4 <__any_on+0x7c>
 2006790:	20bfff17 	ldw	r2,-4(r4)
 2006794:	213fff04 	addi	r4,r4,-4
 2006798:	1000041e 	bne	r2,zero,20067ac <__any_on+0x44>
 200679c:	1900112e 	bgeu	r3,r4,20067e4 <__any_on+0x7c>
 20067a0:	213fff04 	addi	r4,r4,-4
 20067a4:	20800017 	ldw	r2,0(r4)
 20067a8:	103ffc26 	beq	r2,zero,200679c <__any_on+0x34>
 20067ac:	00800044 	movi	r2,1
 20067b0:	f800283a 	ret
 20067b4:	11bff10e 	bge	r2,r6,200677c <__any_on+0x14>
 20067b8:	294007cc 	andi	r5,r5,31
 20067bc:	283fef26 	beq	r5,zero,200677c <__any_on+0x14>
 20067c0:	11800144 	addi	r6,r2,5
 20067c4:	318d883a 	add	r6,r6,r6
 20067c8:	318d883a 	add	r6,r6,r6
 20067cc:	218d883a 	add	r6,r4,r6
 20067d0:	31800017 	ldw	r6,0(r6)
 20067d4:	314ed83a 	srl	r7,r6,r5
 20067d8:	394a983a 	sll	r5,r7,r5
 20067dc:	29bff31e 	bne	r5,r6,20067ac <__any_on+0x44>
 20067e0:	003fe606 	br	200677c <__any_on+0x14>
 20067e4:	0005883a 	mov	r2,zero
 20067e8:	f800283a 	ret

020067ec <_realloc_r>:
 20067ec:	defff504 	addi	sp,sp,-44
 20067f0:	dd400615 	stw	r21,24(sp)
 20067f4:	dc800315 	stw	r18,12(sp)
 20067f8:	dc000115 	stw	r16,4(sp)
 20067fc:	dfc00a15 	stw	ra,40(sp)
 2006800:	df000915 	stw	fp,36(sp)
 2006804:	ddc00815 	stw	r23,32(sp)
 2006808:	dd800715 	stw	r22,28(sp)
 200680c:	dd000515 	stw	r20,20(sp)
 2006810:	dcc00415 	stw	r19,16(sp)
 2006814:	dc400215 	stw	r17,8(sp)
 2006818:	2821883a 	mov	r16,r5
 200681c:	202b883a 	mov	r21,r4
 2006820:	3025883a 	mov	r18,r6
 2006824:	28009626 	beq	r5,zero,2006a80 <_realloc_r+0x294>
 2006828:	20099b80 	call	20099b8 <__malloc_lock>
 200682c:	80bfff17 	ldw	r2,-4(r16)
 2006830:	04ffff04 	movi	r19,-4
 2006834:	90c002c4 	addi	r3,r18,11
 2006838:	01000584 	movi	r4,22
 200683c:	85bffe04 	addi	r22,r16,-8
 2006840:	14e6703a 	and	r19,r2,r19
 2006844:	20c0372e 	bgeu	r4,r3,2006924 <_realloc_r+0x138>
 2006848:	047ffe04 	movi	r17,-8
 200684c:	1c62703a 	and	r17,r3,r17
 2006850:	8807883a 	mov	r3,r17
 2006854:	88005a16 	blt	r17,zero,20069c0 <_realloc_r+0x1d4>
 2006858:	8c805936 	bltu	r17,r18,20069c0 <_realloc_r+0x1d4>
 200685c:	98c0340e 	bge	r19,r3,2006930 <_realloc_r+0x144>
 2006860:	07008074 	movhi	fp,513
 2006864:	e7304204 	addi	fp,fp,-16120
 2006868:	e1400217 	ldw	r5,8(fp)
 200686c:	b4c9883a 	add	r4,r22,r19
 2006870:	29009026 	beq	r5,r4,2006ab4 <_realloc_r+0x2c8>
 2006874:	21800117 	ldw	r6,4(r4)
 2006878:	01ffff84 	movi	r7,-2
 200687c:	31ce703a 	and	r7,r6,r7
 2006880:	21cf883a 	add	r7,r4,r7
 2006884:	39c00117 	ldw	r7,4(r7)
 2006888:	39c0004c 	andi	r7,r7,1
 200688c:	38004326 	beq	r7,zero,200699c <_realloc_r+0x1b0>
 2006890:	000d883a 	mov	r6,zero
 2006894:	0009883a 	mov	r4,zero
 2006898:	1080004c 	andi	r2,r2,1
 200689c:	10005a1e 	bne	r2,zero,2006a08 <_realloc_r+0x21c>
 20068a0:	85fffe17 	ldw	r23,-8(r16)
 20068a4:	00bfff04 	movi	r2,-4
 20068a8:	b5efc83a 	sub	r23,r22,r23
 20068ac:	b9c00117 	ldw	r7,4(r23)
 20068b0:	388e703a 	and	r7,r7,r2
 20068b4:	3ccf883a 	add	r7,r7,r19
 20068b8:	20005226 	beq	r4,zero,2006a04 <_realloc_r+0x218>
 20068bc:	31e9883a 	add	r20,r6,r7
 20068c0:	2140c726 	beq	r4,r5,2006be0 <_realloc_r+0x3f4>
 20068c4:	a0c04f16 	blt	r20,r3,2006a04 <_realloc_r+0x218>
 20068c8:	20800317 	ldw	r2,12(r4)
 20068cc:	20c00217 	ldw	r3,8(r4)
 20068d0:	99bfff04 	addi	r6,r19,-4
 20068d4:	01000904 	movi	r4,36
 20068d8:	18800315 	stw	r2,12(r3)
 20068dc:	10c00215 	stw	r3,8(r2)
 20068e0:	b8c00217 	ldw	r3,8(r23)
 20068e4:	b8800317 	ldw	r2,12(r23)
 20068e8:	bc800204 	addi	r18,r23,8
 20068ec:	18800315 	stw	r2,12(r3)
 20068f0:	10c00215 	stw	r3,8(r2)
 20068f4:	2180ed36 	bltu	r4,r6,2006cac <_realloc_r+0x4c0>
 20068f8:	008004c4 	movi	r2,19
 20068fc:	11809b2e 	bgeu	r2,r6,2006b6c <_realloc_r+0x380>
 2006900:	80800017 	ldw	r2,0(r16)
 2006904:	b8800215 	stw	r2,8(r23)
 2006908:	80800117 	ldw	r2,4(r16)
 200690c:	b8800315 	stw	r2,12(r23)
 2006910:	008006c4 	movi	r2,27
 2006914:	1180f936 	bltu	r2,r6,2006cfc <_realloc_r+0x510>
 2006918:	b8800404 	addi	r2,r23,16
 200691c:	80c00204 	addi	r3,r16,8
 2006920:	00009406 	br	2006b74 <_realloc_r+0x388>
 2006924:	00c00404 	movi	r3,16
 2006928:	1823883a 	mov	r17,r3
 200692c:	003fca06 	br	2006858 <_realloc_r+0x6c>
 2006930:	9829883a 	mov	r20,r19
 2006934:	a447c83a 	sub	r3,r20,r17
 2006938:	010003c4 	movi	r4,15
 200693c:	1080004c 	andi	r2,r2,1
 2006940:	20c02336 	bltu	r4,r3,20069d0 <_realloc_r+0x1e4>
 2006944:	1504b03a 	or	r2,r2,r20
 2006948:	b0800115 	stw	r2,4(r22)
 200694c:	b52d883a 	add	r22,r22,r20
 2006950:	b0800117 	ldw	r2,4(r22)
 2006954:	10800054 	ori	r2,r2,1
 2006958:	b0800115 	stw	r2,4(r22)
 200695c:	a809883a 	mov	r4,r21
 2006960:	20099d80 	call	20099d8 <__malloc_unlock>
 2006964:	8025883a 	mov	r18,r16
 2006968:	9005883a 	mov	r2,r18
 200696c:	dfc00a17 	ldw	ra,40(sp)
 2006970:	df000917 	ldw	fp,36(sp)
 2006974:	ddc00817 	ldw	r23,32(sp)
 2006978:	dd800717 	ldw	r22,28(sp)
 200697c:	dd400617 	ldw	r21,24(sp)
 2006980:	dd000517 	ldw	r20,20(sp)
 2006984:	dcc00417 	ldw	r19,16(sp)
 2006988:	dc800317 	ldw	r18,12(sp)
 200698c:	dc400217 	ldw	r17,8(sp)
 2006990:	dc000117 	ldw	r16,4(sp)
 2006994:	dec00b04 	addi	sp,sp,44
 2006998:	f800283a 	ret
 200699c:	01ffff04 	movi	r7,-4
 20069a0:	31cc703a 	and	r6,r6,r7
 20069a4:	34e9883a 	add	r20,r6,r19
 20069a8:	a0ffbb16 	blt	r20,r3,2006898 <_realloc_r+0xac>
 20069ac:	20c00317 	ldw	r3,12(r4)
 20069b0:	21000217 	ldw	r4,8(r4)
 20069b4:	20c00315 	stw	r3,12(r4)
 20069b8:	19000215 	stw	r4,8(r3)
 20069bc:	003fdd06 	br	2006934 <_realloc_r+0x148>
 20069c0:	00800304 	movi	r2,12
 20069c4:	a8800015 	stw	r2,0(r21)
 20069c8:	0025883a 	mov	r18,zero
 20069cc:	003fe606 	br	2006968 <_realloc_r+0x17c>
 20069d0:	1444b03a 	or	r2,r2,r17
 20069d4:	b0800115 	stw	r2,4(r22)
 20069d8:	b44b883a 	add	r5,r22,r17
 20069dc:	18800054 	ori	r2,r3,1
 20069e0:	28800115 	stw	r2,4(r5)
 20069e4:	28c7883a 	add	r3,r5,r3
 20069e8:	18800117 	ldw	r2,4(r3)
 20069ec:	a809883a 	mov	r4,r21
 20069f0:	29400204 	addi	r5,r5,8
 20069f4:	10800054 	ori	r2,r2,1
 20069f8:	18800115 	stw	r2,4(r3)
 20069fc:	20042100 	call	2004210 <_free_r>
 2006a00:	003fd606 	br	200695c <_realloc_r+0x170>
 2006a04:	38c0330e 	bge	r7,r3,2006ad4 <_realloc_r+0x2e8>
 2006a08:	900b883a 	mov	r5,r18
 2006a0c:	a809883a 	mov	r4,r21
 2006a10:	2004da80 	call	2004da8 <_malloc_r>
 2006a14:	1025883a 	mov	r18,r2
 2006a18:	10001626 	beq	r2,zero,2006a74 <_realloc_r+0x288>
 2006a1c:	80bfff17 	ldw	r2,-4(r16)
 2006a20:	00ffff84 	movi	r3,-2
 2006a24:	913ffe04 	addi	r4,r18,-8
 2006a28:	10c6703a 	and	r3,r2,r3
 2006a2c:	b0c7883a 	add	r3,r22,r3
 2006a30:	20c09926 	beq	r4,r3,2006c98 <_realloc_r+0x4ac>
 2006a34:	99bfff04 	addi	r6,r19,-4
 2006a38:	00800904 	movi	r2,36
 2006a3c:	11806436 	bltu	r2,r6,2006bd0 <_realloc_r+0x3e4>
 2006a40:	00c004c4 	movi	r3,19
 2006a44:	19804036 	bltu	r3,r6,2006b48 <_realloc_r+0x35c>
 2006a48:	9005883a 	mov	r2,r18
 2006a4c:	8007883a 	mov	r3,r16
 2006a50:	19000017 	ldw	r4,0(r3)
 2006a54:	11000015 	stw	r4,0(r2)
 2006a58:	19000117 	ldw	r4,4(r3)
 2006a5c:	11000115 	stw	r4,4(r2)
 2006a60:	18c00217 	ldw	r3,8(r3)
 2006a64:	10c00215 	stw	r3,8(r2)
 2006a68:	a809883a 	mov	r4,r21
 2006a6c:	800b883a 	mov	r5,r16
 2006a70:	20042100 	call	2004210 <_free_r>
 2006a74:	a809883a 	mov	r4,r21
 2006a78:	20099d80 	call	20099d8 <__malloc_unlock>
 2006a7c:	003fba06 	br	2006968 <_realloc_r+0x17c>
 2006a80:	300b883a 	mov	r5,r6
 2006a84:	dfc00a17 	ldw	ra,40(sp)
 2006a88:	df000917 	ldw	fp,36(sp)
 2006a8c:	ddc00817 	ldw	r23,32(sp)
 2006a90:	dd800717 	ldw	r22,28(sp)
 2006a94:	dd400617 	ldw	r21,24(sp)
 2006a98:	dd000517 	ldw	r20,20(sp)
 2006a9c:	dcc00417 	ldw	r19,16(sp)
 2006aa0:	dc800317 	ldw	r18,12(sp)
 2006aa4:	dc400217 	ldw	r17,8(sp)
 2006aa8:	dc000117 	ldw	r16,4(sp)
 2006aac:	dec00b04 	addi	sp,sp,44
 2006ab0:	2004da81 	jmpi	2004da8 <_malloc_r>
 2006ab4:	29800117 	ldw	r6,4(r5)
 2006ab8:	013fff04 	movi	r4,-4
 2006abc:	89c00404 	addi	r7,r17,16
 2006ac0:	310c703a 	and	r6,r6,r4
 2006ac4:	34c9883a 	add	r4,r6,r19
 2006ac8:	21c0340e 	bge	r4,r7,2006b9c <_realloc_r+0x3b0>
 2006acc:	2809883a 	mov	r4,r5
 2006ad0:	003f7106 	br	2006898 <_realloc_r+0xac>
 2006ad4:	b8800317 	ldw	r2,12(r23)
 2006ad8:	b8c00217 	ldw	r3,8(r23)
 2006adc:	99bfff04 	addi	r6,r19,-4
 2006ae0:	01000904 	movi	r4,36
 2006ae4:	18800315 	stw	r2,12(r3)
 2006ae8:	10c00215 	stw	r3,8(r2)
 2006aec:	bc800204 	addi	r18,r23,8
 2006af0:	21807836 	bltu	r4,r6,2006cd4 <_realloc_r+0x4e8>
 2006af4:	008004c4 	movi	r2,19
 2006af8:	1180732e 	bgeu	r2,r6,2006cc8 <_realloc_r+0x4dc>
 2006afc:	80800017 	ldw	r2,0(r16)
 2006b00:	b8800215 	stw	r2,8(r23)
 2006b04:	80800117 	ldw	r2,4(r16)
 2006b08:	b8800315 	stw	r2,12(r23)
 2006b0c:	008006c4 	movi	r2,27
 2006b10:	11808936 	bltu	r2,r6,2006d38 <_realloc_r+0x54c>
 2006b14:	b8800404 	addi	r2,r23,16
 2006b18:	80c00204 	addi	r3,r16,8
 2006b1c:	19000017 	ldw	r4,0(r3)
 2006b20:	9021883a 	mov	r16,r18
 2006b24:	3829883a 	mov	r20,r7
 2006b28:	11000015 	stw	r4,0(r2)
 2006b2c:	19000117 	ldw	r4,4(r3)
 2006b30:	b82d883a 	mov	r22,r23
 2006b34:	11000115 	stw	r4,4(r2)
 2006b38:	18c00217 	ldw	r3,8(r3)
 2006b3c:	10c00215 	stw	r3,8(r2)
 2006b40:	b8800117 	ldw	r2,4(r23)
 2006b44:	003f7b06 	br	2006934 <_realloc_r+0x148>
 2006b48:	80c00017 	ldw	r3,0(r16)
 2006b4c:	90c00015 	stw	r3,0(r18)
 2006b50:	80c00117 	ldw	r3,4(r16)
 2006b54:	90c00115 	stw	r3,4(r18)
 2006b58:	00c006c4 	movi	r3,27
 2006b5c:	19804636 	bltu	r3,r6,2006c78 <_realloc_r+0x48c>
 2006b60:	90800204 	addi	r2,r18,8
 2006b64:	80c00204 	addi	r3,r16,8
 2006b68:	003fb906 	br	2006a50 <_realloc_r+0x264>
 2006b6c:	9005883a 	mov	r2,r18
 2006b70:	8007883a 	mov	r3,r16
 2006b74:	19000017 	ldw	r4,0(r3)
 2006b78:	9021883a 	mov	r16,r18
 2006b7c:	b82d883a 	mov	r22,r23
 2006b80:	11000015 	stw	r4,0(r2)
 2006b84:	19000117 	ldw	r4,4(r3)
 2006b88:	11000115 	stw	r4,4(r2)
 2006b8c:	18c00217 	ldw	r3,8(r3)
 2006b90:	10c00215 	stw	r3,8(r2)
 2006b94:	b8800117 	ldw	r2,4(r23)
 2006b98:	003f6606 	br	2006934 <_realloc_r+0x148>
 2006b9c:	2445c83a 	sub	r2,r4,r17
 2006ba0:	b46d883a 	add	r22,r22,r17
 2006ba4:	10800054 	ori	r2,r2,1
 2006ba8:	b0800115 	stw	r2,4(r22)
 2006bac:	80bfff17 	ldw	r2,-4(r16)
 2006bb0:	a809883a 	mov	r4,r21
 2006bb4:	e5800215 	stw	r22,8(fp)
 2006bb8:	1080004c 	andi	r2,r2,1
 2006bbc:	88a2b03a 	or	r17,r17,r2
 2006bc0:	847fff15 	stw	r17,-4(r16)
 2006bc4:	20099d80 	call	20099d8 <__malloc_unlock>
 2006bc8:	8025883a 	mov	r18,r16
 2006bcc:	003f6606 	br	2006968 <_realloc_r+0x17c>
 2006bd0:	9009883a 	mov	r4,r18
 2006bd4:	800b883a 	mov	r5,r16
 2006bd8:	200571c0 	call	200571c <memmove>
 2006bdc:	003fa206 	br	2006a68 <_realloc_r+0x27c>
 2006be0:	88800404 	addi	r2,r17,16
 2006be4:	a0bf8716 	blt	r20,r2,2006a04 <_realloc_r+0x218>
 2006be8:	b8800317 	ldw	r2,12(r23)
 2006bec:	b8c00217 	ldw	r3,8(r23)
 2006bf0:	99bfff04 	addi	r6,r19,-4
 2006bf4:	01000904 	movi	r4,36
 2006bf8:	18800315 	stw	r2,12(r3)
 2006bfc:	10c00215 	stw	r3,8(r2)
 2006c00:	bc800204 	addi	r18,r23,8
 2006c04:	21806536 	bltu	r4,r6,2006d9c <_realloc_r+0x5b0>
 2006c08:	008004c4 	movi	r2,19
 2006c0c:	1180592e 	bgeu	r2,r6,2006d74 <_realloc_r+0x588>
 2006c10:	80800017 	ldw	r2,0(r16)
 2006c14:	b8800215 	stw	r2,8(r23)
 2006c18:	80800117 	ldw	r2,4(r16)
 2006c1c:	b8800315 	stw	r2,12(r23)
 2006c20:	008006c4 	movi	r2,27
 2006c24:	11806136 	bltu	r2,r6,2006dac <_realloc_r+0x5c0>
 2006c28:	b8800404 	addi	r2,r23,16
 2006c2c:	80c00204 	addi	r3,r16,8
 2006c30:	19000017 	ldw	r4,0(r3)
 2006c34:	11000015 	stw	r4,0(r2)
 2006c38:	19000117 	ldw	r4,4(r3)
 2006c3c:	11000115 	stw	r4,4(r2)
 2006c40:	18c00217 	ldw	r3,8(r3)
 2006c44:	10c00215 	stw	r3,8(r2)
 2006c48:	a447c83a 	sub	r3,r20,r17
 2006c4c:	bc45883a 	add	r2,r23,r17
 2006c50:	18c00054 	ori	r3,r3,1
 2006c54:	10c00115 	stw	r3,4(r2)
 2006c58:	b8c00117 	ldw	r3,4(r23)
 2006c5c:	e0800215 	stw	r2,8(fp)
 2006c60:	a809883a 	mov	r4,r21
 2006c64:	1880004c 	andi	r2,r3,1
 2006c68:	88a2b03a 	or	r17,r17,r2
 2006c6c:	bc400115 	stw	r17,4(r23)
 2006c70:	20099d80 	call	20099d8 <__malloc_unlock>
 2006c74:	003f3c06 	br	2006968 <_realloc_r+0x17c>
 2006c78:	80c00217 	ldw	r3,8(r16)
 2006c7c:	90c00215 	stw	r3,8(r18)
 2006c80:	80c00317 	ldw	r3,12(r16)
 2006c84:	90c00315 	stw	r3,12(r18)
 2006c88:	30802426 	beq	r6,r2,2006d1c <_realloc_r+0x530>
 2006c8c:	90800404 	addi	r2,r18,16
 2006c90:	80c00404 	addi	r3,r16,16
 2006c94:	003f6e06 	br	2006a50 <_realloc_r+0x264>
 2006c98:	953fff17 	ldw	r20,-4(r18)
 2006c9c:	00ffff04 	movi	r3,-4
 2006ca0:	a0e8703a 	and	r20,r20,r3
 2006ca4:	a4e9883a 	add	r20,r20,r19
 2006ca8:	003f2206 	br	2006934 <_realloc_r+0x148>
 2006cac:	800b883a 	mov	r5,r16
 2006cb0:	9009883a 	mov	r4,r18
 2006cb4:	200571c0 	call	200571c <memmove>
 2006cb8:	9021883a 	mov	r16,r18
 2006cbc:	b8800117 	ldw	r2,4(r23)
 2006cc0:	b82d883a 	mov	r22,r23
 2006cc4:	003f1b06 	br	2006934 <_realloc_r+0x148>
 2006cc8:	9005883a 	mov	r2,r18
 2006ccc:	8007883a 	mov	r3,r16
 2006cd0:	003f9206 	br	2006b1c <_realloc_r+0x330>
 2006cd4:	800b883a 	mov	r5,r16
 2006cd8:	9009883a 	mov	r4,r18
 2006cdc:	d9c00015 	stw	r7,0(sp)
 2006ce0:	200571c0 	call	200571c <memmove>
 2006ce4:	d9c00017 	ldw	r7,0(sp)
 2006ce8:	9021883a 	mov	r16,r18
 2006cec:	b8800117 	ldw	r2,4(r23)
 2006cf0:	3829883a 	mov	r20,r7
 2006cf4:	b82d883a 	mov	r22,r23
 2006cf8:	003f0e06 	br	2006934 <_realloc_r+0x148>
 2006cfc:	80800217 	ldw	r2,8(r16)
 2006d00:	b8800415 	stw	r2,16(r23)
 2006d04:	80800317 	ldw	r2,12(r16)
 2006d08:	b8800515 	stw	r2,20(r23)
 2006d0c:	31001226 	beq	r6,r4,2006d58 <_realloc_r+0x56c>
 2006d10:	b8800604 	addi	r2,r23,24
 2006d14:	80c00404 	addi	r3,r16,16
 2006d18:	003f9606 	br	2006b74 <_realloc_r+0x388>
 2006d1c:	81000417 	ldw	r4,16(r16)
 2006d20:	90800604 	addi	r2,r18,24
 2006d24:	80c00604 	addi	r3,r16,24
 2006d28:	91000415 	stw	r4,16(r18)
 2006d2c:	81000517 	ldw	r4,20(r16)
 2006d30:	91000515 	stw	r4,20(r18)
 2006d34:	003f4606 	br	2006a50 <_realloc_r+0x264>
 2006d38:	80800217 	ldw	r2,8(r16)
 2006d3c:	b8800415 	stw	r2,16(r23)
 2006d40:	80800317 	ldw	r2,12(r16)
 2006d44:	b8800515 	stw	r2,20(r23)
 2006d48:	31000d26 	beq	r6,r4,2006d80 <_realloc_r+0x594>
 2006d4c:	b8800604 	addi	r2,r23,24
 2006d50:	80c00404 	addi	r3,r16,16
 2006d54:	003f7106 	br	2006b1c <_realloc_r+0x330>
 2006d58:	81000417 	ldw	r4,16(r16)
 2006d5c:	b8800804 	addi	r2,r23,32
 2006d60:	80c00604 	addi	r3,r16,24
 2006d64:	b9000615 	stw	r4,24(r23)
 2006d68:	81000517 	ldw	r4,20(r16)
 2006d6c:	b9000715 	stw	r4,28(r23)
 2006d70:	003f8006 	br	2006b74 <_realloc_r+0x388>
 2006d74:	9005883a 	mov	r2,r18
 2006d78:	8007883a 	mov	r3,r16
 2006d7c:	003fac06 	br	2006c30 <_realloc_r+0x444>
 2006d80:	81000417 	ldw	r4,16(r16)
 2006d84:	b8800804 	addi	r2,r23,32
 2006d88:	80c00604 	addi	r3,r16,24
 2006d8c:	b9000615 	stw	r4,24(r23)
 2006d90:	81000517 	ldw	r4,20(r16)
 2006d94:	b9000715 	stw	r4,28(r23)
 2006d98:	003f6006 	br	2006b1c <_realloc_r+0x330>
 2006d9c:	9009883a 	mov	r4,r18
 2006da0:	800b883a 	mov	r5,r16
 2006da4:	200571c0 	call	200571c <memmove>
 2006da8:	003fa706 	br	2006c48 <_realloc_r+0x45c>
 2006dac:	80800217 	ldw	r2,8(r16)
 2006db0:	b8800415 	stw	r2,16(r23)
 2006db4:	80800317 	ldw	r2,12(r16)
 2006db8:	b8800515 	stw	r2,20(r23)
 2006dbc:	31000326 	beq	r6,r4,2006dcc <_realloc_r+0x5e0>
 2006dc0:	b8800604 	addi	r2,r23,24
 2006dc4:	80c00404 	addi	r3,r16,16
 2006dc8:	003f9906 	br	2006c30 <_realloc_r+0x444>
 2006dcc:	81000417 	ldw	r4,16(r16)
 2006dd0:	b8800804 	addi	r2,r23,32
 2006dd4:	80c00604 	addi	r3,r16,24
 2006dd8:	b9000615 	stw	r4,24(r23)
 2006ddc:	81000517 	ldw	r4,20(r16)
 2006de0:	b9000715 	stw	r4,28(r23)
 2006de4:	003f9206 	br	2006c30 <_realloc_r+0x444>

02006de8 <__isinfd>:
 2006de8:	0105c83a 	sub	r2,zero,r4
 2006dec:	1108b03a 	or	r4,r2,r4
 2006df0:	2004d7fa 	srli	r2,r4,31
 2006df4:	00e00034 	movhi	r3,32768
 2006df8:	18ffffc4 	addi	r3,r3,-1
 2006dfc:	28ca703a 	and	r5,r5,r3
 2006e00:	1144b03a 	or	r2,r2,r5
 2006e04:	00dffc34 	movhi	r3,32752
 2006e08:	1885c83a 	sub	r2,r3,r2
 2006e0c:	0087c83a 	sub	r3,zero,r2
 2006e10:	1884b03a 	or	r2,r3,r2
 2006e14:	1005d7fa 	srai	r2,r2,31
 2006e18:	10800044 	addi	r2,r2,1
 2006e1c:	f800283a 	ret

02006e20 <__isnand>:
 2006e20:	0105c83a 	sub	r2,zero,r4
 2006e24:	1108b03a 	or	r4,r2,r4
 2006e28:	2004d7fa 	srli	r2,r4,31
 2006e2c:	00e00034 	movhi	r3,32768
 2006e30:	18ffffc4 	addi	r3,r3,-1
 2006e34:	28ca703a 	and	r5,r5,r3
 2006e38:	1144b03a 	or	r2,r2,r5
 2006e3c:	00dffc34 	movhi	r3,32752
 2006e40:	1885c83a 	sub	r2,r3,r2
 2006e44:	1004d7fa 	srli	r2,r2,31
 2006e48:	f800283a 	ret

02006e4c <_sbrk_r>:
 2006e4c:	defffd04 	addi	sp,sp,-12
 2006e50:	dc400115 	stw	r17,4(sp)
 2006e54:	dc000015 	stw	r16,0(sp)
 2006e58:	2023883a 	mov	r17,r4
 2006e5c:	04008074 	movhi	r16,513
 2006e60:	8435dc04 	addi	r16,r16,-10384
 2006e64:	2809883a 	mov	r4,r5
 2006e68:	dfc00215 	stw	ra,8(sp)
 2006e6c:	80000015 	stw	zero,0(r16)
 2006e70:	2009b980 	call	2009b98 <sbrk>
 2006e74:	00ffffc4 	movi	r3,-1
 2006e78:	10c00526 	beq	r2,r3,2006e90 <_sbrk_r+0x44>
 2006e7c:	dfc00217 	ldw	ra,8(sp)
 2006e80:	dc400117 	ldw	r17,4(sp)
 2006e84:	dc000017 	ldw	r16,0(sp)
 2006e88:	dec00304 	addi	sp,sp,12
 2006e8c:	f800283a 	ret
 2006e90:	80c00017 	ldw	r3,0(r16)
 2006e94:	183ff926 	beq	r3,zero,2006e7c <_sbrk_r+0x30>
 2006e98:	88c00015 	stw	r3,0(r17)
 2006e9c:	dfc00217 	ldw	ra,8(sp)
 2006ea0:	dc400117 	ldw	r17,4(sp)
 2006ea4:	dc000017 	ldw	r16,0(sp)
 2006ea8:	dec00304 	addi	sp,sp,12
 2006eac:	f800283a 	ret

02006eb0 <__sread>:
 2006eb0:	defffe04 	addi	sp,sp,-8
 2006eb4:	dc000015 	stw	r16,0(sp)
 2006eb8:	2821883a 	mov	r16,r5
 2006ebc:	2940038f 	ldh	r5,14(r5)
 2006ec0:	dfc00115 	stw	ra,4(sp)
 2006ec4:	20075340 	call	2007534 <_read_r>
 2006ec8:	10000716 	blt	r2,zero,2006ee8 <__sread+0x38>
 2006ecc:	80c01417 	ldw	r3,80(r16)
 2006ed0:	1887883a 	add	r3,r3,r2
 2006ed4:	80c01415 	stw	r3,80(r16)
 2006ed8:	dfc00117 	ldw	ra,4(sp)
 2006edc:	dc000017 	ldw	r16,0(sp)
 2006ee0:	dec00204 	addi	sp,sp,8
 2006ee4:	f800283a 	ret
 2006ee8:	80c0030b 	ldhu	r3,12(r16)
 2006eec:	18fbffcc 	andi	r3,r3,61439
 2006ef0:	80c0030d 	sth	r3,12(r16)
 2006ef4:	dfc00117 	ldw	ra,4(sp)
 2006ef8:	dc000017 	ldw	r16,0(sp)
 2006efc:	dec00204 	addi	sp,sp,8
 2006f00:	f800283a 	ret

02006f04 <__swrite>:
 2006f04:	2880030b 	ldhu	r2,12(r5)
 2006f08:	defffb04 	addi	sp,sp,-20
 2006f0c:	dcc00315 	stw	r19,12(sp)
 2006f10:	10c0400c 	andi	r3,r2,256
 2006f14:	18ffffcc 	andi	r3,r3,65535
 2006f18:	18e0001c 	xori	r3,r3,32768
 2006f1c:	dc800215 	stw	r18,8(sp)
 2006f20:	dc400115 	stw	r17,4(sp)
 2006f24:	dc000015 	stw	r16,0(sp)
 2006f28:	dfc00415 	stw	ra,16(sp)
 2006f2c:	18e00004 	addi	r3,r3,-32768
 2006f30:	2821883a 	mov	r16,r5
 2006f34:	2027883a 	mov	r19,r4
 2006f38:	3025883a 	mov	r18,r6
 2006f3c:	3823883a 	mov	r17,r7
 2006f40:	18000526 	beq	r3,zero,2006f58 <__swrite+0x54>
 2006f44:	2940038f 	ldh	r5,14(r5)
 2006f48:	000d883a 	mov	r6,zero
 2006f4c:	01c00084 	movi	r7,2
 2006f50:	20074c80 	call	20074c8 <_lseek_r>
 2006f54:	8080030b 	ldhu	r2,12(r16)
 2006f58:	8140038f 	ldh	r5,14(r16)
 2006f5c:	10bbffcc 	andi	r2,r2,61439
 2006f60:	9809883a 	mov	r4,r19
 2006f64:	900d883a 	mov	r6,r18
 2006f68:	880f883a 	mov	r7,r17
 2006f6c:	8080030d 	sth	r2,12(r16)
 2006f70:	dfc00417 	ldw	ra,16(sp)
 2006f74:	dcc00317 	ldw	r19,12(sp)
 2006f78:	dc800217 	ldw	r18,8(sp)
 2006f7c:	dc400117 	ldw	r17,4(sp)
 2006f80:	dc000017 	ldw	r16,0(sp)
 2006f84:	dec00504 	addi	sp,sp,20
 2006f88:	20071201 	jmpi	2007120 <_write_r>

02006f8c <__sseek>:
 2006f8c:	defffe04 	addi	sp,sp,-8
 2006f90:	dc000015 	stw	r16,0(sp)
 2006f94:	2821883a 	mov	r16,r5
 2006f98:	2940038f 	ldh	r5,14(r5)
 2006f9c:	dfc00115 	stw	ra,4(sp)
 2006fa0:	20074c80 	call	20074c8 <_lseek_r>
 2006fa4:	00ffffc4 	movi	r3,-1
 2006fa8:	10c00826 	beq	r2,r3,2006fcc <__sseek+0x40>
 2006fac:	80c0030b 	ldhu	r3,12(r16)
 2006fb0:	80801415 	stw	r2,80(r16)
 2006fb4:	18c40014 	ori	r3,r3,4096
 2006fb8:	80c0030d 	sth	r3,12(r16)
 2006fbc:	dfc00117 	ldw	ra,4(sp)
 2006fc0:	dc000017 	ldw	r16,0(sp)
 2006fc4:	dec00204 	addi	sp,sp,8
 2006fc8:	f800283a 	ret
 2006fcc:	80c0030b 	ldhu	r3,12(r16)
 2006fd0:	18fbffcc 	andi	r3,r3,61439
 2006fd4:	80c0030d 	sth	r3,12(r16)
 2006fd8:	dfc00117 	ldw	ra,4(sp)
 2006fdc:	dc000017 	ldw	r16,0(sp)
 2006fe0:	dec00204 	addi	sp,sp,8
 2006fe4:	f800283a 	ret

02006fe8 <__sclose>:
 2006fe8:	2940038f 	ldh	r5,14(r5)
 2006fec:	20072481 	jmpi	2007248 <_close_r>

02006ff0 <strcmp>:
 2006ff0:	2904b03a 	or	r2,r5,r4
 2006ff4:	108000cc 	andi	r2,r2,3
 2006ff8:	1000171e 	bne	r2,zero,2007058 <strcmp+0x68>
 2006ffc:	20800017 	ldw	r2,0(r4)
 2007000:	28c00017 	ldw	r3,0(r5)
 2007004:	10c0141e 	bne	r2,r3,2007058 <strcmp+0x68>
 2007008:	027fbff4 	movhi	r9,65279
 200700c:	4a7fbfc4 	addi	r9,r9,-257
 2007010:	1247883a 	add	r3,r2,r9
 2007014:	0084303a 	nor	r2,zero,r2
 2007018:	1884703a 	and	r2,r3,r2
 200701c:	02202074 	movhi	r8,32897
 2007020:	42202004 	addi	r8,r8,-32640
 2007024:	1204703a 	and	r2,r2,r8
 2007028:	10000226 	beq	r2,zero,2007034 <strcmp+0x44>
 200702c:	00001706 	br	200708c <strcmp+0x9c>
 2007030:	3000161e 	bne	r6,zero,200708c <strcmp+0x9c>
 2007034:	21000104 	addi	r4,r4,4
 2007038:	20800017 	ldw	r2,0(r4)
 200703c:	29400104 	addi	r5,r5,4
 2007040:	28c00017 	ldw	r3,0(r5)
 2007044:	124f883a 	add	r7,r2,r9
 2007048:	008c303a 	nor	r6,zero,r2
 200704c:	398c703a 	and	r6,r7,r6
 2007050:	320c703a 	and	r6,r6,r8
 2007054:	10fff626 	beq	r2,r3,2007030 <strcmp+0x40>
 2007058:	20800007 	ldb	r2,0(r4)
 200705c:	1000051e 	bne	r2,zero,2007074 <strcmp+0x84>
 2007060:	00000606 	br	200707c <strcmp+0x8c>
 2007064:	21000044 	addi	r4,r4,1
 2007068:	20800007 	ldb	r2,0(r4)
 200706c:	29400044 	addi	r5,r5,1
 2007070:	10000226 	beq	r2,zero,200707c <strcmp+0x8c>
 2007074:	28c00007 	ldb	r3,0(r5)
 2007078:	10fffa26 	beq	r2,r3,2007064 <strcmp+0x74>
 200707c:	20c00003 	ldbu	r3,0(r4)
 2007080:	28800003 	ldbu	r2,0(r5)
 2007084:	1885c83a 	sub	r2,r3,r2
 2007088:	f800283a 	ret
 200708c:	0005883a 	mov	r2,zero
 2007090:	f800283a 	ret

02007094 <strlen>:
 2007094:	208000cc 	andi	r2,r4,3
 2007098:	10001f1e 	bne	r2,zero,2007118 <strlen+0x84>
 200709c:	20800017 	ldw	r2,0(r4)
 20070a0:	01ffbff4 	movhi	r7,65279
 20070a4:	39ffbfc4 	addi	r7,r7,-257
 20070a8:	01a02074 	movhi	r6,32897
 20070ac:	31a02004 	addi	r6,r6,-32640
 20070b0:	11c7883a 	add	r3,r2,r7
 20070b4:	0084303a 	nor	r2,zero,r2
 20070b8:	1886703a 	and	r3,r3,r2
 20070bc:	1986703a 	and	r3,r3,r6
 20070c0:	2005883a 	mov	r2,r4
 20070c4:	1800101e 	bne	r3,zero,2007108 <strlen+0x74>
 20070c8:	10800104 	addi	r2,r2,4
 20070cc:	10c00017 	ldw	r3,0(r2)
 20070d0:	19cb883a 	add	r5,r3,r7
 20070d4:	00c6303a 	nor	r3,zero,r3
 20070d8:	28c6703a 	and	r3,r5,r3
 20070dc:	1986703a 	and	r3,r3,r6
 20070e0:	1800091e 	bne	r3,zero,2007108 <strlen+0x74>
 20070e4:	10800104 	addi	r2,r2,4
 20070e8:	10c00017 	ldw	r3,0(r2)
 20070ec:	19cb883a 	add	r5,r3,r7
 20070f0:	00c6303a 	nor	r3,zero,r3
 20070f4:	28c6703a 	and	r3,r5,r3
 20070f8:	1986703a 	and	r3,r3,r6
 20070fc:	183ff226 	beq	r3,zero,20070c8 <strlen+0x34>
 2007100:	00000106 	br	2007108 <strlen+0x74>
 2007104:	10800044 	addi	r2,r2,1
 2007108:	10c00007 	ldb	r3,0(r2)
 200710c:	183ffd1e 	bne	r3,zero,2007104 <strlen+0x70>
 2007110:	1105c83a 	sub	r2,r2,r4
 2007114:	f800283a 	ret
 2007118:	2005883a 	mov	r2,r4
 200711c:	003ffa06 	br	2007108 <strlen+0x74>

02007120 <_write_r>:
 2007120:	defffd04 	addi	sp,sp,-12
 2007124:	dc400115 	stw	r17,4(sp)
 2007128:	dc000015 	stw	r16,0(sp)
 200712c:	2023883a 	mov	r17,r4
 2007130:	04008074 	movhi	r16,513
 2007134:	8435dc04 	addi	r16,r16,-10384
 2007138:	2809883a 	mov	r4,r5
 200713c:	300b883a 	mov	r5,r6
 2007140:	380d883a 	mov	r6,r7
 2007144:	dfc00215 	stw	ra,8(sp)
 2007148:	80000015 	stw	zero,0(r16)
 200714c:	2009c980 	call	2009c98 <write>
 2007150:	00ffffc4 	movi	r3,-1
 2007154:	10c00526 	beq	r2,r3,200716c <_write_r+0x4c>
 2007158:	dfc00217 	ldw	ra,8(sp)
 200715c:	dc400117 	ldw	r17,4(sp)
 2007160:	dc000017 	ldw	r16,0(sp)
 2007164:	dec00304 	addi	sp,sp,12
 2007168:	f800283a 	ret
 200716c:	80c00017 	ldw	r3,0(r16)
 2007170:	183ff926 	beq	r3,zero,2007158 <_write_r+0x38>
 2007174:	88c00015 	stw	r3,0(r17)
 2007178:	dfc00217 	ldw	ra,8(sp)
 200717c:	dc400117 	ldw	r17,4(sp)
 2007180:	dc000017 	ldw	r16,0(sp)
 2007184:	dec00304 	addi	sp,sp,12
 2007188:	f800283a 	ret

0200718c <_calloc_r>:
 200718c:	314b383a 	mul	r5,r6,r5
 2007190:	defffe04 	addi	sp,sp,-8
 2007194:	dc000015 	stw	r16,0(sp)
 2007198:	dfc00115 	stw	ra,4(sp)
 200719c:	2004da80 	call	2004da8 <_malloc_r>
 20071a0:	1021883a 	mov	r16,r2
 20071a4:	10000c26 	beq	r2,zero,20071d8 <_calloc_r+0x4c>
 20071a8:	11bfff17 	ldw	r6,-4(r2)
 20071ac:	00ffff04 	movi	r3,-4
 20071b0:	00800904 	movi	r2,36
 20071b4:	30cc703a 	and	r6,r6,r3
 20071b8:	30cd883a 	add	r6,r6,r3
 20071bc:	11801436 	bltu	r2,r6,2007210 <_calloc_r+0x84>
 20071c0:	00c004c4 	movi	r3,19
 20071c4:	19800936 	bltu	r3,r6,20071ec <_calloc_r+0x60>
 20071c8:	8005883a 	mov	r2,r16
 20071cc:	10000015 	stw	zero,0(r2)
 20071d0:	10000115 	stw	zero,4(r2)
 20071d4:	10000215 	stw	zero,8(r2)
 20071d8:	8005883a 	mov	r2,r16
 20071dc:	dfc00117 	ldw	ra,4(sp)
 20071e0:	dc000017 	ldw	r16,0(sp)
 20071e4:	dec00204 	addi	sp,sp,8
 20071e8:	f800283a 	ret
 20071ec:	80000015 	stw	zero,0(r16)
 20071f0:	80000115 	stw	zero,4(r16)
 20071f4:	00c006c4 	movi	r3,27
 20071f8:	19800d2e 	bgeu	r3,r6,2007230 <_calloc_r+0xa4>
 20071fc:	80000215 	stw	zero,8(r16)
 2007200:	80000315 	stw	zero,12(r16)
 2007204:	30800c26 	beq	r6,r2,2007238 <_calloc_r+0xac>
 2007208:	80800404 	addi	r2,r16,16
 200720c:	003fef06 	br	20071cc <_calloc_r+0x40>
 2007210:	8009883a 	mov	r4,r16
 2007214:	000b883a 	mov	r5,zero
 2007218:	20002b80 	call	20002b8 <memset>
 200721c:	8005883a 	mov	r2,r16
 2007220:	dfc00117 	ldw	ra,4(sp)
 2007224:	dc000017 	ldw	r16,0(sp)
 2007228:	dec00204 	addi	sp,sp,8
 200722c:	f800283a 	ret
 2007230:	80800204 	addi	r2,r16,8
 2007234:	003fe506 	br	20071cc <_calloc_r+0x40>
 2007238:	80000415 	stw	zero,16(r16)
 200723c:	80000515 	stw	zero,20(r16)
 2007240:	80800604 	addi	r2,r16,24
 2007244:	003fe106 	br	20071cc <_calloc_r+0x40>

02007248 <_close_r>:
 2007248:	defffd04 	addi	sp,sp,-12
 200724c:	dc400115 	stw	r17,4(sp)
 2007250:	dc000015 	stw	r16,0(sp)
 2007254:	2023883a 	mov	r17,r4
 2007258:	04008074 	movhi	r16,513
 200725c:	8435dc04 	addi	r16,r16,-10384
 2007260:	2809883a 	mov	r4,r5
 2007264:	dfc00215 	stw	ra,8(sp)
 2007268:	80000015 	stw	zero,0(r16)
 200726c:	20095400 	call	2009540 <close>
 2007270:	00ffffc4 	movi	r3,-1
 2007274:	10c00526 	beq	r2,r3,200728c <_close_r+0x44>
 2007278:	dfc00217 	ldw	ra,8(sp)
 200727c:	dc400117 	ldw	r17,4(sp)
 2007280:	dc000017 	ldw	r16,0(sp)
 2007284:	dec00304 	addi	sp,sp,12
 2007288:	f800283a 	ret
 200728c:	80c00017 	ldw	r3,0(r16)
 2007290:	183ff926 	beq	r3,zero,2007278 <_close_r+0x30>
 2007294:	88c00015 	stw	r3,0(r17)
 2007298:	dfc00217 	ldw	ra,8(sp)
 200729c:	dc400117 	ldw	r17,4(sp)
 20072a0:	dc000017 	ldw	r16,0(sp)
 20072a4:	dec00304 	addi	sp,sp,12
 20072a8:	f800283a 	ret

020072ac <_fclose_r>:
 20072ac:	defffc04 	addi	sp,sp,-16
 20072b0:	dc400115 	stw	r17,4(sp)
 20072b4:	dc000015 	stw	r16,0(sp)
 20072b8:	dfc00315 	stw	ra,12(sp)
 20072bc:	dc800215 	stw	r18,8(sp)
 20072c0:	2821883a 	mov	r16,r5
 20072c4:	2023883a 	mov	r17,r4
 20072c8:	28003426 	beq	r5,zero,200739c <_fclose_r+0xf0>
 20072cc:	20040940 	call	2004094 <__sfp_lock_acquire>
 20072d0:	88000226 	beq	r17,zero,20072dc <_fclose_r+0x30>
 20072d4:	88800e17 	ldw	r2,56(r17)
 20072d8:	10003826 	beq	r2,zero,20073bc <_fclose_r+0x110>
 20072dc:	8080030f 	ldh	r2,12(r16)
 20072e0:	10002526 	beq	r2,zero,2007378 <_fclose_r+0xcc>
 20072e4:	8809883a 	mov	r4,r17
 20072e8:	800b883a 	mov	r5,r16
 20072ec:	2003be40 	call	2003be4 <_fflush_r>
 20072f0:	1025883a 	mov	r18,r2
 20072f4:	80800b17 	ldw	r2,44(r16)
 20072f8:	10000426 	beq	r2,zero,200730c <_fclose_r+0x60>
 20072fc:	81400717 	ldw	r5,28(r16)
 2007300:	8809883a 	mov	r4,r17
 2007304:	103ee83a 	callr	r2
 2007308:	10003516 	blt	r2,zero,20073e0 <_fclose_r+0x134>
 200730c:	8080030b 	ldhu	r2,12(r16)
 2007310:	1080200c 	andi	r2,r2,128
 2007314:	10bfffcc 	andi	r2,r2,65535
 2007318:	10a0001c 	xori	r2,r2,32768
 200731c:	10a00004 	addi	r2,r2,-32768
 2007320:	10002b1e 	bne	r2,zero,20073d0 <_fclose_r+0x124>
 2007324:	81400c17 	ldw	r5,48(r16)
 2007328:	28000526 	beq	r5,zero,2007340 <_fclose_r+0x94>
 200732c:	80801004 	addi	r2,r16,64
 2007330:	28800226 	beq	r5,r2,200733c <_fclose_r+0x90>
 2007334:	8809883a 	mov	r4,r17
 2007338:	20042100 	call	2004210 <_free_r>
 200733c:	80000c15 	stw	zero,48(r16)
 2007340:	81401117 	ldw	r5,68(r16)
 2007344:	28000326 	beq	r5,zero,2007354 <_fclose_r+0xa8>
 2007348:	8809883a 	mov	r4,r17
 200734c:	20042100 	call	2004210 <_free_r>
 2007350:	80001115 	stw	zero,68(r16)
 2007354:	8000030d 	sth	zero,12(r16)
 2007358:	20040980 	call	2004098 <__sfp_lock_release>
 200735c:	9005883a 	mov	r2,r18
 2007360:	dfc00317 	ldw	ra,12(sp)
 2007364:	dc800217 	ldw	r18,8(sp)
 2007368:	dc400117 	ldw	r17,4(sp)
 200736c:	dc000017 	ldw	r16,0(sp)
 2007370:	dec00404 	addi	sp,sp,16
 2007374:	f800283a 	ret
 2007378:	20040980 	call	2004098 <__sfp_lock_release>
 200737c:	0025883a 	mov	r18,zero
 2007380:	9005883a 	mov	r2,r18
 2007384:	dfc00317 	ldw	ra,12(sp)
 2007388:	dc800217 	ldw	r18,8(sp)
 200738c:	dc400117 	ldw	r17,4(sp)
 2007390:	dc000017 	ldw	r16,0(sp)
 2007394:	dec00404 	addi	sp,sp,16
 2007398:	f800283a 	ret
 200739c:	0025883a 	mov	r18,zero
 20073a0:	9005883a 	mov	r2,r18
 20073a4:	dfc00317 	ldw	ra,12(sp)
 20073a8:	dc800217 	ldw	r18,8(sp)
 20073ac:	dc400117 	ldw	r17,4(sp)
 20073b0:	dc000017 	ldw	r16,0(sp)
 20073b4:	dec00404 	addi	sp,sp,16
 20073b8:	f800283a 	ret
 20073bc:	8809883a 	mov	r4,r17
 20073c0:	2003e8c0 	call	2003e8c <__sinit>
 20073c4:	8080030f 	ldh	r2,12(r16)
 20073c8:	103fc61e 	bne	r2,zero,20072e4 <_fclose_r+0x38>
 20073cc:	003fea06 	br	2007378 <_fclose_r+0xcc>
 20073d0:	81400417 	ldw	r5,16(r16)
 20073d4:	8809883a 	mov	r4,r17
 20073d8:	20042100 	call	2004210 <_free_r>
 20073dc:	003fd106 	br	2007324 <_fclose_r+0x78>
 20073e0:	04bfffc4 	movi	r18,-1
 20073e4:	003fc906 	br	200730c <_fclose_r+0x60>

020073e8 <fclose>:
 20073e8:	00808074 	movhi	r2,513
 20073ec:	10b5c804 	addi	r2,r2,-10464
 20073f0:	200b883a 	mov	r5,r4
 20073f4:	11000017 	ldw	r4,0(r2)
 20073f8:	20072ac1 	jmpi	20072ac <_fclose_r>

020073fc <_fstat_r>:
 20073fc:	defffd04 	addi	sp,sp,-12
 2007400:	dc400115 	stw	r17,4(sp)
 2007404:	dc000015 	stw	r16,0(sp)
 2007408:	2023883a 	mov	r17,r4
 200740c:	04008074 	movhi	r16,513
 2007410:	8435dc04 	addi	r16,r16,-10384
 2007414:	2809883a 	mov	r4,r5
 2007418:	300b883a 	mov	r5,r6
 200741c:	dfc00215 	stw	ra,8(sp)
 2007420:	80000015 	stw	zero,0(r16)
 2007424:	20096840 	call	2009684 <fstat>
 2007428:	00ffffc4 	movi	r3,-1
 200742c:	10c00526 	beq	r2,r3,2007444 <_fstat_r+0x48>
 2007430:	dfc00217 	ldw	ra,8(sp)
 2007434:	dc400117 	ldw	r17,4(sp)
 2007438:	dc000017 	ldw	r16,0(sp)
 200743c:	dec00304 	addi	sp,sp,12
 2007440:	f800283a 	ret
 2007444:	80c00017 	ldw	r3,0(r16)
 2007448:	183ff926 	beq	r3,zero,2007430 <_fstat_r+0x34>
 200744c:	88c00015 	stw	r3,0(r17)
 2007450:	dfc00217 	ldw	ra,8(sp)
 2007454:	dc400117 	ldw	r17,4(sp)
 2007458:	dc000017 	ldw	r16,0(sp)
 200745c:	dec00304 	addi	sp,sp,12
 2007460:	f800283a 	ret

02007464 <_isatty_r>:
 2007464:	defffd04 	addi	sp,sp,-12
 2007468:	dc400115 	stw	r17,4(sp)
 200746c:	dc000015 	stw	r16,0(sp)
 2007470:	2023883a 	mov	r17,r4
 2007474:	04008074 	movhi	r16,513
 2007478:	8435dc04 	addi	r16,r16,-10384
 200747c:	2809883a 	mov	r4,r5
 2007480:	dfc00215 	stw	ra,8(sp)
 2007484:	80000015 	stw	zero,0(r16)
 2007488:	20097800 	call	2009780 <isatty>
 200748c:	00ffffc4 	movi	r3,-1
 2007490:	10c00526 	beq	r2,r3,20074a8 <_isatty_r+0x44>
 2007494:	dfc00217 	ldw	ra,8(sp)
 2007498:	dc400117 	ldw	r17,4(sp)
 200749c:	dc000017 	ldw	r16,0(sp)
 20074a0:	dec00304 	addi	sp,sp,12
 20074a4:	f800283a 	ret
 20074a8:	80c00017 	ldw	r3,0(r16)
 20074ac:	183ff926 	beq	r3,zero,2007494 <_isatty_r+0x30>
 20074b0:	88c00015 	stw	r3,0(r17)
 20074b4:	dfc00217 	ldw	ra,8(sp)
 20074b8:	dc400117 	ldw	r17,4(sp)
 20074bc:	dc000017 	ldw	r16,0(sp)
 20074c0:	dec00304 	addi	sp,sp,12
 20074c4:	f800283a 	ret

020074c8 <_lseek_r>:
 20074c8:	defffd04 	addi	sp,sp,-12
 20074cc:	dc400115 	stw	r17,4(sp)
 20074d0:	dc000015 	stw	r16,0(sp)
 20074d4:	2023883a 	mov	r17,r4
 20074d8:	04008074 	movhi	r16,513
 20074dc:	8435dc04 	addi	r16,r16,-10384
 20074e0:	2809883a 	mov	r4,r5
 20074e4:	300b883a 	mov	r5,r6
 20074e8:	380d883a 	mov	r6,r7
 20074ec:	dfc00215 	stw	ra,8(sp)
 20074f0:	80000015 	stw	zero,0(r16)
 20074f4:	20098700 	call	2009870 <lseek>
 20074f8:	00ffffc4 	movi	r3,-1
 20074fc:	10c00526 	beq	r2,r3,2007514 <_lseek_r+0x4c>
 2007500:	dfc00217 	ldw	ra,8(sp)
 2007504:	dc400117 	ldw	r17,4(sp)
 2007508:	dc000017 	ldw	r16,0(sp)
 200750c:	dec00304 	addi	sp,sp,12
 2007510:	f800283a 	ret
 2007514:	80c00017 	ldw	r3,0(r16)
 2007518:	183ff926 	beq	r3,zero,2007500 <_lseek_r+0x38>
 200751c:	88c00015 	stw	r3,0(r17)
 2007520:	dfc00217 	ldw	ra,8(sp)
 2007524:	dc400117 	ldw	r17,4(sp)
 2007528:	dc000017 	ldw	r16,0(sp)
 200752c:	dec00304 	addi	sp,sp,12
 2007530:	f800283a 	ret

02007534 <_read_r>:
 2007534:	defffd04 	addi	sp,sp,-12
 2007538:	dc400115 	stw	r17,4(sp)
 200753c:	dc000015 	stw	r16,0(sp)
 2007540:	2023883a 	mov	r17,r4
 2007544:	04008074 	movhi	r16,513
 2007548:	8435dc04 	addi	r16,r16,-10384
 200754c:	2809883a 	mov	r4,r5
 2007550:	300b883a 	mov	r5,r6
 2007554:	380d883a 	mov	r6,r7
 2007558:	dfc00215 	stw	ra,8(sp)
 200755c:	80000015 	stw	zero,0(r16)
 2007560:	2009a480 	call	2009a48 <read>
 2007564:	00ffffc4 	movi	r3,-1
 2007568:	10c00526 	beq	r2,r3,2007580 <_read_r+0x4c>
 200756c:	dfc00217 	ldw	ra,8(sp)
 2007570:	dc400117 	ldw	r17,4(sp)
 2007574:	dc000017 	ldw	r16,0(sp)
 2007578:	dec00304 	addi	sp,sp,12
 200757c:	f800283a 	ret
 2007580:	80c00017 	ldw	r3,0(r16)
 2007584:	183ff926 	beq	r3,zero,200756c <_read_r+0x38>
 2007588:	88c00015 	stw	r3,0(r17)
 200758c:	dfc00217 	ldw	ra,8(sp)
 2007590:	dc400117 	ldw	r17,4(sp)
 2007594:	dc000017 	ldw	r16,0(sp)
 2007598:	dec00304 	addi	sp,sp,12
 200759c:	f800283a 	ret

020075a0 <__udivdi3>:
 20075a0:	defff504 	addi	sp,sp,-44
 20075a4:	dd000515 	stw	r20,20(sp)
 20075a8:	dcc00415 	stw	r19,16(sp)
 20075ac:	dc800315 	stw	r18,12(sp)
 20075b0:	dc400215 	stw	r17,8(sp)
 20075b4:	dc000115 	stw	r16,4(sp)
 20075b8:	dfc00a15 	stw	ra,40(sp)
 20075bc:	df000915 	stw	fp,36(sp)
 20075c0:	ddc00815 	stw	r23,32(sp)
 20075c4:	dd800715 	stw	r22,28(sp)
 20075c8:	dd400615 	stw	r21,24(sp)
 20075cc:	2025883a 	mov	r18,r4
 20075d0:	2823883a 	mov	r17,r5
 20075d4:	3021883a 	mov	r16,r6
 20075d8:	2027883a 	mov	r19,r4
 20075dc:	2829883a 	mov	r20,r5
 20075e0:	3800401e 	bne	r7,zero,20076e4 <__udivdi3+0x144>
 20075e4:	2980602e 	bgeu	r5,r6,2007768 <__udivdi3+0x1c8>
 20075e8:	00bfffd4 	movui	r2,65535
 20075ec:	1180aa36 	bltu	r2,r6,2007898 <__udivdi3+0x2f8>
 20075f0:	00803fc4 	movi	r2,255
 20075f4:	11814436 	bltu	r2,r6,2007b08 <__udivdi3+0x568>
 20075f8:	0005883a 	mov	r2,zero
 20075fc:	0007883a 	mov	r3,zero
 2007600:	3084d83a 	srl	r2,r6,r2
 2007604:	01008074 	movhi	r4,513
 2007608:	212ef404 	addi	r4,r4,-17456
 200760c:	2085883a 	add	r2,r4,r2
 2007610:	10800003 	ldbu	r2,0(r2)
 2007614:	10c7883a 	add	r3,r2,r3
 2007618:	00800804 	movi	r2,32
 200761c:	10c5c83a 	sub	r2,r2,r3
 2007620:	10000526 	beq	r2,zero,2007638 <__udivdi3+0x98>
 2007624:	88a2983a 	sll	r17,r17,r2
 2007628:	90c6d83a 	srl	r3,r18,r3
 200762c:	30a0983a 	sll	r16,r6,r2
 2007630:	90a6983a 	sll	r19,r18,r2
 2007634:	88e8b03a 	or	r20,r17,r3
 2007638:	8022d43a 	srli	r17,r16,16
 200763c:	a009883a 	mov	r4,r20
 2007640:	857fffcc 	andi	r21,r16,65535
 2007644:	880b883a 	mov	r5,r17
 2007648:	2008f5c0 	call	2008f5c <__umodsi3>
 200764c:	a009883a 	mov	r4,r20
 2007650:	880b883a 	mov	r5,r17
 2007654:	102d883a 	mov	r22,r2
 2007658:	2008f540 	call	2008f54 <__udivsi3>
 200765c:	b02c943a 	slli	r22,r22,16
 2007660:	9806d43a 	srli	r3,r19,16
 2007664:	1549383a 	mul	r4,r2,r21
 2007668:	1025883a 	mov	r18,r2
 200766c:	b0c6b03a 	or	r3,r22,r3
 2007670:	1900052e 	bgeu	r3,r4,2007688 <__udivdi3+0xe8>
 2007674:	1c07883a 	add	r3,r3,r16
 2007678:	10bfffc4 	addi	r2,r2,-1
 200767c:	1c000136 	bltu	r3,r16,2007684 <__udivdi3+0xe4>
 2007680:	19013636 	bltu	r3,r4,2007b5c <__udivdi3+0x5bc>
 2007684:	1025883a 	mov	r18,r2
 2007688:	1929c83a 	sub	r20,r3,r4
 200768c:	a009883a 	mov	r4,r20
 2007690:	880b883a 	mov	r5,r17
 2007694:	2008f5c0 	call	2008f5c <__umodsi3>
 2007698:	102d883a 	mov	r22,r2
 200769c:	a009883a 	mov	r4,r20
 20076a0:	880b883a 	mov	r5,r17
 20076a4:	2008f540 	call	2008f54 <__udivsi3>
 20076a8:	b02c943a 	slli	r22,r22,16
 20076ac:	156b383a 	mul	r21,r2,r21
 20076b0:	9cffffcc 	andi	r19,r19,65535
 20076b4:	b4e6b03a 	or	r19,r22,r19
 20076b8:	1009883a 	mov	r4,r2
 20076bc:	9d40052e 	bgeu	r19,r21,20076d4 <__udivdi3+0x134>
 20076c0:	9c27883a 	add	r19,r19,r16
 20076c4:	10bfffc4 	addi	r2,r2,-1
 20076c8:	9c00f736 	bltu	r19,r16,2007aa8 <__udivdi3+0x508>
 20076cc:	9d40f62e 	bgeu	r19,r21,2007aa8 <__udivdi3+0x508>
 20076d0:	213fff84 	addi	r4,r4,-2
 20076d4:	9004943a 	slli	r2,r18,16
 20076d8:	0007883a 	mov	r3,zero
 20076dc:	2084b03a 	or	r2,r4,r2
 20076e0:	00001506 	br	2007738 <__udivdi3+0x198>
 20076e4:	29c06536 	bltu	r5,r7,200787c <__udivdi3+0x2dc>
 20076e8:	00bfffd4 	movui	r2,65535
 20076ec:	11c0652e 	bgeu	r2,r7,2007884 <__udivdi3+0x2e4>
 20076f0:	00804034 	movhi	r2,256
 20076f4:	10bfffc4 	addi	r2,r2,-1
 20076f8:	11c0f736 	bltu	r2,r7,2007ad8 <__udivdi3+0x538>
 20076fc:	00c00404 	movi	r3,16
 2007700:	180b883a 	mov	r5,r3
 2007704:	38c6d83a 	srl	r3,r7,r3
 2007708:	01008074 	movhi	r4,513
 200770c:	212ef404 	addi	r4,r4,-17456
 2007710:	04000804 	movi	r16,32
 2007714:	20c7883a 	add	r3,r4,r3
 2007718:	18800003 	ldbu	r2,0(r3)
 200771c:	1145883a 	add	r2,r2,r5
 2007720:	80a1c83a 	sub	r16,r16,r2
 2007724:	8000691e 	bne	r16,zero,20078cc <__udivdi3+0x32c>
 2007728:	0007883a 	mov	r3,zero
 200772c:	3c406536 	bltu	r7,r17,20078c4 <__udivdi3+0x324>
 2007730:	9180642e 	bgeu	r18,r6,20078c4 <__udivdi3+0x324>
 2007734:	0005883a 	mov	r2,zero
 2007738:	dfc00a17 	ldw	ra,40(sp)
 200773c:	df000917 	ldw	fp,36(sp)
 2007740:	ddc00817 	ldw	r23,32(sp)
 2007744:	dd800717 	ldw	r22,28(sp)
 2007748:	dd400617 	ldw	r21,24(sp)
 200774c:	dd000517 	ldw	r20,20(sp)
 2007750:	dcc00417 	ldw	r19,16(sp)
 2007754:	dc800317 	ldw	r18,12(sp)
 2007758:	dc400217 	ldw	r17,8(sp)
 200775c:	dc000117 	ldw	r16,4(sp)
 2007760:	dec00b04 	addi	sp,sp,44
 2007764:	f800283a 	ret
 2007768:	3000041e 	bne	r6,zero,200777c <__udivdi3+0x1dc>
 200776c:	01000044 	movi	r4,1
 2007770:	000b883a 	mov	r5,zero
 2007774:	2008f540 	call	2008f54 <__udivsi3>
 2007778:	1021883a 	mov	r16,r2
 200777c:	00bfffd4 	movui	r2,65535
 2007780:	14004b2e 	bgeu	r2,r16,20078b0 <__udivdi3+0x310>
 2007784:	00804034 	movhi	r2,256
 2007788:	10bfffc4 	addi	r2,r2,-1
 200778c:	1400d836 	bltu	r2,r16,2007af0 <__udivdi3+0x550>
 2007790:	00800404 	movi	r2,16
 2007794:	1007883a 	mov	r3,r2
 2007798:	8084d83a 	srl	r2,r16,r2
 200779c:	01008074 	movhi	r4,513
 20077a0:	212ef404 	addi	r4,r4,-17456
 20077a4:	2085883a 	add	r2,r4,r2
 20077a8:	10800003 	ldbu	r2,0(r2)
 20077ac:	10c7883a 	add	r3,r2,r3
 20077b0:	00800804 	movi	r2,32
 20077b4:	10c5c83a 	sub	r2,r2,r3
 20077b8:	1000891e 	bne	r2,zero,20079e0 <__udivdi3+0x440>
 20077bc:	8028d43a 	srli	r20,r16,16
 20077c0:	8c23c83a 	sub	r17,r17,r16
 20077c4:	84bfffcc 	andi	r18,r16,65535
 20077c8:	00c00044 	movi	r3,1
 20077cc:	8809883a 	mov	r4,r17
 20077d0:	a00b883a 	mov	r5,r20
 20077d4:	d8c00015 	stw	r3,0(sp)
 20077d8:	2008f5c0 	call	2008f5c <__umodsi3>
 20077dc:	8809883a 	mov	r4,r17
 20077e0:	a00b883a 	mov	r5,r20
 20077e4:	102b883a 	mov	r21,r2
 20077e8:	2008f540 	call	2008f54 <__udivsi3>
 20077ec:	a82a943a 	slli	r21,r21,16
 20077f0:	9808d43a 	srli	r4,r19,16
 20077f4:	148b383a 	mul	r5,r2,r18
 20077f8:	1023883a 	mov	r17,r2
 20077fc:	a908b03a 	or	r4,r21,r4
 2007800:	d8c00017 	ldw	r3,0(sp)
 2007804:	2140052e 	bgeu	r4,r5,200781c <__udivdi3+0x27c>
 2007808:	2409883a 	add	r4,r4,r16
 200780c:	10bfffc4 	addi	r2,r2,-1
 2007810:	24000136 	bltu	r4,r16,2007818 <__udivdi3+0x278>
 2007814:	2140ce36 	bltu	r4,r5,2007b50 <__udivdi3+0x5b0>
 2007818:	1023883a 	mov	r17,r2
 200781c:	216bc83a 	sub	r21,r4,r5
 2007820:	a809883a 	mov	r4,r21
 2007824:	a00b883a 	mov	r5,r20
 2007828:	d8c00015 	stw	r3,0(sp)
 200782c:	2008f5c0 	call	2008f5c <__umodsi3>
 2007830:	102d883a 	mov	r22,r2
 2007834:	a809883a 	mov	r4,r21
 2007838:	a00b883a 	mov	r5,r20
 200783c:	2008f540 	call	2008f54 <__udivsi3>
 2007840:	b02c943a 	slli	r22,r22,16
 2007844:	14a5383a 	mul	r18,r2,r18
 2007848:	9cffffcc 	andi	r19,r19,65535
 200784c:	b4e6b03a 	or	r19,r22,r19
 2007850:	1009883a 	mov	r4,r2
 2007854:	d8c00017 	ldw	r3,0(sp)
 2007858:	9c80052e 	bgeu	r19,r18,2007870 <__udivdi3+0x2d0>
 200785c:	9c27883a 	add	r19,r19,r16
 2007860:	10bfffc4 	addi	r2,r2,-1
 2007864:	9c009236 	bltu	r19,r16,2007ab0 <__udivdi3+0x510>
 2007868:	9c80912e 	bgeu	r19,r18,2007ab0 <__udivdi3+0x510>
 200786c:	213fff84 	addi	r4,r4,-2
 2007870:	8804943a 	slli	r2,r17,16
 2007874:	2084b03a 	or	r2,r4,r2
 2007878:	003faf06 	br	2007738 <__udivdi3+0x198>
 200787c:	0007883a 	mov	r3,zero
 2007880:	003fac06 	br	2007734 <__udivdi3+0x194>
 2007884:	00803fc4 	movi	r2,255
 2007888:	11c09636 	bltu	r2,r7,2007ae4 <__udivdi3+0x544>
 200788c:	0007883a 	mov	r3,zero
 2007890:	000b883a 	mov	r5,zero
 2007894:	003f9b06 	br	2007704 <__udivdi3+0x164>
 2007898:	00804034 	movhi	r2,256
 200789c:	10bfffc4 	addi	r2,r2,-1
 20078a0:	11809636 	bltu	r2,r6,2007afc <__udivdi3+0x55c>
 20078a4:	00800404 	movi	r2,16
 20078a8:	1007883a 	mov	r3,r2
 20078ac:	003f5406 	br	2007600 <__udivdi3+0x60>
 20078b0:	00803fc4 	movi	r2,255
 20078b4:	14009736 	bltu	r2,r16,2007b14 <__udivdi3+0x574>
 20078b8:	0005883a 	mov	r2,zero
 20078bc:	0007883a 	mov	r3,zero
 20078c0:	003fb506 	br	2007798 <__udivdi3+0x1f8>
 20078c4:	00800044 	movi	r2,1
 20078c8:	003f9b06 	br	2007738 <__udivdi3+0x198>
 20078cc:	3086d83a 	srl	r3,r6,r2
 20078d0:	3c0e983a 	sll	r7,r7,r16
 20078d4:	88aad83a 	srl	r21,r17,r2
 20078d8:	9084d83a 	srl	r2,r18,r2
 20078dc:	38e6b03a 	or	r19,r7,r3
 20078e0:	9828d43a 	srli	r20,r19,16
 20078e4:	8c22983a 	sll	r17,r17,r16
 20078e8:	a809883a 	mov	r4,r21
 20078ec:	a00b883a 	mov	r5,r20
 20078f0:	342c983a 	sll	r22,r6,r16
 20078f4:	88a2b03a 	or	r17,r17,r2
 20078f8:	2008f5c0 	call	2008f5c <__umodsi3>
 20078fc:	a809883a 	mov	r4,r21
 2007900:	a00b883a 	mov	r5,r20
 2007904:	1039883a 	mov	fp,r2
 2007908:	2008f540 	call	2008f54 <__udivsi3>
 200790c:	102b883a 	mov	r21,r2
 2007910:	9dffffcc 	andi	r23,r19,65535
 2007914:	e008943a 	slli	r4,fp,16
 2007918:	8804d43a 	srli	r2,r17,16
 200791c:	adcd383a 	mul	r6,r21,r23
 2007920:	2088b03a 	or	r4,r4,r2
 2007924:	2180042e 	bgeu	r4,r6,2007938 <__udivdi3+0x398>
 2007928:	24c9883a 	add	r4,r4,r19
 200792c:	a8bfffc4 	addi	r2,r21,-1
 2007930:	24c07f2e 	bgeu	r4,r19,2007b30 <__udivdi3+0x590>
 2007934:	102b883a 	mov	r21,r2
 2007938:	21b9c83a 	sub	fp,r4,r6
 200793c:	e009883a 	mov	r4,fp
 2007940:	a00b883a 	mov	r5,r20
 2007944:	2008f5c0 	call	2008f5c <__umodsi3>
 2007948:	e009883a 	mov	r4,fp
 200794c:	a00b883a 	mov	r5,r20
 2007950:	d8800015 	stw	r2,0(sp)
 2007954:	2008f540 	call	2008f54 <__udivsi3>
 2007958:	d8c00017 	ldw	r3,0(sp)
 200795c:	15cb383a 	mul	r5,r2,r23
 2007960:	8c7fffcc 	andi	r17,r17,65535
 2007964:	1806943a 	slli	r3,r3,16
 2007968:	1009883a 	mov	r4,r2
 200796c:	1c46b03a 	or	r3,r3,r17
 2007970:	1940042e 	bgeu	r3,r5,2007984 <__udivdi3+0x3e4>
 2007974:	1cc7883a 	add	r3,r3,r19
 2007978:	10bfffc4 	addi	r2,r2,-1
 200797c:	1cc0682e 	bgeu	r3,r19,2007b20 <__udivdi3+0x580>
 2007980:	1009883a 	mov	r4,r2
 2007984:	a804943a 	slli	r2,r21,16
 2007988:	b1ffffcc 	andi	r7,r22,65535
 200798c:	b02cd43a 	srli	r22,r22,16
 2007990:	2084b03a 	or	r2,r4,r2
 2007994:	113fffcc 	andi	r4,r2,65535
 2007998:	100cd43a 	srli	r6,r2,16
 200799c:	21d1383a 	mul	r8,r4,r7
 20079a0:	2589383a 	mul	r4,r4,r22
 20079a4:	31cf383a 	mul	r7,r6,r7
 20079a8:	4012d43a 	srli	r9,r8,16
 20079ac:	1947c83a 	sub	r3,r3,r5
 20079b0:	3909883a 	add	r4,r7,r4
 20079b4:	2249883a 	add	r4,r4,r9
 20079b8:	35ad383a 	mul	r22,r6,r22
 20079bc:	21c0022e 	bgeu	r4,r7,20079c8 <__udivdi3+0x428>
 20079c0:	01400074 	movhi	r5,1
 20079c4:	b16d883a 	add	r22,r22,r5
 20079c8:	200ad43a 	srli	r5,r4,16
 20079cc:	b16d883a 	add	r22,r22,r5
 20079d0:	1d803e36 	bltu	r3,r22,2007acc <__udivdi3+0x52c>
 20079d4:	1d803826 	beq	r3,r22,2007ab8 <__udivdi3+0x518>
 20079d8:	0007883a 	mov	r3,zero
 20079dc:	003f5606 	br	2007738 <__udivdi3+0x198>
 20079e0:	80a0983a 	sll	r16,r16,r2
 20079e4:	88ead83a 	srl	r21,r17,r3
 20079e8:	90c6d83a 	srl	r3,r18,r3
 20079ec:	8028d43a 	srli	r20,r16,16
 20079f0:	88a2983a 	sll	r17,r17,r2
 20079f4:	a809883a 	mov	r4,r21
 20079f8:	a00b883a 	mov	r5,r20
 20079fc:	88ecb03a 	or	r22,r17,r3
 2007a00:	90a6983a 	sll	r19,r18,r2
 2007a04:	2008f5c0 	call	2008f5c <__umodsi3>
 2007a08:	a809883a 	mov	r4,r21
 2007a0c:	a00b883a 	mov	r5,r20
 2007a10:	1023883a 	mov	r17,r2
 2007a14:	2008f540 	call	2008f54 <__udivsi3>
 2007a18:	102b883a 	mov	r21,r2
 2007a1c:	84bfffcc 	andi	r18,r16,65535
 2007a20:	8808943a 	slli	r4,r17,16
 2007a24:	b004d43a 	srli	r2,r22,16
 2007a28:	ac87383a 	mul	r3,r21,r18
 2007a2c:	2088b03a 	or	r4,r4,r2
 2007a30:	20c0062e 	bgeu	r4,r3,2007a4c <__udivdi3+0x4ac>
 2007a34:	2409883a 	add	r4,r4,r16
 2007a38:	a8bfffc4 	addi	r2,r21,-1
 2007a3c:	24004236 	bltu	r4,r16,2007b48 <__udivdi3+0x5a8>
 2007a40:	20c0412e 	bgeu	r4,r3,2007b48 <__udivdi3+0x5a8>
 2007a44:	ad7fff84 	addi	r21,r21,-2
 2007a48:	2409883a 	add	r4,r4,r16
 2007a4c:	20efc83a 	sub	r23,r4,r3
 2007a50:	b809883a 	mov	r4,r23
 2007a54:	a00b883a 	mov	r5,r20
 2007a58:	2008f5c0 	call	2008f5c <__umodsi3>
 2007a5c:	1023883a 	mov	r17,r2
 2007a60:	a00b883a 	mov	r5,r20
 2007a64:	b809883a 	mov	r4,r23
 2007a68:	2008f540 	call	2008f54 <__udivsi3>
 2007a6c:	8822943a 	slli	r17,r17,16
 2007a70:	148b383a 	mul	r5,r2,r18
 2007a74:	b5bfffcc 	andi	r22,r22,65535
 2007a78:	8da2b03a 	or	r17,r17,r22
 2007a7c:	8940062e 	bgeu	r17,r5,2007a98 <__udivdi3+0x4f8>
 2007a80:	8c23883a 	add	r17,r17,r16
 2007a84:	10ffffc4 	addi	r3,r2,-1
 2007a88:	8c002d36 	bltu	r17,r16,2007b40 <__udivdi3+0x5a0>
 2007a8c:	89402c2e 	bgeu	r17,r5,2007b40 <__udivdi3+0x5a0>
 2007a90:	10bfff84 	addi	r2,r2,-2
 2007a94:	8c23883a 	add	r17,r17,r16
 2007a98:	a806943a 	slli	r3,r21,16
 2007a9c:	8963c83a 	sub	r17,r17,r5
 2007aa0:	10c6b03a 	or	r3,r2,r3
 2007aa4:	003f4906 	br	20077cc <__udivdi3+0x22c>
 2007aa8:	1009883a 	mov	r4,r2
 2007aac:	003f0906 	br	20076d4 <__udivdi3+0x134>
 2007ab0:	1009883a 	mov	r4,r2
 2007ab4:	003f6e06 	br	2007870 <__udivdi3+0x2d0>
 2007ab8:	2008943a 	slli	r4,r4,16
 2007abc:	9420983a 	sll	r16,r18,r16
 2007ac0:	423fffcc 	andi	r8,r8,65535
 2007ac4:	2209883a 	add	r4,r4,r8
 2007ac8:	813fc32e 	bgeu	r16,r4,20079d8 <__udivdi3+0x438>
 2007acc:	10bfffc4 	addi	r2,r2,-1
 2007ad0:	0007883a 	mov	r3,zero
 2007ad4:	003f1806 	br	2007738 <__udivdi3+0x198>
 2007ad8:	00c00604 	movi	r3,24
 2007adc:	180b883a 	mov	r5,r3
 2007ae0:	003f0806 	br	2007704 <__udivdi3+0x164>
 2007ae4:	00c00204 	movi	r3,8
 2007ae8:	180b883a 	mov	r5,r3
 2007aec:	003f0506 	br	2007704 <__udivdi3+0x164>
 2007af0:	00800604 	movi	r2,24
 2007af4:	1007883a 	mov	r3,r2
 2007af8:	003f2706 	br	2007798 <__udivdi3+0x1f8>
 2007afc:	00800604 	movi	r2,24
 2007b00:	1007883a 	mov	r3,r2
 2007b04:	003ebe06 	br	2007600 <__udivdi3+0x60>
 2007b08:	00800204 	movi	r2,8
 2007b0c:	1007883a 	mov	r3,r2
 2007b10:	003ebb06 	br	2007600 <__udivdi3+0x60>
 2007b14:	00800204 	movi	r2,8
 2007b18:	1007883a 	mov	r3,r2
 2007b1c:	003f1e06 	br	2007798 <__udivdi3+0x1f8>
 2007b20:	197f972e 	bgeu	r3,r5,2007980 <__udivdi3+0x3e0>
 2007b24:	213fff84 	addi	r4,r4,-2
 2007b28:	1cc7883a 	add	r3,r3,r19
 2007b2c:	003f9506 	br	2007984 <__udivdi3+0x3e4>
 2007b30:	21bf802e 	bgeu	r4,r6,2007934 <__udivdi3+0x394>
 2007b34:	ad7fff84 	addi	r21,r21,-2
 2007b38:	24c9883a 	add	r4,r4,r19
 2007b3c:	003f7e06 	br	2007938 <__udivdi3+0x398>
 2007b40:	1805883a 	mov	r2,r3
 2007b44:	003fd406 	br	2007a98 <__udivdi3+0x4f8>
 2007b48:	102b883a 	mov	r21,r2
 2007b4c:	003fbf06 	br	2007a4c <__udivdi3+0x4ac>
 2007b50:	8c7fff84 	addi	r17,r17,-2
 2007b54:	2409883a 	add	r4,r4,r16
 2007b58:	003f3006 	br	200781c <__udivdi3+0x27c>
 2007b5c:	94bfff84 	addi	r18,r18,-2
 2007b60:	1c07883a 	add	r3,r3,r16
 2007b64:	003ec806 	br	2007688 <__udivdi3+0xe8>

02007b68 <__umoddi3>:
 2007b68:	defff504 	addi	sp,sp,-44
 2007b6c:	dd000515 	stw	r20,20(sp)
 2007b70:	dcc00415 	stw	r19,16(sp)
 2007b74:	dc800315 	stw	r18,12(sp)
 2007b78:	dc400215 	stw	r17,8(sp)
 2007b7c:	dc000115 	stw	r16,4(sp)
 2007b80:	dfc00a15 	stw	ra,40(sp)
 2007b84:	df000915 	stw	fp,36(sp)
 2007b88:	ddc00815 	stw	r23,32(sp)
 2007b8c:	dd800715 	stw	r22,28(sp)
 2007b90:	dd400615 	stw	r21,24(sp)
 2007b94:	2025883a 	mov	r18,r4
 2007b98:	2823883a 	mov	r17,r5
 2007b9c:	3021883a 	mov	r16,r6
 2007ba0:	2027883a 	mov	r19,r4
 2007ba4:	2829883a 	mov	r20,r5
 2007ba8:	3800351e 	bne	r7,zero,2007c80 <__umoddi3+0x118>
 2007bac:	29804d2e 	bgeu	r5,r6,2007ce4 <__umoddi3+0x17c>
 2007bb0:	00bfffd4 	movui	r2,65535
 2007bb4:	11809a36 	bltu	r2,r6,2007e20 <__umoddi3+0x2b8>
 2007bb8:	00803fc4 	movi	r2,255
 2007bbc:	11813936 	bltu	r2,r6,20080a4 <__umoddi3+0x53c>
 2007bc0:	0005883a 	mov	r2,zero
 2007bc4:	0009883a 	mov	r4,zero
 2007bc8:	3084d83a 	srl	r2,r6,r2
 2007bcc:	00c08074 	movhi	r3,513
 2007bd0:	18eef404 	addi	r3,r3,-17456
 2007bd4:	05400804 	movi	r21,32
 2007bd8:	1885883a 	add	r2,r3,r2
 2007bdc:	10800003 	ldbu	r2,0(r2)
 2007be0:	1109883a 	add	r4,r2,r4
 2007be4:	a92bc83a 	sub	r21,r21,r4
 2007be8:	a800ec26 	beq	r21,zero,2007f9c <__umoddi3+0x434>
 2007bec:	8d62983a 	sll	r17,r17,r21
 2007bf0:	9108d83a 	srl	r4,r18,r4
 2007bf4:	3560983a 	sll	r16,r6,r21
 2007bf8:	9566983a 	sll	r19,r18,r21
 2007bfc:	8928b03a 	or	r20,r17,r4
 2007c00:	8022d43a 	srli	r17,r16,16
 2007c04:	a009883a 	mov	r4,r20
 2007c08:	84bfffcc 	andi	r18,r16,65535
 2007c0c:	880b883a 	mov	r5,r17
 2007c10:	2008f5c0 	call	2008f5c <__umodsi3>
 2007c14:	a009883a 	mov	r4,r20
 2007c18:	880b883a 	mov	r5,r17
 2007c1c:	102d883a 	mov	r22,r2
 2007c20:	2008f540 	call	2008f54 <__udivsi3>
 2007c24:	b02c943a 	slli	r22,r22,16
 2007c28:	9806d43a 	srli	r3,r19,16
 2007c2c:	1485383a 	mul	r2,r2,r18
 2007c30:	b0c6b03a 	or	r3,r22,r3
 2007c34:	1880042e 	bgeu	r3,r2,2007c48 <__umoddi3+0xe0>
 2007c38:	1c07883a 	add	r3,r3,r16
 2007c3c:	1c000236 	bltu	r3,r16,2007c48 <__umoddi3+0xe0>
 2007c40:	1880012e 	bgeu	r3,r2,2007c48 <__umoddi3+0xe0>
 2007c44:	1c07883a 	add	r3,r3,r16
 2007c48:	18a9c83a 	sub	r20,r3,r2
 2007c4c:	a009883a 	mov	r4,r20
 2007c50:	880b883a 	mov	r5,r17
 2007c54:	2008f5c0 	call	2008f5c <__umodsi3>
 2007c58:	102d883a 	mov	r22,r2
 2007c5c:	a009883a 	mov	r4,r20
 2007c60:	880b883a 	mov	r5,r17
 2007c64:	2008f540 	call	2008f54 <__udivsi3>
 2007c68:	b02c943a 	slli	r22,r22,16
 2007c6c:	1485383a 	mul	r2,r2,r18
 2007c70:	9cffffcc 	andi	r19,r19,65535
 2007c74:	b4e6b03a 	or	r19,r22,r19
 2007c78:	9880522e 	bgeu	r19,r2,2007dc4 <__umoddi3+0x25c>
 2007c7c:	00004d06 	br	2007db4 <__umoddi3+0x24c>
 2007c80:	29c05436 	bltu	r5,r7,2007dd4 <__umoddi3+0x26c>
 2007c84:	00bfffd4 	movui	r2,65535
 2007c88:	11c0602e 	bgeu	r2,r7,2007e0c <__umoddi3+0x2a4>
 2007c8c:	00804034 	movhi	r2,256
 2007c90:	10bfffc4 	addi	r2,r2,-1
 2007c94:	11c0f736 	bltu	r2,r7,2008074 <__umoddi3+0x50c>
 2007c98:	00c00404 	movi	r3,16
 2007c9c:	1827883a 	mov	r19,r3
 2007ca0:	38c6d83a 	srl	r3,r7,r3
 2007ca4:	01008074 	movhi	r4,513
 2007ca8:	212ef404 	addi	r4,r4,-17456
 2007cac:	04000804 	movi	r16,32
 2007cb0:	20c7883a 	add	r3,r4,r3
 2007cb4:	18800003 	ldbu	r2,0(r3)
 2007cb8:	14e7883a 	add	r19,r2,r19
 2007cbc:	84e1c83a 	sub	r16,r16,r19
 2007cc0:	8000621e 	bne	r16,zero,2007e4c <__umoddi3+0x2e4>
 2007cc4:	3c400136 	bltu	r7,r17,2007ccc <__umoddi3+0x164>
 2007cc8:	91810336 	bltu	r18,r6,20080d8 <__umoddi3+0x570>
 2007ccc:	9185c83a 	sub	r2,r18,r6
 2007cd0:	89e3c83a 	sub	r17,r17,r7
 2007cd4:	90a5803a 	cmpltu	r18,r18,r2
 2007cd8:	8ca9c83a 	sub	r20,r17,r18
 2007cdc:	a007883a 	mov	r3,r20
 2007ce0:	00003e06 	br	2007ddc <__umoddi3+0x274>
 2007ce4:	3000041e 	bne	r6,zero,2007cf8 <__umoddi3+0x190>
 2007ce8:	01000044 	movi	r4,1
 2007cec:	000b883a 	mov	r5,zero
 2007cf0:	2008f540 	call	2008f54 <__udivsi3>
 2007cf4:	1021883a 	mov	r16,r2
 2007cf8:	00bfffd4 	movui	r2,65535
 2007cfc:	14004e2e 	bgeu	r2,r16,2007e38 <__umoddi3+0x2d0>
 2007d00:	00804034 	movhi	r2,256
 2007d04:	10bfffc4 	addi	r2,r2,-1
 2007d08:	1400e336 	bltu	r2,r16,2008098 <__umoddi3+0x530>
 2007d0c:	00800404 	movi	r2,16
 2007d10:	1007883a 	mov	r3,r2
 2007d14:	8084d83a 	srl	r2,r16,r2
 2007d18:	01008074 	movhi	r4,513
 2007d1c:	212ef404 	addi	r4,r4,-17456
 2007d20:	05400804 	movi	r21,32
 2007d24:	2085883a 	add	r2,r4,r2
 2007d28:	10800003 	ldbu	r2,0(r2)
 2007d2c:	10c7883a 	add	r3,r2,r3
 2007d30:	a8ebc83a 	sub	r21,r21,r3
 2007d34:	a8009b1e 	bne	r21,zero,2007fa4 <__umoddi3+0x43c>
 2007d38:	8028d43a 	srli	r20,r16,16
 2007d3c:	8c23c83a 	sub	r17,r17,r16
 2007d40:	85bfffcc 	andi	r22,r16,65535
 2007d44:	8809883a 	mov	r4,r17
 2007d48:	a00b883a 	mov	r5,r20
 2007d4c:	2008f5c0 	call	2008f5c <__umodsi3>
 2007d50:	8809883a 	mov	r4,r17
 2007d54:	a00b883a 	mov	r5,r20
 2007d58:	1025883a 	mov	r18,r2
 2007d5c:	2008f540 	call	2008f54 <__udivsi3>
 2007d60:	9024943a 	slli	r18,r18,16
 2007d64:	9806d43a 	srli	r3,r19,16
 2007d68:	1585383a 	mul	r2,r2,r22
 2007d6c:	90c6b03a 	or	r3,r18,r3
 2007d70:	1880032e 	bgeu	r3,r2,2007d80 <__umoddi3+0x218>
 2007d74:	1c07883a 	add	r3,r3,r16
 2007d78:	1c000136 	bltu	r3,r16,2007d80 <__umoddi3+0x218>
 2007d7c:	1880d436 	bltu	r3,r2,20080d0 <__umoddi3+0x568>
 2007d80:	18a3c83a 	sub	r17,r3,r2
 2007d84:	8809883a 	mov	r4,r17
 2007d88:	a00b883a 	mov	r5,r20
 2007d8c:	2008f5c0 	call	2008f5c <__umodsi3>
 2007d90:	1025883a 	mov	r18,r2
 2007d94:	8809883a 	mov	r4,r17
 2007d98:	a00b883a 	mov	r5,r20
 2007d9c:	2008f540 	call	2008f54 <__udivsi3>
 2007da0:	9024943a 	slli	r18,r18,16
 2007da4:	1585383a 	mul	r2,r2,r22
 2007da8:	9cffffcc 	andi	r19,r19,65535
 2007dac:	94e6b03a 	or	r19,r18,r19
 2007db0:	9880042e 	bgeu	r19,r2,2007dc4 <__umoddi3+0x25c>
 2007db4:	9c27883a 	add	r19,r19,r16
 2007db8:	9c000236 	bltu	r19,r16,2007dc4 <__umoddi3+0x25c>
 2007dbc:	9880012e 	bgeu	r19,r2,2007dc4 <__umoddi3+0x25c>
 2007dc0:	9c27883a 	add	r19,r19,r16
 2007dc4:	98a7c83a 	sub	r19,r19,r2
 2007dc8:	9d44d83a 	srl	r2,r19,r21
 2007dcc:	0007883a 	mov	r3,zero
 2007dd0:	00000206 	br	2007ddc <__umoddi3+0x274>
 2007dd4:	2005883a 	mov	r2,r4
 2007dd8:	2807883a 	mov	r3,r5
 2007ddc:	dfc00a17 	ldw	ra,40(sp)
 2007de0:	df000917 	ldw	fp,36(sp)
 2007de4:	ddc00817 	ldw	r23,32(sp)
 2007de8:	dd800717 	ldw	r22,28(sp)
 2007dec:	dd400617 	ldw	r21,24(sp)
 2007df0:	dd000517 	ldw	r20,20(sp)
 2007df4:	dcc00417 	ldw	r19,16(sp)
 2007df8:	dc800317 	ldw	r18,12(sp)
 2007dfc:	dc400217 	ldw	r17,8(sp)
 2007e00:	dc000117 	ldw	r16,4(sp)
 2007e04:	dec00b04 	addi	sp,sp,44
 2007e08:	f800283a 	ret
 2007e0c:	00803fc4 	movi	r2,255
 2007e10:	11c09536 	bltu	r2,r7,2008068 <__umoddi3+0x500>
 2007e14:	0007883a 	mov	r3,zero
 2007e18:	0027883a 	mov	r19,zero
 2007e1c:	003fa006 	br	2007ca0 <__umoddi3+0x138>
 2007e20:	00804034 	movhi	r2,256
 2007e24:	10bfffc4 	addi	r2,r2,-1
 2007e28:	11809536 	bltu	r2,r6,2008080 <__umoddi3+0x518>
 2007e2c:	00800404 	movi	r2,16
 2007e30:	1009883a 	mov	r4,r2
 2007e34:	003f6406 	br	2007bc8 <__umoddi3+0x60>
 2007e38:	00803fc4 	movi	r2,255
 2007e3c:	14009336 	bltu	r2,r16,200808c <__umoddi3+0x524>
 2007e40:	0005883a 	mov	r2,zero
 2007e44:	0007883a 	mov	r3,zero
 2007e48:	003fb206 	br	2007d14 <__umoddi3+0x1ac>
 2007e4c:	34c4d83a 	srl	r2,r6,r19
 2007e50:	3c0e983a 	sll	r7,r7,r16
 2007e54:	8ceed83a 	srl	r23,r17,r19
 2007e58:	8c22983a 	sll	r17,r17,r16
 2007e5c:	38a8b03a 	or	r20,r7,r2
 2007e60:	a02ad43a 	srli	r21,r20,16
 2007e64:	94c4d83a 	srl	r2,r18,r19
 2007e68:	b809883a 	mov	r4,r23
 2007e6c:	a80b883a 	mov	r5,r21
 2007e70:	88a2b03a 	or	r17,r17,r2
 2007e74:	342c983a 	sll	r22,r6,r16
 2007e78:	2008f5c0 	call	2008f5c <__umodsi3>
 2007e7c:	b809883a 	mov	r4,r23
 2007e80:	a80b883a 	mov	r5,r21
 2007e84:	d8800015 	stw	r2,0(sp)
 2007e88:	2008f540 	call	2008f54 <__udivsi3>
 2007e8c:	d8c00017 	ldw	r3,0(sp)
 2007e90:	102f883a 	mov	r23,r2
 2007e94:	a73fffcc 	andi	fp,r20,65535
 2007e98:	180a943a 	slli	r5,r3,16
 2007e9c:	8804d43a 	srli	r2,r17,16
 2007ea0:	bf09383a 	mul	r4,r23,fp
 2007ea4:	9424983a 	sll	r18,r18,r16
 2007ea8:	288ab03a 	or	r5,r5,r2
 2007eac:	2900042e 	bgeu	r5,r4,2007ec0 <__umoddi3+0x358>
 2007eb0:	2d0b883a 	add	r5,r5,r20
 2007eb4:	b8bfffc4 	addi	r2,r23,-1
 2007eb8:	2d00812e 	bgeu	r5,r20,20080c0 <__umoddi3+0x558>
 2007ebc:	102f883a 	mov	r23,r2
 2007ec0:	2907c83a 	sub	r3,r5,r4
 2007ec4:	1809883a 	mov	r4,r3
 2007ec8:	a80b883a 	mov	r5,r21
 2007ecc:	d8c00015 	stw	r3,0(sp)
 2007ed0:	2008f5c0 	call	2008f5c <__umodsi3>
 2007ed4:	d8c00017 	ldw	r3,0(sp)
 2007ed8:	a80b883a 	mov	r5,r21
 2007edc:	d8800015 	stw	r2,0(sp)
 2007ee0:	1809883a 	mov	r4,r3
 2007ee4:	2008f540 	call	2008f54 <__udivsi3>
 2007ee8:	d9800017 	ldw	r6,0(sp)
 2007eec:	8c7fffcc 	andi	r17,r17,65535
 2007ef0:	3008943a 	slli	r4,r6,16
 2007ef4:	170d383a 	mul	r6,r2,fp
 2007ef8:	2448b03a 	or	r4,r4,r17
 2007efc:	2180042e 	bgeu	r4,r6,2007f10 <__umoddi3+0x3a8>
 2007f00:	2509883a 	add	r4,r4,r20
 2007f04:	10ffffc4 	addi	r3,r2,-1
 2007f08:	2500692e 	bgeu	r4,r20,20080b0 <__umoddi3+0x548>
 2007f0c:	1805883a 	mov	r2,r3
 2007f10:	b82e943a 	slli	r23,r23,16
 2007f14:	b010d43a 	srli	r8,r22,16
 2007f18:	b1ffffcc 	andi	r7,r22,65535
 2007f1c:	15eeb03a 	or	r23,r2,r23
 2007f20:	b8bfffcc 	andi	r2,r23,65535
 2007f24:	b82ed43a 	srli	r23,r23,16
 2007f28:	11c7383a 	mul	r3,r2,r7
 2007f2c:	1205383a 	mul	r2,r2,r8
 2007f30:	b9cf383a 	mul	r7,r23,r7
 2007f34:	400b883a 	mov	r5,r8
 2007f38:	1810d43a 	srli	r8,r3,16
 2007f3c:	3885883a 	add	r2,r7,r2
 2007f40:	2189c83a 	sub	r4,r4,r6
 2007f44:	1205883a 	add	r2,r2,r8
 2007f48:	b94b383a 	mul	r5,r23,r5
 2007f4c:	11c0022e 	bgeu	r2,r7,2007f58 <__umoddi3+0x3f0>
 2007f50:	01800074 	movhi	r6,1
 2007f54:	298b883a 	add	r5,r5,r6
 2007f58:	100cd43a 	srli	r6,r2,16
 2007f5c:	1004943a 	slli	r2,r2,16
 2007f60:	18ffffcc 	andi	r3,r3,65535
 2007f64:	298b883a 	add	r5,r5,r6
 2007f68:	10c5883a 	add	r2,r2,r3
 2007f6c:	21403836 	bltu	r4,r5,2008050 <__umoddi3+0x4e8>
 2007f70:	21405c26 	beq	r4,r5,20080e4 <__umoddi3+0x57c>
 2007f74:	2147c83a 	sub	r3,r4,r5
 2007f78:	102d883a 	mov	r22,r2
 2007f7c:	95adc83a 	sub	r22,r18,r22
 2007f80:	95a5803a 	cmpltu	r18,r18,r22
 2007f84:	1c87c83a 	sub	r3,r3,r18
 2007f88:	1cc4983a 	sll	r2,r3,r19
 2007f8c:	b42cd83a 	srl	r22,r22,r16
 2007f90:	1c06d83a 	srl	r3,r3,r16
 2007f94:	1584b03a 	or	r2,r2,r22
 2007f98:	003f9006 	br	2007ddc <__umoddi3+0x274>
 2007f9c:	002b883a 	mov	r21,zero
 2007fa0:	003f1706 	br	2007c00 <__umoddi3+0x98>
 2007fa4:	8560983a 	sll	r16,r16,r21
 2007fa8:	88e6d83a 	srl	r19,r17,r3
 2007fac:	90c6d83a 	srl	r3,r18,r3
 2007fb0:	8028d43a 	srli	r20,r16,16
 2007fb4:	8d62983a 	sll	r17,r17,r21
 2007fb8:	9809883a 	mov	r4,r19
 2007fbc:	a00b883a 	mov	r5,r20
 2007fc0:	88eeb03a 	or	r23,r17,r3
 2007fc4:	2008f5c0 	call	2008f5c <__umodsi3>
 2007fc8:	9809883a 	mov	r4,r19
 2007fcc:	a00b883a 	mov	r5,r20
 2007fd0:	1023883a 	mov	r17,r2
 2007fd4:	2008f540 	call	2008f54 <__udivsi3>
 2007fd8:	85bfffcc 	andi	r22,r16,65535
 2007fdc:	880a943a 	slli	r5,r17,16
 2007fe0:	b806d43a 	srli	r3,r23,16
 2007fe4:	1585383a 	mul	r2,r2,r22
 2007fe8:	9566983a 	sll	r19,r18,r21
 2007fec:	28cab03a 	or	r5,r5,r3
 2007ff0:	2880042e 	bgeu	r5,r2,2008004 <__umoddi3+0x49c>
 2007ff4:	2c0b883a 	add	r5,r5,r16
 2007ff8:	2c000236 	bltu	r5,r16,2008004 <__umoddi3+0x49c>
 2007ffc:	2880012e 	bgeu	r5,r2,2008004 <__umoddi3+0x49c>
 2008000:	2c0b883a 	add	r5,r5,r16
 2008004:	28a5c83a 	sub	r18,r5,r2
 2008008:	9009883a 	mov	r4,r18
 200800c:	a00b883a 	mov	r5,r20
 2008010:	2008f5c0 	call	2008f5c <__umodsi3>
 2008014:	1023883a 	mov	r17,r2
 2008018:	9009883a 	mov	r4,r18
 200801c:	a00b883a 	mov	r5,r20
 2008020:	2008f540 	call	2008f54 <__udivsi3>
 2008024:	8822943a 	slli	r17,r17,16
 2008028:	1585383a 	mul	r2,r2,r22
 200802c:	bdffffcc 	andi	r23,r23,65535
 2008030:	8de2b03a 	or	r17,r17,r23
 2008034:	8880042e 	bgeu	r17,r2,2008048 <__umoddi3+0x4e0>
 2008038:	8c23883a 	add	r17,r17,r16
 200803c:	8c000236 	bltu	r17,r16,2008048 <__umoddi3+0x4e0>
 2008040:	8880012e 	bgeu	r17,r2,2008048 <__umoddi3+0x4e0>
 2008044:	8c23883a 	add	r17,r17,r16
 2008048:	88a3c83a 	sub	r17,r17,r2
 200804c:	003f3d06 	br	2007d44 <__umoddi3+0x1dc>
 2008050:	15adc83a 	sub	r22,r2,r22
 2008054:	2d07c83a 	sub	r3,r5,r20
 2008058:	1585803a 	cmpltu	r2,r2,r22
 200805c:	1887c83a 	sub	r3,r3,r2
 2008060:	20c7c83a 	sub	r3,r4,r3
 2008064:	003fc506 	br	2007f7c <__umoddi3+0x414>
 2008068:	00c00204 	movi	r3,8
 200806c:	1827883a 	mov	r19,r3
 2008070:	003f0b06 	br	2007ca0 <__umoddi3+0x138>
 2008074:	00c00604 	movi	r3,24
 2008078:	1827883a 	mov	r19,r3
 200807c:	003f0806 	br	2007ca0 <__umoddi3+0x138>
 2008080:	00800604 	movi	r2,24
 2008084:	1009883a 	mov	r4,r2
 2008088:	003ecf06 	br	2007bc8 <__umoddi3+0x60>
 200808c:	00800204 	movi	r2,8
 2008090:	1007883a 	mov	r3,r2
 2008094:	003f1f06 	br	2007d14 <__umoddi3+0x1ac>
 2008098:	00800604 	movi	r2,24
 200809c:	1007883a 	mov	r3,r2
 20080a0:	003f1c06 	br	2007d14 <__umoddi3+0x1ac>
 20080a4:	00800204 	movi	r2,8
 20080a8:	1009883a 	mov	r4,r2
 20080ac:	003ec606 	br	2007bc8 <__umoddi3+0x60>
 20080b0:	21bf962e 	bgeu	r4,r6,2007f0c <__umoddi3+0x3a4>
 20080b4:	10bfff84 	addi	r2,r2,-2
 20080b8:	2509883a 	add	r4,r4,r20
 20080bc:	003f9406 	br	2007f10 <__umoddi3+0x3a8>
 20080c0:	293f7e2e 	bgeu	r5,r4,2007ebc <__umoddi3+0x354>
 20080c4:	bdffff84 	addi	r23,r23,-2
 20080c8:	2d0b883a 	add	r5,r5,r20
 20080cc:	003f7c06 	br	2007ec0 <__umoddi3+0x358>
 20080d0:	1c07883a 	add	r3,r3,r16
 20080d4:	003f2a06 	br	2007d80 <__umoddi3+0x218>
 20080d8:	9005883a 	mov	r2,r18
 20080dc:	a007883a 	mov	r3,r20
 20080e0:	003f3e06 	br	2007ddc <__umoddi3+0x274>
 20080e4:	90bfda36 	bltu	r18,r2,2008050 <__umoddi3+0x4e8>
 20080e8:	102d883a 	mov	r22,r2
 20080ec:	0007883a 	mov	r3,zero
 20080f0:	003fa206 	br	2007f7c <__umoddi3+0x414>

020080f4 <_fpadd_parts>:
 20080f4:	2005883a 	mov	r2,r4
 20080f8:	21000017 	ldw	r4,0(r4)
 20080fc:	01c00044 	movi	r7,1
 2008100:	3900622e 	bgeu	r7,r4,200828c <_fpadd_parts+0x198>
 2008104:	28c00017 	ldw	r3,0(r5)
 2008108:	38c05f2e 	bgeu	r7,r3,2008288 <_fpadd_parts+0x194>
 200810c:	01c00104 	movi	r7,4
 2008110:	21c0c626 	beq	r4,r7,200842c <_fpadd_parts+0x338>
 2008114:	19c05c26 	beq	r3,r7,2008288 <_fpadd_parts+0x194>
 2008118:	01c00084 	movi	r7,2
 200811c:	19c06b26 	beq	r3,r7,20082cc <_fpadd_parts+0x1d8>
 2008120:	21c05926 	beq	r4,r7,2008288 <_fpadd_parts+0x194>
 2008124:	11c00217 	ldw	r7,8(r2)
 2008128:	2ac00217 	ldw	r11,8(r5)
 200812c:	13000317 	ldw	r12,12(r2)
 2008130:	13400417 	ldw	r13,16(r2)
 2008134:	3ac9c83a 	sub	r4,r7,r11
 2008138:	2a000317 	ldw	r8,12(r5)
 200813c:	2a400417 	ldw	r9,16(r5)
 2008140:	2015883a 	mov	r10,r4
 2008144:	20007516 	blt	r4,zero,200831c <_fpadd_parts+0x228>
 2008148:	00c00fc4 	movi	r3,63
 200814c:	1a805016 	blt	r3,r10,2008290 <_fpadd_parts+0x19c>
 2008150:	0100870e 	bge	zero,r4,2008370 <_fpadd_parts+0x27c>
 2008154:	50fff804 	addi	r3,r10,-32
 2008158:	18009916 	blt	r3,zero,20083c0 <_fpadd_parts+0x2cc>
 200815c:	48d6d83a 	srl	r11,r9,r3
 2008160:	001d883a 	mov	r14,zero
 2008164:	18009e16 	blt	r3,zero,20083e0 <_fpadd_parts+0x2ec>
 2008168:	01000044 	movi	r4,1
 200816c:	20c6983a 	sll	r3,r4,r3
 2008170:	0015883a 	mov	r10,zero
 2008174:	513fffc4 	addi	r4,r10,-1
 2008178:	2295403a 	cmpgeu	r10,r4,r10
 200817c:	1a87c83a 	sub	r3,r3,r10
 2008180:	1a52703a 	and	r9,r3,r9
 2008184:	2210703a 	and	r8,r4,r8
 2008188:	4250b03a 	or	r8,r8,r9
 200818c:	4010c03a 	cmpne	r8,r8,zero
 2008190:	42d0b03a 	or	r8,r8,r11
 2008194:	7013883a 	mov	r9,r14
 2008198:	11000117 	ldw	r4,4(r2)
 200819c:	28800117 	ldw	r2,4(r5)
 20081a0:	20804126 	beq	r4,r2,20082a8 <_fpadd_parts+0x1b4>
 20081a4:	20006326 	beq	r4,zero,2008334 <_fpadd_parts+0x240>
 20081a8:	4305c83a 	sub	r2,r8,r12
 20081ac:	4091803a 	cmpltu	r8,r8,r2
 20081b0:	4b47c83a 	sub	r3,r9,r13
 20081b4:	1a07c83a 	sub	r3,r3,r8
 20081b8:	18006316 	blt	r3,zero,2008348 <_fpadd_parts+0x254>
 20081bc:	30000115 	stw	zero,4(r6)
 20081c0:	31c00215 	stw	r7,8(r6)
 20081c4:	30800315 	stw	r2,12(r6)
 20081c8:	30c00415 	stw	r3,16(r6)
 20081cc:	11ffffc4 	addi	r7,r2,-1
 20081d0:	388b403a 	cmpgeu	r5,r7,r2
 20081d4:	194bc83a 	sub	r5,r3,r5
 20081d8:	01040034 	movhi	r4,4096
 20081dc:	213fffc4 	addi	r4,r4,-1
 20081e0:	21401736 	bltu	r4,r5,2008240 <_fpadd_parts+0x14c>
 20081e4:	29008226 	beq	r5,r4,20083f0 <_fpadd_parts+0x2fc>
 20081e8:	31400217 	ldw	r5,8(r6)
 20081ec:	02840034 	movhi	r10,4096
 20081f0:	52bfffc4 	addi	r10,r10,-1
 20081f4:	033fff84 	movi	r12,-2
 20081f8:	297fffc4 	addi	r5,r5,-1
 20081fc:	00000106 	br	2008204 <_fpadd_parts+0x110>
 2008200:	3a804a26 	beq	r7,r10,200832c <_fpadd_parts+0x238>
 2008204:	1089883a 	add	r4,r2,r2
 2008208:	2091803a 	cmpltu	r8,r4,r2
 200820c:	18c7883a 	add	r3,r3,r3
 2008210:	227fffc4 	addi	r9,r4,-1
 2008214:	40d1883a 	add	r8,r8,r3
 2008218:	490f403a 	cmpgeu	r7,r9,r4
 200821c:	41cfc83a 	sub	r7,r8,r7
 2008220:	2817883a 	mov	r11,r5
 2008224:	2005883a 	mov	r2,r4
 2008228:	4007883a 	mov	r3,r8
 200822c:	297fffc4 	addi	r5,r5,-1
 2008230:	51fff32e 	bgeu	r10,r7,2008200 <_fpadd_parts+0x10c>
 2008234:	31000315 	stw	r4,12(r6)
 2008238:	32000415 	stw	r8,16(r6)
 200823c:	32c00215 	stw	r11,8(r6)
 2008240:	010000c4 	movi	r4,3
 2008244:	31000015 	stw	r4,0(r6)
 2008248:	01080034 	movhi	r4,8192
 200824c:	213fffc4 	addi	r4,r4,-1
 2008250:	20c00b2e 	bgeu	r4,r3,2008280 <_fpadd_parts+0x18c>
 2008254:	180e97fa 	slli	r7,r3,31
 2008258:	1008d07a 	srli	r4,r2,1
 200825c:	31400217 	ldw	r5,8(r6)
 2008260:	1806d07a 	srli	r3,r3,1
 2008264:	1080004c 	andi	r2,r2,1
 2008268:	3908b03a 	or	r4,r7,r4
 200826c:	1108b03a 	or	r4,r2,r4
 2008270:	29400044 	addi	r5,r5,1
 2008274:	31000315 	stw	r4,12(r6)
 2008278:	30c00415 	stw	r3,16(r6)
 200827c:	31400215 	stw	r5,8(r6)
 2008280:	3005883a 	mov	r2,r6
 2008284:	f800283a 	ret
 2008288:	2805883a 	mov	r2,r5
 200828c:	f800283a 	ret
 2008290:	59c01e0e 	bge	r11,r7,200830c <_fpadd_parts+0x218>
 2008294:	11000117 	ldw	r4,4(r2)
 2008298:	28800117 	ldw	r2,4(r5)
 200829c:	0011883a 	mov	r8,zero
 20082a0:	0013883a 	mov	r9,zero
 20082a4:	20bfbf1e 	bne	r4,r2,20081a4 <_fpadd_parts+0xb0>
 20082a8:	4305883a 	add	r2,r8,r12
 20082ac:	1207803a 	cmpltu	r3,r2,r8
 20082b0:	4b53883a 	add	r9,r9,r13
 20082b4:	1a47883a 	add	r3,r3,r9
 20082b8:	31000115 	stw	r4,4(r6)
 20082bc:	31c00215 	stw	r7,8(r6)
 20082c0:	30800315 	stw	r2,12(r6)
 20082c4:	30c00415 	stw	r3,16(r6)
 20082c8:	003fdd06 	br	2008240 <_fpadd_parts+0x14c>
 20082cc:	20ffef1e 	bne	r4,r3,200828c <_fpadd_parts+0x198>
 20082d0:	31000015 	stw	r4,0(r6)
 20082d4:	10c00117 	ldw	r3,4(r2)
 20082d8:	30c00115 	stw	r3,4(r6)
 20082dc:	10c00217 	ldw	r3,8(r2)
 20082e0:	11000117 	ldw	r4,4(r2)
 20082e4:	29400117 	ldw	r5,4(r5)
 20082e8:	30c00215 	stw	r3,8(r6)
 20082ec:	10c00317 	ldw	r3,12(r2)
 20082f0:	2908703a 	and	r4,r5,r4
 20082f4:	30c00315 	stw	r3,12(r6)
 20082f8:	10c00417 	ldw	r3,16(r2)
 20082fc:	31000115 	stw	r4,4(r6)
 2008300:	3005883a 	mov	r2,r6
 2008304:	30c00415 	stw	r3,16(r6)
 2008308:	f800283a 	ret
 200830c:	580f883a 	mov	r7,r11
 2008310:	0019883a 	mov	r12,zero
 2008314:	001b883a 	mov	r13,zero
 2008318:	003f9f06 	br	2008198 <_fpadd_parts+0xa4>
 200831c:	0115c83a 	sub	r10,zero,r4
 2008320:	00c00fc4 	movi	r3,63
 2008324:	1abfda16 	blt	r3,r10,2008290 <_fpadd_parts+0x19c>
 2008328:	003f8906 	br	2008150 <_fpadd_parts+0x5c>
 200832c:	627fb52e 	bgeu	r12,r9,2008204 <_fpadd_parts+0x110>
 2008330:	003fc006 	br	2008234 <_fpadd_parts+0x140>
 2008334:	6205c83a 	sub	r2,r12,r8
 2008338:	6099803a 	cmpltu	r12,r12,r2
 200833c:	6a47c83a 	sub	r3,r13,r9
 2008340:	1b07c83a 	sub	r3,r3,r12
 2008344:	183f9d0e 	bge	r3,zero,20081bc <_fpadd_parts+0xc8>
 2008348:	0085c83a 	sub	r2,zero,r2
 200834c:	1008c03a 	cmpne	r4,r2,zero
 2008350:	00c7c83a 	sub	r3,zero,r3
 2008354:	1907c83a 	sub	r3,r3,r4
 2008358:	01000044 	movi	r4,1
 200835c:	31000115 	stw	r4,4(r6)
 2008360:	31c00215 	stw	r7,8(r6)
 2008364:	30800315 	stw	r2,12(r6)
 2008368:	30c00415 	stw	r3,16(r6)
 200836c:	003f9706 	br	20081cc <_fpadd_parts+0xd8>
 2008370:	203f8926 	beq	r4,zero,2008198 <_fpadd_parts+0xa4>
 2008374:	50fff804 	addi	r3,r10,-32
 2008378:	3a8f883a 	add	r7,r7,r10
 200837c:	18002316 	blt	r3,zero,200840c <_fpadd_parts+0x318>
 2008380:	68d6d83a 	srl	r11,r13,r3
 2008384:	001d883a 	mov	r14,zero
 2008388:	18001c16 	blt	r3,zero,20083fc <_fpadd_parts+0x308>
 200838c:	01000044 	movi	r4,1
 2008390:	20c6983a 	sll	r3,r4,r3
 2008394:	0015883a 	mov	r10,zero
 2008398:	513fffc4 	addi	r4,r10,-1
 200839c:	2295403a 	cmpgeu	r10,r4,r10
 20083a0:	1a87c83a 	sub	r3,r3,r10
 20083a4:	1b5a703a 	and	r13,r3,r13
 20083a8:	2318703a 	and	r12,r4,r12
 20083ac:	6358b03a 	or	r12,r12,r13
 20083b0:	6018c03a 	cmpne	r12,r12,zero
 20083b4:	62d8b03a 	or	r12,r12,r11
 20083b8:	701b883a 	mov	r13,r14
 20083bc:	003f7606 	br	2008198 <_fpadd_parts+0xa4>
 20083c0:	4808907a 	slli	r4,r9,1
 20083c4:	02c007c4 	movi	r11,31
 20083c8:	5a97c83a 	sub	r11,r11,r10
 20083cc:	22c8983a 	sll	r4,r4,r11
 20083d0:	4296d83a 	srl	r11,r8,r10
 20083d4:	4a9cd83a 	srl	r14,r9,r10
 20083d8:	22d6b03a 	or	r11,r4,r11
 20083dc:	003f6106 	br	2008164 <_fpadd_parts+0x70>
 20083e0:	00c00044 	movi	r3,1
 20083e4:	1a94983a 	sll	r10,r3,r10
 20083e8:	0007883a 	mov	r3,zero
 20083ec:	003f6106 	br	2008174 <_fpadd_parts+0x80>
 20083f0:	013fff84 	movi	r4,-2
 20083f4:	21ff7c2e 	bgeu	r4,r7,20081e8 <_fpadd_parts+0xf4>
 20083f8:	003f9106 	br	2008240 <_fpadd_parts+0x14c>
 20083fc:	00c00044 	movi	r3,1
 2008400:	1a94983a 	sll	r10,r3,r10
 2008404:	0007883a 	mov	r3,zero
 2008408:	003fe306 	br	2008398 <_fpadd_parts+0x2a4>
 200840c:	6816907a 	slli	r11,r13,1
 2008410:	010007c4 	movi	r4,31
 2008414:	2289c83a 	sub	r4,r4,r10
 2008418:	5908983a 	sll	r4,r11,r4
 200841c:	6296d83a 	srl	r11,r12,r10
 2008420:	6a9cd83a 	srl	r14,r13,r10
 2008424:	22d6b03a 	or	r11,r4,r11
 2008428:	003fd706 	br	2008388 <_fpadd_parts+0x294>
 200842c:	193f971e 	bne	r3,r4,200828c <_fpadd_parts+0x198>
 2008430:	11000117 	ldw	r4,4(r2)
 2008434:	28c00117 	ldw	r3,4(r5)
 2008438:	20ff9426 	beq	r4,r3,200828c <_fpadd_parts+0x198>
 200843c:	00808074 	movhi	r2,513
 2008440:	10aeef04 	addi	r2,r2,-17476
 2008444:	f800283a 	ret

02008448 <__adddf3>:
 2008448:	deffec04 	addi	sp,sp,-80
 200844c:	d9001115 	stw	r4,68(sp)
 2008450:	d9401215 	stw	r5,72(sp)
 2008454:	d9001104 	addi	r4,sp,68
 2008458:	d9400a04 	addi	r5,sp,40
 200845c:	dfc01315 	stw	ra,76(sp)
 2008460:	d9c01015 	stw	r7,64(sp)
 2008464:	d9800f15 	stw	r6,60(sp)
 2008468:	20092940 	call	2009294 <__unpack_d>
 200846c:	d9000f04 	addi	r4,sp,60
 2008470:	d9400504 	addi	r5,sp,20
 2008474:	20092940 	call	2009294 <__unpack_d>
 2008478:	d9000a04 	addi	r4,sp,40
 200847c:	d9400504 	addi	r5,sp,20
 2008480:	d80d883a 	mov	r6,sp
 2008484:	20080f40 	call	20080f4 <_fpadd_parts>
 2008488:	1009883a 	mov	r4,r2
 200848c:	20090700 	call	2009070 <__pack_d>
 2008490:	dfc01317 	ldw	ra,76(sp)
 2008494:	dec01404 	addi	sp,sp,80
 2008498:	f800283a 	ret

0200849c <__subdf3>:
 200849c:	deffec04 	addi	sp,sp,-80
 20084a0:	d9001115 	stw	r4,68(sp)
 20084a4:	d9401215 	stw	r5,72(sp)
 20084a8:	d9001104 	addi	r4,sp,68
 20084ac:	d9400a04 	addi	r5,sp,40
 20084b0:	dfc01315 	stw	ra,76(sp)
 20084b4:	d9c01015 	stw	r7,64(sp)
 20084b8:	d9800f15 	stw	r6,60(sp)
 20084bc:	20092940 	call	2009294 <__unpack_d>
 20084c0:	d9000f04 	addi	r4,sp,60
 20084c4:	d9400504 	addi	r5,sp,20
 20084c8:	20092940 	call	2009294 <__unpack_d>
 20084cc:	d8800617 	ldw	r2,24(sp)
 20084d0:	d9000a04 	addi	r4,sp,40
 20084d4:	d9400504 	addi	r5,sp,20
 20084d8:	d80d883a 	mov	r6,sp
 20084dc:	1080005c 	xori	r2,r2,1
 20084e0:	d8800615 	stw	r2,24(sp)
 20084e4:	20080f40 	call	20080f4 <_fpadd_parts>
 20084e8:	1009883a 	mov	r4,r2
 20084ec:	20090700 	call	2009070 <__pack_d>
 20084f0:	dfc01317 	ldw	ra,76(sp)
 20084f4:	dec01404 	addi	sp,sp,80
 20084f8:	f800283a 	ret

020084fc <__muldf3>:
 20084fc:	deffe404 	addi	sp,sp,-112
 2008500:	d9001115 	stw	r4,68(sp)
 2008504:	d9401215 	stw	r5,72(sp)
 2008508:	d9001104 	addi	r4,sp,68
 200850c:	d9400a04 	addi	r5,sp,40
 2008510:	dfc01b15 	stw	ra,108(sp)
 2008514:	d9800f15 	stw	r6,60(sp)
 2008518:	d9c01015 	stw	r7,64(sp)
 200851c:	ddc01a15 	stw	r23,104(sp)
 2008520:	dd801915 	stw	r22,100(sp)
 2008524:	dd401815 	stw	r21,96(sp)
 2008528:	dd001715 	stw	r20,92(sp)
 200852c:	dcc01615 	stw	r19,88(sp)
 2008530:	dc801515 	stw	r18,84(sp)
 2008534:	dc401415 	stw	r17,80(sp)
 2008538:	dc001315 	stw	r16,76(sp)
 200853c:	20092940 	call	2009294 <__unpack_d>
 2008540:	d9000f04 	addi	r4,sp,60
 2008544:	d9400504 	addi	r5,sp,20
 2008548:	20092940 	call	2009294 <__unpack_d>
 200854c:	d8c00a17 	ldw	r3,40(sp)
 2008550:	00800044 	movi	r2,1
 2008554:	10c01136 	bltu	r2,r3,200859c <__muldf3+0xa0>
 2008558:	d8c00b17 	ldw	r3,44(sp)
 200855c:	d8800617 	ldw	r2,24(sp)
 2008560:	d9000a04 	addi	r4,sp,40
 2008564:	1884c03a 	cmpne	r2,r3,r2
 2008568:	d8800b15 	stw	r2,44(sp)
 200856c:	20090700 	call	2009070 <__pack_d>
 2008570:	dfc01b17 	ldw	ra,108(sp)
 2008574:	ddc01a17 	ldw	r23,104(sp)
 2008578:	dd801917 	ldw	r22,100(sp)
 200857c:	dd401817 	ldw	r21,96(sp)
 2008580:	dd001717 	ldw	r20,92(sp)
 2008584:	dcc01617 	ldw	r19,88(sp)
 2008588:	dc801517 	ldw	r18,84(sp)
 200858c:	dc401417 	ldw	r17,80(sp)
 2008590:	dc001317 	ldw	r16,76(sp)
 2008594:	dec01c04 	addi	sp,sp,112
 2008598:	f800283a 	ret
 200859c:	d9000517 	ldw	r4,20(sp)
 20085a0:	11000636 	bltu	r2,r4,20085bc <__muldf3+0xc0>
 20085a4:	d8800617 	ldw	r2,24(sp)
 20085a8:	d8c00b17 	ldw	r3,44(sp)
 20085ac:	d9000504 	addi	r4,sp,20
 20085b0:	1884c03a 	cmpne	r2,r3,r2
 20085b4:	d8800615 	stw	r2,24(sp)
 20085b8:	003fec06 	br	200856c <__muldf3+0x70>
 20085bc:	00800104 	movi	r2,4
 20085c0:	1880051e 	bne	r3,r2,20085d8 <__muldf3+0xdc>
 20085c4:	00800084 	movi	r2,2
 20085c8:	20bfe31e 	bne	r4,r2,2008558 <__muldf3+0x5c>
 20085cc:	01008074 	movhi	r4,513
 20085d0:	212eef04 	addi	r4,r4,-17476
 20085d4:	003fe506 	br	200856c <__muldf3+0x70>
 20085d8:	2080031e 	bne	r4,r2,20085e8 <__muldf3+0xec>
 20085dc:	00800084 	movi	r2,2
 20085e0:	18bffa26 	beq	r3,r2,20085cc <__muldf3+0xd0>
 20085e4:	003fef06 	br	20085a4 <__muldf3+0xa8>
 20085e8:	00800084 	movi	r2,2
 20085ec:	18bfda26 	beq	r3,r2,2008558 <__muldf3+0x5c>
 20085f0:	20bfec26 	beq	r4,r2,20085a4 <__muldf3+0xa8>
 20085f4:	dc000d17 	ldw	r16,52(sp)
 20085f8:	dd000817 	ldw	r20,32(sp)
 20085fc:	dc800917 	ldw	r18,36(sp)
 2008600:	8009883a 	mov	r4,r16
 2008604:	000b883a 	mov	r5,zero
 2008608:	a00d883a 	mov	r6,r20
 200860c:	000f883a 	mov	r7,zero
 2008610:	2008f640 	call	2008f64 <__muldi3>
 2008614:	dc400e17 	ldw	r17,56(sp)
 2008618:	9009883a 	mov	r4,r18
 200861c:	800d883a 	mov	r6,r16
 2008620:	000b883a 	mov	r5,zero
 2008624:	000f883a 	mov	r7,zero
 2008628:	102f883a 	mov	r23,r2
 200862c:	1827883a 	mov	r19,r3
 2008630:	2008f640 	call	2008f64 <__muldi3>
 2008634:	900d883a 	mov	r6,r18
 2008638:	8809883a 	mov	r4,r17
 200863c:	000b883a 	mov	r5,zero
 2008640:	000f883a 	mov	r7,zero
 2008644:	102b883a 	mov	r21,r2
 2008648:	1821883a 	mov	r16,r3
 200864c:	2008f640 	call	2008f64 <__muldi3>
 2008650:	8809883a 	mov	r4,r17
 2008654:	000b883a 	mov	r5,zero
 2008658:	a00d883a 	mov	r6,r20
 200865c:	000f883a 	mov	r7,zero
 2008660:	102d883a 	mov	r22,r2
 2008664:	1825883a 	mov	r18,r3
 2008668:	2008f640 	call	2008f64 <__muldi3>
 200866c:	154b883a 	add	r5,r2,r21
 2008670:	2889803a 	cmpltu	r4,r5,r2
 2008674:	1c07883a 	add	r3,r3,r16
 2008678:	20c9883a 	add	r4,r4,r3
 200867c:	24004b36 	bltu	r4,r16,20087ac <__muldf3+0x2b0>
 2008680:	8100011e 	bne	r16,r4,2008688 <__muldf3+0x18c>
 2008684:	2d404936 	bltu	r5,r21,20087ac <__muldf3+0x2b0>
 2008688:	0011883a 	mov	r8,zero
 200868c:	0007883a 	mov	r3,zero
 2008690:	2ccb883a 	add	r5,r5,r19
 2008694:	b80d883a 	mov	r6,r23
 2008698:	2cc0012e 	bgeu	r5,r19,20086a0 <__muldf3+0x1a4>
 200869c:	02000044 	movi	r8,1
 20086a0:	258f883a 	add	r7,r4,r22
 20086a4:	3909803a 	cmpltu	r4,r7,r4
 20086a8:	da400c17 	ldw	r9,48(sp)
 20086ac:	2489883a 	add	r4,r4,r18
 20086b0:	d8800717 	ldw	r2,28(sp)
 20086b4:	20c9883a 	add	r4,r4,r3
 20086b8:	da800b17 	ldw	r10,44(sp)
 20086bc:	d8c00617 	ldw	r3,24(sp)
 20086c0:	3a11883a 	add	r8,r7,r8
 20086c4:	4885883a 	add	r2,r9,r2
 20086c8:	50c6c03a 	cmpne	r3,r10,r3
 20086cc:	41cf803a 	cmpltu	r7,r8,r7
 20086d0:	12400104 	addi	r9,r2,4
 20086d4:	d8c00115 	stw	r3,4(sp)
 20086d8:	3909883a 	add	r4,r7,r4
 20086dc:	da400215 	stw	r9,8(sp)
 20086e0:	03480034 	movhi	r13,8192
 20086e4:	6b7fffc4 	addi	r13,r13,-1
 20086e8:	4007883a 	mov	r3,r8
 20086ec:	6900102e 	bgeu	r13,r4,2008730 <__muldf3+0x234>
 20086f0:	10800144 	addi	r2,r2,5
 20086f4:	180ed07a 	srli	r7,r3,1
 20086f8:	18c0004c 	andi	r3,r3,1
 20086fc:	201097fa 	slli	r8,r4,31
 2008700:	281697fa 	slli	r11,r5,31
 2008704:	2008d07a 	srli	r4,r4,1
 2008708:	3014d07a 	srli	r10,r6,1
 200870c:	2812d07a 	srli	r9,r5,1
 2008710:	1019883a 	mov	r12,r2
 2008714:	18000226 	beq	r3,zero,2008720 <__muldf3+0x224>
 2008718:	5a8cb03a 	or	r6,r11,r10
 200871c:	49600034 	orhi	r5,r9,32768
 2008720:	41c6b03a 	or	r3,r8,r7
 2008724:	10800044 	addi	r2,r2,1
 2008728:	693ff236 	bltu	r13,r4,20086f4 <__muldf3+0x1f8>
 200872c:	db000215 	stw	r12,8(sp)
 2008730:	03440034 	movhi	r13,4096
 2008734:	6b7fffc4 	addi	r13,r13,-1
 2008738:	69001336 	bltu	r13,r4,2008788 <__muldf3+0x28c>
 200873c:	d8800217 	ldw	r2,8(sp)
 2008740:	10bfffc4 	addi	r2,r2,-1
 2008744:	18d3883a 	add	r9,r3,r3
 2008748:	48c7803a 	cmpltu	r3,r9,r3
 200874c:	2109883a 	add	r4,r4,r4
 2008750:	190f883a 	add	r7,r3,r4
 2008754:	3191883a 	add	r8,r6,r6
 2008758:	4197803a 	cmpltu	r11,r8,r6
 200875c:	2955883a 	add	r10,r5,r5
 2008760:	1019883a 	mov	r12,r2
 2008764:	4807883a 	mov	r3,r9
 2008768:	3809883a 	mov	r4,r7
 200876c:	2800010e 	bge	r5,zero,2008774 <__muldf3+0x278>
 2008770:	48c00054 	ori	r3,r9,1
 2008774:	400d883a 	mov	r6,r8
 2008778:	5a8b883a 	add	r5,r11,r10
 200877c:	10bfffc4 	addi	r2,r2,-1
 2008780:	69fff02e 	bgeu	r13,r7,2008744 <__muldf3+0x248>
 2008784:	db000215 	stw	r12,8(sp)
 2008788:	18803fcc 	andi	r2,r3,255
 200878c:	01c02004 	movi	r7,128
 2008790:	11c00926 	beq	r2,r7,20087b8 <__muldf3+0x2bc>
 2008794:	008000c4 	movi	r2,3
 2008798:	d9000415 	stw	r4,16(sp)
 200879c:	d8c00315 	stw	r3,12(sp)
 20087a0:	d8800015 	stw	r2,0(sp)
 20087a4:	d809883a 	mov	r4,sp
 20087a8:	003f7006 	br	200856c <__muldf3+0x70>
 20087ac:	0011883a 	mov	r8,zero
 20087b0:	00c00044 	movi	r3,1
 20087b4:	003fb606 	br	2008690 <__muldf3+0x194>
 20087b8:	19c0400c 	andi	r7,r3,256
 20087bc:	383ff51e 	bne	r7,zero,2008794 <__muldf3+0x298>
 20087c0:	314ab03a 	or	r5,r6,r5
 20087c4:	283ff326 	beq	r5,zero,2008794 <__muldf3+0x298>
 20087c8:	1885883a 	add	r2,r3,r2
 20087cc:	10cb803a 	cmpltu	r5,r2,r3
 20087d0:	00ffc004 	movi	r3,-256
 20087d4:	10c6703a 	and	r3,r2,r3
 20087d8:	2909883a 	add	r4,r5,r4
 20087dc:	003fed06 	br	2008794 <__muldf3+0x298>

020087e0 <__divdf3>:
 20087e0:	defff104 	addi	sp,sp,-60
 20087e4:	d9000c15 	stw	r4,48(sp)
 20087e8:	d9400d15 	stw	r5,52(sp)
 20087ec:	d9000c04 	addi	r4,sp,48
 20087f0:	d9400504 	addi	r5,sp,20
 20087f4:	dfc00e15 	stw	ra,56(sp)
 20087f8:	d9800a15 	stw	r6,40(sp)
 20087fc:	d9c00b15 	stw	r7,44(sp)
 2008800:	20092940 	call	2009294 <__unpack_d>
 2008804:	d9000a04 	addi	r4,sp,40
 2008808:	d80b883a 	mov	r5,sp
 200880c:	20092940 	call	2009294 <__unpack_d>
 2008810:	d8c00517 	ldw	r3,20(sp)
 2008814:	00800044 	movi	r2,1
 2008818:	10c00536 	bltu	r2,r3,2008830 <__divdf3+0x50>
 200881c:	d9000504 	addi	r4,sp,20
 2008820:	20090700 	call	2009070 <__pack_d>
 2008824:	dfc00e17 	ldw	ra,56(sp)
 2008828:	dec00f04 	addi	sp,sp,60
 200882c:	f800283a 	ret
 2008830:	d9000017 	ldw	r4,0(sp)
 2008834:	11000536 	bltu	r2,r4,200884c <__divdf3+0x6c>
 2008838:	d809883a 	mov	r4,sp
 200883c:	20090700 	call	2009070 <__pack_d>
 2008840:	dfc00e17 	ldw	ra,56(sp)
 2008844:	dec00f04 	addi	sp,sp,60
 2008848:	f800283a 	ret
 200884c:	d9800617 	ldw	r6,24(sp)
 2008850:	d9400117 	ldw	r5,4(sp)
 2008854:	00800104 	movi	r2,4
 2008858:	314af03a 	xor	r5,r6,r5
 200885c:	d9400615 	stw	r5,24(sp)
 2008860:	18800226 	beq	r3,r2,200886c <__divdf3+0x8c>
 2008864:	01400084 	movi	r5,2
 2008868:	1940041e 	bne	r3,r5,200887c <__divdf3+0x9c>
 200886c:	193feb1e 	bne	r3,r4,200881c <__divdf3+0x3c>
 2008870:	01008074 	movhi	r4,513
 2008874:	212eef04 	addi	r4,r4,-17476
 2008878:	003fe906 	br	2008820 <__divdf3+0x40>
 200887c:	20803326 	beq	r4,r2,200894c <__divdf3+0x16c>
 2008880:	21403726 	beq	r4,r5,2008960 <__divdf3+0x180>
 2008884:	d8800217 	ldw	r2,8(sp)
 2008888:	d9000717 	ldw	r4,28(sp)
 200888c:	d8c00917 	ldw	r3,36(sp)
 2008890:	da000417 	ldw	r8,16(sp)
 2008894:	2089c83a 	sub	r4,r4,r2
 2008898:	d9000715 	stw	r4,28(sp)
 200889c:	d8800817 	ldw	r2,32(sp)
 20088a0:	dbc00317 	ldw	r15,12(sp)
 20088a4:	1a000236 	bltu	r3,r8,20088b0 <__divdf3+0xd0>
 20088a8:	40c0081e 	bne	r8,r3,20088cc <__divdf3+0xec>
 20088ac:	13c0072e 	bgeu	r2,r15,20088cc <__divdf3+0xec>
 20088b0:	108b883a 	add	r5,r2,r2
 20088b4:	288d803a 	cmpltu	r6,r5,r2
 20088b8:	18c7883a 	add	r3,r3,r3
 20088bc:	213fffc4 	addi	r4,r4,-1
 20088c0:	2805883a 	mov	r2,r5
 20088c4:	30c7883a 	add	r3,r6,r3
 20088c8:	d9000715 	stw	r4,28(sp)
 20088cc:	01400f44 	movi	r5,61
 20088d0:	000f883a 	mov	r7,zero
 20088d4:	01040034 	movhi	r4,4096
 20088d8:	0019883a 	mov	r12,zero
 20088dc:	001b883a 	mov	r13,zero
 20088e0:	201697fa 	slli	r11,r4,31
 20088e4:	3814d07a 	srli	r10,r7,1
 20088e8:	297fffc4 	addi	r5,r5,-1
 20088ec:	1a000936 	bltu	r3,r8,2008914 <__divdf3+0x134>
 20088f0:	13cdc83a 	sub	r6,r2,r15
 20088f4:	1193803a 	cmpltu	r9,r2,r6
 20088f8:	1a1dc83a 	sub	r14,r3,r8
 20088fc:	40c0011e 	bne	r8,r3,2008904 <__divdf3+0x124>
 2008900:	13c00436 	bltu	r2,r15,2008914 <__divdf3+0x134>
 2008904:	3005883a 	mov	r2,r6
 2008908:	7247c83a 	sub	r3,r14,r9
 200890c:	61d8b03a 	or	r12,r12,r7
 2008910:	691ab03a 	or	r13,r13,r4
 2008914:	108d883a 	add	r6,r2,r2
 2008918:	3093803a 	cmpltu	r9,r6,r2
 200891c:	18c7883a 	add	r3,r3,r3
 2008920:	5a8eb03a 	or	r7,r11,r10
 2008924:	2008d07a 	srli	r4,r4,1
 2008928:	3005883a 	mov	r2,r6
 200892c:	48c7883a 	add	r3,r9,r3
 2008930:	283feb1e 	bne	r5,zero,20088e0 <__divdf3+0x100>
 2008934:	61003fcc 	andi	r4,r12,255
 2008938:	01402004 	movi	r5,128
 200893c:	21400b26 	beq	r4,r5,200896c <__divdf3+0x18c>
 2008940:	db000815 	stw	r12,32(sp)
 2008944:	db400915 	stw	r13,36(sp)
 2008948:	003fb406 	br	200881c <__divdf3+0x3c>
 200894c:	d8000815 	stw	zero,32(sp)
 2008950:	d8000915 	stw	zero,36(sp)
 2008954:	d8000715 	stw	zero,28(sp)
 2008958:	d9000504 	addi	r4,sp,20
 200895c:	003fb006 	br	2008820 <__divdf3+0x40>
 2008960:	d8800515 	stw	r2,20(sp)
 2008964:	d9000504 	addi	r4,sp,20
 2008968:	003fad06 	br	2008820 <__divdf3+0x40>
 200896c:	6140400c 	andi	r5,r12,256
 2008970:	283ff31e 	bne	r5,zero,2008940 <__divdf3+0x160>
 2008974:	30c4b03a 	or	r2,r6,r3
 2008978:	103ff126 	beq	r2,zero,2008940 <__divdf3+0x160>
 200897c:	6109883a 	add	r4,r12,r4
 2008980:	2305803a 	cmpltu	r2,r4,r12
 2008984:	033fc004 	movi	r12,-256
 2008988:	2318703a 	and	r12,r4,r12
 200898c:	135b883a 	add	r13,r2,r13
 2008990:	003feb06 	br	2008940 <__divdf3+0x160>

02008994 <__eqdf2>:
 2008994:	defff104 	addi	sp,sp,-60
 2008998:	d9000c15 	stw	r4,48(sp)
 200899c:	d9400d15 	stw	r5,52(sp)
 20089a0:	d9000c04 	addi	r4,sp,48
 20089a4:	d9400504 	addi	r5,sp,20
 20089a8:	dfc00e15 	stw	ra,56(sp)
 20089ac:	d9800a15 	stw	r6,40(sp)
 20089b0:	d9c00b15 	stw	r7,44(sp)
 20089b4:	20092940 	call	2009294 <__unpack_d>
 20089b8:	d9000a04 	addi	r4,sp,40
 20089bc:	d80b883a 	mov	r5,sp
 20089c0:	20092940 	call	2009294 <__unpack_d>
 20089c4:	d8c00517 	ldw	r3,20(sp)
 20089c8:	00800044 	movi	r2,1
 20089cc:	10c0052e 	bgeu	r2,r3,20089e4 <__eqdf2+0x50>
 20089d0:	d8c00017 	ldw	r3,0(sp)
 20089d4:	10c0032e 	bgeu	r2,r3,20089e4 <__eqdf2+0x50>
 20089d8:	d9000504 	addi	r4,sp,20
 20089dc:	d80b883a 	mov	r5,sp
 20089e0:	20093980 	call	2009398 <__fpcmp_parts_d>
 20089e4:	dfc00e17 	ldw	ra,56(sp)
 20089e8:	dec00f04 	addi	sp,sp,60
 20089ec:	f800283a 	ret

020089f0 <__nedf2>:
 20089f0:	defff104 	addi	sp,sp,-60
 20089f4:	d9000c15 	stw	r4,48(sp)
 20089f8:	d9400d15 	stw	r5,52(sp)
 20089fc:	d9000c04 	addi	r4,sp,48
 2008a00:	d9400504 	addi	r5,sp,20
 2008a04:	dfc00e15 	stw	ra,56(sp)
 2008a08:	d9800a15 	stw	r6,40(sp)
 2008a0c:	d9c00b15 	stw	r7,44(sp)
 2008a10:	20092940 	call	2009294 <__unpack_d>
 2008a14:	d9000a04 	addi	r4,sp,40
 2008a18:	d80b883a 	mov	r5,sp
 2008a1c:	20092940 	call	2009294 <__unpack_d>
 2008a20:	d8c00517 	ldw	r3,20(sp)
 2008a24:	00800044 	movi	r2,1
 2008a28:	10c0052e 	bgeu	r2,r3,2008a40 <__nedf2+0x50>
 2008a2c:	d8c00017 	ldw	r3,0(sp)
 2008a30:	10c0032e 	bgeu	r2,r3,2008a40 <__nedf2+0x50>
 2008a34:	d9000504 	addi	r4,sp,20
 2008a38:	d80b883a 	mov	r5,sp
 2008a3c:	20093980 	call	2009398 <__fpcmp_parts_d>
 2008a40:	dfc00e17 	ldw	ra,56(sp)
 2008a44:	dec00f04 	addi	sp,sp,60
 2008a48:	f800283a 	ret

02008a4c <__gtdf2>:
 2008a4c:	defff104 	addi	sp,sp,-60
 2008a50:	d9000c15 	stw	r4,48(sp)
 2008a54:	d9400d15 	stw	r5,52(sp)
 2008a58:	d9000c04 	addi	r4,sp,48
 2008a5c:	d9400504 	addi	r5,sp,20
 2008a60:	dfc00e15 	stw	ra,56(sp)
 2008a64:	d9800a15 	stw	r6,40(sp)
 2008a68:	d9c00b15 	stw	r7,44(sp)
 2008a6c:	20092940 	call	2009294 <__unpack_d>
 2008a70:	d9000a04 	addi	r4,sp,40
 2008a74:	d80b883a 	mov	r5,sp
 2008a78:	20092940 	call	2009294 <__unpack_d>
 2008a7c:	d8c00517 	ldw	r3,20(sp)
 2008a80:	00800044 	movi	r2,1
 2008a84:	10c0082e 	bgeu	r2,r3,2008aa8 <__gtdf2+0x5c>
 2008a88:	d8c00017 	ldw	r3,0(sp)
 2008a8c:	10c0062e 	bgeu	r2,r3,2008aa8 <__gtdf2+0x5c>
 2008a90:	d9000504 	addi	r4,sp,20
 2008a94:	d80b883a 	mov	r5,sp
 2008a98:	20093980 	call	2009398 <__fpcmp_parts_d>
 2008a9c:	dfc00e17 	ldw	ra,56(sp)
 2008aa0:	dec00f04 	addi	sp,sp,60
 2008aa4:	f800283a 	ret
 2008aa8:	00bfffc4 	movi	r2,-1
 2008aac:	003ffb06 	br	2008a9c <__gtdf2+0x50>

02008ab0 <__gedf2>:
 2008ab0:	defff104 	addi	sp,sp,-60
 2008ab4:	d9000c15 	stw	r4,48(sp)
 2008ab8:	d9400d15 	stw	r5,52(sp)
 2008abc:	d9000c04 	addi	r4,sp,48
 2008ac0:	d9400504 	addi	r5,sp,20
 2008ac4:	dfc00e15 	stw	ra,56(sp)
 2008ac8:	d9800a15 	stw	r6,40(sp)
 2008acc:	d9c00b15 	stw	r7,44(sp)
 2008ad0:	20092940 	call	2009294 <__unpack_d>
 2008ad4:	d9000a04 	addi	r4,sp,40
 2008ad8:	d80b883a 	mov	r5,sp
 2008adc:	20092940 	call	2009294 <__unpack_d>
 2008ae0:	d8c00517 	ldw	r3,20(sp)
 2008ae4:	00800044 	movi	r2,1
 2008ae8:	10c0082e 	bgeu	r2,r3,2008b0c <__gedf2+0x5c>
 2008aec:	d8c00017 	ldw	r3,0(sp)
 2008af0:	10c0062e 	bgeu	r2,r3,2008b0c <__gedf2+0x5c>
 2008af4:	d9000504 	addi	r4,sp,20
 2008af8:	d80b883a 	mov	r5,sp
 2008afc:	20093980 	call	2009398 <__fpcmp_parts_d>
 2008b00:	dfc00e17 	ldw	ra,56(sp)
 2008b04:	dec00f04 	addi	sp,sp,60
 2008b08:	f800283a 	ret
 2008b0c:	00bfffc4 	movi	r2,-1
 2008b10:	003ffb06 	br	2008b00 <__gedf2+0x50>

02008b14 <__ltdf2>:
 2008b14:	defff104 	addi	sp,sp,-60
 2008b18:	d9000c15 	stw	r4,48(sp)
 2008b1c:	d9400d15 	stw	r5,52(sp)
 2008b20:	d9000c04 	addi	r4,sp,48
 2008b24:	d9400504 	addi	r5,sp,20
 2008b28:	dfc00e15 	stw	ra,56(sp)
 2008b2c:	d9800a15 	stw	r6,40(sp)
 2008b30:	d9c00b15 	stw	r7,44(sp)
 2008b34:	20092940 	call	2009294 <__unpack_d>
 2008b38:	d9000a04 	addi	r4,sp,40
 2008b3c:	d80b883a 	mov	r5,sp
 2008b40:	20092940 	call	2009294 <__unpack_d>
 2008b44:	d8c00517 	ldw	r3,20(sp)
 2008b48:	00800044 	movi	r2,1
 2008b4c:	10c0052e 	bgeu	r2,r3,2008b64 <__ltdf2+0x50>
 2008b50:	d8c00017 	ldw	r3,0(sp)
 2008b54:	10c0032e 	bgeu	r2,r3,2008b64 <__ltdf2+0x50>
 2008b58:	d9000504 	addi	r4,sp,20
 2008b5c:	d80b883a 	mov	r5,sp
 2008b60:	20093980 	call	2009398 <__fpcmp_parts_d>
 2008b64:	dfc00e17 	ldw	ra,56(sp)
 2008b68:	dec00f04 	addi	sp,sp,60
 2008b6c:	f800283a 	ret

02008b70 <__floatsidf>:
 2008b70:	2004d7fa 	srli	r2,r4,31
 2008b74:	defff904 	addi	sp,sp,-28
 2008b78:	00c000c4 	movi	r3,3
 2008b7c:	dfc00615 	stw	ra,24(sp)
 2008b80:	dc000515 	stw	r16,20(sp)
 2008b84:	d8c00015 	stw	r3,0(sp)
 2008b88:	d8800115 	stw	r2,4(sp)
 2008b8c:	2000081e 	bne	r4,zero,2008bb0 <__floatsidf+0x40>
 2008b90:	00800084 	movi	r2,2
 2008b94:	d8800015 	stw	r2,0(sp)
 2008b98:	d809883a 	mov	r4,sp
 2008b9c:	20090700 	call	2009070 <__pack_d>
 2008ba0:	dfc00617 	ldw	ra,24(sp)
 2008ba4:	dc000517 	ldw	r16,20(sp)
 2008ba8:	dec00704 	addi	sp,sp,28
 2008bac:	f800283a 	ret
 2008bb0:	00c00f04 	movi	r3,60
 2008bb4:	d8c00215 	stw	r3,8(sp)
 2008bb8:	10000f1e 	bne	r2,zero,2008bf8 <__floatsidf+0x88>
 2008bbc:	2021883a 	mov	r16,r4
 2008bc0:	8009883a 	mov	r4,r16
 2008bc4:	2008fc40 	call	2008fc4 <__clzsi2>
 2008bc8:	11000744 	addi	r4,r2,29
 2008bcc:	0100110e 	bge	zero,r4,2008c14 <__floatsidf+0xa4>
 2008bd0:	10ffff44 	addi	r3,r2,-3
 2008bd4:	18001216 	blt	r3,zero,2008c20 <__floatsidf+0xb0>
 2008bd8:	80c6983a 	sll	r3,r16,r3
 2008bdc:	0009883a 	mov	r4,zero
 2008be0:	014007c4 	movi	r5,31
 2008be4:	2885c83a 	sub	r2,r5,r2
 2008be8:	d9000315 	stw	r4,12(sp)
 2008bec:	d8c00415 	stw	r3,16(sp)
 2008bf0:	d8800215 	stw	r2,8(sp)
 2008bf4:	003fe806 	br	2008b98 <__floatsidf+0x28>
 2008bf8:	00a00034 	movhi	r2,32768
 2008bfc:	20800e26 	beq	r4,r2,2008c38 <__floatsidf+0xc8>
 2008c00:	0121c83a 	sub	r16,zero,r4
 2008c04:	8009883a 	mov	r4,r16
 2008c08:	2008fc40 	call	2008fc4 <__clzsi2>
 2008c0c:	11000744 	addi	r4,r2,29
 2008c10:	013fef16 	blt	zero,r4,2008bd0 <__floatsidf+0x60>
 2008c14:	dc000315 	stw	r16,12(sp)
 2008c18:	d8000415 	stw	zero,16(sp)
 2008c1c:	003fde06 	br	2008b98 <__floatsidf+0x28>
 2008c20:	800ad07a 	srli	r5,r16,1
 2008c24:	00c007c4 	movi	r3,31
 2008c28:	1907c83a 	sub	r3,r3,r4
 2008c2c:	28c6d83a 	srl	r3,r5,r3
 2008c30:	8108983a 	sll	r4,r16,r4
 2008c34:	003fea06 	br	2008be0 <__floatsidf+0x70>
 2008c38:	0005883a 	mov	r2,zero
 2008c3c:	00f07834 	movhi	r3,49632
 2008c40:	003fd706 	br	2008ba0 <__floatsidf+0x30>

02008c44 <__fixdfsi>:
 2008c44:	defff804 	addi	sp,sp,-32
 2008c48:	d9000515 	stw	r4,20(sp)
 2008c4c:	d9400615 	stw	r5,24(sp)
 2008c50:	d9000504 	addi	r4,sp,20
 2008c54:	d80b883a 	mov	r5,sp
 2008c58:	dfc00715 	stw	ra,28(sp)
 2008c5c:	20092940 	call	2009294 <__unpack_d>
 2008c60:	d8800017 	ldw	r2,0(sp)
 2008c64:	00c00084 	movi	r3,2
 2008c68:	10c01c26 	beq	r2,r3,2008cdc <__fixdfsi+0x98>
 2008c6c:	00c00044 	movi	r3,1
 2008c70:	18801a2e 	bgeu	r3,r2,2008cdc <__fixdfsi+0x98>
 2008c74:	00c00104 	movi	r3,4
 2008c78:	10c01126 	beq	r2,r3,2008cc0 <__fixdfsi+0x7c>
 2008c7c:	d8800217 	ldw	r2,8(sp)
 2008c80:	10001616 	blt	r2,zero,2008cdc <__fixdfsi+0x98>
 2008c84:	00c00784 	movi	r3,30
 2008c88:	18800d16 	blt	r3,r2,2008cc0 <__fixdfsi+0x7c>
 2008c8c:	00c00f04 	movi	r3,60
 2008c90:	1885c83a 	sub	r2,r3,r2
 2008c94:	10fff804 	addi	r3,r2,-32
 2008c98:	d9400317 	ldw	r5,12(sp)
 2008c9c:	d9000417 	ldw	r4,16(sp)
 2008ca0:	18001616 	blt	r3,zero,2008cfc <__fixdfsi+0xb8>
 2008ca4:	20c4d83a 	srl	r2,r4,r3
 2008ca8:	d8c00117 	ldw	r3,4(sp)
 2008cac:	18000126 	beq	r3,zero,2008cb4 <__fixdfsi+0x70>
 2008cb0:	0085c83a 	sub	r2,zero,r2
 2008cb4:	dfc00717 	ldw	ra,28(sp)
 2008cb8:	dec00804 	addi	sp,sp,32
 2008cbc:	f800283a 	ret
 2008cc0:	d8800117 	ldw	r2,4(sp)
 2008cc4:	1000091e 	bne	r2,zero,2008cec <__fixdfsi+0xa8>
 2008cc8:	00a00034 	movhi	r2,32768
 2008ccc:	10bfffc4 	addi	r2,r2,-1
 2008cd0:	dfc00717 	ldw	ra,28(sp)
 2008cd4:	dec00804 	addi	sp,sp,32
 2008cd8:	f800283a 	ret
 2008cdc:	0005883a 	mov	r2,zero
 2008ce0:	dfc00717 	ldw	ra,28(sp)
 2008ce4:	dec00804 	addi	sp,sp,32
 2008ce8:	f800283a 	ret
 2008cec:	00a00034 	movhi	r2,32768
 2008cf0:	dfc00717 	ldw	ra,28(sp)
 2008cf4:	dec00804 	addi	sp,sp,32
 2008cf8:	f800283a 	ret
 2008cfc:	2008907a 	slli	r4,r4,1
 2008d00:	018007c4 	movi	r6,31
 2008d04:	308dc83a 	sub	r6,r6,r2
 2008d08:	2188983a 	sll	r4,r4,r6
 2008d0c:	2884d83a 	srl	r2,r5,r2
 2008d10:	2084b03a 	or	r2,r4,r2
 2008d14:	003fe406 	br	2008ca8 <__fixdfsi+0x64>

02008d18 <__floatunsidf>:
 2008d18:	defff904 	addi	sp,sp,-28
 2008d1c:	dc000515 	stw	r16,20(sp)
 2008d20:	dfc00615 	stw	ra,24(sp)
 2008d24:	d8000115 	stw	zero,4(sp)
 2008d28:	2021883a 	mov	r16,r4
 2008d2c:	20001726 	beq	r4,zero,2008d8c <__floatunsidf+0x74>
 2008d30:	008000c4 	movi	r2,3
 2008d34:	d8800015 	stw	r2,0(sp)
 2008d38:	00800f04 	movi	r2,60
 2008d3c:	d8800215 	stw	r2,8(sp)
 2008d40:	2008fc40 	call	2008fc4 <__clzsi2>
 2008d44:	10c00744 	addi	r3,r2,29
 2008d48:	18001816 	blt	r3,zero,2008dac <__floatunsidf+0x94>
 2008d4c:	18002d26 	beq	r3,zero,2008e04 <__floatunsidf+0xec>
 2008d50:	113fff44 	addi	r4,r2,-3
 2008d54:	20002e16 	blt	r4,zero,2008e10 <__floatunsidf+0xf8>
 2008d58:	8108983a 	sll	r4,r16,r4
 2008d5c:	0021883a 	mov	r16,zero
 2008d60:	014007c4 	movi	r5,31
 2008d64:	2885c83a 	sub	r2,r5,r2
 2008d68:	dc000315 	stw	r16,12(sp)
 2008d6c:	d9000415 	stw	r4,16(sp)
 2008d70:	d8800215 	stw	r2,8(sp)
 2008d74:	d809883a 	mov	r4,sp
 2008d78:	20090700 	call	2009070 <__pack_d>
 2008d7c:	dfc00617 	ldw	ra,24(sp)
 2008d80:	dc000517 	ldw	r16,20(sp)
 2008d84:	dec00704 	addi	sp,sp,28
 2008d88:	f800283a 	ret
 2008d8c:	00800084 	movi	r2,2
 2008d90:	d809883a 	mov	r4,sp
 2008d94:	d8800015 	stw	r2,0(sp)
 2008d98:	20090700 	call	2009070 <__pack_d>
 2008d9c:	dfc00617 	ldw	ra,24(sp)
 2008da0:	dc000517 	ldw	r16,20(sp)
 2008da4:	dec00704 	addi	sp,sp,28
 2008da8:	f800283a 	ret
 2008dac:	00c7c83a 	sub	r3,zero,r3
 2008db0:	193ff804 	addi	r4,r3,-32
 2008db4:	20001c16 	blt	r4,zero,2008e28 <__floatunsidf+0x110>
 2008db8:	000b883a 	mov	r5,zero
 2008dbc:	2009d7fa 	srai	r4,r4,31
 2008dc0:	80c6d83a 	srl	r3,r16,r3
 2008dc4:	297fffc4 	addi	r5,r5,-1
 2008dc8:	2c20703a 	and	r16,r5,r16
 2008dcc:	8020c03a 	cmpne	r16,r16,zero
 2008dd0:	1906703a 	and	r3,r3,r4
 2008dd4:	010007c4 	movi	r4,31
 2008dd8:	80c6b03a 	or	r3,r16,r3
 2008ddc:	2085c83a 	sub	r2,r4,r2
 2008de0:	d809883a 	mov	r4,sp
 2008de4:	d8c00315 	stw	r3,12(sp)
 2008de8:	d8000415 	stw	zero,16(sp)
 2008dec:	d8800215 	stw	r2,8(sp)
 2008df0:	20090700 	call	2009070 <__pack_d>
 2008df4:	dfc00617 	ldw	ra,24(sp)
 2008df8:	dc000517 	ldw	r16,20(sp)
 2008dfc:	dec00704 	addi	sp,sp,28
 2008e00:	f800283a 	ret
 2008e04:	dc000315 	stw	r16,12(sp)
 2008e08:	d8000415 	stw	zero,16(sp)
 2008e0c:	003fd906 	br	2008d74 <__floatunsidf+0x5c>
 2008e10:	800ad07a 	srli	r5,r16,1
 2008e14:	010007c4 	movi	r4,31
 2008e18:	20c9c83a 	sub	r4,r4,r3
 2008e1c:	2908d83a 	srl	r4,r5,r4
 2008e20:	80e0983a 	sll	r16,r16,r3
 2008e24:	003fce06 	br	2008d60 <__floatunsidf+0x48>
 2008e28:	01400044 	movi	r5,1
 2008e2c:	28ca983a 	sll	r5,r5,r3
 2008e30:	003fe206 	br	2008dbc <__floatunsidf+0xa4>

02008e34 <udivmodsi4>:
 2008e34:	2005883a 	mov	r2,r4
 2008e38:	2900182e 	bgeu	r5,r4,2008e9c <udivmodsi4+0x68>
 2008e3c:	28001716 	blt	r5,zero,2008e9c <udivmodsi4+0x68>
 2008e40:	01000804 	movi	r4,32
 2008e44:	00c00044 	movi	r3,1
 2008e48:	00000206 	br	2008e54 <udivmodsi4+0x20>
 2008e4c:	20001126 	beq	r4,zero,2008e94 <udivmodsi4+0x60>
 2008e50:	28000516 	blt	r5,zero,2008e68 <udivmodsi4+0x34>
 2008e54:	294b883a 	add	r5,r5,r5
 2008e58:	213fffc4 	addi	r4,r4,-1
 2008e5c:	18c7883a 	add	r3,r3,r3
 2008e60:	28bffa36 	bltu	r5,r2,2008e4c <udivmodsi4+0x18>
 2008e64:	18000b26 	beq	r3,zero,2008e94 <udivmodsi4+0x60>
 2008e68:	0009883a 	mov	r4,zero
 2008e6c:	11400236 	bltu	r2,r5,2008e78 <udivmodsi4+0x44>
 2008e70:	1145c83a 	sub	r2,r2,r5
 2008e74:	20c8b03a 	or	r4,r4,r3
 2008e78:	1806d07a 	srli	r3,r3,1
 2008e7c:	280ad07a 	srli	r5,r5,1
 2008e80:	183ffa1e 	bne	r3,zero,2008e6c <udivmodsi4+0x38>
 2008e84:	3000021e 	bne	r6,zero,2008e90 <udivmodsi4+0x5c>
 2008e88:	2005883a 	mov	r2,r4
 2008e8c:	f800283a 	ret
 2008e90:	f800283a 	ret
 2008e94:	0009883a 	mov	r4,zero
 2008e98:	003ffa06 	br	2008e84 <udivmodsi4+0x50>
 2008e9c:	00c00044 	movi	r3,1
 2008ea0:	0009883a 	mov	r4,zero
 2008ea4:	003ff106 	br	2008e6c <udivmodsi4+0x38>

02008ea8 <__divsi3>:
 2008ea8:	defffe04 	addi	sp,sp,-8
 2008eac:	dfc00115 	stw	ra,4(sp)
 2008eb0:	dc000015 	stw	r16,0(sp)
 2008eb4:	20000a16 	blt	r4,zero,2008ee0 <__divsi3+0x38>
 2008eb8:	0021883a 	mov	r16,zero
 2008ebc:	28000b16 	blt	r5,zero,2008eec <__divsi3+0x44>
 2008ec0:	000d883a 	mov	r6,zero
 2008ec4:	2008e340 	call	2008e34 <udivmodsi4>
 2008ec8:	80000126 	beq	r16,zero,2008ed0 <__divsi3+0x28>
 2008ecc:	0085c83a 	sub	r2,zero,r2
 2008ed0:	dfc00117 	ldw	ra,4(sp)
 2008ed4:	dc000017 	ldw	r16,0(sp)
 2008ed8:	dec00204 	addi	sp,sp,8
 2008edc:	f800283a 	ret
 2008ee0:	0109c83a 	sub	r4,zero,r4
 2008ee4:	04000044 	movi	r16,1
 2008ee8:	283ff50e 	bge	r5,zero,2008ec0 <__divsi3+0x18>
 2008eec:	014bc83a 	sub	r5,zero,r5
 2008ef0:	8400005c 	xori	r16,r16,1
 2008ef4:	003ff206 	br	2008ec0 <__divsi3+0x18>

02008ef8 <__modsi3>:
 2008ef8:	deffff04 	addi	sp,sp,-4
 2008efc:	dfc00015 	stw	ra,0(sp)
 2008f00:	20000516 	blt	r4,zero,2008f18 <__modsi3+0x20>
 2008f04:	28000c16 	blt	r5,zero,2008f38 <__modsi3+0x40>
 2008f08:	01800044 	movi	r6,1
 2008f0c:	dfc00017 	ldw	ra,0(sp)
 2008f10:	dec00104 	addi	sp,sp,4
 2008f14:	2008e341 	jmpi	2008e34 <udivmodsi4>
 2008f18:	0109c83a 	sub	r4,zero,r4
 2008f1c:	28000b16 	blt	r5,zero,2008f4c <__modsi3+0x54>
 2008f20:	01800044 	movi	r6,1
 2008f24:	2008e340 	call	2008e34 <udivmodsi4>
 2008f28:	0085c83a 	sub	r2,zero,r2
 2008f2c:	dfc00017 	ldw	ra,0(sp)
 2008f30:	dec00104 	addi	sp,sp,4
 2008f34:	f800283a 	ret
 2008f38:	014bc83a 	sub	r5,zero,r5
 2008f3c:	01800044 	movi	r6,1
 2008f40:	dfc00017 	ldw	ra,0(sp)
 2008f44:	dec00104 	addi	sp,sp,4
 2008f48:	2008e341 	jmpi	2008e34 <udivmodsi4>
 2008f4c:	014bc83a 	sub	r5,zero,r5
 2008f50:	003ff306 	br	2008f20 <__modsi3+0x28>

02008f54 <__udivsi3>:
 2008f54:	000d883a 	mov	r6,zero
 2008f58:	2008e341 	jmpi	2008e34 <udivmodsi4>

02008f5c <__umodsi3>:
 2008f5c:	01800044 	movi	r6,1
 2008f60:	2008e341 	jmpi	2008e34 <udivmodsi4>

02008f64 <__muldi3>:
 2008f64:	20bfffcc 	andi	r2,r4,65535
 2008f68:	2010d43a 	srli	r8,r4,16
 2008f6c:	30ffffcc 	andi	r3,r6,65535
 2008f70:	3014d43a 	srli	r10,r6,16
 2008f74:	1893383a 	mul	r9,r3,r2
 2008f78:	1a07383a 	mul	r3,r3,r8
 2008f7c:	5085383a 	mul	r2,r10,r2
 2008f80:	4816d43a 	srli	r11,r9,16
 2008f84:	5211383a 	mul	r8,r10,r8
 2008f88:	1885883a 	add	r2,r3,r2
 2008f8c:	12c5883a 	add	r2,r2,r11
 2008f90:	10c0022e 	bgeu	r2,r3,2008f9c <__muldi3+0x38>
 2008f94:	00c00074 	movhi	r3,1
 2008f98:	40d1883a 	add	r8,r8,r3
 2008f9c:	1014d43a 	srli	r10,r2,16
 2008fa0:	21c9383a 	mul	r4,r4,r7
 2008fa4:	314d383a 	mul	r6,r6,r5
 2008fa8:	1004943a 	slli	r2,r2,16
 2008fac:	4291883a 	add	r8,r8,r10
 2008fb0:	4a7fffcc 	andi	r9,r9,65535
 2008fb4:	2187883a 	add	r3,r4,r6
 2008fb8:	1245883a 	add	r2,r2,r9
 2008fbc:	1a07883a 	add	r3,r3,r8
 2008fc0:	f800283a 	ret

02008fc4 <__clzsi2>:
 2008fc4:	00bfffd4 	movui	r2,65535
 2008fc8:	11000b36 	bltu	r2,r4,2008ff8 <__clzsi2+0x34>
 2008fcc:	00803fc4 	movi	r2,255
 2008fd0:	11001e2e 	bgeu	r2,r4,200904c <__clzsi2+0x88>
 2008fd4:	00c00204 	movi	r3,8
 2008fd8:	20c8d83a 	srl	r4,r4,r3
 2008fdc:	00c08074 	movhi	r3,513
 2008fe0:	18eef404 	addi	r3,r3,-17456
 2008fe4:	00800604 	movi	r2,24
 2008fe8:	1909883a 	add	r4,r3,r4
 2008fec:	20c00003 	ldbu	r3,0(r4)
 2008ff0:	10c5c83a 	sub	r2,r2,r3
 2008ff4:	f800283a 	ret
 2008ff8:	00804034 	movhi	r2,256
 2008ffc:	10bfffc4 	addi	r2,r2,-1
 2009000:	11000936 	bltu	r2,r4,2009028 <__clzsi2+0x64>
 2009004:	00800404 	movi	r2,16
 2009008:	1007883a 	mov	r3,r2
 200900c:	20c8d83a 	srl	r4,r4,r3
 2009010:	00c08074 	movhi	r3,513
 2009014:	18eef404 	addi	r3,r3,-17456
 2009018:	1909883a 	add	r4,r3,r4
 200901c:	20c00003 	ldbu	r3,0(r4)
 2009020:	10c5c83a 	sub	r2,r2,r3
 2009024:	f800283a 	ret
 2009028:	00c00604 	movi	r3,24
 200902c:	20c8d83a 	srl	r4,r4,r3
 2009030:	00c08074 	movhi	r3,513
 2009034:	18eef404 	addi	r3,r3,-17456
 2009038:	00800204 	movi	r2,8
 200903c:	1909883a 	add	r4,r3,r4
 2009040:	20c00003 	ldbu	r3,0(r4)
 2009044:	10c5c83a 	sub	r2,r2,r3
 2009048:	f800283a 	ret
 200904c:	0007883a 	mov	r3,zero
 2009050:	20c8d83a 	srl	r4,r4,r3
 2009054:	00c08074 	movhi	r3,513
 2009058:	18eef404 	addi	r3,r3,-17456
 200905c:	00800804 	movi	r2,32
 2009060:	1909883a 	add	r4,r3,r4
 2009064:	20c00003 	ldbu	r3,0(r4)
 2009068:	10c5c83a 	sub	r2,r2,r3
 200906c:	f800283a 	ret

02009070 <__pack_d>:
 2009070:	20800017 	ldw	r2,0(r4)
 2009074:	defff804 	addi	sp,sp,-32
 2009078:	dcc00315 	stw	r19,12(sp)
 200907c:	dc800215 	stw	r18,8(sp)
 2009080:	dfc00715 	stw	ra,28(sp)
 2009084:	dd800615 	stw	r22,24(sp)
 2009088:	dd400515 	stw	r21,20(sp)
 200908c:	dd000415 	stw	r20,16(sp)
 2009090:	dc400115 	stw	r17,4(sp)
 2009094:	dc000015 	stw	r16,0(sp)
 2009098:	04800044 	movi	r18,1
 200909c:	24400317 	ldw	r17,12(r4)
 20090a0:	24000417 	ldw	r16,16(r4)
 20090a4:	24c00117 	ldw	r19,4(r4)
 20090a8:	9080422e 	bgeu	r18,r2,20091b4 <__pack_d+0x144>
 20090ac:	00c00104 	movi	r3,4
 20090b0:	10c03c26 	beq	r2,r3,20091a4 <__pack_d+0x134>
 20090b4:	00c00084 	movi	r3,2
 20090b8:	10c01926 	beq	r2,r3,2009120 <__pack_d+0xb0>
 20090bc:	8c04b03a 	or	r2,r17,r16
 20090c0:	10001726 	beq	r2,zero,2009120 <__pack_d+0xb0>
 20090c4:	21000217 	ldw	r4,8(r4)
 20090c8:	00bf0084 	movi	r2,-1022
 20090cc:	20804016 	blt	r4,r2,20091d0 <__pack_d+0x160>
 20090d0:	0080ffc4 	movi	r2,1023
 20090d4:	11003316 	blt	r2,r4,20091a4 <__pack_d+0x134>
 20090d8:	88803fcc 	andi	r2,r17,255
 20090dc:	00c02004 	movi	r3,128
 20090e0:	10c02926 	beq	r2,r3,2009188 <__pack_d+0x118>
 20090e4:	88801fc4 	addi	r2,r17,127
 20090e8:	1463803a 	cmpltu	r17,r2,r17
 20090ec:	8c21883a 	add	r16,r17,r16
 20090f0:	1023883a 	mov	r17,r2
 20090f4:	00880034 	movhi	r2,8192
 20090f8:	10bfffc4 	addi	r2,r2,-1
 20090fc:	14001c36 	bltu	r2,r16,2009170 <__pack_d+0x100>
 2009100:	2100ffc4 	addi	r4,r4,1023
 2009104:	8006963a 	slli	r3,r16,24
 2009108:	8804d23a 	srli	r2,r17,8
 200910c:	8020913a 	slli	r16,r16,4
 2009110:	2101ffcc 	andi	r4,r4,2047
 2009114:	1884b03a 	or	r2,r3,r2
 2009118:	8020d33a 	srli	r16,r16,12
 200911c:	00000306 	br	200912c <__pack_d+0xbc>
 2009120:	0009883a 	mov	r4,zero
 2009124:	0005883a 	mov	r2,zero
 2009128:	0021883a 	mov	r16,zero
 200912c:	2008953a 	slli	r4,r4,20
 2009130:	982697fa 	slli	r19,r19,31
 2009134:	00c00434 	movhi	r3,16
 2009138:	18ffffc4 	addi	r3,r3,-1
 200913c:	80e0703a 	and	r16,r16,r3
 2009140:	8106b03a 	or	r3,r16,r4
 2009144:	1cc6b03a 	or	r3,r3,r19
 2009148:	dfc00717 	ldw	ra,28(sp)
 200914c:	dd800617 	ldw	r22,24(sp)
 2009150:	dd400517 	ldw	r21,20(sp)
 2009154:	dd000417 	ldw	r20,16(sp)
 2009158:	dcc00317 	ldw	r19,12(sp)
 200915c:	dc800217 	ldw	r18,8(sp)
 2009160:	dc400117 	ldw	r17,4(sp)
 2009164:	dc000017 	ldw	r16,0(sp)
 2009168:	dec00804 	addi	sp,sp,32
 200916c:	f800283a 	ret
 2009170:	800697fa 	slli	r3,r16,31
 2009174:	8804d07a 	srli	r2,r17,1
 2009178:	21010004 	addi	r4,r4,1024
 200917c:	8020d07a 	srli	r16,r16,1
 2009180:	18a2b03a 	or	r17,r3,r2
 2009184:	003fdf06 	br	2009104 <__pack_d+0x94>
 2009188:	88c0400c 	andi	r3,r17,256
 200918c:	183fd926 	beq	r3,zero,20090f4 <__pack_d+0x84>
 2009190:	8885883a 	add	r2,r17,r2
 2009194:	1463803a 	cmpltu	r17,r2,r17
 2009198:	8c21883a 	add	r16,r17,r16
 200919c:	1023883a 	mov	r17,r2
 20091a0:	003fd406 	br	20090f4 <__pack_d+0x84>
 20091a4:	0101ffc4 	movi	r4,2047
 20091a8:	0005883a 	mov	r2,zero
 20091ac:	0021883a 	mov	r16,zero
 20091b0:	003fde06 	br	200912c <__pack_d+0xbc>
 20091b4:	84000234 	orhi	r16,r16,8
 20091b8:	00c00434 	movhi	r3,16
 20091bc:	18ffffc4 	addi	r3,r3,-1
 20091c0:	8805883a 	mov	r2,r17
 20091c4:	80e0703a 	and	r16,r16,r3
 20091c8:	0101ffc4 	movi	r4,2047
 20091cc:	003fd706 	br	200912c <__pack_d+0xbc>
 20091d0:	1129c83a 	sub	r20,r2,r4
 20091d4:	00800e04 	movi	r2,56
 20091d8:	15002716 	blt	r2,r20,2009278 <__pack_d+0x208>
 20091dc:	800b883a 	mov	r5,r16
 20091e0:	a00d883a 	mov	r6,r20
 20091e4:	8809883a 	mov	r4,r17
 20091e8:	20094680 	call	2009468 <__lshrdi3>
 20091ec:	9009883a 	mov	r4,r18
 20091f0:	000b883a 	mov	r5,zero
 20091f4:	a00d883a 	mov	r6,r20
 20091f8:	102d883a 	mov	r22,r2
 20091fc:	182b883a 	mov	r21,r3
 2009200:	20094ac0 	call	20094ac <__ashldi3>
 2009204:	1009003a 	cmpeq	r4,r2,zero
 2009208:	1907c83a 	sub	r3,r3,r4
 200920c:	10bfffc4 	addi	r2,r2,-1
 2009210:	1c20703a 	and	r16,r3,r16
 2009214:	1444703a 	and	r2,r2,r17
 2009218:	1404b03a 	or	r2,r2,r16
 200921c:	1004c03a 	cmpne	r2,r2,zero
 2009220:	1584b03a 	or	r2,r2,r22
 2009224:	11003fcc 	andi	r4,r2,255
 2009228:	01402004 	movi	r5,128
 200922c:	a807883a 	mov	r3,r21
 2009230:	2140131e 	bne	r4,r5,2009280 <__pack_d+0x210>
 2009234:	1140400c 	andi	r5,r2,256
 2009238:	28000426 	beq	r5,zero,200924c <__pack_d+0x1dc>
 200923c:	1109883a 	add	r4,r2,r4
 2009240:	2085803a 	cmpltu	r2,r4,r2
 2009244:	1547883a 	add	r3,r2,r21
 2009248:	2005883a 	mov	r2,r4
 200924c:	1808963a 	slli	r4,r3,24
 2009250:	1004d23a 	srli	r2,r2,8
 2009254:	1820913a 	slli	r16,r3,4
 2009258:	01440034 	movhi	r5,4096
 200925c:	297fffc4 	addi	r5,r5,-1
 2009260:	2084b03a 	or	r2,r4,r2
 2009264:	8020d33a 	srli	r16,r16,12
 2009268:	01000044 	movi	r4,1
 200926c:	28ffaf36 	bltu	r5,r3,200912c <__pack_d+0xbc>
 2009270:	0009883a 	mov	r4,zero
 2009274:	003fad06 	br	200912c <__pack_d+0xbc>
 2009278:	0005883a 	mov	r2,zero
 200927c:	0007883a 	mov	r3,zero
 2009280:	11001fc4 	addi	r4,r2,127
 2009284:	2085803a 	cmpltu	r2,r4,r2
 2009288:	10c7883a 	add	r3,r2,r3
 200928c:	2005883a 	mov	r2,r4
 2009290:	003fee06 	br	200924c <__pack_d+0x1dc>

02009294 <__unpack_d>:
 2009294:	21800117 	ldw	r6,4(r4)
 2009298:	20c00017 	ldw	r3,0(r4)
 200929c:	3004d7fa 	srli	r2,r6,31
 20092a0:	3008d53a 	srli	r4,r6,20
 20092a4:	28800115 	stw	r2,4(r5)
 20092a8:	2101ffcc 	andi	r4,r4,2047
 20092ac:	00800434 	movhi	r2,16
 20092b0:	10bfffc4 	addi	r2,r2,-1
 20092b4:	3084703a 	and	r2,r6,r2
 20092b8:	20001a1e 	bne	r4,zero,2009324 <__unpack_d+0x90>
 20092bc:	1888b03a 	or	r4,r3,r2
 20092c0:	20002626 	beq	r4,zero,200935c <__unpack_d+0xc8>
 20092c4:	1808d63a 	srli	r4,r3,24
 20092c8:	1004923a 	slli	r2,r2,8
 20092cc:	01bf0084 	movi	r6,-1022
 20092d0:	29800215 	stw	r6,8(r5)
 20092d4:	2084b03a 	or	r2,r4,r2
 20092d8:	010000c4 	movi	r4,3
 20092dc:	29000015 	stw	r4,0(r5)
 20092e0:	02040034 	movhi	r8,4096
 20092e4:	423fffc4 	addi	r8,r8,-1
 20092e8:	1806923a 	slli	r3,r3,8
 20092ec:	40801836 	bltu	r8,r2,2009350 <__unpack_d+0xbc>
 20092f0:	013f0044 	movi	r4,-1023
 20092f4:	18cd883a 	add	r6,r3,r3
 20092f8:	30c7803a 	cmpltu	r3,r6,r3
 20092fc:	1085883a 	add	r2,r2,r2
 2009300:	1885883a 	add	r2,r3,r2
 2009304:	200f883a 	mov	r7,r4
 2009308:	3007883a 	mov	r3,r6
 200930c:	213fffc4 	addi	r4,r4,-1
 2009310:	40bff82e 	bgeu	r8,r2,20092f4 <__unpack_d+0x60>
 2009314:	29c00215 	stw	r7,8(r5)
 2009318:	28c00315 	stw	r3,12(r5)
 200931c:	28800415 	stw	r2,16(r5)
 2009320:	f800283a 	ret
 2009324:	01c1ffc4 	movi	r7,2047
 2009328:	21c00f26 	beq	r4,r7,2009368 <__unpack_d+0xd4>
 200932c:	180cd63a 	srli	r6,r3,24
 2009330:	1004923a 	slli	r2,r2,8
 2009334:	213f0044 	addi	r4,r4,-1023
 2009338:	1806923a 	slli	r3,r3,8
 200933c:	3084b03a 	or	r2,r6,r2
 2009340:	29000215 	stw	r4,8(r5)
 2009344:	010000c4 	movi	r4,3
 2009348:	10840034 	orhi	r2,r2,4096
 200934c:	29000015 	stw	r4,0(r5)
 2009350:	28c00315 	stw	r3,12(r5)
 2009354:	28800415 	stw	r2,16(r5)
 2009358:	f800283a 	ret
 200935c:	00800084 	movi	r2,2
 2009360:	28800015 	stw	r2,0(r5)
 2009364:	f800283a 	ret
 2009368:	1888b03a 	or	r4,r3,r2
 200936c:	20000526 	beq	r4,zero,2009384 <__unpack_d+0xf0>
 2009370:	3180022c 	andhi	r6,r6,8
 2009374:	30000626 	beq	r6,zero,2009390 <__unpack_d+0xfc>
 2009378:	01000044 	movi	r4,1
 200937c:	29000015 	stw	r4,0(r5)
 2009380:	003ff306 	br	2009350 <__unpack_d+0xbc>
 2009384:	00800104 	movi	r2,4
 2009388:	28800015 	stw	r2,0(r5)
 200938c:	f800283a 	ret
 2009390:	28000015 	stw	zero,0(r5)
 2009394:	003fee06 	br	2009350 <__unpack_d+0xbc>

02009398 <__fpcmp_parts_d>:
 2009398:	20c00017 	ldw	r3,0(r4)
 200939c:	00800044 	movi	r2,1
 20093a0:	10c0142e 	bgeu	r2,r3,20093f4 <__fpcmp_parts_d+0x5c>
 20093a4:	29800017 	ldw	r6,0(r5)
 20093a8:	1180122e 	bgeu	r2,r6,20093f4 <__fpcmp_parts_d+0x5c>
 20093ac:	01c00104 	movi	r7,4
 20093b0:	19c02826 	beq	r3,r7,2009454 <__fpcmp_parts_d+0xbc>
 20093b4:	31c00926 	beq	r6,r7,20093dc <__fpcmp_parts_d+0x44>
 20093b8:	01c00084 	movi	r7,2
 20093bc:	19c00626 	beq	r3,r7,20093d8 <__fpcmp_parts_d+0x40>
 20093c0:	31c00a26 	beq	r6,r7,20093ec <__fpcmp_parts_d+0x54>
 20093c4:	20c00117 	ldw	r3,4(r4)
 20093c8:	29800117 	ldw	r6,4(r5)
 20093cc:	19800b26 	beq	r3,r6,20093fc <__fpcmp_parts_d+0x64>
 20093d0:	1800041e 	bne	r3,zero,20093e4 <__fpcmp_parts_d+0x4c>
 20093d4:	f800283a 	ret
 20093d8:	30c01a26 	beq	r6,r3,2009444 <__fpcmp_parts_d+0xac>
 20093dc:	28800117 	ldw	r2,4(r5)
 20093e0:	1000041e 	bne	r2,zero,20093f4 <__fpcmp_parts_d+0x5c>
 20093e4:	00bfffc4 	movi	r2,-1
 20093e8:	f800283a 	ret
 20093ec:	20800117 	ldw	r2,4(r4)
 20093f0:	103ffc1e 	bne	r2,zero,20093e4 <__fpcmp_parts_d+0x4c>
 20093f4:	00800044 	movi	r2,1
 20093f8:	f800283a 	ret
 20093fc:	21c00217 	ldw	r7,8(r4)
 2009400:	29800217 	ldw	r6,8(r5)
 2009404:	31c0020e 	bge	r6,r7,2009410 <__fpcmp_parts_d+0x78>
 2009408:	183ff61e 	bne	r3,zero,20093e4 <__fpcmp_parts_d+0x4c>
 200940c:	f800283a 	ret
 2009410:	39800a16 	blt	r7,r6,200943c <__fpcmp_parts_d+0xa4>
 2009414:	20800417 	ldw	r2,16(r4)
 2009418:	29800417 	ldw	r6,16(r5)
 200941c:	21c00317 	ldw	r7,12(r4)
 2009420:	29000317 	ldw	r4,12(r5)
 2009424:	30800936 	bltu	r6,r2,200944c <__fpcmp_parts_d+0xb4>
 2009428:	1180011e 	bne	r2,r6,2009430 <__fpcmp_parts_d+0x98>
 200942c:	21c00736 	bltu	r4,r7,200944c <__fpcmp_parts_d+0xb4>
 2009430:	11800236 	bltu	r2,r6,200943c <__fpcmp_parts_d+0xa4>
 2009434:	3080031e 	bne	r6,r2,2009444 <__fpcmp_parts_d+0xac>
 2009438:	3900022e 	bgeu	r7,r4,2009444 <__fpcmp_parts_d+0xac>
 200943c:	183fe926 	beq	r3,zero,20093e4 <__fpcmp_parts_d+0x4c>
 2009440:	003fec06 	br	20093f4 <__fpcmp_parts_d+0x5c>
 2009444:	0005883a 	mov	r2,zero
 2009448:	f800283a 	ret
 200944c:	183fe926 	beq	r3,zero,20093f4 <__fpcmp_parts_d+0x5c>
 2009450:	003fe406 	br	20093e4 <__fpcmp_parts_d+0x4c>
 2009454:	30ffe51e 	bne	r6,r3,20093ec <__fpcmp_parts_d+0x54>
 2009458:	28c00117 	ldw	r3,4(r5)
 200945c:	20800117 	ldw	r2,4(r4)
 2009460:	1885c83a 	sub	r2,r3,r2
 2009464:	f800283a 	ret

02009468 <__lshrdi3>:
 2009468:	2005883a 	mov	r2,r4
 200946c:	2807883a 	mov	r3,r5
 2009470:	30000826 	beq	r6,zero,2009494 <__lshrdi3+0x2c>
 2009474:	01000804 	movi	r4,32
 2009478:	2189c83a 	sub	r4,r4,r6
 200947c:	0100060e 	bge	zero,r4,2009498 <__lshrdi3+0x30>
 2009480:	1184d83a 	srl	r2,r2,r6
 2009484:	2908983a 	sll	r4,r5,r4
 2009488:	298cd83a 	srl	r6,r5,r6
 200948c:	2084b03a 	or	r2,r4,r2
 2009490:	3007883a 	mov	r3,r6
 2009494:	f800283a 	ret
 2009498:	0105c83a 	sub	r2,zero,r4
 200949c:	000d883a 	mov	r6,zero
 20094a0:	2884d83a 	srl	r2,r5,r2
 20094a4:	3007883a 	mov	r3,r6
 20094a8:	003ffa06 	br	2009494 <__lshrdi3+0x2c>

020094ac <__ashldi3>:
 20094ac:	2005883a 	mov	r2,r4
 20094b0:	2807883a 	mov	r3,r5
 20094b4:	30000826 	beq	r6,zero,20094d8 <__ashldi3+0x2c>
 20094b8:	01000804 	movi	r4,32
 20094bc:	2189c83a 	sub	r4,r4,r6
 20094c0:	0100060e 	bge	zero,r4,20094dc <__ashldi3+0x30>
 20094c4:	1108d83a 	srl	r4,r2,r4
 20094c8:	2986983a 	sll	r3,r5,r6
 20094cc:	118c983a 	sll	r6,r2,r6
 20094d0:	20c6b03a 	or	r3,r4,r3
 20094d4:	3005883a 	mov	r2,r6
 20094d8:	f800283a 	ret
 20094dc:	0107c83a 	sub	r3,zero,r4
 20094e0:	000d883a 	mov	r6,zero
 20094e4:	10c6983a 	sll	r3,r2,r3
 20094e8:	3005883a 	mov	r2,r6
 20094ec:	003ffa06 	br	20094d8 <__ashldi3+0x2c>

020094f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20094f0:	defffe04 	addi	sp,sp,-8
 20094f4:	dfc00115 	stw	ra,4(sp)
 20094f8:	df000015 	stw	fp,0(sp)
 20094fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2009500:	00808074 	movhi	r2,513
 2009504:	10b5d104 	addi	r2,r2,-10428
 2009508:	10800017 	ldw	r2,0(r2)
 200950c:	10000526 	beq	r2,zero,2009524 <alt_get_errno+0x34>
 2009510:	00808074 	movhi	r2,513
 2009514:	10b5d104 	addi	r2,r2,-10428
 2009518:	10800017 	ldw	r2,0(r2)
 200951c:	103ee83a 	callr	r2
 2009520:	00000206 	br	200952c <alt_get_errno+0x3c>
 2009524:	00808074 	movhi	r2,513
 2009528:	10b5dc04 	addi	r2,r2,-10384
}
 200952c:	e037883a 	mov	sp,fp
 2009530:	dfc00117 	ldw	ra,4(sp)
 2009534:	df000017 	ldw	fp,0(sp)
 2009538:	dec00204 	addi	sp,sp,8
 200953c:	f800283a 	ret

02009540 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2009540:	defffb04 	addi	sp,sp,-20
 2009544:	dfc00415 	stw	ra,16(sp)
 2009548:	df000315 	stw	fp,12(sp)
 200954c:	df000304 	addi	fp,sp,12
 2009550:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2009554:	e0bfff17 	ldw	r2,-4(fp)
 2009558:	10000616 	blt	r2,zero,2009574 <close+0x34>
 200955c:	e0bfff17 	ldw	r2,-4(fp)
 2009560:	10c00324 	muli	r3,r2,12
 2009564:	00808074 	movhi	r2,513
 2009568:	10b14e04 	addi	r2,r2,-15048
 200956c:	1885883a 	add	r2,r3,r2
 2009570:	00000106 	br	2009578 <close+0x38>
 2009574:	0005883a 	mov	r2,zero
 2009578:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200957c:	e0bffd17 	ldw	r2,-12(fp)
 2009580:	10001826 	beq	r2,zero,20095e4 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2009584:	e0bffd17 	ldw	r2,-12(fp)
 2009588:	10800017 	ldw	r2,0(r2)
 200958c:	10800417 	ldw	r2,16(r2)
 2009590:	10000626 	beq	r2,zero,20095ac <close+0x6c>
 2009594:	e0bffd17 	ldw	r2,-12(fp)
 2009598:	10800017 	ldw	r2,0(r2)
 200959c:	10800417 	ldw	r2,16(r2)
 20095a0:	e13ffd17 	ldw	r4,-12(fp)
 20095a4:	103ee83a 	callr	r2
 20095a8:	00000106 	br	20095b0 <close+0x70>
 20095ac:	0005883a 	mov	r2,zero
 20095b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20095b4:	e13fff17 	ldw	r4,-4(fp)
 20095b8:	2009b380 	call	2009b38 <alt_release_fd>
    if (rval < 0)
 20095bc:	e0bffe17 	ldw	r2,-8(fp)
 20095c0:	1000060e 	bge	r2,zero,20095dc <close+0x9c>
    {
      ALT_ERRNO = -rval;
 20095c4:	20094f00 	call	20094f0 <alt_get_errno>
 20095c8:	e0fffe17 	ldw	r3,-8(fp)
 20095cc:	00c7c83a 	sub	r3,zero,r3
 20095d0:	10c00015 	stw	r3,0(r2)
      return -1;
 20095d4:	00bfffc4 	movi	r2,-1
 20095d8:	00000606 	br	20095f4 <close+0xb4>
    }
    return 0;
 20095dc:	0005883a 	mov	r2,zero
 20095e0:	00000406 	br	20095f4 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20095e4:	20094f00 	call	20094f0 <alt_get_errno>
 20095e8:	00c01444 	movi	r3,81
 20095ec:	10c00015 	stw	r3,0(r2)
    return -1;
 20095f0:	00bfffc4 	movi	r2,-1
  }
}
 20095f4:	e037883a 	mov	sp,fp
 20095f8:	dfc00117 	ldw	ra,4(sp)
 20095fc:	df000017 	ldw	fp,0(sp)
 2009600:	dec00204 	addi	sp,sp,8
 2009604:	f800283a 	ret

02009608 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2009608:	defffc04 	addi	sp,sp,-16
 200960c:	df000315 	stw	fp,12(sp)
 2009610:	df000304 	addi	fp,sp,12
 2009614:	e13ffd15 	stw	r4,-12(fp)
 2009618:	e17ffe15 	stw	r5,-8(fp)
 200961c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2009620:	e0bfff17 	ldw	r2,-4(fp)
}
 2009624:	e037883a 	mov	sp,fp
 2009628:	df000017 	ldw	fp,0(sp)
 200962c:	dec00104 	addi	sp,sp,4
 2009630:	f800283a 	ret

02009634 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2009634:	defffe04 	addi	sp,sp,-8
 2009638:	dfc00115 	stw	ra,4(sp)
 200963c:	df000015 	stw	fp,0(sp)
 2009640:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2009644:	00808074 	movhi	r2,513
 2009648:	10b5d104 	addi	r2,r2,-10428
 200964c:	10800017 	ldw	r2,0(r2)
 2009650:	10000526 	beq	r2,zero,2009668 <alt_get_errno+0x34>
 2009654:	00808074 	movhi	r2,513
 2009658:	10b5d104 	addi	r2,r2,-10428
 200965c:	10800017 	ldw	r2,0(r2)
 2009660:	103ee83a 	callr	r2
 2009664:	00000206 	br	2009670 <alt_get_errno+0x3c>
 2009668:	00808074 	movhi	r2,513
 200966c:	10b5dc04 	addi	r2,r2,-10384
}
 2009670:	e037883a 	mov	sp,fp
 2009674:	dfc00117 	ldw	ra,4(sp)
 2009678:	df000017 	ldw	fp,0(sp)
 200967c:	dec00204 	addi	sp,sp,8
 2009680:	f800283a 	ret

02009684 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2009684:	defffb04 	addi	sp,sp,-20
 2009688:	dfc00415 	stw	ra,16(sp)
 200968c:	df000315 	stw	fp,12(sp)
 2009690:	df000304 	addi	fp,sp,12
 2009694:	e13ffe15 	stw	r4,-8(fp)
 2009698:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200969c:	e0bffe17 	ldw	r2,-8(fp)
 20096a0:	10000616 	blt	r2,zero,20096bc <fstat+0x38>
 20096a4:	e0bffe17 	ldw	r2,-8(fp)
 20096a8:	10c00324 	muli	r3,r2,12
 20096ac:	00808074 	movhi	r2,513
 20096b0:	10b14e04 	addi	r2,r2,-15048
 20096b4:	1885883a 	add	r2,r3,r2
 20096b8:	00000106 	br	20096c0 <fstat+0x3c>
 20096bc:	0005883a 	mov	r2,zero
 20096c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20096c4:	e0bffd17 	ldw	r2,-12(fp)
 20096c8:	10001026 	beq	r2,zero,200970c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20096cc:	e0bffd17 	ldw	r2,-12(fp)
 20096d0:	10800017 	ldw	r2,0(r2)
 20096d4:	10800817 	ldw	r2,32(r2)
 20096d8:	10000726 	beq	r2,zero,20096f8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 20096dc:	e0bffd17 	ldw	r2,-12(fp)
 20096e0:	10800017 	ldw	r2,0(r2)
 20096e4:	10800817 	ldw	r2,32(r2)
 20096e8:	e13ffd17 	ldw	r4,-12(fp)
 20096ec:	e17fff17 	ldw	r5,-4(fp)
 20096f0:	103ee83a 	callr	r2
 20096f4:	00000906 	br	200971c <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20096f8:	e0bfff17 	ldw	r2,-4(fp)
 20096fc:	00c80004 	movi	r3,8192
 2009700:	10c00115 	stw	r3,4(r2)
      return 0;
 2009704:	0005883a 	mov	r2,zero
 2009708:	00000406 	br	200971c <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200970c:	20096340 	call	2009634 <alt_get_errno>
 2009710:	00c01444 	movi	r3,81
 2009714:	10c00015 	stw	r3,0(r2)
    return -1;
 2009718:	00bfffc4 	movi	r2,-1
  }
}
 200971c:	e037883a 	mov	sp,fp
 2009720:	dfc00117 	ldw	ra,4(sp)
 2009724:	df000017 	ldw	fp,0(sp)
 2009728:	dec00204 	addi	sp,sp,8
 200972c:	f800283a 	ret

02009730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2009730:	defffe04 	addi	sp,sp,-8
 2009734:	dfc00115 	stw	ra,4(sp)
 2009738:	df000015 	stw	fp,0(sp)
 200973c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2009740:	00808074 	movhi	r2,513
 2009744:	10b5d104 	addi	r2,r2,-10428
 2009748:	10800017 	ldw	r2,0(r2)
 200974c:	10000526 	beq	r2,zero,2009764 <alt_get_errno+0x34>
 2009750:	00808074 	movhi	r2,513
 2009754:	10b5d104 	addi	r2,r2,-10428
 2009758:	10800017 	ldw	r2,0(r2)
 200975c:	103ee83a 	callr	r2
 2009760:	00000206 	br	200976c <alt_get_errno+0x3c>
 2009764:	00808074 	movhi	r2,513
 2009768:	10b5dc04 	addi	r2,r2,-10384
}
 200976c:	e037883a 	mov	sp,fp
 2009770:	dfc00117 	ldw	ra,4(sp)
 2009774:	df000017 	ldw	fp,0(sp)
 2009778:	dec00204 	addi	sp,sp,8
 200977c:	f800283a 	ret

02009780 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2009780:	deffed04 	addi	sp,sp,-76
 2009784:	dfc01215 	stw	ra,72(sp)
 2009788:	df001115 	stw	fp,68(sp)
 200978c:	df001104 	addi	fp,sp,68
 2009790:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2009794:	e0bfff17 	ldw	r2,-4(fp)
 2009798:	10000616 	blt	r2,zero,20097b4 <isatty+0x34>
 200979c:	e0bfff17 	ldw	r2,-4(fp)
 20097a0:	10c00324 	muli	r3,r2,12
 20097a4:	00808074 	movhi	r2,513
 20097a8:	10b14e04 	addi	r2,r2,-15048
 20097ac:	1885883a 	add	r2,r3,r2
 20097b0:	00000106 	br	20097b8 <isatty+0x38>
 20097b4:	0005883a 	mov	r2,zero
 20097b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 20097bc:	e0bfef17 	ldw	r2,-68(fp)
 20097c0:	10000e26 	beq	r2,zero,20097fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 20097c4:	e0bfef17 	ldw	r2,-68(fp)
 20097c8:	10800017 	ldw	r2,0(r2)
 20097cc:	10800817 	ldw	r2,32(r2)
 20097d0:	1000021e 	bne	r2,zero,20097dc <isatty+0x5c>
    {
      return 1;
 20097d4:	00800044 	movi	r2,1
 20097d8:	00000c06 	br	200980c <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20097dc:	e0bff004 	addi	r2,fp,-64
 20097e0:	e13fff17 	ldw	r4,-4(fp)
 20097e4:	100b883a 	mov	r5,r2
 20097e8:	20096840 	call	2009684 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20097ec:	e0bff117 	ldw	r2,-60(fp)
 20097f0:	10880020 	cmpeqi	r2,r2,8192
 20097f4:	10803fcc 	andi	r2,r2,255
 20097f8:	00000406 	br	200980c <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20097fc:	20097300 	call	2009730 <alt_get_errno>
 2009800:	00c01444 	movi	r3,81
 2009804:	10c00015 	stw	r3,0(r2)
    return 0;
 2009808:	0005883a 	mov	r2,zero
  }
}
 200980c:	e037883a 	mov	sp,fp
 2009810:	dfc00117 	ldw	ra,4(sp)
 2009814:	df000017 	ldw	fp,0(sp)
 2009818:	dec00204 	addi	sp,sp,8
 200981c:	f800283a 	ret

02009820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2009820:	defffe04 	addi	sp,sp,-8
 2009824:	dfc00115 	stw	ra,4(sp)
 2009828:	df000015 	stw	fp,0(sp)
 200982c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2009830:	00808074 	movhi	r2,513
 2009834:	10b5d104 	addi	r2,r2,-10428
 2009838:	10800017 	ldw	r2,0(r2)
 200983c:	10000526 	beq	r2,zero,2009854 <alt_get_errno+0x34>
 2009840:	00808074 	movhi	r2,513
 2009844:	10b5d104 	addi	r2,r2,-10428
 2009848:	10800017 	ldw	r2,0(r2)
 200984c:	103ee83a 	callr	r2
 2009850:	00000206 	br	200985c <alt_get_errno+0x3c>
 2009854:	00808074 	movhi	r2,513
 2009858:	10b5dc04 	addi	r2,r2,-10384
}
 200985c:	e037883a 	mov	sp,fp
 2009860:	dfc00117 	ldw	ra,4(sp)
 2009864:	df000017 	ldw	fp,0(sp)
 2009868:	dec00204 	addi	sp,sp,8
 200986c:	f800283a 	ret

02009870 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2009870:	defff904 	addi	sp,sp,-28
 2009874:	dfc00615 	stw	ra,24(sp)
 2009878:	df000515 	stw	fp,20(sp)
 200987c:	df000504 	addi	fp,sp,20
 2009880:	e13ffd15 	stw	r4,-12(fp)
 2009884:	e17ffe15 	stw	r5,-8(fp)
 2009888:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200988c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2009890:	e0bffd17 	ldw	r2,-12(fp)
 2009894:	10000616 	blt	r2,zero,20098b0 <lseek+0x40>
 2009898:	e0bffd17 	ldw	r2,-12(fp)
 200989c:	10c00324 	muli	r3,r2,12
 20098a0:	00808074 	movhi	r2,513
 20098a4:	10b14e04 	addi	r2,r2,-15048
 20098a8:	1885883a 	add	r2,r3,r2
 20098ac:	00000106 	br	20098b4 <lseek+0x44>
 20098b0:	0005883a 	mov	r2,zero
 20098b4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 20098b8:	e0bffc17 	ldw	r2,-16(fp)
 20098bc:	10001026 	beq	r2,zero,2009900 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 20098c0:	e0bffc17 	ldw	r2,-16(fp)
 20098c4:	10800017 	ldw	r2,0(r2)
 20098c8:	10800717 	ldw	r2,28(r2)
 20098cc:	10000926 	beq	r2,zero,20098f4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 20098d0:	e0bffc17 	ldw	r2,-16(fp)
 20098d4:	10800017 	ldw	r2,0(r2)
 20098d8:	10800717 	ldw	r2,28(r2)
 20098dc:	e13ffc17 	ldw	r4,-16(fp)
 20098e0:	e17ffe17 	ldw	r5,-8(fp)
 20098e4:	e1bfff17 	ldw	r6,-4(fp)
 20098e8:	103ee83a 	callr	r2
 20098ec:	e0bffb15 	stw	r2,-20(fp)
 20098f0:	00000506 	br	2009908 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 20098f4:	00bfde84 	movi	r2,-134
 20098f8:	e0bffb15 	stw	r2,-20(fp)
 20098fc:	00000206 	br	2009908 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 2009900:	00bfebc4 	movi	r2,-81
 2009904:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2009908:	e0bffb17 	ldw	r2,-20(fp)
 200990c:	1000060e 	bge	r2,zero,2009928 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 2009910:	20098200 	call	2009820 <alt_get_errno>
 2009914:	e0fffb17 	ldw	r3,-20(fp)
 2009918:	00c7c83a 	sub	r3,zero,r3
 200991c:	10c00015 	stw	r3,0(r2)
    rc = -1;
 2009920:	00bfffc4 	movi	r2,-1
 2009924:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2009928:	e0bffb17 	ldw	r2,-20(fp)
}
 200992c:	e037883a 	mov	sp,fp
 2009930:	dfc00117 	ldw	ra,4(sp)
 2009934:	df000017 	ldw	fp,0(sp)
 2009938:	dec00204 	addi	sp,sp,8
 200993c:	f800283a 	ret

02009940 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2009940:	defffd04 	addi	sp,sp,-12
 2009944:	dfc00215 	stw	ra,8(sp)
 2009948:	df000115 	stw	fp,4(sp)
 200994c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2009950:	0009883a 	mov	r4,zero
 2009954:	2009dbc0 	call	2009dbc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2009958:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200995c:	2009df00 	call	2009df0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2009960:	01008074 	movhi	r4,513
 2009964:	212f3704 	addi	r4,r4,-17188
 2009968:	01408074 	movhi	r5,513
 200996c:	296f3704 	addi	r5,r5,-17188
 2009970:	01808074 	movhi	r6,513
 2009974:	31af3704 	addi	r6,r6,-17188
 2009978:	200af0c0 	call	200af0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200997c:	200aacc0 	call	200aacc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2009980:	01008074 	movhi	r4,513
 2009984:	212aca04 	addi	r4,r4,-21720
 2009988:	200b6080 	call	200b608 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200998c:	d1201717 	ldw	r4,-32676(gp)
 2009990:	d0e01817 	ldw	r3,-32672(gp)
 2009994:	d0a01917 	ldw	r2,-32668(gp)
 2009998:	180b883a 	mov	r5,r3
 200999c:	100d883a 	mov	r6,r2
 20099a0:	20002000 	call	2000200 <main>
 20099a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20099a8:	01000044 	movi	r4,1
 20099ac:	20095400 	call	2009540 <close>
  exit (result);
 20099b0:	e13fff17 	ldw	r4,-4(fp)
 20099b4:	200b61c0 	call	200b61c <exit>

020099b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 20099b8:	defffe04 	addi	sp,sp,-8
 20099bc:	df000115 	stw	fp,4(sp)
 20099c0:	df000104 	addi	fp,sp,4
 20099c4:	e13fff15 	stw	r4,-4(fp)
}
 20099c8:	e037883a 	mov	sp,fp
 20099cc:	df000017 	ldw	fp,0(sp)
 20099d0:	dec00104 	addi	sp,sp,4
 20099d4:	f800283a 	ret

020099d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 20099d8:	defffe04 	addi	sp,sp,-8
 20099dc:	df000115 	stw	fp,4(sp)
 20099e0:	df000104 	addi	fp,sp,4
 20099e4:	e13fff15 	stw	r4,-4(fp)
}
 20099e8:	e037883a 	mov	sp,fp
 20099ec:	df000017 	ldw	fp,0(sp)
 20099f0:	dec00104 	addi	sp,sp,4
 20099f4:	f800283a 	ret

020099f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20099f8:	defffe04 	addi	sp,sp,-8
 20099fc:	dfc00115 	stw	ra,4(sp)
 2009a00:	df000015 	stw	fp,0(sp)
 2009a04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2009a08:	00808074 	movhi	r2,513
 2009a0c:	10b5d104 	addi	r2,r2,-10428
 2009a10:	10800017 	ldw	r2,0(r2)
 2009a14:	10000526 	beq	r2,zero,2009a2c <alt_get_errno+0x34>
 2009a18:	00808074 	movhi	r2,513
 2009a1c:	10b5d104 	addi	r2,r2,-10428
 2009a20:	10800017 	ldw	r2,0(r2)
 2009a24:	103ee83a 	callr	r2
 2009a28:	00000206 	br	2009a34 <alt_get_errno+0x3c>
 2009a2c:	00808074 	movhi	r2,513
 2009a30:	10b5dc04 	addi	r2,r2,-10384
}
 2009a34:	e037883a 	mov	sp,fp
 2009a38:	dfc00117 	ldw	ra,4(sp)
 2009a3c:	df000017 	ldw	fp,0(sp)
 2009a40:	dec00204 	addi	sp,sp,8
 2009a44:	f800283a 	ret

02009a48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2009a48:	defff904 	addi	sp,sp,-28
 2009a4c:	dfc00615 	stw	ra,24(sp)
 2009a50:	df000515 	stw	fp,20(sp)
 2009a54:	df000504 	addi	fp,sp,20
 2009a58:	e13ffd15 	stw	r4,-12(fp)
 2009a5c:	e17ffe15 	stw	r5,-8(fp)
 2009a60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2009a64:	e0bffd17 	ldw	r2,-12(fp)
 2009a68:	10000616 	blt	r2,zero,2009a84 <read+0x3c>
 2009a6c:	e0bffd17 	ldw	r2,-12(fp)
 2009a70:	10c00324 	muli	r3,r2,12
 2009a74:	00808074 	movhi	r2,513
 2009a78:	10b14e04 	addi	r2,r2,-15048
 2009a7c:	1885883a 	add	r2,r3,r2
 2009a80:	00000106 	br	2009a88 <read+0x40>
 2009a84:	0005883a 	mov	r2,zero
 2009a88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2009a8c:	e0bffb17 	ldw	r2,-20(fp)
 2009a90:	10002026 	beq	r2,zero,2009b14 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2009a94:	e0bffb17 	ldw	r2,-20(fp)
 2009a98:	10800217 	ldw	r2,8(r2)
 2009a9c:	108000cc 	andi	r2,r2,3
 2009aa0:	10800060 	cmpeqi	r2,r2,1
 2009aa4:	1000171e 	bne	r2,zero,2009b04 <read+0xbc>
        (fd->dev->read))
 2009aa8:	e0bffb17 	ldw	r2,-20(fp)
 2009aac:	10800017 	ldw	r2,0(r2)
 2009ab0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2009ab4:	10001326 	beq	r2,zero,2009b04 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2009ab8:	e0bffb17 	ldw	r2,-20(fp)
 2009abc:	10800017 	ldw	r2,0(r2)
 2009ac0:	10c00517 	ldw	r3,20(r2)
 2009ac4:	e0bfff17 	ldw	r2,-4(fp)
 2009ac8:	e13ffb17 	ldw	r4,-20(fp)
 2009acc:	e17ffe17 	ldw	r5,-8(fp)
 2009ad0:	100d883a 	mov	r6,r2
 2009ad4:	183ee83a 	callr	r3
 2009ad8:	e0bffc15 	stw	r2,-16(fp)
 2009adc:	e0bffc17 	ldw	r2,-16(fp)
 2009ae0:	1000060e 	bge	r2,zero,2009afc <read+0xb4>
        {
          ALT_ERRNO = -rval;
 2009ae4:	20099f80 	call	20099f8 <alt_get_errno>
 2009ae8:	e0fffc17 	ldw	r3,-16(fp)
 2009aec:	00c7c83a 	sub	r3,zero,r3
 2009af0:	10c00015 	stw	r3,0(r2)
          return -1;
 2009af4:	00bfffc4 	movi	r2,-1
 2009af8:	00000a06 	br	2009b24 <read+0xdc>
        }
        return rval;
 2009afc:	e0bffc17 	ldw	r2,-16(fp)
 2009b00:	00000806 	br	2009b24 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2009b04:	20099f80 	call	20099f8 <alt_get_errno>
 2009b08:	00c00344 	movi	r3,13
 2009b0c:	10c00015 	stw	r3,0(r2)
 2009b10:	00000306 	br	2009b20 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2009b14:	20099f80 	call	20099f8 <alt_get_errno>
 2009b18:	00c01444 	movi	r3,81
 2009b1c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2009b20:	00bfffc4 	movi	r2,-1
}
 2009b24:	e037883a 	mov	sp,fp
 2009b28:	dfc00117 	ldw	ra,4(sp)
 2009b2c:	df000017 	ldw	fp,0(sp)
 2009b30:	dec00204 	addi	sp,sp,8
 2009b34:	f800283a 	ret

02009b38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2009b38:	defffe04 	addi	sp,sp,-8
 2009b3c:	df000115 	stw	fp,4(sp)
 2009b40:	df000104 	addi	fp,sp,4
 2009b44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2009b48:	e0bfff17 	ldw	r2,-4(fp)
 2009b4c:	108000d0 	cmplti	r2,r2,3
 2009b50:	10000d1e 	bne	r2,zero,2009b88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2009b54:	00c08074 	movhi	r3,513
 2009b58:	18f14e04 	addi	r3,r3,-15048
 2009b5c:	e0bfff17 	ldw	r2,-4(fp)
 2009b60:	10800324 	muli	r2,r2,12
 2009b64:	1885883a 	add	r2,r3,r2
 2009b68:	10800204 	addi	r2,r2,8
 2009b6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2009b70:	00c08074 	movhi	r3,513
 2009b74:	18f14e04 	addi	r3,r3,-15048
 2009b78:	e0bfff17 	ldw	r2,-4(fp)
 2009b7c:	10800324 	muli	r2,r2,12
 2009b80:	1885883a 	add	r2,r3,r2
 2009b84:	10000015 	stw	zero,0(r2)
  }
}
 2009b88:	e037883a 	mov	sp,fp
 2009b8c:	df000017 	ldw	fp,0(sp)
 2009b90:	dec00104 	addi	sp,sp,4
 2009b94:	f800283a 	ret

02009b98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2009b98:	defff904 	addi	sp,sp,-28
 2009b9c:	df000615 	stw	fp,24(sp)
 2009ba0:	df000604 	addi	fp,sp,24
 2009ba4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2009ba8:	0005303a 	rdctl	r2,status
 2009bac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2009bb0:	e0fffc17 	ldw	r3,-16(fp)
 2009bb4:	00bfff84 	movi	r2,-2
 2009bb8:	1884703a 	and	r2,r3,r2
 2009bbc:	1001703a 	wrctl	status,r2
  
  return context;
 2009bc0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2009bc4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2009bc8:	d0a00c17 	ldw	r2,-32720(gp)
 2009bcc:	10c000c4 	addi	r3,r2,3
 2009bd0:	00bfff04 	movi	r2,-4
 2009bd4:	1884703a 	and	r2,r3,r2
 2009bd8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2009bdc:	d0e00c17 	ldw	r3,-32720(gp)
 2009be0:	e0bfff17 	ldw	r2,-4(fp)
 2009be4:	1885883a 	add	r2,r3,r2
 2009be8:	00c10034 	movhi	r3,1024
 2009bec:	18c00004 	addi	r3,r3,0
 2009bf0:	1880062e 	bgeu	r3,r2,2009c0c <sbrk+0x74>
 2009bf4:	e0bffa17 	ldw	r2,-24(fp)
 2009bf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2009bfc:	e0bffd17 	ldw	r2,-12(fp)
 2009c00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2009c04:	00bfffc4 	movi	r2,-1
 2009c08:	00000b06 	br	2009c38 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2009c0c:	d0a00c17 	ldw	r2,-32720(gp)
 2009c10:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 2009c14:	d0e00c17 	ldw	r3,-32720(gp)
 2009c18:	e0bfff17 	ldw	r2,-4(fp)
 2009c1c:	1885883a 	add	r2,r3,r2
 2009c20:	d0a00c15 	stw	r2,-32720(gp)
 2009c24:	e0bffa17 	ldw	r2,-24(fp)
 2009c28:	e0bffe15 	stw	r2,-8(fp)
 2009c2c:	e0bffe17 	ldw	r2,-8(fp)
 2009c30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2009c34:	e0bffb17 	ldw	r2,-20(fp)
} 
 2009c38:	e037883a 	mov	sp,fp
 2009c3c:	df000017 	ldw	fp,0(sp)
 2009c40:	dec00104 	addi	sp,sp,4
 2009c44:	f800283a 	ret

02009c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2009c48:	defffe04 	addi	sp,sp,-8
 2009c4c:	dfc00115 	stw	ra,4(sp)
 2009c50:	df000015 	stw	fp,0(sp)
 2009c54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2009c58:	00808074 	movhi	r2,513
 2009c5c:	10b5d104 	addi	r2,r2,-10428
 2009c60:	10800017 	ldw	r2,0(r2)
 2009c64:	10000526 	beq	r2,zero,2009c7c <alt_get_errno+0x34>
 2009c68:	00808074 	movhi	r2,513
 2009c6c:	10b5d104 	addi	r2,r2,-10428
 2009c70:	10800017 	ldw	r2,0(r2)
 2009c74:	103ee83a 	callr	r2
 2009c78:	00000206 	br	2009c84 <alt_get_errno+0x3c>
 2009c7c:	00808074 	movhi	r2,513
 2009c80:	10b5dc04 	addi	r2,r2,-10384
}
 2009c84:	e037883a 	mov	sp,fp
 2009c88:	dfc00117 	ldw	ra,4(sp)
 2009c8c:	df000017 	ldw	fp,0(sp)
 2009c90:	dec00204 	addi	sp,sp,8
 2009c94:	f800283a 	ret

02009c98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2009c98:	defff904 	addi	sp,sp,-28
 2009c9c:	dfc00615 	stw	ra,24(sp)
 2009ca0:	df000515 	stw	fp,20(sp)
 2009ca4:	df000504 	addi	fp,sp,20
 2009ca8:	e13ffd15 	stw	r4,-12(fp)
 2009cac:	e17ffe15 	stw	r5,-8(fp)
 2009cb0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2009cb4:	e0bffd17 	ldw	r2,-12(fp)
 2009cb8:	10000616 	blt	r2,zero,2009cd4 <write+0x3c>
 2009cbc:	e0bffd17 	ldw	r2,-12(fp)
 2009cc0:	10c00324 	muli	r3,r2,12
 2009cc4:	00808074 	movhi	r2,513
 2009cc8:	10b14e04 	addi	r2,r2,-15048
 2009ccc:	1885883a 	add	r2,r3,r2
 2009cd0:	00000106 	br	2009cd8 <write+0x40>
 2009cd4:	0005883a 	mov	r2,zero
 2009cd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2009cdc:	e0bffb17 	ldw	r2,-20(fp)
 2009ce0:	10001f26 	beq	r2,zero,2009d60 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2009ce4:	e0bffb17 	ldw	r2,-20(fp)
 2009ce8:	10800217 	ldw	r2,8(r2)
 2009cec:	108000cc 	andi	r2,r2,3
 2009cf0:	10001726 	beq	r2,zero,2009d50 <write+0xb8>
 2009cf4:	e0bffb17 	ldw	r2,-20(fp)
 2009cf8:	10800017 	ldw	r2,0(r2)
 2009cfc:	10800617 	ldw	r2,24(r2)
 2009d00:	10001326 	beq	r2,zero,2009d50 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2009d04:	e0bffb17 	ldw	r2,-20(fp)
 2009d08:	10800017 	ldw	r2,0(r2)
 2009d0c:	10c00617 	ldw	r3,24(r2)
 2009d10:	e0bfff17 	ldw	r2,-4(fp)
 2009d14:	e13ffb17 	ldw	r4,-20(fp)
 2009d18:	e17ffe17 	ldw	r5,-8(fp)
 2009d1c:	100d883a 	mov	r6,r2
 2009d20:	183ee83a 	callr	r3
 2009d24:	e0bffc15 	stw	r2,-16(fp)
 2009d28:	e0bffc17 	ldw	r2,-16(fp)
 2009d2c:	1000060e 	bge	r2,zero,2009d48 <write+0xb0>
      {
        ALT_ERRNO = -rval;
 2009d30:	2009c480 	call	2009c48 <alt_get_errno>
 2009d34:	e0fffc17 	ldw	r3,-16(fp)
 2009d38:	00c7c83a 	sub	r3,zero,r3
 2009d3c:	10c00015 	stw	r3,0(r2)
        return -1;
 2009d40:	00bfffc4 	movi	r2,-1
 2009d44:	00000a06 	br	2009d70 <write+0xd8>
      }
      return rval;
 2009d48:	e0bffc17 	ldw	r2,-16(fp)
 2009d4c:	00000806 	br	2009d70 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2009d50:	2009c480 	call	2009c48 <alt_get_errno>
 2009d54:	00c00344 	movi	r3,13
 2009d58:	10c00015 	stw	r3,0(r2)
 2009d5c:	00000306 	br	2009d6c <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2009d60:	2009c480 	call	2009c48 <alt_get_errno>
 2009d64:	00c01444 	movi	r3,81
 2009d68:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2009d6c:	00bfffc4 	movi	r2,-1
}
 2009d70:	e037883a 	mov	sp,fp
 2009d74:	dfc00117 	ldw	ra,4(sp)
 2009d78:	df000017 	ldw	fp,0(sp)
 2009d7c:	dec00204 	addi	sp,sp,8
 2009d80:	f800283a 	ret

02009d84 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2009d84:	defffd04 	addi	sp,sp,-12
 2009d88:	dfc00215 	stw	ra,8(sp)
 2009d8c:	df000115 	stw	fp,4(sp)
 2009d90:	df000104 	addi	fp,sp,4
 2009d94:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2009d98:	e13fff17 	ldw	r4,-4(fp)
 2009d9c:	01408074 	movhi	r5,513
 2009da0:	2975ce04 	addi	r5,r5,-10440
 2009da4:	200aa2c0 	call	200aa2c <alt_dev_llist_insert>
}
 2009da8:	e037883a 	mov	sp,fp
 2009dac:	dfc00117 	ldw	ra,4(sp)
 2009db0:	df000017 	ldw	fp,0(sp)
 2009db4:	dec00204 	addi	sp,sp,8
 2009db8:	f800283a 	ret

02009dbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2009dbc:	defffd04 	addi	sp,sp,-12
 2009dc0:	dfc00215 	stw	ra,8(sp)
 2009dc4:	df000115 	stw	fp,4(sp)
 2009dc8:	df000104 	addi	fp,sp,4
 2009dcc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
 2009dd0:	200b3900 	call	200b390 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2009dd4:	00800044 	movi	r2,1
 2009dd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2009ddc:	e037883a 	mov	sp,fp
 2009de0:	dfc00117 	ldw	ra,4(sp)
 2009de4:	df000017 	ldw	fp,0(sp)
 2009de8:	dec00204 	addi	sp,sp,8
 2009dec:	f800283a 	ret

02009df0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2009df0:	defffe04 	addi	sp,sp,-8
 2009df4:	dfc00115 	stw	ra,4(sp)
 2009df8:	df000015 	stw	fp,0(sp)
 2009dfc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2009e00:	01008074 	movhi	r4,513
 2009e04:	2131b804 	addi	r4,r4,-14624
 2009e08:	000b883a 	mov	r5,zero
 2009e0c:	01800044 	movi	r6,1
 2009e10:	2009f9c0 	call	2009f9c <altera_avalon_jtag_uart_init>
 2009e14:	01008074 	movhi	r4,513
 2009e18:	2131ae04 	addi	r4,r4,-14664
 2009e1c:	2009d840 	call	2009d84 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 2009e20:	0001883a 	nop
}
 2009e24:	e037883a 	mov	sp,fp
 2009e28:	dfc00117 	ldw	ra,4(sp)
 2009e2c:	df000017 	ldw	fp,0(sp)
 2009e30:	dec00204 	addi	sp,sp,8
 2009e34:	f800283a 	ret

02009e38 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2009e38:	defffa04 	addi	sp,sp,-24
 2009e3c:	dfc00515 	stw	ra,20(sp)
 2009e40:	df000415 	stw	fp,16(sp)
 2009e44:	df000404 	addi	fp,sp,16
 2009e48:	e13ffd15 	stw	r4,-12(fp)
 2009e4c:	e17ffe15 	stw	r5,-8(fp)
 2009e50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2009e54:	e0bffd17 	ldw	r2,-12(fp)
 2009e58:	10800017 	ldw	r2,0(r2)
 2009e5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2009e60:	e0bffc17 	ldw	r2,-16(fp)
 2009e64:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2009e68:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2009e6c:	10800217 	ldw	r2,8(r2)
 2009e70:	1809883a 	mov	r4,r3
 2009e74:	e17ffe17 	ldw	r5,-8(fp)
 2009e78:	e1bfff17 	ldw	r6,-4(fp)
 2009e7c:	100f883a 	mov	r7,r2
 2009e80:	200a4600 	call	200a460 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2009e84:	e037883a 	mov	sp,fp
 2009e88:	dfc00117 	ldw	ra,4(sp)
 2009e8c:	df000017 	ldw	fp,0(sp)
 2009e90:	dec00204 	addi	sp,sp,8
 2009e94:	f800283a 	ret

02009e98 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2009e98:	defffa04 	addi	sp,sp,-24
 2009e9c:	dfc00515 	stw	ra,20(sp)
 2009ea0:	df000415 	stw	fp,16(sp)
 2009ea4:	df000404 	addi	fp,sp,16
 2009ea8:	e13ffd15 	stw	r4,-12(fp)
 2009eac:	e17ffe15 	stw	r5,-8(fp)
 2009eb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2009eb4:	e0bffd17 	ldw	r2,-12(fp)
 2009eb8:	10800017 	ldw	r2,0(r2)
 2009ebc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2009ec0:	e0bffc17 	ldw	r2,-16(fp)
 2009ec4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2009ec8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2009ecc:	10800217 	ldw	r2,8(r2)
 2009ed0:	1809883a 	mov	r4,r3
 2009ed4:	e17ffe17 	ldw	r5,-8(fp)
 2009ed8:	e1bfff17 	ldw	r6,-4(fp)
 2009edc:	100f883a 	mov	r7,r2
 2009ee0:	200a6780 	call	200a678 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2009ee4:	e037883a 	mov	sp,fp
 2009ee8:	dfc00117 	ldw	ra,4(sp)
 2009eec:	df000017 	ldw	fp,0(sp)
 2009ef0:	dec00204 	addi	sp,sp,8
 2009ef4:	f800283a 	ret

02009ef8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2009ef8:	defffc04 	addi	sp,sp,-16
 2009efc:	dfc00315 	stw	ra,12(sp)
 2009f00:	df000215 	stw	fp,8(sp)
 2009f04:	df000204 	addi	fp,sp,8
 2009f08:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2009f0c:	e0bfff17 	ldw	r2,-4(fp)
 2009f10:	10800017 	ldw	r2,0(r2)
 2009f14:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2009f18:	e0bffe17 	ldw	r2,-8(fp)
 2009f1c:	10c00a04 	addi	r3,r2,40
 2009f20:	e0bfff17 	ldw	r2,-4(fp)
 2009f24:	10800217 	ldw	r2,8(r2)
 2009f28:	1809883a 	mov	r4,r3
 2009f2c:	100b883a 	mov	r5,r2
 2009f30:	200a3040 	call	200a304 <altera_avalon_jtag_uart_close>
}
 2009f34:	e037883a 	mov	sp,fp
 2009f38:	dfc00117 	ldw	ra,4(sp)
 2009f3c:	df000017 	ldw	fp,0(sp)
 2009f40:	dec00204 	addi	sp,sp,8
 2009f44:	f800283a 	ret

02009f48 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2009f48:	defffa04 	addi	sp,sp,-24
 2009f4c:	dfc00515 	stw	ra,20(sp)
 2009f50:	df000415 	stw	fp,16(sp)
 2009f54:	df000404 	addi	fp,sp,16
 2009f58:	e13ffd15 	stw	r4,-12(fp)
 2009f5c:	e17ffe15 	stw	r5,-8(fp)
 2009f60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2009f64:	e0bffd17 	ldw	r2,-12(fp)
 2009f68:	10800017 	ldw	r2,0(r2)
 2009f6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2009f70:	e0bffc17 	ldw	r2,-16(fp)
 2009f74:	10800a04 	addi	r2,r2,40
 2009f78:	1009883a 	mov	r4,r2
 2009f7c:	e17ffe17 	ldw	r5,-8(fp)
 2009f80:	e1bfff17 	ldw	r6,-4(fp)
 2009f84:	200a36c0 	call	200a36c <altera_avalon_jtag_uart_ioctl>
}
 2009f88:	e037883a 	mov	sp,fp
 2009f8c:	dfc00117 	ldw	ra,4(sp)
 2009f90:	df000017 	ldw	fp,0(sp)
 2009f94:	dec00204 	addi	sp,sp,8
 2009f98:	f800283a 	ret

02009f9c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2009f9c:	defffa04 	addi	sp,sp,-24
 2009fa0:	dfc00515 	stw	ra,20(sp)
 2009fa4:	df000415 	stw	fp,16(sp)
 2009fa8:	df000404 	addi	fp,sp,16
 2009fac:	e13ffd15 	stw	r4,-12(fp)
 2009fb0:	e17ffe15 	stw	r5,-8(fp)
 2009fb4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2009fb8:	e0bffd17 	ldw	r2,-12(fp)
 2009fbc:	00c00044 	movi	r3,1
 2009fc0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2009fc4:	e0bffd17 	ldw	r2,-12(fp)
 2009fc8:	10800017 	ldw	r2,0(r2)
 2009fcc:	10800104 	addi	r2,r2,4
 2009fd0:	e0fffd17 	ldw	r3,-12(fp)
 2009fd4:	18c00817 	ldw	r3,32(r3)
 2009fd8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2009fdc:	e0fffe17 	ldw	r3,-8(fp)
 2009fe0:	e0bfff17 	ldw	r2,-4(fp)
 2009fe4:	d8000015 	stw	zero,0(sp)
 2009fe8:	1809883a 	mov	r4,r3
 2009fec:	100b883a 	mov	r5,r2
 2009ff0:	01808074 	movhi	r6,513
 2009ff4:	31a81704 	addi	r6,r6,-24484
 2009ff8:	e1fffd17 	ldw	r7,-12(fp)
 2009ffc:	200ab840 	call	200ab84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200a000:	e0bffd17 	ldw	r2,-12(fp)
 200a004:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200a008:	e0bffd17 	ldw	r2,-12(fp)
 200a00c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200a010:	00808074 	movhi	r2,513
 200a014:	10b5e104 	addi	r2,r2,-10364
 200a018:	10800017 	ldw	r2,0(r2)
 200a01c:	1809883a 	mov	r4,r3
 200a020:	100b883a 	mov	r5,r2
 200a024:	01808074 	movhi	r6,513
 200a028:	31a89804 	addi	r6,r6,-23968
 200a02c:	e1fffd17 	ldw	r7,-12(fp)
 200a030:	200a89c0 	call	200a89c <alt_alarm_start>
 200a034:	1000040e 	bge	r2,zero,200a048 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200a038:	e0bffd17 	ldw	r2,-12(fp)
 200a03c:	00e00034 	movhi	r3,32768
 200a040:	18ffffc4 	addi	r3,r3,-1
 200a044:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200a048:	e037883a 	mov	sp,fp
 200a04c:	dfc00117 	ldw	ra,4(sp)
 200a050:	df000017 	ldw	fp,0(sp)
 200a054:	dec00204 	addi	sp,sp,8
 200a058:	f800283a 	ret

0200a05c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200a05c:	defff804 	addi	sp,sp,-32
 200a060:	df000715 	stw	fp,28(sp)
 200a064:	df000704 	addi	fp,sp,28
 200a068:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200a06c:	e0bfff17 	ldw	r2,-4(fp)
 200a070:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200a074:	e0bffb17 	ldw	r2,-20(fp)
 200a078:	10800017 	ldw	r2,0(r2)
 200a07c:	e0bffc15 	stw	r2,-16(fp)
 200a080:	00000106 	br	200a088 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 200a084:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200a088:	e0bffc17 	ldw	r2,-16(fp)
 200a08c:	10800104 	addi	r2,r2,4
 200a090:	10800037 	ldwio	r2,0(r2)
 200a094:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200a098:	e0bffd17 	ldw	r2,-12(fp)
 200a09c:	1080c00c 	andi	r2,r2,768
 200a0a0:	10006a26 	beq	r2,zero,200a24c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200a0a4:	e0bffd17 	ldw	r2,-12(fp)
 200a0a8:	1080400c 	andi	r2,r2,256
 200a0ac:	10003326 	beq	r2,zero,200a17c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200a0b0:	00800074 	movhi	r2,1
 200a0b4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a0b8:	e0bffb17 	ldw	r2,-20(fp)
 200a0bc:	10800a17 	ldw	r2,40(r2)
 200a0c0:	10800044 	addi	r2,r2,1
 200a0c4:	1081ffcc 	andi	r2,r2,2047
 200a0c8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200a0cc:	e0bffb17 	ldw	r2,-20(fp)
 200a0d0:	10c00b17 	ldw	r3,44(r2)
 200a0d4:	e0bffe17 	ldw	r2,-8(fp)
 200a0d8:	18801426 	beq	r3,r2,200a12c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200a0dc:	e0bffc17 	ldw	r2,-16(fp)
 200a0e0:	10800037 	ldwio	r2,0(r2)
 200a0e4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200a0e8:	e0bff917 	ldw	r2,-28(fp)
 200a0ec:	10a0000c 	andi	r2,r2,32768
 200a0f0:	10001026 	beq	r2,zero,200a134 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200a0f4:	e0bffb17 	ldw	r2,-20(fp)
 200a0f8:	10800a17 	ldw	r2,40(r2)
 200a0fc:	e0fff917 	ldw	r3,-28(fp)
 200a100:	e13ffb17 	ldw	r4,-20(fp)
 200a104:	2085883a 	add	r2,r4,r2
 200a108:	10800e04 	addi	r2,r2,56
 200a10c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a110:	e0bffb17 	ldw	r2,-20(fp)
 200a114:	10800a17 	ldw	r2,40(r2)
 200a118:	10800044 	addi	r2,r2,1
 200a11c:	10c1ffcc 	andi	r3,r2,2047
 200a120:	e0bffb17 	ldw	r2,-20(fp)
 200a124:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200a128:	003fe306 	br	200a0b8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200a12c:	0001883a 	nop
 200a130:	00000106 	br	200a138 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200a134:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200a138:	e0bff917 	ldw	r2,-28(fp)
 200a13c:	10bfffec 	andhi	r2,r2,65535
 200a140:	10000e26 	beq	r2,zero,200a17c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200a144:	e0bffb17 	ldw	r2,-20(fp)
 200a148:	10c00817 	ldw	r3,32(r2)
 200a14c:	00bfff84 	movi	r2,-2
 200a150:	1886703a 	and	r3,r3,r2
 200a154:	e0bffb17 	ldw	r2,-20(fp)
 200a158:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200a15c:	e0bffc17 	ldw	r2,-16(fp)
 200a160:	10800104 	addi	r2,r2,4
 200a164:	e0fffb17 	ldw	r3,-20(fp)
 200a168:	18c00817 	ldw	r3,32(r3)
 200a16c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200a170:	e0bffc17 	ldw	r2,-16(fp)
 200a174:	10800104 	addi	r2,r2,4
 200a178:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200a17c:	e0bffd17 	ldw	r2,-12(fp)
 200a180:	1080800c 	andi	r2,r2,512
 200a184:	103fbf26 	beq	r2,zero,200a084 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200a188:	e0bffd17 	ldw	r2,-12(fp)
 200a18c:	1004d43a 	srli	r2,r2,16
 200a190:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200a194:	00001406 	br	200a1e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200a198:	e0bffc17 	ldw	r2,-16(fp)
 200a19c:	e0fffb17 	ldw	r3,-20(fp)
 200a1a0:	18c00d17 	ldw	r3,52(r3)
 200a1a4:	e13ffb17 	ldw	r4,-20(fp)
 200a1a8:	20c7883a 	add	r3,r4,r3
 200a1ac:	18c20e04 	addi	r3,r3,2104
 200a1b0:	18c00003 	ldbu	r3,0(r3)
 200a1b4:	18c03fcc 	andi	r3,r3,255
 200a1b8:	18c0201c 	xori	r3,r3,128
 200a1bc:	18ffe004 	addi	r3,r3,-128
 200a1c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a1c4:	e0bffb17 	ldw	r2,-20(fp)
 200a1c8:	10800d17 	ldw	r2,52(r2)
 200a1cc:	10800044 	addi	r2,r2,1
 200a1d0:	10c1ffcc 	andi	r3,r2,2047
 200a1d4:	e0bffb17 	ldw	r2,-20(fp)
 200a1d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200a1dc:	e0bffa17 	ldw	r2,-24(fp)
 200a1e0:	10bfffc4 	addi	r2,r2,-1
 200a1e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200a1e8:	e0bffa17 	ldw	r2,-24(fp)
 200a1ec:	10000526 	beq	r2,zero,200a204 <altera_avalon_jtag_uart_irq+0x1a8>
 200a1f0:	e0bffb17 	ldw	r2,-20(fp)
 200a1f4:	10c00d17 	ldw	r3,52(r2)
 200a1f8:	e0bffb17 	ldw	r2,-20(fp)
 200a1fc:	10800c17 	ldw	r2,48(r2)
 200a200:	18bfe51e 	bne	r3,r2,200a198 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200a204:	e0bffa17 	ldw	r2,-24(fp)
 200a208:	103f9e26 	beq	r2,zero,200a084 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200a20c:	e0bffb17 	ldw	r2,-20(fp)
 200a210:	10c00817 	ldw	r3,32(r2)
 200a214:	00bfff44 	movi	r2,-3
 200a218:	1886703a 	and	r3,r3,r2
 200a21c:	e0bffb17 	ldw	r2,-20(fp)
 200a220:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200a224:	e0bffb17 	ldw	r2,-20(fp)
 200a228:	10800017 	ldw	r2,0(r2)
 200a22c:	10800104 	addi	r2,r2,4
 200a230:	e0fffb17 	ldw	r3,-20(fp)
 200a234:	18c00817 	ldw	r3,32(r3)
 200a238:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200a23c:	e0bffc17 	ldw	r2,-16(fp)
 200a240:	10800104 	addi	r2,r2,4
 200a244:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200a248:	003f8e06 	br	200a084 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200a24c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200a250:	e037883a 	mov	sp,fp
 200a254:	df000017 	ldw	fp,0(sp)
 200a258:	dec00104 	addi	sp,sp,4
 200a25c:	f800283a 	ret

0200a260 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200a260:	defffc04 	addi	sp,sp,-16
 200a264:	df000315 	stw	fp,12(sp)
 200a268:	df000304 	addi	fp,sp,12
 200a26c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200a270:	e0bfff17 	ldw	r2,-4(fp)
 200a274:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200a278:	e0bffd17 	ldw	r2,-12(fp)
 200a27c:	10800017 	ldw	r2,0(r2)
 200a280:	10800104 	addi	r2,r2,4
 200a284:	10800037 	ldwio	r2,0(r2)
 200a288:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200a28c:	e0bffe17 	ldw	r2,-8(fp)
 200a290:	1081000c 	andi	r2,r2,1024
 200a294:	10000a26 	beq	r2,zero,200a2c0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200a298:	e0bffd17 	ldw	r2,-12(fp)
 200a29c:	10800017 	ldw	r2,0(r2)
 200a2a0:	10800104 	addi	r2,r2,4
 200a2a4:	e0fffd17 	ldw	r3,-12(fp)
 200a2a8:	18c00817 	ldw	r3,32(r3)
 200a2ac:	18c10014 	ori	r3,r3,1024
 200a2b0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 200a2b4:	e0bffd17 	ldw	r2,-12(fp)
 200a2b8:	10000915 	stw	zero,36(r2)
 200a2bc:	00000a06 	br	200a2e8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200a2c0:	e0bffd17 	ldw	r2,-12(fp)
 200a2c4:	10800917 	ldw	r2,36(r2)
 200a2c8:	00e00034 	movhi	r3,32768
 200a2cc:	18ffff04 	addi	r3,r3,-4
 200a2d0:	18800536 	bltu	r3,r2,200a2e8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 200a2d4:	e0bffd17 	ldw	r2,-12(fp)
 200a2d8:	10800917 	ldw	r2,36(r2)
 200a2dc:	10c00044 	addi	r3,r2,1
 200a2e0:	e0bffd17 	ldw	r2,-12(fp)
 200a2e4:	10c00915 	stw	r3,36(r2)
 200a2e8:	00808074 	movhi	r2,513
 200a2ec:	10b5e104 	addi	r2,r2,-10364
 200a2f0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200a2f4:	e037883a 	mov	sp,fp
 200a2f8:	df000017 	ldw	fp,0(sp)
 200a2fc:	dec00104 	addi	sp,sp,4
 200a300:	f800283a 	ret

0200a304 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200a304:	defffd04 	addi	sp,sp,-12
 200a308:	df000215 	stw	fp,8(sp)
 200a30c:	df000204 	addi	fp,sp,8
 200a310:	e13ffe15 	stw	r4,-8(fp)
 200a314:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200a318:	00000506 	br	200a330 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200a31c:	e0bfff17 	ldw	r2,-4(fp)
 200a320:	1090000c 	andi	r2,r2,16384
 200a324:	10000226 	beq	r2,zero,200a330 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200a328:	00bffd44 	movi	r2,-11
 200a32c:	00000b06 	br	200a35c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200a330:	e0bffe17 	ldw	r2,-8(fp)
 200a334:	10c00d17 	ldw	r3,52(r2)
 200a338:	e0bffe17 	ldw	r2,-8(fp)
 200a33c:	10800c17 	ldw	r2,48(r2)
 200a340:	18800526 	beq	r3,r2,200a358 <altera_avalon_jtag_uart_close+0x54>
 200a344:	e0bffe17 	ldw	r2,-8(fp)
 200a348:	10c00917 	ldw	r3,36(r2)
 200a34c:	e0bffe17 	ldw	r2,-8(fp)
 200a350:	10800117 	ldw	r2,4(r2)
 200a354:	18bff136 	bltu	r3,r2,200a31c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200a358:	0005883a 	mov	r2,zero
}
 200a35c:	e037883a 	mov	sp,fp
 200a360:	df000017 	ldw	fp,0(sp)
 200a364:	dec00104 	addi	sp,sp,4
 200a368:	f800283a 	ret

0200a36c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200a36c:	defffa04 	addi	sp,sp,-24
 200a370:	df000515 	stw	fp,20(sp)
 200a374:	df000504 	addi	fp,sp,20
 200a378:	e13ffd15 	stw	r4,-12(fp)
 200a37c:	e17ffe15 	stw	r5,-8(fp)
 200a380:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200a384:	00bff9c4 	movi	r2,-25
 200a388:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200a38c:	e0bffe17 	ldw	r2,-8(fp)
 200a390:	10da8060 	cmpeqi	r3,r2,27137
 200a394:	1800031e 	bne	r3,zero,200a3a4 <altera_avalon_jtag_uart_ioctl+0x38>
 200a398:	109a80a0 	cmpeqi	r2,r2,27138
 200a39c:	1000181e 	bne	r2,zero,200a400 <altera_avalon_jtag_uart_ioctl+0x94>
 200a3a0:	00002606 	br	200a43c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200a3a4:	e0bffd17 	ldw	r2,-12(fp)
 200a3a8:	10c00117 	ldw	r3,4(r2)
 200a3ac:	00a00034 	movhi	r2,32768
 200a3b0:	10bfffc4 	addi	r2,r2,-1
 200a3b4:	18802226 	beq	r3,r2,200a440 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 200a3b8:	e0bfff17 	ldw	r2,-4(fp)
 200a3bc:	10800017 	ldw	r2,0(r2)
 200a3c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200a3c4:	e0bffc17 	ldw	r2,-16(fp)
 200a3c8:	10800090 	cmplti	r2,r2,2
 200a3cc:	1000061e 	bne	r2,zero,200a3e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 200a3d0:	e0fffc17 	ldw	r3,-16(fp)
 200a3d4:	00a00034 	movhi	r2,32768
 200a3d8:	10bfffc4 	addi	r2,r2,-1
 200a3dc:	18800226 	beq	r3,r2,200a3e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 200a3e0:	e0bffc17 	ldw	r2,-16(fp)
 200a3e4:	00000206 	br	200a3f0 <altera_avalon_jtag_uart_ioctl+0x84>
 200a3e8:	00a00034 	movhi	r2,32768
 200a3ec:	10bfff84 	addi	r2,r2,-2
 200a3f0:	e0fffd17 	ldw	r3,-12(fp)
 200a3f4:	18800115 	stw	r2,4(r3)
      rc = 0;
 200a3f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200a3fc:	00001006 	br	200a440 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200a400:	e0bffd17 	ldw	r2,-12(fp)
 200a404:	10c00117 	ldw	r3,4(r2)
 200a408:	00a00034 	movhi	r2,32768
 200a40c:	10bfffc4 	addi	r2,r2,-1
 200a410:	18800d26 	beq	r3,r2,200a448 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200a414:	e0bffd17 	ldw	r2,-12(fp)
 200a418:	10c00917 	ldw	r3,36(r2)
 200a41c:	e0bffd17 	ldw	r2,-12(fp)
 200a420:	10800117 	ldw	r2,4(r2)
 200a424:	1885803a 	cmpltu	r2,r3,r2
 200a428:	10c03fcc 	andi	r3,r2,255
 200a42c:	e0bfff17 	ldw	r2,-4(fp)
 200a430:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200a434:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200a438:	00000306 	br	200a448 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 200a43c:	00000306 	br	200a44c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200a440:	0001883a 	nop
 200a444:	00000106 	br	200a44c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200a448:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200a44c:	e0bffb17 	ldw	r2,-20(fp)
}
 200a450:	e037883a 	mov	sp,fp
 200a454:	df000017 	ldw	fp,0(sp)
 200a458:	dec00104 	addi	sp,sp,4
 200a45c:	f800283a 	ret

0200a460 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200a460:	defff304 	addi	sp,sp,-52
 200a464:	dfc00c15 	stw	ra,48(sp)
 200a468:	df000b15 	stw	fp,44(sp)
 200a46c:	df000b04 	addi	fp,sp,44
 200a470:	e13ffc15 	stw	r4,-16(fp)
 200a474:	e17ffd15 	stw	r5,-12(fp)
 200a478:	e1bffe15 	stw	r6,-8(fp)
 200a47c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200a480:	e0bffd17 	ldw	r2,-12(fp)
 200a484:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200a488:	00004706 	br	200a5a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200a48c:	e0bffc17 	ldw	r2,-16(fp)
 200a490:	10800a17 	ldw	r2,40(r2)
 200a494:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200a498:	e0bffc17 	ldw	r2,-16(fp)
 200a49c:	10800b17 	ldw	r2,44(r2)
 200a4a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 200a4a4:	e0fff717 	ldw	r3,-36(fp)
 200a4a8:	e0bff817 	ldw	r2,-32(fp)
 200a4ac:	18800536 	bltu	r3,r2,200a4c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200a4b0:	e0fff717 	ldw	r3,-36(fp)
 200a4b4:	e0bff817 	ldw	r2,-32(fp)
 200a4b8:	1885c83a 	sub	r2,r3,r2
 200a4bc:	e0bff615 	stw	r2,-40(fp)
 200a4c0:	00000406 	br	200a4d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200a4c4:	00c20004 	movi	r3,2048
 200a4c8:	e0bff817 	ldw	r2,-32(fp)
 200a4cc:	1885c83a 	sub	r2,r3,r2
 200a4d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200a4d4:	e0bff617 	ldw	r2,-40(fp)
 200a4d8:	10001e26 	beq	r2,zero,200a554 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 200a4dc:	e0fffe17 	ldw	r3,-8(fp)
 200a4e0:	e0bff617 	ldw	r2,-40(fp)
 200a4e4:	1880022e 	bgeu	r3,r2,200a4f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200a4e8:	e0bffe17 	ldw	r2,-8(fp)
 200a4ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200a4f0:	e0bff817 	ldw	r2,-32(fp)
 200a4f4:	10800e04 	addi	r2,r2,56
 200a4f8:	e0fffc17 	ldw	r3,-16(fp)
 200a4fc:	1885883a 	add	r2,r3,r2
 200a500:	e13ff517 	ldw	r4,-44(fp)
 200a504:	100b883a 	mov	r5,r2
 200a508:	e1bff617 	ldw	r6,-40(fp)
 200a50c:	20056240 	call	2005624 <memcpy>
      ptr   += n;
 200a510:	e0fff517 	ldw	r3,-44(fp)
 200a514:	e0bff617 	ldw	r2,-40(fp)
 200a518:	1885883a 	add	r2,r3,r2
 200a51c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 200a520:	e0fffe17 	ldw	r3,-8(fp)
 200a524:	e0bff617 	ldw	r2,-40(fp)
 200a528:	1885c83a 	sub	r2,r3,r2
 200a52c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a530:	e0fff817 	ldw	r3,-32(fp)
 200a534:	e0bff617 	ldw	r2,-40(fp)
 200a538:	1885883a 	add	r2,r3,r2
 200a53c:	10c1ffcc 	andi	r3,r2,2047
 200a540:	e0bffc17 	ldw	r2,-16(fp)
 200a544:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200a548:	e0bffe17 	ldw	r2,-8(fp)
 200a54c:	00bfcf16 	blt	zero,r2,200a48c <altera_avalon_jtag_uart_read+0x2c>
 200a550:	00000106 	br	200a558 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200a554:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200a558:	e0fff517 	ldw	r3,-44(fp)
 200a55c:	e0bffd17 	ldw	r2,-12(fp)
 200a560:	1880141e 	bne	r3,r2,200a5b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200a564:	e0bfff17 	ldw	r2,-4(fp)
 200a568:	1090000c 	andi	r2,r2,16384
 200a56c:	1000131e 	bne	r2,zero,200a5bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200a570:	0001883a 	nop
 200a574:	e0bffc17 	ldw	r2,-16(fp)
 200a578:	10c00a17 	ldw	r3,40(r2)
 200a57c:	e0bff717 	ldw	r2,-36(fp)
 200a580:	1880051e 	bne	r3,r2,200a598 <altera_avalon_jtag_uart_read+0x138>
 200a584:	e0bffc17 	ldw	r2,-16(fp)
 200a588:	10c00917 	ldw	r3,36(r2)
 200a58c:	e0bffc17 	ldw	r2,-16(fp)
 200a590:	10800117 	ldw	r2,4(r2)
 200a594:	18bff736 	bltu	r3,r2,200a574 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200a598:	e0bffc17 	ldw	r2,-16(fp)
 200a59c:	10c00a17 	ldw	r3,40(r2)
 200a5a0:	e0bff717 	ldw	r2,-36(fp)
 200a5a4:	18800726 	beq	r3,r2,200a5c4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200a5a8:	e0bffe17 	ldw	r2,-8(fp)
 200a5ac:	00bfb716 	blt	zero,r2,200a48c <altera_avalon_jtag_uart_read+0x2c>
 200a5b0:	00000506 	br	200a5c8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200a5b4:	0001883a 	nop
 200a5b8:	00000306 	br	200a5c8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200a5bc:	0001883a 	nop
 200a5c0:	00000106 	br	200a5c8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200a5c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200a5c8:	e0fff517 	ldw	r3,-44(fp)
 200a5cc:	e0bffd17 	ldw	r2,-12(fp)
 200a5d0:	18801726 	beq	r3,r2,200a630 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a5d4:	0005303a 	rdctl	r2,status
 200a5d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a5dc:	e0fffa17 	ldw	r3,-24(fp)
 200a5e0:	00bfff84 	movi	r2,-2
 200a5e4:	1884703a 	and	r2,r3,r2
 200a5e8:	1001703a 	wrctl	status,r2
  
  return context;
 200a5ec:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200a5f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200a5f4:	e0bffc17 	ldw	r2,-16(fp)
 200a5f8:	10800817 	ldw	r2,32(r2)
 200a5fc:	10c00054 	ori	r3,r2,1
 200a600:	e0bffc17 	ldw	r2,-16(fp)
 200a604:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200a608:	e0bffc17 	ldw	r2,-16(fp)
 200a60c:	10800017 	ldw	r2,0(r2)
 200a610:	10800104 	addi	r2,r2,4
 200a614:	e0fffc17 	ldw	r3,-16(fp)
 200a618:	18c00817 	ldw	r3,32(r3)
 200a61c:	10c00035 	stwio	r3,0(r2)
 200a620:	e0bff917 	ldw	r2,-28(fp)
 200a624:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a628:	e0bffb17 	ldw	r2,-20(fp)
 200a62c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200a630:	e0fff517 	ldw	r3,-44(fp)
 200a634:	e0bffd17 	ldw	r2,-12(fp)
 200a638:	18800426 	beq	r3,r2,200a64c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 200a63c:	e0fff517 	ldw	r3,-44(fp)
 200a640:	e0bffd17 	ldw	r2,-12(fp)
 200a644:	1885c83a 	sub	r2,r3,r2
 200a648:	00000606 	br	200a664 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 200a64c:	e0bfff17 	ldw	r2,-4(fp)
 200a650:	1090000c 	andi	r2,r2,16384
 200a654:	10000226 	beq	r2,zero,200a660 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 200a658:	00bffd44 	movi	r2,-11
 200a65c:	00000106 	br	200a664 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 200a660:	00bffec4 	movi	r2,-5
}
 200a664:	e037883a 	mov	sp,fp
 200a668:	dfc00117 	ldw	ra,4(sp)
 200a66c:	df000017 	ldw	fp,0(sp)
 200a670:	dec00204 	addi	sp,sp,8
 200a674:	f800283a 	ret

0200a678 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200a678:	defff304 	addi	sp,sp,-52
 200a67c:	dfc00c15 	stw	ra,48(sp)
 200a680:	df000b15 	stw	fp,44(sp)
 200a684:	df000b04 	addi	fp,sp,44
 200a688:	e13ffc15 	stw	r4,-16(fp)
 200a68c:	e17ffd15 	stw	r5,-12(fp)
 200a690:	e1bffe15 	stw	r6,-8(fp)
 200a694:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200a698:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200a69c:	e0bffd17 	ldw	r2,-12(fp)
 200a6a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200a6a4:	00003706 	br	200a784 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200a6a8:	e0bffc17 	ldw	r2,-16(fp)
 200a6ac:	10800c17 	ldw	r2,48(r2)
 200a6b0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 200a6b4:	e0bffc17 	ldw	r2,-16(fp)
 200a6b8:	10800d17 	ldw	r2,52(r2)
 200a6bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 200a6c0:	e0fff817 	ldw	r3,-32(fp)
 200a6c4:	e0bff517 	ldw	r2,-44(fp)
 200a6c8:	1880062e 	bgeu	r3,r2,200a6e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200a6cc:	e0fff517 	ldw	r3,-44(fp)
 200a6d0:	e0bff817 	ldw	r2,-32(fp)
 200a6d4:	1885c83a 	sub	r2,r3,r2
 200a6d8:	10bfffc4 	addi	r2,r2,-1
 200a6dc:	e0bff615 	stw	r2,-40(fp)
 200a6e0:	00000b06 	br	200a710 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200a6e4:	e0bff517 	ldw	r2,-44(fp)
 200a6e8:	10000526 	beq	r2,zero,200a700 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200a6ec:	00c20004 	movi	r3,2048
 200a6f0:	e0bff817 	ldw	r2,-32(fp)
 200a6f4:	1885c83a 	sub	r2,r3,r2
 200a6f8:	e0bff615 	stw	r2,-40(fp)
 200a6fc:	00000406 	br	200a710 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200a700:	00c1ffc4 	movi	r3,2047
 200a704:	e0bff817 	ldw	r2,-32(fp)
 200a708:	1885c83a 	sub	r2,r3,r2
 200a70c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200a710:	e0bff617 	ldw	r2,-40(fp)
 200a714:	10001e26 	beq	r2,zero,200a790 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200a718:	e0fffe17 	ldw	r3,-8(fp)
 200a71c:	e0bff617 	ldw	r2,-40(fp)
 200a720:	1880022e 	bgeu	r3,r2,200a72c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200a724:	e0bffe17 	ldw	r2,-8(fp)
 200a728:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200a72c:	e0bff817 	ldw	r2,-32(fp)
 200a730:	10820e04 	addi	r2,r2,2104
 200a734:	e0fffc17 	ldw	r3,-16(fp)
 200a738:	1885883a 	add	r2,r3,r2
 200a73c:	1009883a 	mov	r4,r2
 200a740:	e17ffd17 	ldw	r5,-12(fp)
 200a744:	e1bff617 	ldw	r6,-40(fp)
 200a748:	20056240 	call	2005624 <memcpy>
      ptr   += n;
 200a74c:	e0fffd17 	ldw	r3,-12(fp)
 200a750:	e0bff617 	ldw	r2,-40(fp)
 200a754:	1885883a 	add	r2,r3,r2
 200a758:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200a75c:	e0fffe17 	ldw	r3,-8(fp)
 200a760:	e0bff617 	ldw	r2,-40(fp)
 200a764:	1885c83a 	sub	r2,r3,r2
 200a768:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200a76c:	e0fff817 	ldw	r3,-32(fp)
 200a770:	e0bff617 	ldw	r2,-40(fp)
 200a774:	1885883a 	add	r2,r3,r2
 200a778:	10c1ffcc 	andi	r3,r2,2047
 200a77c:	e0bffc17 	ldw	r2,-16(fp)
 200a780:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200a784:	e0bffe17 	ldw	r2,-8(fp)
 200a788:	00bfc716 	blt	zero,r2,200a6a8 <altera_avalon_jtag_uart_write+0x30>
 200a78c:	00000106 	br	200a794 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200a790:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a794:	0005303a 	rdctl	r2,status
 200a798:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a79c:	e0fffa17 	ldw	r3,-24(fp)
 200a7a0:	00bfff84 	movi	r2,-2
 200a7a4:	1884703a 	and	r2,r3,r2
 200a7a8:	1001703a 	wrctl	status,r2
  
  return context;
 200a7ac:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200a7b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200a7b4:	e0bffc17 	ldw	r2,-16(fp)
 200a7b8:	10800817 	ldw	r2,32(r2)
 200a7bc:	10c00094 	ori	r3,r2,2
 200a7c0:	e0bffc17 	ldw	r2,-16(fp)
 200a7c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200a7c8:	e0bffc17 	ldw	r2,-16(fp)
 200a7cc:	10800017 	ldw	r2,0(r2)
 200a7d0:	10800104 	addi	r2,r2,4
 200a7d4:	e0fffc17 	ldw	r3,-16(fp)
 200a7d8:	18c00817 	ldw	r3,32(r3)
 200a7dc:	10c00035 	stwio	r3,0(r2)
 200a7e0:	e0bff917 	ldw	r2,-28(fp)
 200a7e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a7e8:	e0bffb17 	ldw	r2,-20(fp)
 200a7ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200a7f0:	e0bffe17 	ldw	r2,-8(fp)
 200a7f4:	0080110e 	bge	zero,r2,200a83c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200a7f8:	e0bfff17 	ldw	r2,-4(fp)
 200a7fc:	1090000c 	andi	r2,r2,16384
 200a800:	1000111e 	bne	r2,zero,200a848 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200a804:	0001883a 	nop
 200a808:	e0bffc17 	ldw	r2,-16(fp)
 200a80c:	10c00d17 	ldw	r3,52(r2)
 200a810:	e0bff517 	ldw	r2,-44(fp)
 200a814:	1880051e 	bne	r3,r2,200a82c <altera_avalon_jtag_uart_write+0x1b4>
 200a818:	e0bffc17 	ldw	r2,-16(fp)
 200a81c:	10c00917 	ldw	r3,36(r2)
 200a820:	e0bffc17 	ldw	r2,-16(fp)
 200a824:	10800117 	ldw	r2,4(r2)
 200a828:	18bff736 	bltu	r3,r2,200a808 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 200a82c:	e0bffc17 	ldw	r2,-16(fp)
 200a830:	10c00d17 	ldw	r3,52(r2)
 200a834:	e0bff517 	ldw	r2,-44(fp)
 200a838:	18800526 	beq	r3,r2,200a850 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200a83c:	e0bffe17 	ldw	r2,-8(fp)
 200a840:	00bfd016 	blt	zero,r2,200a784 <altera_avalon_jtag_uart_write+0x10c>
 200a844:	00000306 	br	200a854 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200a848:	0001883a 	nop
 200a84c:	00000106 	br	200a854 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 200a850:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200a854:	e0fffd17 	ldw	r3,-12(fp)
 200a858:	e0bff717 	ldw	r2,-36(fp)
 200a85c:	18800426 	beq	r3,r2,200a870 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 200a860:	e0fffd17 	ldw	r3,-12(fp)
 200a864:	e0bff717 	ldw	r2,-36(fp)
 200a868:	1885c83a 	sub	r2,r3,r2
 200a86c:	00000606 	br	200a888 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 200a870:	e0bfff17 	ldw	r2,-4(fp)
 200a874:	1090000c 	andi	r2,r2,16384
 200a878:	10000226 	beq	r2,zero,200a884 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200a87c:	00bffd44 	movi	r2,-11
 200a880:	00000106 	br	200a888 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200a884:	00bffec4 	movi	r2,-5
}
 200a888:	e037883a 	mov	sp,fp
 200a88c:	dfc00117 	ldw	ra,4(sp)
 200a890:	df000017 	ldw	fp,0(sp)
 200a894:	dec00204 	addi	sp,sp,8
 200a898:	f800283a 	ret

0200a89c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200a89c:	defff504 	addi	sp,sp,-44
 200a8a0:	df000a15 	stw	fp,40(sp)
 200a8a4:	df000a04 	addi	fp,sp,40
 200a8a8:	e13ffc15 	stw	r4,-16(fp)
 200a8ac:	e17ffd15 	stw	r5,-12(fp)
 200a8b0:	e1bffe15 	stw	r6,-8(fp)
 200a8b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200a8b8:	e03ff615 	stw	zero,-40(fp)
 200a8bc:	00808074 	movhi	r2,513
 200a8c0:	10b5e104 	addi	r2,r2,-10364
 200a8c4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200a8c8:	10003f26 	beq	r2,zero,200a9c8 <alt_alarm_start+0x12c>
  {
    if (alarm)
 200a8cc:	e0bffc17 	ldw	r2,-16(fp)
 200a8d0:	10003b26 	beq	r2,zero,200a9c0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 200a8d4:	e0bffc17 	ldw	r2,-16(fp)
 200a8d8:	e0fffe17 	ldw	r3,-8(fp)
 200a8dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 200a8e0:	e0bffc17 	ldw	r2,-16(fp)
 200a8e4:	e0ffff17 	ldw	r3,-4(fp)
 200a8e8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200a8ec:	0005303a 	rdctl	r2,status
 200a8f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200a8f4:	e0fff817 	ldw	r3,-32(fp)
 200a8f8:	00bfff84 	movi	r2,-2
 200a8fc:	1884703a 	and	r2,r3,r2
 200a900:	1001703a 	wrctl	status,r2
  
  return context;
 200a904:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200a908:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200a90c:	00808074 	movhi	r2,513
 200a910:	10b5e204 	addi	r2,r2,-10360
 200a914:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200a918:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200a91c:	e0fffd17 	ldw	r3,-12(fp)
 200a920:	e0bff617 	ldw	r2,-40(fp)
 200a924:	1885883a 	add	r2,r3,r2
 200a928:	10c00044 	addi	r3,r2,1
 200a92c:	e0bffc17 	ldw	r2,-16(fp)
 200a930:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200a934:	e0bffc17 	ldw	r2,-16(fp)
 200a938:	10c00217 	ldw	r3,8(r2)
 200a93c:	e0bff617 	ldw	r2,-40(fp)
 200a940:	1880042e 	bgeu	r3,r2,200a954 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 200a944:	e0bffc17 	ldw	r2,-16(fp)
 200a948:	00c00044 	movi	r3,1
 200a94c:	10c00405 	stb	r3,16(r2)
 200a950:	00000206 	br	200a95c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 200a954:	e0bffc17 	ldw	r2,-16(fp)
 200a958:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200a95c:	e0bffc17 	ldw	r2,-16(fp)
 200a960:	00c08074 	movhi	r3,513
 200a964:	18f5d404 	addi	r3,r3,-10416
 200a968:	e0fff915 	stw	r3,-28(fp)
 200a96c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200a970:	e0bffa17 	ldw	r2,-24(fp)
 200a974:	e0fff917 	ldw	r3,-28(fp)
 200a978:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200a97c:	e0bff917 	ldw	r2,-28(fp)
 200a980:	10c00017 	ldw	r3,0(r2)
 200a984:	e0bffa17 	ldw	r2,-24(fp)
 200a988:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200a98c:	e0bff917 	ldw	r2,-28(fp)
 200a990:	10800017 	ldw	r2,0(r2)
 200a994:	e0fffa17 	ldw	r3,-24(fp)
 200a998:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200a99c:	e0bff917 	ldw	r2,-28(fp)
 200a9a0:	e0fffa17 	ldw	r3,-24(fp)
 200a9a4:	10c00015 	stw	r3,0(r2)
 200a9a8:	e0bff717 	ldw	r2,-36(fp)
 200a9ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200a9b0:	e0bffb17 	ldw	r2,-20(fp)
 200a9b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200a9b8:	0005883a 	mov	r2,zero
 200a9bc:	00000306 	br	200a9cc <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 200a9c0:	00bffa84 	movi	r2,-22
 200a9c4:	00000106 	br	200a9cc <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 200a9c8:	00bfde84 	movi	r2,-134
  }
}
 200a9cc:	e037883a 	mov	sp,fp
 200a9d0:	df000017 	ldw	fp,0(sp)
 200a9d4:	dec00104 	addi	sp,sp,4
 200a9d8:	f800283a 	ret

0200a9dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200a9dc:	defffe04 	addi	sp,sp,-8
 200a9e0:	dfc00115 	stw	ra,4(sp)
 200a9e4:	df000015 	stw	fp,0(sp)
 200a9e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200a9ec:	00808074 	movhi	r2,513
 200a9f0:	10b5d104 	addi	r2,r2,-10428
 200a9f4:	10800017 	ldw	r2,0(r2)
 200a9f8:	10000526 	beq	r2,zero,200aa10 <alt_get_errno+0x34>
 200a9fc:	00808074 	movhi	r2,513
 200aa00:	10b5d104 	addi	r2,r2,-10428
 200aa04:	10800017 	ldw	r2,0(r2)
 200aa08:	103ee83a 	callr	r2
 200aa0c:	00000206 	br	200aa18 <alt_get_errno+0x3c>
 200aa10:	00808074 	movhi	r2,513
 200aa14:	10b5dc04 	addi	r2,r2,-10384
}
 200aa18:	e037883a 	mov	sp,fp
 200aa1c:	dfc00117 	ldw	ra,4(sp)
 200aa20:	df000017 	ldw	fp,0(sp)
 200aa24:	dec00204 	addi	sp,sp,8
 200aa28:	f800283a 	ret

0200aa2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200aa2c:	defffa04 	addi	sp,sp,-24
 200aa30:	dfc00515 	stw	ra,20(sp)
 200aa34:	df000415 	stw	fp,16(sp)
 200aa38:	df000404 	addi	fp,sp,16
 200aa3c:	e13ffe15 	stw	r4,-8(fp)
 200aa40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200aa44:	e0bffe17 	ldw	r2,-8(fp)
 200aa48:	10000326 	beq	r2,zero,200aa58 <alt_dev_llist_insert+0x2c>
 200aa4c:	e0bffe17 	ldw	r2,-8(fp)
 200aa50:	10800217 	ldw	r2,8(r2)
 200aa54:	1000051e 	bne	r2,zero,200aa6c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 200aa58:	200a9dc0 	call	200a9dc <alt_get_errno>
 200aa5c:	00c00584 	movi	r3,22
 200aa60:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 200aa64:	00bffa84 	movi	r2,-22
 200aa68:	00001306 	br	200aab8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200aa6c:	e0bffe17 	ldw	r2,-8(fp)
 200aa70:	e0ffff17 	ldw	r3,-4(fp)
 200aa74:	e0fffc15 	stw	r3,-16(fp)
 200aa78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200aa7c:	e0bffd17 	ldw	r2,-12(fp)
 200aa80:	e0fffc17 	ldw	r3,-16(fp)
 200aa84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200aa88:	e0bffc17 	ldw	r2,-16(fp)
 200aa8c:	10c00017 	ldw	r3,0(r2)
 200aa90:	e0bffd17 	ldw	r2,-12(fp)
 200aa94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200aa98:	e0bffc17 	ldw	r2,-16(fp)
 200aa9c:	10800017 	ldw	r2,0(r2)
 200aaa0:	e0fffd17 	ldw	r3,-12(fp)
 200aaa4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200aaa8:	e0bffc17 	ldw	r2,-16(fp)
 200aaac:	e0fffd17 	ldw	r3,-12(fp)
 200aab0:	10c00015 	stw	r3,0(r2)

  return 0;  
 200aab4:	0005883a 	mov	r2,zero
}
 200aab8:	e037883a 	mov	sp,fp
 200aabc:	dfc00117 	ldw	ra,4(sp)
 200aac0:	df000017 	ldw	fp,0(sp)
 200aac4:	dec00204 	addi	sp,sp,8
 200aac8:	f800283a 	ret

0200aacc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200aacc:	defffd04 	addi	sp,sp,-12
 200aad0:	dfc00215 	stw	ra,8(sp)
 200aad4:	df000115 	stw	fp,4(sp)
 200aad8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200aadc:	00808074 	movhi	r2,513
 200aae0:	10ae7604 	addi	r2,r2,-17960
 200aae4:	e0bfff15 	stw	r2,-4(fp)
 200aae8:	00000606 	br	200ab04 <_do_ctors+0x38>
        (*ctor) (); 
 200aaec:	e0bfff17 	ldw	r2,-4(fp)
 200aaf0:	10800017 	ldw	r2,0(r2)
 200aaf4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200aaf8:	e0bfff17 	ldw	r2,-4(fp)
 200aafc:	10bfff04 	addi	r2,r2,-4
 200ab00:	e0bfff15 	stw	r2,-4(fp)
 200ab04:	e0ffff17 	ldw	r3,-4(fp)
 200ab08:	00808074 	movhi	r2,513
 200ab0c:	10ae7704 	addi	r2,r2,-17956
 200ab10:	18bff62e 	bgeu	r3,r2,200aaec <_do_ctors+0x20>
        (*ctor) (); 
}
 200ab14:	e037883a 	mov	sp,fp
 200ab18:	dfc00117 	ldw	ra,4(sp)
 200ab1c:	df000017 	ldw	fp,0(sp)
 200ab20:	dec00204 	addi	sp,sp,8
 200ab24:	f800283a 	ret

0200ab28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200ab28:	defffd04 	addi	sp,sp,-12
 200ab2c:	dfc00215 	stw	ra,8(sp)
 200ab30:	df000115 	stw	fp,4(sp)
 200ab34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200ab38:	00808074 	movhi	r2,513
 200ab3c:	10ae7604 	addi	r2,r2,-17960
 200ab40:	e0bfff15 	stw	r2,-4(fp)
 200ab44:	00000606 	br	200ab60 <_do_dtors+0x38>
        (*dtor) (); 
 200ab48:	e0bfff17 	ldw	r2,-4(fp)
 200ab4c:	10800017 	ldw	r2,0(r2)
 200ab50:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200ab54:	e0bfff17 	ldw	r2,-4(fp)
 200ab58:	10bfff04 	addi	r2,r2,-4
 200ab5c:	e0bfff15 	stw	r2,-4(fp)
 200ab60:	e0ffff17 	ldw	r3,-4(fp)
 200ab64:	00808074 	movhi	r2,513
 200ab68:	10ae7704 	addi	r2,r2,-17956
 200ab6c:	18bff62e 	bgeu	r3,r2,200ab48 <_do_dtors+0x20>
        (*dtor) (); 
}
 200ab70:	e037883a 	mov	sp,fp
 200ab74:	dfc00117 	ldw	ra,4(sp)
 200ab78:	df000017 	ldw	fp,0(sp)
 200ab7c:	dec00204 	addi	sp,sp,8
 200ab80:	f800283a 	ret

0200ab84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200ab84:	defff904 	addi	sp,sp,-28
 200ab88:	dfc00615 	stw	ra,24(sp)
 200ab8c:	df000515 	stw	fp,20(sp)
 200ab90:	df000504 	addi	fp,sp,20
 200ab94:	e13ffc15 	stw	r4,-16(fp)
 200ab98:	e17ffd15 	stw	r5,-12(fp)
 200ab9c:	e1bffe15 	stw	r6,-8(fp)
 200aba0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200aba4:	e0800217 	ldw	r2,8(fp)
 200aba8:	d8800015 	stw	r2,0(sp)
 200abac:	e13ffc17 	ldw	r4,-16(fp)
 200abb0:	e17ffd17 	ldw	r5,-12(fp)
 200abb4:	e1bffe17 	ldw	r6,-8(fp)
 200abb8:	e1ffff17 	ldw	r7,-4(fp)
 200abbc:	200ad5c0 	call	200ad5c <alt_iic_isr_register>
}  
 200abc0:	e037883a 	mov	sp,fp
 200abc4:	dfc00117 	ldw	ra,4(sp)
 200abc8:	df000017 	ldw	fp,0(sp)
 200abcc:	dec00204 	addi	sp,sp,8
 200abd0:	f800283a 	ret

0200abd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 200abd4:	defff904 	addi	sp,sp,-28
 200abd8:	df000615 	stw	fp,24(sp)
 200abdc:	df000604 	addi	fp,sp,24
 200abe0:	e13ffe15 	stw	r4,-8(fp)
 200abe4:	e17fff15 	stw	r5,-4(fp)
 200abe8:	e0bfff17 	ldw	r2,-4(fp)
 200abec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200abf0:	0005303a 	rdctl	r2,status
 200abf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200abf8:	e0fffb17 	ldw	r3,-20(fp)
 200abfc:	00bfff84 	movi	r2,-2
 200ac00:	1884703a 	and	r2,r3,r2
 200ac04:	1001703a 	wrctl	status,r2
  
  return context;
 200ac08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200ac0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 200ac10:	e0bffa17 	ldw	r2,-24(fp)
 200ac14:	00c00044 	movi	r3,1
 200ac18:	1884983a 	sll	r2,r3,r2
 200ac1c:	1007883a 	mov	r3,r2
 200ac20:	00808074 	movhi	r2,513
 200ac24:	10b5e004 	addi	r2,r2,-10368
 200ac28:	10800017 	ldw	r2,0(r2)
 200ac2c:	1886b03a 	or	r3,r3,r2
 200ac30:	00808074 	movhi	r2,513
 200ac34:	10b5e004 	addi	r2,r2,-10368
 200ac38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200ac3c:	00808074 	movhi	r2,513
 200ac40:	10b5e004 	addi	r2,r2,-10368
 200ac44:	10800017 	ldw	r2,0(r2)
 200ac48:	100170fa 	wrctl	ienable,r2
 200ac4c:	e0bffc17 	ldw	r2,-16(fp)
 200ac50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ac54:	e0bffd17 	ldw	r2,-12(fp)
 200ac58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200ac5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 200ac60:	e037883a 	mov	sp,fp
 200ac64:	df000017 	ldw	fp,0(sp)
 200ac68:	dec00104 	addi	sp,sp,4
 200ac6c:	f800283a 	ret

0200ac70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 200ac70:	defff904 	addi	sp,sp,-28
 200ac74:	df000615 	stw	fp,24(sp)
 200ac78:	df000604 	addi	fp,sp,24
 200ac7c:	e13ffe15 	stw	r4,-8(fp)
 200ac80:	e17fff15 	stw	r5,-4(fp)
 200ac84:	e0bfff17 	ldw	r2,-4(fp)
 200ac88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ac8c:	0005303a 	rdctl	r2,status
 200ac90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ac94:	e0fffb17 	ldw	r3,-20(fp)
 200ac98:	00bfff84 	movi	r2,-2
 200ac9c:	1884703a 	and	r2,r3,r2
 200aca0:	1001703a 	wrctl	status,r2
  
  return context;
 200aca4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200aca8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 200acac:	e0bffa17 	ldw	r2,-24(fp)
 200acb0:	00c00044 	movi	r3,1
 200acb4:	1884983a 	sll	r2,r3,r2
 200acb8:	0084303a 	nor	r2,zero,r2
 200acbc:	1007883a 	mov	r3,r2
 200acc0:	00808074 	movhi	r2,513
 200acc4:	10b5e004 	addi	r2,r2,-10368
 200acc8:	10800017 	ldw	r2,0(r2)
 200accc:	1886703a 	and	r3,r3,r2
 200acd0:	00808074 	movhi	r2,513
 200acd4:	10b5e004 	addi	r2,r2,-10368
 200acd8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200acdc:	00808074 	movhi	r2,513
 200ace0:	10b5e004 	addi	r2,r2,-10368
 200ace4:	10800017 	ldw	r2,0(r2)
 200ace8:	100170fa 	wrctl	ienable,r2
 200acec:	e0bffc17 	ldw	r2,-16(fp)
 200acf0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200acf4:	e0bffd17 	ldw	r2,-12(fp)
 200acf8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200acfc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 200ad00:	e037883a 	mov	sp,fp
 200ad04:	df000017 	ldw	fp,0(sp)
 200ad08:	dec00104 	addi	sp,sp,4
 200ad0c:	f800283a 	ret

0200ad10 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 200ad10:	defffc04 	addi	sp,sp,-16
 200ad14:	df000315 	stw	fp,12(sp)
 200ad18:	df000304 	addi	fp,sp,12
 200ad1c:	e13ffe15 	stw	r4,-8(fp)
 200ad20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 200ad24:	000530fa 	rdctl	r2,ienable
 200ad28:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200ad2c:	e0bfff17 	ldw	r2,-4(fp)
 200ad30:	00c00044 	movi	r3,1
 200ad34:	1884983a 	sll	r2,r3,r2
 200ad38:	1007883a 	mov	r3,r2
 200ad3c:	e0bffd17 	ldw	r2,-12(fp)
 200ad40:	1884703a 	and	r2,r3,r2
 200ad44:	1004c03a 	cmpne	r2,r2,zero
 200ad48:	10803fcc 	andi	r2,r2,255
}
 200ad4c:	e037883a 	mov	sp,fp
 200ad50:	df000017 	ldw	fp,0(sp)
 200ad54:	dec00104 	addi	sp,sp,4
 200ad58:	f800283a 	ret

0200ad5c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200ad5c:	defff504 	addi	sp,sp,-44
 200ad60:	dfc00a15 	stw	ra,40(sp)
 200ad64:	df000915 	stw	fp,36(sp)
 200ad68:	df000904 	addi	fp,sp,36
 200ad6c:	e13ffc15 	stw	r4,-16(fp)
 200ad70:	e17ffd15 	stw	r5,-12(fp)
 200ad74:	e1bffe15 	stw	r6,-8(fp)
 200ad78:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 200ad7c:	00bffa84 	movi	r2,-22
 200ad80:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 200ad84:	e0bffd17 	ldw	r2,-12(fp)
 200ad88:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200ad8c:	e0bff817 	ldw	r2,-32(fp)
 200ad90:	10800808 	cmpgei	r2,r2,32
 200ad94:	1000271e 	bne	r2,zero,200ae34 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ad98:	0005303a 	rdctl	r2,status
 200ad9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ada0:	e0fffa17 	ldw	r3,-24(fp)
 200ada4:	00bfff84 	movi	r2,-2
 200ada8:	1884703a 	and	r2,r3,r2
 200adac:	1001703a 	wrctl	status,r2
  
  return context;
 200adb0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 200adb4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 200adb8:	00c08074 	movhi	r3,513
 200adbc:	18f5ed04 	addi	r3,r3,-10316
 200adc0:	e0bff817 	ldw	r2,-32(fp)
 200adc4:	100490fa 	slli	r2,r2,3
 200adc8:	1885883a 	add	r2,r3,r2
 200adcc:	e0fffe17 	ldw	r3,-8(fp)
 200add0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 200add4:	00c08074 	movhi	r3,513
 200add8:	18f5ed04 	addi	r3,r3,-10316
 200addc:	e0bff817 	ldw	r2,-32(fp)
 200ade0:	100490fa 	slli	r2,r2,3
 200ade4:	1885883a 	add	r2,r3,r2
 200ade8:	10800104 	addi	r2,r2,4
 200adec:	e0ffff17 	ldw	r3,-4(fp)
 200adf0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 200adf4:	e0bffe17 	ldw	r2,-8(fp)
 200adf8:	10000526 	beq	r2,zero,200ae10 <alt_iic_isr_register+0xb4>
 200adfc:	e0bff817 	ldw	r2,-32(fp)
 200ae00:	e13ffc17 	ldw	r4,-16(fp)
 200ae04:	100b883a 	mov	r5,r2
 200ae08:	200abd40 	call	200abd4 <alt_ic_irq_enable>
 200ae0c:	00000406 	br	200ae20 <alt_iic_isr_register+0xc4>
 200ae10:	e0bff817 	ldw	r2,-32(fp)
 200ae14:	e13ffc17 	ldw	r4,-16(fp)
 200ae18:	100b883a 	mov	r5,r2
 200ae1c:	200ac700 	call	200ac70 <alt_ic_irq_disable>
 200ae20:	e0bff715 	stw	r2,-36(fp)
 200ae24:	e0bff917 	ldw	r2,-28(fp)
 200ae28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ae2c:	e0bffb17 	ldw	r2,-20(fp)
 200ae30:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 200ae34:	e0bff717 	ldw	r2,-36(fp)
}
 200ae38:	e037883a 	mov	sp,fp
 200ae3c:	dfc00117 	ldw	ra,4(sp)
 200ae40:	df000017 	ldw	fp,0(sp)
 200ae44:	dec00204 	addi	sp,sp,8
 200ae48:	f800283a 	ret

0200ae4c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200ae4c:	defff904 	addi	sp,sp,-28
 200ae50:	dfc00615 	stw	ra,24(sp)
 200ae54:	df000515 	stw	fp,20(sp)
 200ae58:	df000504 	addi	fp,sp,20
 200ae5c:	e13ffc15 	stw	r4,-16(fp)
 200ae60:	e17ffd15 	stw	r5,-12(fp)
 200ae64:	e1bffe15 	stw	r6,-8(fp)
 200ae68:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 200ae6c:	e13ffd17 	ldw	r4,-12(fp)
 200ae70:	e17ffe17 	ldw	r5,-8(fp)
 200ae74:	e1bfff17 	ldw	r6,-4(fp)
 200ae78:	200b0a00 	call	200b0a0 <open>
 200ae7c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 200ae80:	e0bffb17 	ldw	r2,-20(fp)
 200ae84:	10001c16 	blt	r2,zero,200aef8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 200ae88:	00c08074 	movhi	r3,513
 200ae8c:	18f14e04 	addi	r3,r3,-15048
 200ae90:	e0bffb17 	ldw	r2,-20(fp)
 200ae94:	10800324 	muli	r2,r2,12
 200ae98:	1885883a 	add	r2,r3,r2
 200ae9c:	10c00017 	ldw	r3,0(r2)
 200aea0:	e0bffc17 	ldw	r2,-16(fp)
 200aea4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 200aea8:	00c08074 	movhi	r3,513
 200aeac:	18f14e04 	addi	r3,r3,-15048
 200aeb0:	e0bffb17 	ldw	r2,-20(fp)
 200aeb4:	10800324 	muli	r2,r2,12
 200aeb8:	1885883a 	add	r2,r3,r2
 200aebc:	10800104 	addi	r2,r2,4
 200aec0:	10c00017 	ldw	r3,0(r2)
 200aec4:	e0bffc17 	ldw	r2,-16(fp)
 200aec8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200aecc:	00c08074 	movhi	r3,513
 200aed0:	18f14e04 	addi	r3,r3,-15048
 200aed4:	e0bffb17 	ldw	r2,-20(fp)
 200aed8:	10800324 	muli	r2,r2,12
 200aedc:	1885883a 	add	r2,r3,r2
 200aee0:	10800204 	addi	r2,r2,8
 200aee4:	10c00017 	ldw	r3,0(r2)
 200aee8:	e0bffc17 	ldw	r2,-16(fp)
 200aeec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200aef0:	e13ffb17 	ldw	r4,-20(fp)
 200aef4:	2009b380 	call	2009b38 <alt_release_fd>
  }
} 
 200aef8:	e037883a 	mov	sp,fp
 200aefc:	dfc00117 	ldw	ra,4(sp)
 200af00:	df000017 	ldw	fp,0(sp)
 200af04:	dec00204 	addi	sp,sp,8
 200af08:	f800283a 	ret

0200af0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 200af0c:	defffb04 	addi	sp,sp,-20
 200af10:	dfc00415 	stw	ra,16(sp)
 200af14:	df000315 	stw	fp,12(sp)
 200af18:	df000304 	addi	fp,sp,12
 200af1c:	e13ffd15 	stw	r4,-12(fp)
 200af20:	e17ffe15 	stw	r5,-8(fp)
 200af24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200af28:	01008074 	movhi	r4,513
 200af2c:	21315104 	addi	r4,r4,-15036
 200af30:	e17ffd17 	ldw	r5,-12(fp)
 200af34:	01800044 	movi	r6,1
 200af38:	01c07fc4 	movi	r7,511
 200af3c:	200ae4c0 	call	200ae4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 200af40:	01008074 	movhi	r4,513
 200af44:	21314e04 	addi	r4,r4,-15048
 200af48:	e17ffe17 	ldw	r5,-8(fp)
 200af4c:	000d883a 	mov	r6,zero
 200af50:	01c07fc4 	movi	r7,511
 200af54:	200ae4c0 	call	200ae4c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200af58:	01008074 	movhi	r4,513
 200af5c:	21315404 	addi	r4,r4,-15024
 200af60:	e17fff17 	ldw	r5,-4(fp)
 200af64:	01800044 	movi	r6,1
 200af68:	01c07fc4 	movi	r7,511
 200af6c:	200ae4c0 	call	200ae4c <alt_open_fd>
}  
 200af70:	e037883a 	mov	sp,fp
 200af74:	dfc00117 	ldw	ra,4(sp)
 200af78:	df000017 	ldw	fp,0(sp)
 200af7c:	dec00204 	addi	sp,sp,8
 200af80:	f800283a 	ret

0200af84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200af84:	defffe04 	addi	sp,sp,-8
 200af88:	dfc00115 	stw	ra,4(sp)
 200af8c:	df000015 	stw	fp,0(sp)
 200af90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200af94:	00808074 	movhi	r2,513
 200af98:	10b5d104 	addi	r2,r2,-10428
 200af9c:	10800017 	ldw	r2,0(r2)
 200afa0:	10000526 	beq	r2,zero,200afb8 <alt_get_errno+0x34>
 200afa4:	00808074 	movhi	r2,513
 200afa8:	10b5d104 	addi	r2,r2,-10428
 200afac:	10800017 	ldw	r2,0(r2)
 200afb0:	103ee83a 	callr	r2
 200afb4:	00000206 	br	200afc0 <alt_get_errno+0x3c>
 200afb8:	00808074 	movhi	r2,513
 200afbc:	10b5dc04 	addi	r2,r2,-10384
}
 200afc0:	e037883a 	mov	sp,fp
 200afc4:	dfc00117 	ldw	ra,4(sp)
 200afc8:	df000017 	ldw	fp,0(sp)
 200afcc:	dec00204 	addi	sp,sp,8
 200afd0:	f800283a 	ret

0200afd4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200afd4:	defffd04 	addi	sp,sp,-12
 200afd8:	df000215 	stw	fp,8(sp)
 200afdc:	df000204 	addi	fp,sp,8
 200afe0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200afe4:	e0bfff17 	ldw	r2,-4(fp)
 200afe8:	10800217 	ldw	r2,8(r2)
 200afec:	10d00034 	orhi	r3,r2,16384
 200aff0:	e0bfff17 	ldw	r2,-4(fp)
 200aff4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200aff8:	e03ffe15 	stw	zero,-8(fp)
 200affc:	00001d06 	br	200b074 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200b000:	00c08074 	movhi	r3,513
 200b004:	18f14e04 	addi	r3,r3,-15048
 200b008:	e0bffe17 	ldw	r2,-8(fp)
 200b00c:	10800324 	muli	r2,r2,12
 200b010:	1885883a 	add	r2,r3,r2
 200b014:	10c00017 	ldw	r3,0(r2)
 200b018:	e0bfff17 	ldw	r2,-4(fp)
 200b01c:	10800017 	ldw	r2,0(r2)
 200b020:	1880111e 	bne	r3,r2,200b068 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200b024:	00c08074 	movhi	r3,513
 200b028:	18f14e04 	addi	r3,r3,-15048
 200b02c:	e0bffe17 	ldw	r2,-8(fp)
 200b030:	10800324 	muli	r2,r2,12
 200b034:	1885883a 	add	r2,r3,r2
 200b038:	10800204 	addi	r2,r2,8
 200b03c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200b040:	1000090e 	bge	r2,zero,200b068 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200b044:	e0bffe17 	ldw	r2,-8(fp)
 200b048:	10c00324 	muli	r3,r2,12
 200b04c:	00808074 	movhi	r2,513
 200b050:	10b14e04 	addi	r2,r2,-15048
 200b054:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200b058:	e0bfff17 	ldw	r2,-4(fp)
 200b05c:	18800226 	beq	r3,r2,200b068 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200b060:	00bffcc4 	movi	r2,-13
 200b064:	00000a06 	br	200b090 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200b068:	e0bffe17 	ldw	r2,-8(fp)
 200b06c:	10800044 	addi	r2,r2,1
 200b070:	e0bffe15 	stw	r2,-8(fp)
 200b074:	00808074 	movhi	r2,513
 200b078:	10b5d004 	addi	r2,r2,-10432
 200b07c:	10800017 	ldw	r2,0(r2)
 200b080:	1007883a 	mov	r3,r2
 200b084:	e0bffe17 	ldw	r2,-8(fp)
 200b088:	18bfdd2e 	bgeu	r3,r2,200b000 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200b08c:	0005883a 	mov	r2,zero
}
 200b090:	e037883a 	mov	sp,fp
 200b094:	df000017 	ldw	fp,0(sp)
 200b098:	dec00104 	addi	sp,sp,4
 200b09c:	f800283a 	ret

0200b0a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200b0a0:	defff604 	addi	sp,sp,-40
 200b0a4:	dfc00915 	stw	ra,36(sp)
 200b0a8:	df000815 	stw	fp,32(sp)
 200b0ac:	df000804 	addi	fp,sp,32
 200b0b0:	e13ffd15 	stw	r4,-12(fp)
 200b0b4:	e17ffe15 	stw	r5,-8(fp)
 200b0b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200b0bc:	00bfffc4 	movi	r2,-1
 200b0c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 200b0c4:	00bffb44 	movi	r2,-19
 200b0c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 200b0cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200b0d0:	e13ffd17 	ldw	r4,-12(fp)
 200b0d4:	01408074 	movhi	r5,513
 200b0d8:	2975ce04 	addi	r5,r5,-10440
 200b0dc:	200b3b00 	call	200b3b0 <alt_find_dev>
 200b0e0:	e0bff815 	stw	r2,-32(fp)
 200b0e4:	e0bff817 	ldw	r2,-32(fp)
 200b0e8:	1000051e 	bne	r2,zero,200b100 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200b0ec:	e13ffd17 	ldw	r4,-12(fp)
 200b0f0:	200b4400 	call	200b440 <alt_find_file>
 200b0f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 200b0f8:	00800044 	movi	r2,1
 200b0fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200b100:	e0bff817 	ldw	r2,-32(fp)
 200b104:	10002926 	beq	r2,zero,200b1ac <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200b108:	e13ff817 	ldw	r4,-32(fp)
 200b10c:	200b5540 	call	200b554 <alt_get_fd>
 200b110:	e0bff915 	stw	r2,-28(fp)
 200b114:	e0bff917 	ldw	r2,-28(fp)
 200b118:	1000030e 	bge	r2,zero,200b128 <open+0x88>
    {
      status = index;
 200b11c:	e0bff917 	ldw	r2,-28(fp)
 200b120:	e0bffa15 	stw	r2,-24(fp)
 200b124:	00002306 	br	200b1b4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 200b128:	e0bff917 	ldw	r2,-28(fp)
 200b12c:	10c00324 	muli	r3,r2,12
 200b130:	00808074 	movhi	r2,513
 200b134:	10b14e04 	addi	r2,r2,-15048
 200b138:	1885883a 	add	r2,r3,r2
 200b13c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200b140:	e0fffe17 	ldw	r3,-8(fp)
 200b144:	00900034 	movhi	r2,16384
 200b148:	10bfffc4 	addi	r2,r2,-1
 200b14c:	1886703a 	and	r3,r3,r2
 200b150:	e0bffc17 	ldw	r2,-16(fp)
 200b154:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200b158:	e0bffb17 	ldw	r2,-20(fp)
 200b15c:	1000051e 	bne	r2,zero,200b174 <open+0xd4>
 200b160:	e13ffc17 	ldw	r4,-16(fp)
 200b164:	200afd40 	call	200afd4 <alt_file_locked>
 200b168:	e0bffa15 	stw	r2,-24(fp)
 200b16c:	e0bffa17 	ldw	r2,-24(fp)
 200b170:	10001016 	blt	r2,zero,200b1b4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200b174:	e0bff817 	ldw	r2,-32(fp)
 200b178:	10800317 	ldw	r2,12(r2)
 200b17c:	10000826 	beq	r2,zero,200b1a0 <open+0x100>
 200b180:	e0bff817 	ldw	r2,-32(fp)
 200b184:	10800317 	ldw	r2,12(r2)
 200b188:	e13ffc17 	ldw	r4,-16(fp)
 200b18c:	e17ffd17 	ldw	r5,-12(fp)
 200b190:	e1bffe17 	ldw	r6,-8(fp)
 200b194:	e1ffff17 	ldw	r7,-4(fp)
 200b198:	103ee83a 	callr	r2
 200b19c:	00000106 	br	200b1a4 <open+0x104>
 200b1a0:	0005883a 	mov	r2,zero
 200b1a4:	e0bffa15 	stw	r2,-24(fp)
 200b1a8:	00000206 	br	200b1b4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200b1ac:	00bffb44 	movi	r2,-19
 200b1b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200b1b4:	e0bffa17 	ldw	r2,-24(fp)
 200b1b8:	1000080e 	bge	r2,zero,200b1dc <open+0x13c>
  {
    alt_release_fd (index);  
 200b1bc:	e13ff917 	ldw	r4,-28(fp)
 200b1c0:	2009b380 	call	2009b38 <alt_release_fd>
    ALT_ERRNO = -status;
 200b1c4:	200af840 	call	200af84 <alt_get_errno>
 200b1c8:	e0fffa17 	ldw	r3,-24(fp)
 200b1cc:	00c7c83a 	sub	r3,zero,r3
 200b1d0:	10c00015 	stw	r3,0(r2)
    return -1;
 200b1d4:	00bfffc4 	movi	r2,-1
 200b1d8:	00000106 	br	200b1e0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 200b1dc:	e0bff917 	ldw	r2,-28(fp)
}
 200b1e0:	e037883a 	mov	sp,fp
 200b1e4:	dfc00117 	ldw	ra,4(sp)
 200b1e8:	df000017 	ldw	fp,0(sp)
 200b1ec:	dec00204 	addi	sp,sp,8
 200b1f0:	f800283a 	ret

0200b1f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200b1f4:	defffa04 	addi	sp,sp,-24
 200b1f8:	df000515 	stw	fp,20(sp)
 200b1fc:	df000504 	addi	fp,sp,20
 200b200:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200b204:	0005303a 	rdctl	r2,status
 200b208:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200b20c:	e0fffc17 	ldw	r3,-16(fp)
 200b210:	00bfff84 	movi	r2,-2
 200b214:	1884703a 	and	r2,r3,r2
 200b218:	1001703a 	wrctl	status,r2
  
  return context;
 200b21c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200b220:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 200b224:	e0bfff17 	ldw	r2,-4(fp)
 200b228:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200b22c:	e0bffd17 	ldw	r2,-12(fp)
 200b230:	10800017 	ldw	r2,0(r2)
 200b234:	e0fffd17 	ldw	r3,-12(fp)
 200b238:	18c00117 	ldw	r3,4(r3)
 200b23c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 200b240:	e0bffd17 	ldw	r2,-12(fp)
 200b244:	10800117 	ldw	r2,4(r2)
 200b248:	e0fffd17 	ldw	r3,-12(fp)
 200b24c:	18c00017 	ldw	r3,0(r3)
 200b250:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200b254:	e0bffd17 	ldw	r2,-12(fp)
 200b258:	e0fffd17 	ldw	r3,-12(fp)
 200b25c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 200b260:	e0bffd17 	ldw	r2,-12(fp)
 200b264:	e0fffd17 	ldw	r3,-12(fp)
 200b268:	10c00015 	stw	r3,0(r2)
 200b26c:	e0bffb17 	ldw	r2,-20(fp)
 200b270:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200b274:	e0bffe17 	ldw	r2,-8(fp)
 200b278:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200b27c:	e037883a 	mov	sp,fp
 200b280:	df000017 	ldw	fp,0(sp)
 200b284:	dec00104 	addi	sp,sp,4
 200b288:	f800283a 	ret

0200b28c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200b28c:	defffb04 	addi	sp,sp,-20
 200b290:	dfc00415 	stw	ra,16(sp)
 200b294:	df000315 	stw	fp,12(sp)
 200b298:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200b29c:	d0a00e17 	ldw	r2,-32712(gp)
 200b2a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200b2a4:	d0a01c17 	ldw	r2,-32656(gp)
 200b2a8:	10800044 	addi	r2,r2,1
 200b2ac:	d0a01c15 	stw	r2,-32656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200b2b0:	00002e06 	br	200b36c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 200b2b4:	e0bffd17 	ldw	r2,-12(fp)
 200b2b8:	10800017 	ldw	r2,0(r2)
 200b2bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200b2c0:	e0bffd17 	ldw	r2,-12(fp)
 200b2c4:	10800403 	ldbu	r2,16(r2)
 200b2c8:	10803fcc 	andi	r2,r2,255
 200b2cc:	10000426 	beq	r2,zero,200b2e0 <alt_tick+0x54>
 200b2d0:	d0a01c17 	ldw	r2,-32656(gp)
 200b2d4:	1000021e 	bne	r2,zero,200b2e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 200b2d8:	e0bffd17 	ldw	r2,-12(fp)
 200b2dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200b2e0:	e0bffd17 	ldw	r2,-12(fp)
 200b2e4:	10800217 	ldw	r2,8(r2)
 200b2e8:	d0e01c17 	ldw	r3,-32656(gp)
 200b2ec:	18801d36 	bltu	r3,r2,200b364 <alt_tick+0xd8>
 200b2f0:	e0bffd17 	ldw	r2,-12(fp)
 200b2f4:	10800403 	ldbu	r2,16(r2)
 200b2f8:	10803fcc 	andi	r2,r2,255
 200b2fc:	1000191e 	bne	r2,zero,200b364 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 200b300:	e0bffd17 	ldw	r2,-12(fp)
 200b304:	10c00317 	ldw	r3,12(r2)
 200b308:	e0bffd17 	ldw	r2,-12(fp)
 200b30c:	10800517 	ldw	r2,20(r2)
 200b310:	1009883a 	mov	r4,r2
 200b314:	183ee83a 	callr	r3
 200b318:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200b31c:	e0bfff17 	ldw	r2,-4(fp)
 200b320:	1000031e 	bne	r2,zero,200b330 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 200b324:	e13ffd17 	ldw	r4,-12(fp)
 200b328:	200b1f40 	call	200b1f4 <alt_alarm_stop>
 200b32c:	00000d06 	br	200b364 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 200b330:	e0bffd17 	ldw	r2,-12(fp)
 200b334:	10c00217 	ldw	r3,8(r2)
 200b338:	e0bfff17 	ldw	r2,-4(fp)
 200b33c:	1887883a 	add	r3,r3,r2
 200b340:	e0bffd17 	ldw	r2,-12(fp)
 200b344:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200b348:	e0bffd17 	ldw	r2,-12(fp)
 200b34c:	10c00217 	ldw	r3,8(r2)
 200b350:	d0a01c17 	ldw	r2,-32656(gp)
 200b354:	1880032e 	bgeu	r3,r2,200b364 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 200b358:	e0bffd17 	ldw	r2,-12(fp)
 200b35c:	00c00044 	movi	r3,1
 200b360:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 200b364:	e0bffe17 	ldw	r2,-8(fp)
 200b368:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200b36c:	e0fffd17 	ldw	r3,-12(fp)
 200b370:	d0a00e04 	addi	r2,gp,-32712
 200b374:	18bfcf1e 	bne	r3,r2,200b2b4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200b378:	0001883a 	nop
}
 200b37c:	e037883a 	mov	sp,fp
 200b380:	dfc00117 	ldw	ra,4(sp)
 200b384:	df000017 	ldw	fp,0(sp)
 200b388:	dec00204 	addi	sp,sp,8
 200b38c:	f800283a 	ret

0200b390 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 200b390:	deffff04 	addi	sp,sp,-4
 200b394:	df000015 	stw	fp,0(sp)
 200b398:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 200b39c:	000170fa 	wrctl	ienable,zero
}
 200b3a0:	e037883a 	mov	sp,fp
 200b3a4:	df000017 	ldw	fp,0(sp)
 200b3a8:	dec00104 	addi	sp,sp,4
 200b3ac:	f800283a 	ret

0200b3b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200b3b0:	defffa04 	addi	sp,sp,-24
 200b3b4:	dfc00515 	stw	ra,20(sp)
 200b3b8:	df000415 	stw	fp,16(sp)
 200b3bc:	df000404 	addi	fp,sp,16
 200b3c0:	e13ffe15 	stw	r4,-8(fp)
 200b3c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200b3c8:	e0bfff17 	ldw	r2,-4(fp)
 200b3cc:	10800017 	ldw	r2,0(r2)
 200b3d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200b3d4:	e13ffe17 	ldw	r4,-8(fp)
 200b3d8:	20070940 	call	2007094 <strlen>
 200b3dc:	10800044 	addi	r2,r2,1
 200b3e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200b3e4:	00000d06 	br	200b41c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200b3e8:	e0bffc17 	ldw	r2,-16(fp)
 200b3ec:	10c00217 	ldw	r3,8(r2)
 200b3f0:	e0bffd17 	ldw	r2,-12(fp)
 200b3f4:	1809883a 	mov	r4,r3
 200b3f8:	e17ffe17 	ldw	r5,-8(fp)
 200b3fc:	100d883a 	mov	r6,r2
 200b400:	200b6540 	call	200b654 <memcmp>
 200b404:	1000021e 	bne	r2,zero,200b410 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200b408:	e0bffc17 	ldw	r2,-16(fp)
 200b40c:	00000706 	br	200b42c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200b410:	e0bffc17 	ldw	r2,-16(fp)
 200b414:	10800017 	ldw	r2,0(r2)
 200b418:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200b41c:	e0fffc17 	ldw	r3,-16(fp)
 200b420:	e0bfff17 	ldw	r2,-4(fp)
 200b424:	18bff01e 	bne	r3,r2,200b3e8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200b428:	0005883a 	mov	r2,zero
}
 200b42c:	e037883a 	mov	sp,fp
 200b430:	dfc00117 	ldw	ra,4(sp)
 200b434:	df000017 	ldw	fp,0(sp)
 200b438:	dec00204 	addi	sp,sp,8
 200b43c:	f800283a 	ret

0200b440 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 200b440:	defffb04 	addi	sp,sp,-20
 200b444:	dfc00415 	stw	ra,16(sp)
 200b448:	df000315 	stw	fp,12(sp)
 200b44c:	df000304 	addi	fp,sp,12
 200b450:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200b454:	00808074 	movhi	r2,513
 200b458:	10b5cc04 	addi	r2,r2,-10448
 200b45c:	10800017 	ldw	r2,0(r2)
 200b460:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200b464:	00003106 	br	200b52c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 200b468:	e0bffd17 	ldw	r2,-12(fp)
 200b46c:	10800217 	ldw	r2,8(r2)
 200b470:	1009883a 	mov	r4,r2
 200b474:	20070940 	call	2007094 <strlen>
 200b478:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 200b47c:	e0bffd17 	ldw	r2,-12(fp)
 200b480:	10c00217 	ldw	r3,8(r2)
 200b484:	e0bffe17 	ldw	r2,-8(fp)
 200b488:	10bfffc4 	addi	r2,r2,-1
 200b48c:	1885883a 	add	r2,r3,r2
 200b490:	10800003 	ldbu	r2,0(r2)
 200b494:	10803fcc 	andi	r2,r2,255
 200b498:	1080201c 	xori	r2,r2,128
 200b49c:	10bfe004 	addi	r2,r2,-128
 200b4a0:	10800bd8 	cmpnei	r2,r2,47
 200b4a4:	1000031e 	bne	r2,zero,200b4b4 <alt_find_file+0x74>
    {
      len -= 1;
 200b4a8:	e0bffe17 	ldw	r2,-8(fp)
 200b4ac:	10bfffc4 	addi	r2,r2,-1
 200b4b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200b4b4:	e0bffe17 	ldw	r2,-8(fp)
 200b4b8:	e0ffff17 	ldw	r3,-4(fp)
 200b4bc:	1885883a 	add	r2,r3,r2
 200b4c0:	10800003 	ldbu	r2,0(r2)
 200b4c4:	10803fcc 	andi	r2,r2,255
 200b4c8:	1080201c 	xori	r2,r2,128
 200b4cc:	10bfe004 	addi	r2,r2,-128
 200b4d0:	10800be0 	cmpeqi	r2,r2,47
 200b4d4:	1000081e 	bne	r2,zero,200b4f8 <alt_find_file+0xb8>
 200b4d8:	e0bffe17 	ldw	r2,-8(fp)
 200b4dc:	e0ffff17 	ldw	r3,-4(fp)
 200b4e0:	1885883a 	add	r2,r3,r2
 200b4e4:	10800003 	ldbu	r2,0(r2)
 200b4e8:	10803fcc 	andi	r2,r2,255
 200b4ec:	1080201c 	xori	r2,r2,128
 200b4f0:	10bfe004 	addi	r2,r2,-128
 200b4f4:	10000a1e 	bne	r2,zero,200b520 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 200b4f8:	e0bffd17 	ldw	r2,-12(fp)
 200b4fc:	10c00217 	ldw	r3,8(r2)
 200b500:	e0bffe17 	ldw	r2,-8(fp)
 200b504:	1809883a 	mov	r4,r3
 200b508:	e17fff17 	ldw	r5,-4(fp)
 200b50c:	100d883a 	mov	r6,r2
 200b510:	200b6540 	call	200b654 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200b514:	1000021e 	bne	r2,zero,200b520 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200b518:	e0bffd17 	ldw	r2,-12(fp)
 200b51c:	00000806 	br	200b540 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 200b520:	e0bffd17 	ldw	r2,-12(fp)
 200b524:	10800017 	ldw	r2,0(r2)
 200b528:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200b52c:	e0fffd17 	ldw	r3,-12(fp)
 200b530:	00808074 	movhi	r2,513
 200b534:	10b5cc04 	addi	r2,r2,-10448
 200b538:	18bfcb1e 	bne	r3,r2,200b468 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200b53c:	0005883a 	mov	r2,zero
}
 200b540:	e037883a 	mov	sp,fp
 200b544:	dfc00117 	ldw	ra,4(sp)
 200b548:	df000017 	ldw	fp,0(sp)
 200b54c:	dec00204 	addi	sp,sp,8
 200b550:	f800283a 	ret

0200b554 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 200b554:	defffc04 	addi	sp,sp,-16
 200b558:	df000315 	stw	fp,12(sp)
 200b55c:	df000304 	addi	fp,sp,12
 200b560:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 200b564:	00bffa04 	movi	r2,-24
 200b568:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200b56c:	e03ffd15 	stw	zero,-12(fp)
 200b570:	00001d06 	br	200b5e8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 200b574:	00c08074 	movhi	r3,513
 200b578:	18f14e04 	addi	r3,r3,-15048
 200b57c:	e0bffd17 	ldw	r2,-12(fp)
 200b580:	10800324 	muli	r2,r2,12
 200b584:	1885883a 	add	r2,r3,r2
 200b588:	10800017 	ldw	r2,0(r2)
 200b58c:	1000131e 	bne	r2,zero,200b5dc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 200b590:	00c08074 	movhi	r3,513
 200b594:	18f14e04 	addi	r3,r3,-15048
 200b598:	e0bffd17 	ldw	r2,-12(fp)
 200b59c:	10800324 	muli	r2,r2,12
 200b5a0:	1885883a 	add	r2,r3,r2
 200b5a4:	e0ffff17 	ldw	r3,-4(fp)
 200b5a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 200b5ac:	00808074 	movhi	r2,513
 200b5b0:	10b5d004 	addi	r2,r2,-10432
 200b5b4:	10c00017 	ldw	r3,0(r2)
 200b5b8:	e0bffd17 	ldw	r2,-12(fp)
 200b5bc:	1880040e 	bge	r3,r2,200b5d0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 200b5c0:	00808074 	movhi	r2,513
 200b5c4:	10b5d004 	addi	r2,r2,-10432
 200b5c8:	e0fffd17 	ldw	r3,-12(fp)
 200b5cc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 200b5d0:	e0bffd17 	ldw	r2,-12(fp)
 200b5d4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 200b5d8:	00000606 	br	200b5f4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200b5dc:	e0bffd17 	ldw	r2,-12(fp)
 200b5e0:	10800044 	addi	r2,r2,1
 200b5e4:	e0bffd15 	stw	r2,-12(fp)
 200b5e8:	e0bffd17 	ldw	r2,-12(fp)
 200b5ec:	10800810 	cmplti	r2,r2,32
 200b5f0:	103fe01e 	bne	r2,zero,200b574 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 200b5f4:	e0bffe17 	ldw	r2,-8(fp)
}
 200b5f8:	e037883a 	mov	sp,fp
 200b5fc:	df000017 	ldw	fp,0(sp)
 200b600:	dec00104 	addi	sp,sp,4
 200b604:	f800283a 	ret

0200b608 <atexit>:
 200b608:	200b883a 	mov	r5,r4
 200b60c:	000d883a 	mov	r6,zero
 200b610:	0009883a 	mov	r4,zero
 200b614:	000f883a 	mov	r7,zero
 200b618:	200b6d01 	jmpi	200b6d0 <__register_exitproc>

0200b61c <exit>:
 200b61c:	defffe04 	addi	sp,sp,-8
 200b620:	000b883a 	mov	r5,zero
 200b624:	dc000015 	stw	r16,0(sp)
 200b628:	dfc00115 	stw	ra,4(sp)
 200b62c:	2021883a 	mov	r16,r4
 200b630:	200b8000 	call	200b800 <__call_exitprocs>
 200b634:	00808074 	movhi	r2,513
 200b638:	10b5c704 	addi	r2,r2,-10468
 200b63c:	11000017 	ldw	r4,0(r2)
 200b640:	20800f17 	ldw	r2,60(r4)
 200b644:	10000126 	beq	r2,zero,200b64c <exit+0x30>
 200b648:	103ee83a 	callr	r2
 200b64c:	8009883a 	mov	r4,r16
 200b650:	200b9a00 	call	200b9a0 <_exit>

0200b654 <memcmp>:
 200b654:	01c000c4 	movi	r7,3
 200b658:	3980192e 	bgeu	r7,r6,200b6c0 <memcmp+0x6c>
 200b65c:	2904b03a 	or	r2,r5,r4
 200b660:	11c4703a 	and	r2,r2,r7
 200b664:	10000f26 	beq	r2,zero,200b6a4 <memcmp+0x50>
 200b668:	20c00003 	ldbu	r3,0(r4)
 200b66c:	28800003 	ldbu	r2,0(r5)
 200b670:	1880151e 	bne	r3,r2,200b6c8 <memcmp+0x74>
 200b674:	31bfff84 	addi	r6,r6,-2
 200b678:	01ffffc4 	movi	r7,-1
 200b67c:	00000406 	br	200b690 <memcmp+0x3c>
 200b680:	20c00003 	ldbu	r3,0(r4)
 200b684:	28800003 	ldbu	r2,0(r5)
 200b688:	31bfffc4 	addi	r6,r6,-1
 200b68c:	18800e1e 	bne	r3,r2,200b6c8 <memcmp+0x74>
 200b690:	21000044 	addi	r4,r4,1
 200b694:	29400044 	addi	r5,r5,1
 200b698:	31fff91e 	bne	r6,r7,200b680 <memcmp+0x2c>
 200b69c:	0005883a 	mov	r2,zero
 200b6a0:	f800283a 	ret
 200b6a4:	20c00017 	ldw	r3,0(r4)
 200b6a8:	28800017 	ldw	r2,0(r5)
 200b6ac:	1880041e 	bne	r3,r2,200b6c0 <memcmp+0x6c>
 200b6b0:	31bfff04 	addi	r6,r6,-4
 200b6b4:	21000104 	addi	r4,r4,4
 200b6b8:	29400104 	addi	r5,r5,4
 200b6bc:	39bff936 	bltu	r7,r6,200b6a4 <memcmp+0x50>
 200b6c0:	303fe91e 	bne	r6,zero,200b668 <memcmp+0x14>
 200b6c4:	003ff506 	br	200b69c <memcmp+0x48>
 200b6c8:	1885c83a 	sub	r2,r3,r2
 200b6cc:	f800283a 	ret

0200b6d0 <__register_exitproc>:
 200b6d0:	defffa04 	addi	sp,sp,-24
 200b6d4:	00808074 	movhi	r2,513
 200b6d8:	10b5c704 	addi	r2,r2,-10468
 200b6dc:	dc000315 	stw	r16,12(sp)
 200b6e0:	14000017 	ldw	r16,0(r2)
 200b6e4:	dc400415 	stw	r17,16(sp)
 200b6e8:	dfc00515 	stw	ra,20(sp)
 200b6ec:	80805217 	ldw	r2,328(r16)
 200b6f0:	2023883a 	mov	r17,r4
 200b6f4:	10003e26 	beq	r2,zero,200b7f0 <__register_exitproc+0x120>
 200b6f8:	10c00117 	ldw	r3,4(r2)
 200b6fc:	020007c4 	movi	r8,31
 200b700:	40c0180e 	bge	r8,r3,200b764 <__register_exitproc+0x94>
 200b704:	00800034 	movhi	r2,0
 200b708:	10800004 	addi	r2,r2,0
 200b70c:	1000061e 	bne	r2,zero,200b728 <__register_exitproc+0x58>
 200b710:	00bfffc4 	movi	r2,-1
 200b714:	dfc00517 	ldw	ra,20(sp)
 200b718:	dc400417 	ldw	r17,16(sp)
 200b71c:	dc000317 	ldw	r16,12(sp)
 200b720:	dec00604 	addi	sp,sp,24
 200b724:	f800283a 	ret
 200b728:	01006404 	movi	r4,400
 200b72c:	d9400015 	stw	r5,0(sp)
 200b730:	d9800115 	stw	r6,4(sp)
 200b734:	d9c00215 	stw	r7,8(sp)
 200b738:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 200b73c:	d9400017 	ldw	r5,0(sp)
 200b740:	d9800117 	ldw	r6,4(sp)
 200b744:	d9c00217 	ldw	r7,8(sp)
 200b748:	103ff126 	beq	r2,zero,200b710 <__register_exitproc+0x40>
 200b74c:	80c05217 	ldw	r3,328(r16)
 200b750:	10000115 	stw	zero,4(r2)
 200b754:	10c00015 	stw	r3,0(r2)
 200b758:	80805215 	stw	r2,328(r16)
 200b75c:	10006215 	stw	zero,392(r2)
 200b760:	10006315 	stw	zero,396(r2)
 200b764:	10c00117 	ldw	r3,4(r2)
 200b768:	88000d1e 	bne	r17,zero,200b7a0 <__register_exitproc+0xd0>
 200b76c:	19000084 	addi	r4,r3,2
 200b770:	2109883a 	add	r4,r4,r4
 200b774:	18c00044 	addi	r3,r3,1
 200b778:	2109883a 	add	r4,r4,r4
 200b77c:	1109883a 	add	r4,r2,r4
 200b780:	10c00115 	stw	r3,4(r2)
 200b784:	0005883a 	mov	r2,zero
 200b788:	21400015 	stw	r5,0(r4)
 200b78c:	dfc00517 	ldw	ra,20(sp)
 200b790:	dc400417 	ldw	r17,16(sp)
 200b794:	dc000317 	ldw	r16,12(sp)
 200b798:	dec00604 	addi	sp,sp,24
 200b79c:	f800283a 	ret
 200b7a0:	02400044 	movi	r9,1
 200b7a4:	12806217 	ldw	r10,392(r2)
 200b7a8:	48d2983a 	sll	r9,r9,r3
 200b7ac:	19000804 	addi	r4,r3,32
 200b7b0:	18d1883a 	add	r8,r3,r3
 200b7b4:	2109883a 	add	r4,r4,r4
 200b7b8:	4211883a 	add	r8,r8,r8
 200b7bc:	2109883a 	add	r4,r4,r4
 200b7c0:	1109883a 	add	r4,r2,r4
 200b7c4:	1211883a 	add	r8,r2,r8
 200b7c8:	5254b03a 	or	r10,r10,r9
 200b7cc:	21c02215 	stw	r7,136(r4)
 200b7d0:	41802215 	stw	r6,136(r8)
 200b7d4:	12806215 	stw	r10,392(r2)
 200b7d8:	01000084 	movi	r4,2
 200b7dc:	893fe31e 	bne	r17,r4,200b76c <__register_exitproc+0x9c>
 200b7e0:	11006317 	ldw	r4,396(r2)
 200b7e4:	2252b03a 	or	r9,r4,r9
 200b7e8:	12406315 	stw	r9,396(r2)
 200b7ec:	003fdf06 	br	200b76c <__register_exitproc+0x9c>
 200b7f0:	00808074 	movhi	r2,513
 200b7f4:	10b62d04 	addi	r2,r2,-10060
 200b7f8:	80805215 	stw	r2,328(r16)
 200b7fc:	003fbe06 	br	200b6f8 <__register_exitproc+0x28>

0200b800 <__call_exitprocs>:
 200b800:	00808074 	movhi	r2,513
 200b804:	10b5c704 	addi	r2,r2,-10468
 200b808:	10800017 	ldw	r2,0(r2)
 200b80c:	defff304 	addi	sp,sp,-52
 200b810:	df000b15 	stw	fp,44(sp)
 200b814:	d8800015 	stw	r2,0(sp)
 200b818:	10805204 	addi	r2,r2,328
 200b81c:	dd400815 	stw	r21,32(sp)
 200b820:	dfc00c15 	stw	ra,48(sp)
 200b824:	ddc00a15 	stw	r23,40(sp)
 200b828:	dd800915 	stw	r22,36(sp)
 200b82c:	dd000715 	stw	r20,28(sp)
 200b830:	dcc00615 	stw	r19,24(sp)
 200b834:	dc800515 	stw	r18,20(sp)
 200b838:	dc400415 	stw	r17,16(sp)
 200b83c:	dc000315 	stw	r16,12(sp)
 200b840:	d9000115 	stw	r4,4(sp)
 200b844:	2839883a 	mov	fp,r5
 200b848:	d8800215 	stw	r2,8(sp)
 200b84c:	057fffc4 	movi	r21,-1
 200b850:	d8800017 	ldw	r2,0(sp)
 200b854:	ddc00217 	ldw	r23,8(sp)
 200b858:	14805217 	ldw	r18,328(r2)
 200b85c:	90001726 	beq	r18,zero,200b8bc <__call_exitprocs+0xbc>
 200b860:	94400117 	ldw	r17,4(r18)
 200b864:	8c3fffc4 	addi	r16,r17,-1
 200b868:	80001116 	blt	r16,zero,200b8b0 <__call_exitprocs+0xb0>
 200b86c:	8c400044 	addi	r17,r17,1
 200b870:	8427883a 	add	r19,r16,r16
 200b874:	8c63883a 	add	r17,r17,r17
 200b878:	95802204 	addi	r22,r18,136
 200b87c:	9ce7883a 	add	r19,r19,r19
 200b880:	8c63883a 	add	r17,r17,r17
 200b884:	b4e7883a 	add	r19,r22,r19
 200b888:	9463883a 	add	r17,r18,r17
 200b88c:	e0001726 	beq	fp,zero,200b8ec <__call_exitprocs+0xec>
 200b890:	8c87c83a 	sub	r3,r17,r18
 200b894:	b0c7883a 	add	r3,r22,r3
 200b898:	18c01e17 	ldw	r3,120(r3)
 200b89c:	1f001326 	beq	r3,fp,200b8ec <__call_exitprocs+0xec>
 200b8a0:	843fffc4 	addi	r16,r16,-1
 200b8a4:	9cffff04 	addi	r19,r19,-4
 200b8a8:	8c7fff04 	addi	r17,r17,-4
 200b8ac:	857ff71e 	bne	r16,r21,200b88c <__call_exitprocs+0x8c>
 200b8b0:	00800034 	movhi	r2,0
 200b8b4:	10800004 	addi	r2,r2,0
 200b8b8:	10002a1e 	bne	r2,zero,200b964 <__call_exitprocs+0x164>
 200b8bc:	dfc00c17 	ldw	ra,48(sp)
 200b8c0:	df000b17 	ldw	fp,44(sp)
 200b8c4:	ddc00a17 	ldw	r23,40(sp)
 200b8c8:	dd800917 	ldw	r22,36(sp)
 200b8cc:	dd400817 	ldw	r21,32(sp)
 200b8d0:	dd000717 	ldw	r20,28(sp)
 200b8d4:	dcc00617 	ldw	r19,24(sp)
 200b8d8:	dc800517 	ldw	r18,20(sp)
 200b8dc:	dc400417 	ldw	r17,16(sp)
 200b8e0:	dc000317 	ldw	r16,12(sp)
 200b8e4:	dec00d04 	addi	sp,sp,52
 200b8e8:	f800283a 	ret
 200b8ec:	91000117 	ldw	r4,4(r18)
 200b8f0:	88c00017 	ldw	r3,0(r17)
 200b8f4:	213fffc4 	addi	r4,r4,-1
 200b8f8:	24001526 	beq	r4,r16,200b950 <__call_exitprocs+0x150>
 200b8fc:	88000015 	stw	zero,0(r17)
 200b900:	183fe726 	beq	r3,zero,200b8a0 <__call_exitprocs+0xa0>
 200b904:	00800044 	movi	r2,1
 200b908:	1408983a 	sll	r4,r2,r16
 200b90c:	91406217 	ldw	r5,392(r18)
 200b910:	95000117 	ldw	r20,4(r18)
 200b914:	214a703a 	and	r5,r4,r5
 200b918:	28000b26 	beq	r5,zero,200b948 <__call_exitprocs+0x148>
 200b91c:	91406317 	ldw	r5,396(r18)
 200b920:	2148703a 	and	r4,r4,r5
 200b924:	20000c1e 	bne	r4,zero,200b958 <__call_exitprocs+0x158>
 200b928:	99400017 	ldw	r5,0(r19)
 200b92c:	d9000117 	ldw	r4,4(sp)
 200b930:	183ee83a 	callr	r3
 200b934:	90c00117 	ldw	r3,4(r18)
 200b938:	1d3fc51e 	bne	r3,r20,200b850 <__call_exitprocs+0x50>
 200b93c:	b8c00017 	ldw	r3,0(r23)
 200b940:	1cbfd726 	beq	r3,r18,200b8a0 <__call_exitprocs+0xa0>
 200b944:	003fc206 	br	200b850 <__call_exitprocs+0x50>
 200b948:	183ee83a 	callr	r3
 200b94c:	003ff906 	br	200b934 <__call_exitprocs+0x134>
 200b950:	94000115 	stw	r16,4(r18)
 200b954:	003fea06 	br	200b900 <__call_exitprocs+0x100>
 200b958:	99000017 	ldw	r4,0(r19)
 200b95c:	183ee83a 	callr	r3
 200b960:	003ff406 	br	200b934 <__call_exitprocs+0x134>
 200b964:	90c00117 	ldw	r3,4(r18)
 200b968:	1800071e 	bne	r3,zero,200b988 <__call_exitprocs+0x188>
 200b96c:	90c00017 	ldw	r3,0(r18)
 200b970:	18000926 	beq	r3,zero,200b998 <__call_exitprocs+0x198>
 200b974:	9009883a 	mov	r4,r18
 200b978:	b8c00015 	stw	r3,0(r23)
 200b97c:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 200b980:	bc800017 	ldw	r18,0(r23)
 200b984:	003fb506 	br	200b85c <__call_exitprocs+0x5c>
 200b988:	90c00017 	ldw	r3,0(r18)
 200b98c:	902f883a 	mov	r23,r18
 200b990:	1825883a 	mov	r18,r3
 200b994:	003fb106 	br	200b85c <__call_exitprocs+0x5c>
 200b998:	0007883a 	mov	r3,zero
 200b99c:	003ffb06 	br	200b98c <__call_exitprocs+0x18c>

0200b9a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200b9a0:	defffc04 	addi	sp,sp,-16
 200b9a4:	df000315 	stw	fp,12(sp)
 200b9a8:	df000304 	addi	fp,sp,12
 200b9ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 200b9b0:	0001883a 	nop
 200b9b4:	e0bfff17 	ldw	r2,-4(fp)
 200b9b8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 200b9bc:	e0bffd17 	ldw	r2,-12(fp)
 200b9c0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 200b9c4:	e0bffe17 	ldw	r2,-8(fp)
 200b9c8:	10000226 	beq	r2,zero,200b9d4 <_exit+0x34>
    ALT_SIM_FAIL();
 200b9cc:	002af070 	cmpltui	zero,zero,43969
 200b9d0:	00000106 	br	200b9d8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 200b9d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200b9d8:	003fff06 	br	200b9d8 <_exit+0x38>
